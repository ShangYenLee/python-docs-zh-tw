# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Leon H., 2017
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-26 00:17+0000\n"
"PO-Revision-Date: 2023-05-02 17:43+0800\n"
"Last-Translator: Matt Wang <mattwang44@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.2.2\n"

#: ../../c-api/weakref.rst:6
msgid "Weak Reference Objects"
msgstr "弱參照物件"

#: ../../c-api/weakref.rst:8
#, fuzzy
msgid ""
"Python supports *weak references* as first-class objects.  There are two "
"specific object types which directly implement weak references.  The first "
"is a simple reference object, and the second acts as a proxy for the "
"original object as much as it can."
msgstr ""
"Python 支援*弱引用*作為一等物件。有兩種直接實作弱引用的特定物件型別。第一個是"
"一個簡單的引用物件，第二個盡可能充當原始物件的代理。"

#: ../../c-api/weakref.rst:16
#, fuzzy
msgid ""
"Return true if *ob* is either a reference or proxy object.  This function "
"always succeeds."
msgstr "如果 *ob* 是引用物件或代理物件，則回傳 true。這個函式總是成功的。"

#: ../../c-api/weakref.rst:22
#, fuzzy
msgid ""
"Return true if *ob* is a reference object.  This function always succeeds."
msgstr "如果 *ob* 是引用物件，則回傳 true。這個函式總是成功的。"

#: ../../c-api/weakref.rst:27
#, fuzzy
msgid "Return true if *ob* is a proxy object.  This function always succeeds."
msgstr "如果 *ob* 是代理物件，則回傳 true。這個函式總是成功的。"

#: ../../c-api/weakref.rst:32
#, fuzzy
msgid ""
"Return a weak reference object for the object *ob*.  This will always return "
"a new reference, but is not guaranteed to create a new object; an existing "
"reference object may be returned.  The second parameter, *callback*, can be "
"a callable object that receives notification when *ob* is garbage collected; "
"it should accept a single parameter, which will be the weak reference object "
"itself. *callback* may also be ``None`` or ``NULL``.  If *ob* is not a "
"weakly referencable object, or if *callback* is not callable, ``None``, or "
"``NULL``, this will return ``NULL`` and raise :exc:`TypeError`."
msgstr ""
"回傳物件 *ob* 的弱引用物件。這將始終回傳一個新引用，但不保證建立一個新物件；"
"可能會回傳一個現有的引用物件。第二個參數 *callback* 可以是一個可呼叫物件，當 "
"*ob* 被垃圾回收時接收通知；它應該接受一個參數，這將是弱引用物件本身。 "
"*callback* 也可以是 ``None``或 ``NULL`` 。如果 *ob* 不是弱引用物件，或者如果 "
"*callback* 不可呼叫、``None`` 或 ``NULL``，這將回傳 ``NULL`` 並引發 :exc:"
"`TypeError`。"

#: ../../c-api/weakref.rst:44
#, fuzzy
msgid ""
"Return a weak reference proxy object for the object *ob*.  This will always "
"return a new reference, but is not guaranteed to create a new object; an "
"existing proxy object may be returned.  The second parameter, *callback*, "
"can be a callable object that receives notification when *ob* is garbage "
"collected; it should accept a single parameter, which will be the weak "
"reference object itself. *callback* may also be ``None`` or ``NULL``.  If "
"*ob* is not a weakly referencable object, or if *callback* is not callable, "
"``None``, or ``NULL``, this will return ``NULL`` and raise :exc:`TypeError`."
msgstr ""
"回傳物件 *ob* 的弱引用代理物件。這將始終回傳一個新引用，但不保證建立一個新物"
"件；可能會回傳一個現有的代理物件。第二個參數 *callback* 可以是一個可呼叫物"
"件，當 *ob* 被垃圾回收時接收通知；它應該接受一個參數，這將是弱引用物件本身。 "
"*callback* 也可以是 ``None``或 ``NULL`` 。如果 *ob* 不是弱引用物件，或者如果 "
"*callback* 不可呼叫、``None`` 或 ``NULL``，這將回傳 ``NULL`` 並引發 :exc:"
"`TypeError`。"

#: ../../c-api/weakref.rst:56
#, fuzzy
msgid ""
"Return the referenced object from a weak reference, *ref*.  If the referent "
"is no longer live, returns :const:`Py_None`."
msgstr ""
"從弱引用 *ref* 回傳引用的物件。如果引用物件不再存在，則回傳 :const:"
"`Py_None`。"

#: ../../c-api/weakref.rst:61
#, fuzzy
msgid ""
"This function returns a :term:`borrowed reference` to the referenced object. "
"This means that you should always call :c:func:`Py_INCREF` on the object "
"except when it cannot be destroyed before the last usage of the borrowed "
"reference."
msgstr ""
"此函式回傳引用物件的借用引用。這意味著您應該始終在物件上呼叫 :c:func:"
"`Py_INCREF` 除非在最後一次使用借用引用之前無法銷毀它。"

#: ../../c-api/weakref.rst:69
#, fuzzy
msgid "Similar to :c:func:`PyWeakref_GetObject`, but does no error checking."
msgstr "類似於 :c:func:`PyWeakref_GetObject`，但不進行錯誤檢查。"

#: ../../c-api/weakref.rst:74
#, fuzzy
msgid ""
"This function is called by the :c:member:`~PyTypeObject.tp_dealloc` handler "
"to clear weak references."
msgstr ""
"此函式由 :c:member:`~PyTypeObject.tp_dealloc` 處理程式呼叫以清除弱引用。"

#: ../../c-api/weakref.rst:77
#, fuzzy
msgid ""
"This iterates through the weak references for *object* and calls callbacks "
"for those references which have one. It returns when all callbacks have been "
"attempted."
msgstr ""
"這將遍歷 *object* 的弱引用，並為那些具有弱引用的引用呼叫回呼。嘗試所有回呼後"
"回傳。"
