# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-31 08:13+0000\n"
"PO-Revision-Date: 2023-05-02 17:22+0800\n"
"Last-Translator: Matt Wang <mattwang44@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.2.2\n"

#: ../../c-api/type.rst:6
msgid "Type Objects"
msgstr "型別物件"

#: ../../c-api/type.rst:13
#, fuzzy
msgid "The C structure of the objects used to describe built-in types."
msgstr "用於描述內建型別的物件的 C 結構。"

#: ../../c-api/type.rst:18
#, fuzzy
msgid ""
"This is the type object for type objects; it is the same object as :class:"
"`type` in the Python layer."
msgstr ""
"這是型別物件的型別物件；它與 Python 層中的 :class:`type` 是同一個物件。"

#: ../../c-api/type.rst:24
#, fuzzy
msgid ""
"Return non-zero if the object *o* is a type object, including instances of "
"types derived from the standard type object.  Return 0 in all other cases. "
"This function always succeeds."
msgstr ""
"如果物件 *o* 是型別物件，包括從標準型別物件派生的型別的實例，則回傳非零值。在"
"所有其他情況下回傳 0。這個函式總是成功的。"

#: ../../c-api/type.rst:31
#, fuzzy
msgid ""
"Return non-zero if the object *o* is a type object, but not a subtype of the "
"standard type object.  Return 0 in all other cases.  This function always "
"succeeds."
msgstr ""
"如果物件 *o* 是型別物件，但不是標準型別物件的子型別，則回傳非零值。在所有其他"
"情況下回傳 0。這個函式總是成功的。"

#: ../../c-api/type.rst:38
#, fuzzy
msgid "Clear the internal lookup cache. Return the current version tag."
msgstr "清除內部查找快取。回傳當前版本標籤。"

#: ../../c-api/type.rst:42
#, fuzzy
msgid ""
"Return the :c:member:`~PyTypeObject.tp_flags` member of *type*. This "
"function is primarily meant for use with ``Py_LIMITED_API``; the individual "
"flag bits are guaranteed to be stable across Python releases, but access to :"
"c:member:`~PyTypeObject.tp_flags` itself is not part of the limited API."
msgstr ""
"回傳 *type* 的 :c:member:`~PyTypeObject.tp_flags` 成員。此函式主要用於 "
"``Py_LIMITED_API``；保證各個旗標位在 Python 版本中保持穩定，但訪問 :c:member:"
"`~PyTypeObject.tp_flags` 本身並不是受限 API 的一部分。"

#: ../../c-api/type.rst:49
msgid "The return type is now ``unsigned long`` rather than ``long``."
msgstr "回傳型別現在是 ``unsigned long`` 而不是 ``long``。"

#: ../../c-api/type.rst:55
#, fuzzy
msgid ""
"Invalidate the internal lookup cache for the type and all of its subtypes.  "
"This function must be called after any manual modification of the attributes "
"or base classes of the type."
msgstr ""
"使型別及其所有子型別的內部查找快取無效。在對該型別的屬性或基底類別進行任何手"
"動修改後，必須呼叫此函式。"

#: ../../c-api/type.rst:62
#, fuzzy
msgid ""
"Return non-zero if the type object *o* sets the feature *feature*. Type "
"features are denoted by single bit flags."
msgstr ""
"如果型別物件 *o* 設定了特徵 *feature*，則回傳非零值。型別特徵由單位旗標表示。"

#: ../../c-api/type.rst:68
#, fuzzy
msgid ""
"Return true if the type object includes support for the cycle detector; this "
"tests the type flag :const:`Py_TPFLAGS_HAVE_GC`."
msgstr ""
"如果型別物件包含對循環檢測器的支援，則回傳 true；這將測試型別旗標 :const:"
"`Py_TPFLAGS_HAVE_GC`。"

#: ../../c-api/type.rst:74
msgid "Return true if *a* is a subtype of *b*."
msgstr "如果 *a* 是 *b* 的子型別，則回傳 true。"

#: ../../c-api/type.rst:76
#, fuzzy
msgid ""
"This function only checks for actual subtypes, which means that :meth:"
"`~class.__subclasscheck__` is not called on *b*.  Call :c:func:"
"`PyObject_IsSubclass` to do the same check that :func:`issubclass` would do."
msgstr ""
"這個函式只檢查實際的子型別，這意味著 :meth:`~class.__subclasscheck__` 不會在 "
"*b* 上呼叫。呼叫 :c:func:`PyObject_IsSubclass` 進行與 :func:`issubclass` 相同"
"的檢查。"

#: ../../c-api/type.rst:84
#, fuzzy
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_alloc` slot of a type "
"object.  Use Python's default memory allocation mechanism to allocate a new "
"instance and initialize all its contents to ``NULL``."
msgstr ""
"型別物件的 :c:member:`~PyTypeObject.tp_alloc` 插槽的通用處理程式。使用 "
"Python 的預設記憶體分配機制分配一個新實例並將其所有內容初始化為 ``NULL`` 。"

#: ../../c-api/type.rst:90
#, fuzzy
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_new` slot of a type "
"object.  Create a new instance using the type's :c:member:`~PyTypeObject."
"tp_alloc` slot."
msgstr ""
"型別物件的 :c:member:`~PyTypeObject.tp_new` 插槽的通用處理程式。使用型別的 :"
"c:member:`~PyTypeObject.tp_alloc` 槽建立一個新實例。"

#: ../../c-api/type.rst:95
#, fuzzy
msgid ""
"Finalize a type object.  This should be called on all type objects to finish "
"their initialization.  This function is responsible for adding inherited "
"slots from a type's base class.  Return ``0`` on success, or return ``-1`` "
"and sets an exception on error."
msgstr ""
"完成型別物件。這應該在所有型別對像上呼叫以完成它們的初始化。此函式負責新增從"
"型別的基底類別繼承的插槽。成功回傳 ``0``，或回傳 ``-1``並設定錯誤例外。"

#: ../../c-api/type.rst:101
#, fuzzy
msgid ""
"If some of the base classes implements the GC protocol and the provided type "
"does not include the :const:`Py_TPFLAGS_HAVE_GC` in its flags, then the GC "
"protocol will be automatically implemented from its parents. On the "
"contrary, if the type being created does include :const:`Py_TPFLAGS_HAVE_GC` "
"in its flags then it **must** implement the GC protocol itself by at least "
"implementing the :c:member:`~PyTypeObject.tp_traverse` handle."
msgstr ""
"如果一些基底類別實作了 GC 協定並且提供的型別在其旗標中不包含 "
"Py_TPFLAGS_HAVE_GC ，那麼 GC 協定將自動從其父級實作。相反，如果正在建立的型別"
"在其旗標中確實包含 :const:`Py_TPFLAGS_HAVE_GC`，那麼它**必須**通過至少實作:c:"
"member:`~PyTypeObject.tp_traverse` 句柄來實作 GC 協定本身。"

#: ../../c-api/type.rst:111
#, fuzzy
msgid ""
"Return the type's name. Equivalent to getting the type's ``__name__`` "
"attribute."
msgstr "回傳型別的名稱。相當於獲取型別的 ``__name__`` 屬性。"

#: ../../c-api/type.rst:117
#, fuzzy
msgid ""
"Return the type's qualified name. Equivalent to getting the type's "
"``__qualname__`` attribute."
msgstr "回傳型別的限定名稱。相當於獲取型別的 ``__qualname__`` 屬性。"

#: ../../c-api/type.rst:124
#, fuzzy
msgid ""
"Return the function pointer stored in the given slot. If the result is "
"``NULL``, this indicates that either the slot is ``NULL``, or that the "
"function was called with invalid parameters. Callers will typically cast the "
"result pointer into the appropriate function type."
msgstr ""
"回傳儲存在給定槽中的函式指標。如果結果為 ``NULL`` ，則表示插槽為 ``NULL`` ，"
"或者使用無效參數呼叫了該函式。呼叫者通常會將結果指標轉換為適當的函式型別。"

#: ../../c-api/type.rst:130
#, fuzzy
msgid ""
"See :c:member:`PyType_Slot.slot` for possible values of the *slot* argument."
msgstr "請參閱:c:member:`PyType_Slot.slot` 了解 *slot* 參數的可能值。"

#: ../../c-api/type.rst:134
#, fuzzy
msgid ""
":c:func:`PyType_GetSlot` can now accept all types. Previously, it was "
"limited to :ref:`heap types <heap-types>`."
msgstr ""
":c:func:`PyType_GetSlot` 現在可以接受所有型別。以前，它僅限於 :ref:`heap "
"types <heap-types>`。"

#: ../../c-api/type.rst:140
#, fuzzy
msgid ""
"Return the module object associated with the given type when the type was "
"created using :c:func:`PyType_FromModuleAndSpec`."
msgstr ""
"使用 PyType_FromModuleAndSpec 建立型別時，回傳與給定型別關聯的模組物件。"

#: ../../c-api/type.rst:143 ../../c-api/type.rst:163
#, fuzzy
msgid ""
"If no module is associated with the given type, sets :py:class:`TypeError` "
"and returns ``NULL``."
msgstr ""
"如果沒有模組與給定型別關聯，則設定 :py:class:`TypeError` 並回傳 ``NULL``。"

#: ../../c-api/type.rst:146
#, fuzzy
msgid ""
"This function is usually used to get the module in which a method is "
"defined. Note that in such a method, ``PyType_GetModule(Py_TYPE(self))`` may "
"not return the intended result. ``Py_TYPE(self)`` may be a *subclass* of the "
"intended class, and subclasses are not necessarily defined in the same "
"module as their superclass. See :c:type:`PyCMethod` to get the class that "
"defines the method. See :c:func:`PyType_GetModuleByDef` for cases when "
"``PyCMethod`` cannot be used."
msgstr ""
"此函式通常用於獲取定義方法的模組。請注意，在這樣的方法中，"
"``PyType_GetModule(Py_TYPE(self))`` 可能不會回傳預期的結果。 "
"``Py_TYPE(self)`` 可能是預期類的*子類別*，子類別不一定在與其超類相同的模組中"
"定義。請參閱:c:type:`PyCMethod` 以獲取定義該方法的類。有關無法使用 "
"``PyCMethod`` 的情況，請參閱 :c:func：`PyType_GetModuleByDef`。"

#: ../../c-api/type.rst:159
#, fuzzy
msgid ""
"Return the state of the module object associated with the given type. This "
"is a shortcut for calling :c:func:`PyModule_GetState()` on the result of :c:"
"func:`PyType_GetModule`."
msgstr ""
"回傳與給定型別關聯的模組物件的狀態。這是在 :c:func:`PyType_GetModule` 的結果"
"上呼叫 :c:func:`PyModule_GetState()` 的快捷方式。"

#: ../../c-api/type.rst:166
#, fuzzy
msgid ""
"If the *type* has an associated module but its state is ``NULL``, returns "
"``NULL`` without setting an exception."
msgstr ""
"如果 *type* 有關聯模組但其狀態為 ``NULL`` ，則回傳 ``NULL`` 而不設定例外。"

#: ../../c-api/type.rst:173
#, fuzzy
msgid ""
"Find the first superclass whose module was created from the given :c:type:"
"`PyModuleDef` *def*, and return that module."
msgstr ""
"找到第一個超類，其模組是根據給定的:c:type:`PyModuleDef` *def* 建立的，並回傳"
"該模組。"

#: ../../c-api/type.rst:176
msgid ""
"If no module is found, raises a :py:class:`TypeError` and returns ``NULL``."
msgstr "如果未找到模組，則引發 :py:class:`TypeError` 並回傳 ``NULL``。"

#: ../../c-api/type.rst:178
#, fuzzy
msgid ""
"This function is intended to be used together with :c:func:"
"`PyModule_GetState()` to get module state from slot methods (such as :c:"
"member:`~PyTypeObject.tp_init` or :c:member:`~PyNumberMethods.nb_add`) and "
"other places where a method's defining class cannot be passed using the :c:"
"type:`PyCMethod` calling convention."
msgstr ""
"此函式旨在與 :c:func:`PyModule_GetState()` 一起使用，以從槽方法（例如 :c:"
"member:`~PyTypeObject.tp_init` 或 :c:member:`~PyNumberMethods）獲取模組狀"
"態。 nb_add`) 和其他無法使用 PyCMethod 呼叫約定傳遞方法定義類的地方。"

#: ../../c-api/type.rst:188
#, fuzzy
msgid "Creating Heap-Allocated Types"
msgstr "建立堆分配型別"

#: ../../c-api/type.rst:190
#, fuzzy
msgid ""
"The following functions and structs are used to create :ref:`heap types "
"<heap-types>`."
msgstr "以下函式和結構用於建立 :ref:`堆型別 <heap-types>`。"

#: ../../c-api/type.rst:195
#, fuzzy
msgid ""
"Creates and returns a :ref:`heap type <heap-types>` from the *spec* (:const:"
"`Py_TPFLAGS_HEAPTYPE`)."
msgstr ""
"從 *spec* (:const:`Py_TPFLAGS_HEAPTYPE`) 建立並回傳一個堆型別 <heap-types>`。"

#: ../../c-api/type.rst:198
#, fuzzy
msgid ""
"The *bases* argument can be used to specify base classes; it can either be "
"only one class or a tuple of classes. If *bases* is ``NULL``, the "
"*Py_tp_bases* slot is used instead. If that also is ``NULL``, the "
"*Py_tp_base* slot is used instead. If that also is ``NULL``, the new type "
"derives from :class:`object`."
msgstr ""
"*bases* 參數可用於指定基底類別；它可以只是一個類，也可以是類的元組。如果 "
"*bases* 為 ``NULL`` ，則使用 *Py_tp_bases* 插槽。如果這也是 ``NULL`` ，則使"
"用 *Py_tp_base* 插槽。如果這也是 ``NULL`` ，則新型別派生自 :class:`object`。"

#: ../../c-api/type.rst:204
#, fuzzy
msgid ""
"The *module* argument can be used to record the module in which the new "
"class is defined. It must be a module object or ``NULL``. If not ``NULL``, "
"the module is associated with the new type and can later be retrieved with :"
"c:func:`PyType_GetModule`. The associated module is not inherited by "
"subclasses; it must be specified for each class individually."
msgstr ""
"*module* 參數可用於記錄定義新類的模組。它必須是一個模組對像或 ``NULL`` 。如果"
"不是 ``NULL`` ，模組與新型別相關聯，稍後可以使用 PyType_GetModule 檢索。關聯"
"模組不被子類別繼承；必須為每個類單獨指定。"

#: ../../c-api/type.rst:211
#, fuzzy
msgid "This function calls :c:func:`PyType_Ready` on the new type."
msgstr "此函式在新型別上呼叫 :c:func:`PyType_Ready`。"

#: ../../c-api/type.rst:217
#, fuzzy
msgid ""
"The function now accepts a single class as the *bases* argument and ``NULL`` "
"as the ``tp_doc`` slot."
msgstr ""
"該函式現在接受一個類作為 *bases* 參數，並將 ``NULL`` 作為“tp_doc”插槽。"

#: ../../c-api/type.rst:222
msgid "Equivalent to ``PyType_FromModuleAndSpec(NULL, spec, bases)``."
msgstr "等價於 ``PyType_FromModuleAndSpec(NULL, spec, bases)``\\ 。"

#: ../../c-api/type.rst:228
msgid "Equivalent to ``PyType_FromSpecWithBases(spec, NULL)``."
msgstr "等價於 ``PyType_FromSpecWithBases(spec, NULL)``\\ 。"

#: ../../c-api/type.rst:232
#, fuzzy
msgid "Structure defining a type's behavior."
msgstr "定義型別行為的結構。"

#: ../../c-api/type.rst:236
#, fuzzy
msgid "Name of the type, used to set :c:member:`PyTypeObject.tp_name`."
msgstr "型別名稱，用於設定 :c:member:`PyTypeObject.tp_name`。"

#: ../../c-api/type.rst:241
#, fuzzy
msgid ""
"Size of the instance in bytes, used to set :c:member:`PyTypeObject."
"tp_basicsize` and :c:member:`PyTypeObject.tp_itemsize`."
msgstr ""
"實例的大小（以位元組為單位），用於設定:c:member:`PyTypeObject.tp_basicsize` "
"和:c:member:`PyTypeObject.tp_itemsize`。"

#: ../../c-api/type.rst:247
#, fuzzy
msgid "Type flags, used to set :c:member:`PyTypeObject.tp_flags`."
msgstr "型別旗標，用於設定:c:member:`PyTypeObject.tp_flags`。"

#: ../../c-api/type.rst:249
#, fuzzy
msgid ""
"If the ``Py_TPFLAGS_HEAPTYPE`` flag is not set, :c:func:"
"`PyType_FromSpecWithBases` sets it automatically."
msgstr ""
"如果未設定 Py_TPFLAGS_HEAPTYPE 旗標，PyType_FromSpecWithBases 會自動設定它。"

#: ../../c-api/type.rst:254
#, fuzzy
msgid ""
"Array of :c:type:`PyType_Slot` structures. Terminated by the special slot "
"value ``{0, NULL}``."
msgstr ":c:type:`PyType_Slot` 結構數組。由特殊槽值 ``{0, NULL}`` 終止。"

#: ../../c-api/type.rst:259
#, fuzzy
msgid ""
"Structure defining optional functionality of a type, containing a slot ID "
"and a value pointer."
msgstr "定義型別的可選功能的結構，包含槽 ID 和值指標。"

#: ../../c-api/type.rst:264
#, fuzzy
msgid "A slot ID."
msgstr "插槽 ID。"

#: ../../c-api/type.rst:266
#, fuzzy
msgid ""
"Slot IDs are named like the field names of the structures :c:type:"
"`PyTypeObject`, :c:type:`PyNumberMethods`, :c:type:`PySequenceMethods`, :c:"
"type:`PyMappingMethods` and :c:type:`PyAsyncMethods` with an added ``Py_`` "
"prefix. For example, use:"
msgstr ""
"插槽 ID 的命名類似於結構的欄位名稱 :c:type:`PyTypeObject`、:c:type:"
"`PyNumberMethods`、:c:type:`PySequenceMethods`、:c:type:`PyMappingMethods` "
"和 :c: type:`PyAsyncMethods` 新增了``Py_`` 前綴。例如，使用："

#: ../../c-api/type.rst:272
#, fuzzy
msgid "``Py_tp_dealloc`` to set :c:member:`PyTypeObject.tp_dealloc`"
msgstr "``Py_tp_dealloc`` 設定 :c:member:`PyTypeObject.tp_dealloc`"

#: ../../c-api/type.rst:273
#, fuzzy
msgid "``Py_nb_add`` to set :c:member:`PyNumberMethods.nb_add`"
msgstr "``Py_nb_add`` 設定 :c:member:`PyNumberMethods.nb_add`"

#: ../../c-api/type.rst:274
#, fuzzy
msgid "``Py_sq_length`` to set :c:member:`PySequenceMethods.sq_length`"
msgstr "``Py_sq_length`` 設定:c:member:`PySequenceMethods.sq_length`"

#: ../../c-api/type.rst:276
#, fuzzy
msgid ""
"The following fields cannot be set at all using :c:type:`PyType_Spec` and :c:"
"type:`PyType_Slot`:"
msgstr "使用 PyType_Spec 和 PyType_Slot 根本無法設定以下欄位："

#: ../../c-api/type.rst:279
msgid ":c:member:`~PyTypeObject.tp_dict`"
msgstr ":c:member:`~PyTypeObject.tp_dict`"

#: ../../c-api/type.rst:280
msgid ":c:member:`~PyTypeObject.tp_mro`"
msgstr ":c:member:`~PyTypeObject.tp_mro`"

#: ../../c-api/type.rst:281
msgid ":c:member:`~PyTypeObject.tp_cache`"
msgstr ":c:member:`~PyTypeObject.tp_cache`"

#: ../../c-api/type.rst:282
msgid ":c:member:`~PyTypeObject.tp_subclasses`"
msgstr ":c:member:`~PyTypeObject.tp_subclasses`"

#: ../../c-api/type.rst:283
msgid ":c:member:`~PyTypeObject.tp_weaklist`"
msgstr ":c:member:`~PyTypeObject.tp_weaklist`"

#: ../../c-api/type.rst:284
msgid ":c:member:`~PyTypeObject.tp_vectorcall`"
msgstr ":c:member:`~PyTypeObject.tp_vectorcall`"

#: ../../c-api/type.rst:285
msgid ""
":c:member:`~PyTypeObject.tp_weaklistoffset` (see :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"
msgstr ""
":c:member:`~PyTypeObject.tp_weaklistoffset` （參見 :ref:`PyMemberDef "
"<pymemberdef-offsets>`）"

#: ../../c-api/type.rst:287
msgid ""
":c:member:`~PyTypeObject.tp_dictoffset` (see :ref:`PyMemberDef <pymemberdef-"
"offsets>`)"
msgstr ""
":c:member:`~PyTypeObject.tp_dictoffset` （參見 :ref:`PyMemberDef "
"<pymemberdef-offsets>`）"

#: ../../c-api/type.rst:289
msgid ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` (see :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"
msgstr ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` （參見 :ref:`PyMemberDef "
"<pymemberdef-offsets>`）"

#: ../../c-api/type.rst:292
#, fuzzy
msgid ""
"Setting :c:data:`Py_tp_bases` or :c:data:`Py_tp_base` may be problematic on "
"some platforms. To avoid issues, use the *bases* argument of :py:func:"
"`PyType_FromSpecWithBases` instead."
msgstr ""
"設定 :c:data:`Py_tp_bases` 或 :c:data:`Py_tp_base` 在某些平台上可能會出現問"
"題。為避免出現問題，請改用 PyType_FromSpecWithBases 的 *bases* 參數。"

#: ../../c-api/type.rst:299
#, fuzzy
msgid "Slots in :c:type:`PyBufferProcs` may be set in the unlimited API."
msgstr ":c:type:`PyBufferProcs` 中的插槽可以在無限 API 中設定。"

#: ../../c-api/type.rst:301
#, fuzzy
msgid ""
":c:member:`~PyBufferProcs.bf_getbuffer` and :c:member:`~PyBufferProcs."
"bf_releasebuffer` are now available under the limited API."
msgstr ""
":c:member:`~PyBufferProcs.bf_getbuffer` 和 :c:member:`~PyBufferProcs."
"bf_releasebuffer` 現在在有限的 API 下可用。"

#: ../../c-api/type.rst:308
#, fuzzy
msgid ""
"The desired value of the slot. In most cases, this is a pointer to a "
"function."
msgstr "插槽的所需值。在大多數情況下，這是一個指向函式的指標。"

#: ../../c-api/type.rst:311
#, fuzzy
msgid "Slots other than ``Py_tp_doc`` may not be ``NULL``."
msgstr "``Py_tp_doc`` 以外的插槽可能不是 ``NULL``。"
