# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Leon H., 2017
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-25 00:17+0000\n"
"PO-Revision-Date: 2018-05-23 14:06+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.2.2\n"

#: ../../c-api/long.rst:6
msgid "Integer Objects"
msgstr "整數物件"

#: ../../c-api/long.rst:11
#, fuzzy
msgid ""
"All integers are implemented as \"long\" integer objects of arbitrary size."
msgstr "所有整數都實作為任意大小的「長」整數物件。"

#: ../../c-api/long.rst:13
#, fuzzy
msgid ""
"On error, most ``PyLong_As*`` APIs return ``(return type)-1`` which cannot "
"be distinguished from a number.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"出錯時，大多數 ``PyLong_As*`` API 回傳 ``（回傳型別）-1``，它無法與數字區分開"
"來。使用 :c:func:`PyErr_Occurred` 來消除歧義。"

#: ../../c-api/long.rst:18
#, fuzzy
msgid "This subtype of :c:type:`PyObject` represents a Python integer object."
msgstr ":c:type:`PyObject` 的這個子型別表示一個 Python 整數物件。"

#: ../../c-api/long.rst:23
#, fuzzy
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python integer type. "
"This is the same object as :class:`int` in the Python layer."
msgstr ""
":c:type:`PyTypeObject` 的這個實例表示 Python 整數型別。這與 Python 層中的 "
"int 是同一個物件。"

#: ../../c-api/long.rst:29
#, fuzzy
msgid ""
"Return true if its argument is a :c:type:`PyLongObject` or a subtype of :c:"
"type:`PyLongObject`.  This function always succeeds."
msgstr ""
"如果其參數是 PyLongObject 或 PyLongObject 的子型別，則回傳 true。這個函式總是"
"成功的。"

#: ../../c-api/long.rst:35
#, fuzzy
msgid ""
"Return true if its argument is a :c:type:`PyLongObject`, but not a subtype "
"of :c:type:`PyLongObject`.  This function always succeeds."
msgstr ""
"如果其參數是 PyLongObject 但不是 PyLongObject 的子型別，則回傳 true。這個函式"
"總是成功的。"

#: ../../c-api/long.rst:41
#, fuzzy
msgid ""
"Return a new :c:type:`PyLongObject` object from *v*, or ``NULL`` on failure."
msgstr ""
"從 *v* 回傳一個新的 :c:type:`PyLongObject` 物件，或者在失敗時回傳 ``NULL``。"

#: ../../c-api/long.rst:43
#, fuzzy
msgid ""
"The current implementation keeps an array of integer objects for all "
"integers between ``-5`` and ``256``. When you create an int in that range "
"you actually just get back a reference to the existing object."
msgstr ""
"當前的實作為 ``-5``和 ``256``之間的所有整數保留了一個整數對像數組。當您在該範"
"圍內建立一個 int 時，您實際上只是取回了對現有物件的引用。"

#: ../../c-api/long.rst:50
#, fuzzy
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned long`, "
"or ``NULL`` on failure."
msgstr ""
"從 C :c:expr:`unsigned long` 回傳一個新的 :c:type:`PyLongObject` 物件，或者在"
"失敗時回傳 ``NULL``。"

#: ../../c-api/long.rst:56
#, fuzzy
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`Py_ssize_t`, or "
"``NULL`` on failure."
msgstr ""
"從 C :c:type:`Py_ssize_t` 回傳一個新的 :c:type:`PyLongObject` 物件，或者在失"
"敗時回傳 ``NULL``。"

#: ../../c-api/long.rst:62
#, fuzzy
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`size_t`, or "
"``NULL`` on failure."
msgstr ""
"從 C :c:type:`size_t` 回傳一個新的 :c:type:`PyLongObject` 物件，或者在失敗時"
"回傳 ``NULL``。"

#: ../../c-api/long.rst:68
#, fuzzy
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`long long`, or "
"``NULL`` on failure."
msgstr ""
"從 C :c:expr:`long long` 回傳一個新的 :c:type:`PyLongObject` 物件，或者在失敗"
"時回傳 ``NULL``。"

#: ../../c-api/long.rst:74
#, fuzzy
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned long "
"long`, or ``NULL`` on failure."
msgstr ""
"從 C :c:expr:`unsigned long long` 回傳一個新的 :c:type:`PyLongObject` 物件，"
"或者在失敗時回傳 ``NULL``。"

#: ../../c-api/long.rst:80
#, fuzzy
msgid ""
"Return a new :c:type:`PyLongObject` object from the integer part of *v*, or "
"``NULL`` on failure."
msgstr ""
"從 *v* 的整數部分回傳一個新的 :c:type:`PyLongObject` 物件，或者在失敗時回傳 "
"``NULL``。"

#: ../../c-api/long.rst:86
#, fuzzy
msgid ""
"Return a new :c:type:`PyLongObject` based on the string value in *str*, "
"which is interpreted according to the radix in *base*.  If *pend* is non-"
"``NULL``, *\\*pend* will point to the first character in *str* which follows "
"the representation of the number.  If *base* is ``0``, *str* is interpreted "
"using the :ref:`integers` definition; in this case, leading zeros in a non-"
"zero decimal number raises a :exc:`ValueError`. If *base* is not ``0``, it "
"must be between ``2`` and ``36``, inclusive.  Leading spaces and single "
"underscores after a base specifier and between digits are ignored.  If there "
"are no digits, :exc:`ValueError` will be raised."
msgstr ""
"根據 *str* 中的字串值回傳一個新的 :c:type:`PyLongObject`，根據 *base* 中的基"
"數進行解釋。如果*pend* 是非``NULL``，*\\*pend* 將指向*str* 中數字表示後的第一"
"個字元。如果 *base* 是 ``0``，*str* 將使用 integers 定義進行解釋；在這種情況"
"下，非零十進位數中的前導零會引發 :exc:`ValueError`。如果 *base* 不是 ``0``，"
"它必須介於 ``2`` 和 ``36`` 之間，包括在內。基本說明符之後和數字之間的前導空格"
"和單底線將被忽略。如果沒有數字，將引發 :exec:`ValueError`。"

#: ../../c-api/long.rst:96
#, fuzzy
msgid ""
"Python methods :meth:`int.to_bytes` and :meth:`int.from_bytes` to convert a :"
"c:type:`PyLongObject` to/from an array of bytes in base ``256``. You can "
"call those from C using :c:func:`PyObject_CallMethod`."
msgstr ""
"Python 方法 :meth:`int.to_bytes` 和 :meth:`int.from_bytes` 將 :c:type:"
"`PyLongObject` 轉換為基數為 ``256`` 的位元組數組或從數組轉換。您可以使用 :c:"
"func:`PyObject_CallMethod` 從 C 中呼叫它們。"

#: ../../c-api/long.rst:103
#, fuzzy
msgid ""
"Convert a sequence of Unicode digits in the string *u* to a Python integer "
"value."
msgstr "將字串 *u* 中的一系列 Unicode 數字轉換為 Python 整數值。"

#: ../../c-api/long.rst:111
#, fuzzy
msgid ""
"Create a Python integer from the pointer *p*. The pointer value can be "
"retrieved from the resulting value using :c:func:`PyLong_AsVoidPtr`."
msgstr ""
"從指標 *p* 建立一個 Python 整數。可以使用 PyLong_AsVoidPtr 從結果值中檢索指標"
"值。"

#: ../../c-api/long.rst:122 ../../c-api/long.rst:140
#, fuzzy
msgid ""
"Return a C :c:expr:`long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`__index__` method "
"(if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"回傳 *obj* 的 C :c:expr:`long` 表示。如果 *obj* 不是 :c:type:`PyLongObject` "
"的實例，首先呼叫其 :meth:`__index__` 方法（如果存在）將其轉換為 :c:type:"
"`PyLongObject`。"

#: ../../c-api/long.rst:126
#, fuzzy
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"expr:`long`."
msgstr ""
"如果 *obj* 的值超出 :c:expr:`long` 的範圍，則引發 :exc:`OverflowError`。"

#: ../../c-api/long.rst:129 ../../c-api/long.rst:149 ../../c-api/long.rst:170
#: ../../c-api/long.rst:190 ../../c-api/long.rst:213
#, fuzzy
msgid "Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr "出錯時回傳 ``-1``。使用 :c:func:`PyErr_Occurred` 來消除歧義。"

#: ../../c-api/long.rst:131 ../../c-api/long.rst:151 ../../c-api/long.rst:172
#: ../../c-api/long.rst:194 ../../c-api/long.rst:278 ../../c-api/long.rst:298
#, fuzzy
msgid "Use :meth:`__index__` if available."
msgstr "如果可用，請使用 :meth:`__index__`。"

#: ../../c-api/long.rst:134 ../../c-api/long.rst:154 ../../c-api/long.rst:175
#: ../../c-api/long.rst:197 ../../c-api/long.rst:281 ../../c-api/long.rst:301
#, fuzzy
msgid "This function will no longer use :meth:`__int__`."
msgstr "此函式將不再使用 :meth:`__int__`。"

#: ../../c-api/long.rst:144
#, fuzzy
msgid ""
"If the value of *obj* is greater than :const:`LONG_MAX` or less than :const:"
"`LONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and return "
"``-1``; otherwise, set *\\*overflow* to ``0``.  If any other exception "
"occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""
"如果 *obj* 的值大於 :const:`LONG_MAX` 或小於 :const:`LONG_MIN` ，將 "
"*\\*overflow* 分別設定為 ``1`` 或 ``-1``，並回傳``-1``；否則，將 "
"*\\*overflow* 設定為 ``0``。如果發生任何其他例外，請將 *\\*overflow* 設定為 "
"``0`` 並照常回傳 ``-1``。"

#: ../../c-api/long.rst:163 ../../c-api/long.rst:181
#, fuzzy
msgid ""
"Return a C :c:expr:`long long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`__index__` method "
"(if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"回傳 *obj* 的 C :c:expr:`long long` 表示。如果 *obj* 不是 :c:type:"
"`PyLongObject` 的實例，首先呼叫其 :meth:`__index__` 方法（如果存在）將其轉換"
"為 :c:type:`PyLongObject`。"

#: ../../c-api/long.rst:167
#, fuzzy
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"expr:`long long`."
msgstr ""
"如果 *obj* 的值超出 :c:expr:`long long` 的範圍，則引發 :exc:`OverflowError`。"

#: ../../c-api/long.rst:185
#, fuzzy
msgid ""
"If the value of *obj* is greater than :const:`LLONG_MAX` or less than :const:"
"`LLONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and return "
"``-1``; otherwise, set *\\*overflow* to ``0``.  If any other exception "
"occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""
"如果 *obj* 的值大於 :const:`LLONG_MAX` 或小於 :const:`LLONG_MIN` ，將 "
"*\\*overflow* 分別設定為 ``1`` 或 ``-1``，並回傳``-1``；否則，將 "
"*\\*overflow* 設定為 ``0``。如果發生任何其他例外，請將 *\\*overflow* 設定為 "
"``0`` 並照常回傳 ``-1``。"

#: ../../c-api/long.rst:207
#, fuzzy
msgid ""
"Return a C :c:type:`Py_ssize_t` representation of *pylong*.  *pylong* must "
"be an instance of :c:type:`PyLongObject`."
msgstr ""
"回傳 *pylong* 的 C:c:type:`Py_ssize_t` 表示。 *pylong* 必須是 :c:type:"
"`PyLongObject` 的實例。"

#: ../../c-api/long.rst:210
#, fuzzy
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`Py_ssize_t`."
msgstr ""
"如果 *pylong* 的值超出 Py_ssize_t 的範圍，則引發 :exc:`OverflowError`。"

#: ../../c-api/long.rst:222
#, fuzzy
msgid ""
"Return a C :c:expr:`unsigned long` representation of *pylong*.  *pylong* "
"must be an instance of :c:type:`PyLongObject`."
msgstr ""
"回傳 *pylong* 的 C :c:expr:`unsigned long` 表示。 *pylong* 必須是 :c:type:"
"`PyLongObject` 的實例。"

#: ../../c-api/long.rst:225
#, fuzzy
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"expr:`unsigned long`."
msgstr ""
"如果 *pylong* 的值超出 :c:expr:`unsigned long` 的範圍，則引發 :exc:"
"`OverflowError`。"

#: ../../c-api/long.rst:228
#, fuzzy
msgid ""
"Returns ``(unsigned long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"出錯時回傳 ``(unsigned long)-1``。使用 :c:func:`PyErr_Occurred` 來消除歧義。"

#: ../../c-api/long.rst:238
#, fuzzy
msgid ""
"Return a C :c:type:`size_t` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""
"回傳 *pylong* 的 C :c:type:`size_t` 表示。 *pylong* 必須是 :c:type:"
"`PyLongObject` 的實例。"

#: ../../c-api/long.rst:241
#, fuzzy
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`size_t`."
msgstr ""
"如果 *pylong* 的值超出 :c:type:`size_t` 的範圍，則引發 :exec:"
"`OverflowError`。"

#: ../../c-api/long.rst:244
#, fuzzy
msgid ""
"Returns ``(size_t)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr "出錯時回傳 ``(size_t)-1``。使用 :c:func:`PyErr_Occurred` 來消除歧義。"

#: ../../c-api/long.rst:253
#, fuzzy
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *pylong*.  "
"*pylong* must be an instance of :c:type:`PyLongObject`."
msgstr ""
"回傳 *pylong* 的 C:c:expr:`unsigned long long` 表示。 *pylong* 必須是 :c:"
"type:`PyLongObject` 的實例。"

#: ../../c-api/long.rst:256
#, fuzzy
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for an :"
"c:expr:`unsigned long long`."
msgstr ""
"如果 *pylong* 的值超出 :c:expr:`unsigned long long` 的範圍，則引發 :exc:"
"`OverflowError`。"

#: ../../c-api/long.rst:259
#, fuzzy
msgid ""
"Returns ``(unsigned long long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"出錯時回傳 ``(unsigned long long)-1``。使用 :c:func:`PyErr_Occurred` 來消除歧"
"義。"

#: ../../c-api/long.rst:262
#, fuzzy
msgid ""
"A negative *pylong* now raises :exc:`OverflowError`, not :exc:`TypeError`."
msgstr "負 *pylong* 現在會引發 :exc:`OverflowError`，而不是 :exc:`TypeError`。"

#: ../../c-api/long.rst:268
#, fuzzy
msgid ""
"Return a C :c:expr:`unsigned long` representation of *obj*.  If *obj* is not "
"an instance of :c:type:`PyLongObject`, first call its :meth:`__index__` "
"method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"回傳 *obj* 的 C :c:expr:`unsigned long` 表示。如果 *obj* 不是 :c:type:"
"`PyLongObject` 的實例，首先呼叫其 :meth:`__index__` 方法（如果存在）將其轉換"
"為 :c:type:`PyLongObject`。"

#: ../../c-api/long.rst:272
#, fuzzy
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long`, return "
"the reduction of that value modulo ``ULONG_MAX + 1``."
msgstr ""
"如果 *obj* 的值超出 :c:expr:`unsigned long` 的範圍，回傳該值模 ``ULONG_MAX + "
"1`` 的減少。"

#: ../../c-api/long.rst:275
#, fuzzy
msgid ""
"Returns ``(unsigned long)-1`` on error.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"出錯時回傳 ``(unsigned long)-1``。使用 :c:func:`PyErr_Occurred` 來消除歧義。"

#: ../../c-api/long.rst:287
#, fuzzy
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *obj*.  If *obj* "
"is not an instance of :c:type:`PyLongObject`, first call its :meth:"
"`__index__` method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"回傳 *obj* 的 C :c:expr:`unsigned long long` 表示。如果 *obj* 不是 :c:type:"
"`PyLongObject` 的實例，首先呼叫其 :meth:`__index__` 方法（如果存在）將其轉換"
"為 :c:type:`PyLongObject`。"

#: ../../c-api/long.rst:292
#, fuzzy
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long long`, "
"return the reduction of that value modulo ``ULLONG_MAX + 1``."
msgstr ""
"如果 *obj* 的值超出 :c:expr:`unsigned long long` 的範圍，回傳該值模 "
"``ULLONG_MAX + 1`` 的減少。"

#: ../../c-api/long.rst:295
#, fuzzy
msgid ""
"Returns ``(unsigned long long)-1`` on error.  Use :c:func:`PyErr_Occurred` "
"to disambiguate."
msgstr ""
"出錯時回傳 ``(unsigned long long)-1``。使用 :c:func:`PyErr_Occurred` 來消除歧"
"義。"

#: ../../c-api/long.rst:307
#, fuzzy
msgid ""
"Return a C :c:expr:`double` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""
"回傳 *pylong* 的 C :c:expr:`double` 表示。 *pylong* 必須是 :c:type:"
"`PyLongObject` 的實例。"

#: ../../c-api/long.rst:310
#, fuzzy
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"expr:`double`."
msgstr ""
"如果 *pylong* 的值超出 :c:expr:`double` 的範圍，則引發 :exc:`OverflowError`。"

#: ../../c-api/long.rst:313
#, fuzzy
msgid ""
"Returns ``-1.0`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr "出錯時回傳“-1.0”。使用 :c:func:`PyErr_Occurred` 來消除歧義。"

#: ../../c-api/long.rst:318
#, fuzzy
msgid ""
"Convert a Python integer *pylong* to a C :c:expr:`void` pointer. If *pylong* "
"cannot be converted, an :exc:`OverflowError` will be raised.  This is only "
"assured to produce a usable :c:expr:`void` pointer for values created with :"
"c:func:`PyLong_FromVoidPtr`."
msgstr ""
"將 Python 整數 *pylong* 轉換為 C :c:expr:`void` 指標。如果 *pylong* 無法轉"
"換，則會引發 :exc:`OverflowError`。這只能保證為使用 :c:func:"
"`PyLong_FromVoidPtr` 建立的值生成一個可用的 :c:expr:`void` 指標。"

#: ../../c-api/long.rst:323
#, fuzzy
msgid ""
"Returns ``NULL`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr "出錯時回傳 ``NULL`` 。使用 :c:func:`PyErr_Occurred` 來消除歧義。"
