# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-03 00:14+0000\n"
"PO-Revision-Date: 2018-05-23 14:07+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.2.2\n"

#: ../../c-api/set.rst:6
msgid "Set Objects"
msgstr "集合物件 (Set Objects)"

#: ../../c-api/set.rst:15
#, fuzzy
msgid ""
"This section details the public API for :class:`set` and :class:`frozenset` "
"objects.  Any functionality not listed below is best accessed using either "
"the abstract object protocol (including :c:func:`PyObject_CallMethod`, :c:"
"func:`PyObject_RichCompareBool`, :c:func:`PyObject_Hash`, :c:func:"
"`PyObject_Repr`, :c:func:`PyObject_IsTrue`, :c:func:`PyObject_Print`, and :c:"
"func:`PyObject_GetIter`) or the abstract number protocol (including :c:func:"
"`PyNumber_And`, :c:func:`PyNumber_Subtract`, :c:func:`PyNumber_Or`, :c:func:"
"`PyNumber_Xor`, :c:func:`PyNumber_InPlaceAnd`, :c:func:"
"`PyNumber_InPlaceSubtract`, :c:func:`PyNumber_InPlaceOr`, and :c:func:"
"`PyNumber_InPlaceXor`)."
msgstr ""
"本節詳細介紹了 :class:`set` 和 :class:`frozenset` 物件的公開 API。下面未列出"
"的任何功能最好使用抽像物件協定（包括:c:func:`PyObject_CallMethod`、:c:func:"
"`PyObject_RichCompareBool`、:c:func:`PyObject_Hash`、:c:func:`PyObject_Repr "
"`、:c:func:`PyObject_IsTrue`、:c:func:`PyObject_Print` 和:c:func:"
"`PyObject_GetIter`) 或抽像數字協定（包括:c:func:`PyNumber_And`、:c:func :"
"`PyNumber_Subtract`, :c:func:`PyNumber_Or`, :c:func:`PyNumber_Xor`, :c:func:"
"`PyNumber_InPlaceAnd`, :c:func:`PyNumber_InPlaceSubtract`, :c:func:"
"`PyNumber_InPlaceOr`,和:c:func:`PyNumber_InPlaceXor`)。"

#: ../../c-api/set.rst:29
#, fuzzy
msgid ""
"This subtype of :c:type:`PyObject` is used to hold the internal data for "
"both :class:`set` and :class:`frozenset` objects.  It is like a :c:type:"
"`PyDictObject` in that it is a fixed size for small sets (much like tuple "
"storage) and will point to a separate, variable sized block of memory for "
"medium and large sized sets (much like list storage). None of the fields of "
"this structure should be considered public and all are subject to change.  "
"All access should be done through the documented API rather than by "
"manipulating the values in the structure."
msgstr ""
":c:type:`PyObject` 的這種子型別用於保存 :class:`set` 和 :class:`frozenset` 物"
"件的內部資料。它就像 PyDictObject 一樣，因為它對於小型集合（很像元組儲存）是"
"固定大小的，對於中型和大型集合（很像列表）將指向一個單獨的、可變大小的記憶體"
"塊貯存）。此結構的任何欄位都不應被視為公開的，並且所有欄位都可能發生變化。所"
"有訪問都應通過記錄的 API 完成，而不是通過操縱結構中的值來完成。"

#: ../../c-api/set.rst:40
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :class:"
"`set` type."
msgstr ""
"這是 :c:type:`PyTypeObject` 的一個實例，表示 Python :class:`set` 型別。"

#: ../../c-api/set.rst:46
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :class:"
"`frozenset` type."
msgstr ""
"這是 :c:type:`PyTypeObject` 的一個實例，表示 Python :class:`frozenset` 型別。"

#: ../../c-api/set.rst:49
#, fuzzy
msgid ""
"The following type check macros work on pointers to any Python object. "
"Likewise, the constructor functions work with any iterable Python object."
msgstr ""
"以下型別檢查巨集適用於指向任何 Python 物件的指標。同樣，構造函式適用於任何可"
"疊代的 Python 物件。"

#: ../../c-api/set.rst:55
#, fuzzy
msgid ""
"Return true if *p* is a :class:`set` object or an instance of a subtype. "
"This function always succeeds."
msgstr ""
"如果 *p* 是 :class:`set` 物件或子型別的實例，則回傳 true。這個函式總是成功"
"的。"

#: ../../c-api/set.rst:60
#, fuzzy
msgid ""
"Return true if *p* is a :class:`frozenset` object or an instance of a "
"subtype.  This function always succeeds."
msgstr ""
"如果 *p* 是 frozenset 物件或子型別的實例，則回傳 true。這個函式總是成功的。"

#: ../../c-api/set.rst:65
#, fuzzy
msgid ""
"Return true if *p* is a :class:`set` object, a :class:`frozenset` object, or "
"an instance of a subtype.  This function always succeeds."
msgstr ""
"如果 *p* 是 :class:`set` 物件、:class:`frozenset` 物件或子型別的實例，則回傳 "
"true。這個函式總是成功的。"

#: ../../c-api/set.rst:70
#, fuzzy
msgid ""
"Return true if *p* is a :class:`set` object but not an instance of a "
"subtype.  This function always succeeds."
msgstr ""
"如果 *p* 是 :class:`set` 物件但不是子型別的實例，則回傳 true。這個函式總是成"
"功的。"

#: ../../c-api/set.rst:77
#, fuzzy
msgid ""
"Return true if *p* is a :class:`set` object or a :class:`frozenset` object "
"but not an instance of a subtype.  This function always succeeds."
msgstr ""
"如果 *p* 是 :class:`set` 物件或 :class:`frozenset` 物件但不是子型別的實例，則"
"回傳 true。這個函式總是成功的。"

#: ../../c-api/set.rst:83
#, fuzzy
msgid ""
"Return true if *p* is a :class:`frozenset` object but not an instance of a "
"subtype.  This function always succeeds."
msgstr ""
"如果 *p* 是 frozenset 物件但不是子型別的實例，則回傳 true。這個函式總是成功"
"的。"

#: ../../c-api/set.rst:89
#, fuzzy
msgid ""
"Return a new :class:`set` containing objects returned by the *iterable*.  "
"The *iterable* may be ``NULL`` to create a new empty set.  Return the new "
"set on success or ``NULL`` on failure.  Raise :exc:`TypeError` if *iterable* "
"is not actually iterable.  The constructor is also useful for copying a set "
"(``c=set(s)``)."
msgstr ""
"回傳一個新的 :class:`set` 包含 *iterable* 回傳的物件。 *iterable* 可以是 "
"``NULL`` 以建立一個新的空集。成功時回傳新集，失敗時回傳 NULL。如果 "
"*iterable* 實際上不是可疊代的，則引發 :exc:`TypeError`。構造函式對於復制集合 "
"(``c=set(s)``) 也很有用。"

#: ../../c-api/set.rst:98
#, fuzzy
msgid ""
"Return a new :class:`frozenset` containing objects returned by the "
"*iterable*. The *iterable* may be ``NULL`` to create a new empty frozenset.  "
"Return the new set on success or ``NULL`` on failure.  Raise :exc:"
"`TypeError` if *iterable* is not actually iterable."
msgstr ""
"回傳一個新的 :class:`frozenset` 包含由 *iterable* 回傳的物件。 *iterable* 可"
"以是 ``NULL`` 以建立一個新的空 frozenset。成功時回傳新集，失敗時回傳 NULL。如"
"果 *iterable* 實際上不是可疊代的，則引發 :exc:`TypeError`。"

#: ../../c-api/set.rst:104
#, fuzzy
msgid ""
"The following functions and macros are available for instances of :class:"
"`set` or :class:`frozenset` or instances of their subtypes."
msgstr ""
"以下函式和巨集可用於 :class:`set` 或 :class:`frozenset` 的實例或其子型別的實"
"例。"

#: ../../c-api/set.rst:112
#, fuzzy
msgid ""
"Return the length of a :class:`set` or :class:`frozenset` object. Equivalent "
"to ``len(anyset)``.  Raises a :exc:`PyExc_SystemError` if *anyset* is not a :"
"class:`set`, :class:`frozenset`, or an instance of a subtype."
msgstr ""
"回傳 :class:`set` 或 :class:`frozenset` 物件的長度。相當於 ``len(anyset)``。"
"如果 *anyset* 不是 :class:`set`、:class:`frozenset` 或子型別的實例，則引發 :"
"exec:`PyExc_SystemError`。"

#: ../../c-api/set.rst:119
msgid "Macro form of :c:func:`PySet_Size` without error checking."
msgstr "沒有錯誤檢查的 :c:func:`PySet_Size` 的巨集形式。"

#: ../../c-api/set.rst:124
#, fuzzy
msgid ""
"Return ``1`` if found, ``0`` if not found, and ``-1`` if an error is "
"encountered.  Unlike the Python :meth:`__contains__` method, this function "
"does not automatically convert unhashable sets into temporary frozensets.  "
"Raise a :exc:`TypeError` if the *key* is unhashable. Raise :exc:"
"`PyExc_SystemError` if *anyset* is not a :class:`set`, :class:`frozenset`, "
"or an instance of a subtype."
msgstr ""
"如果找到則回傳 ``1``，如果未找到則回傳 ``0``，如果遇到錯誤則回傳 ``-1``。與 "
"Python :meth:`__contains__` 方法不同，此函式不會自動將不可散列集轉換為臨時凍"
"結集。如果 *key* 不可散列，則引發 :exc:`TypeError`。如果 *anyset* 不是 :"
"class:`set`、:class:`frozenset` 或子型別的實例，則引發 :exec:"
"`PyExc_SystemError`。"

#: ../../c-api/set.rst:133
#, fuzzy
msgid ""
"Add *key* to a :class:`set` instance.  Also works with :class:`frozenset` "
"instances (like :c:func:`PyTuple_SetItem` it can be used to fill in the "
"values of brand new frozensets before they are exposed to other code).  "
"Return ``0`` on success or ``-1`` on failure. Raise a :exc:`TypeError` if "
"the *key* is unhashable. Raise a :exc:`MemoryError` if there is no room to "
"grow.  Raise a :exc:`SystemError` if *set* is not an instance of :class:"
"`set` or its subtype."
msgstr ""
"將 *key* 新增到 :class:`set` 實例。也適用於 :class:`frozenset` 實例（如 :c:"
"func:`PyTuple_SetItem` 它可用於在全新的 frozensets 暴露給其他程式碼之前填充它"
"們的值）。成功回傳 ``0``或失敗回傳 ``-1``。如果 *key* 不可散列，則引發 :exc:"
"`TypeError`。如果沒有增長空間，則引發 :exc:`MemoryError`。如果 *set* 不是 :"
"class:`set` 或其子型別的實例，則引發 :exc:`SystemError`。"

#: ../../c-api/set.rst:142
#, fuzzy
msgid ""
"The following functions are available for instances of :class:`set` or its "
"subtypes but not for instances of :class:`frozenset` or its subtypes."
msgstr ""
"以下函式可用於 :class:`set` 或其子型別的實例，但不適用於 :class:`frozenset` "
"或其子型別的實例。"

#: ../../c-api/set.rst:148
#, fuzzy
msgid ""
"Return ``1`` if found and removed, ``0`` if not found (no action taken), and "
"``-1`` if an error is encountered.  Does not raise :exc:`KeyError` for "
"missing keys.  Raise a :exc:`TypeError` if the *key* is unhashable.  Unlike "
"the Python :meth:`~set.discard` method, this function does not automatically "
"convert unhashable sets into temporary frozensets. Raise :exc:"
"`PyExc_SystemError` if *set* is not an instance of :class:`set` or its "
"subtype."
msgstr ""
"如果找到並刪除則回傳 ``1``，如果未找到（未採取任何操作）則回傳 ``0``，如果遇"
"到錯誤則回傳 ``-1``。不會因缺少鍵而引發 :exc:`KeyError`。如果 *key* 不可散"
"列，則引發 :exc:`TypeError`。與 Python :meth:`~set.discard` 方法不同，此函式"
"不會自動將不可散列集轉換為臨時凍結集。如果 *set* 不是 :class:`set` 或其子型別"
"的實例，則引發 :exec:`PyExc_SystemError`。"

#: ../../c-api/set.rst:158
#, fuzzy
msgid ""
"Return a new reference to an arbitrary object in the *set*, and removes the "
"object from the *set*.  Return ``NULL`` on failure.  Raise :exc:`KeyError` "
"if the set is empty. Raise a :exc:`SystemError` if *set* is not an instance "
"of :class:`set` or its subtype."
msgstr ""
"回傳對 *set* 中任意物件的新引用，並從 *set* 中刪除該物件。失敗時回傳 "
"``NULL`` 。如果集合為空，則引發 :exc:`KeyError`。如果 *set* 不是 :class:"
"`set` 或其子型別的實例，則引發 :exc:`SystemError`。"

#: ../../c-api/set.rst:166
#, fuzzy
msgid "Empty an existing set of all elements."
msgstr "清空所有元素的現有集合。"
