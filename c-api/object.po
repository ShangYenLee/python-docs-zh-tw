# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-23 00:15+0000\n"
"PO-Revision-Date: 2018-05-23 14:32+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/object.rst:6
msgid "Object Protocol"
msgstr "物件協定"

#: ../../c-api/object.rst:11
#, fuzzy
msgid ""
"The ``NotImplemented`` singleton, used to signal that an operation is not "
"implemented for the given type combination."
msgstr "``NotImplemented`` 單例，用於表示未針對給定型別組合實作操作。"

#: ../../c-api/object.rst:17
#, fuzzy
msgid ""
"Properly handle returning :c:data:`Py_NotImplemented` from within a C "
"function (that is, increment the reference count of NotImplemented and "
"return it)."
msgstr ""
"正確處理從 C 函式中回傳 :c:data:`Py_NotImplemented`（即增加 NotImplemented "
"的引用計數並回傳它）。"

#: ../../c-api/object.rst:24
#, fuzzy
msgid ""
"Print an object *o*, on file *fp*.  Returns ``-1`` on error.  The flags "
"argument is used to enable certain printing options.  The only option "
"currently supported is :const:`Py_PRINT_RAW`; if given, the :func:`str` of "
"the object is written instead of the :func:`repr`."
msgstr ""
"在文件 *fp* 上印出物件 *o*。出錯時回傳 ``-1``。 flags 參數用於啟用某些印出選項。"
"當前支援的唯一選項是 :const:`Py_PRINT_RAW`；如果給定，則寫入物件的 "
":func:`str` 而不是 :func:`repr`。"

#: ../../c-api/object.rst:32 ../../c-api/object.rst:43
#, fuzzy
msgid ""
"Returns ``1`` if *o* has the attribute *attr_name*, and ``0`` otherwise.  "
"This is equivalent to the Python expression ``hasattr(o, attr_name)``.  This "
"function always succeeds."
msgstr ""
"如果 *o* 具有屬性 *attr_name*，則回傳 ``1``，否則回傳 ``0``。這等同於 Python "
"表達式 ``hasattr(o, attr_name)``。這個函式總是成功的。"

#: ../../c-api/object.rst:36
#, fuzzy
msgid ""
"Note that exceptions which occur while calling :meth:`__getattr__` and :meth:"
"`__getattribute__` methods will get suppressed. To get error reporting use :"
"c:func:`PyObject_GetAttr()` instead."
msgstr ""
"請注意，呼叫 :meth:`__getattr__` 和 :meth:`__getattribute__` "
"方法時發生的例外將被抑制。要獲取錯誤報告，請改用 PyObject_GetAttr() 。"

#: ../../c-api/object.rst:47
#, fuzzy
msgid ""
"Note that exceptions which occur while calling :meth:`__getattr__` and :meth:"
"`__getattribute__` methods and creating a temporary string object will get "
"suppressed. To get error reporting use :c:func:`PyObject_GetAttrString()` "
"instead."
msgstr ""
"請注意，呼叫 :meth:`__getattr__` 和 :meth:`__getattribute__` "
"方法以及建立臨時字串物件時發生的例外將被抑制。要獲取錯誤報告，請改用 "
"PyObject_GetAttrString() 。"

#: ../../c-api/object.rst:55
#, fuzzy
msgid ""
"Retrieve an attribute named *attr_name* from object *o*. Returns the "
"attribute value on success, or ``NULL`` on failure.  This is the equivalent "
"of the Python expression ``o.attr_name``."
msgstr ""
"從物件 *o* 中檢索名為 *attr_name* "
"的屬性。成功時回傳屬性值，失敗時回傳 ``NULL`` 。這相當於 Python 表達式 ``o."
"attr_name``。"

#: ../../c-api/object.rst:62
#, fuzzy
msgid ""
"Retrieve an attribute named *attr_name* from object *o*. Returns the "
"attribute value on success, or ``NULL`` on failure. This is the equivalent "
"of the Python expression ``o.attr_name``."
msgstr ""
"從物件 *o* 中檢索名為 *attr_name* "
"的屬性。成功時回傳屬性值，失敗時回傳 ``NULL`` 。這相當於 Python 表達式 ``o."
"attr_name``。"

#: ../../c-api/object.rst:69
#, fuzzy
msgid ""
"Generic attribute getter function that is meant to be put into a type "
"object's ``tp_getattro`` slot.  It looks for a descriptor in the dictionary "
"of classes in the object's MRO as well as an attribute in the object's :attr:"
"`~object.__dict__` (if present).  As outlined in :ref:`descriptors`, data "
"descriptors take preference over instance attributes, while non-data "
"descriptors don't.  Otherwise, an :exc:`AttributeError` is raised."
msgstr ""
"通用屬性 getter 函式，旨在放入型別物件的“tp_getattro”槽中。它在物件的 MRO "
"的類字典中查找描述器，並在物件的 :attr:`~object."
"__dict__`（如果存在）中查找屬性。如 :ref:`descriptors` "
"中所述，資料描述器優先於實例屬性，而非資料描述器則不然。否則，會引發 "
":exc:`AttributeError`。"

#: ../../c-api/object.rst:79 ../../c-api/object.rst:91
#, fuzzy
msgid ""
"Set the value of the attribute named *attr_name*, for object *o*, to the "
"value *v*. Raise an exception and return ``-1`` on failure; return ``0`` on "
"success.  This is the equivalent of the Python statement ``o.attr_name = v``."
msgstr ""
"將物件 *o* 名為 *attr_name* 的屬性的值設定為值 "
"*v*。引發例外並在失敗時回傳 ``-1``；成功回傳 ``0``。這相當於 Python 語句“"
"o.attr_name = v”。"

#: ../../c-api/object.rst:84
#, fuzzy
msgid ""
"If *v* is ``NULL``, the attribute is deleted. This behaviour is deprecated "
"in favour of using :c:func:`PyObject_DelAttr`, but there are currently no "
"plans to remove it."
msgstr ""
"如果 *v* 為 ``NULL`` ，則刪除該屬性。此行為已棄用，有利於使用 "
":c:func:`PyObject_DelAttr`，但目前沒有刪除它的計劃。"

#: ../../c-api/object.rst:96
#, fuzzy
msgid ""
"If *v* is ``NULL``, the attribute is deleted, but this feature is deprecated "
"in favour of using :c:func:`PyObject_DelAttrString`."
msgstr ""
"如果 *v* 為 ``NULL``，則該屬性將被刪除，但不推薦使用此功能以支援使用 "
":c:func:`PyObject_DelAttrString`。"

#: ../../c-api/object.rst:102
#, fuzzy
msgid ""
"Generic attribute setter and deleter function that is meant to be put into a "
"type object's :c:member:`~PyTypeObject.tp_setattro` slot.  It looks for a "
"data descriptor in the dictionary of classes in the object's MRO, and if "
"found it takes preference over setting or deleting the attribute in the "
"instance dictionary. Otherwise, the attribute is set or deleted in the "
"object's :attr:`~object.__dict__` (if present). On success, ``0`` is "
"returned, otherwise an :exc:`AttributeError` is raised and ``-1`` is "
"returned."
msgstr ""
"通用屬性設定器和刪除器函式，旨在放入型別物件的 :c:member:`~PyTypeObject."
"tp_setattro` 槽中。它在物件的 MRO 的類字典中查找資料描述器，如果找到，它優先"
"於在實例字典中設定或刪除屬性。否則，在物件的 :attr:`~object."
"__dict__`（如果存在）中設定或刪除該屬性。成功時，回傳 ``0``，否則會引發 "
"AttributeError 並回傳 ``-1``。"

#: ../../c-api/object.rst:114 ../../c-api/object.rst:120
#, fuzzy
msgid ""
"Delete attribute named *attr_name*, for object *o*. Returns ``-1`` on "
"failure. This is the equivalent of the Python statement ``del o.attr_name``."
msgstr ""
"為物件 *o* 刪除名為 *attr_name* 的屬性。失敗時回傳 ``-1``。這相當於 Python 語句 "
"``del o.attr_name``。"

#: ../../c-api/object.rst:126
#, fuzzy
msgid ""
"A generic implementation for the getter of a ``__dict__`` descriptor. It "
"creates the dictionary if necessary."
msgstr "``__dict__`` 描述器的 getter 的通用實作。如有必要，它會建立字典。"

#: ../../c-api/object.rst:129
#, fuzzy
msgid ""
"This function may also be called to get the :py:attr:`~object.__dict__` of "
"the object *o*. Pass ``NULL`` for *context* when calling it. Since this "
"function may need to allocate memory for the dictionary, it may be more "
"efficient to call :c:func:`PyObject_GetAttr` when accessing an attribute on "
"the object."
msgstr ""
"也可以呼叫此函式來獲取物件 *o* 的:py:attr:`~object.__dict__`。呼叫時為 "
"*context* 傳遞 ``NULL``。由於此函式可能需要為字典分配記憶體，"
"因此在訪問物件的屬性時呼叫 PyObject_GetAttr 可能更有效。"

#: ../../c-api/object.rst:135
#, fuzzy
msgid "On failure, returns ``NULL`` with an exception set."
msgstr "失敗時，回傳帶有例外集的 ``NULL`` 。"

#: ../../c-api/object.rst:142
#, fuzzy
msgid ""
"A generic implementation for the setter of a ``__dict__`` descriptor. This "
"implementation does not allow the dictionary to be deleted."
msgstr "``__dict__`` 描述器的設定器的通用實作。此實作不允許刪除字典。"

#: ../../c-api/object.rst:150
#, fuzzy
msgid ""
"Return a pointer to :py:attr:`~object.__dict__` of the object *obj*. If "
"there is no ``__dict__``, return ``NULL`` without setting an exception."
msgstr ""
"回傳指向物件 *obj* 的 :py:attr:`~object.__dict__` "
"的指標。如果沒有``__dict__``，回傳``NULL``而不設定例外。"

#: ../../c-api/object.rst:153
#, fuzzy
msgid ""
"This function may need to allocate memory for the dictionary, so it may be "
"more efficient to call :c:func:`PyObject_GetAttr` when accessing an "
"attribute on the object."
msgstr "此函式可能需要為字典分配記憶體，因此在訪問物件的屬性時呼叫 PyObject_GetAttr "
"可能更有效。"

#: ../../c-api/object.rst:160
#, fuzzy
msgid ""
"Compare the values of *o1* and *o2* using the operation specified by *opid*, "
"which must be one of :const:`Py_LT`, :const:`Py_LE`, :const:`Py_EQ`, :const:"
"`Py_NE`, :const:`Py_GT`, or :const:`Py_GE`, corresponding to ``<``, ``<=``, "
"``==``, ``!=``, ``>``, or ``>=`` respectively. This is the equivalent of the "
"Python expression ``o1 op o2``, where ``op`` is the operator corresponding "
"to *opid*. Returns the value of the comparison on success, or ``NULL`` on "
"failure."
msgstr ""
"使用 *opid* 指定的操作比較 *o1* 和 *o2* 的值，它必須是 :const:`Py_LT`, "
":const:`Py_LE`, :const:`Py_EQ`, :const:` Py_NE`、:const:`Py_GT` 或 "
":const:`Py_GE`，對應於``<``、``<=``、`==``、``!=``、``> `` 或 ``>=`` 分別。"
"這相當於 Python 表達式 ``o1 op o2``，其中 ``op`` 是對應於 *opid* "
"的運算符。成功回傳比較值，失敗回傳 ``NULL`` 。"

#: ../../c-api/object.rst:170
#, fuzzy
msgid ""
"Compare the values of *o1* and *o2* using the operation specified by *opid*, "
"which must be one of :const:`Py_LT`, :const:`Py_LE`, :const:`Py_EQ`, :const:"
"`Py_NE`, :const:`Py_GT`, or :const:`Py_GE`, corresponding to ``<``, ``<=``, "
"``==``, ``!=``, ``>``, or ``>=`` respectively. Returns ``-1`` on error, "
"``0`` if the result is false, ``1`` otherwise. This is the equivalent of the "
"Python expression ``o1 op o2``, where ``op`` is the operator corresponding "
"to *opid*."
msgstr ""
"使用 *opid* 指定的操作比較 *o1* 和 *o2* 的值，它必須是 :const:`Py_LT`, "
":const:`Py_LE`, :const:`Py_EQ`, :const:` Py_NE`、:const:`Py_GT` 或 "
":const:`Py_GE`，對應於``<``、``<=``、`==``、``!=``、``> `` 或 ``>=`` "
"分別。出錯時回傳 ``-1``，如果結果為假則回傳 ``0``，否則回傳 ``1``。這相當於 Python "
"表達式 ``o1 op o2``，其中 ``op`` 是對應於 *opid* 的運算符。"

#: ../../c-api/object.rst:179
#, fuzzy
msgid ""
"If *o1* and *o2* are the same object, :c:func:`PyObject_RichCompareBool` "
"will always return ``1`` for :const:`Py_EQ` and ``0`` for :const:`Py_NE`."
msgstr ""
"如果 *o1* 和 *o2* 是同一個物件，:c:func:`PyObject_RichCompareBool` 將始終為 "
":const:`Py_EQ` 回傳 ``1``，為 :const:`Py_NE` 回傳 ``0``。"

#: ../../c-api/object.rst:184
#, fuzzy
msgid ""
"Format *obj* using *format_spec*. This is equivalent to the Python "
"expression ``format(obj, format_spec)``."
msgstr "使用 *format_spec* 格式化 *obj*。這等同於 Python 表達式``format(obj, "
"format_spec)``。"

#: ../../c-api/object.rst:187
#, fuzzy
msgid ""
"*format_spec* may be ``NULL``. In this case the call is equivalent to "
"``format(obj)``. Returns the formatted string on success, ``NULL`` on "
"failure."
msgstr ""
"*format_spec* "
"可能是 ``NULL`` 。在這種情況下，呼叫等同於``format(obj)``。成功回傳格式化字串，"
"失敗回傳 NULL。"

#: ../../c-api/object.rst:195
#, fuzzy
msgid ""
"Compute a string representation of object *o*.  Returns the string "
"representation on success, ``NULL`` on failure.  This is the equivalent of "
"the Python expression ``repr(o)``.  Called by the :func:`repr` built-in "
"function."
msgstr ""
"計算物件 *o* 的字串表示。成功回傳字串表示，失敗回傳 ``NULL`` 。這相當於 Python "
"表達式“repr(o)”。由 :func:`repr` 內建函式呼叫。"

#: ../../c-api/object.rst:199 ../../c-api/object.rst:223
#, fuzzy
msgid ""
"This function now includes a debug assertion to help ensure that it does not "
"silently discard an active exception."
msgstr "此函式現在包含一個除錯斷言，以幫助確保它不會靜默丟棄活動例外。"

#: ../../c-api/object.rst:207
#, fuzzy
msgid ""
"As :c:func:`PyObject_Repr`, compute a string representation of object *o*, "
"but escape the non-ASCII characters in the string returned by :c:func:"
"`PyObject_Repr` with ``\\x``, ``\\u`` or ``\\U`` escapes.  This generates a "
"string similar to that returned by :c:func:`PyObject_Repr` in Python 2. "
"Called by the :func:`ascii` built-in function."
msgstr ""
"作為 :c:func:`PyObject_Repr`，計算物件 *o* 的字串表示形式，但將 "
":c:func:`PyObject_Repr` 回傳的字串中的非 ASCII 字元轉義為 `\\x``、`` \\u`` "
"或 ``\\U`` 轉義。這會生成一個類似於 Python 2 中 PyObject_Repr 回傳的字串。由 "
":func:`ascii` 內建函式呼叫。"

#: ../../c-api/object.rst:218
#, fuzzy
msgid ""
"Compute a string representation of object *o*.  Returns the string "
"representation on success, ``NULL`` on failure.  This is the equivalent of "
"the Python expression ``str(o)``.  Called by the :func:`str` built-in "
"function and, therefore, by the :func:`print` function."
msgstr ""
"計算物件 *o* 的字串表示。成功回傳字串表示，失敗回傳 ``NULL`` 。這相當於 Python "
"表達式 ``str(o)``。由 :func:`str` 內建函式呼叫，因此也由 :func:`print` "
"函式呼叫。"

#: ../../c-api/object.rst:232
#, fuzzy
msgid ""
"Compute a bytes representation of object *o*.  ``NULL`` is returned on "
"failure and a bytes object on success.  This is equivalent to the Python "
"expression ``bytes(o)``, when *o* is not an integer.  Unlike ``bytes(o)``, a "
"TypeError is raised when *o* is an integer instead of a zero-initialized "
"bytes object."
msgstr ""
"計算物件 *o* 的位元組表示。 ``NULL`` 失敗時回傳，成功時回傳位元組物件。當 *o*"
" 不是整數時，這等同於 Python 表達式“bytes(o)”。與 ``bytes(o)`` 不同，當 *o* "
"是整數而不是零初始化位元組物件時會引發 TypeError。"

#: ../../c-api/object.rst:241
#, fuzzy
msgid ""
"Return ``1`` if the class *derived* is identical to or derived from the "
"class *cls*, otherwise return ``0``.  In case of an error, return ``-1``."
msgstr "如果類 *derived* 與類 *cls* 相同或派生自類 "
"*cls*，則回傳 ``1``，否則回傳 ``0``。如果出現錯誤，回傳 ``-1``。"

#: ../../c-api/object.rst:244 ../../c-api/object.rst:263
#, fuzzy
msgid ""
"If *cls* is a tuple, the check will be done against every entry in *cls*. "
"The result will be ``1`` when at least one of the checks returns ``1``, "
"otherwise it will be ``0``."
msgstr "如果 *cls* 是一個元組，將針對 *cls* "
"中的每個條目進行檢查。當至少一項檢查回傳 ``1``時，結果將為 ``1``，否則將為 ``0``。"

#: ../../c-api/object.rst:248
#, fuzzy
msgid ""
"If *cls* has a :meth:`~class.__subclasscheck__` method, it will be called to "
"determine the subclass status as described in :pep:`3119`.  Otherwise, "
"*derived* is a subclass of *cls* if it is a direct or indirect subclass, i."
"e. contained in ``cls.__mro__``."
msgstr ""
"如果 *cls* 有一個 :meth:`~class.__subclasscheck__` "
"方法，它將被呼叫以確定子類別狀態，如 :pep:`3119` 中所述。否則，*derived* 是 "
"*cls* 的子類別，如果它是直接或間接子類別，即包含在 ``cls.__mro__`` 中。"

#: ../../c-api/object.rst:253
#, fuzzy
msgid ""
"Normally only class objects, i.e. instances of :class:`type` or a derived "
"class, are considered classes.  However, objects can override this by having "
"a :attr:`__bases__` attribute (which must be a tuple of base classes)."
msgstr ""
"通常只有類物件，即 :class:`type` 或派生類的實例，被認為是類。但是，"
"物件可以通過具有 :attr:`__bases__` 屬性（必須是基底類別的元組）來覆蓋它。"

#: ../../c-api/object.rst:260
#, fuzzy
msgid ""
"Return ``1`` if *inst* is an instance of the class *cls* or a subclass of "
"*cls*, or ``0`` if not.  On error, returns ``-1`` and sets an exception."
msgstr "如果 *inst* 是類 *cls* 或 *cls* "
"的子類別的實例，則回傳 ``1``，否則回傳 ``0``。出錯時，回傳 ``-1``並設定例外。"

#: ../../c-api/object.rst:267
#, fuzzy
msgid ""
"If *cls* has a :meth:`~class.__instancecheck__` method, it will be called to "
"determine the subclass status as described in :pep:`3119`.  Otherwise, "
"*inst* is an instance of *cls* if its class is a subclass of *cls*."
msgstr ""
"如果 *cls* 有 :meth:`~class.__instancecheck__` "
"方法，它將被呼叫以確定子類別狀態，如 :pep:`3119` 中所述。否則，如果 *inst* "
"的類是 *cls* 的子類別，則 *inst* 是 *cls* 的實例。"

#: ../../c-api/object.rst:271
#, fuzzy
msgid ""
"An instance *inst* can override what is considered its class by having a :"
"attr:`__class__` attribute."
msgstr "實例 *inst* 可以通過具有 :attr:`__class__` 屬性來覆蓋被認為是其類的內容。"

#: ../../c-api/object.rst:274
#, fuzzy
msgid ""
"An object *cls* can override if it is considered a class, and what its base "
"classes are, by having a :attr:`__bases__` attribute (which must be a tuple "
"of base classes)."
msgstr "如果一個物件 *cls* 被認為是一個類，它可以覆蓋它的基底類別，通過具有 "
":attr:`__bases__` 屬性（必須是基底類別的元組）。"

#: ../../c-api/object.rst:283
#, fuzzy
msgid ""
"Compute and return the hash value of an object *o*.  On failure, return "
"``-1``. This is the equivalent of the Python expression ``hash(o)``."
msgstr "計算並回傳物件 *o* 的雜湊值。失敗時，回傳 ``-1``。這相當於 Python "
"表達式``hash(o)``。"

#: ../../c-api/object.rst:286
#, fuzzy
msgid ""
"The return type is now Py_hash_t.  This is a signed integer the same size "
"as :c:type:`Py_ssize_t`."
msgstr "回傳型別現在是 Py_hash_t。這是一個與 :c:type:`Py_ssize_t` "
"大小相同的有符號整數。"

#: ../../c-api/object.rst:293
#, fuzzy
msgid ""
"Set a :exc:`TypeError` indicating that ``type(o)`` is not :term:`hashable` "
"and return ``-1``. This function receives special treatment when stored in a "
"``tp_hash`` slot, allowing a type to explicitly indicate to the interpreter "
"that it is not hashable."
msgstr ""
"設定一個 :exc:`TypeError` 表示 ``type(o)`` 不是 :term:`hashable` 並回傳 ``-1`"
"`。當儲存在“tp_hash”槽中時，此函式會受到特殊處理，允許型別向直譯器明確指示它"
"不可散列。"

#: ../../c-api/object.rst:301
#, fuzzy
msgid ""
"Returns ``1`` if the object *o* is considered to be true, and ``0`` "
"otherwise. This is equivalent to the Python expression ``not not o``.  On "
"failure, return ``-1``."
msgstr "如果物件 *o* 被認為是真實的，則回傳 ``1``，否則回傳 ``0``。這等同於 Python 表達式“"
"not not o”。失敗時，回傳 ``-1``。"

#: ../../c-api/object.rst:308
#, fuzzy
msgid ""
"Returns ``0`` if the object *o* is considered to be true, and ``1`` "
"otherwise. This is equivalent to the Python expression ``not o``.  On "
"failure, return ``-1``."
msgstr "如果物件 *o* 被認為是真實的，則回傳 ``0``，否則回傳 ``1``。這等同於 Python 表達式“"
"not o”。失敗時，回傳 ``-1``。"

#: ../../c-api/object.rst:317
#, fuzzy
msgid ""
"When *o* is non-``NULL``, returns a type object corresponding to the object "
"type of object *o*. On failure, raises :exc:`SystemError` and returns "
"``NULL``.  This is equivalent to the Python expression ``type(o)``. This "
"function increments the reference count of the return value. There's really "
"no reason to use this function instead of the :c:func:`Py_TYPE()` function, "
"which returns a pointer of type :c:expr:`PyTypeObject*`, except when the "
"incremented reference count is needed."
msgstr ""
"當*o* 為非``NULL`` 時，回傳與物件*o* 的對像型別對應的型別物件。失敗時，引發 "
":exc:`SystemError` 並回傳 ``NULL``。這等同於 Python 表達式 "
"``type(o)``。此函式增加回傳值的引用計數。確實沒有理由使用此函式而不是 "
"Py_TYPE() 函式，該函式回傳一個型別為 :c:expr:`PyTypeObject*` "
"的指標，除非需要遞增的引用計數。"

#: ../../c-api/object.rst:328
#, fuzzy
msgid ""
"Return non-zero if the object *o* is of type *type* or a subtype of *type*, "
"and ``0`` otherwise.  Both parameters must be non-``NULL``."
msgstr "如果物件 *o* 是 *type* 型別或 *type* 的子型別，則回傳非零值，否則回傳 "
"0。兩個參數都必須是非 ``NULL`` 。"

#: ../../c-api/object.rst:337
#, fuzzy
msgid ""
"Return the length of object *o*.  If the object *o* provides either the "
"sequence and mapping protocols, the sequence length is returned.  On error, "
"``-1`` is returned.  This is the equivalent to the Python expression "
"``len(o)``."
msgstr ""
"回傳物件 *o* 的長度。如果物件 *o* "
"提供序列和映射協定，則回傳序列長度。出錯時，回傳 ``-1``。這相當於 Python 表達式 "
"``len(o)``。"

#: ../../c-api/object.rst:344
#, fuzzy
msgid ""
"Return an estimated length for the object *o*. First try to return its "
"actual length, then an estimate using :meth:`~object.__length_hint__`, and "
"finally return the default value. On error return ``-1``. This is the "
"equivalent to the Python expression ``operator.length_hint(o, "
"defaultvalue)``."
msgstr ""
"回傳物件 *o* 的估計長度。首先嘗試回傳其實際長度，然後使用 :meth:`~object."
"__length_hint__` 進行估計，最後回傳預設值。出錯時回傳 ``-1``。這相當於 Python "
"表達式 ``operator.length_hint(o, defaultvalue)``。"

#: ../../c-api/object.rst:354
#, fuzzy
msgid ""
"Return element of *o* corresponding to the object *key* or ``NULL`` on "
"failure. This is the equivalent of the Python expression ``o[key]``."
msgstr "回傳對應於物件 *key* 的 *o* 元素或失敗時為 ``NULL``。這相當於 Python 表達式 "
"``o[key]``。"

#: ../../c-api/object.rst:360
#, fuzzy
msgid ""
"Map the object *key* to the value *v*.  Raise an exception and return ``-1`` "
"on failure; return ``0`` on success.  This is the equivalent of the Python "
"statement ``o[key] = v``.  This function *does not* steal a reference to *v*."
msgstr ""
"將物件 *key* 映射到值 *v*。引發例外並在失敗時回傳 ``-1``；成功回傳 ``0``。"
"這相當於 Python 語句 ``o[key] = v``。此函式*不會*竊取對*v* 的引用。"

#: ../../c-api/object.rst:368
#, fuzzy
msgid ""
"Remove the mapping for the object *key* from the object *o*.  Return ``-1`` "
"on failure.  This is equivalent to the Python statement ``del o[key]``."
msgstr "從物件 *o* 中刪除物件 *key* 的映射。失敗時回傳 ``-1``。這等同於 Python 語句 ``"
"del o[key]``。"

#: ../../c-api/object.rst:374
#, fuzzy
msgid ""
"This is equivalent to the Python expression ``dir(o)``, returning a "
"(possibly empty) list of strings appropriate for the object argument, or "
"``NULL`` if there was an error.  If the argument is ``NULL``, this is like "
"the Python ``dir()``, returning the names of the current locals; in this "
"case, if no execution frame is active then ``NULL`` is returned but :c:func:"
"`PyErr_Occurred` will return false."
msgstr ""
"這等效於 Python 表達式“dir(o)”，回傳適合物件參數的字串列表（可能為空），如果"
"出現錯誤則回傳 ``NULL`` 。如果參數是 ``NULL`` ，這就像 Python "
"的“dir()”，回傳當前本地人的名字；在這種情況下，如果沒有執行框架處於活動狀態，"
"則回傳 NULL 但 PyErr_Occurred 將回傳 false。"

#: ../../c-api/object.rst:383
#, fuzzy
msgid ""
"This is equivalent to the Python expression ``iter(o)``. It returns a new "
"iterator for the object argument, or the object  itself if the object is "
"already an iterator.  Raises :exc:`TypeError` and returns ``NULL`` if the "
"object cannot be iterated."
msgstr ""
"這等同於 Python 表達式“iter(o)”。它為物件參數回傳一個新的疊代器，如果對像已經"
"是一個疊代器，則回傳物件本身。如果無法疊代物件，則引發 :exc:`TypeError` "
"並回傳 ``NULL``。"

#: ../../c-api/object.rst:391
#, fuzzy
msgid ""
"This is the equivalent to the Python expression ``aiter(o)``. Takes an :"
"class:`AsyncIterable` object and returns an :class:`AsyncIterator` for it. "
"This is typically a new iterator but if the argument is an :class:"
"`AsyncIterator`, this returns itself. Raises :exc:`TypeError` and returns "
"``NULL`` if the object cannot be iterated."
msgstr ""
"這相當於 Python 表達式``aiter(o)``。接受一個 AsyncIterable "
"物件並為它回傳一個 AsyncIterator。這通常是一個新的疊代器，但如果參數是 "
"AsyncIterator，它會回傳自身。如果無法疊代物件，則引發 :exc:`TypeError` "
"並回傳 ``NULL``。"
