# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-06 00:23+0000\n"
"PO-Revision-Date: 2018-05-23 14:06+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.2.2\n"

#: ../../c-api/marshal.rst:6
#, fuzzy
msgid "Data marshalling support"
msgstr "資料編組支援"

#: ../../c-api/marshal.rst:8
#, fuzzy
msgid ""
"These routines allow C code to work with serialized objects using the same "
"data format as the :mod:`marshal` module.  There are functions to write data "
"into the serialization format, and additional functions that can be used to "
"read the data back.  Files used to store marshalled data must be opened in "
"binary mode."
msgstr ""
"這些例程允許 C 程式碼使用與 marshal 模組相同的資料格式來處理序列化物件。有將"
"資料寫入序列化格式的函式，以及可用於讀回資料的附加函式。用於儲存編組資料的文"
"件必須以二進位模式打開。"

#: ../../c-api/marshal.rst:14
#, fuzzy
msgid "Numeric values are stored with the least significant byte first."
msgstr "數值以最低有效位元組在前儲存。"

#: ../../c-api/marshal.rst:16
#, fuzzy
msgid ""
"The module supports two versions of the data format: version 0 is the "
"historical version, version 1 shares interned strings in the file, and upon "
"unmarshalling.  Version 2 uses a binary format for floating point numbers. "
"``Py_MARSHAL_VERSION`` indicates the current file format (currently 2)."
msgstr ""
"該模組支援兩種版本的資料格式：版本 0 是歷史版本，版本 1 在文件中共享內部字"
"串，並且在解組時。版本 2 使用二進位格式表示浮點數。 ``Py_MARSHAL_VERSION`` 指"
"示當前文件格式（當前為 2）。"

#: ../../c-api/marshal.rst:24
#, fuzzy
msgid ""
"Marshal a :c:expr:`long` integer, *value*, to *file*.  This will only write "
"the least-significant 32 bits of *value*; regardless of the size of the "
"native :c:expr:`long` type.  *version* indicates the file format."
msgstr ""
"將 :c:expr:`long` 整數 *value* 編組到 *file*。這只會寫入 *value* 的最低 32 "
"位；不管原生 :c:expr:`long` 型別的大小。 *version* 表示文件格式。"

#: ../../c-api/marshal.rst:31
#, fuzzy
msgid ""
"Marshal a Python object, *value*, to *file*. *version* indicates the file "
"format."
msgstr "將 Python 物件 *value* 編組到 *file*。 *version* 表示文件格式。"

#: ../../c-api/marshal.rst:37
#, fuzzy
msgid ""
"Return a bytes object containing the marshalled representation of *value*. "
"*version* indicates the file format."
msgstr "回傳包含 *value* 的編組表示的位元組物件。 *version* 表示文件格式。"

#: ../../c-api/marshal.rst:41
#, fuzzy
msgid "The following functions allow marshalled values to be read back in."
msgstr "以下函式允許讀回編組值。"

#: ../../c-api/marshal.rst:46
#, fuzzy
msgid ""
"Return a C :c:expr:`long` from the data stream in a :c:expr:`FILE*` opened "
"for reading.  Only a 32-bit value can be read in using this function, "
"regardless of the native size of :c:expr:`long`."
msgstr ""
"從資料流中回傳一個 C :c:expr:`long` 以 :c:expr:`FILE*` 打開以供讀取。使用此函"
"式只能讀取 32 位值，無論 :c:expr:`long` 的本機大小如何。"

#: ../../c-api/marshal.rst:50 ../../c-api/marshal.rst:60
#, fuzzy
msgid ""
"On error, sets the appropriate exception (:exc:`EOFError`) and returns "
"``-1``."
msgstr "出錯時，設定適當的例外 (:exc:`EOFError`) 並回傳 ``-1``。"

#: ../../c-api/marshal.rst:56
#, fuzzy
msgid ""
"Return a C :c:expr:`short` from the data stream in a :c:expr:`FILE*` opened "
"for reading.  Only a 16-bit value can be read in using this function, "
"regardless of the native size of :c:expr:`short`."
msgstr ""
"從打開以供讀取的 :c:expr:`FILE*` 中的資料流中回傳一個 C :c:expr:`short`。使用"
"此函式只能讀取 16 位值，無論 :c:expr:`short` 的原始大小如何。"

#: ../../c-api/marshal.rst:66
#, fuzzy
msgid ""
"Return a Python object from the data stream in a :c:expr:`FILE*` opened for "
"reading."
msgstr "從打開以供讀取的 :c:expr:`FILE*` 中的資料流中回傳一個 Python 物件。"

#: ../../c-api/marshal.rst:69 ../../c-api/marshal.rst:83
#: ../../c-api/marshal.rst:92
#, fuzzy
msgid ""
"On error, sets the appropriate exception (:exc:`EOFError`, :exc:`ValueError` "
"or :exc:`TypeError`) and returns ``NULL``."
msgstr ""
"出錯時，設定適當的例外（:exc:`EOFError`、:exc:`ValueError` 或 :exc:"
"`TypeError`）並回傳 ``NULL``。"

#: ../../c-api/marshal.rst:75
#, fuzzy
msgid ""
"Return a Python object from the data stream in a :c:expr:`FILE*` opened for "
"reading.  Unlike :c:func:`PyMarshal_ReadObjectFromFile`, this function "
"assumes that no further objects will be read from the file, allowing it to "
"aggressively load file data into memory so that the de-serialization can "
"operate from data in memory rather than reading a byte at a time from the "
"file.  Only use these variant if you are certain that you won't be reading "
"anything else from the file."
msgstr ""
"從打開以供讀取的 :c:expr:`FILE*` 中的資料流中回傳一個 Python 物件。與:c:func:"
"`PyMarshal_ReadObjectFromFile` 不同，此函式假定不會從文件中讀取更多物件，從而"
"允許它積極地將文件資料加載到記憶體中，以便反序列化可以從記憶體中的資料進行操"
"作，而不是讀取一個位元組一次從文件中。只有在確定不會從文件中讀取任何其他內容"
"時才使用這些變體。"

#: ../../c-api/marshal.rst:89
#, fuzzy
msgid ""
"Return a Python object from the data stream in a byte buffer containing "
"*len* bytes pointed to by *data*."
msgstr ""
"從包含 *data* 指向的 *len* 位元組的位元組緩衝區中的資料流中回傳一個 Python 物"
"件。"
