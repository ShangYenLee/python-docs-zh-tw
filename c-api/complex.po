# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-06 00:23+0000\n"
"PO-Revision-Date: 2023-05-02 16:41+0800\n"
"Last-Translator: Matt Wang <mattwang44@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.2.2\n"

#: ../../c-api/complex.rst:6
msgid "Complex Number Objects"
msgstr "複數物件"

#: ../../c-api/complex.rst:10
#, fuzzy
msgid ""
"Python's complex number objects are implemented as two distinct types when "
"viewed from the C API:  one is the Python object exposed to Python programs, "
"and the other is a C structure which represents the actual complex number "
"value. The API provides functions for working with both."
msgstr ""
"從 C API 來看，Python 的複數對像被實作為兩種不同的型別：一種是暴露給 Python "
"程式的 Python 物件，另一種是表示實際複數值的 C 結構。 API 提供了與兩者一起使"
"用的功能。"

#: ../../c-api/complex.rst:17
#, fuzzy
msgid "Complex Numbers as C Structures"
msgstr "作為 C 結構的複數"

#: ../../c-api/complex.rst:19
#, fuzzy
msgid ""
"Note that the functions which accept these structures as parameters and "
"return them as results do so *by value* rather than dereferencing them "
"through pointers.  This is consistent throughout the API."
msgstr ""
"請注意，接受這些結構作為參數並將它們作為結果回傳的函式是按值*而不是通過指標取"
"消引用它們。這在整個 API 中都是一致的。"

#: ../../c-api/complex.rst:26
#, fuzzy
msgid ""
"The C structure which corresponds to the value portion of a Python complex "
"number object.  Most of the functions for dealing with complex number "
"objects use structures of this type as input or output values, as "
"appropriate.  It is defined as::"
msgstr ""
"對應於 Python 複數物件的值部分的 C 結構。大多數處理複數物件的函式都視情況使用"
"這種型別的結構作為輸入或輸出值。它被定義為："

#: ../../c-api/complex.rst:39
msgid ""
"Return the sum of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr "使用 C :c:type:`Py_complex` 表示回傳兩個複數的總和。"

#: ../../c-api/complex.rst:45
msgid ""
"Return the difference between two complex numbers, using the C :c:type:"
"`Py_complex` representation."
msgstr "使用 C :c:type:`Py_complex` 表示回傳兩個複數之間的差。"

#: ../../c-api/complex.rst:51
#, fuzzy
msgid ""
"Return the negation of the complex number *num*, using the C :c:type:"
"`Py_complex` representation."
msgstr "使用 C :c:type:`Py_complex` 表示回傳複數 *num* 的否定。"

#: ../../c-api/complex.rst:57
msgid ""
"Return the product of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr "使用 C :c:type:`Py_complex` 表示回傳兩個複數的乘積。"

#: ../../c-api/complex.rst:63
msgid ""
"Return the quotient of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr "使用 C :c:type:`Py_complex` 表示回傳兩個複數的商。"

#: ../../c-api/complex.rst:66
#, fuzzy
msgid ""
"If *divisor* is null, this method returns zero and sets :c:data:`errno` to :"
"c:data:`EDOM`."
msgstr ""
"如果 *divisor* 為 null，此方法回傳零並將 :c:data:`errno` 設定為 :c:data:"
"`EDOM`。"

#: ../../c-api/complex.rst:72
#, fuzzy
msgid ""
"Return the exponentiation of *num* by *exp*, using the C :c:type:"
"`Py_complex` representation."
msgstr "使用 C :c:type:`Py_complex` 表示形式，通過 *exp* 回傳 *num* 的冪。"

#: ../../c-api/complex.rst:75
#, fuzzy
msgid ""
"If *num* is null and *exp* is not a positive real number, this method "
"returns zero and sets :c:data:`errno` to :c:data:`EDOM`."
msgstr ""
"如果 *num* 為空且 *exp* 不是正實數，則此方法回傳零並將 :c:data:`errno` 設定"
"為 :c:data:`EDOM`。"

#: ../../c-api/complex.rst:80
msgid "Complex Numbers as Python Objects"
msgstr "作為 Python 物件的複數"

#: ../../c-api/complex.rst:85
#, fuzzy
msgid ""
"This subtype of :c:type:`PyObject` represents a Python complex number object."
msgstr ":c:type:`PyObject` 的這個子型別表示一個 Python 複數物件。"

#: ../../c-api/complex.rst:90
#, fuzzy
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python complex number "
"type. It is the same object as :class:`complex` in the Python layer."
msgstr ""
":c:type:`PyTypeObject` 的這個實例表示 Python 複數型別。它與 Python 層中的 :"
"class:`complex` 是同一個物件。"

#: ../../c-api/complex.rst:96
#, fuzzy
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject` or a subtype of :"
"c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"如果其參數是 PyComplexObject 或 PyComplexObject 的子型別，則回傳 true。這個函"
"式總是成功的。"

#: ../../c-api/complex.rst:102
#, fuzzy
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject`, but not a "
"subtype of :c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"如果其參數是 PyComplexObject 但不是 PyComplexObject 的子型別，則回傳 true。這"
"個函式總是成功的。"

#: ../../c-api/complex.rst:108
#, fuzzy
msgid ""
"Create a new Python complex number object from a C :c:type:`Py_complex` "
"value."
msgstr "從 C :c:type:`Py_complex` 值建立一個新的 Python 複數物件。"

#: ../../c-api/complex.rst:113
#, fuzzy
msgid "Return a new :c:type:`PyComplexObject` object from *real* and *imag*."
msgstr "從 *real* 和 *imag* 回傳一個新的 :c:type:`PyComplexObject` 物件。"

#: ../../c-api/complex.rst:118
msgid "Return the real part of *op* as a C :c:expr:`double`."
msgstr "將 *op* 的實部作為 C :c:expr:`double` 回傳。"

#: ../../c-api/complex.rst:123
msgid "Return the imaginary part of *op* as a C :c:expr:`double`."
msgstr "將 *op* 的虛部作為 C :c:expr:`double` 回傳。"

#: ../../c-api/complex.rst:128
msgid "Return the :c:type:`Py_complex` value of the complex number *op*."
msgstr "回傳複數 *op* 的 :c:type:`Py_complex` 值。"

#: ../../c-api/complex.rst:130
#, fuzzy
msgid ""
"If *op* is not a Python complex number object but has a :meth:`__complex__` "
"method, this method will first be called to convert *op* to a Python complex "
"number object.  If ``__complex__()`` is not defined then it falls back to :"
"meth:`__float__`.  If ``__float__()`` is not defined then it falls back to :"
"meth:`__index__`.  Upon failure, this method returns ``-1.0`` as a real "
"value."
msgstr ""
"如果 *op* 不是 Python 複數物件但有一個 :meth:`__complex__` 方法，則首先呼叫此"
"方法將 *op* 轉換為 Python 複數物件。如果未定義 ``__complex__()`` 則它會退回"
"到 :meth:`__float__` 。如果未定義 ``__float__()`` 那麼它會回退到 :meth:"
"`__index__`。失敗時，此方法回傳“-1.0”作為實際值。"

#: ../../c-api/complex.rst:137
msgid "Use :meth:`__index__` if available."
msgstr "如果可用，請使用 :meth:`__index__`。"
