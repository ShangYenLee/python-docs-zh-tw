# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Ching-Lung Chuang, 2015
# Liang-Bo Wang <me@liang2.tw>, 2015
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-15 20:43+0000\n"
"PO-Revision-Date: 2017-09-22 18:26+0000\n"
"Last-Translator: Liang-Bo Wang <me@liang2.tw>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.2.2\n"

#: ../../c-api/float.rst:6
msgid "Floating Point Objects"
msgstr "浮點數物件 (Floating Point Objects)"

#: ../../c-api/float.rst:13
#, fuzzy
msgid ""
"This subtype of :c:type:`PyObject` represents a Python floating point object."
msgstr ":c:type:`PyObject` 的這種子型別表示 Python 浮點物件。"

#: ../../c-api/float.rst:18
#, fuzzy
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python floating point "
"type.  This is the same object as :class:`float` in the Python layer."
msgstr ""
"這個 :c:type:`PyTypeObject` 的實例表示 Python 浮點型別。這與 Python 層中的 "
"float 是同一個物件。"

#: ../../c-api/float.rst:24
#, fuzzy
msgid ""
"Return true if its argument is a :c:type:`PyFloatObject` or a subtype of :c:"
"type:`PyFloatObject`.  This function always succeeds."
msgstr ""
"如果其參數是 PyFloatObject 或 PyFloatObject 的子型別，則回傳 true。這個函式總"
"是成功的。"

#: ../../c-api/float.rst:30
#, fuzzy
msgid ""
"Return true if its argument is a :c:type:`PyFloatObject`, but not a subtype "
"of :c:type:`PyFloatObject`.  This function always succeeds."
msgstr ""
"如果其參數是 PyFloatObject 但不是 PyFloatObject 的子型別，則回傳 true。這個函"
"式總是成功的。"

#: ../../c-api/float.rst:36
#, fuzzy
msgid ""
"Create a :c:type:`PyFloatObject` object based on the string value in *str*, "
"or ``NULL`` on failure."
msgstr ""
"根據 *str* 中的字串值建立一個 PyFloatObject 物件，如果失敗則建立 NULL。"

#: ../../c-api/float.rst:42
#, fuzzy
msgid ""
"Create a :c:type:`PyFloatObject` object from *v*, or ``NULL`` on failure."
msgstr "從 *v* 建立一個 :c:type:`PyFloatObject` 物件，或者失敗時為 ``NULL``。"

#: ../../c-api/float.rst:47
#, fuzzy
msgid ""
"Return a C :c:expr:`double` representation of the contents of *pyfloat*.  If "
"*pyfloat* is not a Python floating point object but has a :meth:`__float__` "
"method, this method will first be called to convert *pyfloat* into a float. "
"If ``__float__()`` is not defined then it falls back to :meth:`__index__`. "
"This method returns ``-1.0`` upon failure, so one should call :c:func:"
"`PyErr_Occurred` to check for errors."
msgstr ""
"回傳 *pyfloat* 內容的 C:c:expr:`double` 表示。如果 *pyfloat* 不是 Python 浮點"
"物件但有一個 :meth:`__float__` 方法，將首先呼叫此方法將 *pyfloat* 轉換為浮點"
"數。如果未定義 ``__float__()`` 那麼它會回退到 :meth:`__index__`。此方法在失敗"
"時回傳 ``-1.0``，因此應該呼叫 :c:func:`PyErr_Occurred` 來檢查錯誤。"

#: ../../c-api/float.rst:54
msgid "Use :meth:`__index__` if available."
msgstr "如果可用，請使用 :meth:`__index__`。"

#: ../../c-api/float.rst:60
#, fuzzy
msgid ""
"Return a C :c:expr:`double` representation of the contents of *pyfloat*, but "
"without error checking."
msgstr "回傳 *pyfloat* 內容的 C:c:expr:`double` 表示，但不進行錯誤檢查。"

#: ../../c-api/float.rst:66
#, fuzzy
msgid ""
"Return a structseq instance which contains information about the precision, "
"minimum and maximum values of a float. It's a thin wrapper around the header "
"file :file:`float.h`."
msgstr ""
"回傳一個 structseq 實例，其中包含有關浮點數的精度、最小值和最大值的資訊。它是"
"標頭檔 :file:`float.h` 的薄包裝。"

#: ../../c-api/float.rst:73
#, fuzzy
msgid ""
"Return the maximum representable finite float *DBL_MAX* as C :c:expr:"
"`double`."
msgstr "將最大可表示的有限浮點數 *DBL_MAX* 回傳為 C:c:expr:`double`。"

#: ../../c-api/float.rst:78
#, fuzzy
msgid ""
"Return the minimum normalized positive float *DBL_MIN* as C :c:expr:`double`."
msgstr "將最小歸一化正浮點數 *DBL_MIN* 回傳為 C:c:expr:`double`。"

#: ../../c-api/float.rst:82
#, fuzzy
msgid "Pack and Unpack functions"
msgstr "打包和解包函式"

#: ../../c-api/float.rst:84
#, fuzzy
msgid ""
"The pack and unpack functions provide an efficient platform-independent way "
"to store floating-point values as byte strings. The Pack routines produce a "
"bytes string from a C :c:expr:`double`, and the Unpack routines produce a C :"
"c:expr:`double` from such a bytes string. The suffix (2, 4 or 8) specifies "
"the number of bytes in the bytes string."
msgstr ""
"pack 和 unpack 函式提供了一種與平台無關的有效方式來將浮點值儲存為位元組字"
"串。 Pack 例程從 C:c:expr:`double` 生成位元組字串，Unpack 例程從這樣的位元組"
"字串生成 C:c:expr:`double`。後綴（2、4 或 8）指定位元組串中的位元組數。"

#: ../../c-api/float.rst:90
#, fuzzy
msgid ""
"On platforms that appear to use IEEE 754 formats these functions work by "
"copying bits. On other platforms, the 2-byte format is identical to the IEEE "
"754 binary16 half-precision format, the 4-byte format (32-bit) is identical "
"to the IEEE 754 binary32 single precision format, and the 8-byte format to "
"the IEEE 754 binary64 double precision format, although the packing of INFs "
"and NaNs (if such things exist on the platform) isn't handled correctly, and "
"attempting to unpack a bytes string containing an IEEE INF or NaN will raise "
"an exception."
msgstr ""
"在似乎使用 IEEE 754 格式的平台上，這些函式通過複製位來工作。在其他平台上，2 "
"位元組格式與 IEEE 754 二進位 16 半精度格式相同，4 位元組格式（32 位）與 IEEE "
"754 二進位 32 單精度格式相同，8 位元組格式與IEEE 754 binary64 雙精度格式，儘"
"管 INF 和 NaN 的打包（如果平台上存在此類內容）未正確處理，並且嘗試解包包含 "
"IEEE INF 或 NaN 的位元組字串將引發例外。"

#: ../../c-api/float.rst:99
#, fuzzy
msgid ""
"On non-IEEE platforms with more precision, or larger dynamic range, than "
"IEEE 754 supports, not all values can be packed; on non-IEEE platforms with "
"less precision, or smaller dynamic range, not all values can be unpacked. "
"What happens in such cases is partly accidental (alas)."
msgstr ""
"在比 IEEE 754 支援的精度更高或動態範圍更大的非 IEEE 平台上，並非所有值都可以"
"打包；在精度較低或動態範圍較小的非 IEEE 平台上，並非所有值都可以解包。在這種"
"情況下發生的事情部分是偶然的（唉）。"

#: ../../c-api/float.rst:107
#, fuzzy
msgid "Pack functions"
msgstr "打包功能"

#: ../../c-api/float.rst:109
#, fuzzy
msgid ""
"The pack routines write 2, 4 or 8 bytes, starting at *p*. *le* is an :c:expr:"
"`int` argument, non-zero if you want the bytes string in little-endian "
"format (exponent last, at ``p+1``, ``p+3``, or ``p+6`` ``p+7``), zero if you "
"want big-endian format (exponent first, at *p*). The :c:data:`PY_BIG_ENDIAN` "
"constant can be used to use the native endian: it is equal to ``1`` on big "
"endian processor, or ``0`` on little endian processor."
msgstr ""
"pack 例程寫入 2、4 或 8 個位元組，從 *p* 開始。 *le* 是一個 :c:expr:`int` 參"
"數，如果您想要小端格式的位元組字串（指數最後，在``p+1``、``p+3``、或 ``p+6`` "
"``p+7``），如果你想要大端格式（指數在前，在 *p* 處），則為零。 :c:data:"
"`PY_BIG_ENDIAN` 常數可用於使用本機位元組序：它在大端處理器上等於 ``1``，在小"
"端處理器上等於 ``0``。"

#: ../../c-api/float.rst:116
#, fuzzy
msgid ""
"Return value: ``0`` if all is OK, ``-1`` if error (and an exception is set, "
"most likely :exc:`OverflowError`)."
msgstr ""
"回傳值：如果一切正常，則為 ``0``，如果錯誤則為``-1``（並且設定了例外，很可能"
"是 :exc:`OverflowError`）。"

#: ../../c-api/float.rst:119
msgid "There are two problems on non-IEEE platforms:"
msgstr "在非 IEEE 平台上有兩個問題："

#: ../../c-api/float.rst:121
#, fuzzy
msgid "What this does is undefined if *x* is a NaN or infinity."
msgstr "如果 *x* 是 NaN 或無窮大，則此操作未定義。"

#: ../../c-api/float.rst:122
msgid "``-0.0`` and ``+0.0`` produce the same bytes string."
msgstr "``-0.0`` 和 ``+0.0`` 產生相同的位元組字串。"

#: ../../c-api/float.rst:126
#, fuzzy
msgid "Pack a C double as the IEEE 754 binary16 half-precision format."
msgstr "將 C double 打包為 IEEE 754 binary16 半精度格式。"

#: ../../c-api/float.rst:130
#, fuzzy
msgid "Pack a C double as the IEEE 754 binary32 single precision format."
msgstr "將 C double 打包為 IEEE 754 binary32 單精度格式。"

#: ../../c-api/float.rst:134
#, fuzzy
msgid "Pack a C double as the IEEE 754 binary64 double precision format."
msgstr "打包一個 C double 作為 IEEE 754 binary64 雙精度格式。"

#: ../../c-api/float.rst:138
#, fuzzy
msgid "Unpack functions"
msgstr "解包函式"

#: ../../c-api/float.rst:140
#, fuzzy
msgid ""
"The unpack routines read 2, 4 or 8 bytes, starting at *p*.  *le* is an :c:"
"expr:`int` argument, non-zero if the bytes string is in little-endian format "
"(exponent last, at ``p+1``, ``p+3`` or ``p+6`` and ``p+7``), zero if big-"
"endian (exponent first, at *p*). The :c:data:`PY_BIG_ENDIAN` constant can be "
"used to use the native endian: it is equal to ``1`` on big endian processor, "
"or ``0`` on little endian processor."
msgstr ""
"解包例程讀取 2、4 或 8 個位元組，從 *p* 開始。 *le* 是一個 :c:expr:`int` 參"
"數，如果位元組字串是小端格式（指數最後，在``p+1``、``p+3`` 或` `p+6`` 和 "
"``p+7``)，如果是大端序則為零（指數在前，在 *p* 處）。 :c:data:"
"`PY_BIG_ENDIAN` 常數可用於使用本機位元組序：它在大端處理器上等於 ``1``，在小"
"端處理器上等於 ``0``。"

#: ../../c-api/float.rst:147
#, fuzzy
msgid ""
"Return value: The unpacked double.  On error, this is ``-1.0`` and :c:func:"
"`PyErr_Occurred` is true (and an exception is set, most likely :exc:"
"`OverflowError`)."
msgstr ""
"回傳值：解壓後的雙精度值。出錯時，這是 ``-1.0`` 並且 :c:func:"
"`PyErr_Occurred` 為真（並且設定了例外，很可能是 :exc:`OverflowError`）。"

#: ../../c-api/float.rst:151
#, fuzzy
msgid ""
"Note that on a non-IEEE platform this will refuse to unpack a bytes string "
"that represents a NaN or infinity."
msgstr ""
"請注意，在非 IEEE 平台上，這將拒絕解壓縮表示 NaN 或無窮大的位元組字串。"

#: ../../c-api/float.rst:156
#, fuzzy
msgid "Unpack the IEEE 754 binary16 half-precision format as a C double."
msgstr "將 IEEE 754 二進位 16 半精度格式解壓為 C 雙精度數。"

#: ../../c-api/float.rst:160
#, fuzzy
msgid "Unpack the IEEE 754 binary32 single precision format as a C double."
msgstr "將 IEEE 754 binary32 單精度格式解壓縮為 C 雙精度格式。"

#: ../../c-api/float.rst:164
#, fuzzy
msgid "Unpack the IEEE 754 binary64 double precision format as a C double."
msgstr "將 IEEE 754 binary64 雙精度格式解壓縮為 C 雙精度格式。"
