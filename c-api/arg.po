# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-24 00:13+0000\n"
"PO-Revision-Date: 2022-10-16 03:21+0800\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.1.1\n"

#: ../../c-api/arg.rst:6
msgid "Parsing arguments and building values"
msgstr "剖析引數與建置數值"

#: ../../c-api/arg.rst:8
#, fuzzy
msgid ""
"These functions are useful when creating your own extensions functions and "
"methods.  Additional information and examples are available in :ref:"
"`extending-index`."
msgstr "這些函式在建立您自己的擴充函式和方法時很有用。其他資訊和示例可在 :ref"
":`extending-index` 中找到。"

#: ../../c-api/arg.rst:12
#, fuzzy
msgid ""
"The first three of these functions described, :c:func:`PyArg_ParseTuple`, :c:"
"func:`PyArg_ParseTupleAndKeywords`, and :c:func:`PyArg_Parse`, all use "
"*format strings* which are used to tell the function about the expected "
"arguments.  The format strings use the same syntax for each of these "
"functions."
msgstr ""
"描述的這些函式中的前三個，:c:func:`PyArg_ParseTuple`、:c:func:`PyArg_ParseTup"
"leAndKeywords` 和:c:func:`PyArg_Parse`，都使用*格式字串*，用於告訴函式關於預"
"期的論據。格式字串對這些函式中的每一個都使用相同的語法。"

#: ../../c-api/arg.rst:19
#, fuzzy
msgid "Parsing arguments"
msgstr "剖析參數"

#: ../../c-api/arg.rst:21
#, fuzzy
msgid ""
"A format string consists of zero or more \"format units.\"  A format unit "
"describes one Python object; it is usually a single character or a "
"parenthesized sequence of format units.  With a few exceptions, a format "
"unit that is not a parenthesized sequence normally corresponds to a single "
"address argument to these functions.  In the following description, the "
"quoted form is the format unit; the entry in (round) parentheses is the "
"Python object type that matches the format unit; and the entry in [square] "
"brackets is the type of the C variable(s) whose address should be passed."
msgstr ""
"格式字串由零個或多個“格式單元”組成。一個格式單元描述一個 Python 物件；它通常"
"是單個字元或帶括號的格式單元序列。除了少數例外，不是括號序列的格式單元通常對"
"應於這些函式的單個地址參數。在下面的描述中，引用的形式是格式單元； "
"（圓）括號中的條目是與格式單元匹配的Python對像型別； [square] "
"括號中的條目是應傳遞其地址的 C 變數的型別。"

#: ../../c-api/arg.rst:31
#, fuzzy
msgid "Strings and buffers"
msgstr "字串和緩衝區"

#: ../../c-api/arg.rst:33
#, fuzzy
msgid ""
"These formats allow accessing an object as a contiguous chunk of memory. You "
"don't have to provide raw storage for the returned unicode or bytes area."
msgstr "這些格式允許將對像作為連續的記憶體塊進行訪問。您不必為回傳的 unicode "
"或位元組區域提供原始儲存。"

#: ../../c-api/arg.rst:37
#, fuzzy
msgid "Unless otherwise stated, buffers are not NUL-terminated."
msgstr "除非另有說明，否則緩衝區不以 NULL 結尾。"

#: ../../c-api/arg.rst:39
#, fuzzy
msgid "There are three ways strings and buffers can be converted to C:"
msgstr "可以通過三種方式將字串和緩衝區轉換為 C："

#: ../../c-api/arg.rst:41
#, fuzzy
msgid ""
"Formats such as ``y*`` and ``s*`` fill a :c:type:`Py_buffer` structure. This "
"locks the underlying buffer so that the caller can subsequently use the "
"buffer even inside a :c:type:`Py_BEGIN_ALLOW_THREADS` block without the risk "
"of mutable data being resized or destroyed. As a result, **you have to "
"call** :c:func:`PyBuffer_Release` after you have finished processing the "
"data (or in any early abort case)."
msgstr ""
"``y*`` 和 ``s*`` 等格式填充一個 :c:type:`Py_buffer` "
"結構。這會鎖定底層緩衝區，以便呼叫者隨後甚至可以在 Py_BEGIN_ALLOW_THREADS "
"塊內使用緩衝區，而不會出現可變資料被調整大小或被破壞的風險"
"。因此，**您必須在完成資料處理後呼叫** "
":c:func:`PyBuffer_Release`（或在任何早期中止情況下）。"

#: ../../c-api/arg.rst:48
#, fuzzy
msgid ""
"The ``es``, ``es#``, ``et`` and ``et#`` formats allocate the result buffer. "
"**You have to call** :c:func:`PyMem_Free` after you have finished processing "
"the data (or in any early abort case)."
msgstr ""
"``es``、``es#``、``et`` 和 ``et#`` 格式分配結果緩衝區。 "
"**您必須在完成資料處理後呼叫** "
":c:func:`PyMem_Free`（或在任何早期中止情況下）。"

#: ../../c-api/arg.rst:54
#, fuzzy
msgid ""
"Other formats take a :class:`str` or a read-only :term:`bytes-like object`, "
"such as :class:`bytes`, and provide a ``const char *`` pointer to its "
"buffer. In this case the buffer is \"borrowed\": it is managed by the "
"corresponding Python object, and shares the lifetime of this object. You "
"won't have to release any memory yourself."
msgstr ""
"其他格式採用 :class:`str` 或只讀的 :term:`bytes-like object`，例如 "
":class:`bytes`，並提供指向其緩衝區的 ``const char *`` "
"指標。在這種情況下，緩衝區是“借用的”：它由相應的 Python "
"對像管理，並共享該物件的生命週期。您不必自己釋放任何記憶體。"

#: ../../c-api/arg.rst:61
#, fuzzy
msgid ""
"To ensure that the underlying buffer may be safely borrowed, the object's :c:"
"member:`PyBufferProcs.bf_releasebuffer` field must be ``NULL``. This "
"disallows common mutable objects such as :class:`bytearray`, but also some "
"read-only objects such as :class:`memoryview` of :class:`bytes`."
msgstr ""
"為了確保可以安全地借用底層緩衝區，物件的:c:member:`PyBufferProcs."
"bf_releasebuffer` 欄位必須為``NULL``。這不允許常見的可變物件，例如 :class:`by"
"tearray`，但也不允許一些只讀物件，例如 :class:`memoryview` of "
":class:`bytes`。"

#: ../../c-api/arg.rst:67
#, fuzzy
msgid ""
"Besides this ``bf_releasebuffer`` requirement, there is no check to verify "
"whether the input object is immutable (e.g. whether it would honor a request "
"for a writable buffer, or whether another thread can mutate the data)."
msgstr ""
"除了這個 ``bf_releasebuffer`` 要求之外，沒有檢查來驗證輸入對像是否是不可變的"
"（例如，它是否會接受對可寫緩衝區的請求，或者另一個執行緒是否可以改變資料）。"

#: ../../c-api/arg.rst:73
#, fuzzy
msgid ""
"For all ``#`` variants of formats (``s#``, ``y#``, etc.), the macro :c:macro:"
"`PY_SSIZE_T_CLEAN` must be defined before including :file:`Python.h`. On "
"Python 3.9 and older, the type of the length argument is :c:type:"
"`Py_ssize_t` if the :c:macro:`PY_SSIZE_T_CLEAN` macro is defined, or int "
"otherwise."
msgstr ""
"對於所有格式的``#`` 變體（``s#``、``y#`` "
"等），巨集:c:macro:`PY_SSIZE_T_CLEAN` 必須在包含 :file:`Python 之前定義。哈`。"
"在 Python 3.9 及更早版本上，如果定義了 PY_SSIZE_T_CLEAN "
"巨集，則長度參數的型別為 :c:type:`Py_ssize_t`，否則為 int。"

#: ../../c-api/arg.rst:98
msgid "``s`` (:class:`str`) [const char \\*]"
msgstr "``s`` (:class:`str`) [const char \\*]"

#: ../../c-api/arg.rst:81
#, fuzzy
msgid ""
"Convert a Unicode object to a C pointer to a character string. A pointer to "
"an existing string is stored in the character pointer variable whose address "
"you pass.  The C string is NUL-terminated. The Python string must not "
"contain embedded null code points; if it does, a :exc:`ValueError` exception "
"is raised. Unicode objects are converted to C strings using ``'utf-8'`` "
"encoding. If this conversion fails, a :exc:`UnicodeError` is raised."
msgstr ""
"將 Unicode 物件轉換為指向字串的 C "
"指標。指向現有字串的指標儲存在您傳遞其地址的字元指標變數中。 C 字串以 NUL "
"結尾。 Python 字串不得包含嵌入的空程式碼點；如果是，則會引發 "
":exc:`ValueError` 例外。使用 ``'utf-8'`` 編碼將 Unicode 物件轉換為 C "
"字串。如果此轉換失敗，則會引發 :exc:`UnicodeError`。"

#: ../../c-api/arg.rst:90
#, fuzzy
msgid ""
"This format does not accept :term:`bytes-like objects <bytes-like object>`.  "
"If you want to accept filesystem paths and convert them to C character "
"strings, it is preferable to use the ``O&`` format with :c:func:"
"`PyUnicode_FSConverter` as *converter*."
msgstr ""
"這種格式不接受 :term:`bytes-like objects <bytes-like object>`。"
"如果你想接受文件系統路徑並將它們轉換為 C 字串，最好使用 ``O&`` "
"格式和:c:func:`PyUnicode_FSConverter` 作為*轉換器*。"

#: ../../c-api/arg.rst:96 ../../c-api/arg.rst:164
#, fuzzy
msgid ""
"Previously, :exc:`TypeError` was raised when embedded null code points were "
"encountered in the Python string."
msgstr "以前，當在 Python 字串中遇到嵌入的空程式碼點時會引發 :exc:`TypeError`。"

#: ../../c-api/arg.rst:104
msgid "``s*`` (:class:`str` or :term:`bytes-like object`) [Py_buffer]"
msgstr "``s*``\\ （:class:`str` 或 :term:`bytes-like object`）[Py_buffer]"

#: ../../c-api/arg.rst:101
#, fuzzy
msgid ""
"This format accepts Unicode objects as well as bytes-like objects. It fills "
"a :c:type:`Py_buffer` structure provided by the caller. In this case the "
"resulting C string may contain embedded NUL bytes. Unicode objects are "
"converted to C strings using ``'utf-8'`` encoding."
msgstr ""
"此格式接受 Unicode 對像以及類似位元組的物件。它填充呼叫者提供的 "
":c:type:`Py_buffer` 結構。在這種情況下，生成的 C 字串可能包含嵌入的 NUL "
"位元組。使用 ``'utf-8'`` 編碼將 Unicode 物件轉換為 C 字串。"

#: ../../c-api/arg.rst:111
#, fuzzy
msgid ""
"``s#`` (:class:`str`, read-only :term:`bytes-like object`) [const char \\*, :"
"c:type:`Py_ssize_t`]"
msgstr ""
"``s#`` (:class:`str`, 只讀 :term:`bytes-like object`) [const char \\*, "
":c:type:`Py_ssize_t`]"

#: ../../c-api/arg.rst:107
#, fuzzy
msgid ""
"Like ``s*``, except that it provides a :ref:`borrowed buffer <c-arg-borrowed-"
"buffer>`. The result is stored into two C variables, the first one a pointer "
"to a C string, the second one its length. The string may contain embedded "
"null bytes. Unicode objects are converted to C strings using ``'utf-8'`` "
"encoding."
msgstr ""
"類似於 ``s*``，只是它提供了一個 :ref:`借用緩衝區 <c-arg-borrowed-buffer>`。"
"結果儲存在兩個 C 變數中，第一個是指向 C "
"字串的指標，第二個是它的長度。該字串可能包含嵌入的空位元組。使用 ``'utf-8'`` "
"編碼將 Unicode 物件轉換為 C 字串。"

#: ../../c-api/arg.rst:115 ../../c-api/arg.rst:581
msgid "``z`` (:class:`str` or ``None``) [const char \\*]"
msgstr "``z``\\ （:class:`str` 或 ``None``）[const char \\*]"

#: ../../c-api/arg.rst:114
#, fuzzy
msgid ""
"Like ``s``, but the Python object may also be ``None``, in which case the C "
"pointer is set to ``NULL``."
msgstr "像 ``s``，但 Python 對像也可能是 ``None``，在這種情況下，C 指標被設定為 "
"``NULL``。"

#: ../../c-api/arg.rst:119
msgid ""
"``z*`` (:class:`str`, :term:`bytes-like object` or ``None``) [Py_buffer]"
msgstr ""
"``z*``\\ （:class:`str`\\ 、\\ :term:`bytes-like object` 或 ``None``）"
"[Py_buffer]"

#: ../../c-api/arg.rst:118
#, fuzzy
msgid ""
"Like ``s*``, but the Python object may also be ``None``, in which case the "
"``buf`` member of the :c:type:`Py_buffer` structure is set to ``NULL``."
msgstr ""
"像 ``s*``，但 Python 對像也可能是 ``None``，在這種情況下，:c:type:`Py_buffer`"
" 結構的 ``buf`` 成員被設定為 ``NULL`` ."

#: ../../c-api/arg.rst:123
#, fuzzy
msgid ""
"``z#`` (:class:`str`, read-only :term:`bytes-like object` or ``None``) "
"[const char \\*, :c:type:`Py_ssize_t`]"
msgstr ""
"``z#`` (:class:`str`, read-only :term:`bytes-like object` or ``None``) ["
"const char \\*, :c:type:`Py_ssize_t`]"

#: ../../c-api/arg.rst:122
#, fuzzy
msgid ""
"Like ``s#``, but the Python object may also be ``None``, in which case the C "
"pointer is set to ``NULL``."
msgstr "像 ``s#``，但 Python 對像也可能是 ``None``，在這種情況下，C 指標被設定為 "
"``NULL``。"

#: ../../c-api/arg.rst:134
msgid "``y`` (read-only :term:`bytes-like object`) [const char \\*]"
msgstr "``y``\\ （唯讀 :term:`bytes-like object`）[const char \\*]"

#: ../../c-api/arg.rst:126
#, fuzzy
msgid ""
"This format converts a bytes-like object to a C pointer to a :ref:`borrowed "
"<c-arg-borrowed-buffer>` character string; it does not accept Unicode "
"objects.  The bytes buffer must not contain embedded null bytes; if it does, "
"a :exc:`ValueError` exception is raised."
msgstr ""
"這種格式將類似位元組的物件轉換為指向 :ref:`借用 <c-arg-borrowed-buffer>` "
"字串的 C 指標；它不接受 Unicode "
"物件。位元組緩衝區不得包含嵌入的空位元組；如果是，則會引發 :exc:`ValueError` "
"例外。"

#: ../../c-api/arg.rst:132
#, fuzzy
msgid ""
"Previously, :exc:`TypeError` was raised when embedded null bytes were "
"encountered in the bytes buffer."
msgstr "以前，當在位元組緩衝區中遇到嵌入的空位元組時會引發 TypeError。"

#: ../../c-api/arg.rst:139
msgid "``y*`` (:term:`bytes-like object`) [Py_buffer]"
msgstr "``y*`` (:term:`bytes-like object`) [Py_buffer]"

#: ../../c-api/arg.rst:137
#, fuzzy
msgid ""
"This variant on ``s*`` doesn't accept Unicode objects, only bytes-like "
"objects.  **This is the recommended way to accept binary data.**"
msgstr "``s*`` 的這個變體不接受 Unicode 物件，只接受類似位元組的物件。 "
"**這是接受二進位資料的推薦方式。**"

#: ../../c-api/arg.rst:143
#, fuzzy
msgid ""
"``y#`` (read-only :term:`bytes-like object`) [const char \\*, :c:type:"
"`Py_ssize_t`]"
msgstr ""
"``y#``（只讀 :term:`bytes-like object`）[const char \\*, "
":c:type:`Py_ssize_t`]"

#: ../../c-api/arg.rst:142
#, fuzzy
msgid ""
"This variant on ``s#`` doesn't accept Unicode objects, only bytes-like "
"objects."
msgstr "``s#`` 上的這個變體不接受 Unicode 物件，只接受類似位元組的物件。"

#: ../../c-api/arg.rst:148
msgid "``S`` (:class:`bytes`) [PyBytesObject \\*]"
msgstr "``S`` (:class:`bytes`) [PyBytesObject \\*]"

#: ../../c-api/arg.rst:146
#, fuzzy
msgid ""
"Requires that the Python object is a :class:`bytes` object, without "
"attempting any conversion.  Raises :exc:`TypeError` if the object is not a "
"bytes object.  The C variable may also be declared as :c:expr:`PyObject*`."
msgstr ""
"要求 Python 對像是一個 :class:`bytes` "
"物件，而不嘗試任何轉換。如果對像不是位元組物件，則引發 :exc:`TypeError`。 C "
"變數也可以聲明為 :c:expr:`PyObject*`。"

#: ../../c-api/arg.rst:153
msgid "``Y`` (:class:`bytearray`) [PyByteArrayObject \\*]"
msgstr "``Y`` (:class:`bytearray`) [PyByteArrayObject \\*]"

#: ../../c-api/arg.rst:151
#, fuzzy
msgid ""
"Requires that the Python object is a :class:`bytearray` object, without "
"attempting any conversion.  Raises :exc:`TypeError` if the object is not a :"
"class:`bytearray` object. The C variable may also be declared as :c:expr:"
"`PyObject*`."
msgstr ""
"要求 Python 對像是一個 :class:`bytearray` 物件，而不嘗試任何轉換。"
"如果對像不是 :class:`bytearray` 物件，則引發 :exc:`TypeError`。 C "
"變數也可以聲明為 :c:expr:`PyObject*`。"

#: ../../c-api/arg.rst:170
msgid "``u`` (:class:`str`) [const Py_UNICODE \\*]"
msgstr "``u`` (:class:`str`) [const Py_UNICODE \\*]"

#: ../../c-api/arg.rst:156
#, fuzzy
msgid ""
"Convert a Python Unicode object to a C pointer to a NUL-terminated buffer of "
"Unicode characters.  You must pass the address of a :c:type:`Py_UNICODE` "
"pointer variable, which will be filled with the pointer to an existing "
"Unicode buffer.  Please note that the width of a :c:type:`Py_UNICODE` "
"character depends on compilation options (it is either 16 or 32 bits). The "
"Python string must not contain embedded null code points; if it does, a :exc:"
"`ValueError` exception is raised."
msgstr ""
"將 Python Unicode 物件轉換為指向以 NUL 結尾的 Unicode 字元緩衝區的 C 指標。"
"您必須傳遞 :c:type:`Py_UNICODE` 指標變數的地址，該變數將用指向現有 Unicode "
"緩衝區的指標填充。請注意 :c:type:`Py_UNICODE` 字元的寬度取決於編譯選項（它是 "
"16 位或 32 位）。 Python 字串不得包含嵌入的空程式碼點；如果是，則會引發 "
":exc:`ValueError` 例外。"

#: ../../c-api/arg.rst:171 ../../c-api/arg.rst:180 ../../c-api/arg.rst:188
#: ../../c-api/arg.rst:196
#, fuzzy
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_AsWideCharString`."
msgstr ""
"舊式 :c:type:`Py_UNICODE` API 的一部分；請遷移到使用 "
":c:func:`PyUnicode_AsWideCharString`。"

#: ../../c-api/arg.rst:179
msgid "``u#`` (:class:`str`) [const Py_UNICODE \\*, :c:type:`Py_ssize_t`]"
msgstr "``u#`` (:class:`str`) [const Py_UNICODE \\*, :c:type:`Py_ssize_t`]"

#: ../../c-api/arg.rst:173
#, fuzzy
msgid ""
"This variant on ``u`` stores into two C variables, the first one a pointer "
"to a Unicode data buffer, the second one its length.  This variant allows "
"null code points."
msgstr "``u`` 上的這個變體儲存到兩個 C 變數中，第一個是指向 Unicode "
"資料緩衝區的指標，第二個是它的長度。此變體允許空程式碼點。"

#: ../../c-api/arg.rst:187
msgid "``Z`` (:class:`str` or ``None``) [const Py_UNICODE \\*]"
msgstr "``Z`` （:class:`str` 或 ``None``） [const Py_UNICODE \\*]"

#: ../../c-api/arg.rst:182
#, fuzzy
msgid ""
"Like ``u``, but the Python object may also be ``None``, in which case the :c:"
"type:`Py_UNICODE` pointer is set to ``NULL``."
msgstr ""
"與 ``u`` 一樣，但 Python 對像也可能是 "
"``None``，在這種情況下，:c:type:`Py_UNICODE` 指標設定為 ``NULL``。"

#: ../../c-api/arg.rst:195
#, fuzzy
msgid ""
"``Z#`` (:class:`str` or ``None``) [const Py_UNICODE \\*, :c:type:"
"`Py_ssize_t`]"
msgstr ""
"``Z#`` (:class:`str` or ``None``) [const Py_UNICODE \\*, "
":c:type:`Py_ssize_t`]"

#: ../../c-api/arg.rst:190
#, fuzzy
msgid ""
"Like ``u#``, but the Python object may also be ``None``, in which case the :"
"c:type:`Py_UNICODE` pointer is set to ``NULL``."
msgstr ""
"與 ``u#`` 一樣，但 Python 對像也可能是 "
"``None``，在這種情況下，:c:type:`Py_UNICODE` 指標設定為 ``NULL``。"

#: ../../c-api/arg.rst:200
msgid "``U`` (:class:`str`) [PyObject \\*]"
msgstr "``U`` (:class:`str`) [PyObject \\*]"

#: ../../c-api/arg.rst:198
#, fuzzy
msgid ""
"Requires that the Python object is a Unicode object, without attempting any "
"conversion.  Raises :exc:`TypeError` if the object is not a Unicode object.  "
"The C variable may also be declared as :c:expr:`PyObject*`."
msgstr ""
"要求 Python 對像是 Unicode 物件，而不嘗試任何轉換。如果對像不是 Unicode "
"物件，則引發 :exc:`TypeError`。 C 變數也可以聲明為 :c:expr:`PyObject*`。"

#: ../../c-api/arg.rst:206
msgid "``w*`` (read-write :term:`bytes-like object`) [Py_buffer]"
msgstr "``w*`` （可讀寫 :term:`bytes-like object`） [Py_buffer]"

#: ../../c-api/arg.rst:203
#, fuzzy
msgid ""
"This format accepts any object which implements the read-write buffer "
"interface. It fills a :c:type:`Py_buffer` structure provided by the caller. "
"The buffer may contain embedded null bytes. The caller have to call :c:func:"
"`PyBuffer_Release` when it is done with the buffer."
msgstr ""
"此格式接受任何實作讀寫緩衝區介面的物件。它填充呼叫者提供的 "
":c:type:`Py_buffer` 結構。緩衝區可能包含嵌入的空位元組。"
"呼叫者在處理完緩衝區後必須呼叫 PyBuffer_Release。"

#: ../../c-api/arg.rst:223
msgid "``es`` (:class:`str`) [const char \\*encoding, char \\*\\*buffer]"
msgstr "``es`` (:class:`str`) [const char \\*encoding, char \\*\\*buffer]"

#: ../../c-api/arg.rst:209
#, fuzzy
msgid ""
"This variant on ``s`` is used for encoding Unicode into a character buffer. "
"It only works for encoded data without embedded NUL bytes."
msgstr "``s`` 的這個變體用於將 Unicode 編碼到字元緩衝區中。它僅適用於沒有嵌入 NUL "
"位元組的編碼資料。"

#: ../../c-api/arg.rst:212
#, fuzzy
msgid ""
"This format requires two arguments.  The first is only used as input, and "
"must be a :c:expr:`const char*` which points to the name of an encoding as a "
"NUL-terminated string, or ``NULL``, in which case ``'utf-8'`` encoding is "
"used. An exception is raised if the named encoding is not known to Python.  "
"The second argument must be a :c:expr:`char**`; the value of the pointer it "
"references will be set to a buffer with the contents of the argument text. "
"The text will be encoded in the encoding specified by the first argument."
msgstr ""
"此格式需要兩個參數。第一個僅用作輸入，並且必須是 :c:expr:`const char*`，"
"它指向以 NUL 結尾的字串的編碼名稱，或 ``NULL``，在這種情況下為 ``'使用 "
"utf-8'`` 編碼。如果 Python 不知道指定的編碼，則會引發例外。第二個參數必須是 :"
"c:expr:`char**`;它引用的指標的值將被設定為一個緩衝區，其中包含參數文本的內容"
"。文本將以第一個參數指定的編碼進行編碼。"

#: ../../c-api/arg.rst:220
#, fuzzy
msgid ""
":c:func:`PyArg_ParseTuple` will allocate a buffer of the needed size, copy "
"the encoded data into this buffer and adjust *\\*buffer* to reference the "
"newly allocated storage.  The caller is responsible for calling :c:func:"
"`PyMem_Free` to free the allocated buffer after use."
msgstr ""
":c:func:`PyArg_ParseTuple` 將分配所需大小的緩衝區，"
"將編碼資料複製到此緩衝區並調整 *\\*buffer* 以引用新分配的儲存空間。"
"呼叫者負責呼叫 PyMem_Free 在使用後釋放分配的緩衝區。"

#: ../../c-api/arg.rst:228
#, fuzzy
msgid ""
"``et`` (:class:`str`, :class:`bytes` or :class:`bytearray`) [const char "
"\\*encoding, char \\*\\*buffer]"
msgstr ""
"``et`` (:class:`str`, :class:`bytes` or :class:`bytearray`) [const char \\*"
"encoding, char \\*\\*buffer]"

#: ../../c-api/arg.rst:226
#, fuzzy
msgid ""
"Same as ``es`` except that byte string objects are passed through without "
"recoding them.  Instead, the implementation assumes that the byte string "
"object uses the encoding passed in as parameter."
msgstr "與 es 相同，除了位元組字串對像在不重新編碼的情況下被傳遞。相反，實作假定位元"
"組字串物件使用作為參數傳入的編碼。"

#: ../../c-api/arg.rst:259
#, fuzzy
msgid ""
"``es#`` (:class:`str`) [const char \\*encoding, char \\*\\*buffer, :c:type:"
"`Py_ssize_t` \\*buffer_length]"
msgstr ""
"``es#`` (:class:`str`) [const char \\*encoding, char \\*\\*buffer, "
":c:type:`Py_ssize_t` \\*buffer_length]"

#: ../../c-api/arg.rst:231
#, fuzzy
msgid ""
"This variant on ``s#`` is used for encoding Unicode into a character buffer. "
"Unlike the ``es`` format, this variant allows input data which contains NUL "
"characters."
msgstr "``s#`` 上的這個變體用於將 Unicode 編碼到字元緩衝區中。與 ``es`` 格式不同，"
"此變體允許輸入包含 NUL 字元的資料。"

#: ../../c-api/arg.rst:235
#, fuzzy
msgid ""
"It requires three arguments.  The first is only used as input, and must be "
"a :c:expr:`const char*` which points to the name of an encoding as a NUL-"
"terminated string, or ``NULL``, in which case ``'utf-8'`` encoding is used. "
"An exception is raised if the named encoding is not known to Python.  The "
"second argument must be a :c:expr:`char**`; the value of the pointer it "
"references will be set to a buffer with the contents of the argument text. "
"The text will be encoded in the encoding specified by the first argument. "
"The third argument must be a pointer to an integer; the referenced integer "
"will be set to the number of bytes in the output buffer."
msgstr ""
"它需要三個參數。第一個僅用作輸入，並且必須是 :c:expr:`const char*`，它指向以 "
"NUL 結尾的字串的編碼名稱，或 ``NULL``，在這種情況下為 ``'utf-8'`` 編碼。"
"如果 Python 不知道指定的編碼，則會引發例外。第二個參數必須是 :c:expr:`char**`"
";它引用的指標的值將被設定為一個緩衝區，其中包含參數文本的內容。文本將以第一個"
"參數指定的編碼進行編碼。第三個參數必須是一個指向整數的指標；引用的整數將設定"
"為輸出緩衝區中的位元組數。"

#: ../../c-api/arg.rst:245
#, fuzzy
msgid "There are two modes of operation:"
msgstr "有兩種操作模式："

#: ../../c-api/arg.rst:247
#, fuzzy
msgid ""
"If *\\*buffer* points a ``NULL`` pointer, the function will allocate a "
"buffer of the needed size, copy the encoded data into this buffer and set "
"*\\*buffer* to reference the newly allocated storage.  The caller is "
"responsible for calling :c:func:`PyMem_Free` to free the allocated buffer "
"after usage."
msgstr ""
"如果 *\\*buffer* 指向一個 ``NULL`` 指標，該函式將分配一個所需大小的緩衝區，"
"將編碼資料複製到該緩衝區並設定 *\\*buffer* 以引用新分配的儲存空間。"
"呼叫者負責呼叫 PyMem_Free 在使用後釋放分配的緩衝區。"

#: ../../c-api/arg.rst:252
#, fuzzy
msgid ""
"If *\\*buffer* points to a non-``NULL`` pointer (an already allocated "
"buffer), :c:func:`PyArg_ParseTuple` will use this location as the buffer and "
"interpret the initial value of *\\*buffer_length* as the buffer size.  It "
"will then copy the encoded data into the buffer and NUL-terminate it.  If "
"the buffer is not large enough, a :exc:`ValueError` will be set."
msgstr ""
"如果 *\\*buffer* 指向一個非``NULL`` "
"指標（一個已經分配的緩衝區），:c:func:`PyArg_ParseTuple` "
"將使用這個位置作為緩衝區並解釋 *\\*buffer_length* 的初始值作為緩衝區大小。"
"然後它將編碼資料複製到緩衝區中並以 NUL 終止它。如果緩衝區不夠大，將設定 "
":exc:`ValueError`。"

#: ../../c-api/arg.rst:258
#, fuzzy
msgid ""
"In both cases, *\\*buffer_length* is set to the length of the encoded data "
"without the trailing NUL byte."
msgstr "在這兩種情況下，*\\*buffer_length* 都設定為不帶尾隨 NUL "
"位元組的編碼資料的長度。"

#: ../../c-api/arg.rst:264
#, fuzzy
msgid ""
"``et#`` (:class:`str`, :class:`bytes` or :class:`bytearray`) [const char "
"\\*encoding, char \\*\\*buffer, :c:type:`Py_ssize_t` \\*buffer_length]"
msgstr ""
"``et#`` (:class:`str`, :class:`bytes` or :class:`bytearray`) [const char \\*"
"encoding, char \\*\\*buffer, :c:type:`Py_ssize_t` \\*緩衝區長度]"

#: ../../c-api/arg.rst:262
#, fuzzy
msgid ""
"Same as ``es#`` except that byte string objects are passed through without "
"recoding them. Instead, the implementation assumes that the byte string "
"object uses the encoding passed in as parameter."
msgstr "與 ``es#`` 相同，只是位元組字串對像在不重新編碼的情況下通過。相反，實作假定位"
"元組字串物件使用作為參數傳入的編碼。"

#: ../../c-api/arg.rst:267
msgid "Numbers"
msgstr "數字"

#: ../../c-api/arg.rst:271
msgid "``b`` (:class:`int`) [unsigned char]"
msgstr "``b`` (:class:`int`) [unsigned char]"

#: ../../c-api/arg.rst:270
#, fuzzy
msgid ""
"Convert a nonnegative Python integer to an unsigned tiny int, stored in a C :"
"c:expr:`unsigned char`."
msgstr "將非負 Python 整數轉換為無符號微型整數，儲存在 C :c:expr:`unsigned char` 中。"

#: ../../c-api/arg.rst:275 ../../c-api/arg.rst:615
msgid "``B`` (:class:`int`) [unsigned char]"
msgstr "``B`` (:class:`int`) [unsigned char]"

#: ../../c-api/arg.rst:274
#, fuzzy
msgid ""
"Convert a Python integer to a tiny int without overflow checking, stored in "
"a C :c:expr:`unsigned char`."
msgstr "將 Python 整數轉換為小整數而不進行溢出檢查，儲存在 C:c:expr:`unsigned char` "
"中。"

#: ../../c-api/arg.rst:278 ../../c-api/arg.rst:609
msgid "``h`` (:class:`int`) [short int]"
msgstr "``h`` (:class:`int`) [short int]"

#: ../../c-api/arg.rst:278
msgid "Convert a Python integer to a C :c:expr:`short int`."
msgstr "將一個 Python 整數轉換成 C 的 :c:expr:`short int`。"

#: ../../c-api/arg.rst:282 ../../c-api/arg.rst:618
msgid "``H`` (:class:`int`) [unsigned short int]"
msgstr "``H`` (:class:`int`) [unsigned short int]"

#: ../../c-api/arg.rst:281
msgid ""
"Convert a Python integer to a C :c:expr:`unsigned short int`, without "
"overflow checking."
msgstr ""
"將一個 Python 整數轉換成 C 的 :c:expr:`unsigned short int`，轉換過程無溢位檢"
"查。"

#: ../../c-api/arg.rst:285 ../../c-api/arg.rst:603
msgid "``i`` (:class:`int`) [int]"
msgstr "``i`` (:class:`int`) [int]"

#: ../../c-api/arg.rst:285
msgid "Convert a Python integer to a plain C :c:expr:`int`."
msgstr "將一個 Python 整數轉換成 C 的 :c:expr:`int`。"

#: ../../c-api/arg.rst:289 ../../c-api/arg.rst:621
msgid "``I`` (:class:`int`) [unsigned int]"
msgstr "``I`` (:class:`int`) [unsigned int]"

#: ../../c-api/arg.rst:288
msgid ""
"Convert a Python integer to a C :c:expr:`unsigned int`, without overflow "
"checking."
msgstr ""
"將一個 Python 整數轉換成 C 的 :c:expr:`unsigned int`，轉換過程無溢位檢查。"

#: ../../c-api/arg.rst:292 ../../c-api/arg.rst:612
msgid "``l`` (:class:`int`) [long int]"
msgstr "``l`` (:class:`int`) [long int]"

#: ../../c-api/arg.rst:292
msgid "Convert a Python integer to a C :c:expr:`long int`."
msgstr "將一個 Python 整數轉換成 C 的 :c:expr:`long int`。"

#: ../../c-api/arg.rst:296 ../../c-api/arg.rst:624
msgid "``k`` (:class:`int`) [unsigned long]"
msgstr "``k`` (:class:`int`) [unsigned long]"

#: ../../c-api/arg.rst:295
msgid ""
"Convert a Python integer to a C :c:expr:`unsigned long` without overflow "
"checking."
msgstr ""
"將一個 Python 整數轉換成 C 的 :c:expr:`unsigned long`，轉換過程無溢位檢查。"

#: ../../c-api/arg.rst:299 ../../c-api/arg.rst:627
msgid "``L`` (:class:`int`) [long long]"
msgstr "``L`` (:class:`int`) [long long]"

#: ../../c-api/arg.rst:299
msgid "Convert a Python integer to a C :c:expr:`long long`."
msgstr "將一個 Python 整數轉換成 C 的 :c:expr:`long long`。"

#: ../../c-api/arg.rst:303 ../../c-api/arg.rst:630
msgid "``K`` (:class:`int`) [unsigned long long]"
msgstr "``K`` (:class:`int`) [unsigned long long]"

#: ../../c-api/arg.rst:302
msgid ""
"Convert a Python integer to a C :c:expr:`unsigned long long` without "
"overflow checking."
msgstr ""
"將一個 Python 整數轉換成 C 的 :c:expr:`unsigned long long`，轉換過程無溢位檢"
"查。"

#: ../../c-api/arg.rst:306 ../../c-api/arg.rst:633
msgid "``n`` (:class:`int`) [:c:type:`Py_ssize_t`]"
msgstr "``n`` (:class:`int`) [:c:type:`Py_ssize_t`]"

#: ../../c-api/arg.rst:306
msgid "Convert a Python integer to a C :c:type:`Py_ssize_t`."
msgstr "將一個 Python 整數轉換成 C 的 :c:type:`Py_ssize_t`。"

#: ../../c-api/arg.rst:313
msgid "``c`` (:class:`bytes` or :class:`bytearray` of length 1) [char]"
msgstr "``c``\\ （:class:`bytes` 或長度為 1 的 :class:`bytearray`）[char]"

#: ../../c-api/arg.rst:309
#, fuzzy
msgid ""
"Convert a Python byte, represented as a :class:`bytes` or :class:`bytearray` "
"object of length 1, to a C :c:expr:`char`."
msgstr ""
"將表示為長度為 1 的 :class:`bytes` 或 :class:`bytearray` 物件的 Python "
"位元組轉換為 C:c:expr:`char`。"

#: ../../c-api/arg.rst:312
msgid "Allow :class:`bytearray` objects."
msgstr "允許 :class:`bytearray` 物件。"

#: ../../c-api/arg.rst:317 ../../c-api/arg.rst:641
msgid "``C`` (:class:`str` of length 1) [int]"
msgstr "``C``\\ （長度為 1 的 :class:`str`）[int]"

#: ../../c-api/arg.rst:316
#, fuzzy
msgid ""
"Convert a Python character, represented as a :class:`str` object of length "
"1, to a C :c:expr:`int`."
msgstr "將表示為長度為 1 的 :class:`str` 物件的 Python 字元轉換為 C:c:expr:`int`。"

#: ../../c-api/arg.rst:320 ../../c-api/arg.rst:647
msgid "``f`` (:class:`float`) [float]"
msgstr "``f`` (:class:`float`) [float]"

#: ../../c-api/arg.rst:320
msgid "Convert a Python floating point number to a C :c:expr:`float`."
msgstr "將一個 Python 浮點數轉換成 C 的 :c:expr:`float`。"

#: ../../c-api/arg.rst:323 ../../c-api/arg.rst:644
msgid "``d`` (:class:`float`) [double]"
msgstr "``d`` (:class:`float`) [double]"

#: ../../c-api/arg.rst:323
msgid "Convert a Python floating point number to a C :c:expr:`double`."
msgstr "將一個 Python 浮點數轉換成 C 的 :c:expr:`double`。"

#: ../../c-api/arg.rst:326
msgid "``D`` (:class:`complex`) [Py_complex]"
msgstr "``D`` (:class:`complex`) [Py_complex]"

#: ../../c-api/arg.rst:326
msgid "Convert a Python complex number to a C :c:type:`Py_complex` structure."
msgstr "將一個 Python 複數轉換成 C 的 :c:type:`Py_complex` 結構。"

#: ../../c-api/arg.rst:329
msgid "Other objects"
msgstr "其他物件"

#: ../../c-api/arg.rst:334 ../../c-api/arg.rst:658
msgid "``O`` (object) [PyObject \\*]"
msgstr "``O``\\ （物件）[PyObject \\*]"

#: ../../c-api/arg.rst:332
#, fuzzy
msgid ""
"Store a Python object (without any conversion) in a C object pointer.  The C "
"program thus receives the actual object that was passed.  The object's "
"reference count is not increased.  The pointer stored is not ``NULL``."
msgstr ""
"在 C 物件指標中儲存一個 Python 物件（沒有任何轉換）。 C "
"程式因此接收傳遞的實際物件。物件的引用計數沒有增加。儲存的指標不是 ``NULL`` 。"

#: ../../c-api/arg.rst:341
msgid "``O!`` (object) [*typeobject*, PyObject \\*]"
msgstr "``O!``\\ （物件）[*typeobject*, PyObject \\*]"

#: ../../c-api/arg.rst:337
#, fuzzy
msgid ""
"Store a Python object in a C object pointer.  This is similar to ``O``, but "
"takes two C arguments: the first is the address of a Python type object, the "
"second is the address of the C variable (of type :c:expr:`PyObject*`) into "
"which the object pointer is stored.  If the Python object does not have the "
"required type, :exc:`TypeError` is raised."
msgstr ""
"將 Python 物件儲存在 C 物件指標中。這類似於 ``O``，但有兩個 C 參數：第一個是 "
"Python 型別物件的地址，第二個是 C "
"變數（型別：:c:expr:`PyObject*`）的地址其中儲存了物件指標。如果 Python "
"對像沒有所需的型別，則會引發 :exc:`TypeError`。"

#: ../../c-api/arg.rst:366 ../../c-api/arg.rst:672
msgid "``O&`` (object) [*converter*, *anything*]"
msgstr "``O&``\\ （物件）[*converter*, *anything*]"

#: ../../c-api/arg.rst:346
#, fuzzy
msgid ""
"Convert a Python object to a C variable through a *converter* function.  "
"This takes two arguments: the first is a function, the second is the address "
"of a C variable (of arbitrary type), converted to :c:expr:`void *`.  The "
"*converter* function in turn is called as follows::"
msgstr ""
"通過 *converter* 函式將 Python 物件轉換為 C "
"變數。這有兩個參數：第一個是函式，第二個是 C 變數（任意型別）的地址，轉換為 "
":c:expr:`void *`。 *converter* 函式依次呼叫如下："

#: ../../c-api/arg.rst:353
#, fuzzy
msgid ""
"where *object* is the Python object to be converted and *address* is the :c:"
"expr:`void*` argument that was passed to the ``PyArg_Parse*`` function. The "
"returned *status* should be ``1`` for a successful conversion and ``0`` if "
"the conversion has failed.  When the conversion fails, the *converter* "
"function should raise an exception and leave the content of *address* "
"unmodified."
msgstr ""
"其中 *object* 是要轉換的 Python 物件，*address* 是傳遞給 ``PyArg_Parse*`` "
"函式的 :c:expr:`void*` 參數。回傳的 *status* "
"應為 ``1``表示成功轉換， ``0``表示轉換失敗。當轉換失敗時，*converter* "
"函式應該拋出例外並保持 *address* 的內容不變。"

#: ../../c-api/arg.rst:359
#, fuzzy
msgid ""
"If the *converter* returns ``Py_CLEANUP_SUPPORTED``, it may get called a "
"second time if the argument parsing eventually fails, giving the converter a "
"chance to release any memory that it had already allocated. In this second "
"call, the *object* parameter will be ``NULL``; *address* will have the same "
"value as in the original call."
msgstr ""
"如果 *converter* 回傳``Py_CLEANUP_SUPPORTED``，如果引數剖析最終失敗，它可能會"
"被第二次呼叫，讓轉換器有機會釋放它已經分配的任何記憶體。在第二次呼叫中，*obje"
"ct* 參數將為 ``NULL`` ； *address* 將具有與原始呼叫中相同的值。"

#: ../../c-api/arg.rst:365
msgid "``Py_CLEANUP_SUPPORTED`` was added."
msgstr "加入 ``Py_CLEANUP_SUPPORTED``。"

#: ../../c-api/arg.rst:375
msgid "``p`` (:class:`bool`) [int]"
msgstr "``p`` (:class:`bool`) [int]"

#: ../../c-api/arg.rst:369
#, fuzzy
msgid ""
"Tests the value passed in for truth (a boolean **p**\\ redicate) and "
"converts the result to its equivalent C true/false integer value. Sets the "
"int to ``1`` if the expression was true and ``0`` if it was false. This "
"accepts any valid Python value.  See :ref:`truth` for more information about "
"how Python tests values for truth."
msgstr ""
"測試傳入的值是否為真（一個布爾值 **p**\\ 指示）並將結果轉換為其等效的 C true/"
"false 整數值。如果表達式為真，則將 int "
"設定為 ``1``，如果表達式為假，則將其設定為 ``0``。這接受任何有效的 Python 值。有關 "
"Python 如何測試值的真實性的更多資訊，請參閱 :ref:`truth`。"

#: ../../c-api/arg.rst:380 ../../c-api/arg.rst:675
msgid "``(items)`` (:class:`tuple`) [*matching-items*]"
msgstr "``(items)`` (:class:`tuple`) [*matching-items*]"

#: ../../c-api/arg.rst:378
#, fuzzy
msgid ""
"The object must be a Python sequence whose length is the number of format "
"units in *items*.  The C arguments must correspond to the individual format "
"units in *items*.  Format units for sequences may be nested."
msgstr ""
"該物件必須是一個 Python 序列，其長度是 *items* 中格式單元的數量。 C "
"參數必須對應於 *items* 中的各個格式單元。序列的格式單元可以嵌套。"

#: ../../c-api/arg.rst:382
#, fuzzy
msgid ""
"It is possible to pass \"long\" integers (integers whose value exceeds the "
"platform's :const:`LONG_MAX`) however no proper range checking is done --- "
"the most significant bits are silently truncated when the receiving field is "
"too small to receive the value (actually, the semantics are inherited from "
"downcasts in C --- your mileage may vary)."
msgstr ""
"可以傳遞「長」整數（值超過平台 :const:`LONG_MAX` 的整數）但是沒有進行適當的範圍"
"檢查——當接收欄位太小而無法接收時，最高有效位會被靜默截斷值（實際上，語義是從 "
"C 中的向下轉換繼承的——你的里程可能會有所不同）。"

#: ../../c-api/arg.rst:388
#, fuzzy
msgid ""
"A few other characters have a meaning in a format string.  These may not "
"occur inside nested parentheses.  They are:"
msgstr "一些其他字元在格式字串中具有含義。這些可能不會出現在嵌套的括號內。他們是："

#: ../../c-api/arg.rst:396
msgid "``|``"
msgstr "``|``"

#: ../../c-api/arg.rst:392
#, fuzzy
msgid ""
"Indicates that the remaining arguments in the Python argument list are "
"optional. The C variables corresponding to optional arguments should be "
"initialized to their default value --- when an optional argument is not "
"specified, :c:func:`PyArg_ParseTuple` does not touch the contents of the "
"corresponding C variable(s)."
msgstr ""
"指示 Python 參數列表中的其餘參數是可選的。與可選參數對應的 C "
"變數應初始化為它們的預設值---當未指定可選參數時，:c:func:`PyArg_ParseTuple` "
"不會觸及相應 C 變數的內容。"

#: ../../c-api/arg.rst:405
msgid "``$``"
msgstr "``$``"

#: ../../c-api/arg.rst:399
#, fuzzy
msgid ""
":c:func:`PyArg_ParseTupleAndKeywords` only: Indicates that the remaining "
"arguments in the Python argument list are keyword-only.  Currently, all "
"keyword-only arguments must also be optional arguments, so ``|`` must always "
"be specified before ``$`` in the format string."
msgstr ""
":c:func:`PyArg_ParseTupleAndKeywords` only：表示 Python 參數列表中的其餘參數"
"僅是關鍵字。目前，所有僅限關鍵字的參數也必須是可選參數，因此必須始終在格式字"
"串中的 ``$``之前指定 ``|``。"

#: ../../c-api/arg.rst:410
msgid "``:``"
msgstr "``:``"

#: ../../c-api/arg.rst:408
#, fuzzy
msgid ""
"The list of format units ends here; the string after the colon is used as "
"the function name in error messages (the \"associated value\" of the "
"exception that :c:func:`PyArg_ParseTuple` raises)."
msgstr "格式單元列表到此結束；冒號後的字串用作錯誤消息中的函式名稱（:c:func:`PyArg_Pa"
"rseTuple` 引發的例外的“關聯值”）。"

#: ../../c-api/arg.rst:415
msgid "``;``"
msgstr "``;``"

#: ../../c-api/arg.rst:413
#, fuzzy
msgid ""
"The list of format units ends here; the string after the semicolon is used "
"as the error message *instead* of the default error message.  ``:`` and ``;"
"`` mutually exclude each other."
msgstr "格式單元列表到此結束；分號後的字串用作錯誤消息*而不是*預設錯誤消息。 ``:`` "
"和 ``;`` 相互排斥。"

#: ../../c-api/arg.rst:417
#, fuzzy
msgid ""
"Note that any Python object references which are provided to the caller are "
"*borrowed* references; do not decrement their reference count!"
msgstr "請注意，提供給呼叫者的任何 Python 物件引用都是 *借用* "
"引用；不要減少它們的引用計數！"

#: ../../c-api/arg.rst:420
#, fuzzy
msgid ""
"Additional arguments passed to these functions must be addresses of "
"variables whose type is determined by the format string; these are used to "
"store values from the input tuple.  There are a few cases, as described in "
"the list of format units above, where these parameters are used as input "
"values; they should match what is specified for the corresponding format "
"unit in that case."
msgstr ""
"傳遞給這些函式的附加參數必須是變數的地址，其型別由格式字串確定；這些用於儲存"
"輸入元組的值。如上面的格式單元列表中所述，在某些情況下，這些參數用作輸入值；"
"在這種情況下，它們應該匹配為相應格式單元指定的內容。"

#: ../../c-api/arg.rst:426
#, fuzzy
msgid ""
"For the conversion to succeed, the *arg* object must match the format and "
"the format must be exhausted.  On success, the ``PyArg_Parse*`` functions "
"return true, otherwise they return false and raise an appropriate exception. "
"When the ``PyArg_Parse*`` functions fail due to conversion failure in one of "
"the format units, the variables at the addresses corresponding to that and "
"the following format units are left untouched."
msgstr ""
"要使轉換成功，*arg* "
"物件必須與格式匹配並且格式必須用盡。成功時，``PyArg_Parse*`` 函式回傳 true，"
"否則回傳 false 並引發適當的例外。當 ``PyArg_Parse*`` 函式由於格式單元之一的轉"
"換失敗而失敗時，對應於該格式單元和後續格式單元的地址處的變數保持不變。"

#: ../../c-api/arg.rst:435
msgid "API Functions"
msgstr "API 函式"

#: ../../c-api/arg.rst:439
#, fuzzy
msgid ""
"Parse the parameters of a function that takes only positional parameters "
"into local variables.  Returns true on success; on failure, it returns false "
"and raises the appropriate exception."
msgstr "將只接受位置參數的函式的參數剖析為局部變數。成功回傳真；失敗時，它回傳 false "
"並引發適當的例外。"

#: ../../c-api/arg.rst:446
#, fuzzy
msgid ""
"Identical to :c:func:`PyArg_ParseTuple`, except that it accepts a va_list "
"rather than a variable number of arguments."
msgstr "與 :c:func:`PyArg_ParseTuple` 相同，除了它接受 va_list 而不是可變數量的參數。"

#: ../../c-api/arg.rst:452
#, fuzzy
msgid ""
"Parse the parameters of a function that takes both positional and keyword "
"parameters into local variables.  The *keywords* argument is a ``NULL``-"
"terminated array of keyword parameter names.  Empty names denote :ref:"
"`positional-only parameters <positional-only_parameter>`. Returns true on "
"success; on failure, it returns false and raises the appropriate exception."
msgstr ""
"剖析將位置參數和關鍵字參數都帶入局部變數的函式的參數。 *keywords* "
"參數是一個以 ``NULL`` 結尾的關鍵字參數名稱數組。空名稱表示 :ref:`positional-only "
"parameters <positional-only_parameter>`。成功回傳真；失敗時，它回傳 false "
"並引發適當的例外。"

#: ../../c-api/arg.rst:459
#, fuzzy
msgid ""
"Added support for :ref:`positional-only parameters <positional-"
"only_parameter>`."
msgstr "新增了對 :ref:`positional-only parameters <positional-only_parameter>` "
"的支援。"

#: ../../c-api/arg.rst:466
#, fuzzy
msgid ""
"Identical to :c:func:`PyArg_ParseTupleAndKeywords`, except that it accepts a "
"va_list rather than a variable number of arguments."
msgstr "與 :c:func:`PyArg_ParseTupleAndKeywords` 相同，除了它接受 va_list "
"而不是可變數量的參數。"

#: ../../c-api/arg.rst:472
#, fuzzy
msgid ""
"Ensure that the keys in the keywords argument dictionary are strings.  This "
"is only needed if :c:func:`PyArg_ParseTupleAndKeywords` is not used, since "
"the latter already does this check."
msgstr "確保關鍵字參數字典中的鍵是字串。僅當未使用 PyArg_ParseTupleAndKeywords "
"時才需要，因為後者已經進行了此檢查。"

#: ../../c-api/arg.rst:482
#, fuzzy
msgid ""
"Function used to deconstruct the argument lists of \"old-style\" functions "
"--- these are functions which use the :const:`METH_OLDARGS` parameter "
"parsing method, which has been removed in Python 3.  This is not recommended "
"for use in parameter parsing in new code, and most code in the standard "
"interpreter has been modified to no longer use this for that purpose.  It "
"does remain a convenient way to decompose other tuples, however, and may "
"continue to be used for that purpose."
msgstr ""
"用於解構“舊式”函式參數列表的函式——這些是使用 :const:`METH_OLDARGS` "
"參數剖析方法的函式，該方法已在 Python 3 中刪除。不建議將其用於參數剖析在新程"
"式碼中，標準直譯器中的大多數程式碼已被修改為不再將其用於該目的。然而，它仍然"
"是分解其他元組的一種便捷方式，並且可能會繼續用於該目的。"

#: ../../c-api/arg.rst:493
#, fuzzy
msgid ""
"A simpler form of parameter retrieval which does not use a format string to "
"specify the types of the arguments.  Functions which use this method to "
"retrieve their parameters should be declared as :const:`METH_VARARGS` in "
"function or method tables.  The tuple containing the actual parameters "
"should be passed as *args*; it must actually be a tuple.  The length of the "
"tuple must be at least *min* and no more than *max*; *min* and *max* may be "
"equal.  Additional arguments must be passed to the function, each of which "
"should be a pointer to a :c:expr:`PyObject*` variable; these will be filled "
"in with the values from *args*; they will contain :term:`borrowed references "
"<borrowed reference>`. The variables which correspond to optional parameters "
"not given by *args* will not be filled in; these should be initialized by "
"the caller. This function returns true on success and false if *args* is not "
"a tuple or contains the wrong number of elements; an exception will be set "
"if there was a failure."
msgstr ""
"一種更簡單的參數檢索形式，它不使用格式字串來指定參數的型別。使用此方法檢索其"
"參數的函式應在函式或方法表中聲明為 :const:`METH_VARARGS`。"
"包含實際參數的元組應作為 *args* 傳遞；它實際上必須是一個元組。"
"元組的長度必須至少為 *min* 且不超過 *max*； *min* 和 *max* "
"可以相等。額外的參數必須傳遞給函式，每個參數都應該是一個指向 PyObject* "
"變數的指標；這些將用 *args* 中的值填充；它們將包含 :term:`借用的引用 "
"<borrowed reference>`。 *args* "
"未給出的可選參數對應的變數將不會被填充；這些應該由呼叫者初始化。如果 *args* "
"不是元組或包含錯誤數量的元素，則此函式在成功時回傳 true 和 "
"false；如果失敗，將設定例外。"

#: ../../c-api/arg.rst:508
#, fuzzy
msgid ""
"This is an example of the use of this function, taken from the sources for "
"the :mod:`_weakref` helper module for weak references::"
msgstr "這是使用此函式的示例，取自 :mod:`_weakref` 弱引用輔助模組的源程式碼："

#: ../../c-api/arg.rst:524
#, fuzzy
msgid ""
"The call to :c:func:`PyArg_UnpackTuple` in this example is entirely "
"equivalent to this call to :c:func:`PyArg_ParseTuple`::"
msgstr "此示例中對 PyArg_UnpackTuple 的呼叫完全等同於對 PyArg_ParseTuple:: 的呼叫："

#: ../../c-api/arg.rst:532
#, fuzzy
msgid "Building values"
msgstr "建立價值觀"

#: ../../c-api/arg.rst:536
#, fuzzy
msgid ""
"Create a new value based on a format string similar to those accepted by the "
"``PyArg_Parse*`` family of functions and a sequence of values.  Returns the "
"value or ``NULL`` in the case of an error; an exception will be raised if "
"``NULL`` is returned."
msgstr ""
"基於類似於“PyArg_Parse*”系列函式和一系列值所接受的格式字串建立一個新值。在錯"
"誤的情況下回傳值或 ``NULL`` ；如果回傳 ``NULL`` ，則會引發例外。"

#: ../../c-api/arg.rst:541
#, fuzzy
msgid ""
":c:func:`Py_BuildValue` does not always build a tuple.  It builds a tuple "
"only if its format string contains two or more format units.  If the format "
"string is empty, it returns ``None``; if it contains exactly one format "
"unit, it returns whatever object is described by that format unit.  To force "
"it to return a tuple of size 0 or one, parenthesize the format string."
msgstr ""
":c:func:`Py_BuildValue` 並不總是構建一個元組。只有當它的格式字串包含兩個或更"
"多格式單元時，它才會構建一個元組。如果格式字串為空，則回傳  ``None``；如果它只包含"
"一個格式單元，則回傳該格式單元描述的任何物件。要強制它回傳大小為 0 或 1 "
"的元組，請將格式字串括起來。"

#: ../../c-api/arg.rst:547
#, fuzzy
msgid ""
"When memory buffers are passed as parameters to supply data to build "
"objects, as for the ``s`` and ``s#`` formats, the required data is copied.  "
"Buffers provided by the caller are never referenced by the objects created "
"by :c:func:`Py_BuildValue`.  In other words, if your code invokes :c:func:"
"`malloc` and passes the allocated memory to :c:func:`Py_BuildValue`, your "
"code is responsible for calling :c:func:`free` for that memory once :c:func:"
"`Py_BuildValue` returns."
msgstr ""
"當記憶體緩衝區作為參數傳遞以提供構建物件的資料時，對於 ``s`` 和 ``s#`` "
"格式，將復制所需的資料。呼叫者提供的緩衝區永遠不會被 :c:func:`Py_BuildValue` "
"建立的物件引用。換句話說，如果您的程式碼呼叫:c:func:`malloc` 並將分配的記憶體"
"傳遞給:c:func:`Py_BuildValue`，您的程式碼負責為該記憶體呼叫一次:c:func:`free` "
":c:func:`Py_BuildValue` 回傳。"

#: ../../c-api/arg.rst:555
#, fuzzy
msgid ""
"In the following description, the quoted form is the format unit; the entry "
"in (round) parentheses is the Python object type that the format unit will "
"return; and the entry in [square] brackets is the type of the C value(s) to "
"be passed."
msgstr ""
"在下面的描述中，引用的形式是格式單元； （圓）括號中的條目是格式單元將回傳的 "
"Python 對像型別； [square] 括號中的條目是要傳遞的 C 值的型別。"

#: ../../c-api/arg.rst:559
#, fuzzy
msgid ""
"The characters space, tab, colon and comma are ignored in format strings "
"(but not within format units such as ``s#``).  This can be used to make long "
"format strings a tad more readable."
msgstr "字元空格、製表符、冒號和逗號在格式字串中被忽略（但不在諸如 ``s#`` "
"之類的格式單元中）。這可用於使長格式字串更具可讀性。"

#: ../../c-api/arg.rst:565
msgid "``s`` (:class:`str` or ``None``) [const char \\*]"
msgstr "``s``\\ （:class:`str` 或 ``None``）[const char \\*]"

#: ../../c-api/arg.rst:564
#, fuzzy
msgid ""
"Convert a null-terminated C string to a Python :class:`str` object using "
"``'utf-8'`` encoding. If the C string pointer is ``NULL``, ``None`` is used."
msgstr ""
"使用 ``'utf-8'`` 編碼將以 null 結尾的 C 字串轉換為 Python :class:`str` 物件。"
"如果 C 字串指標為 ``NULL`` ，則使用 ``None``。"

#: ../../c-api/arg.rst:570
msgid ""
"``s#`` (:class:`str` or ``None``) [const char \\*, :c:type:`Py_ssize_t`]"
msgstr ""
"``s#``\\ （:class:`str` 或 ``None``）[const char \\*, :c:type:`Py_ssize_t`]"

#: ../../c-api/arg.rst:568
#, fuzzy
msgid ""
"Convert a C string and its length to a Python :class:`str` object using "
"``'utf-8'`` encoding. If the C string pointer is ``NULL``, the length is "
"ignored and ``None`` is returned."
msgstr ""
"使用 ``'utf-8'`` 編碼將 C 字串及其長度轉換為 Python :class:`str` 物件。如果 "
"C 字串指標為 ``NULL`` ，則忽略長度並回傳 ``None``。"

#: ../../c-api/arg.rst:574
msgid "``y`` (:class:`bytes`) [const char \\*]"
msgstr "``y`` (:class:`bytes`) [const char \\*]"

#: ../../c-api/arg.rst:573
#, fuzzy
msgid ""
"This converts a C string to a Python :class:`bytes` object.  If the C string "
"pointer is ``NULL``, ``None`` is returned."
msgstr "這會將 C 字串轉換為 Python :class:`bytes` 物件。如果 C "
"字串指標為 ``NULL`` ，則回傳 ``None``。"

#: ../../c-api/arg.rst:578
msgid "``y#`` (:class:`bytes`) [const char \\*, :c:type:`Py_ssize_t`]"
msgstr "``y#`` (:class:`bytes`) [const char \\*, :c:type:`Py_ssize_t`]"

#: ../../c-api/arg.rst:577
#, fuzzy
msgid ""
"This converts a C string and its lengths to a Python object.  If the C "
"string pointer is ``NULL``, ``None`` is returned."
msgstr "這會將 C 字串及其長度轉換為 Python 物件。如果 C "
"字串指標為 ``NULL`` ，則回傳 ``None``。"

#: ../../c-api/arg.rst:581 ../../c-api/arg.rst:597
msgid "Same as ``s``."
msgstr "和 ``s`` 相同。"

#: ../../c-api/arg.rst:584
msgid ""
"``z#`` (:class:`str` or ``None``) [const char \\*, :c:type:`Py_ssize_t`]"
msgstr ""
"``z#``\\ （:class:`str` 或 ``None``）[const char \\*, :c:type:`Py_ssize_t`]"

#: ../../c-api/arg.rst:584 ../../c-api/arg.rst:600
msgid "Same as ``s#``."
msgstr "和 ``s#`` 相同。"

#: ../../c-api/arg.rst:589
msgid "``u`` (:class:`str`) [const wchar_t \\*]"
msgstr "``u`` (:class:`str`) [const wchar_t \\*]"

#: ../../c-api/arg.rst:587
#, fuzzy
msgid ""
"Convert a null-terminated :c:expr:`wchar_t` buffer of Unicode (UTF-16 or "
"UCS-4) data to a Python Unicode object.  If the Unicode buffer pointer is "
"``NULL``, ``None`` is returned."
msgstr ""
"將 Unicode（UTF-16 或 UCS-4）資料的空終止 :c:expr:`wchar_t` 緩衝區轉換為 "
"Python Unicode 物件。如果 Unicode 緩衝區指標為 ``NULL`` ，則回傳 ``None``。"

#: ../../c-api/arg.rst:594
msgid "``u#`` (:class:`str`) [const wchar_t \\*, :c:type:`Py_ssize_t`]"
msgstr "``u#`` (:class:`str`) [const wchar_t \\*, :c:type:`Py_ssize_t`]"

#: ../../c-api/arg.rst:592
#, fuzzy
msgid ""
"Convert a Unicode (UTF-16 or UCS-4) data buffer and its length to a Python "
"Unicode object.   If the Unicode buffer pointer is ``NULL``, the length is "
"ignored and ``None`` is returned."
msgstr ""
"將 Unicode（UTF-16 或 UCS-4）資料緩衝區及其長度轉換為 Python Unicode 物件。"
"如果 Unicode 緩衝區指標為 ``NULL`` ，則忽略長度並回傳 ``None``。"

#: ../../c-api/arg.rst:597
msgid "``U`` (:class:`str` or ``None``) [const char \\*]"
msgstr "``U``\\ （:class:`str` 或 ``None``）[const char \\*]"

#: ../../c-api/arg.rst:600
msgid ""
"``U#`` (:class:`str` or ``None``) [const char \\*, :c:type:`Py_ssize_t`]"
msgstr ""
"``U#``\\ （:class:`str` 或 ``None``）[const char \\*, :c:type:`Py_ssize_t`]"

#: ../../c-api/arg.rst:603
msgid "Convert a plain C :c:expr:`int` to a Python integer object."
msgstr "將一個 C 的 :c:expr:`int` 轉換成 Python 整數物件。"

#: ../../c-api/arg.rst:606
msgid "``b`` (:class:`int`) [char]"
msgstr "``b`` (:class:`int`) [char]"

#: ../../c-api/arg.rst:606
msgid "Convert a plain C :c:expr:`char` to a Python integer object."
msgstr "將一個 C 的 :c:expr:`char` 轉換成 Python 整數物件。"

#: ../../c-api/arg.rst:609
msgid "Convert a plain C :c:expr:`short int` to a Python integer object."
msgstr "將一個 C 的 :c:expr:`short int` 轉換成 Python 整數物件。"

#: ../../c-api/arg.rst:612
msgid "Convert a C :c:expr:`long int` to a Python integer object."
msgstr "將一個 C 的 :c:expr:`long int` 轉換成 Python 整數物件。"

#: ../../c-api/arg.rst:615
msgid "Convert a C :c:expr:`unsigned char` to a Python integer object."
msgstr "將一個 C 的 :c:expr:`unsigned char` 轉換成 Python 整數物件。"

#: ../../c-api/arg.rst:618
msgid "Convert a C :c:expr:`unsigned short int` to a Python integer object."
msgstr "將一個 C 的 :c:expr:`unsigned short int` 轉換成 Python 整數物件。"

#: ../../c-api/arg.rst:621
msgid "Convert a C :c:expr:`unsigned int` to a Python integer object."
msgstr "將一個 C 的 :c:expr:`unsigned int` 轉換成 Python 整數物件。"

#: ../../c-api/arg.rst:624
msgid "Convert a C :c:expr:`unsigned long` to a Python integer object."
msgstr "將一個 C 的 :c:expr:`unsigned long` 轉換成 Python 整數物件。"

#: ../../c-api/arg.rst:627
msgid "Convert a C :c:expr:`long long` to a Python integer object."
msgstr "將一個 C 的 :c:expr:`long long` 轉換成 Python 整數物件。"

#: ../../c-api/arg.rst:630
msgid "Convert a C :c:expr:`unsigned long long` to a Python integer object."
msgstr "將一個 C 的 :c:expr:`unsigned long long` 轉換成 Python 整數物件。"

#: ../../c-api/arg.rst:633
msgid "Convert a C :c:type:`Py_ssize_t` to a Python integer."
msgstr "將一個 C 的 :c:type:`Py_ssize_t` 轉換成 Python 整數。"

#: ../../c-api/arg.rst:637
msgid "``c`` (:class:`bytes` of length 1) [char]"
msgstr "``c``\\ （長度為 1 的 :class:`bytes`）[char]"

#: ../../c-api/arg.rst:636
msgid ""
"Convert a C :c:expr:`int` representing a byte to a Python :class:`bytes` "
"object of length 1."
msgstr ""
"將一個 C 中代表一個位元組的 :c:expr:`int` 轉換成 Python 中長度為一的 :class:"
"`bytes`。"

#: ../../c-api/arg.rst:640
msgid ""
"Convert a C :c:expr:`int` representing a character to Python :class:`str` "
"object of length 1."
msgstr ""
"將一個 C 中代表一個字元的 :c:expr:`int` 轉換成 Python 中長度為一的 :class:"
"`str`。"

#: ../../c-api/arg.rst:644
msgid "Convert a C :c:expr:`double` to a Python floating point number."
msgstr "將一個 C 的 :c:expr:`double` 轉換成 Python 浮點數。"

#: ../../c-api/arg.rst:647
msgid "Convert a C :c:expr:`float` to a Python floating point number."
msgstr "將一個 C 的 :c:expr:`float` 轉換成 Python 浮點數。"

#: ../../c-api/arg.rst:650
msgid "``D`` (:class:`complex`) [Py_complex \\*]"
msgstr "``D`` (:class:`complex`) [Py_complex \\*]"

#: ../../c-api/arg.rst:650
msgid "Convert a C :c:type:`Py_complex` structure to a Python complex number."
msgstr "將一個 C 的 :c:type:`Py_complex` 結構轉換成 Python 複數。"

#: ../../c-api/arg.rst:653
#, fuzzy
msgid ""
"Pass a Python object untouched (except for its reference count, which is "
"incremented by one).  If the object passed in is a ``NULL`` pointer, it is "
"assumed that this was caused because the call producing the argument found "
"an error and set an exception. Therefore, :c:func:`Py_BuildValue` will "
"return ``NULL`` but won't raise an exception.  If no exception has been "
"raised yet, :exc:`SystemError` is set."
msgstr ""
"傳遞一個不變的 Python 物件（除了它的引用計數，它增加了 1）。如果傳入的對像是"
"一個 ``NULL`` 指標，則假定這是因為產生參數的呼叫發現錯誤並設定了例外。因此，:c:fu"
"nc:`Py_BuildValue` 將回傳 ``NULL`` 但不會引發例外。如果尚未引發例外，"
"則會設定 :exc:`SystemError`。"

#: ../../c-api/arg.rst:661
msgid "``S`` (object) [PyObject \\*]"
msgstr "``S``\\ （物件）[PyObject \\*]"

#: ../../c-api/arg.rst:661
msgid "Same as ``O``."
msgstr "和 ``O`` 相同。"

#: ../../c-api/arg.rst:666
msgid "``N`` (object) [PyObject \\*]"
msgstr "``N``\\ （物件）[PyObject \\*]"

#: ../../c-api/arg.rst:664
#, fuzzy
msgid ""
"Same as ``O``, except it doesn't increment the reference count on the "
"object. Useful when the object is created by a call to an object constructor "
"in the argument list."
msgstr "與 ``O`` 相同，只是它不增加物件的引用計數。當通過呼叫參數列表中的物件構造函式"
"建立物件時很有用。"

#: ../../c-api/arg.rst:669
#, fuzzy
msgid ""
"Convert *anything* to a Python object through a *converter* function.  The "
"function is called with *anything* (which should be compatible with :c:expr:"
"`void*`) as its argument and should return a \"new\" Python object, or "
"``NULL`` if an error occurred."
msgstr ""
"通過 *converter* 函式將 *anything* 轉換為 Python 物件。該函式以 *anything*（"
"應與 :c:expr:`void*` 相容）作為參數呼叫，並應回傳「新」Python 物件，"
"如果發生錯誤則回傳 ``NULL``。"

#: ../../c-api/arg.rst:675
#, fuzzy
msgid ""
"Convert a sequence of C values to a Python tuple with the same number of "
"items."
msgstr "將一系列 C 值轉換為具有相同項數的 Python 元組。"

#: ../../c-api/arg.rst:678
msgid "``[items]`` (:class:`list`) [*matching-items*]"
msgstr "``[items]`` (:class:`list`) [*matching-items*]"

#: ../../c-api/arg.rst:678
#, fuzzy
msgid ""
"Convert a sequence of C values to a Python list with the same number of "
"items."
msgstr "將一系列 C 值轉換為具有相同項目數的 Python 列表。"

#: ../../c-api/arg.rst:683
msgid "``{items}`` (:class:`dict`) [*matching-items*]"
msgstr "``{items}`` (:class:`dict`) [*matching-items*]"

#: ../../c-api/arg.rst:681
#, fuzzy
msgid ""
"Convert a sequence of C values to a Python dictionary.  Each pair of "
"consecutive C values adds one item to the dictionary, serving as key and "
"value, respectively."
msgstr "將一系列 C 值轉換為 Python 字典。每對連續的 C "
"值向字典中新增一個項目，分別作為鍵和值。"

#: ../../c-api/arg.rst:685
#, fuzzy
msgid ""
"If there is an error in the format string, the :exc:`SystemError` exception "
"is set and ``NULL`` returned."
msgstr "如果格式字串中存在錯誤，則會設定 :exc:`SystemError` 例外並回傳 ``NULL``。"

#: ../../c-api/arg.rst:690
#, fuzzy
msgid ""
"Identical to :c:func:`Py_BuildValue`, except that it accepts a va_list "
"rather than a variable number of arguments."
msgstr "與 :c:func:`Py_BuildValue` 相同，除了它接受 va_list 而不是可變數量的參數。"
