# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-19 00:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.2.2\n"

#: ../../c-api/init_config.rst:7
msgid "Python Initialization Configuration"
msgstr "Python 初始化配置"

#: ../../c-api/init_config.rst:11
#, fuzzy
msgid ""
"Python can be initialized with :c:func:`Py_InitializeFromConfig` and the :c:"
"type:`PyConfig` structure. It can be preinitialized with :c:func:"
"`Py_PreInitialize` and the :c:type:`PyPreConfig` structure."
msgstr ""
"Python 可以用:c:func:`Py_InitializeFromConfig` 和:c:type:`PyConfig` 結構初始"
"化。它可以使用 :c:func:`Py_PreInitialize` 和 :c:type:`PyPreConfig` 結構進行預"
"初始化。"

#: ../../c-api/init_config.rst:15
#, fuzzy
msgid "There are two kinds of configuration:"
msgstr "有兩種配置："

#: ../../c-api/init_config.rst:17
#, fuzzy
msgid ""
"The :ref:`Python Configuration <init-python-config>` can be used to build a "
"customized Python which behaves as the regular Python. For example, "
"environment variables and command line arguments are used to configure "
"Python."
msgstr ""
":ref:`Python 配置 <init-python-config>` 可用於構建行為與常規 Python 相同的自"
"定義 Python。例如，環境變數和命令列參數用於配置 Python。"

#: ../../c-api/init_config.rst:22
#, fuzzy
msgid ""
"The :ref:`Isolated Configuration <init-isolated-conf>` can be used to embed "
"Python into an application. It isolates Python from the system. For example, "
"environment variables are ignored, the LC_CTYPE locale is left unchanged and "
"no signal handler is registered."
msgstr ""
":ref:`Isolated Configuration <init-isolated-conf>` 可用於將 Python 嵌入到應用"
"程式中。它將 Python 與系統隔離開來。例如，環境變數被忽略，LC_CTYPE 語言環境保"
"持不變並且沒有註冊信號處理程式。"

#: ../../c-api/init_config.rst:27
#, fuzzy
msgid ""
"The :c:func:`Py_RunMain` function can be used to write a customized Python "
"program."
msgstr ":c:func:`Py_RunMain` 函式可用於編寫自定義 Python 程式。"

#: ../../c-api/init_config.rst:30
#, fuzzy
msgid ""
"See also :ref:`Initialization, Finalization, and Threads <initialization>`."
msgstr ""
"另見 :ref:`Initialization, Finalization, and Threads <initialization>`。"

#: ../../c-api/init_config.rst:33
#, fuzzy
msgid ":pep:`587` \"Python Initialization Configuration\"."
msgstr ":pep:`587` “Python 初始化配置”。"

#: ../../c-api/init_config.rst:37
msgid "Example"
msgstr "範例"

#: ../../c-api/init_config.rst:39
#, fuzzy
msgid "Example of customized Python always running in isolated mode::"
msgstr "始終以隔離模式運行的自定義 Python 示例::"

#: ../../c-api/init_config.rst:76
msgid "PyWideStringList"
msgstr "PyWideStringList"

#: ../../c-api/init_config.rst:80
#, fuzzy
msgid "List of ``wchar_t*`` strings."
msgstr "``wchar_t*`` 字串列表。"

#: ../../c-api/init_config.rst:82
#, fuzzy
msgid ""
"If *length* is non-zero, *items* must be non-``NULL`` and all strings must "
"be non-``NULL``."
msgstr ""
"如果 *length* 非零，*items* 必須是非 ``NULL`` 並且所有字串都必須是非 "
"``NULL`` 。"

#: ../../c-api/init_config.rst:85
msgid "Methods:"
msgstr "方法："

#: ../../c-api/init_config.rst:89
#, fuzzy
msgid "Append *item* to *list*."
msgstr "將 *item* 附加到 *list*。"

#: ../../c-api/init_config.rst:91 ../../c-api/init_config.rst:102
#, fuzzy
msgid "Python must be preinitialized to call this function."
msgstr "Python 必須預初始化才能呼叫此函式。"

#: ../../c-api/init_config.rst:95
#, fuzzy
msgid "Insert *item* into *list* at *index*."
msgstr "將 *item* 插入 *list* 的 *index* 處。"

#: ../../c-api/init_config.rst:97
#, fuzzy
msgid ""
"If *index* is greater than or equal to *list* length, append *item* to "
"*list*."
msgstr "如果 *index* 大於或等於 *list* 長度，則將 *item* 附加到 *list*。"

#: ../../c-api/init_config.rst:100
#, fuzzy
msgid "*index* must be greater than or equal to ``0``."
msgstr "*index* 必須大於或等於 ``0``。"

#: ../../c-api/init_config.rst:104 ../../c-api/init_config.rst:124
#: ../../c-api/init_config.rst:225 ../../c-api/init_config.rst:530
#, fuzzy
msgid "Structure fields:"
msgstr "結構欄位："

#: ../../c-api/init_config.rst:108
#, fuzzy
msgid "List length."
msgstr "列表長度。"

#: ../../c-api/init_config.rst:112
#, fuzzy
msgid "List items."
msgstr "列表項目。"

#: ../../c-api/init_config.rst:115
msgid "PyStatus"
msgstr "PyStatus"

#: ../../c-api/init_config.rst:119
#, fuzzy
msgid ""
"Structure to store an initialization function status: success, error or exit."
msgstr "儲存初始化函式狀態的結構：成功、錯誤或退出。"

#: ../../c-api/init_config.rst:122
#, fuzzy
msgid "For an error, it can store the C function name which created the error."
msgstr "對於錯誤，它可以儲存建立錯誤的 C 函式名稱。"

#: ../../c-api/init_config.rst:128
msgid "Exit code. Argument passed to ``exit()``."
msgstr "退出程式碼。傳遞引數給 `exit()``。"

#: ../../c-api/init_config.rst:132
msgid "Error message."
msgstr "錯誤訊息。"

#: ../../c-api/init_config.rst:136
#, fuzzy
msgid "Name of the function which created an error, can be ``NULL``."
msgstr "建立錯誤的函式的名稱，可以是 ``NULL`` 。"

#: ../../c-api/init_config.rst:138
#, fuzzy
msgid "Functions to create a status:"
msgstr "建立狀態的函式："

#: ../../c-api/init_config.rst:142
#, fuzzy
msgid "Success."
msgstr "成功。"

#: ../../c-api/init_config.rst:146
#, fuzzy
msgid "Initialization error with a message."
msgstr "帶有消息的初始化錯誤。"

#: ../../c-api/init_config.rst:148
msgid "*err_msg* must not be ``NULL``."
msgstr "*err_msg* 不可為 ``NULL``。"

#: ../../c-api/init_config.rst:152
#, fuzzy
msgid "Memory allocation failure (out of memory)."
msgstr "記憶體分配失敗（記憶體不足）。"

#: ../../c-api/init_config.rst:156
#, fuzzy
msgid "Exit Python with the specified exit code."
msgstr "使用指定的退出程式碼退出 Python。"

#: ../../c-api/init_config.rst:158
#, fuzzy
msgid "Functions to handle a status:"
msgstr "處理狀態的函式："

#: ../../c-api/init_config.rst:162
#, fuzzy
msgid ""
"Is the status an error or an exit? If true, the exception must be handled; "
"by calling :c:func:`Py_ExitStatusException` for example."
msgstr ""
"狀態是錯誤還是退出？如果為真，則例外必須被處理；例如，通過呼叫 :c:func:"
"`Py_ExitStatusException`。"

#: ../../c-api/init_config.rst:167
msgid "Is the result an error?"
msgstr "結果是個錯誤嗎？"

#: ../../c-api/init_config.rst:171
msgid "Is the result an exit?"
msgstr "結果是退出嗎？"

#: ../../c-api/init_config.rst:175
#, fuzzy
msgid ""
"Call ``exit(exitcode)`` if *status* is an exit. Print the error message and "
"exit with a non-zero exit code if *status* is an error.  Must only be called "
"if ``PyStatus_Exception(status)`` is non-zero."
msgstr ""
"如果 *status* 是退出，則呼叫 ``exit(exitcode)``。如果 *status* 是錯誤，則印出"
"錯誤消息並以非零退出程式碼退出。必須僅在 PyStatus_Exception(status) 為非零時"
"呼叫。"

#: ../../c-api/init_config.rst:180
#, fuzzy
msgid ""
"Internally, Python uses macros which set ``PyStatus.func``, whereas "
"functions to create a status set ``func`` to ``NULL``."
msgstr ""
"在內部，Python 使用設定“PyStatus.func”的巨集，而建立狀態的函式將 ``func``設定"
"為 ``NULL`` 。"

#: ../../c-api/init_config.rst:183
msgid "Example::"
msgstr ""
"範例：\n"
"\n"
"::"

#: ../../c-api/init_config.rst:207
msgid "PyPreConfig"
msgstr "PyPreConfig"

#: ../../c-api/init_config.rst:211
#, fuzzy
msgid "Structure used to preinitialize Python."
msgstr "用於預初始化 Python 的結構。"

#: ../../c-api/init_config.rst:213
#, fuzzy
msgid "Function to initialize a preconfiguration:"
msgstr "初始化預配置的函式："

#: ../../c-api/init_config.rst:217
#, fuzzy
msgid ""
"Initialize the preconfiguration with :ref:`Python Configuration <init-python-"
"config>`."
msgstr "使用 :ref:`Python 配置 <init-python-config>` 初始化預配置。"

#: ../../c-api/init_config.rst:222
#, fuzzy
msgid ""
"Initialize the preconfiguration with :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr "使用 :ref:`Isolated Configuration <init-isolated-conf>` 初始化預配置。"

#: ../../c-api/init_config.rst:229
#, fuzzy
msgid "Name of the Python memory allocators:"
msgstr "Python 記憶體分配器的名稱："

#: ../../c-api/init_config.rst:231
#, fuzzy
msgid ""
"``PYMEM_ALLOCATOR_NOT_SET`` (``0``): don't change memory allocators (use "
"defaults)."
msgstr ""
"``PYMEM_ALLOCATOR_NOT_SET`` (``0``)：不要更改記憶體分配器（使用預設值）。"

#: ../../c-api/init_config.rst:233
#, fuzzy
msgid ""
"``PYMEM_ALLOCATOR_DEFAULT`` (``1``): :ref:`default memory allocators "
"<default-memory-allocators>`."
msgstr ""
"``PYMEM_ALLOCATOR_DEFAULT`` (``1``): :ref:`預設記憶體分配器 <default-memory-"
"allocators>`。"

#: ../../c-api/init_config.rst:235
#, fuzzy
msgid ""
"``PYMEM_ALLOCATOR_DEBUG`` (``2``): :ref:`default memory allocators <default-"
"memory-allocators>` with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""
"``PYMEM_ALLOCATOR_DEBUG`` (``2``): :ref:`default memory allocators <default-"
"memory-allocators>` with :ref:`debug hooks <pymem-debug-hooks>`。"

#: ../../c-api/init_config.rst:238
#, fuzzy
msgid "``PYMEM_ALLOCATOR_MALLOC`` (``3``): use ``malloc()`` of the C library."
msgstr "``PYMEM_ALLOCATOR_MALLOC`` (``3``): 使用 C 庫的``malloc()``。"

#: ../../c-api/init_config.rst:239
#, fuzzy
msgid ""
"``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): force usage of ``malloc()`` with :"
"ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""
"``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): 強制使用``malloc()`` 和 :ref:`除錯"
"鉤子 <pymem-debug-hooks>`。"

#: ../../c-api/init_config.rst:241
#, fuzzy
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` (``5``): :ref:`Python pymalloc memory allocator "
"<pymalloc>`."
msgstr ""
"``PYMEM_ALLOCATOR_PYMALLOC`` (``5``): :ref:`Python pymalloc 記憶體分配器 "
"<pymalloc>`。"

#: ../../c-api/init_config.rst:243
#, fuzzy
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` (``6``): :ref:`Python pymalloc memory "
"allocator <pymalloc>` with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` (``6``): :ref:`Python pymalloc 記憶體分配"
"器 <pymalloc>` with :ref:`debug hooks <pymem-debug-hooks>`。"

#: ../../c-api/init_config.rst:247
#, fuzzy
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` and ``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` are not "
"supported if Python is :option:`configured using --without-pymalloc <--"
"without-pymalloc>`."
msgstr ""
"``PYMEM_ALLOCATOR_PYMALLOC`` 和 ``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` 如果 "
"Python 是不支援的 :option:`使用 --without-pymalloc <--without-pymalloc>` 配"
"置。"

#: ../../c-api/init_config.rst:251
msgid "See :ref:`Memory Management <memory>`."
msgstr "請見\\ :ref:`記憶體管理 <memory>`\\ 。"

#: ../../c-api/init_config.rst:253
msgid "Default: ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr "預設：\\ ``PYMEM_ALLOCATOR_NOT_SET``\\ 。"

#: ../../c-api/init_config.rst:257
#, fuzzy
msgid "Set the LC_CTYPE locale to the user preferred locale."
msgstr "將 LC_CTYPE 語言環境設定為使用者首選語言環境。"

#: ../../c-api/init_config.rst:259
#, fuzzy
msgid ""
"If equals to ``0``, set :c:member:`~PyPreConfig.coerce_c_locale` and :c:"
"member:`~PyPreConfig.coerce_c_locale_warn` members to ``0``."
msgstr ""
"如果等於 ``0``，則將 :c:member:`~PyPreConfig.coerce_c_locale` 和 :c:member:"
"`~PyPreConfig.coerce_c_locale_warn` 成員設定為 ``0``。"

#: ../../c-api/init_config.rst:262 ../../c-api/init_config.rst:273
msgid "See the :term:`locale encoding`."
msgstr "請見 :term:`locale encoding`\\ 。"

#: ../../c-api/init_config.rst:264 ../../c-api/init_config.rst:319
#: ../../c-api/init_config.rst:670
#, fuzzy
msgid "Default: ``1`` in Python config, ``0`` in isolated config."
msgstr "預設值：Python 配置中為 ``1``，隔離配置中為 ``0``。"

#: ../../c-api/init_config.rst:268
#, fuzzy
msgid "If equals to ``2``, coerce the C locale."
msgstr "如果等於 ``2``，強制 C 語言環境。"

#: ../../c-api/init_config.rst:270
#, fuzzy
msgid ""
"If equals to ``1``, read the LC_CTYPE locale to decide if it should be "
"coerced."
msgstr "如果等於 ``1``，讀取 LC_CTYPE 語言環境來決定它是否應該被強制。"

#: ../../c-api/init_config.rst:275 ../../c-api/init_config.rst:281
#, fuzzy
msgid "Default: ``-1`` in Python config, ``0`` in isolated config."
msgstr "預設值：Python 配置中為 ``-1``，隔離配置中為 ``0``。"

#: ../../c-api/init_config.rst:279
#, fuzzy
msgid "If non-zero, emit a warning if the C locale is coerced."
msgstr "如果非零，則在強制 C 語言環境時發出警告。"

#: ../../c-api/init_config.rst:285
#, fuzzy
msgid ""
":ref:`Python Development Mode <devmode>`: see :c:member:`PyConfig.dev_mode`."
msgstr ":ref:`Python 開發模式 <devmode>`：參見 :c:member:`PyConfig.dev_mode`。"

#: ../../c-api/init_config.rst:288 ../../c-api/init_config.rst:679
#: ../../c-api/init_config.rst:721 ../../c-api/init_config.rst:1150
#, fuzzy
msgid "Default: ``-1`` in Python mode, ``0`` in isolated mode."
msgstr "預設值：Python 模式下為 ``-1``，隔離模式下為 ``0``。"

#: ../../c-api/init_config.rst:292
#, fuzzy
msgid "Isolated mode: see :c:member:`PyConfig.isolated`."
msgstr "隔離模式：參見 :c:member:`PyConfig.isolated`。"

#: ../../c-api/init_config.rst:294 ../../c-api/init_config.rst:846
#, fuzzy
msgid "Default: ``0`` in Python mode, ``1`` in isolated mode."
msgstr "預設值：Python 模式下為 ``0``，隔離模式下為 ``1``。"

#: ../../c-api/init_config.rst:298
msgid "If non-zero:"
msgstr "如果不為 0："

#: ../../c-api/init_config.rst:300
msgid "Set :c:member:`PyPreConfig.utf8_mode` to ``0``,"
msgstr "將 :c:member:`PyPreConfig.utf8_mode` 設為 ``0``\\ 、"

#: ../../c-api/init_config.rst:301
msgid "Set :c:member:`PyConfig.filesystem_encoding` to ``\"mbcs\"``,"
msgstr "將 :c:member:`PyConfig.filesystem_encoding` 設為 ``\"mbcs\"``\\ 、"

#: ../../c-api/init_config.rst:302
msgid "Set :c:member:`PyConfig.filesystem_errors` to ``\"replace\"``."
msgstr "將 :c:member:`PyConfig.filesystem_errors` 設為 ``\"replace\"``\\ 。"

#: ../../c-api/init_config.rst:304
#, fuzzy
msgid ""
"Initialized the from :envvar:`PYTHONLEGACYWINDOWSFSENCODING` environment "
"variable value."
msgstr "從 :envvar:`PYTHONLEGACYWINDOWSFSENCODING` 環境變數值初始化。"

#: ../../c-api/init_config.rst:307 ../../c-api/init_config.rst:859
#, fuzzy
msgid ""
"Only available on Windows. ``#ifdef MS_WINDOWS`` macro can be used for "
"Windows specific code."
msgstr ""
"僅適用於 Windows。 ``#ifdef MS_WINDOWS`` 巨集可用於 Windows 特定程式碼。"

#: ../../c-api/init_config.rst:310 ../../c-api/init_config.rst:618
#: ../../c-api/init_config.rst:625 ../../c-api/init_config.rst:692
#: ../../c-api/init_config.rst:801 ../../c-api/init_config.rst:815
#: ../../c-api/init_config.rst:829 ../../c-api/init_config.rst:862
#: ../../c-api/init_config.rst:876 ../../c-api/init_config.rst:936
#: ../../c-api/init_config.rst:985 ../../c-api/init_config.rst:1045
#: ../../c-api/init_config.rst:1085 ../../c-api/init_config.rst:1114
#: ../../c-api/init_config.rst:1187
msgid "Default: ``0``."
msgstr "預設：\\ ``0``。"

#: ../../c-api/init_config.rst:314
#, fuzzy
msgid ""
"If non-zero, :c:func:`Py_PreInitializeFromArgs` and :c:func:"
"`Py_PreInitializeFromBytesArgs` parse their ``argv`` argument the same way "
"the regular Python parses command line arguments: see :ref:`Command Line "
"Arguments <using-on-cmdline>`."
msgstr ""
"如果非零，:c:func:`Py_PreInitializeFromArgs` 和:c:func:"
"`Py_PreInitializeFromBytesArgs` 以與常規 Python 剖析命令列參數相同的方式剖析"
"它們的 ``argv`` 參數 :ref:`命令列參數 <使用-on-cmdline>`。"

#: ../../c-api/init_config.rst:323
#, fuzzy
msgid ""
"Use :ref:`environment variables <using-on-envvars>`? See :c:member:`PyConfig."
"use_environment`."
msgstr ""
"使用 :ref:`環境變數 <using-on-envvars>`?請參閱:c:member:`PyConfig."
"use_environment`。"

#: ../../c-api/init_config.rst:326 ../../c-api/init_config.rst:1161
#, fuzzy
msgid "Default: ``1`` in Python config and ``0`` in isolated config."
msgstr "預設值：Python 配置中為 ``1``，隔離配置中為 ``0``。"

#: ../../c-api/init_config.rst:330
#, fuzzy
msgid "If non-zero, enable the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr "如果非零，啟用 :ref:`Python UTF-8 模式 <utf8-mode>`。"

#: ../../c-api/init_config.rst:332
#, fuzzy
msgid ""
"Set to ``0`` or ``1`` by the :option:`-X utf8 <-X>` command line option and "
"the :envvar:`PYTHONUTF8` environment variable."
msgstr ""
"通過 :option:`-X utf8 <-X>` 命令列選項和 :envvar:`PYTHONUTF8` 環境變數設定為 "
"``0`` 或 ``1``。"

#: ../../c-api/init_config.rst:335
#, fuzzy
msgid "Also set to ``1`` if the ``LC_CTYPE`` locale is ``C`` or ``POSIX``."
msgstr "如果 ``LC_CTYPE`` 語言環境是 ``C`` 或 ``POSIX``，也設定為 ``1``。"

#: ../../c-api/init_config.rst:337
#, fuzzy
msgid "Default: ``-1`` in Python config and ``0`` in isolated config."
msgstr "預設值：Python 配置中的 ``-1``和獨立配置中的 ``0``。"

#: ../../c-api/init_config.rst:343
#, fuzzy
msgid "Preinitialize Python with PyPreConfig"
msgstr "使用 PyPreConfig 預初始化 Python"

#: ../../c-api/init_config.rst:345
#, fuzzy
msgid "The preinitialization of Python:"
msgstr "Python的預初始化："

#: ../../c-api/init_config.rst:347
#, fuzzy
msgid "Set the Python memory allocators (:c:member:`PyPreConfig.allocator`)"
msgstr "設定 Python 記憶體分配器 (:c:member:`PyPreConfig.allocator`)"

#: ../../c-api/init_config.rst:348
#, fuzzy
msgid "Configure the LC_CTYPE locale (:term:`locale encoding`)"
msgstr "配置 LC_CTYPE 語言環境（:term:`locale encoding`）"

#: ../../c-api/init_config.rst:349
#, fuzzy
msgid ""
"Set the :ref:`Python UTF-8 Mode <utf8-mode>` (:c:member:`PyPreConfig."
"utf8_mode`)"
msgstr ""
"設定 :ref:`Python UTF-8 模式 <utf8-mode>` (:c:member:`PyPreConfig.utf8_mode`)"

#: ../../c-api/init_config.rst:352
#, fuzzy
msgid ""
"The current preconfiguration (``PyPreConfig`` type) is stored in "
"``_PyRuntime.preconfig``."
msgstr "當前預配置（``PyPreConfig`` 型別）儲存在``_PyRuntime.preconfig`` 中。"

#: ../../c-api/init_config.rst:355
#, fuzzy
msgid "Functions to preinitialize Python:"
msgstr "預初始化 Python 的函式："

#: ../../c-api/init_config.rst:359 ../../c-api/init_config.rst:365
#: ../../c-api/init_config.rst:374
#, fuzzy
msgid "Preinitialize Python from *preconfig* preconfiguration."
msgstr "從 *preconfig* 預配置中預初始化 Python。"

#: ../../c-api/init_config.rst:361 ../../c-api/init_config.rst:370
#: ../../c-api/init_config.rst:379
msgid "*preconfig* must not be ``NULL``."
msgstr "*preconfig* 不可為 ``NULL``。"

#: ../../c-api/init_config.rst:367
#, fuzzy
msgid ""
"Parse *argv* command line arguments (bytes strings) if :c:member:"
"`~PyPreConfig.parse_argv` of *preconfig* is non-zero."
msgstr ""
"如果 *preconfig* 的 :c:member:`~PyPreConfig.parse_argv` 為非零，則剖析 "
"*argv* 命令列參數（位元組字串）。"

#: ../../c-api/init_config.rst:376
#, fuzzy
msgid ""
"Parse *argv* command line arguments (wide strings) if :c:member:"
"`~PyPreConfig.parse_argv` of *preconfig* is non-zero."
msgstr ""
"如果 *preconfig* 的 :c:member:`~PyPreConfig.parse_argv` 不為零，則剖析 "
"*argv* 命令列參數（寬字串）。"

#: ../../c-api/init_config.rst:381 ../../c-api/init_config.rst:1249
#, fuzzy
msgid ""
"The caller is responsible to handle exceptions (error or exit) using :c:func:"
"`PyStatus_Exception` and :c:func:`Py_ExitStatusException`."
msgstr ""
"呼叫者負責使用 PyStatus_Exception 和 Py_ExitStatusException 處理例外（錯誤或"
"退出）。"

#: ../../c-api/init_config.rst:384
#, fuzzy
msgid ""
"For :ref:`Python Configuration <init-python-config>` (:c:func:"
"`PyPreConfig_InitPythonConfig`), if Python is initialized with command line "
"arguments, the command line arguments must also be passed to preinitialize "
"Python, since they have an effect on the pre-configuration like encodings. "
"For example, the :option:`-X utf8 <-X>` command line option enables the :ref:"
"`Python UTF-8 Mode <utf8-mode>`."
msgstr ""
"對於 :ref:`Python 配置 <init-python-config>` (:c:func:"
"`PyPreConfig_InitPythonConfig`)，如果使用命令列參數初始化 Python，則還必須傳"
"遞命令列參數以預初始化 Python，因為它們具有對編碼等預配置的影響。例如，:"
"option:`-X utf8 <-X>` 命令列選項啟用 :ref:`Python UTF-8 模式 <utf8-mode>`。"

#: ../../c-api/init_config.rst:391
#, fuzzy
msgid ""
"``PyMem_SetAllocator()`` can be called after :c:func:`Py_PreInitialize` and "
"before :c:func:`Py_InitializeFromConfig` to install a custom memory "
"allocator. It can be called before :c:func:`Py_PreInitialize` if :c:member:"
"`PyPreConfig.allocator` is set to ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr ""
"可以在 Py_PreInitialize 之後和 Py_InitializeFromConfig 之前呼叫 "
"PyMem_SetAllocator() 以安裝自定義記憶體分配器。如果 PyPreConfig.allocator 設"
"定為 PYMEM_ALLOCATOR_NOT_SET，則可以在 Py_PreInitialize 之前呼叫它。"

#: ../../c-api/init_config.rst:396
#, fuzzy
msgid ""
"Python memory allocation functions like :c:func:`PyMem_RawMalloc` must not "
"be used before the Python preinitialization, whereas calling directly "
"``malloc()`` and ``free()`` is always safe. :c:func:`Py_DecodeLocale` must "
"not be called before the Python preinitialization."
msgstr ""
"在 Python 預初始化之前不得使用 :c:func:`PyMem_RawMalloc` 等 Python 記憶體分配"
"函式，而直接呼叫 ``malloc()`` 和 ``free()`` 總是安全的。 :c:func:"
"`Py_DecodeLocale` 不得在 Python 預初始化之前呼叫。"

#: ../../c-api/init_config.rst:401
#, fuzzy
msgid ""
"Example using the preinitialization to enable the :ref:`Python UTF-8 Mode "
"<utf8-mode>`::"
msgstr "使用預初始化啟用 :ref:`Python UTF-8 模式 <utf8-mode>`::"

#: ../../c-api/init_config.rst:423
msgid "PyConfig"
msgstr "PyConfig"

#: ../../c-api/init_config.rst:427
#, fuzzy
msgid "Structure containing most parameters to configure Python."
msgstr "包含用於配置 Python 的大多數參數的結構。"

#: ../../c-api/init_config.rst:429
#, fuzzy
msgid ""
"When done, the :c:func:`PyConfig_Clear` function must be used to release the "
"configuration memory."
msgstr "完成後，必須使用 :c:func:`PyConfig_Clear` 函式來釋放配置記憶體。"

#: ../../c-api/init_config.rst:432
#, fuzzy
msgid "Structure methods:"
msgstr "構造方法："

#: ../../c-api/init_config.rst:436
#, fuzzy
msgid ""
"Initialize configuration with the :ref:`Python Configuration <init-python-"
"config>`."
msgstr "使用 :ref:`Python 配置 <init-python-config>` 初始化配置。"

#: ../../c-api/init_config.rst:441
#, fuzzy
msgid ""
"Initialize configuration with the :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr "使用 :ref:`Isolated Configuration <init-isolated-conf>` 初始化配置。"

#: ../../c-api/init_config.rst:446
#, fuzzy
msgid "Copy the wide character string *str* into ``*config_str``."
msgstr "將寬字串 *str* 複製到 ``*config_str`` 中。"

#: ../../c-api/init_config.rst:448 ../../c-api/init_config.rst:455
#: ../../c-api/init_config.rst:462 ../../c-api/init_config.rst:470
#: ../../c-api/init_config.rst:476 ../../c-api/init_config.rst:493
#, fuzzy
msgid ":ref:`Preinitialize Python <c-preinit>` if needed."
msgstr ":ref:`如果需要，預初始化 Python <c-preinit>`。"

#: ../../c-api/init_config.rst:452
#, fuzzy
msgid ""
"Decode *str* using :c:func:`Py_DecodeLocale` and set the result into "
"``*config_str``."
msgstr ""
"使用 :c:func:`Py_DecodeLocale` 解碼 *str* 並將結果設定為 ``*config_str``。"

#: ../../c-api/init_config.rst:459
#, fuzzy
msgid ""
"Set command line arguments (:c:member:`~PyConfig.argv` member of *config*) "
"from the *argv* list of wide character strings."
msgstr ""
"從 *argv* 寬字串列表中設定命令列參數（*config* 的:c:member:`~PyConfig.argv` "
"成員）。"

#: ../../c-api/init_config.rst:466
#, fuzzy
msgid ""
"Set command line arguments (:c:member:`~PyConfig.argv` member of *config*) "
"from the *argv* list of bytes strings. Decode bytes using :c:func:"
"`Py_DecodeLocale`."
msgstr ""
"從 *argv* 位元組字串列表中設定命令列參數（*config* 的:c:member:`~PyConfig."
"argv` 成員）。使用 :c:func:`Py_DecodeLocale` 解碼位元組。"

#: ../../c-api/init_config.rst:474
#, fuzzy
msgid "Set the list of wide strings *list* to *length* and *items*."
msgstr "將寬字串列表 *list* 設定為 *length* 和 *items*。"

#: ../../c-api/init_config.rst:480
#, fuzzy
msgid "Read all Python configuration."
msgstr "讀取所有 Python 配置。"

#: ../../c-api/init_config.rst:482
#, fuzzy
msgid "Fields which are already initialized are left unchanged."
msgstr "已經初始化的欄位保持不變。"

#: ../../c-api/init_config.rst:484
#, fuzzy
msgid ""
"Fields for :ref:`path configuration <init-path-config>` are no longer "
"calculated or modified when calling this function, as of Python 3.11."
msgstr ""
"從 Python 3.11 開始，在呼叫此函式時不再計算或修改路徑配置 <init-path-config> "
"的欄位。"

#: ../../c-api/init_config.rst:487 ../../c-api/init_config.rst:965
#, fuzzy
msgid ""
"The :c:func:`PyConfig_Read` function only parses :c:member:`PyConfig.argv` "
"arguments once: :c:member:`PyConfig.parse_argv` is set to ``2`` after "
"arguments are parsed. Since Python arguments are strippped from :c:member:"
"`PyConfig.argv`, parsing arguments twice would parse the application options "
"as Python options."
msgstr ""
":c:func:`PyConfig_Read` 函式只剖析 :c:member:`PyConfig.argv` 參數一次：:c:"
"member:`PyConfig.parse_argv` 在剖析參數後設定為 ``2``。由於 Python 參數從 :c:"
"member:`PyConfig.argv` 中剝離，因此兩次剖析參數會將應用程式選項剖析為 Python "
"選項。"

#: ../../c-api/init_config.rst:495
#, fuzzy
msgid ""
"The :c:member:`PyConfig.argv` arguments are now only parsed once, :c:member:"
"`PyConfig.parse_argv` is set to ``2`` after arguments are parsed, and "
"arguments are only parsed if :c:member:`PyConfig.parse_argv` equals ``1``."
msgstr ""
":c:member:`PyConfig.argv` 參數現在只剖析一次，:c:member:`PyConfig."
"parse_argv` 在剖析參數後設定為 ``2``，並且僅在以下情況下剖析參數 :c:member:"
"`PyConfig.parse_argv` 等於``1``。"

#: ../../c-api/init_config.rst:501
#, fuzzy
msgid ""
":c:func:`PyConfig_Read` no longer calculates all paths, and so fields listed "
"under :ref:`Python Path Configuration <init-path-config>` may no longer be "
"updated until :c:func:`Py_InitializeFromConfig` is called."
msgstr ""
":c:func:`PyConfig_Read` 不再計算所有路徑，因此 :ref:`Python 路徑配置 <init-"
"path-config>` 下列出的欄位可能不再更新，直到呼叫 :c:func:"
"`Py_InitializeFromConfig` ."

#: ../../c-api/init_config.rst:509
#, fuzzy
msgid "Release configuration memory."
msgstr "釋放配置記憶體。"

#: ../../c-api/init_config.rst:511
#, fuzzy
msgid ""
"Most ``PyConfig`` methods :ref:`preinitialize Python <c-preinit>` if needed. "
"In that case, the Python preinitialization configuration (:c:type:"
"`PyPreConfig`) in based on the :c:type:`PyConfig`. If configuration fields "
"which are in common with :c:type:`PyPreConfig` are tuned, they must be set "
"before calling a :c:type:`PyConfig` method:"
msgstr ""
"大多數 ``PyConfig`` 方法 :ref:`如果需要，預初始化 Python <c-preinit>`。在這種"
"情況下，Python 預初始化配置 (:c:type:`PyPreConfig`) 基於 :c:type:`PyConfig`。"
"如果調整與 :c:type:`PyPreConfig` 共同的配置欄位，則必須在呼叫 :c:type:"
"`PyConfig` 方法之前設定它們："

#: ../../c-api/init_config.rst:517
msgid ":c:member:`PyConfig.dev_mode`"
msgstr ":c:member:`PyConfig.dev_mode`"

#: ../../c-api/init_config.rst:518
msgid ":c:member:`PyConfig.isolated`"
msgstr ":c:member:`PyConfig.isolated`"

#: ../../c-api/init_config.rst:519
msgid ":c:member:`PyConfig.parse_argv`"
msgstr ":c:member:`PyConfig.parse_argv`"

#: ../../c-api/init_config.rst:520
msgid ":c:member:`PyConfig.use_environment`"
msgstr ":c:member:`PyConfig.use_environment`"

#: ../../c-api/init_config.rst:522
#, fuzzy
msgid ""
"Moreover, if :c:func:`PyConfig_SetArgv` or :c:func:`PyConfig_SetBytesArgv` "
"is used, this method must be called before other methods, since the "
"preinitialization configuration depends on command line arguments (if :c:"
"member:`parse_argv` is non-zero)."
msgstr ""
"此外，如果使用 :c:func:`PyConfig_SetArgv` 或 :c:func:"
"`PyConfig_SetBytesArgv`，則必須在其他方法之前呼叫此方法，因為預初始化配置取決"
"於命令列參數（如果 :c:member:`parse_argv ` 是非零的）。"

#: ../../c-api/init_config.rst:527
#, fuzzy
msgid ""
"The caller of these methods is responsible to handle exceptions (error or "
"exit) using ``PyStatus_Exception()`` and ``Py_ExitStatusException()``."
msgstr ""
"這些方法的呼叫者負責使用 PyStatus_Exception() 和 Py_ExitStatusException() 處"
"理例外（錯誤或退出）。"

#: ../../c-api/init_config.rst:534
#, fuzzy
msgid "Command line arguments: :data:`sys.argv`."
msgstr "命令列參數：:data:`sys.argv`。"

#: ../../c-api/init_config.rst:536
#, fuzzy
msgid ""
"Set :c:member:`~PyConfig.parse_argv` to ``1`` to parse :c:member:`~PyConfig."
"argv` the same way the regular Python parses Python command line arguments "
"and then to strip Python arguments from :c:member:`~PyConfig.argv`."
msgstr ""
"將 :c:member:`~PyConfig.parse_argv` 設定為 ``1`` 以剖析 :c:member:`~PyConfig."
"argv` 的方式與常規 Python 剖析 Python 命令列參數的方式相同，然後從中刪除 "
"Python 參數 :c:member:`~PyConfig.argv`。"

#: ../../c-api/init_config.rst:541
#, fuzzy
msgid ""
"If :c:member:`~PyConfig.argv` is empty, an empty string is added to ensure "
"that :data:`sys.argv` always exists and is never empty."
msgstr ""
"如果 :c:member:`~PyConfig.argv` 為空，則新增一個空字串以確保 :data:`sys."
"argv` 始終存在並且永遠不會為空。"

#: ../../c-api/init_config.rst:544 ../../c-api/init_config.rst:571
#: ../../c-api/init_config.rst:583 ../../c-api/init_config.rst:591
#: ../../c-api/init_config.rst:699 ../../c-api/init_config.rst:708
#: ../../c-api/init_config.rst:790 ../../c-api/init_config.rst:906
#: ../../c-api/init_config.rst:1004 ../../c-api/init_config.rst:1022
#: ../../c-api/init_config.rst:1036 ../../c-api/init_config.rst:1053
#: ../../c-api/init_config.rst:1066 ../../c-api/init_config.rst:1074
msgid "Default: ``NULL``."
msgstr "預設值：\\ ``NULL``\\ 。"

#: ../../c-api/init_config.rst:546
#, fuzzy
msgid "See also the :c:member:`~PyConfig.orig_argv` member."
msgstr "另見 :c:member:`~PyConfig.orig_argv` 成員。"

#: ../../c-api/init_config.rst:550
#, fuzzy
msgid ""
"If equals to zero, ``Py_RunMain()`` prepends a potentially unsafe path to :"
"data:`sys.path` at startup:"
msgstr ""
"如果等於零，``Py_RunMain()`` 會在啟動時為 :data:`sys.path` 新增一個潛在的不安"
"全路徑："

#: ../../c-api/init_config.rst:553
#, fuzzy
msgid ""
"If :c:member:`argv[0] <PyConfig.argv>` is equal to ``L\"-m\"`` (``python -m "
"module``), prepend the current working directory."
msgstr ""
"如果 :c:member:`argv[0] <PyConfig.argv>` 等於 ``L\"-m\"`` (``python -m "
"module``)，新增當前工作目錄。"

#: ../../c-api/init_config.rst:555
#, fuzzy
msgid ""
"If running a script (``python script.py``), prepend the script's directory.  "
"If it's a symbolic link, resolve symbolic links."
msgstr ""
"如果運行腳本（``python script.py``），請在腳本目錄前新增。如果是符號鏈接，剖"
"析符號鏈接。"

#: ../../c-api/init_config.rst:557
#, fuzzy
msgid ""
"Otherwise (``python -c code`` and ``python``), prepend an empty string, "
"which means the current working directory."
msgstr ""
"否則（``python -c code`` 和 ``python``），在前面加上一個空字串，表示當前工作"
"目錄。"

#: ../../c-api/init_config.rst:560
#, fuzzy
msgid ""
"Set to ``1`` by the :option:`-P` command line option and the :envvar:"
"`PYTHONSAFEPATH` environment variable."
msgstr ""
"通過 :option:`-P` 命令列選項和 :envvar:`PYTHONSAFEPATH` 環境變數設定為 "
"``1``。"

#: ../../c-api/init_config.rst:563
#, fuzzy
msgid "Default: ``0`` in Python config, ``1`` in isolated config."
msgstr "預設值：Python 配置中為 ``0``，隔離配置中為 ``1``。"

#: ../../c-api/init_config.rst:569
msgid ":data:`sys.base_exec_prefix`."
msgstr ":data:`sys.base_exec_prefix`\\ 。"

#: ../../c-api/init_config.rst:573 ../../c-api/init_config.rst:585
#: ../../c-api/init_config.rst:593 ../../c-api/init_config.rst:701
#: ../../c-api/init_config.rst:710 ../../c-api/init_config.rst:923
#: ../../c-api/init_config.rst:1006
#, fuzzy
msgid "Part of the :ref:`Python Path Configuration <init-path-config>` output."
msgstr ":ref:`Python 路徑配置 <init-path-config>` 輸出的一部分。"

#: ../../c-api/init_config.rst:577
#, fuzzy
msgid "Python base executable: :data:`sys._base_executable`."
msgstr "Python 基本可執行文件：:data:`sys._base_executable`。"

#: ../../c-api/init_config.rst:579
#, fuzzy
msgid "Set by the :envvar:`__PYVENV_LAUNCHER__` environment variable."
msgstr "由 :envvar:`__PYVENV_LAUNCHER__` 環境變數設定。"

#: ../../c-api/init_config.rst:581
#, fuzzy
msgid "Set from :c:member:`PyConfig.executable` if ``NULL``."
msgstr "如果為 ``NULL`` ，則從 :c:member:`PyConfig.executable` 設定。"

#: ../../c-api/init_config.rst:589
msgid ":data:`sys.base_prefix`."
msgstr ":data:`sys.base_prefix`\\ 。"

#: ../../c-api/init_config.rst:597
#, fuzzy
msgid ""
"If equals to ``0`` and :c:member:`~PyConfig.configure_c_stdio` is non-zero, "
"disable buffering on the C streams stdout and stderr."
msgstr ""
"如果等於 ``0`` 並且 :c:member:`~PyConfig.configure_c_stdio` 為非零，則禁用 C "
"流 stdout 和 stderr 上的緩衝。"

#: ../../c-api/init_config.rst:600
#, fuzzy
msgid ""
"Set to ``0`` by the :option:`-u` command line option and the :envvar:"
"`PYTHONUNBUFFERED` environment variable."
msgstr ""
"通過 :option:`-u` 命令列選項和 :envvar:`PYTHONUNBUFFERED` 環境變數設定為 "
"``0``。"

#: ../../c-api/init_config.rst:603
#, fuzzy
msgid "stdin is always opened in buffered mode."
msgstr "stdin 始終以緩沖模式打開。"

#: ../../c-api/init_config.rst:605 ../../c-api/init_config.rst:638
#: ../../c-api/init_config.rst:1102 ../../c-api/init_config.rst:1219
msgid "Default: ``1``."
msgstr "預設值：\\ ``1``\\ 。"

#: ../../c-api/init_config.rst:609
#, fuzzy
msgid ""
"If equals to ``1``, issue a warning when comparing :class:`bytes` or :class:"
"`bytearray` with :class:`str`, or comparing :class:`bytes` with :class:`int`."
msgstr ""
"如果等於 ``1``，則在比較 :class:`bytes` 或 :class:`bytearray` 與 :class:"
"`str` 或比較 :class:`bytes` 與 :class:`int` 時發出警告."

#: ../../c-api/init_config.rst:613
#, fuzzy
msgid ""
"If equal or greater to ``2``, raise a :exc:`BytesWarning` exception in these "
"cases."
msgstr "如果等於或大於 ``2``，則在這些情況下引發 :exc:`BytesWarning` 例外。"

#: ../../c-api/init_config.rst:616
#, fuzzy
msgid "Incremented by the :option:`-b` command line option."
msgstr "由 :option:`-b` 命令列選項遞增。"

#: ../../c-api/init_config.rst:622
#, fuzzy
msgid ""
"If non-zero, emit a :exc:`EncodingWarning` warning when :class:`io."
"TextIOWrapper` uses its default encoding. See :ref:`io-encoding-warning` for "
"details."
msgstr ""
"如果非零，則在 io.TextIOWrapper 使用其預設編碼時發出 EncodingWarning 警告。有"
"關詳細資訊，請參閱 :ref:`io-encoding-warning`。"

#: ../../c-api/init_config.rst:631
#, fuzzy
msgid ""
"If equals to ``0``, disables the inclusion of the end line and column "
"mappings in code objects. Also disables traceback printing carets to "
"specific error locations."
msgstr ""
"如果等於 ``0``，則禁止在程式碼對像中包含結束行和列映射。還禁用追溯印出插入符"
"號到特定錯誤位置。"

#: ../../c-api/init_config.rst:635
#, fuzzy
msgid ""
"Set to ``0`` by the :envvar:`PYTHONNODEBUGRANGES` environment variable and "
"by the :option:`-X no_debug_ranges <-X>` command line option."
msgstr ""
"通過 PYTHONNODEBUGRANGES 環境變數和 :option:`-X no_debug_ranges <-X>` 命令列"
"選項設定為 ``0``。"

#: ../../c-api/init_config.rst:644
#, fuzzy
msgid ""
"Control the validation behavior of hash-based ``.pyc`` files: value of the :"
"option:`--check-hash-based-pycs` command line option."
msgstr ""
"控制基於散列的``.pyc`` 文件的驗證行為：:option:`--check-hash-based-pycs` 命令"
"行選項的值。"

#: ../../c-api/init_config.rst:647
#, fuzzy
msgid "Valid values:"
msgstr "有效值："

#: ../../c-api/init_config.rst:649
#, fuzzy
msgid ""
"``L\"always\"``: Hash the source file for invalidation regardless of value "
"of the 'check_source' flag."
msgstr ""
"``L\"always\"``：不管\\'check_source\\'旗標的值如何，散列無效的源文件。"

#: ../../c-api/init_config.rst:651
#, fuzzy
msgid "``L\"never\"``: Assume that hash-based pycs always are valid."
msgstr "``L\"never\"``：假設基於散列的 pycs 總是有效的。"

#: ../../c-api/init_config.rst:652
#, fuzzy
msgid ""
"``L\"default\"``: The 'check_source' flag in hash-based pycs determines "
"invalidation."
msgstr ""
"``L\"default\"``：基於散列的 pycs 中的 \\'check_source\\' 旗標決定失效。"

#: ../../c-api/init_config.rst:655
msgid "Default: ``L\"default\"``."
msgstr "預設：\\ ``L\"default\"``。"

#: ../../c-api/init_config.rst:657
#, fuzzy
msgid "See also :pep:`552` \"Deterministic pycs\"."
msgstr "另見 :pep:`552` “確定性 pycs”。"

#: ../../c-api/init_config.rst:661
#, fuzzy
msgid "If non-zero, configure C standard streams:"
msgstr "如果非零，則配置 C 標準流："

#: ../../c-api/init_config.rst:663
#, fuzzy
msgid ""
"On Windows, set the binary mode (``O_BINARY``) on stdin, stdout and stderr."
msgstr ""
"在 Windows 上，在 stdin、stdout 和 stderr 上設定二進位模式 (``O_BINARY``)。"

#: ../../c-api/init_config.rst:665
#, fuzzy
msgid ""
"If :c:member:`~PyConfig.buffered_stdio` equals zero, disable buffering of "
"stdin, stdout and stderr streams."
msgstr ""
"如果 :c:member:`~PyConfig.buffered_stdio` 等於零，則禁用標準輸入、標準輸出和"
"標準錯誤流的緩衝。"

#: ../../c-api/init_config.rst:667
#, fuzzy
msgid ""
"If :c:member:`~PyConfig.interactive` is non-zero, enable stream buffering on "
"stdin and stdout (only stdout on Windows)."
msgstr ""
"如果 :c:member:`~PyConfig.interactive` 非零，則在 stdin 和 stdout 上啟用流緩"
"衝（僅在 Windows 上為 stdout）。"

#: ../../c-api/init_config.rst:674
#, fuzzy
msgid "If non-zero, enable the :ref:`Python Development Mode <devmode>`."
msgstr "如果非零，則啟用 :ref:`Python 開發模式 <devmode>`。"

#: ../../c-api/init_config.rst:676
#, fuzzy
msgid ""
"Set to ``1`` by the :option:`-X dev <-X>` option and the :envvar:"
"`PYTHONDEVMODE` environment variable."
msgstr ""
"通過 :option:`-X dev <-X>` 選項和 :envvar:`PYTHONDEVMODE` 環境變數設定為"
"``1``。"

#: ../../c-api/init_config.rst:683
#, fuzzy
msgid "Dump Python references?"
msgstr "轉儲 Python 引用？"

#: ../../c-api/init_config.rst:685
#, fuzzy
msgid "If non-zero, dump all objects which are still alive at exit."
msgstr "如果非零，則轉儲在退出時仍然存在的所有物件。"

#: ../../c-api/init_config.rst:687
#, fuzzy
msgid "Set to ``1`` by the :envvar:`PYTHONDUMPREFS` environment variable."
msgstr "通過 PYTHONDUMPREFS 環境變數設定為 ``1``。"

#: ../../c-api/init_config.rst:689
#, fuzzy
msgid ""
"Need a special build of Python with the ``Py_TRACE_REFS`` macro defined: see "
"the :option:`configure --with-trace-refs option <--with-trace-refs>`."
msgstr ""
"需要一個特殊的 Python 構建，其中定義了“Py_TRACE_REFS”巨集：請參閱 :option:“配"
"置 --with-trace-refs 選項 <--with-trace-refs>”。"

#: ../../c-api/init_config.rst:696
#, fuzzy
msgid ""
"The site-specific directory prefix where the platform-dependent Python files "
"are installed: :data:`sys.exec_prefix`."
msgstr ""
"安裝依賴於平台的 Python 文件的特定於站點的目錄前綴：:data:`sys.exec_prefix`。"

#: ../../c-api/init_config.rst:705
#, fuzzy
msgid ""
"The absolute path of the executable binary for the Python interpreter: :data:"
"`sys.executable`."
msgstr "Python 直譯器的可執行二進位文件的絕對路徑：:data:`sys.executable`。"

#: ../../c-api/init_config.rst:714
#, fuzzy
msgid "Enable faulthandler?"
msgstr "啟用故障處理程式？"

#: ../../c-api/init_config.rst:716
#, fuzzy
msgid "If non-zero, call :func:`faulthandler.enable` at startup."
msgstr "如果非零，則在啟動時呼叫 :func:`faulthandler.enable`。"

#: ../../c-api/init_config.rst:718
#, fuzzy
msgid ""
"Set to ``1`` by :option:`-X faulthandler <-X>` and the :envvar:"
"`PYTHONFAULTHANDLER` environment variable."
msgstr ""
"通過 :option:`-X faulthandler <-X>` 和 :envvar:`PYTHONFAULTHANDLER` 環境變數"
"設定為 ``1``。"

#: ../../c-api/init_config.rst:725
#, fuzzy
msgid ""
":term:`Filesystem encoding <filesystem encoding and error handler>`: :func:"
"`sys.getfilesystemencoding`."
msgstr ""
":term:`文件系統編碼 <文件系統編碼和錯誤處理程式>`::func:`sys."
"getfilesystemencoding`。"

#: ../../c-api/init_config.rst:728
#, fuzzy
msgid "On macOS, Android and VxWorks: use ``\"utf-8\"`` by default."
msgstr "在 macOS、Android 和 VxWorks 上：預設使用 ``utf-8``。"

#: ../../c-api/init_config.rst:730
#, fuzzy
msgid ""
"On Windows: use ``\"utf-8\"`` by default, or ``\"mbcs\"`` if :c:member:"
"`~PyPreConfig.legacy_windows_fs_encoding` of :c:type:`PyPreConfig` is non-"
"zero."
msgstr ""
"在 Windows 上：預設使用 ``\"utf-8\"``，或者如果 :c:member:`~PyPreConfig."
"legacy_windows_fs_encoding` 的 :c:type:`PyPreConfig` 是非零的，則使用 "
"``\"mbcs\"``。"

#: ../../c-api/init_config.rst:734
#, fuzzy
msgid "Default encoding on other platforms:"
msgstr "其他平台預設編碼："

#: ../../c-api/init_config.rst:736
#, fuzzy
msgid "``\"utf-8\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero."
msgstr "``\"utf-8\"`` 如果 :c:member:`PyPreConfig.utf8_mode` 是非零的。"

#: ../../c-api/init_config.rst:737
#, fuzzy
msgid ""
"``\"ascii\"`` if Python detects that ``nl_langinfo(CODESET)`` announces the "
"ASCII encoding, whereas the ``mbstowcs()`` function decodes from a different "
"encoding (usually Latin1)."
msgstr ""
"``\"ascii\"`` 如果 Python 檢測到 ``nl_langinfo(CODESET)`` 宣布 ASCII 編碼，"
"而 ``mbstowcs()`` 函式從不同的編碼（通常是 Latin1）解碼。"

#: ../../c-api/init_config.rst:740
#, fuzzy
msgid "``\"utf-8\"`` if ``nl_langinfo(CODESET)`` returns an empty string."
msgstr "``\"utf-8\"`` 如果``nl_langinfo(CODESET)`` 回傳空字串。"

#: ../../c-api/init_config.rst:741
#, fuzzy
msgid ""
"Otherwise, use the :term:`locale encoding`: ``nl_langinfo(CODESET)`` result."
msgstr "否則，使用 :term:`locale encoding`: ``nl_langinfo(CODESET)`` 結果。"

#: ../../c-api/init_config.rst:744
#, fuzzy
msgid ""
"At Python startup, the encoding name is normalized to the Python codec name. "
"For example, ``\"ANSI_X3.4-1968\"`` is replaced with ``\"ascii\"``."
msgstr ""
"在 Python 啟動時，編碼名稱被規範化為 Python 編解碼器名稱。例如，"
"``\"ANSI_X3.4-1968\"`` 被替換為 ``\"ascii\"``。"

#: ../../c-api/init_config.rst:747
#, fuzzy
msgid "See also the :c:member:`~PyConfig.filesystem_errors` member."
msgstr "另見 :c:member:`~PyConfig.filesystem_errors` 成員。"

#: ../../c-api/init_config.rst:751
#, fuzzy
msgid ""
":term:`Filesystem error handler <filesystem encoding and error handler>`: :"
"func:`sys.getfilesystemencodeerrors`."
msgstr ""
":term:`文件系統錯誤處理程式 <文件系統編碼和錯誤處理程式>`::func:`sys."
"getfilesystemencodeerrors`。"

#: ../../c-api/init_config.rst:754
#, fuzzy
msgid ""
"On Windows: use ``\"surrogatepass\"`` by default, or ``\"replace\"``  if :c:"
"member:`~PyPreConfig.legacy_windows_fs_encoding` of :c:type:`PyPreConfig` is "
"non-zero."
msgstr ""
"在 Windows 上：預設使用 ``\"surrogatepass\"``，或者如果 :c:member:"
"`~PyPreConfig.legacy_windows_fs_encoding` 的 :c:type:`PyPreConfig` 為非零，則"
"使用 ``\"replace\"``。"

#: ../../c-api/init_config.rst:758
#, fuzzy
msgid "On other platforms: use ``\"surrogateescape\"`` by default."
msgstr "在其他平台上：預設使用``\"surrogateescape\"``。"

#: ../../c-api/init_config.rst:760
#, fuzzy
msgid "Supported error handlers:"
msgstr "支援的錯誤處理程式："

#: ../../c-api/init_config.rst:762
msgid "``\"strict\"``"
msgstr "``\"strict\"``"

#: ../../c-api/init_config.rst:763
msgid "``\"surrogateescape\"``"
msgstr "``\"surrogateescape\"``"

#: ../../c-api/init_config.rst:764
#, fuzzy
msgid "``\"surrogatepass\"`` (only supported with the UTF-8 encoding)"
msgstr "``\"surrogatepass\"``（僅支援 UTF-8 編碼）"

#: ../../c-api/init_config.rst:766
#, fuzzy
msgid "See also the :c:member:`~PyConfig.filesystem_encoding` member."
msgstr "另見 :c:member:`~PyConfig.filesystem_encoding` 成員。"

#: ../../c-api/init_config.rst:771
#, fuzzy
msgid "Randomized hash function seed."
msgstr "隨機散列函式種子。"

#: ../../c-api/init_config.rst:773
#, fuzzy
msgid ""
"If :c:member:`~PyConfig.use_hash_seed` is zero, a seed is chosen randomly at "
"Python startup, and :c:member:`~PyConfig.hash_seed` is ignored."
msgstr ""
"如果 :c:member:`~PyConfig.use_hash_seed` 為零，則在 Python 啟動時隨機選擇種"
"子，並忽略 :c:member:`~PyConfig.hash_seed`。"

#: ../../c-api/init_config.rst:776
#, fuzzy
msgid "Set by the :envvar:`PYTHONHASHSEED` environment variable."
msgstr "由 :envvar:`PYTHONHASHSEED` 環境變數設定。"

#: ../../c-api/init_config.rst:778
#, fuzzy
msgid ""
"Default *use_hash_seed* value: ``-1`` in Python mode, ``0`` in isolated mode."
msgstr "預設 *use_hash_seed* 值：Python 模式下為 ``-1``，隔離模式下為 ``0``。"

#: ../../c-api/init_config.rst:783
#, fuzzy
msgid "Python home directory."
msgstr "Python 主目錄。"

#: ../../c-api/init_config.rst:785
#, fuzzy
msgid ""
"If :c:func:`Py_SetPythonHome` has been called, use its argument if it is not "
"``NULL``."
msgstr ""
"如果 :c:func:`Py_SetPythonHome` 已被呼叫，如果它不是 ``NULL``，則使用它的參"
"數。"

#: ../../c-api/init_config.rst:788
#, fuzzy
msgid "Set by the :envvar:`PYTHONHOME` environment variable."
msgstr "由 :envvar:`PYTHONHOME` 環境變數設定。"

#: ../../c-api/init_config.rst:792 ../../c-api/init_config.rst:888
#: ../../c-api/init_config.rst:908 ../../c-api/init_config.rst:994
#: ../../c-api/init_config.rst:1024
#, fuzzy
msgid "Part of the :ref:`Python Path Configuration <init-path-config>` input."
msgstr ":ref:`Python 路徑配置 <init-path-config>` 輸入的一部分。"

#: ../../c-api/init_config.rst:796
#, fuzzy
msgid "If non-zero, profile import time."
msgstr "如果非零，則配置文件導入時間。"

#: ../../c-api/init_config.rst:798
#, fuzzy
msgid ""
"Set the ``1`` by the :option:`-X importtime <-X>` option and the :envvar:"
"`PYTHONPROFILEIMPORTTIME` environment variable."
msgstr ""
"通過 :option:`-X importtime <-X>` 選項和 :envvar:`PYTHONPROFILEIMPORTTIME` 環"
"境變數設定 ``1``。"

#: ../../c-api/init_config.rst:805
#, fuzzy
msgid "Enter interactive mode after executing a script or a command."
msgstr "執行腳本或命令後進入交互模式。"

#: ../../c-api/init_config.rst:807
#, fuzzy
msgid ""
"If greater than ``0``, enable inspect: when a script is passed as first "
"argument or the -c option is used, enter interactive mode after executing "
"the script or the command, even when :data:`sys.stdin` does not appear to be "
"a terminal."
msgstr ""
"如果大於 ``0``，啟用檢查：當腳本作為第一個參數傳遞或使用 -c 選項時，在執行腳"
"本或命令後進入交互模式，即使 :data:`sys.stdin` 沒有似乎不是終端。"

#: ../../c-api/init_config.rst:812
#, fuzzy
msgid ""
"Incremented by the :option:`-i` command line option. Set to ``1`` if the :"
"envvar:`PYTHONINSPECT` environment variable is non-empty."
msgstr ""
"由 :option:`-i` 命令列選項增加。如果 PYTHONINSPECT 環境變數非空，則設定為 1。"

#: ../../c-api/init_config.rst:819
#, fuzzy
msgid "Install Python signal handlers?"
msgstr "安裝 Python 信號處理程式？"

#: ../../c-api/init_config.rst:821 ../../c-api/init_config.rst:971
#: ../../c-api/init_config.rst:992 ../../c-api/init_config.rst:1171
#, fuzzy
msgid "Default: ``1`` in Python mode, ``0`` in isolated mode."
msgstr "預設值：Python 模式下為 ``1``，隔離模式下為 ``0``。"

#: ../../c-api/init_config.rst:825
#, fuzzy
msgid "If greater than ``0``, enable the interactive mode (REPL)."
msgstr "如果大於 ``0``，則啟用交互模式（REPL）。"

#: ../../c-api/init_config.rst:827
#, fuzzy
msgid "Incremented by the :option:`-i` command line option."
msgstr "由 :option:`-i` 命令列選項增加。"

#: ../../c-api/init_config.rst:833
#, fuzzy
msgid "If greater than ``0``, enable isolated mode:"
msgstr "如果大於 ``0``，則啟用隔離模式："

#: ../../c-api/init_config.rst:835
#, fuzzy
msgid ""
"Set :c:member:`~PyConfig.safe_path` to ``1``: don't prepend a potentially "
"unsafe path to :data:`sys.path` at Python startup."
msgstr ""
"將 :c:member:`~PyConfig.safe_path` 設定為 ``1``：不要在 Python 啟動時將可能不"
"安全的路徑新增到 :data:`sys.path`。"

#: ../../c-api/init_config.rst:838 ../../c-api/init_config.rst:1469
msgid "Set :c:member:`~PyConfig.use_environment` to ``0``."
msgstr "將 :c:member:`~PyConfig.use_environment` 設定為 ``0``。"

#: ../../c-api/init_config.rst:839
#, fuzzy
msgid ""
"Set :c:member:`~PyConfig.user_site_directory` to ``0``: don't add the user "
"site directory to :data:`sys.path`."
msgstr ""
"將 :c:member:`~PyConfig.user_site_directory` 設定為 ``0``：不要將使用者站點目"
"錄新增到 :data:`sys.path`。"

#: ../../c-api/init_config.rst:841
#, fuzzy
msgid ""
"Python REPL doesn't import :mod:`readline` nor enable default readline "
"configuration on interactive prompts."
msgstr ""
"Python REPL 不會導入 :mod:`readline` 也不會在交互式提示中啟用預設的 readline "
"配置。"

#: ../../c-api/init_config.rst:844
#, fuzzy
msgid "Set to ``1`` by the :option:`-I` command line option."
msgstr "通過 :option:`-I` 命令列選項設定為 ``1``。"

#: ../../c-api/init_config.rst:848
msgid "See also :c:member:`PyPreConfig.isolated`."
msgstr "也請見 :c:member:`PyPreConfig.isolated`\\ 。"

#: ../../c-api/init_config.rst:852
#, fuzzy
msgid ""
"If non-zero, use :class:`io.FileIO` instead of :class:`io.WindowsConsoleIO` "
"for :data:`sys.stdin`, :data:`sys.stdout` and :data:`sys.stderr`."
msgstr ""
"如果非零，則使用 :class:`io.FileIO` 而不是 :class:`io.WindowsConsoleIO` 用"
"於 :data:`sys.stdin`、:data:`sys.stdout` 和 :data:`sys.stderr `。"

#: ../../c-api/init_config.rst:856
#, fuzzy
msgid ""
"Set to ``1`` if the :envvar:`PYTHONLEGACYWINDOWSSTDIO` environment variable "
"is set to a non-empty string."
msgstr "如果 PYTHONLEGACYWINDOWSSTDIO 環境變數設定為非空字串，則設定為 1。"

#: ../../c-api/init_config.rst:864
#, fuzzy
msgid "See also the :pep:`528` (Change Windows console encoding to UTF-8)."
msgstr "另請參閱 :pep:`528`（將 Windows 控制台編碼更改為 UTF-8）。"

#: ../../c-api/init_config.rst:868
#, fuzzy
msgid ""
"If non-zero, dump statistics on :ref:`Python pymalloc memory allocator "
"<pymalloc>` at exit."
msgstr ""
"如果非零，則在退出時轉儲關於 Python pymalloc 記憶體分配器 <pymalloc> 的統計資"
"訊。"

#: ../../c-api/init_config.rst:871
#, fuzzy
msgid "Set to ``1`` by the :envvar:`PYTHONMALLOCSTATS` environment variable."
msgstr "由 :envvar:`PYTHONMALLOCSTATS` 環境變數設定為 ``1``。"

#: ../../c-api/init_config.rst:873
#, fuzzy
msgid ""
"The option is ignored if Python is :option:`configured using the --without-"
"pymalloc option <--without-pymalloc>`."
msgstr ""
"如果 Python 是使用 --without-pymalloc 選項 <--without-pymalloc> 配置的 :"
"option:`則忽略該選項。"

#: ../../c-api/init_config.rst:880
#, fuzzy
msgid "Platform library directory name: :data:`sys.platlibdir`."
msgstr "平台庫目錄名稱：:data:`sys.platlibdir`。"

#: ../../c-api/init_config.rst:882
#, fuzzy
msgid "Set by the :envvar:`PYTHONPLATLIBDIR` environment variable."
msgstr "由 PYTHONPLATLIBDIR 環境變數設定。"

#: ../../c-api/init_config.rst:884
#, fuzzy
msgid ""
"Default: value of the ``PLATLIBDIR`` macro which is set by the :option:"
"`configure --with-platlibdir option <--with-platlibdir>` (default: "
"``\"lib\"``, or ``\"DLLs\"`` on Windows)."
msgstr ""
"預設值：由 :option:`configure --with-platlibdir 選項 <--with-platlibdir>` 設"
"定的 ``PLATLIBDIR`` 巨集的值（預設值：``\"lib\"`` 或 ``\" DLL”`` 在 Windows "
"上）。"

#: ../../c-api/init_config.rst:892
#, fuzzy
msgid ""
"This macro is now used on Windows to locate the standard library extension "
"modules, typically under ``DLLs``. However, for compatibility, note that "
"this value is ignored for any non-standard layouts, including in-tree builds "
"and virtual environments."
msgstr ""
"這個巨集現在在 Windows 上用於定位標準庫擴充模組，通常在 ``DLLs``下。但是，為"
"了相容性，請注意任何非標準佈局（包括樹內構建和虛擬環境）都會忽略此值。"

#: ../../c-api/init_config.rst:901
#, fuzzy
msgid ""
"Module search paths (:data:`sys.path`) as a string separated by ``DELIM`` (:"
"data:`os.path.pathsep`)."
msgstr ""
"模組搜索路徑 (:data:`sys.path`) 作為由 ``DELIM`` (:data:`os.path.pathsep`) 分"
"隔的字串。"

#: ../../c-api/init_config.rst:904
#, fuzzy
msgid "Set by the :envvar:`PYTHONPATH` environment variable."
msgstr "由 :envvar:`PYTHONPATH` 環境變數設定。"

#: ../../c-api/init_config.rst:913
#, fuzzy
msgid "Module search paths: :data:`sys.path`."
msgstr "模組搜索路徑：:data:`sys.path`。"

#: ../../c-api/init_config.rst:915
#, fuzzy
msgid ""
"If :c:member:`~PyConfig.module_search_paths_set` is equal to ``0``, :c:func:"
"`Py_InitializeFromConfig` will replace :c:member:`~PyConfig."
"module_search_paths` and sets :c:member:`~PyConfig.module_search_paths_set` "
"to ``1``."
msgstr ""
"如果:c:member:`~PyConfig.module_search_paths_set` 等於``0``，:c:func:"
"`Py_InitializeFromConfig` 將替換:c:member:`~PyConfig.module_search_paths` 並"
"設定:c:member:` ~PyConfig.module_search_paths_set` 為 ``1``。"

#: ../../c-api/init_config.rst:920
#, fuzzy
msgid ""
"Default: empty list (``module_search_paths``) and ``0`` "
"(``module_search_paths_set``)."
msgstr ""
"預設值：空列表（``module_search_paths``）和``0``"
"（``module_search_paths_set``）。"

#: ../../c-api/init_config.rst:927
#, fuzzy
msgid "Compilation optimization level:"
msgstr "編譯最佳化級別："

#: ../../c-api/init_config.rst:929
#, fuzzy
msgid "``0``: Peephole optimizer, set ``__debug__`` to ``True``."
msgstr "``0``：窺孔最佳化器，將``__debug__``設定為``True``。"

#: ../../c-api/init_config.rst:930
#, fuzzy
msgid "``1``: Level 0, remove assertions, set ``__debug__`` to ``False``."
msgstr "``1``：級別 0，刪除斷言，將 ``__debug__`` 設定為 ``False``。"

#: ../../c-api/init_config.rst:931
#, fuzzy
msgid "``2``: Level 1, strip docstrings."
msgstr "``2``：級別 1，剝離文檔字串。"

#: ../../c-api/init_config.rst:933
#, fuzzy
msgid ""
"Incremented by the :option:`-O` command line option. Set to the :envvar:"
"`PYTHONOPTIMIZE` environment variable value."
msgstr ""
"由 :option:`-O` 命令列選項增加。設定為 :envvar:`PYTHONOPTIMIZE` 環境變數值。"

#: ../../c-api/init_config.rst:940
#, fuzzy
msgid ""
"The list of the original command line arguments passed to the Python "
"executable: :data:`sys.orig_argv`."
msgstr "傳遞給 Python 可執行文件的原始命令列參數列表：:data:`sys.orig_argv`。"

#: ../../c-api/init_config.rst:943
#, fuzzy
msgid ""
"If :c:member:`~PyConfig.orig_argv` list is empty and :c:member:`~PyConfig."
"argv` is not a list only containing an empty string, :c:func:`PyConfig_Read` "
"copies :c:member:`~PyConfig.argv` into :c:member:`~PyConfig.orig_argv` "
"before modifying :c:member:`~PyConfig.argv` (if :c:member:`~PyConfig."
"parse_argv` is non-zero)."
msgstr ""
"如果 :c:member:`~PyConfig.orig_argv` 列表為空並且 :c:member:`~PyConfig.argv` "
"不是僅包含空字串的列表，則 :c:func:`PyConfig_Read` 複製 :c:member :"
"`~PyConfig.argv` 到 :c:member:`~PyConfig.orig_argv` 之前修改 :c:member:"
"`~PyConfig.argv` （如果 :c:member:`~PyConfig.parse_argv` 是非零） ."

#: ../../c-api/init_config.rst:950
#, fuzzy
msgid ""
"See also the :c:member:`~PyConfig.argv` member and the :c:func:"
"`Py_GetArgcArgv` function."
msgstr "另見 :c:member:`~PyConfig.argv` 成員和 :c:func:`Py_GetArgcArgv` 函式。"

#: ../../c-api/init_config.rst:953 ../../c-api/init_config.rst:1206
#: ../../c-api/init_config.rst:1225
#, fuzzy
msgid "Default: empty list."
msgstr "預設值：空列表。"

#: ../../c-api/init_config.rst:959
#, fuzzy
msgid "Parse command line arguments?"
msgstr "剖析命令列參數？"

#: ../../c-api/init_config.rst:961
#, fuzzy
msgid ""
"If equals to ``1``, parse :c:member:`~PyConfig.argv` the same way the "
"regular Python parses :ref:`command line arguments <using-on-cmdline>`, and "
"strip Python arguments from :c:member:`~PyConfig.argv`."
msgstr ""
"如果等於 ``1``，剖析 :c:member:`~PyConfig.argv` 與常規 Python 剖析 :ref:`命令"
"行參數 <using-on-cmdline>` 的方式相同，並從中刪除 Python 參數： c:成員:"
"`~PyConfig.argv`。"

#: ../../c-api/init_config.rst:973
#, fuzzy
msgid ""
"The :c:member:`PyConfig.argv` arguments are now only parsed if :c:member:"
"`PyConfig.parse_argv` equals to ``1``."
msgstr ""
":c:member:`PyConfig.argv` 參數現在僅在 :c:member:`PyConfig.parse_argv` 等於 "
"``1`` 時才被剖析。"

#: ../../c-api/init_config.rst:979
#, fuzzy
msgid ""
"Parser debug mode. If greater than ``0``, turn on parser debugging output "
"(for expert only, depending on compilation options)."
msgstr ""
"剖析器除錯模式。如果大於 ``0``，則打開剖析器除錯輸出（僅供專家使用，具體取決"
"於編譯選項）。"

#: ../../c-api/init_config.rst:982
#, fuzzy
msgid ""
"Incremented by the :option:`-d` command line option. Set to the :envvar:"
"`PYTHONDEBUG` environment variable value."
msgstr ""
"由 :option:`-d` 命令列選項遞增。設定為 :envvar:`PYTHONDEBUG` 環境變數值。"

#: ../../c-api/init_config.rst:989
#, fuzzy
msgid ""
"If non-zero, calculation of path configuration is allowed to log warnings "
"into ``stderr``. If equals to ``0``, suppress these warnings."
msgstr ""
"如果非零，則允許計算路徑配置以將警告記錄到 ``stderr``中。如果等於 ``0``，則抑"
"制這些警告。"

#: ../../c-api/init_config.rst:996
#, fuzzy
msgid "Now also applies on Windows."
msgstr "現在也適用於 Windows。"

#: ../../c-api/init_config.rst:1001
#, fuzzy
msgid ""
"The site-specific directory prefix where the platform independent Python "
"files are installed: :data:`sys.prefix`."
msgstr "安裝平台獨立 Python 文件的特定於站點的目錄前綴：:data:`sys.prefix`。"

#: ../../c-api/init_config.rst:1010
#, fuzzy
msgid ""
"Program name used to initialize :c:member:`~PyConfig.executable` and in "
"early error messages during Python initialization."
msgstr ""
"用於初始化 :c:member:`~PyConfig.executable` 和 Python 初始化期間早期錯誤消息"
"的程式名稱。"

#: ../../c-api/init_config.rst:1013
#, fuzzy
msgid "If :func:`Py_SetProgramName` has been called, use its argument."
msgstr "如果 :func:`Py_SetProgramName` 被呼叫，使用它的參數。"

#: ../../c-api/init_config.rst:1014
#, fuzzy
msgid "On macOS, use :envvar:`PYTHONEXECUTABLE` environment variable if set."
msgstr "在 macOS 上，使用 PYTHONEXECUTABLE 環境變數（如果已設定）。"

#: ../../c-api/init_config.rst:1015
#, fuzzy
msgid ""
"If the ``WITH_NEXT_FRAMEWORK`` macro is defined, use :envvar:"
"`__PYVENV_LAUNCHER__` environment variable if set."
msgstr ""
"如果定義了 ``WITH_NEXT_FRAMEWORK`` 巨集，則使用 :envvar:"
"`__PYVENV_LAUNCHER__` 環境變數（如果已設定）。"

#: ../../c-api/init_config.rst:1017
#, fuzzy
msgid ""
"Use ``argv[0]`` of :c:member:`~PyConfig.argv` if available and non-empty."
msgstr "如果可用且非空，請使用 :c:member:`~PyConfig.argv` 的 ``argv[0]``。"

#: ../../c-api/init_config.rst:1019
#, fuzzy
msgid ""
"Otherwise, use ``L\"python\"`` on Windows, or ``L\"python3\"`` on other "
"platforms."
msgstr ""
"否則，在 Windows 上使用 ``L\"python\"``，或者在其他平台上使用 "
"``L\"python3\"``。"

#: ../../c-api/init_config.rst:1028
#, fuzzy
msgid ""
"Directory where cached ``.pyc`` files are written: :data:`sys."
"pycache_prefix`."
msgstr "寫入快取 ``.pyc`` 文件的目錄：:data:`sys.pycache_prefix`。"

#: ../../c-api/init_config.rst:1031
#, fuzzy
msgid ""
"Set by the :option:`-X pycache_prefix=PATH <-X>` command line option and "
"the :envvar:`PYTHONPYCACHEPREFIX` environment variable."
msgstr ""
"由 :option:`-X pycache_prefix=PATH <-X>` 命令列選項和 :envvar:"
"`PYTHONPYCACHEPREFIX` 環境變數設定。"

#: ../../c-api/init_config.rst:1034
#, fuzzy
msgid "If ``NULL``, :data:`sys.pycache_prefix` is set to ``None``."
msgstr "如果 ``NULL``，則 :data:`sys.pycache_prefix` 設定為 ``None``。"

#: ../../c-api/init_config.rst:1040
#, fuzzy
msgid ""
"Quiet mode. If greater than ``0``, don't display the copyright and version "
"at Python startup in interactive mode."
msgstr ""
"靜音模式。如果大於 ``0``，則在 Python 啟動時以交互方式不顯示版權和版本。"

#: ../../c-api/init_config.rst:1043
#, fuzzy
msgid "Incremented by the :option:`-q` command line option."
msgstr "由 :option:`-q` 命令列選項增加。"

#: ../../c-api/init_config.rst:1049
#, fuzzy
msgid "Value of the :option:`-c` command line option."
msgstr ":option:`-c` 命令列選項的值。"

#: ../../c-api/init_config.rst:1051 ../../c-api/init_config.rst:1072
#, fuzzy
msgid "Used by :c:func:`Py_RunMain`."
msgstr "由 :c:func:`Py_RunMain` 使用。"

#: ../../c-api/init_config.rst:1057
#, fuzzy
msgid ""
"Filename passed on the command line: trailing command line argument without :"
"option:`-c` or :option:`-m`. It is used by the :c:func:`Py_RunMain` function."
msgstr ""
"在命令列上傳遞的文件名：不帶 :option:`-c` 或 :option:`-m` 的尾隨命令列參數。"
"它由 :c:func:`Py_RunMain` 函式使用。"

#: ../../c-api/init_config.rst:1061
#, fuzzy
msgid ""
"For example, it is set to ``script.py`` by the ``python3 script.py arg`` "
"command line."
msgstr "例如，它由 ``python3 script.py arg`` 命令列設定為 ``script.py``。"

#: ../../c-api/init_config.rst:1064
msgid "See also the :c:member:`PyConfig.skip_source_first_line` option."
msgstr "也請見 :c:member:`PyConfig.skip_source_first_line` 選項。"

#: ../../c-api/init_config.rst:1070
#, fuzzy
msgid "Value of the :option:`-m` command line option."
msgstr ":option:`-m` 命令列選項的值。"

#: ../../c-api/init_config.rst:1078
#, fuzzy
msgid "Show total reference count at exit?"
msgstr "在退出時顯示總引用計數？"

#: ../../c-api/init_config.rst:1080
#, fuzzy
msgid "Set to ``1`` by :option:`-X showrefcount <-X>` command line option."
msgstr "通過 :option:`-X showrefcount <-X>` 命令列選項設定為 ``1``。"

#: ../../c-api/init_config.rst:1082
#, fuzzy
msgid ""
"Need a :ref:`debug build of Python <debug-build>` (the ``Py_REF_DEBUG`` "
"macro must be defined)."
msgstr ""
"需要一個 :ref:`Python 的除錯構建 <debug-build>`（必須定義 ``Py_REF_DEBUG`` 巨"
"集）。"

#: ../../c-api/init_config.rst:1089
#, fuzzy
msgid "Import the :mod:`site` module at startup?"
msgstr "在啟動時導入 :mod:`site` 模組？"

#: ../../c-api/init_config.rst:1091
#, fuzzy
msgid ""
"If equal to zero, disable the import of the module site and the site-"
"dependent manipulations of :data:`sys.path` that it entails."
msgstr ""
"如果等於零，則禁用模組站點的導入以及它需要的 :data:`sys.path` 的站點相關操"
"作。"

#: ../../c-api/init_config.rst:1094
#, fuzzy
msgid ""
"Also disable these manipulations if the :mod:`site` module is explicitly "
"imported later (call :func:`site.main` if you want them to be triggered)."
msgstr ""
"如果稍後顯式導入 :mod:`site` 模組，也禁用這些操作（如果您希望觸發它們，請呼"
"叫 :func:`site.main`）。"

#: ../../c-api/init_config.rst:1097
#, fuzzy
msgid "Set to ``0`` by the :option:`-S` command line option."
msgstr "通過 :option:`-S` 命令列選項設定為 ``0``。"

#: ../../c-api/init_config.rst:1099
#, fuzzy
msgid ""
":data:`sys.flags.no_site` is set to the inverted value of :c:member:"
"`~PyConfig.site_import`."
msgstr ""
":data:`sys.flags.no_site` 設定為 :c:member:`~PyConfig.site_import` 的倒置值。"

#: ../../c-api/init_config.rst:1106
#, fuzzy
msgid ""
"If non-zero, skip the first line of the :c:member:`PyConfig.run_filename` "
"source."
msgstr "如果非零，則跳過 :c:member:`PyConfig.run_filename` 源程式碼的第一行。"

#: ../../c-api/init_config.rst:1109
#, fuzzy
msgid ""
"It allows the usage of non-Unix forms of ``#!cmd``. This is intended for a "
"DOS specific hack only."
msgstr "它允許使用非 Unix 形式的 `#!cmd``。這僅適用於特定於 DOS 的 hack。"

#: ../../c-api/init_config.rst:1112
#, fuzzy
msgid "Set to ``1`` by the :option:`-x` command line option."
msgstr "通過 :option:`-x` 命令列選項設定為 ``1``。"

#: ../../c-api/init_config.rst:1119
#, fuzzy
msgid ""
"Encoding and encoding errors of :data:`sys.stdin`, :data:`sys.stdout` and :"
"data:`sys.stderr` (but :data:`sys.stderr` always uses "
"``\"backslashreplace\"`` error handler)."
msgstr ""
":data:`sys.stdin`、:data:`sys.stdout` 和 :data:`sys.stderr` 的編碼和編碼錯誤"
"（但 :data:`sys.stderr` 總是使用``\"backslashreplace\"``錯誤處理程式）。"

#: ../../c-api/init_config.rst:1123
#, fuzzy
msgid ""
"If :c:func:`Py_SetStandardStreamEncoding` has been called, use its *error* "
"and *errors* arguments if they are not ``NULL``."
msgstr ""
"如果 :c:func:`Py_SetStandardStreamEncoding` 已被呼叫，則使用其 *error* 和 "
"*errors* 參數（如果它們不是 ``NULL``）。"

#: ../../c-api/init_config.rst:1126
#, fuzzy
msgid ""
"Use the :envvar:`PYTHONIOENCODING` environment variable if it is non-empty."
msgstr "如果 PYTHONIOENCODING 環境變數非空，請使用它。"

#: ../../c-api/init_config.rst:1129
#, fuzzy
msgid "Default encoding:"
msgstr "預設編碼："

#: ../../c-api/init_config.rst:1131
#, fuzzy
msgid "``\"UTF-8\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero."
msgstr "``\"UTF-8\"`` 如果 :c:member:`PyPreConfig.utf8_mode` 為非零。"

#: ../../c-api/init_config.rst:1132
#, fuzzy
msgid "Otherwise, use the :term:`locale encoding`."
msgstr "否則，使用 :term:`locale encoding`。"

#: ../../c-api/init_config.rst:1134
#, fuzzy
msgid "Default error handler:"
msgstr "預設錯誤處理程式："

#: ../../c-api/init_config.rst:1136
#, fuzzy
msgid "On Windows: use ``\"surrogateescape\"``."
msgstr "在 Windows 上：使用 ``\"surrogateescape\"``。"

#: ../../c-api/init_config.rst:1137
#, fuzzy
msgid ""
"``\"surrogateescape\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero, or "
"if the LC_CTYPE locale is \"C\" or \"POSIX\"."
msgstr ""
"``\"surrogateescape\"`` 如果:c:member:`PyPreConfig.utf8_mode` 為非零，或者如"
"果 LC_CTYPE 區域設定為 ``C``或 ``POSIX``。"

#: ../../c-api/init_config.rst:1139
#, fuzzy
msgid "``\"strict\"`` otherwise."
msgstr "``\"嚴格\"`` 否則。"

#: ../../c-api/init_config.rst:1143
#, fuzzy
msgid "Enable tracemalloc?"
msgstr "啟用tracemalloc？"

#: ../../c-api/init_config.rst:1145
#, fuzzy
msgid "If non-zero, call :func:`tracemalloc.start` at startup."
msgstr "如果非零，則在啟動時呼叫 :func:`tracemalloc.start`。"

#: ../../c-api/init_config.rst:1147
#, fuzzy
msgid ""
"Set by :option:`-X tracemalloc=N <-X>` command line option and by the :"
"envvar:`PYTHONTRACEMALLOC` environment variable."
msgstr ""
"由 :option:`-X tracemalloc=N <-X>` 命令列選項和 :envvar:`PYTHONTRACEMALLOC` "
"環境變數設定。"

#: ../../c-api/init_config.rst:1154
#, fuzzy
msgid "Use :ref:`environment variables <using-on-envvars>`?"
msgstr "使用 :ref:`環境變數 <using-on-envvars>`?"

#: ../../c-api/init_config.rst:1156
#, fuzzy
msgid ""
"If equals to zero, ignore the :ref:`environment variables <using-on-"
"envvars>`."
msgstr "如果等於零，則忽略 :ref:`環境變數 <using-on-envvars>`。"

#: ../../c-api/init_config.rst:1159
#, fuzzy
msgid "Set to ``0`` by the :option:`-E` environment variable."
msgstr "通過 :option:`-E` 環境變數設定為 ``0``。"

#: ../../c-api/init_config.rst:1165
#, fuzzy
msgid "If non-zero, add the user site directory to :data:`sys.path`."
msgstr "如果非零，則將使用者站點目錄新增到 :data:`sys.path`。"

#: ../../c-api/init_config.rst:1167
#, fuzzy
msgid "Set to ``0`` by the :option:`-s` and :option:`-I` command line options."
msgstr "通過 :option:`-s` 和 :option:`-I` 命令列選項設定為 ``0``。"

#: ../../c-api/init_config.rst:1169
#, fuzzy
msgid "Set to ``0`` by the :envvar:`PYTHONNOUSERSITE` environment variable."
msgstr "由 :envvar:`PYTHONNOUSERSITE` 環境變數設定為 ``0``。"

#: ../../c-api/init_config.rst:1175
#, fuzzy
msgid ""
"Verbose mode. If greater than ``0``, print a message each time a module is "
"imported, showing the place (filename or built-in module) from which it is "
"loaded."
msgstr ""
"詳細模式。如果大於 ``0``，則每次導入模組時印出一條消息，顯示加載它的位置（文"
"件名或內建模組）。"

#: ../../c-api/init_config.rst:1179
#, fuzzy
msgid ""
"If greater or equal to ``2``, print a message for each file that is checked "
"for when searching for a module. Also provides information on module cleanup "
"at exit."
msgstr ""
"如果大於或等於 ``2``，則為搜索模組時檢查的每個文件印出一條消息。還提供有關退"
"出時模組清理的資訊。"

#: ../../c-api/init_config.rst:1183
#, fuzzy
msgid "Incremented by the :option:`-v` command line option."
msgstr "由 :option:`-v` 命令列選項遞增。"

#: ../../c-api/init_config.rst:1185
#, fuzzy
msgid "Set to the :envvar:`PYTHONVERBOSE` environment variable value."
msgstr "設定為 :envvar:`PYTHONVERBOSE` 環境變數值。"

#: ../../c-api/init_config.rst:1191
#, fuzzy
msgid ""
"Options of the :mod:`warnings` module to build warnings filters, lowest to "
"highest priority: :data:`sys.warnoptions`."
msgstr ""
":mod:`warnings` 模組的選項，用於構建警告過濾器，優先級從低到高：:data:`sys."
"warnoptions`。"

#: ../../c-api/init_config.rst:1194
#, fuzzy
msgid ""
"The :mod:`warnings` module adds :data:`sys.warnoptions` in the reverse "
"order: the last :c:member:`PyConfig.warnoptions` item becomes the first item "
"of :data:`warnings.filters` which is checked first (highest priority)."
msgstr ""
":mod:`warnings` 模組以相反的順序新增 :data:`sys.warnoptions`：最後一個:c:"
"member:`PyConfig.warnoptions` 項成為 :data:`warnings.filters` 的第一項，即首"
"先檢查（最高優先級）。"

#: ../../c-api/init_config.rst:1199
#, fuzzy
msgid ""
"The :option:`-W` command line options adds its value to :c:member:`~PyConfig."
"warnoptions`, it can be used multiple times."
msgstr ""
":option:`-W` 命令列選項將其值新增到 :c:member:`~PyConfig.warnoptions` 中，可"
"以多次使用。"

#: ../../c-api/init_config.rst:1202
#, fuzzy
msgid ""
"The :envvar:`PYTHONWARNINGS` environment variable can also be used to add "
"warning options. Multiple options can be specified, separated by commas (``,"
"``)."
msgstr ""
":envvar:`PYTHONWARNINGS` 環境變數也可用於新增警告選項。可以指定多個選項，以逗"
"號 (``,``) 分隔。"

#: ../../c-api/init_config.rst:1210
#, fuzzy
msgid ""
"If equal to ``0``, Python won't try to write ``.pyc`` files on the import of "
"source modules."
msgstr "如果等於 ``0``，Python 將不會嘗試在導入源模組時寫入 ``.pyc`` 文件。"

#: ../../c-api/init_config.rst:1213
#, fuzzy
msgid ""
"Set to ``0`` by the :option:`-B` command line option and the :envvar:"
"`PYTHONDONTWRITEBYTECODE` environment variable."
msgstr ""
"通過 :option:`-B` 命令列選項和 :envvar:`PYTHONDONTWRITEBYTECODE` 環境變數設定"
"為 ``0``。"

#: ../../c-api/init_config.rst:1216
#, fuzzy
msgid ""
":data:`sys.dont_write_bytecode` is initialized to the inverted value of :c:"
"member:`~PyConfig.write_bytecode`."
msgstr ""
":data:`sys.dont_write_bytecode` 被初始化為 :c:member:`~PyConfig."
"write_bytecode` 的反轉值。"

#: ../../c-api/init_config.rst:1223
#, fuzzy
msgid "Values of the :option:`-X` command line options: :data:`sys._xoptions`."
msgstr ":option:`-X` 命令列選項的值：:data:`sys._xoptions`。"

#: ../../c-api/init_config.rst:1227
#, fuzzy
msgid ""
"If :c:member:`~PyConfig.parse_argv` is non-zero, :c:member:`~PyConfig.argv` "
"arguments are parsed the same way the regular Python parses :ref:`command "
"line arguments <using-on-cmdline>`, and Python arguments are stripped from :"
"c:member:`~PyConfig.argv`."
msgstr ""
"如果 :c:member:`~PyConfig.parse_argv` 為非零，則 :c:member:`~PyConfig.argv` "
"參數的剖析方式與常規 Python 剖析 :ref:`命令列參數的方式相同 <using-on- "
"cmdline>`，Python 參數從 :c:member:`~PyConfig.argv` 中刪除。"

#: ../../c-api/init_config.rst:1232
#, fuzzy
msgid ""
"The :c:member:`~PyConfig.xoptions` options are parsed to set other options: "
"see the :option:`-X` command line option."
msgstr ""
"剖析 :c:member:`~PyConfig.xoptions` 選項以設定其他選項：請參閱 :option:`-X` "
"命令列選項。"

#: ../../c-api/init_config.rst:1237
#, fuzzy
msgid "The ``show_alloc_count`` field has been removed."
msgstr "``show_alloc_count`` 欄位已被刪除。"

#: ../../c-api/init_config.rst:1241
#, fuzzy
msgid "Initialization with PyConfig"
msgstr "使用 PyConfig 初始化"

#: ../../c-api/init_config.rst:1243
#, fuzzy
msgid "Function to initialize Python:"
msgstr "初始化Python的函式："

#: ../../c-api/init_config.rst:1247
#, fuzzy
msgid "Initialize Python from *config* configuration."
msgstr "從 *config* 配置初始化 Python。"

#: ../../c-api/init_config.rst:1252
#, fuzzy
msgid ""
"If :c:func:`PyImport_FrozenModules`, :c:func:`PyImport_AppendInittab` or :c:"
"func:`PyImport_ExtendInittab` are used, they must be set or called after "
"Python preinitialization and before the Python initialization. If Python is "
"initialized multiple times, :c:func:`PyImport_AppendInittab` or :c:func:"
"`PyImport_ExtendInittab` must be called before each Python initialization."
msgstr ""
"如果使用:c:func:`PyImport_FrozenModules`、:c:func:`PyImport_AppendInittab` "
"或:c:func:`PyImport_ExtendInittab`，則必須在 Python 預初始化之後和 Python 初"
"始化之前設定或呼叫它們。如果 Python 被多次初始化，則必須在每次 Python 初始化"
"之前呼叫 :c:func:`PyImport_AppendInittab` 或 :c:func:"
"`PyImport_ExtendInittab`。"

#: ../../c-api/init_config.rst:1259
#, fuzzy
msgid ""
"The current configuration (``PyConfig`` type) is stored in "
"``PyInterpreterState.config``."
msgstr "當前配置（``PyConfig`` 型別）儲存在``PyInterpreterState.config`` 中。"

#: ../../c-api/init_config.rst:1262
#, fuzzy
msgid "Example setting the program name::"
msgstr "設定程式名稱的示例::"

#: ../../c-api/init_config.rst:1290
#, fuzzy
msgid ""
"More complete example modifying the default configuration, read the "
"configuration, and then override some parameters. Note that since 3.11, many "
"parameters are not calculated until initialization, and so values cannot be "
"read from the configuration structure. Any values set before initialize is "
"called will be left unchanged by initialization::"
msgstr ""
"更完整的示例修改預設配置，讀取配置，然後覆蓋一些參數。請注意，從 3.11 開始，"
"許多參數在初始化之前不會計算，因此無法從配置結構中讀取值。在呼叫初始化之前設"
"定的任何值都將通過初始化保持不變："

#: ../../c-api/init_config.rst:1353
#, fuzzy
msgid "Isolated Configuration"
msgstr "隔離配置"

#: ../../c-api/init_config.rst:1355
#, fuzzy
msgid ""
":c:func:`PyPreConfig_InitIsolatedConfig` and :c:func:"
"`PyConfig_InitIsolatedConfig` functions create a configuration to isolate "
"Python from the system. For example, to embed Python into an application."
msgstr ""
":c:func:`PyPreConfig_InitIsolatedConfig` 和 :c:func:"
"`PyConfig_InitIsolatedConfig` 函式建立一個配置以將 Python 與系統隔離。例如，"
"將 Python 嵌入到應用程式中。"

#: ../../c-api/init_config.rst:1360
#, fuzzy
msgid ""
"This configuration ignores global configuration variables, environment "
"variables, command line arguments (:c:member:`PyConfig.argv` is not parsed) "
"and user site directory. The C standard streams (ex: ``stdout``) and the "
"LC_CTYPE locale are left unchanged. Signal handlers are not installed."
msgstr ""
"此配置忽略全局配置變數、環境變數、命令列參數（:c:member:`PyConfig.argv` 未剖"
"析）和使用者站點目錄。 C 標準流（例如：``stdout``）和 LC_CTYPE 語言環境保持不"
"變。未安裝信號處理程式。"

#: ../../c-api/init_config.rst:1365
#, fuzzy
msgid ""
"Configuration files are still used with this configuration to determine "
"paths that are unspecified. Ensure :c:member:`PyConfig.home` is specified to "
"avoid computing the default path configuration."
msgstr ""
"配置文件仍與此配置一起使用以確定未指定的路徑。確保指定 :c:member:`PyConfig."
"home` 以避免計算預設路徑配置。"

#: ../../c-api/init_config.rst:1373
#, fuzzy
msgid "Python Configuration"
msgstr "蟒蛇配置"

#: ../../c-api/init_config.rst:1375
#, fuzzy
msgid ""
":c:func:`PyPreConfig_InitPythonConfig` and :c:func:"
"`PyConfig_InitPythonConfig` functions create a configuration to build a "
"customized Python which behaves as the regular Python."
msgstr ""
":c:func:`PyPreConfig_InitPythonConfig` 和 :c:func:"
"`PyConfig_InitPythonConfig` 函式建立一個配置來構建一個自定義的 Python，其行為"
"與常規 Python 一樣。"

#: ../../c-api/init_config.rst:1379
#, fuzzy
msgid ""
"Environments variables and command line arguments are used to configure "
"Python, whereas global configuration variables are ignored."
msgstr "環境變數和命令列參數用於配置 Python，而忽略全局配置變數。"

#: ../../c-api/init_config.rst:1382
#, fuzzy
msgid ""
"This function enables C locale coercion (:pep:`538`) and :ref:`Python UTF-8 "
"Mode <utf8-mode>` (:pep:`540`) depending on the LC_CTYPE locale, :envvar:"
"`PYTHONUTF8` and :envvar:`PYTHONCOERCECLOCALE` environment variables."
msgstr ""
"此函式根據 LC_CTYPE 語言環境啟用 C 語言環境強制轉換 (:pep:`538`) 和 :ref:"
"`Python UTF-8 模式 <utf8-mode>` (:pep:`540`)，:envvar:`PYTHONUTF8`和 :envvar:"
"`PYTHONCOERCECLOCALE` 環境變數。"

#: ../../c-api/init_config.rst:1391
#, fuzzy
msgid "Python Path Configuration"
msgstr "Python 路徑配置"

#: ../../c-api/init_config.rst:1393
#, fuzzy
msgid ":c:type:`PyConfig` contains multiple fields for the path configuration:"
msgstr ":c:type:`PyConfig` 包含路徑配置的多個欄位："

#: ../../c-api/init_config.rst:1395
#, fuzzy
msgid "Path configuration inputs:"
msgstr "路徑配置輸入："

#: ../../c-api/init_config.rst:1397
msgid ":c:member:`PyConfig.home`"
msgstr ":c:member:`PyConfig.home`"

#: ../../c-api/init_config.rst:1398
msgid ":c:member:`PyConfig.platlibdir`"
msgstr ":c:member:`PyConfig.platlibdir`"

#: ../../c-api/init_config.rst:1399
msgid ":c:member:`PyConfig.pathconfig_warnings`"
msgstr ":c:member:`PyConfig.pathconfig_warnings`"

#: ../../c-api/init_config.rst:1400
msgid ":c:member:`PyConfig.program_name`"
msgstr ":c:member:`PyConfig.program_name`"

#: ../../c-api/init_config.rst:1401
msgid ":c:member:`PyConfig.pythonpath_env`"
msgstr ":c:member:`PyConfig.pythonpath_env`"

#: ../../c-api/init_config.rst:1402
#, fuzzy
msgid "current working directory: to get absolute paths"
msgstr "當前工作目錄：獲取絕對路徑"

#: ../../c-api/init_config.rst:1403
#, fuzzy
msgid ""
"``PATH`` environment variable to get the program full path (from :c:member:"
"`PyConfig.program_name`)"
msgstr ""
"``PATH`` 環境變數獲取程式完整路徑（來自 :c:member:`PyConfig.program_name`）"

#: ../../c-api/init_config.rst:1405
msgid "``__PYVENV_LAUNCHER__`` environment variable"
msgstr "``__PYVENV_LAUNCHER__`` 環境變數"

#: ../../c-api/init_config.rst:1406
#, fuzzy
msgid ""
"(Windows only) Application paths in the registry under "
"\"Software\\Python\\PythonCore\\X.Y\\PythonPath\" of HKEY_CURRENT_USER and "
"HKEY_LOCAL_MACHINE (where X.Y is the Python version)."
msgstr ""
"（僅限 Windows）註冊表中 HKEY_CURRENT_USER 和 HKEY_LOCAL_MACHINE "
"的“Software\\Python\\PythonCore\\X.Y\\PythonPath”下的應用程式路徑（其中 X.Y "
"是 Python 版本）。"

#: ../../c-api/init_config.rst:1410
#, fuzzy
msgid "Path configuration output fields:"
msgstr "路徑配置輸出欄位："

#: ../../c-api/init_config.rst:1412
msgid ":c:member:`PyConfig.base_exec_prefix`"
msgstr ":c:member:`PyConfig.base_exec_prefix`"

#: ../../c-api/init_config.rst:1413
msgid ":c:member:`PyConfig.base_executable`"
msgstr ":c:member:`PyConfig.base_executable`"

#: ../../c-api/init_config.rst:1414
msgid ":c:member:`PyConfig.base_prefix`"
msgstr ":c:member:`PyConfig.base_prefix`"

#: ../../c-api/init_config.rst:1415
msgid ":c:member:`PyConfig.exec_prefix`"
msgstr ":c:member:`PyConfig.exec_prefix`"

#: ../../c-api/init_config.rst:1416
msgid ":c:member:`PyConfig.executable`"
msgstr ":c:member:`PyConfig.executable`"

#: ../../c-api/init_config.rst:1417
msgid ""
":c:member:`PyConfig.module_search_paths_set`, :c:member:`PyConfig."
"module_search_paths`"
msgstr ""
":c:member:`PyConfig.module_search_paths_set`, :c:member:`PyConfig."
"module_search_paths`"

#: ../../c-api/init_config.rst:1419
msgid ":c:member:`PyConfig.prefix`"
msgstr ":c:member:`PyConfig.prefix`"

#: ../../c-api/init_config.rst:1421
#, fuzzy
msgid ""
"If at least one \"output field\" is not set, Python calculates the path "
"configuration to fill unset fields. If :c:member:`~PyConfig."
"module_search_paths_set` is equal to ``0``, :c:member:`~PyConfig."
"module_search_paths` is overridden and :c:member:`~PyConfig."
"module_search_paths_set` is set to ``1``."
msgstr ""
"如果未設定至少一個“輸出欄位”，Python 會計算路徑配置以填充未設定的欄位。如果 :"
"c:member:`~PyConfig.module_search_paths_set` 等於 ``0``，則 :c:member:"
"`~PyConfig.module_search_paths` 被覆蓋並且 :c:member:`~PyConfig."
"module_search_paths_set` 被設定為 ` `1``。"

#: ../../c-api/init_config.rst:1427
#, fuzzy
msgid ""
"It is possible to completely ignore the function calculating the default "
"path configuration by setting explicitly all path configuration output "
"fields listed above. A string is considered as set even if it is non-empty. "
"``module_search_paths`` is considered as set if ``module_search_paths_set`` "
"is set to ``1``. In this case, ``module_search_paths`` will be used without "
"modification."
msgstr ""
"通過顯式設定上面列出的所有路徑配置輸出欄位，可以完全忽略計算預設路徑配置的功"
"能。一個字串被認為是集合，即使它是非空的。如果“module_search_paths_set”設定"
"為 ``1``，則“module_search_paths”被視為已設定。在這種情況下，"
"``module_search_paths`` 將不加修改地使用。"

#: ../../c-api/init_config.rst:1434
#, fuzzy
msgid ""
"Set :c:member:`~PyConfig.pathconfig_warnings` to ``0`` to suppress warnings "
"when calculating the path configuration (Unix only, Windows does not log any "
"warning)."
msgstr ""
"將 :c:member:`~PyConfig.pathconfig_warnings` 設定為 ``0`` 以在計算路徑配置時"
"抑制警告（僅限 Unix，Windows 不記錄任何警告）。"

#: ../../c-api/init_config.rst:1437
#, fuzzy
msgid ""
"If :c:member:`~PyConfig.base_prefix` or :c:member:`~PyConfig."
"base_exec_prefix` fields are not set, they inherit their value from :c:"
"member:`~PyConfig.prefix` and :c:member:`~PyConfig.exec_prefix` respectively."
msgstr ""
"如果 :c:member:`~PyConfig.base_prefix` 或 :c:member:`~PyConfig."
"base_exec_prefix` 欄位未設定，則它們從 :c:member:`~PyConfig.prefix` 和 :c:"
"member 繼承它們的值分別為`~PyConfig.exec_prefix`。"

#: ../../c-api/init_config.rst:1441
#, fuzzy
msgid ":c:func:`Py_RunMain` and :c:func:`Py_Main` modify :data:`sys.path`:"
msgstr ":c:func:`Py_RunMain` 和 :c:func:`Py_Main` 修改 :data:`sys.path`:"

#: ../../c-api/init_config.rst:1443
#, fuzzy
msgid ""
"If :c:member:`~PyConfig.run_filename` is set and is a directory which "
"contains a ``__main__.py`` script, prepend :c:member:`~PyConfig."
"run_filename` to :data:`sys.path`."
msgstr ""
"如果 :c:member:`~PyConfig.run_filename` 已設定並且是一個包含 ``__main__.py`` "
"腳本的目錄，請將 :c:member:`~PyConfig.run_filename` 新增到 :data:`sys.path "
"`。"

#: ../../c-api/init_config.rst:1446
#, fuzzy
msgid "If :c:member:`~PyConfig.isolated` is zero:"
msgstr "如果 :c:member:`~PyConfig.isolated` 為零："

#: ../../c-api/init_config.rst:1448
#, fuzzy
msgid ""
"If :c:member:`~PyConfig.run_module` is set, prepend the current directory "
"to :data:`sys.path`. Do nothing if the current directory cannot be read."
msgstr ""
"如果設定了 :c:member:`~PyConfig.run_module`，則將當前目錄新增到 :data:`sys."
"path`。如果無法讀取當前目錄，則不執行任何操作。"

#: ../../c-api/init_config.rst:1450
#, fuzzy
msgid ""
"If :c:member:`~PyConfig.run_filename` is set, prepend the directory of the "
"filename to :data:`sys.path`."
msgstr ""
"如果設定了 :c:member:`~PyConfig.run_filename`，請將文件名的目錄新增到 :data:"
"`sys.path`。"

#: ../../c-api/init_config.rst:1452
#, fuzzy
msgid "Otherwise, prepend an empty string to :data:`sys.path`."
msgstr "否則，在 :data:`sys.path` 前新增一個空字串。"

#: ../../c-api/init_config.rst:1454
#, fuzzy
msgid ""
"If :c:member:`~PyConfig.site_import` is non-zero, :data:`sys.path` can be "
"modified by the :mod:`site` module. If :c:member:`~PyConfig."
"user_site_directory` is non-zero and the user's site-package directory "
"exists, the :mod:`site` module appends the user's site-package directory to :"
"data:`sys.path`."
msgstr ""
"如果:c:member:`~PyConfig.site_import` 非零，:data:`sys.path` 可以被 :mod:"
"`site` 模組修改。如果 :c:member:`~PyConfig.user_site_directory` 非零且使用者"
"的站點包目錄存在，則 :mod:`site` 模組將使用者的站點包目錄附加到 :data:`sys."
"path`。"

#: ../../c-api/init_config.rst:1460
#, fuzzy
msgid "The following configuration files are used by the path configuration:"
msgstr "路徑配置使用以下配置文件："

#: ../../c-api/init_config.rst:1462
msgid "``pyvenv.cfg``"
msgstr "``pyvenv.cfg``"

#: ../../c-api/init_config.rst:1463
#, fuzzy
msgid "``._pth`` file (ex: ``python._pth``)"
msgstr "``._pth`` 文件（例如：``python._pth``）"

#: ../../c-api/init_config.rst:1464
#, fuzzy
msgid "``pybuilddir.txt`` (Unix only)"
msgstr "``pybuilddir.txt``（僅限 Unix）"

#: ../../c-api/init_config.rst:1466
#, fuzzy
msgid "If a ``._pth`` file is present:"
msgstr "如果存在 ``._pth`` 文件："

#: ../../c-api/init_config.rst:1468
msgid "Set :c:member:`~PyConfig.isolated` to ``1``."
msgstr "將 :c:member:`~PyConfig.isolated` 設定為 ``1``。"

#: ../../c-api/init_config.rst:1470
msgid "Set :c:member:`~PyConfig.site_import` to ``0``."
msgstr "將 :c:member:`~PyConfig.site_import` 設定為 ``0``。"

#: ../../c-api/init_config.rst:1471
msgid "Set :c:member:`~PyConfig.safe_path` to ``1``."
msgstr "將 :c:member:`~PyConfig.safe_path` 設定為 ``1``。"

#: ../../c-api/init_config.rst:1473
#, fuzzy
msgid ""
"The ``__PYVENV_LAUNCHER__`` environment variable is used to set :c:member:"
"`PyConfig.base_executable`"
msgstr ""
"``__PYVENV_LAUNCHER__`` 環境變數用於設定:c:member:`PyConfig.base_executable`"

#: ../../c-api/init_config.rst:1478
msgid "Py_RunMain()"
msgstr "Py_RunMain()"

#: ../../c-api/init_config.rst:1482
#, fuzzy
msgid ""
"Execute the command (:c:member:`PyConfig.run_command`), the script (:c:"
"member:`PyConfig.run_filename`) or the module (:c:member:`PyConfig."
"run_module`) specified on the command line or in the configuration."
msgstr ""
"執行命令列中指定的命令（:c:member:`PyConfig.run_command`）、腳本（:c:member:"
"`PyConfig.run_filename`）或模組（:c:member:`PyConfig.run_module`）或在配置"
"中。"

#: ../../c-api/init_config.rst:1487
#, fuzzy
msgid "By default and when if :option:`-i` option is used, run the REPL."
msgstr "預設情況下，當使用 :option:`-i` 選項時，運行 REPL。"

#: ../../c-api/init_config.rst:1489
#, fuzzy
msgid ""
"Finally, finalizes Python and returns an exit status that can be passed to "
"the ``exit()`` function."
msgstr "最後，完成 Python 並回傳可以傳遞給 exit() 函式的退出狀態。"

#: ../../c-api/init_config.rst:1492
#, fuzzy
msgid ""
"See :ref:`Python Configuration <init-python-config>` for an example of "
"customized Python always running in isolated mode using :c:func:`Py_RunMain`."
msgstr ""
"請參閱 :ref:`Python 配置 <init-python-config>` 以獲取始終使用 Py_RunMain 以隔"
"離模式運行的自定義 Python 示例。"

#: ../../c-api/init_config.rst:1498
msgid "Py_GetArgcArgv()"
msgstr "Py_GetArgcArgv()"

#: ../../c-api/init_config.rst:1502
#, fuzzy
msgid "Get the original command line arguments, before Python modified them."
msgstr "在 Python 修改它們之前獲取原始命令列參數。"

#: ../../c-api/init_config.rst:1504
#, fuzzy
msgid "See also :c:member:`PyConfig.orig_argv` member."
msgstr "另見 :c:member:`PyConfig.orig_argv` 成員。"

#: ../../c-api/init_config.rst:1508
#, fuzzy
msgid "Multi-Phase Initialization Private Provisional API"
msgstr "多階段初始化私有臨時 API"

#: ../../c-api/init_config.rst:1510
#, fuzzy
msgid ""
"This section is a private provisional API introducing multi-phase "
"initialization, the core feature of :pep:`432`:"
msgstr "本節是私有臨時 API，介紹多階段初始化，:pep:`432` 的核心功能："

#: ../../c-api/init_config.rst:1513
#, fuzzy
msgid "\"Core\" initialization phase, \"bare minimum Python\":"
msgstr "“核心”初始化階段，“最低限度的 Python”："

#: ../../c-api/init_config.rst:1515
#, fuzzy
msgid "Builtin types;"
msgstr "內建型別；"

#: ../../c-api/init_config.rst:1516
#, fuzzy
msgid "Builtin exceptions;"
msgstr "內建例外；"

#: ../../c-api/init_config.rst:1517
#, fuzzy
msgid "Builtin and frozen modules;"
msgstr "內建和凍結模組；"

#: ../../c-api/init_config.rst:1518
#, fuzzy
msgid ""
"The :mod:`sys` module is only partially initialized (ex: :data:`sys.path` "
"doesn't exist yet)."
msgstr ":mod:`sys` 模組僅部分初始化（例如：:data:`sys.path` 尚不存在）。"

#: ../../c-api/init_config.rst:1521
#, fuzzy
msgid "\"Main\" initialization phase, Python is fully initialized:"
msgstr " ``Main``初始化階段，Python完全初始化："

#: ../../c-api/init_config.rst:1523
#, fuzzy
msgid "Install and configure :mod:`importlib`;"
msgstr "安裝和配置 :mod:`importlib`;"

#: ../../c-api/init_config.rst:1524
#, fuzzy
msgid "Apply the :ref:`Path Configuration <init-path-config>`;"
msgstr "應用 :ref:`路徑配置 <init-path-config>`;"

#: ../../c-api/init_config.rst:1525
#, fuzzy
msgid "Install signal handlers;"
msgstr "安裝信號處理程式；"

#: ../../c-api/init_config.rst:1526
#, fuzzy
msgid ""
"Finish :mod:`sys` module initialization (ex: create :data:`sys.stdout` and :"
"data:`sys.path`);"
msgstr ""
"完成 :mod:`sys` 模組初始化（例如：建立 :data:`sys.stdout` 和 :data:`sys."
"path`）；"

#: ../../c-api/init_config.rst:1528
#, fuzzy
msgid ""
"Enable optional features like :mod:`faulthandler` and :mod:`tracemalloc`;"
msgstr "啟用可選功能，如 :mod:`faulthandler` 和 :mod:`tracemalloc`；"

#: ../../c-api/init_config.rst:1529
#, fuzzy
msgid "Import the :mod:`site` module;"
msgstr "導入 :mod:`site` 模組；"

#: ../../c-api/init_config.rst:1530
#, fuzzy
msgid "etc."
msgstr "ETC。"

#: ../../c-api/init_config.rst:1532
#, fuzzy
msgid "Private provisional API:"
msgstr "私有臨時 API："

#: ../../c-api/init_config.rst:1534
#, fuzzy
msgid ""
":c:member:`PyConfig._init_main`: if set to ``0``, :c:func:"
"`Py_InitializeFromConfig` stops at the \"Core\" initialization phase."
msgstr ""
":c:member:`PyConfig._init_main`：如果設定為 ``0``，:c:func:"
"`Py_InitializeFromConfig` 在“核心”初始化階段停止。"

#: ../../c-api/init_config.rst:1536
#, fuzzy
msgid ""
":c:member:`PyConfig._isolated_interpreter`: if non-zero, disallow threads, "
"subprocesses and fork."
msgstr ""
":c:member:`PyConfig._isolated_interpreter`：如果非零，則禁止執行緒、子行程和 "
"fork。"

#: ../../c-api/init_config.rst:1541
#, fuzzy
msgid ""
"Move to the \"Main\" initialization phase, finish the Python initialization."
msgstr "進入 ``Main``初始化階段，完成Python初始化。"

#: ../../c-api/init_config.rst:1543
#, fuzzy
msgid ""
"No module is imported during the \"Core\" phase and the ``importlib`` module "
"is not configured: the :ref:`Path Configuration <init-path-config>` is only "
"applied during the \"Main\" phase. It may allow to customize Python in "
"Python to override or tune the :ref:`Path Configuration <init-path-config>`, "
"maybe install a custom :data:`sys.meta_path` importer or an import hook, etc."
msgstr ""
"在“核心”階段沒有導入任何模組，也沒有配置 ``importlib`` 模組：:ref:`路徑配置 "
"<init-path-config>` 僅在“主要”階段應用。它可能允許在 Python 中自定義 Python "
"以覆蓋或調整 :ref:`Path Configuration <init-path-config>`，可能安裝自定義 :"
"data:`sys.meta_path` 導入器或導入掛鉤等。"

#: ../../c-api/init_config.rst:1549
#, fuzzy
msgid ""
"It may become possible to calculatin the :ref:`Path Configuration <init-path-"
"config>` in Python, after the Core phase and before the Main phase, which is "
"one of the :pep:`432` motivation."
msgstr ""
"在 Core 階段之後和 Main 階段之前，可以在 Python 中計算 :ref:`Path "
"Configuration <init-path-config>`，這是 :pep:`432` 動機之一。"

#: ../../c-api/init_config.rst:1553
#, fuzzy
msgid ""
"The \"Core\" phase is not properly defined: what should be and what should "
"not be available at this phase is not specified yet. The API is marked as "
"private and provisional: the API can be modified or even be removed anytime "
"until a proper public API is designed."
msgstr ""
"“核心”階段未正確定義：尚未指定在此階段應該提供什麼以及不應該提供什麼。 API 被"
"標記為私有和臨時：在設計出合適的公開 API 之前，可以隨時修改甚至刪除 API。"

#: ../../c-api/init_config.rst:1558
#, fuzzy
msgid ""
"Example running Python code between \"Core\" and \"Main\" initialization "
"phases::"
msgstr "在“核心”和“主要”初始化階段之間運行 Python 程式碼的示例："
