# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-05 00:19+0000\n"
"PO-Revision-Date: 2017-09-22 18:27+0000\n"
"Last-Translator: Liang-Bo Wang <me@liang2.tw>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../reference/introduction.rst:6
msgid "Introduction"
msgstr "簡介"

#: ../../reference/introduction.rst:8
#, fuzzy
msgid ""
"This reference manual describes the Python programming language. It is not "
"intended as a tutorial."
msgstr "本參考手冊介紹了 Python 編程語言。它不是一個教程。"

#: ../../reference/introduction.rst:11
#, fuzzy
msgid ""
"While I am trying to be as precise as possible, I chose to use English "
"rather than formal specifications for everything except syntax and lexical "
"analysis. This should make the document more understandable to the average "
"reader, but will leave room for ambiguities. Consequently, if you were "
"coming from Mars and tried to re-implement Python from this document alone, "
"you might have to guess things and in fact you would probably end up "
"implementing quite a different language. On the other hand, if you are using "
"Python and wonder what the precise rules about a particular area of the "
"language are, you should definitely be able to find them here. If you would "
"like to see a more formal definition of the language, maybe you could "
"volunteer your time --- or invent a cloning machine :-)."
msgstr ""
"雖然我試圖盡可能精確，但我選擇使用英語而不是對除句法和詞法分析之外的所有內容"
"的正式規範。這應該使普通讀者更容易理解文檔，但會留下歧義。因此，"
"如果您來自火星並試圖僅根據本文檔重新實作 Python，您可能不得不猜測事情，事實上"
"您最終可能會實作完全不同的語言。另一方面，如果您正在使用 Python 並且想知道關"
"於該語言的特定領域的精確規則是什麼，您絕對應該能夠在這裡找到它們。如果您想查"
"看該語言的更正式定義，也許您可以自願花時間 --- 或者發明一台克隆機 :-)。"

#: ../../reference/introduction.rst:23
#, fuzzy
msgid ""
"It is dangerous to add too many implementation details to a language "
"reference document --- the implementation may change, and other "
"implementations of the same language may work differently.  On the other "
"hand, CPython is the one Python implementation in widespread use (although "
"alternate implementations continue to gain support), and its particular "
"quirks are sometimes worth being mentioned, especially where the "
"implementation imposes additional limitations. Therefore, you'll find short "
"\"implementation notes\" sprinkled throughout the text."
msgstr ""
"在語言參考文檔中新增太多實作細節是很危險的——實作可能會改變，而同一語言的其他"
"實作可能會以不同的方式工作。另一方面，CPython 是一種廣泛使用的 Python 實作（"
"儘管替代實作繼續獲得支援），有時值得一提的是它的特殊之處，尤其是在實作強加額"
"外限制的情況下。因此，您會發現貫穿全文的簡短“實施說明”。"

#: ../../reference/introduction.rst:32
#, fuzzy
msgid ""
"Every Python implementation comes with a number of built-in and standard "
"modules.  These are documented in :ref:`library-index`.  A few built-in "
"modules are mentioned when they interact in a significant way with the "
"language definition."
msgstr ""
"每個 Python 實作都帶有許多內建和標準模組。這些記錄在 :ref:`library-index` "
"中。一些內建模組在與語言定義進行重要交互時會被提及。"

#: ../../reference/introduction.rst:41
#, fuzzy
msgid "Alternate Implementations"
msgstr "替代實施"

#: ../../reference/introduction.rst:43
#, fuzzy
msgid ""
"Though there is one Python implementation which is by far the most popular, "
"there are some alternate implementations which are of particular interest to "
"different audiences."
msgstr "儘管目前有一種 Python "
"實作是最流行的，但還有一些替代實作對不同的受眾特別感興趣。"

#: ../../reference/introduction.rst:47
#, fuzzy
msgid "Known implementations include:"
msgstr "已知的實作包括："

#: ../../reference/introduction.rst:51
msgid "CPython"
msgstr "CPython"

#: ../../reference/introduction.rst:50
#, fuzzy
msgid ""
"This is the original and most-maintained implementation of Python, written "
"in C. New language features generally appear here first."
msgstr "這是 Python 的原始實作和維護最多的實作，用 C "
"編寫。新的語言特性通常首先出現在這裡。"

#: ../../reference/introduction.rst:57
msgid "Jython"
msgstr "Jython"

#: ../../reference/introduction.rst:54
#, fuzzy
msgid ""
"Python implemented in Java.  This implementation can be used as a scripting "
"language for Java applications, or can be used to create applications using "
"the Java class libraries.  It is also often used to create tests for Java "
"libraries. More information can be found at `the Jython website <https://www."
"jython.org/>`_."
msgstr ""
"用 Java 實作的 Python。此實作可用作 Java 應用程式的腳本語言，或可用於使用 "
"Java 類庫建立應用程式。它還經常用於為 Java 庫建立測試。可以在`Jython 網站 "
"<https://www.jython.org/>`_ 上找到更多資訊。"

#: ../../reference/introduction.rst:63
#, fuzzy
msgid "Python for .NET"
msgstr "用於 .NET 的 Python"

#: ../../reference/introduction.rst:60
#, fuzzy
msgid ""
"This implementation actually uses the CPython implementation, but is a "
"managed .NET application and makes .NET libraries available.  It was created "
"by Brian Lloyd.  For more information, see the `Python for .NET home page "
"<https://pythonnet.github.io/>`_."
msgstr ""
"此實作實際上使用 CPython 實作，但它是一個託管的 .NET 應用程式並使 .NET "
"庫可用。它是由 Brian Lloyd 建立的。有關詳細資訊，請參閱`Python for .NET 主頁 "
"<https://pythonnet.github.io/>`_。"

#: ../../reference/introduction.rst:69
msgid "IronPython"
msgstr "IronPython"

#: ../../reference/introduction.rst:66
#, fuzzy
msgid ""
"An alternate Python for .NET.  Unlike Python.NET, this is a complete Python "
"implementation that generates IL, and compiles Python code directly to .NET "
"assemblies.  It was created by Jim Hugunin, the original creator of Jython.  "
"For more information, see `the IronPython website <https://ironpython.net/"
">`_."
msgstr ""
".NET 的替代 Python。與 Python.NET 不同，這是一個完整的 Python 實作，可生成 "
"IL，並將 Python 程式碼直接編譯為 .NET 程式集。它是由 Jython 的原始建立者 Jim "
"Hugunin 建立的。有關詳細資訊，請參閱`IronPython 網站 <https://ironpython.net/"
">`_。"

#: ../../reference/introduction.rst:77
msgid "PyPy"
msgstr "PyPy"

#: ../../reference/introduction.rst:72
#, fuzzy
msgid ""
"An implementation of Python written completely in Python. It supports "
"several advanced features not found in other implementations like stackless "
"support and a Just in Time compiler. One of the goals of the project is to "
"encourage experimentation with the language itself by making it easier to "
"modify the interpreter (since it is written in Python).  Additional "
"information is available on `the PyPy project's home page <https://pypy.org/"
">`_."
msgstr ""
"完全用 Python 編寫的 Python 實作。它支援其他實作中沒有的多種高階功能，例如無"
"堆疊支援和即時編譯器。該項目的目標之一是通過使修改直譯器更容易（因為它是用 "
"Python 編寫的）來鼓勵對語言本身進行實驗。 `PyPy 項目的主頁 <https://pypy.org/"
">`_ 上提供了更多資訊。"

#: ../../reference/introduction.rst:79
#, fuzzy
msgid ""
"Each of these implementations varies in some way from the language as "
"documented in this manual, or introduces specific information beyond what's "
"covered in the standard Python documentation.  Please refer to the "
"implementation-specific documentation to determine what else you need to "
"know about the specific implementation you're using."
msgstr ""
"這些實作中的每一個都與本手冊中記錄的語言有所不同，或者引入了標準 Python 文檔"
"中未涵蓋的特定資訊。請參閱特定於實施的文檔，以確定您還需要了解有關您正在使用"
"的特定實施的哪些資訊。"

#: ../../reference/introduction.rst:89
#, fuzzy
msgid "Notation"
msgstr "符號"

#: ../../reference/introduction.rst:93
#, fuzzy
msgid ""
"The descriptions of lexical analysis and syntax use a modified BNF grammar "
"notation.  This uses the following style of definition:"
msgstr "詞法分析和句法的描述使用改進的 BNF 文法表示法。這使用以下定義樣式："

#: ../../reference/introduction.rst:100
#, fuzzy
msgid ""
"The first line says that a ``name`` is an ``lc_letter`` followed by a "
"sequence of zero or more ``lc_letter``\\ s and underscores.  An "
"``lc_letter`` in turn is any of the single characters ``'a'`` through "
"``'z'``.  (This rule is actually adhered to for the names defined in lexical "
"and grammar rules in this document.)"
msgstr ""
"第一行說 ``name`` 是一個 ``lc_letter`` 後跟零個或多個 ``lc_letter``\\ "
"和底線。 ``lc_letter`` 依次是任何單個字元 ``'a'`` 到 ``'z'``。 "
"（對於本文檔中詞彙和語法規則中定義的名稱，實際上遵守此規則。）"

#: ../../reference/introduction.rst:105
#, fuzzy
msgid ""
"Each rule begins with a name (which is the name defined by the rule) and ``::"
"=``.  A vertical bar (``|``) is used to separate alternatives; it is the "
"least binding operator in this notation.  A star (``*``) means zero or more "
"repetitions of the preceding item; likewise, a plus (``+``) means one or "
"more repetitions, and a phrase enclosed in square brackets (``[ ]``) means "
"zero or one occurrences (in other words, the enclosed phrase is optional).  "
"The ``*`` and ``+`` operators bind as tightly as possible; parentheses are "
"used for grouping.  Literal strings are enclosed in quotes.  White space is "
"only meaningful to separate tokens. Rules are normally contained on a single "
"line; rules with many alternatives may be formatted alternatively with each "
"line after the first beginning with a vertical bar."
msgstr ""
"每個規則都以名稱（由規則定義的名稱）和 ``::=`` 開頭。豎線（``|``）用於分隔備"
"選方案；它是此表示法中綁定最少的運算符。星號（``*``）表示前一項重複零次或多次"
"；同樣，加號 (``+``) 表示重複一次或多次，方括號中的短語 (``[ ]``) "
"表示出現零次或一次（換句話說，括起來的短語是可選的）。 ``*`` 和 ``+`` 運算符"
"盡可能緊密地綁定；括號用於分組。文字字串用引號括起來。空白僅對分隔標記有意義"
"。規則通常包含在一行中；具有許多備選方案的規則可以在第一行以豎線開始後的每一"
"行中交替格式化。"

#: ../../reference/introduction.rst:119
#, fuzzy
msgid ""
"In lexical definitions (as the example above), two more conventions are "
"used: Two literal characters separated by three dots mean a choice of any "
"single character in the given (inclusive) range of ASCII characters.  A "
"phrase between angular brackets (``<...>``) gives an informal description of "
"the symbol defined; e.g., this could be used to describe the notion of "
"'control character' if needed."
msgstr ""
"在詞法定義中（如上例），使用了另外兩個約定：由三個點分隔的兩個文字字元表示在"
"給定（包括）ASCII 字元範圍內選擇任何單個字元。尖括號之間的短語 (``<...>``) 給"
"出了所定義符號的非正式描述；例如，如果需要，這可以用來描述“控制字元”的概念。"

#: ../../reference/introduction.rst:126
#, fuzzy
msgid ""
"Even though the notation used is almost the same, there is a big difference "
"between the meaning of lexical and syntactic definitions: a lexical "
"definition operates on the individual characters of the input source, while "
"a syntax definition operates on the stream of tokens generated by the "
"lexical analysis. All uses of BNF in the next chapter (\"Lexical Analysis\") "
"are lexical definitions; uses in subsequent chapters are syntactic "
"definitions."
msgstr ""
"儘管使用的符號幾乎相同，但詞法定義和句法定義的含義存在很大差異：詞法定義對輸"
"入源的單個字元進行操作，而句法定義對輸入源生成的標記流進行操作詞法分析。下一"
"章（“詞法分析”）中 BNF 的所有使用都是詞法定義；後續章節中使用的是句法定義。"
