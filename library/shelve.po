# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-15 20:43+0000\n"
"PO-Revision-Date: 2018-05-23 16:09+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/shelve.rst:2
#, fuzzy
msgid ":mod:`shelve` --- Python object persistence"
msgstr ":mod:`shelve` --- Python 物件持久化"

#: ../../library/shelve.rst:7
msgid "**Source code:** :source:`Lib/shelve.py`"
msgstr "**原始碼：**\\ :source:`Lib/shelve.py`"

#: ../../library/shelve.rst:13
#, fuzzy
msgid ""
"A \"shelf\" is a persistent, dictionary-like object.  The difference with "
"\"dbm\" databases is that the values (not the keys!) in a shelf can be "
"essentially arbitrary Python objects --- anything that the :mod:`pickle` "
"module can handle. This includes most class instances, recursive data types, "
"and objects containing lots of shared  sub-objects.  The keys are ordinary "
"strings."
msgstr ""
"“架子”是一個持久的、類似字典的物件。與 ``dbm``資料庫的不同之處在於，架子中的值（"
"不是鍵！）本質上可以是任意 Python 物件——任何 :mod:`pickle` 模組可以處理的物件"
"。這包括大多數類實例、遞迴資料型別和包含大量共享子物件的物件。鍵是普通字串。"

#: ../../library/shelve.rst:22
#, fuzzy
msgid ""
"Open a persistent dictionary.  The filename specified is the base filename "
"for the underlying database.  As a side-effect, an extension may be added to "
"the filename and more than one file may be created.  By default, the "
"underlying database file is opened for reading and writing.  The optional "
"*flag* parameter has the same interpretation as the *flag* parameter of :"
"func:`dbm.open`."
msgstr ""
"打開持久字典。指定的文件名是基礎資料庫的基本文件名。作為副作用，可以將擴充名"
"新增到文件名並且可以建立多個文件。預設情況下，打開底層資料庫文件進行讀寫。"
"可選的 *flag* 參數與 :func:`dbm.open` 的 *flag* 參數具有相同的解釋。"

#: ../../library/shelve.rst:28
#, fuzzy
msgid ""
"By default, pickles created with :data:`pickle.DEFAULT_PROTOCOL` are used to "
"serialize values.  The version of the pickle protocol can be specified with "
"the *protocol* parameter."
msgstr ""
"預設情況下，使用 pickle.DEFAULT_PROTOCOL 建立的泡菜用於序列化值。 pickle "
"協定的版本可以用 *protocol* 參數指定。"

#: ../../library/shelve.rst:32
#, fuzzy
msgid ""
"Because of Python semantics, a shelf cannot know when a mutable persistent-"
"dictionary entry is modified.  By default modified objects are written "
"*only* when assigned to the shelf (see :ref:`shelve-example`).  If the "
"optional *writeback* parameter is set to ``True``, all entries accessed are "
"also cached in memory, and written back on :meth:`~Shelf.sync` and :meth:"
"`~Shelf.close`; this can make it handier to mutate mutable entries in the "
"persistent dictionary, but, if many entries are accessed, it can consume "
"vast amounts of memory for the cache, and it can make the close operation "
"very slow since all accessed entries are written back (there is no way to "
"determine which accessed entries are mutable, nor which ones were actually "
"mutated)."
msgstr ""
"由於 Python 語義，shelf 無法知道可變持久字典條目何時被修改。預設情況下，修改"
"後的物件*僅*在分配給貨架時才寫入（請參閱 :ref:`shelve-example`）。"
"如果可選的 *writeback* 參數設定為 "
"``True``，所有訪問的條目也快取在記憶體中，並寫回 :meth:`~Shelf.sync` "
"和 :meth:`~Shelf.close`;這可以更方便地改變持久字典中的可變條目，但是，如果訪問"
"了很多條目，它會消耗大量的快取記憶體，並且它會使關閉操作非常慢，因為所有訪問"
"的條目都會被寫回（無法確定哪些訪問的條目是可變的，也無法確定哪些條目實際上發"
"生了變化）。"

#: ../../library/shelve.rst:44 ../../library/shelve.rst:145
#, fuzzy
msgid ""
":data:`pickle.DEFAULT_PROTOCOL` is now used as the default pickle protocol."
msgstr ":data:`pickle.DEFAULT_PROTOCOL` 現在用作預設的 pickle 協定。"

#: ../../library/shelve.rst:48
#, fuzzy
msgid "Accepts :term:`path-like object` for filename."
msgstr "接受 :term:`path-like object` 作為文件名。"

#: ../../library/shelve.rst:53
#, fuzzy
msgid ""
"Do not rely on the shelf being closed automatically; always call :meth:"
"`~Shelf.close` explicitly when you don't need it any more, or use :func:"
"`shelve.open` as a context manager::"
msgstr ""
"不要依賴自動關閉的架子；當你不再需要它時，總是顯式地呼叫 :meth:`~Shelf."
"close`，或者使用 :func:`shelve.open` 作為上下文管理器::"

#: ../../library/shelve.rst:64
#, fuzzy
msgid ""
"Because the :mod:`shelve` module is backed by :mod:`pickle`, it is insecure "
"to load a shelf from an untrusted source.  Like with pickle, loading a shelf "
"can execute arbitrary code."
msgstr ""
"因為 :mod:`shelve` 模組由 :mod:`pickle` "
"支援，所以從不受信任的來源加載貨架是不安全的。與 pickle 一樣，加載 shelf "
"可以執行任意程式碼。"

#: ../../library/shelve.rst:68
#, fuzzy
msgid ""
"Shelf objects support most of methods and operations supported by "
"dictionaries (except copying, constructors and operators ``|`` and ``|=``).  "
"This eases the transition from dictionary based scripts to those requiring "
"persistent storage."
msgstr ""
"Shelf 物件支援字典支援的大多數方法和操作（複製、構造函式和運算符``|`` "
"和``|=`` 除外）。這簡化了從基於字典的腳本到需要持久儲存的腳本的轉換。"

#: ../../library/shelve.rst:72
#, fuzzy
msgid "Two additional methods are supported:"
msgstr "支援另外兩種方法："

#: ../../library/shelve.rst:76
#, fuzzy
msgid ""
"Write back all entries in the cache if the shelf was opened with *writeback* "
"set to :const:`True`.  Also empty the cache and synchronize the persistent "
"dictionary on disk, if feasible.  This is called automatically when the "
"shelf is closed with :meth:`close`."
msgstr ""
"如果架子打開時將 *writeback* 設定為 :const:`True`，則寫回快取中的所有條目。如"
"果可行，還清空快取並同步磁盤上的持久字典。當使用 :meth:`close` 關閉 shelf "
"時，它會自動呼叫。"

#: ../../library/shelve.rst:83
#, fuzzy
msgid ""
"Synchronize and close the persistent *dict* object.  Operations on a closed "
"shelf will fail with a :exc:`ValueError`."
msgstr "同步並關閉持久的 *dict* 物件。關閉貨架上的操作將失敗並出現 "
":exc:`ValueError`。"

#: ../../library/shelve.rst:89
#, fuzzy
msgid ""
"`Persistent dictionary recipe <https://code.activestate.com/recipes/576642/"
">`_ with widely supported storage formats and having the speed of native "
"dictionaries."
msgstr ""
"`持久性字典配方 <https://code.activestate.com/recipes/576642/>`_ "
"具有廣泛支援的儲存格式和本地字典的速度。"

#: ../../library/shelve.rst:95
#, fuzzy
msgid "Restrictions"
msgstr "限制"

#: ../../library/shelve.rst:101
#, fuzzy
msgid ""
"The choice of which database package will be used (such as :mod:`dbm.ndbm` "
"or :mod:`dbm.gnu`) depends on which interface is available.  Therefore it is "
"not safe to open the database directly using :mod:`dbm`.  The database is "
"also (unfortunately) subject to the limitations of :mod:`dbm`, if it is used "
"--- this means that (the pickled representation of) the objects stored in "
"the database should be fairly small, and in rare cases key collisions may "
"cause the database to refuse updates."
msgstr ""
"選擇使用哪個資料庫包（例如 :mod:`dbm.ndbm` 或 :mod:`dbm."
"gnu`）取決於可用的介面。因此直接使用 :mod:`dbm` "
"打開資料庫是不安全的。資料庫也（不幸的是）受到 :mod:`dbm` "
"的限制，如果它被使用---這意味著儲存在資料庫中的物件（的醃製表示）應該相當小，"
"並且在極少數情況下鍵衝突可能導致資料庫拒絕更新。"

#: ../../library/shelve.rst:109
#, fuzzy
msgid ""
"The :mod:`shelve` module does not support *concurrent* read/write access to "
"shelved objects.  (Multiple simultaneous read accesses are safe.)  When a "
"program has a shelf open for writing, no other program should have it open "
"for reading or writing.  Unix file locking can be used to solve this, but "
"this differs across Unix versions and requires knowledge about the database "
"implementation used."
msgstr ""
":mod:`shelve` 模組不支援對擱置物件的*並發*讀/寫訪問。 （多個同時讀取訪問是安"
"全的。）當一個程式打開一個架子用於寫入時，任何其他程式都不應該將它打開用於讀"
"取或寫入。 Unix 文件鎖定可用於解決此問題，但這在 Unix "
"版本之間有所不同，並且需要了解所使用的資料庫實作。"

#: ../../library/shelve.rst:119
#, fuzzy
msgid ""
"A subclass of :class:`collections.abc.MutableMapping` which stores pickled "
"values in the *dict* object."
msgstr ":class:`collections.abc.MutableMapping` 的子類別，它在 *dict* "
"對像中儲存醃製值。"

#: ../../library/shelve.rst:122
#, fuzzy
msgid ""
"By default, pickles created with :data:`pickle.DEFAULT_PROTOCOL` are used to "
"serialize values.  The version of the pickle protocol can be specified with "
"the *protocol* parameter.  See the :mod:`pickle` documentation for a "
"discussion of the pickle protocols."
msgstr ""
"預設情況下，使用 pickle.DEFAULT_PROTOCOL 建立的泡菜用於序列化值。 pickle "
"協定的版本可以用 *protocol* 參數指定。有關 pickle 協定的討論，請參閱 "
":mod:`pickle` 文檔。"

#: ../../library/shelve.rst:127
#, fuzzy
msgid ""
"If the *writeback* parameter is ``True``, the object will hold a cache of "
"all entries accessed and write them back to the *dict* at sync and close "
"times. This allows natural operations on mutable entries, but can consume "
"much more memory and make sync and close take a long time."
msgstr ""
"如果 *writeback* 參數為 ``True``，該物件將保存所有訪問條目的快取，"
"並在同步和關閉時將它們寫回 *dict*。這允許對可變條目進行自然操作，但會消耗更多"
"記憶體並使同步和關閉花費很長時間。"

#: ../../library/shelve.rst:132
#, fuzzy
msgid ""
"The *keyencoding* parameter is the encoding used to encode keys before they "
"are used with the underlying dict."
msgstr "*keyencoding* 參數是用於在鍵與底層字典一起使用之前對鍵進行編碼的編碼。"

#: ../../library/shelve.rst:135
#, fuzzy
msgid ""
"A :class:`Shelf` object can also be used as a context manager, in which case "
"it will be automatically closed when the :keyword:`with` block ends."
msgstr ":class:`Shelf` 對像也可以用作上下文管理器，在這種情況下，它會在 "
":keyword:`with` 塊結束時自動關閉。"

#: ../../library/shelve.rst:138
#, fuzzy
msgid ""
"Added the *keyencoding* parameter; previously, keys were always encoded in "
"UTF-8."
msgstr "新增了 *keyencoding* 參數；以前，密鑰總是以 UTF-8 編碼。"

#: ../../library/shelve.rst:142
#, fuzzy
msgid "Added context manager support."
msgstr "新增了上下文管理器支援。"

#: ../../library/shelve.rst:152
#, fuzzy
msgid ""
"A subclass of :class:`Shelf` which exposes :meth:`first`, :meth:`!next`, :"
"meth:`previous`, :meth:`last` and :meth:`set_location` which are available "
"in the third-party :mod:`bsddb` module from `pybsddb <https://www.jcea.es/"
"programacion/pybsddb.htm>`_ but not in other database modules.  The *dict* "
"object passed to the constructor must support those methods.  This is "
"generally accomplished by calling one of :func:`bsddb.hashopen`, :func:"
"`bsddb.btopen` or :func:`bsddb.rnopen`.  The optional *protocol*, "
"*writeback*, and *keyencoding* parameters have the same interpretation as "
"for the :class:`Shelf` class."
msgstr ""
"Shelf 的子類別，它公開了 "
":meth:`first`、:meth:`!next`、:meth:`previous`、:meth:`last` 和 "
":meth:`set_location`，它們在來自`pybsddb <https://www.jcea.es/programacion/"
"pybsddb.htm>`_但不在其他資料庫模組中的第三方 :mod:`bsddb`模組。"
"傳遞給構造函式的 *dict* 物件必須支援這些方法。這通常通過呼叫 :func:`bsddb."
"hashopen`、:func:`bsddb.btopen` 或 :func:`bsddb.rnopen` 之一來完成。可選的 "
"*protocol*、*writeback* 和 *keyencoding* 參數與 Shelf 類具有相同的解釋。"

#: ../../library/shelve.rst:165
#, fuzzy
msgid ""
"A subclass of :class:`Shelf` which accepts a *filename* instead of a dict-"
"like object.  The underlying file will be opened using :func:`dbm.open`.  By "
"default, the file will be created and opened for both read and write.  The "
"optional *flag* parameter has the same interpretation as for the :func:`."
"open` function.  The optional *protocol* and *writeback* parameters have the "
"same interpretation as for the :class:`Shelf` class."
msgstr ""
"Shelf 的子類別，它接受 *filename* 而不是類似 dict 的物件。底層文件將使用 "
":func:`dbm.open` 打開。預設情況下，文件將被建立並打開以進行讀寫。可選的 "
"*flag* 參數與 :func:`.open` 函式具有相同的解釋。可選的 *protocol* 和 "
"*writeback* 參數與 Shelf 類具有相同的解釋。"

#: ../../library/shelve.rst:176
msgid "Example"
msgstr "範例"

#: ../../library/shelve.rst:178
#, fuzzy
msgid ""
"To summarize the interface (``key`` is a string, ``data`` is an arbitrary "
"object)::"
msgstr "總結介面（``key`` 是一個字串，``data`` 是一個任意物件）："

#: ../../library/shelve.rst:215
msgid "Module :mod:`dbm`"
msgstr ":mod:`dbm` 模組"

#: ../../library/shelve.rst:215
#, fuzzy
msgid "Generic interface to ``dbm``-style databases."
msgstr "``dbm`` 風格資料庫的通用介面。"

#: ../../library/shelve.rst:217
msgid "Module :mod:`pickle`"
msgstr ":mod:`pickle` 模組"

#: ../../library/shelve.rst:218
#, fuzzy
msgid "Object serialization used by :mod:`shelve`."
msgstr ":mod:`shelve` 使用的物件序列化。"
