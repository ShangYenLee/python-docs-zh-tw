# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Leon H., 2017
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-24 00:18+0000\n"
"PO-Revision-Date: 2018-05-23 16:01+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/exceptions.rst:4
msgid "Built-in Exceptions"
msgstr "內建的例外"

#: ../../library/exceptions.rst:10
#, fuzzy
msgid ""
"In Python, all exceptions must be instances of a class that derives from :"
"class:`BaseException`.  In a :keyword:`try` statement with an :keyword:"
"`except` clause that mentions a particular class, that clause also handles "
"any exception classes derived from that class (but not exception classes "
"from which *it* is derived).  Two exception classes that are not related via "
"subclassing are never equivalent, even if they have the same name."
msgstr ""
"在 Python 中，所有例外都必須是派生自 :class:`BaseException` 的類的實例。"
"在帶有提及特定類的 except 子句的 try "
"語句中，該子句還處理從該類派生的任何例外類（但不包括 *it* 派生的例外類）。通"
"過子類別化不相關的兩個例外類永遠不會等價，即使它們具有相同的名稱。"

#: ../../library/exceptions.rst:19
#, fuzzy
msgid ""
"The built-in exceptions listed below can be generated by the interpreter or "
"built-in functions.  Except where mentioned, they have an \"associated "
"value\" indicating the detailed cause of the error.  This may be a string or "
"a tuple of several items of information (e.g., an error code and a string "
"explaining the code).  The associated value is usually passed as arguments "
"to the exception class's constructor."
msgstr ""
"下面列出的內建例外可以由直譯器或內建函式生成。除了提到的地方，它們都有一個“關"
"聯值”，指示錯誤的詳細原因。這可能是一個字串或幾個資訊項的元組（例如，錯誤程式"
"碼和解釋程式碼的字串）。關聯值通常作為參數傳遞給例外類的構造函式。"

#: ../../library/exceptions.rst:26
#, fuzzy
msgid ""
"User code can raise built-in exceptions.  This can be used to test an "
"exception handler or to report an error condition \"just like\" the "
"situation in which the interpreter raises the same exception; but beware "
"that there is nothing to prevent user code from raising an inappropriate "
"error."
msgstr ""
"使用者程式碼可以引發內建例外。這可用於測試例外處理程式或報告錯誤情況，“就像”"
"直譯器引發相同例外的情況一樣；但請注意，沒有什麼可以阻止使用者程式碼引發不適"
"當的錯誤。"

#: ../../library/exceptions.rst:31
#, fuzzy
msgid ""
"The built-in exception classes can be subclassed to define new exceptions; "
"programmers are encouraged to derive new exceptions from the :exc:"
"`Exception` class or one of its subclasses, and not from :exc:"
"`BaseException`.  More information on defining exceptions is available in "
"the Python Tutorial under :ref:`tut-userexceptions`."
msgstr ""
"內建的例外類可以被子類別化以定義新的例外；鼓勵程式員從 :exc:`Exception` "
"類或其子類別之一派生新例外，而不是從 :exc:`BaseException` "
"派生新例外。有關定義例外的更多資訊，請參閱 :ref:`tut-userexceptions` 下的 "
"Python 教程。"

#: ../../library/exceptions.rst:39
#, fuzzy
msgid "Exception context"
msgstr "例外上下文"

#: ../../library/exceptions.rst:41
#, fuzzy
msgid ""
"When raising a new exception while another exception is already being "
"handled, the new exception's :attr:`__context__` attribute is automatically "
"set to the handled exception.  An exception may be handled when an :keyword:"
"`except` or :keyword:`finally` clause, or a :keyword:`with` statement, is "
"used."
msgstr ""
"當另一個例外已經被處理時引發一個新的例外，新例外的 :attr:`__context__` "
"屬性會自動設定為已處理的例外。當使用 :keyword:`except` 或 :keyword:`finally` "
"子句或 :keyword:`with` 語句時，可能會處理例外。"

#: ../../library/exceptions.rst:47
#, fuzzy
msgid ""
"This implicit exception context can be supplemented with an explicit cause "
"by using :keyword:`!from` with :keyword:`raise`::"
msgstr "這個隱式例外上下文可以通過使用 :keyword:`!from` 和 :keyword:`raise`:: "
"來補充一個明確的原因："

#: ../../library/exceptions.rst:53
#, fuzzy
msgid ""
"The expression following :keyword:`from<raise>` must be an exception or "
"``None``. It will be set as :attr:`__cause__` on the raised exception. "
"Setting :attr:`__cause__` also implicitly sets the :attr:"
"`__suppress_context__` attribute to ``True``, so that using ``raise new_exc "
"from None`` effectively replaces the old exception with the new one for "
"display purposes (e.g. converting :exc:`KeyError` to :exc:`AttributeError`), "
"while leaving the old exception available in :attr:`__context__` for "
"introspection when debugging."
msgstr ""
":keyword:`from<raise>` 後面的表達式必須是一個例外或 ``None``。"
"它將在引發的例外上設定為 :attr:`__cause__`。設定 :attr:`__cause__` "
"也隱含地將 :attr:`__suppress_context__` 屬性設定為 ``True``，因此使用 ``"
"raise new_exc from None`` 有效地用新例外替換舊例外以用於顯示目的（例如將 "
":exc:`KeyError` 轉換為 :exc:`AttributeError`)，同時在 :attr:`__context__` "
"中保留舊例外以供除錯時自省。"

#: ../../library/exceptions.rst:62
#, fuzzy
msgid ""
"The default traceback display code shows these chained exceptions in "
"addition to the traceback for the exception itself. An explicitly chained "
"exception in :attr:`__cause__` is always shown when present. An implicitly "
"chained exception in :attr:`__context__` is shown only if :attr:`__cause__` "
"is :const:`None` and :attr:`__suppress_context__` is false."
msgstr ""
"預設的回溯顯示程式碼除了顯示例外本身的回溯之外，還顯示這些鏈接的例外。 "
":attr:`__cause__` 中的顯式鏈接例外總是在出現時顯示。僅當 :attr:`__cause__` "
"為 :const:`None` 且 :attr:`__suppress_context__` 為 false 時，才會顯示 "
":attr:`__context__` 中的隱式鏈接例外。"

#: ../../library/exceptions.rst:68
#, fuzzy
msgid ""
"In either case, the exception itself is always shown after any chained "
"exceptions so that the final line of the traceback always shows the last "
"exception that was raised."
msgstr "在任何一種情況下，例外本身總是在任何鍊式例外之後顯示，因此回溯的最後一行總是"
"顯示最後引發的例外。"

#: ../../library/exceptions.rst:74
msgid "Inheriting from built-in exceptions"
msgstr "繼承自內建的例外"

#: ../../library/exceptions.rst:76
#, fuzzy
msgid ""
"User code can create subclasses that inherit from an exception type. It's "
"recommended to only subclass one exception type at a time to avoid any "
"possible conflicts between how the bases handle the ``args`` attribute, as "
"well as due to possible memory layout incompatibilities."
msgstr ""
"使用者程式碼可以建立從例外型別繼承的子類別。建議一次只對一種例外型別進行子類"
"別化，以避免基處理 ``args`` 屬性的方式之間可能發生的任何衝突，以及由於可能的"
"記憶體佈局不相容而導致的衝突。"

#: ../../library/exceptions.rst:83
#, fuzzy
msgid ""
"Most built-in exceptions are implemented in C for efficiency, see: :source:"
"`Objects/exceptions.c`.  Some have custom memory layouts which makes it "
"impossible to create a subclass that inherits from multiple exception types. "
"The memory layout of a type is an implementation detail and might change "
"between Python versions, leading to new conflicts in the future.  Therefore, "
"it's recommended to avoid subclassing multiple exception types altogether."
msgstr ""
"為了提高效率，大多數內建例外都是用 C 實作的，請參閱：:source:`Objects/"
"exceptions.c`。有些具有自定義記憶體佈局，這使得無法建立從多個例外型別繼承的子"
"類別。型別的記憶體佈局是一個實作細節，可能會在 Python 版本之間發生變化，從而"
"在未來導致新的衝突。因此，建議避免完全子類別化多個例外型別。"

#: ../../library/exceptions.rst:93
#, fuzzy
msgid "Base classes"
msgstr "基底類別"

#: ../../library/exceptions.rst:95
#, fuzzy
msgid ""
"The following exceptions are used mostly as base classes for other "
"exceptions."
msgstr "以下例外主要用作其他例外的基底類別。"

#: ../../library/exceptions.rst:99
#, fuzzy
msgid ""
"The base class for all built-in exceptions.  It is not meant to be directly "
"inherited by user-defined classes (for that, use :exc:`Exception`).  If :"
"func:`str` is called on an instance of this class, the representation of the "
"argument(s) to the instance are returned, or the empty string when there "
"were no arguments."
msgstr ""
"所有內建例外的基底類別。它並不意味著由使用者定義的類直接繼承（為此，使用 "
":exc:`Exception`）。如果在此類的實例上呼叫 "
":func:`str`，則回傳實例的參數表示，或者在沒有參數時回傳空字串。"

#: ../../library/exceptions.rst:107
#, fuzzy
msgid ""
"The tuple of arguments given to the exception constructor.  Some built-in "
"exceptions (like :exc:`OSError`) expect a certain number of arguments and "
"assign a special meaning to the elements of this tuple, while others are "
"usually called only with a single string giving an error message."
msgstr ""
"給例外構造函式的參數元組。一些內建例外（如 :exc:`OSError`）期望一定數量的參數"
"並為該元組的元素分配特殊含義，而其他例外通常僅使用單個字串呼叫，給出錯誤消息"
"。"

#: ../../library/exceptions.rst:114
#, fuzzy
msgid ""
"This method sets *tb* as the new traceback for the exception and returns the "
"exception object.  It was more commonly used before the exception chaining "
"features of :pep:`3134` became available.  The following example shows how "
"we can convert an instance of ``SomeException`` into an instance of "
"``OtherException`` while preserving the traceback.  Once raised, the current "
"frame is pushed onto the traceback of the ``OtherException``, as would have "
"happened to the traceback of the original ``SomeException`` had we allowed "
"it to propagate to the caller. ::"
msgstr ""
"此方法將 *tb* 設定為例外的新回溯並回傳例外物件。在 :pep:`3134` "
"的例外鏈接功能可用之前，它更常用。以下示例顯示了我們如何在保留回溯的同時將 "
"SomeException 的實例轉換為 OtherException 的實例。一旦引發，當前幀將被推送到“"
"OtherException”的回溯上，就像我們允許它傳播給呼叫者的原始 ``SomeException`` 的回"
"溯一樣。 ::"

#: ../../library/exceptions.rst:131
#, fuzzy
msgid ""
"Add the string ``note`` to the exception's notes which appear in the "
"standard traceback after the exception string. A :exc:`TypeError` is raised "
"if ``note`` is not a string."
msgstr ""
"將字串 ``note`` 新增到出現在例外字串之後的標準回溯中的例外註釋中。如果 "
"``note`` 不是字串，則會引發 :exc:`TypeError`。"

#: ../../library/exceptions.rst:139
#, fuzzy
msgid ""
"A list of the notes of this exception, which were added with :meth:"
"`add_note`. This attribute is created when :meth:`add_note` is called."
msgstr "此例外的註釋列表，使用 :meth:`add_note` 新增。這個屬性是在呼叫 add_note "
"時建立的。"

#: ../../library/exceptions.rst:147
#, fuzzy
msgid ""
"All built-in, non-system-exiting exceptions are derived from this class.  "
"All user-defined exceptions should also be derived from this class."
msgstr "所有內建的非系統退出例外都派生自此類。所有使用者定義的例外也應該從此類派生。"

#: ../../library/exceptions.rst:153
#, fuzzy
msgid ""
"The base class for those built-in exceptions that are raised for various "
"arithmetic errors: :exc:`OverflowError`, :exc:`ZeroDivisionError`, :exc:"
"`FloatingPointError`."
msgstr ""
"為各種算術錯誤引發的那些內建例外的基底類別 :exec:`OverflowError`、:exc:`ZeroDi"
"visionError`、:exc:`FloatingPointError`。"

#: ../../library/exceptions.rst:160
#, fuzzy
msgid ""
"Raised when a :ref:`buffer <bufferobjects>` related operation cannot be "
"performed."
msgstr "當無法執行 :ref:`buffer <bufferobjects>` 相關操作時引發。"

#: ../../library/exceptions.rst:166
#, fuzzy
msgid ""
"The base class for the exceptions that are raised when a key or index used "
"on a mapping or sequence is invalid: :exc:`IndexError`, :exc:`KeyError`.  "
"This can be raised directly by :func:`codecs.lookup`."
msgstr ""
"當映射或序列上使用的鍵或索引無效時引發的例外的基底類別：:exc:`IndexError`, "
":exc:`KeyError`。這可以通過 :func:`codecs.lookup` 直接引發。"

#: ../../library/exceptions.rst:172
#, fuzzy
msgid "Concrete exceptions"
msgstr "具體例外"

#: ../../library/exceptions.rst:174
#, fuzzy
msgid "The following exceptions are the exceptions that are usually raised."
msgstr "以下例外是通常引發的例外。"

#: ../../library/exceptions.rst:180
#, fuzzy
msgid "Raised when an :keyword:`assert` statement fails."
msgstr "當 :keyword:`assert` 語句失敗時引發。"

#: ../../library/exceptions.rst:185
#, fuzzy
msgid ""
"Raised when an attribute reference (see :ref:`attribute-references`) or "
"assignment fails.  (When an object does not support attribute references or "
"attribute assignments at all, :exc:`TypeError` is raised.)"
msgstr ""
"當屬性引用（參見 :ref:`attribute-references`）或賦值失敗時引發。 "
"（當一個對像根本不支援屬性引用或屬性賦值時，會引發 :exc:`TypeError`。）"

#: ../../library/exceptions.rst:189
#, fuzzy
msgid ""
"The :attr:`name` and :attr:`obj` attributes can be set using keyword-only "
"arguments to the constructor. When set they represent the name of the "
"attribute that was attempted to be accessed and the object that was accessed "
"for said attribute, respectively."
msgstr ""
":attr:`name` 和 :attr:`obj` 屬性可以使用構造函式的僅關鍵字參數來設定。設定時"
"，它們分別表示試圖訪問的屬性的名稱和針對所述屬性訪問的物件。"

#: ../../library/exceptions.rst:194
msgid "Added the :attr:`name` and :attr:`obj` attributes."
msgstr "新增 :attr:`name` 與 :attr:`obj` 屬性。"

#: ../../library/exceptions.rst:199
#, fuzzy
msgid ""
"Raised when the :func:`input` function hits an end-of-file condition (EOF) "
"without reading any data. (N.B.: the :meth:`io.IOBase.read` and :meth:`io."
"IOBase.readline` methods return an empty string when they hit EOF.)"
msgstr ""
"當 :func:`input` 函式在沒有讀取任何資料的情況下遇到文件結束條件 (EOF) "
"時引發。 （注意：:meth:`io.IOBase.read` 和 :meth:`io.IOBase.readline` "
"方法在到達 EOF 時回傳一個空字串。）"

#: ../../library/exceptions.rst:206
#, fuzzy
msgid "Not currently used."
msgstr "當前未使用。"

#: ../../library/exceptions.rst:211
#, fuzzy
msgid ""
"Raised when a :term:`generator` or :term:`coroutine` is closed; see :meth:"
"`generator.close` and :meth:`coroutine.close`.  It directly inherits from :"
"exc:`BaseException` instead of :exc:`Exception` since it is technically not "
"an error."
msgstr ""
"當 generator 或 coroutine 關閉時引發；請參閱 :meth:`generator.close` "
"和 :meth:`coroutine.close`。它直接繼承自 :exc:`BaseException` 而不是 "
":exc:`Exception` 因為它在技術上不是錯誤。"

#: ../../library/exceptions.rst:219
#, fuzzy
msgid ""
"Raised when the :keyword:`import` statement has troubles trying to load a "
"module.  Also raised when the \"from list\" in ``from ... import`` has a "
"name that cannot be found."
msgstr ""
"當 :keyword:`import` 語句在嘗試加載模組時遇到問題時引發。當“from ... "
"import”中的“from list”有一個無法找到的名稱時也會引發。"

#: ../../library/exceptions.rst:223
#, fuzzy
msgid ""
"The :attr:`name` and :attr:`path` attributes can be set using keyword-only "
"arguments to the constructor. When set they represent the name of the module "
"that was attempted to be imported and the path to any file which triggered "
"the exception, respectively."
msgstr ""
":attr:`name` 和 :attr:`path` 屬性可以使用構造函式的僅關鍵字參數來設定。設定時"
"，它們分別表示嘗試導入的模組的名稱和触發例外的任何文件的路徑。"

#: ../../library/exceptions.rst:228
msgid "Added the :attr:`name` and :attr:`path` attributes."
msgstr "新增 :attr:`name` 與 :attr:`path` 屬性。"

#: ../../library/exceptions.rst:233
#, fuzzy
msgid ""
"A subclass of :exc:`ImportError` which is raised by :keyword:`import` when a "
"module could not be located.  It is also raised when ``None`` is found in :"
"data:`sys.modules`."
msgstr ""
":exc:`ImportError` 的子類別，當找不到模組時由 :keyword:`import` 引發。當在 "
":data:`sys.modules` 中發現``None`` 時也會引發。"

#: ../../library/exceptions.rst:242
#, fuzzy
msgid ""
"Raised when a sequence subscript is out of range.  (Slice indices are "
"silently truncated to fall in the allowed range; if an index is not an "
"integer, :exc:`TypeError` is raised.)"
msgstr "當序列下標超出範圍時引發。 "
"（切片索引被靜默截斷以落在允許的範圍內；如果索引不是整數，則會引發 "
":exc:`TypeError`。）"

#: ../../library/exceptions.rst:251
#, fuzzy
msgid ""
"Raised when a mapping (dictionary) key is not found in the set of existing "
"keys."
msgstr "在現有鍵集中找不到映射（字典）鍵時引發。"

#: ../../library/exceptions.rst:258
#, fuzzy
msgid ""
"Raised when the user hits the interrupt key (normally :kbd:`Control-C` or :"
"kbd:`Delete`).  During execution, a check for interrupts is made regularly. "
"The exception inherits from :exc:`BaseException` so as to not be "
"accidentally caught by code that catches :exc:`Exception` and thus prevent "
"the interpreter from exiting."
msgstr ""
"當使用者按下中斷鍵（通常是 :kbd:`Control-C` 或 "
":kbd:`Delete`）時引發。在執行期間，定期檢查中斷。該例外繼承自 "
":exc:`BaseException`，以免被捕獲 :exc:`Exception` "
"的程式碼意外捕獲，從而阻止直譯器退出。"

#: ../../library/exceptions.rst:266
#, fuzzy
msgid ""
"Catching a :exc:`KeyboardInterrupt` requires special consideration. Because "
"it can be raised at unpredictable points, it may, in some circumstances, "
"leave the running program in an inconsistent state. It is generally best to "
"allow :exc:`KeyboardInterrupt` to end the program as quickly as possible or "
"avoid raising it entirely. (See :ref:`handlers-and-exceptions`.)"
msgstr ""
"捕獲 :exc:`KeyboardInterrupt` 需要特別考慮。因為它可以在不可預測的點引發，所"
"以在某些情況下，它可能會使正在運行的程式處於不一致狀態。通常最好允許 "
":exc:`KeyboardInterrupt` 盡快結束程式或避免完全啟動它。 （參見 :ref"
":`handlers-and-exceptions`。）"

#: ../../library/exceptions.rst:276
#, fuzzy
msgid ""
"Raised when an operation runs out of memory but the situation may still be "
"rescued (by deleting some objects).  The associated value is a string "
"indicating what kind of (internal) operation ran out of memory. Note that "
"because of the underlying memory management architecture (C's :c:func:"
"`malloc` function), the interpreter may not always be able to completely "
"recover from this situation; it nevertheless raises an exception so that a "
"stack traceback can be printed, in case a run-away program was the cause."
msgstr ""
"當操作耗盡記憶體但情況仍可挽救時引發（通過刪除一些物件）。關聯值是一個字串，"
"指示哪種（內部）操作耗盡了記憶體。請注意，由於底層記憶體管理架構（C "
"的:c:func:`malloc` 函式），直譯器可能並不總是能夠從這種情況中完全恢復；儘管如"
"此，它還是會引發例外，以便可以印出堆疊回溯，以防程式失控。"

#: ../../library/exceptions.rst:287
#, fuzzy
msgid ""
"Raised when a local or global name is not found.  This applies only to "
"unqualified names.  The associated value is an error message that includes "
"the name that could not be found."
msgstr "當找不到本地或全局名稱時引發。這僅適用於非限定名稱。關聯值是一條錯誤消息，其"
"中包含無法找到的名稱。"

#: ../../library/exceptions.rst:291
#, fuzzy
msgid ""
"The :attr:`name` attribute can be set using a keyword-only argument to the "
"constructor. When set it represent the name of the variable that was "
"attempted to be accessed."
msgstr ":attr:`name` 屬性可以使用構造函式的僅關鍵字參數來設定。設定時，它代表試圖訪問"
"的變數的名稱。"

#: ../../library/exceptions.rst:295
msgid "Added the :attr:`name` attribute."
msgstr "新增 :attr:`name` 屬性。"

#: ../../library/exceptions.rst:301
#, fuzzy
msgid ""
"This exception is derived from :exc:`RuntimeError`.  In user defined base "
"classes, abstract methods should raise this exception when they require "
"derived classes to override the method, or while the class is being "
"developed to indicate that the real implementation still needs to be added."
msgstr ""
"此例外源自 :exc:`RuntimeError`。在使用者定義的基底類別中，當抽象方法需要派生"
"類重寫該方法時，或者在開發該類以指示仍需要新增真正的實作時，抽象方法應引發此"
"例外。"

#: ../../library/exceptions.rst:308
#, fuzzy
msgid ""
"It should not be used to indicate that an operator or method is not meant to "
"be supported at all -- in that case either leave the operator / method "
"undefined or, if a subclass, set it to :data:`None`."
msgstr ""
"它不應該用來表示一個運算符或方法根本不被支援——在這種情況下，要么保留運算符/方"
"法未定義，要么，如果是子類別，將其設定為 :data:`None`。"

#: ../../library/exceptions.rst:314
#, fuzzy
msgid ""
"``NotImplementedError`` and ``NotImplemented`` are not interchangeable, even "
"though they have similar names and purposes.  See :data:`NotImplemented` for "
"details on when to use it."
msgstr ""
"``NotImplementedError`` 和 ``NotImplemented`` 不可互換，即使它們具有相似的名"
"稱和用途。有關何時使用它的詳細資訊，請參閱 :data:`NotImplemented`。"

#: ../../library/exceptions.rst:323
#, fuzzy
msgid ""
"This exception is raised when a system function returns a system-related "
"error, including I/O failures such as \"file not found\" or \"disk "
"full\" (not for illegal argument types or other incidental errors)."
msgstr "當系統函式回傳與系統相關的錯誤時會引發此例外，包括 I/O "
"故障，例如“找不到文件”或“磁盤已滿”（不適用於非法參數型別或其他偶然錯誤）。"

#: ../../library/exceptions.rst:327
#, fuzzy
msgid ""
"The second form of the constructor sets the corresponding attributes, "
"described below.  The attributes default to :const:`None` if not specified.  "
"For backwards compatibility, if three arguments are passed, the :attr:"
"`~BaseException.args` attribute contains only a 2-tuple of the first two "
"constructor arguments."
msgstr ""
"構造函式的第二種形式設定相應的屬性，如下所述。如果未指定，則屬性預設為：const"
":`None`。為了向後相容，如果傳遞了三個參數，:attr:`~BaseException.args` "
"屬性僅包含前兩個構造函式參數的二元組。"

#: ../../library/exceptions.rst:333
#, fuzzy
msgid ""
"The constructor often actually returns a subclass of :exc:`OSError`, as "
"described in `OS exceptions`_ below.  The particular subclass depends on the "
"final :attr:`.errno` value.  This behaviour only occurs when constructing :"
"exc:`OSError` directly or via an alias, and is not inherited when "
"subclassing."
msgstr ""
"構造函式實際上通常回傳 :exc:`OSError` 的子類別，如下面的 `OS exceptions`_ "
"中所述。特定的子類別取決於最終的 :attr:`.errno` 值。"
"此行為僅在直接或通過別名構造 :exc:`OSError` "
"時發生，並且在子類別化時不會被繼承。"

#: ../../library/exceptions.rst:341
#, fuzzy
msgid "A numeric error code from the C variable :c:data:`errno`."
msgstr "來自 C 變數 :c:data:`errno` 的數字錯誤程式碼。"

#: ../../library/exceptions.rst:345
#, fuzzy
msgid ""
"Under Windows, this gives you the native Windows error code.  The :attr:`."
"errno` attribute is then an approximate translation, in POSIX terms, of that "
"native error code."
msgstr ""
"在 Windows 下，這會為您提供本機 Windows 錯誤程式碼。 :attr:`.errno` "
"屬性是該本地錯誤程式碼的近似翻譯，在 POSIX 術語中。"

#: ../../library/exceptions.rst:349
#, fuzzy
msgid ""
"Under Windows, if the *winerror* constructor argument is an integer, the :"
"attr:`.errno` attribute is determined from the Windows error code, and the "
"*errno* argument is ignored.  On other platforms, the *winerror* argument is "
"ignored, and the :attr:`winerror` attribute does not exist."
msgstr ""
"在 Windows 下，如果 *winerror* 構造函式參數是一個整數，則 :attr:`.errno` "
"屬性由 Windows 錯誤程式碼確定，並且忽略 *errno* "
"參數。在其他平台上，*winerror* 參數被忽略，並且 :attr:`winerror` 屬性不存在。"

#: ../../library/exceptions.rst:357
#, fuzzy
msgid ""
"The corresponding error message, as provided by the operating system.  It is "
"formatted by the C functions :c:func:`perror` under POSIX, and :c:func:"
"`FormatMessage` under Windows."
msgstr ""
"操作系統提供的相應錯誤消息。它由 POSIX 下的 C 函式 :c:func:`perror` 和 "
"Windows 下的 :c:func:`FormatMessage` 格式化。"

#: ../../library/exceptions.rst:365
#, fuzzy
msgid ""
"For exceptions that involve a file system path (such as :func:`open` or :"
"func:`os.unlink`), :attr:`filename` is the file name passed to the function. "
"For functions that involve two file system paths (such as :func:`os."
"rename`), :attr:`filename2` corresponds to the second file name passed to "
"the function."
msgstr ""
"對於涉及文件系統路徑的例外（例如 :func:`open` 或 :func:`os."
"unlink`），:attr:`filename` "
"是傳遞給函式的文件名。對於涉及兩個文件系統路徑的函式（例如 :func:`os."
"rename`），:attr:`filename2` 對應於傳遞給函式的第二個文件名。"

#: ../../library/exceptions.rst:372
#, fuzzy
msgid ""
":exc:`EnvironmentError`, :exc:`IOError`, :exc:`WindowsError`, :exc:`socket."
"error`, :exc:`select.error` and :exc:`mmap.error` have been merged into :exc:"
"`OSError`, and the constructor may return a subclass."
msgstr ""
":exc:`EnvironmentError`、:exc:`IOError`、:exc:`WindowsError`、:exc:`socket."
"error`、:exc:`select.error` 和 :exc:`mmap.error` 已合併到 :exc:`OSError` "
"中，構造函式可能會回傳一個子類別。"

#: ../../library/exceptions.rst:378
#, fuzzy
msgid ""
"The :attr:`filename` attribute is now the original file name passed to the "
"function, instead of the name encoded to or decoded from the :term:"
"`filesystem encoding and error handler`. Also, the *filename2* constructor "
"argument and attribute was added."
msgstr ""
":attr:`filename` 屬性現在是傳遞給函式的原始文件名，而不是從 :term:`filesystem "
"encoding and error handler` 編碼或解碼的名稱。此外，還新增了 *filename2* "
"構造函式參數和屬性。"

#: ../../library/exceptions.rst:387
#, fuzzy
msgid ""
"Raised when the result of an arithmetic operation is too large to be "
"represented.  This cannot occur for integers (which would rather raise :exc:"
"`MemoryError` than give up).  However, for historical reasons, OverflowError "
"is sometimes raised for integers that are outside a required range.   "
"Because of the lack of standardization of floating point exception handling "
"in C, most floating point operations are not checked."
msgstr ""
"當算術運算的結果太大而無法表示時引發。這不會發生在整數上（它寧願引發 "
":exc:`MemoryError` 而不是放棄）。但是，由於歷史原因，"
"有時會為超出所需範圍的整數引發 OverflowError。由於 C "
"中浮點例外處理缺乏標準化，大多數浮點運算都沒有檢查。"

#: ../../library/exceptions.rst:397
#, fuzzy
msgid ""
"This exception is derived from :exc:`RuntimeError`.  It is raised when the "
"interpreter detects that the maximum recursion depth (see :func:`sys."
"getrecursionlimit`) is exceeded."
msgstr ""
"此例外源自 :exc:`RuntimeError`。當直譯器檢測到超過最大遞迴深度（參見 "
":func:`sys.getrecursionlimit`）時引發。"

#: ../../library/exceptions.rst:401
#, fuzzy
msgid "Previously, a plain :exc:`RuntimeError` was raised."
msgstr "以前，引發了一個普通的 :exc:`RuntimeError`。"

#: ../../library/exceptions.rst:407
#, fuzzy
msgid ""
"This exception is raised when a weak reference proxy, created by the :func:"
"`weakref.proxy` function, is used to access an attribute of the referent "
"after it has been garbage collected. For more information on weak "
"references, see the :mod:`weakref` module."
msgstr ""
"當 :func:`weakref.proxy` 函式建立的弱引用代理用於在垃圾收集後訪問引用物件的屬"
"性時，會引發此例外。有關弱引用的更多資訊，請參閱 :mod:`weakref` 模組。"

#: ../../library/exceptions.rst:415
#, fuzzy
msgid ""
"Raised when an error is detected that doesn't fall in any of the other "
"categories.  The associated value is a string indicating what precisely went "
"wrong."
msgstr "當檢測到不屬於任何其他類別的錯誤時引發。關聯的值是一個字串，指示究竟出了什麼"
"問題。"

#: ../../library/exceptions.rst:422
#, fuzzy
msgid ""
"Raised by built-in function :func:`next` and an :term:`iterator`\\'s :meth:"
"`~iterator.__next__` method to signal that there are no further items "
"produced by the iterator."
msgstr ""
"由內建函式 :func:`next` 和 :term:`iterator`\\ 的 :meth:`~iterator.__next__` "
"方法引發，表示疊代器不再產生更多項。"

#: ../../library/exceptions.rst:426
#, fuzzy
msgid ""
"The exception object has a single attribute :attr:`value`, which is given as "
"an argument when constructing the exception, and defaults to :const:`None`."
msgstr "例外對像只有一個屬性 :attr:`value`，在構造例外時作為參數給出，預設為 :const:`"
"None`。"

#: ../../library/exceptions.rst:430
#, fuzzy
msgid ""
"When a :term:`generator` or :term:`coroutine` function returns, a new :exc:"
"`StopIteration` instance is raised, and the value returned by the function "
"is used as the :attr:`value` parameter to the constructor of the exception."
msgstr ""
"當 :term:`generator` 或 :term:`coroutine` 函式回傳時，會引發一個新的 "
":exc:`StopIteration` 實例，並且該函式回傳的值用作 :attr:`value` "
"的參數例外的構造函式。"

#: ../../library/exceptions.rst:435
#, fuzzy
msgid ""
"If a generator code directly or indirectly raises :exc:`StopIteration`, it "
"is converted into a :exc:`RuntimeError` (retaining the :exc:`StopIteration` "
"as the new exception's cause)."
msgstr ""
"如果生成器程式碼直接或間接引發 :exc:`StopIteration`，它會轉換為 "
":exc:`RuntimeError`（保留 :exc:`StopIteration` 作為新例外的原因）。"

#: ../../library/exceptions.rst:439
#, fuzzy
msgid ""
"Added ``value`` attribute and the ability for generator functions to use it "
"to return a value."
msgstr "新增了 ``value`` 屬性以及生成器函式使用它回傳值的能力。"

#: ../../library/exceptions.rst:443
#, fuzzy
msgid ""
"Introduced the RuntimeError transformation via ``from __future__ import "
"generator_stop``, see :pep:`479`."
msgstr ""
"通過 ``from __future__ import generator_stop`` 引入了 RuntimeError 轉換，"
"參見 :pep:`479`。"

#: ../../library/exceptions.rst:447
#, fuzzy
msgid ""
"Enable :pep:`479` for all code by default: a :exc:`StopIteration` error "
"raised in a generator is transformed into a :exc:`RuntimeError`."
msgstr ""
"預設情況下為所有程式碼啟用 :pep:`479`：生成器中引發的 :exc:`StopIteration` "
"錯誤被轉換為 :exc:`RuntimeError`。"

#: ../../library/exceptions.rst:453
#, fuzzy
msgid ""
"Must be raised by :meth:`__anext__` method of an :term:`asynchronous "
"iterator` object to stop the iteration."
msgstr "必須由非同步疊代器物件的 :meth:`__anext__` 方法引發以停止疊代。"

#: ../../library/exceptions.rst:460
#, fuzzy
msgid ""
"Raised when the parser encounters a syntax error.  This may occur in an :"
"keyword:`import` statement, in a call to the built-in functions :func:"
"`compile`, :func:`exec`, or :func:`eval`, or when reading the initial script "
"or standard input (also interactively)."
msgstr ""
"當解析器遇到語法錯誤時引發。這可能發生在 :keyword:`import` 語句、"
"呼叫內建函式 :func:`compile`、:func:`exec` 或 :func:`eval` "
"或讀取初始腳本時或標準輸入（也可以交互）。"

#: ../../library/exceptions.rst:466
#, fuzzy
msgid ""
"The :func:`str` of the exception instance returns only the error message. "
"Details is a tuple whose members are also available as separate attributes."
msgstr "例外實例的 :func:`str` 只回傳錯誤資訊。 Details "
"是一個元組，其成員也可作為單獨的屬性使用。"

#: ../../library/exceptions.rst:471
#, fuzzy
msgid "The name of the file the syntax error occurred in."
msgstr "發生語法錯誤的文件名。"

#: ../../library/exceptions.rst:475
#, fuzzy
msgid ""
"Which line number in the file the error occurred in. This is 1-indexed: the "
"first line in the file has a ``lineno`` of 1."
msgstr "文件中發生錯誤的行號。這是 1 索引的：文件中的第一行的 ``lineno`` 為 1。"

#: ../../library/exceptions.rst:480
#, fuzzy
msgid ""
"The column in the line where the error occurred. This is 1-indexed: the "
"first character in the line has an ``offset`` of 1."
msgstr "行中發生錯誤的列。這是 1 索引的：行中的第一個字元的“偏移量”為 1。"

#: ../../library/exceptions.rst:485
#, fuzzy
msgid "The source code text involved in the error."
msgstr "錯誤涉及的源程式碼文本。"

#: ../../library/exceptions.rst:489
#, fuzzy
msgid ""
"Which line number in the file the error occurred ends in. This is 1-indexed: "
"the first line in the file has a ``lineno`` of 1."
msgstr "文件中發生錯誤的行號結束。這是 1 索引的：文件中第一行的 lineno 為 1。"

#: ../../library/exceptions.rst:494
#, fuzzy
msgid ""
"The column in the end line where the error occurred finishes. This is 1-"
"indexed: the first character in the line has an ``offset`` of 1."
msgstr "發生錯誤的最後一行的列結束。這是 1 索引的：行中的第一個字元的“偏移量”為 1。"

#: ../../library/exceptions.rst:497
#, fuzzy
msgid ""
"For errors in f-string fields, the message is prefixed by \"f-string: \" and "
"the offsets are offsets in a text constructed from the replacement "
"expression.  For example, compiling f'Bad {a b} field' results in this args "
"attribute: ('f-string: ...', ('', 1, 2, '(a b)\\n', 1, 5))."
msgstr ""
"對於 f-string 欄位中的錯誤，消息以“f-string:”為前綴，偏移量是從替換錶達式構造"
"的文本中的偏移量。例如，編譯 f'Bad {a b} field' 會導致此 args "
"屬性：('f-string: ...', ('', 1, 2, '(a b)\\n"
"', 1, 5)) ."

#: ../../library/exceptions.rst:502
msgid "Added the :attr:`end_lineno` and :attr:`end_offset` attributes."
msgstr "新增 :attr:`end_lineno` 與 :attr:`end_offset` 屬性。"

#: ../../library/exceptions.rst:507
#, fuzzy
msgid ""
"Base class for syntax errors related to incorrect indentation.  This is a "
"subclass of :exc:`SyntaxError`."
msgstr "與不正確縮進相關的語法錯誤的基底類別。這是 :exc:`SyntaxError` 的子類別。"

#: ../../library/exceptions.rst:513
#, fuzzy
msgid ""
"Raised when indentation contains an inconsistent use of tabs and spaces. "
"This is a subclass of :exc:`IndentationError`."
msgstr "當縮進包含製表符和空格的不一致使用時引發。這是 :exc:`IndentationError` "
"的子類別。"

#: ../../library/exceptions.rst:519
#, fuzzy
msgid ""
"Raised when the interpreter finds an internal error, but the situation does "
"not look so serious to cause it to abandon all hope. The associated value is "
"a string indicating what went wrong (in low-level terms)."
msgstr "當直譯器發現內部錯誤時引發，但情況看起來並沒有嚴重到導致它放棄所有希望。關聯"
"值是一個字串，指示出了什麼問題（用低階術語）。"

#: ../../library/exceptions.rst:523
#, fuzzy
msgid ""
"You should report this to the author or maintainer of your Python "
"interpreter. Be sure to report the version of the Python interpreter (``sys."
"version``; it is also printed at the start of an interactive Python "
"session), the exact error message (the exception's associated value) and if "
"possible the source of the program that triggered the error."
msgstr ""
"您應該將此報告給 Python 直譯器的作者或維護者。請務必報告 Python "
"直譯器的版本（``sys.version``；它也會在交互式 Python 會話開始時印出）、確切的"
"錯誤消息（例外的關聯值）以及可能的話來源觸發錯誤的程式。"

#: ../../library/exceptions.rst:532
#, fuzzy
msgid ""
"This exception is raised by the :func:`sys.exit` function.  It inherits "
"from :exc:`BaseException` instead of :exc:`Exception` so that it is not "
"accidentally caught by code that catches :exc:`Exception`.  This allows the "
"exception to properly propagate up and cause the interpreter to exit.  When "
"it is not handled, the Python interpreter exits; no stack traceback is "
"printed.  The constructor accepts the same optional argument passed to :func:"
"`sys.exit`. If the value is an integer, it specifies the system exit status "
"(passed to C's :c:func:`exit` function); if it is ``None``, the exit status "
"is zero; if it has another type (such as a string), the object's value is "
"printed and the exit status is one."
msgstr ""
"此例外由 :func:`sys.exit` 函式引發。它繼承自 :exc:`BaseException` 而不是 "
":exc:`Exception` 這樣它就不會被捕獲 :exc:`Exception` 的程式碼意外捕獲。這允許"
"例外正確向上傳播並導致直譯器退出。不處理時，Python直譯器退出；沒有印出堆疊回"
"溯。構造函式接受傳遞給 :func:`sys.exit` "
"的相同可選參數。如果該值為整數，則它指定係統退出狀態（傳遞給 C 的 "
":c:func:`exit` 函式）；如果是 ``None``，則退出狀態為零；如果它有另一種型別（例如"
"字串），則印出物件的值並且退出狀態為一個。"

#: ../../library/exceptions.rst:543
#, fuzzy
msgid ""
"A call to :func:`sys.exit` is translated into an exception so that clean-up "
"handlers (:keyword:`finally` clauses of :keyword:`try` statements) can be "
"executed, and so that a debugger can execute a script without running the "
"risk of losing control.  The :func:`os._exit` function can be used if it is "
"absolutely positively necessary to exit immediately (for example, in the "
"child process after a call to :func:`os.fork`)."
msgstr ""
"對 :func:`sys.exit` "
"的呼叫被轉換為例外，以便可以執行清理處理程式（:keyword:`try` "
"語句的 :keyword:`finally` 子句），這樣除錯器就可以執行一個沒有失去控制風險的腳"
"本。如果絕對有必要立即退出（例如，在呼叫 :func:`os.fork` 後的子行程中），"
"則可以使用 :func:`os._exit` 函式。"

#: ../../library/exceptions.rst:552
#, fuzzy
msgid ""
"The exit status or error message that is passed to the constructor. "
"(Defaults to ``None``.)"
msgstr "傳遞給構造函式的退出狀態或錯誤消息。 （預設為 ``None`` 。）"

#: ../../library/exceptions.rst:558
#, fuzzy
msgid ""
"Raised when an operation or function is applied to an object of "
"inappropriate type.  The associated value is a string giving details about "
"the type mismatch."
msgstr "當操作或功能應用於不適當型別的物件時引發。關聯值是一個字串，提供有關型別不匹"
"配的詳細資訊。"

#: ../../library/exceptions.rst:561
#, fuzzy
msgid ""
"This exception may be raised by user code to indicate that an attempted "
"operation on an object is not supported, and is not meant to be. If an "
"object is meant to support a given operation but has not yet provided an "
"implementation, :exc:`NotImplementedError` is the proper exception to raise."
msgstr ""
"使用者程式碼可能會引發此例外，以指示不支援對物件進行的嘗試操作，而且本意並非"
"如此。如果一個物件旨在支援給定的操作但尚未提供實作，則 "
":exc:`NotImplementedError` 是引發的正確例外。"

#: ../../library/exceptions.rst:566
#, fuzzy
msgid ""
"Passing arguments of the wrong type (e.g. passing a :class:`list` when an :"
"class:`int` is expected) should result in a :exc:`TypeError`, but passing "
"arguments with the wrong value (e.g. a number outside expected boundaries) "
"should result in a :exc:`ValueError`."
msgstr ""
"傳遞錯誤型別的參數（例如，在需要 :class:`int` 時傳遞 :class:`list`）應該導致 "
":exc:`TypeError`，但傳遞錯誤值的參數（例如，一個數字在外面預期邊界）應該導致 "
":exc:`ValueError`。"

#: ../../library/exceptions.rst:573
#, fuzzy
msgid ""
"Raised when a reference is made to a local variable in a function or method, "
"but no value has been bound to that variable.  This is a subclass of :exc:"
"`NameError`."
msgstr "當在函式或方法中引用局部變數但沒有值綁定到該變數時引發。這是 :exc:`NameError`"
" 的子類別。"

#: ../../library/exceptions.rst:580
#, fuzzy
msgid ""
"Raised when a Unicode-related encoding or decoding error occurs.  It is a "
"subclass of :exc:`ValueError`."
msgstr "當發生與 Unicode 相關的編碼或解碼錯誤時引發。它是 :exc:`ValueError` "
"的子類別。"

#: ../../library/exceptions.rst:583
#, fuzzy
msgid ""
":exc:`UnicodeError` has attributes that describe the encoding or decoding "
"error.  For example, ``err.object[err.start:err.end]`` gives the particular "
"invalid input that the codec failed on."
msgstr ""
":exc:`UnicodeError` 具有描述編碼或解碼錯誤的屬性。例如，``err.object[err."
"start:err.end]`` 給出編解碼器失敗的特定無效輸入。"

#: ../../library/exceptions.rst:589
#, fuzzy
msgid "The name of the encoding that raised the error."
msgstr "引發錯誤的編碼的名稱。"

#: ../../library/exceptions.rst:593
#, fuzzy
msgid "A string describing the specific codec error."
msgstr "描述特定編解碼器錯誤的字串。"

#: ../../library/exceptions.rst:597
#, fuzzy
msgid "The object the codec was attempting to encode or decode."
msgstr "編解碼器試圖編碼或解碼的物件。"

#: ../../library/exceptions.rst:601
#, fuzzy
msgid "The first index of invalid data in :attr:`object`."
msgstr ":attr:`object` 中無效資料的第一個索引。"

#: ../../library/exceptions.rst:605
#, fuzzy
msgid "The index after the last invalid data in :attr:`object`."
msgstr ":attr:`object` 中最後一個無效資料之後的索引。"

#: ../../library/exceptions.rst:610
#, fuzzy
msgid ""
"Raised when a Unicode-related error occurs during encoding.  It is a "
"subclass of :exc:`UnicodeError`."
msgstr "在編碼期間發生與 Unicode 相關的錯誤時引發。它是 :exc:`UnicodeError` "
"的子類別。"

#: ../../library/exceptions.rst:616
#, fuzzy
msgid ""
"Raised when a Unicode-related error occurs during decoding.  It is a "
"subclass of :exc:`UnicodeError`."
msgstr "在解碼期間發生與 Unicode 相關的錯誤時引發。它是 :exc:`UnicodeError` "
"的子類別。"

#: ../../library/exceptions.rst:622
#, fuzzy
msgid ""
"Raised when a Unicode-related error occurs during translating.  It is a "
"subclass of :exc:`UnicodeError`."
msgstr "在翻譯過程中發生與 Unicode 相關的錯誤時引發。它是 :exc:`UnicodeError` "
"的子類別。"

#: ../../library/exceptions.rst:628
#, fuzzy
msgid ""
"Raised when an operation or function receives an argument that has the right "
"type but an inappropriate value, and the situation is not described by a "
"more precise exception such as :exc:`IndexError`."
msgstr "當操作或函式接收到具有正確型別但值不合適的參數時引發，並且這種情況沒有用更精"
"確的例外描述，例如 :exc:`IndexError`。"

#: ../../library/exceptions.rst:635
#, fuzzy
msgid ""
"Raised when the second argument of a division or modulo operation is zero.  "
"The associated value is a string indicating the type of the operands and the "
"operation."
msgstr "當除法或模運算的第二個參數為零時引發。關聯值是一個字串，指示操作數和操作的型"
"別。"

#: ../../library/exceptions.rst:640
#, fuzzy
msgid ""
"The following exceptions are kept for compatibility with previous versions; "
"starting from Python 3.3, they are aliases of :exc:`OSError`."
msgstr "為了與以前的版本相容，保留了以下例外情況；從 Python 3.3 開始，它們是 "
":exc:`OSError` 的別名。"

#: ../../library/exceptions.rst:649
#, fuzzy
msgid "Only available on Windows."
msgstr "僅適用於 Windows。"

#: ../../library/exceptions.rst:653
#, fuzzy
msgid "OS exceptions"
msgstr "操作系統例外"

#: ../../library/exceptions.rst:655
#, fuzzy
msgid ""
"The following exceptions are subclasses of :exc:`OSError`, they get raised "
"depending on the system error code."
msgstr "以下例外是 :exc:`OSError` 的子類別，它們根據系統錯誤程式碼引發。"

#: ../../library/exceptions.rst:660
#, fuzzy
msgid ""
"Raised when an operation would block on an object (e.g. socket) set for non-"
"blocking operation. Corresponds to :c:data:`errno` :py:data:`~errno."
"EAGAIN`, :py:data:`~errno.EALREADY`, :py:data:`~errno.EWOULDBLOCK` and :py:"
"data:`~errno.EINPROGRESS`."
msgstr ""
"當操作將阻塞為非阻塞操作設定的物件（例如 socket ）時引發。對應於:c:data:`errno`"
" :py:data:`~errno.EAGAIN`, :py:data:`~errno.EALREADY`, :py:data:`~errno."
"EWOULDBLOCK` 和:py:data :`~errno.EINPROGRESS`。"

#: ../../library/exceptions.rst:665
#, fuzzy
msgid ""
"In addition to those of :exc:`OSError`, :exc:`BlockingIOError` can have one "
"more attribute:"
msgstr "除了 :exc:`OSError` 之外，:exc:`BlockingIOError` 還可以有一個屬性："

#: ../../library/exceptions.rst:670
#, fuzzy
msgid ""
"An integer containing the number of characters written to the stream before "
"it blocked.  This attribute is available when using the buffered I/O classes "
"from the :mod:`io` module."
msgstr "一個整數，包含在阻塞之前寫入流的字元數。當使用來自 :mod:`io` 模組的緩衝 I/O "
"類時，此屬性可用。"

#: ../../library/exceptions.rst:676
#, fuzzy
msgid ""
"Raised when an operation on a child process failed. Corresponds to :c:data:"
"`errno` :py:data:`~errno.ECHILD`."
msgstr ""
"當對子行程的操作失敗時引發。對應於 :c:data:`errno` "
":py:data:`~errno.ECHILD`。"

#: ../../library/exceptions.rst:681
#, fuzzy
msgid "A base class for connection-related issues."
msgstr "連接相關問題的基底類別。"

#: ../../library/exceptions.rst:683
#, fuzzy
msgid ""
"Subclasses are :exc:`BrokenPipeError`, :exc:`ConnectionAbortedError`, :exc:"
"`ConnectionRefusedError` and :exc:`ConnectionResetError`."
msgstr ""
"子類別是 :exc:`BrokenPipeError`、:exc:`ConnectionAbortedError`、:exc:`Connect"
"ionRefusedError` 和 :exc:`ConnectionResetError`。"

#: ../../library/exceptions.rst:688
#, fuzzy
msgid ""
"A subclass of :exc:`ConnectionError`, raised when trying to write on a pipe "
"while the other end has been closed, or trying to write on a socket which "
"has been shutdown for writing. Corresponds to :c:data:`errno` :py:data:"
"`~errno.EPIPE` and :py:data:`~errno.ESHUTDOWN`."
msgstr ""
":exc:`ConnectionError` 的子類別，在另一端已關閉時嘗試在管道上寫入時引發，或試"
"圖在已關閉以進行寫入的 socket 上寫入時引發。對應於 :c:data:`errno` "
":py:data:`~errno.EPIPE` 和 :py:data:`~errno.ESHUTDOWN`。"

#: ../../library/exceptions.rst:695
#, fuzzy
msgid ""
"A subclass of :exc:`ConnectionError`, raised when a connection attempt is "
"aborted by the peer. Corresponds to :c:data:`errno` :py:data:`~errno."
"ECONNABORTED`."
msgstr ""
":exc:`ConnectionError` 的子類別，在連接嘗試被對等方中止時引發。對應於 "
":c:data:`errno` :py:data:`~errno.ECONNABORTED`。"

#: ../../library/exceptions.rst:701
#, fuzzy
msgid ""
"A subclass of :exc:`ConnectionError`, raised when a connection attempt is "
"refused by the peer. Corresponds to :c:data:`errno` :py:data:`~errno."
"ECONNREFUSED`."
msgstr ""
":exc:`ConnectionError` "
"的子類別，在對等方拒絕連接嘗試時引發。對應於 :c:data:`errno` :py:data:`~errno"
".ECONNREFUSED`。"

#: ../../library/exceptions.rst:707
#, fuzzy
msgid ""
"A subclass of :exc:`ConnectionError`, raised when a connection is reset by "
"the peer. Corresponds to :c:data:`errno` :py:data:`~errno.ECONNRESET`."
msgstr ""
":exc:`ConnectionError` "
"的子類別，在對等方重置連接時引發。對應於 :c:data:`errno` :py:data:`~errno."
"ECONNRESET`。"

#: ../../library/exceptions.rst:713
#, fuzzy
msgid ""
"Raised when trying to create a file or directory which already exists. "
"Corresponds to :c:data:`errno` :py:data:`~errno.EEXIST`."
msgstr "嘗試建立已存在的文件或目錄時引發。對應於 :c:data:`errno` :py:data:`~errno."
"EEXIST`。"

#: ../../library/exceptions.rst:718
#, fuzzy
msgid ""
"Raised when a file or directory is requested but doesn't exist. Corresponds "
"to :c:data:`errno` :py:data:`~errno.ENOENT`."
msgstr "當請求文件或目錄但不存在時引發。對應於 :c:data:`errno` :py:data:`~errno."
"ENOENT`。"

#: ../../library/exceptions.rst:723
#, fuzzy
msgid ""
"Raised when a system call is interrupted by an incoming signal. Corresponds "
"to :c:data:`errno` :py:data:`~errno.EINTR`."
msgstr "當系統呼叫被傳入信號中斷時引發。對應於 :c:data:`errno` :py:data:`~errno."
"EINTR`。"

#: ../../library/exceptions.rst:726
#, fuzzy
msgid ""
"Python now retries system calls when a syscall is interrupted by a signal, "
"except if the signal handler raises an exception (see :pep:`475` for the "
"rationale), instead of raising :exc:`InterruptedError`."
msgstr ""
"Python 現在會在系統呼叫被信號中斷時重試系統呼叫，除非信號處理程式引發例外（"
"請參閱 :pep:`475` 了解基本原理），而不是引發 :exc:`InterruptedError`。"

#: ../../library/exceptions.rst:733
#, fuzzy
msgid ""
"Raised when a file operation (such as :func:`os.remove`) is requested on a "
"directory. Corresponds to :c:data:`errno` :py:data:`~errno.EISDIR`."
msgstr ""
"在目錄上請求文件操作（例如 :func:`os.remove`）時引發。對應於 :c:data:`errno` "
":py:data:`~errno.EISDIR`。"

#: ../../library/exceptions.rst:739
#, fuzzy
msgid ""
"Raised when a directory operation (such as :func:`os.listdir`) is requested "
"on something which is not a directory.  On most POSIX platforms, it may also "
"be raised if an operation attempts to open or traverse a non-directory file "
"as if it were a directory. Corresponds to :c:data:`errno` :py:data:`~errno."
"ENOTDIR`."
msgstr ""
"當在非目錄的對像上請求目錄操作（例如 :func:`os.listdir`）時引發。在大多數 "
"POSIX 平台上，如果一個操作試圖打開或遍歷一個非目錄文件，就好像它是一個目錄一"
"樣，它也可能會被引發。對應於 :c:data:`errno` :py:data:`~errno.ENOTDIR`。"

#: ../../library/exceptions.rst:747
#, fuzzy
msgid ""
"Raised when trying to run an operation without the adequate access rights - "
"for example filesystem permissions. Corresponds to :c:data:`errno` :py:data:"
"`~errno.EACCES`, :py:data:`~errno.EPERM`, and :py:data:`~errno.ENOTCAPABLE`."
msgstr ""
"在沒有足夠訪問權限的情況下嘗試運行操作時引發 - "
"例如文件系統權限。對應於 :c:data:`errno` :py:data:`~errno."
"EACCES`、:py:data:`~errno.EPERM` 和 :py:data:`~errno.ENOTCAPABLE`。"

#: ../../library/exceptions.rst:752
#, fuzzy
msgid ""
"WASI's :py:data:`~errno.ENOTCAPABLE` is now mapped to :exc:`PermissionError`."
msgstr "WASI 的 :py:data:`~errno.ENOTCAPABLE` 現在映射到 :exc:`PermissionError`。"

#: ../../library/exceptions.rst:758
#, fuzzy
msgid ""
"Raised when a given process doesn't exist. Corresponds to :c:data:`errno` :"
"py:data:`~errno.ESRCH`."
msgstr "當給定行程不存在時引發。對應於 :c:data:`errno` :py:data:`~errno.ESRCH`。"

#: ../../library/exceptions.rst:763
#, fuzzy
msgid ""
"Raised when a system function timed out at the system level. Corresponds to :"
"c:data:`errno` :py:data:`~errno.ETIMEDOUT`."
msgstr "當系統功能在系統級別超時時引發。對應於 :c:data:`errno` :py:data:`~errno."
"ETIMEDOUT`。"

#: ../../library/exceptions.rst:766
#, fuzzy
msgid "All the above :exc:`OSError` subclasses were added."
msgstr "新增了以上所有 :exc:`OSError` 子類別。"

#: ../../library/exceptions.rst:772
#, fuzzy
msgid ":pep:`3151` - Reworking the OS and IO exception hierarchy"
msgstr ":pep:`3151` - 重新設計操作系統和 IO 例外層次結構"

#: ../../library/exceptions.rst:778
msgid "Warnings"
msgstr "警告"

#: ../../library/exceptions.rst:780
#, fuzzy
msgid ""
"The following exceptions are used as warning categories; see the :ref:"
"`warning-categories` documentation for more details."
msgstr "以下例外情況用作警告類別；有關詳細資訊，請參閱 :ref:`warning-categories` "
"文檔。"

#: ../../library/exceptions.rst:785
#, fuzzy
msgid "Base class for warning categories."
msgstr "警告類別的基底類別。"

#: ../../library/exceptions.rst:790
#, fuzzy
msgid "Base class for warnings generated by user code."
msgstr "使用者程式碼生成的警告的基底類別。"

#: ../../library/exceptions.rst:795
#, fuzzy
msgid ""
"Base class for warnings about deprecated features when those warnings are "
"intended for other Python developers."
msgstr "當這些警告是針對其他 Python 開發人員時，有關已棄用功能的警告的基底類別。"

#: ../../library/exceptions.rst:798
#, fuzzy
msgid ""
"Ignored by the default warning filters, except in the ``__main__`` module (:"
"pep:`565`). Enabling the :ref:`Python Development Mode <devmode>` shows this "
"warning."
msgstr ""
"被預設警告過濾器忽略，除了在 ``__main__`` 模組 (:pep:`565`) 中。啟用 :ref:`"
"Python 開發模式 <devmode>` 會顯示此警告。"

#: ../../library/exceptions.rst:802 ../../library/exceptions.rst:818
#, fuzzy
msgid "The deprecation policy is described in :pep:`387`."
msgstr "棄用政策在 :pep:`387` 中描述。"

#: ../../library/exceptions.rst:807
#, fuzzy
msgid ""
"Base class for warnings about features which are obsolete and expected to be "
"deprecated in the future, but are not deprecated at the moment."
msgstr "有關已過時且預計將在未來棄用但目前未棄用的功能的警告的基底類別。"

#: ../../library/exceptions.rst:811
#, fuzzy
msgid ""
"This class is rarely used as emitting a warning about a possible upcoming "
"deprecation is unusual, and :exc:`DeprecationWarning` is preferred for "
"already active deprecations."
msgstr "此類很少使用，因為發出關於可能即將棄用的警告是不尋常的，並且 "
":exc:`DeprecationWarning` 是已經有效的棄用的首選。"

#: ../../library/exceptions.rst:815 ../../library/exceptions.rst:841
#: ../../library/exceptions.rst:868
#, fuzzy
msgid ""
"Ignored by the default warning filters. Enabling the :ref:`Python "
"Development Mode <devmode>` shows this warning."
msgstr "被預設警告過濾器忽略。啟用 :ref:`Python 開發模式 <devmode>` 會顯示此警告。"

#: ../../library/exceptions.rst:823
#, fuzzy
msgid "Base class for warnings about dubious syntax."
msgstr "關於可疑語法警告的基底類別。"

#: ../../library/exceptions.rst:828
#, fuzzy
msgid "Base class for warnings about dubious runtime behavior."
msgstr "關於可疑運行時行為的警告的基底類別。"

#: ../../library/exceptions.rst:833
#, fuzzy
msgid ""
"Base class for warnings about deprecated features when those warnings are "
"intended for end users of applications that are written in Python."
msgstr "當這些警告是針對用 Python "
"編寫的應用程式的最終使用者時，有關已棄用功能的警告的基底類別。"

#: ../../library/exceptions.rst:839
#, fuzzy
msgid "Base class for warnings about probable mistakes in module imports."
msgstr "關於模組導入中可能錯誤的警告的基底類別。"

#: ../../library/exceptions.rst:847
#, fuzzy
msgid "Base class for warnings related to Unicode."
msgstr "與 Unicode 相關的警告的基底類別。"

#: ../../library/exceptions.rst:852
#, fuzzy
msgid "Base class for warnings related to encodings."
msgstr "與編碼相關的警告的基底類別。"

#: ../../library/exceptions.rst:854
msgid "See :ref:`io-encoding-warning` for details."
msgstr "細節請見 :ref:`io-encoding-warning`\\ 。"

#: ../../library/exceptions.rst:861
#, fuzzy
msgid ""
"Base class for warnings related to :class:`bytes` and :class:`bytearray`."
msgstr "與 :class:`bytes` 和 :class:`bytearray` 相關的警告的基底類別。"

#: ../../library/exceptions.rst:866
#, fuzzy
msgid "Base class for warnings related to resource usage."
msgstr "與資源使用相關的警告的基底類別。"

#: ../../library/exceptions.rst:875
#, fuzzy
msgid "Exception groups"
msgstr "例外組"

#: ../../library/exceptions.rst:877
#, fuzzy
msgid ""
"The following are used when it is necessary to raise multiple unrelated "
"exceptions. They are part of the exception hierarchy so they can be handled "
"with :keyword:`except` like all other exceptions. In addition, they are "
"recognised by :keyword:`except*<except_star>`, which matches their subgroups "
"based on the types of the contained exceptions."
msgstr ""
"當需要引發多個不相關的例外時使用以下內容。它們是例外層次結構的一部分，"
"因此可以像所有其他例外一樣使用 :keyword:`except` 進行處理。此外，它們由 "
":keyword:`except*<except_star>` 識別，它根據包含的例外的型別匹配它們的子組。"

#: ../../library/exceptions.rst:886
#, fuzzy
msgid ""
"Both of these exception types wrap the exceptions in the sequence ``excs``. "
"The ``msg`` parameter must be a string. The difference between the two "
"classes is that :exc:`BaseExceptionGroup` extends :exc:`BaseException` and "
"it can wrap any exception, while :exc:`ExceptionGroup` extends :exc:"
"`Exception` and it can only wrap subclasses of :exc:`Exception`. This design "
"is so that ``except Exception`` catches an :exc:`ExceptionGroup` but not :"
"exc:`BaseExceptionGroup`."
msgstr ""
"這兩種例外型別都將例外包裝在序列 ``excs``中。 ``msg`` "
"參數必須是字串。這兩個類之間的區別在於 :exec:`BaseExceptionGroup` 擴充了 "
":exc:`BaseException` 並且它可以包裝任何例外，而 :exc:`ExceptionGroup` 擴充了 "
":exc:`Exception` 並且它只能包裝以下類的子類別 :exc:`例外`。"
"這種設計是為了讓 ``except Exception`` 捕獲 :exc:`ExceptionGroup` 而不是 "
":exc:`BaseExceptionGroup`。"

#: ../../library/exceptions.rst:894
#, fuzzy
msgid ""
"The :exc:`BaseExceptionGroup` constructor returns an :exc:`ExceptionGroup` "
"rather than a :exc:`BaseExceptionGroup` if all contained exceptions are :exc:"
"`Exception` instances, so it can be used to make the selection automatic. "
"The :exc:`ExceptionGroup` constructor, on the other hand, raises a :exc:"
"`TypeError` if any contained exception is not an :exc:`Exception` subclass."
msgstr ""
":exc:`BaseExceptionGroup` 構造函式回傳一個 :exc:`ExceptionGroup` 而不是 "
":exc:`BaseExceptionGroup` 如果所有包含的例外都是 :exc:`Exception` "
"實例，因此它可用於自動選擇。另一方面，如果任何包含的例外不是 Exception "
"子類別，則 ExceptionGroup 構造函式會引發 TypeError。"

#: ../../library/exceptions.rst:903
#, fuzzy
msgid "The ``msg`` argument to the constructor. This is a read-only attribute."
msgstr "構造函式的 ``msg`` 參數。這是一個只讀屬性。"

#: ../../library/exceptions.rst:907
#, fuzzy
msgid ""
"A tuple of the exceptions in the ``excs`` sequence given to the constructor. "
"This is a read-only attribute."
msgstr "給構造函式的 ``excs`` 序列中的例外元組。這是一個只讀屬性。"

#: ../../library/exceptions.rst:912
#, fuzzy
msgid ""
"Returns an exception group that contains only the exceptions from the "
"current group that match *condition*, or ``None`` if the result is empty."
msgstr "回傳一個例外組，該組僅包含當前組中與 *condition* 匹配的例外，如果結果為空，"
"則回傳 ``None``。"

#: ../../library/exceptions.rst:915
#, fuzzy
msgid ""
"The condition can be either a function that accepts an exception and returns "
"true for those that should be in the subgroup, or it can be an exception "
"type or a tuple of exception types, which is used to check for a match using "
"the same check that is used in an ``except`` clause."
msgstr ""
"條件可以是接受例外並為應該在子組中的例外回傳 true "
"的函式，也可以是例外型別或例外型別的元組，用於使用相同的檢查來檢查匹配用於 "
"``except`` 子句中。"

#: ../../library/exceptions.rst:920
#, fuzzy
msgid ""
"The nesting structure of the current exception is preserved in the result, "
"as are the values of its :attr:`message`, :attr:`__traceback__`, :attr:"
"`__cause__`, :attr:`__context__` and :attr:`__notes__` fields. Empty nested "
"groups are omitted from the result."
msgstr ""
"當前例外的嵌套結構保留在結果中，其 :attr:`message`、:attr:`__traceback__`、:a"
"ttr:`__cause__`、:attr:`__context__` 和 :attr: 的值也是如此`__notes__` "
"欄位。結果中省略了空嵌套組。"

#: ../../library/exceptions.rst:925
#, fuzzy
msgid ""
"The condition is checked for all exceptions in the nested exception group, "
"including the top-level and any nested exception groups. If the condition is "
"true for such an exception group, it is included in the result in full."
msgstr "檢查嵌套例外組中所有例外的條件，包括頂級例外組和任何嵌套例外組。如果此類例外"
"組的條件為真，則它會完整包含在結果中。"

#: ../../library/exceptions.rst:931
#, fuzzy
msgid ""
"Like :meth:`subgroup`, but returns the pair ``(match, rest)`` where "
"``match`` is ``subgroup(condition)`` and ``rest`` is the remaining non-"
"matching part."
msgstr ""
"像 :meth:`subgroup`，但回傳對 ``(match, rest)`` 其中 ``match`` 是 "
"``subgroup(condition)`` 而 ``rest`` 是剩餘的非匹配部分。"

#: ../../library/exceptions.rst:937
#, fuzzy
msgid ""
"Returns an exception group with the same :attr:`message`, but which wraps "
"the exceptions in ``excs``."
msgstr "回傳具有相同 :attr:`message` 的例外組，但將例外包裝在 ``excs`` 中。"

#: ../../library/exceptions.rst:940
#, fuzzy
msgid ""
"This method is used by :meth:`subgroup` and :meth:`split`. A subclass needs "
"to override it in order to make :meth:`subgroup` and :meth:`split` return "
"instances of the subclass rather than :exc:`ExceptionGroup`."
msgstr ""
"此方法由 :meth:`subgroup` 和 :meth:`split` 使用。子類別需要重寫它以使 "
":meth:`subgroup` 和 :meth:`split` 回傳子類別的實例而不是 "
":exc:`ExceptionGroup`。"

#: ../../library/exceptions.rst:945
#, fuzzy
msgid ""
":meth:`subgroup` and :meth:`split` copy the :attr:`__traceback__`, :attr:"
"`__cause__`, :attr:`__context__` and :attr:`__notes__` fields from the "
"original exception group to the one returned by :meth:`derive`, so these "
"fields do not need to be updated by :meth:`derive`. ::"
msgstr ""
":meth:`subgroup` 和 :meth:`split` 將 "
":attr:`__traceback__`、:attr:`__cause__`、:attr:`__context__` 和 "
":attr:`__notes__` 欄位從原始例外組複製到一個由 :meth:`derive` 回傳，"
"因此這些欄位不需要由 :meth:`derive` 更新。 ::"

#: ../../library/exceptions.rst:974
#, fuzzy
msgid ""
"Note that :exc:`BaseExceptionGroup` defines :meth:`__new__`, so subclasses "
"that need a different constructor signature need to override that rather "
"than :meth:`__init__`. For example, the following defines an exception group "
"subclass which accepts an exit_code and and constructs the group's message "
"from it. ::"
msgstr ""
"請注意 :exec:`BaseExceptionGroup` 定義了 :meth:`__new__`，因此需要不同構造函式"
"簽名的子類別需要覆蓋它而不是 :meth:`__init__`。例如，下面定義了一個例外組子類"
"別，它接受一個 exit_code 並從中構造組的消息。 ::"

#: ../../library/exceptions.rst:989
#, fuzzy
msgid ""
"Like :exc:`ExceptionGroup`, any subclass of :exc:`BaseExceptionGroup` which "
"is also a subclass of :exc:`Exception` can only wrap instances of :exc:"
"`Exception`."
msgstr ""
"與 :exc:`ExceptionGroup` 一樣，任何 :exc:`BaseExceptionGroup` 的子類別也是 "
":exc:`Exception` 的子類別，只能包裝 :exc:`Exception` 的實例。"

#: ../../library/exceptions.rst:997
#, fuzzy
msgid "Exception hierarchy"
msgstr "例外層次結構"

#: ../../library/exceptions.rst:999
#, fuzzy
msgid "The class hierarchy for built-in exceptions is:"
msgstr "內建例外的類層次結構是："
