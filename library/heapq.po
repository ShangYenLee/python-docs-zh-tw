# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Liang-Bo Wang <me@liang2.tw>, 2016
# 周 忠毅 <rilakcrc35@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-19 17:24+0800\n"
"PO-Revision-Date: 2017-09-22 18:26+0000\n"
"Last-Translator: Liang-Bo Wang <me@liang2.tw>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/heapq.rst:2
msgid ":mod:`heapq` --- Heap queue algorithm"
msgstr ":mod:`heapq` --- 堆積佇列 (heap queue) 演算法"

#: ../../library/heapq.rst:12
msgid "**Source code:** :source:`Lib/heapq.py`"
msgstr "**原始碼：**\\ :source:`Lib/heapq.py`"

#: ../../library/heapq.rst:16
msgid ""
"This module provides an implementation of the heap queue algorithm, also "
"known as the priority queue algorithm."
msgstr ""
"這個模組實作了堆積佇列 (heap queue) 演算法，亦被稱為優先佇列 (priority "
"queue) 演算法。"

#: ../../library/heapq.rst:19
msgid ""
"Heaps are binary trees for which every parent node has a value less than or "
"equal to any of its children.  This implementation uses arrays for which "
"``heap[k] <= heap[2*k+1]`` and ``heap[k] <= heap[2*k+2]`` for all *k*, "
"counting elements from zero.  For the sake of comparison, non-existing "
"elements are considered to be infinite.  The interesting property of a heap "
"is that its smallest element is always the root, ``heap[0]``."
msgstr ""
"Heap（堆積）是一顆二元樹，樹上所有父節點的值都小於等於他的子節點的值。使用陣"
"列實作，對於所有從0開始的 *k* 都滿足 ``heap[k] <= heap[2*k+1]`` 和 ``heap[k] "
"<= heap[2*k+2]`` 。為了比較節點的值，不存在的元素被視為無限大。heap 存在一個"
"有趣的性質：樹上最小的元素永遠會在根節點 ``heap[0]`` 上。"

#: ../../library/heapq.rst:26
msgid ""
"The API below differs from textbook heap algorithms in two aspects: (a) We "
"use zero-based indexing.  This makes the relationship between the index for "
"a node and the indexes for its children slightly less obvious, but is more "
"suitable since Python uses zero-based indexing. (b) Our pop method returns "
"the smallest item, not the largest (called a \"min heap\" in textbooks; a "
"\"max heap\" is more common in texts because of its suitability for in-place "
"sorting)."
msgstr ""
"下方的 API 跟一般教科書的 heap queue 演算法有兩個方面不同：第一，我們的索引"
"從 0 開始計算，這會父節點與子節點之間的關係產生很微小的差異，但更符合 Python "
"從 0 開始索引的設計。第二，我們的 pop 方法會回傳最小的元素而不是最大的元素 "
"（ 在教科書中被稱作 \"min heap\"，而 \"max heap\" 因為他很適合做原地排序，所"
"以更常出現在教科書中 ）。"

#: ../../library/heapq.rst:33
msgid ""
"These two make it possible to view the heap as a regular Python list without "
"surprises: ``heap[0]`` is the smallest item, and ``heap.sort()`` maintains "
"the heap invariant!"
msgstr ""
"這兩個特性使得把 heap 當作一個標準的 Python list 檢視時不會出現意外："
"``heap[0]`` 是最小的物件，``heap.sort()`` 能保持 heap 的性質不變！"

#: ../../library/heapq.rst:37
msgid ""
"To create a heap, use a list initialized to ``[]``, or you can transform a "
"populated list into a heap via function :func:`heapify`."
msgstr ""
"建立一個 heap 可以使用 list 初始化為 ``[]``，或者使用函式 :func:`heapify`  將"
"一個已經有元素的 list轉成一個 heap。"

#: ../../library/heapq.rst:40
msgid "The following functions are provided:"
msgstr "此模組提供下面的函式"

#: ../../library/heapq.rst:45
msgid "Push the value *item* onto the *heap*, maintaining the heap invariant."
msgstr "把 *item* 放進 *heap*，並保持 heap 性質不變。"

#: ../../library/heapq.rst:50
msgid ""
"Pop and return the smallest item from the *heap*, maintaining the heap "
"invariant.  If the heap is empty, :exc:`IndexError` is raised.  To access "
"the smallest item without popping it, use ``heap[0]``."
msgstr ""
"從 *heap* 取出並回傳最小的元素，同時保持 heap 性質不變。如果 heap 是空的會產"
"生 :exc:`IndexError` 錯誤。只存取最小元素但不取出可以使用 ``heap[0]`` 。"

#: ../../library/heapq.rst:57
msgid ""
"Push *item* on the heap, then pop and return the smallest item from the "
"*heap*.  The combined action runs more efficiently than :func:`heappush` "
"followed by a separate call to :func:`heappop`."
msgstr ""
"將 *item* 放入 heap ，接著從 *heap* 取出並回傳最小的元素。這個組合函式比呼"
"叫 :func:`heappush` 之後呼叫 :func:`heappop` 更有效率。"

#: ../../library/heapq.rst:64
msgid "Transform list *x* into a heap, in-place, in linear time."
msgstr "在線性時間內將 list *x* 轉為 heap，且過程不會申請額外記憶體。"

#: ../../library/heapq.rst:69
msgid ""
"Pop and return the smallest item from the *heap*, and also push the new "
"*item*. The heap size doesn't change. If the heap is empty, :exc:"
"`IndexError` is raised."
msgstr ""
"從 *heap* 取出並回傳最小的元素，接著將新的 *item* 放進heap。heap 的大小不會改"
"變。如果 heap 是空的會產生 :exc:`IndexError` 錯誤。"

#: ../../library/heapq.rst:72
msgid ""
"This one step operation is more efficient than a :func:`heappop` followed "
"by :func:`heappush` and can be more appropriate when using a fixed-size "
"heap. The pop/push combination always returns an element from the heap and "
"replaces it with *item*."
msgstr ""
"這個一次完成的操作會比呼叫 :func:`heappop` 之後呼叫 :func:`heappush` 更有效"
"率，並在維護 heap 的大小不變時更為適當，取出/放入的組合函式一定會從 heap 回傳"
"一個元素並用 *item* 取代他。"

#: ../../library/heapq.rst:77
msgid ""
"The value returned may be larger than the *item* added.  If that isn't "
"desired, consider using :func:`heappushpop` instead.  Its push/pop "
"combination returns the smaller of the two values, leaving the larger value "
"on the heap."
msgstr ""
"函式的回傳值可能會大於被加入的 *item* 。如果這不是你期望發生的，可以考慮使"
"用 :func:`heappushpop` 替代，他會回傳 heap 的最小值和 *item* 兩個當中比較小的"
"那個，並將大的留在 heap 內。"

#: ../../library/heapq.rst:83
msgid "The module also offers three general purpose functions based on heaps."
msgstr "這個模組也提供三個利用 heap 實作的一般用途函式"

#: ../../library/heapq.rst:88
msgid ""
"Merge multiple sorted inputs into a single sorted output (for example, merge "
"timestamped entries from multiple log files).  Returns an :term:`iterator` "
"over the sorted values."
msgstr ""
"合併多個已排序的輸入並產生單一且已排序的輸出（舉例：合併來自多個 log 檔中有時"
"間戳記的項目）。回傳一個 :term:`iterator` 包含已經排序的值。"

#: ../../library/heapq.rst:92
msgid ""
"Similar to ``sorted(itertools.chain(*iterables))`` but returns an iterable, "
"does not pull the data into memory all at once, and assumes that each of the "
"input streams is already sorted (smallest to largest)."
msgstr ""
"和 ``sorted(itertools.chain(*iterables))`` 類似但回傳值是一個 iterable ，不會"
"一次把所有資料都放進記憶體中，並且假設每一個輸入都已經（由小到大）排序過了。"

#: ../../library/heapq.rst:96
msgid ""
"Has two optional arguments which must be specified as keyword arguments."
msgstr "有兩個選用參數，指定時必須被當作關鍵字參數指定。"

#: ../../library/heapq.rst:98
msgid ""
"*key* specifies a :term:`key function` of one argument that is used to "
"extract a comparison key from each input element.  The default value is "
"``None`` (compare the elements directly)."
msgstr ""
"*key* 參數指定了一個 :term:`key function`  引數，用來從每一個輸入的元素中決定"
"一個比較的依據。預設的值是 ``None`` （直接比較元素）。"

#: ../../library/heapq.rst:102
#, fuzzy
msgid ""
"*reverse* is a boolean value.  If set to ``True``, then the input elements "
"are merged as if each comparison were reversed. To achieve behavior similar "
"to ``sorted(itertools.chain(*iterables), reverse=True)``, all iterables must "
"be sorted from largest to smallest."
msgstr ""
"*reverse* 是一個布林值。如果設定為 ``True`` ，那輸入的元素被 merge 時每一個比"
"較結果都是相反的。"

#: ../../library/heapq.rst:107
msgid "Added the optional *key* and *reverse* parameters."
msgstr "加入選用參數 *key* 和 *reverse* 。"

#: ../../library/heapq.rst:113
#, fuzzy
msgid ""
"Return a list with the *n* largest elements from the dataset defined by "
"*iterable*.  *key*, if provided, specifies a function of one argument that "
"is used to extract a comparison key from each element in *iterable* (for "
"example, ``key=str.lower``).  Equivalent to:  ``sorted(iterable, key=key, "
"reverse=True)[:n]``."
msgstr ""
"回傳一個包含資料 *iterable* 中前 *n* 大元素的 list 。如果有指定 *key* 參數，"
"*key* 會是只有一個參數的函式，用來從每一個 *iterable* 的元素中決定一個比較的"
"依據：``key=str.lower`` 等價於 ``sorted(iterable, key=key, reverse=True)[:"
"n]``"

#: ../../library/heapq.rst:122
#, fuzzy
msgid ""
"Return a list with the *n* smallest elements from the dataset defined by "
"*iterable*.  *key*, if provided, specifies a function of one argument that "
"is used to extract a comparison key from each element in *iterable* (for "
"example, ``key=str.lower``).  Equivalent to:  ``sorted(iterable, key=key)[:"
"n]``."
msgstr ""
"回傳一個包含資料 *iterable* 中前 *n* 小元素的 list 。如果有指定 *key* 參數，"
"*key* 會是只有一個參數的函式，用來從每一個 *iterable* 的元素中決定一個比較的"
"依據：``key=str.lower`` 等價於 ``sorted(iterable, key=key)[:n]``"

#: ../../library/heapq.rst:128
msgid ""
"The latter two functions perform best for smaller values of *n*.  For larger "
"values, it is more efficient to use the :func:`sorted` function.  Also, when "
"``n==1``, it is more efficient to use the built-in :func:`min` and :func:"
"`max` functions.  If repeated usage of these functions is required, consider "
"turning the iterable into an actual heap."
msgstr ""
"後兩個函式在 *n* 值比較小時有最好的表現。對於較大的 *n* 值，只用 :func:"
"`sorted` 函式會更有效率。同樣地，當 ``n==1`` 時，使用內建函式 :func:`min` "
"和 :func:`max` 會有更好的效率。如果需要重複使用這些函式，可以考慮將 iterable "
"轉成真正的 heap 。"

#: ../../library/heapq.rst:136
msgid "Basic Examples"
msgstr "基礎範例"

#: ../../library/heapq.rst:138
#, fuzzy
msgid ""
"A `heapsort <https://en.wikipedia.org/wiki/Heapsort>`_ can be implemented by "
"pushing all values onto a heap and then popping off the smallest values one "
"at a time::"
msgstr ""
"`heapsort <https://en.wikipedia.org/wiki/Heapsort>`_ "
"可以通過將所有值推入堆然後一次彈出一個最小值來實作::"

#: ../../library/heapq.rst:151
msgid ""
"This is similar to ``sorted(iterable)``, but unlike :func:`sorted`, this "
"implementation is not stable."
msgstr ""
"雖然類似 ``sorted(iterable)`` ，但跟 :func:`sorted` 不同的是，這個實作不是 "
"stable 的排序。"

#: ../../library/heapq.rst:154
msgid ""
"Heap elements can be tuples.  This is useful for assigning comparison values "
"(such as task priorities) alongside the main record being tracked::"
msgstr ""
"Heap 中的元素可以是 tuple 。這有利於將要比較的值（例如一個 task 的優先度）和"
"主要資料放在一起排序。"

#: ../../library/heapq.rst:167
msgid "Priority Queue Implementation Notes"
msgstr "優先佇列  (Priority Queue) 實作細節"

#: ../../library/heapq.rst:169
#, fuzzy
msgid ""
"A `priority queue <https://en.wikipedia.org/wiki/Priority_queue>`_ is common "
"use for a heap, and it presents several implementation challenges:"
msgstr ""
"`priority queue <https://en.wikipedia.org/wiki/Priority_queue>`_ "
"是堆的常見用途，它提出了幾個實作挑戰："

#: ../../library/heapq.rst:172
msgid ""
"Sort stability:  how do you get two tasks with equal priorities to be "
"returned in the order they were originally added?"
msgstr ""
"排序的穩定性：你如何將兩個擁有相同 priority 的 task 按照他們被加入的順序回"
"傳。"

#: ../../library/heapq.rst:175
msgid ""
"Tuple comparison breaks for (priority, task) pairs if the priorities are "
"equal and the tasks do not have a default comparison order."
msgstr ""
"Tuple的排序在某些情況下會壞掉，例如當 Tuple (priority, task) 的 priorities 相"
"等且 tasks 沒有一個預設的排序時。"

#: ../../library/heapq.rst:178
msgid ""
"If the priority of a task changes, how do you move it to a new position in "
"the heap?"
msgstr ""
"當一個 heap 中 task 的 priority 改變時，你如何將它移到 heap 正確的位置上。"

#: ../../library/heapq.rst:181
msgid ""
"Or if a pending task needs to be deleted, how do you find it and remove it "
"from the queue?"
msgstr ""
"或者一個還沒被解決的 task 需要被刪除時，你要如何從佇列中找到並刪除指定的 "
"task。"

#: ../../library/heapq.rst:184
msgid ""
"A solution to the first two challenges is to store entries as 3-element list "
"including the priority, an entry count, and the task.  The entry count "
"serves as a tie-breaker so that two tasks with the same priority are "
"returned in the order they were added. And since no two entry counts are the "
"same, the tuple comparison will never attempt to directly compare two tasks."
msgstr ""
"一個針對前兩個問題的解法是：儲存一個包含 priority 、 entry count 和 task 三個"
"元素的 tuple 。兩個 task 有相同 priority 時， entry count 會讓兩個 task 能根"
"據加入的順序排序。因為沒有任何兩個 task 擁有相同的 entry count ，所以永遠不會"
"直接使用 task 做比較。"

#: ../../library/heapq.rst:190
#, fuzzy
msgid ""
"Another solution to the problem of non-comparable tasks is to create a "
"wrapper class that ignores the task item and only compares the priority "
"field::"
msgstr "另一個解決不可比較任務問題的方法是建立一個包裝類，忽略任務項，只比較優先級欄"
"位::"

#: ../../library/heapq.rst:201
msgid ""
"The remaining challenges revolve around finding a pending task and making "
"changes to its priority or removing it entirely.  Finding a task can be done "
"with a dictionary pointing to an entry in the queue."
msgstr ""
"剩下的問題可以藉由找到要刪除的 task 並更改它的 priority 或者直接將它移除。尋"
"找一個 task 可以使用一個 dictionary 指向佇列當中的 entry 。"

#: ../../library/heapq.rst:205
msgid ""
"Removing the entry or changing its priority is more difficult because it "
"would break the heap structure invariants.  So, a possible solution is to "
"mark the entry as removed and add a new entry with the revised priority::"
msgstr ""
"移除 entry 或更改它的 priority 更為困難，因為這會破壞 heap 的性質。所以一個可"
"行的方案是將原本的 entry 做一個標記表示它已經被刪除，並新增一個擁有新的 "
"priority 的 entry 。"

#: ../../library/heapq.rst:239
msgid "Theory"
msgstr "原理"

#: ../../library/heapq.rst:241
msgid ""
"Heaps are arrays for which ``a[k] <= a[2*k+1]`` and ``a[k] <= a[2*k+2]`` for "
"all *k*, counting elements from 0.  For the sake of comparison, non-existing "
"elements are considered to be infinite.  The interesting property of a heap "
"is that ``a[0]`` is always its smallest element."
msgstr ""
"Heap 是一個陣列對於所有從0開始的 index *k* 都存在性質 ``a[k] <= a[2*k+1]`` "
"和 ``a[k] <= a[2*k+2]`` 。為了方便比較，不存在的元素被視為無限大。一個有趣的 "
"heap 性質是 ``a[0]`` 永遠是最小的元素。"

#: ../../library/heapq.rst:246
#, fuzzy
msgid ""
"The strange invariant above is meant to be an efficient memory "
"representation for a tournament.  The numbers below are *k*, not ``a[k]``::"
msgstr "上面的奇怪不變數是為了成為錦標賽的有效記憶體表示。下面的數字是 *k*，而不是 "
"``a[k]``::"

#: ../../library/heapq.rst:259
#, fuzzy
msgid ""
"In the tree above, each cell *k* is topping ``2*k+1`` and ``2*k+2``. In a "
"usual binary tournament we see in sports, each cell is the winner over the "
"two cells it tops, and we can trace the winner down the tree to see all "
"opponents s/he had.  However, in many computer applications of such "
"tournaments, we do not need to trace the history of a winner. To be more "
"memory efficient, when a winner is promoted, we try to replace it by "
"something else at a lower level, and the rule becomes that a cell and the "
"two cells it tops contain three different items, but the top cell \"wins\" "
"over the two topped cells."
msgstr ""
"在上面的樹中，每個單元格 *k* 都位於“2*k+1”和“2*k+2”之上。在我們在體育運動中看"
"到的通常的二元錦標賽中，每個單元格都是它領先的兩個單元格的獲勝者，我們可以沿"
"著樹向下追踪獲勝者以查看她/他的所有對手。然而，在此類錦標賽的許多計算機應用程"
"序中，我們不需要追溯獲勝者的歷史。為了提高記憶體效率，當獲勝者被提升時，我們"
"嘗試用較低階別的其他東西替換它，並且規則變成一個單元格和它頂部的兩個單元格包"
"含三個不同的項目，但頂部單元格“獲勝”在兩個頂部的單元格上。"

#: ../../library/heapq.rst:268
#, fuzzy
msgid ""
"If this heap invariant is protected at all time, index 0 is clearly the "
"overall winner.  The simplest algorithmic way to remove it and find the "
"\"next\" winner is to move some loser (let's say cell 30 in the diagram "
"above) into the 0 position, and then percolate this new 0 down the tree, "
"exchanging values, until the invariant is re-established. This is clearly "
"logarithmic on the total number of items in the tree. By iterating over all "
"items, you get an O(n log n) sort."
msgstr ""
"如果此堆不變數始終受到保護，則索引 0 "
"顯然是總贏家。刪除它並找到“下一個”獲勝者的最簡單演算法方法是將一些失敗者（"
"假設上圖中的單元格 30）移動到 0 位置，然後將這個新的 0 向下滲透到樹中，交換值"
"，直到不變數重新建立。這顯然是樹中項目總數的對數。通過遍歷所有項目，您將獲得 "
"O(n log n) 排序。"

#: ../../library/heapq.rst:275
#, fuzzy
msgid ""
"A nice feature of this sort is that you can efficiently insert new items "
"while the sort is going on, provided that the inserted items are not \"better"
"\" than the last 0'th element you extracted.  This is especially useful in "
"simulation contexts, where the tree holds all incoming events, and the \"win"
"\" condition means the smallest scheduled time.  When an event schedules "
"other events for execution, they are scheduled into the future, so they can "
"easily go into the heap.  So, a heap is a good structure for implementing "
"schedulers (this is what I used for my MIDI sequencer :-)."
msgstr ""
"這種排序的一個很好的特性是您可以在排序進行時有效地插入新項目，"
"前提是插入的項目不比您提取的最後一個第 0 個元素“更好”。這在模擬上下文中特別有"
"用，其中樹包含所有傳入事件，並且“獲勝”條件意味著最小的計劃時間。當一個事件安"
"排其他事件執行時，它們被安排在未來，所以它們可以很容易地進入堆。因此，堆是實"
"作調度程式的良好結構（這是我用於 MIDI 音序器的結構 :-)。"

#: ../../library/heapq.rst:284
#, fuzzy
msgid ""
"Various structures for implementing schedulers have been extensively "
"studied, and heaps are good for this, as they are reasonably speedy, the "
"speed is almost constant, and the worst case is not much different than the "
"average case. However, there are other representations which are more "
"efficient overall, yet the worst cases might be terrible."
msgstr ""
"用於實作調度程式的各種結構已被廣泛研究，堆對此有好處，因為它們相當快，速度幾"
"乎恆定，最壞的情況與平均情況沒有太大區別。然而，還有其他整體上更有效的表示，"
"但最壞的情況可能會很糟糕。"

#: ../../library/heapq.rst:290
#, fuzzy
msgid ""
"Heaps are also very useful in big disk sorts.  You most probably all know "
"that a big sort implies producing \"runs\" (which are pre-sorted sequences, "
"whose size is usually related to the amount of CPU memory), followed by a "
"merging passes for these runs, which merging is often very cleverly "
"organised [#]_. It is very important that the initial sort produces the "
"longest runs possible.  Tournaments are a good way to achieve that.  If, "
"using all the memory available to hold a tournament, you replace and "
"percolate items that happen to fit the current run, you'll produce runs "
"which are twice the size of the memory for random input, and much better for "
"input fuzzily ordered."
msgstr ""
"堆在大磁盤排序中也非常有用。你很可能都知道大排序意味著產生“運行”（這是預先排"
"序的序列，其大小通常與 CPU 記憶體量有關），然後是這些運行的合併通道，合併通常"
"非常巧妙組織[#]_。初始排序產生盡可能長的運行非常重要。錦標賽是實作這一目標的"
"好方法。如果使用所有可用於舉行錦標賽的記憶體，您替換並過濾恰好適合當前運行的"
"項目，您將生成兩倍於隨機輸入記憶體大小的運行，並且對於模糊排序的輸入要好得多"
"。"

#: ../../library/heapq.rst:300
#, fuzzy
msgid ""
"Moreover, if you output the 0'th item on disk and get an input which may not "
"fit in the current tournament (because the value \"wins\" over the last "
"output value), it cannot fit in the heap, so the size of the heap "
"decreases.  The freed memory could be cleverly reused immediately for "
"progressively building a second heap, which grows at exactly the same rate "
"the first heap is melting.  When the first heap completely vanishes, you "
"switch heaps and start a new run.  Clever and quite effective!"
msgstr ""
"此外，如果您在磁盤上輸出第 0 個項目並得到一個可能不適合當前錦標賽的輸入（因為"
"該值 ``贏``了最後一個輸出值），它不適合堆，因此堆減少。釋放的記憶體可以立即巧妙"
"地重新用於逐步構建第二個堆，第二個堆的增長速度與第一個堆融化的速度完全相同。"
"當第一個堆完全消失時，您切換堆並開始新的運行。聰明而且非常有效！"

#: ../../library/heapq.rst:308
#, fuzzy
msgid ""
"In a word, heaps are useful memory structures to know.  I use them in a few "
"applications, and I think it is good to keep a 'heap' module around. :-)"
msgstr "總之，堆是要知道的有用的記憶體結構。我在一些應用程式中使用它們，我認為保留一"
"個 ``堆``模組很好。 :-)"

#: ../../library/heapq.rst:312
msgid "Footnotes"
msgstr "註解"

#: ../../library/heapq.rst:313
#, fuzzy
msgid ""
"The disk balancing algorithms which are current, nowadays, are more annoying "
"than clever, and this is a consequence of the seeking capabilities of the "
"disks. On devices which cannot seek, like big tape drives, the story was "
"quite different, and one had to be very clever to ensure (far in advance) "
"that each tape movement will be the most effective possible (that is, will "
"best participate at \"progressing\" the merge).  Some tapes were even able "
"to read backwards, and this was also used to avoid the rewinding time. "
"Believe me, real good tape sorts were quite spectacular to watch! From all "
"times, sorting has always been a Great Art! :-)"
msgstr ""
"現在流行的磁盤平衡演算法與其說是聰明，不如說是煩人，這是磁盤尋道能力的結果。"
"在不能尋道的設備上，比如大型磁帶機，情況就大不相同了，必須非常聰明地確保（提"
"前很久）磁帶的每一次移動都是最有效的（也就是說，最好參與“進行”合併）。有些磁"
"帶甚至可以倒讀，這也是為了避免倒帶時間。相信我，真正好的磁帶型別非常值得一看"
"！古往今來，分類一直是一門偉大的藝術！ :-)"
