# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-26 18:54+0800\n"
"PO-Revision-Date: 2016-01-31 07:19+0000\n"
"Last-Translator: Liang-Bo Wang <me@liang2.tw>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/getopt.rst:2
msgid ":mod:`getopt` --- C-style parser for command line options"
msgstr ":mod:`getopt` --- 命令列選項的 C 風格剖析器"

#: ../../library/getopt.rst:8
msgid "**Source code:** :source:`Lib/getopt.py`"
msgstr "**原始碼：**\\ :source:`Lib/getopt.py`"

#: ../../library/getopt.rst:12
#, fuzzy
msgid ""
"The :mod:`getopt` module is a parser for command line options whose API is "
"designed to be familiar to users of the C :c:func:`getopt` function. Users "
"who are unfamiliar with the C :c:func:`getopt` function or who would like to "
"write less code and get better help and error messages should consider using "
"the :mod:`argparse` module instead."
msgstr ""
":mod:`getopt` 模組是命令列選項的剖析器，其 API 旨在為 C:c:func:`getopt` "
"函式的使用者所熟悉。不熟悉 C :c:func:`getopt` "
"函式或希望編寫更少程式碼並獲得更好的幫助和錯誤消息的使用者應該考慮使用 "
":mod:`argparse` 模組。"

#: ../../library/getopt.rst:20
#, fuzzy
msgid ""
"This module helps scripts to parse the command line arguments in ``sys."
"argv``. It supports the same conventions as the Unix :c:func:`getopt` "
"function (including the special meanings of arguments of the form '``-``' "
"and '``--``').  Long options similar to those supported by GNU software may "
"be used as well via an optional third argument."
msgstr ""
"該模組幫助腳本剖析 ``sys.argv`` 中的命令列參數。它支援與 Unix "
":c:func:`getopt` 函式相同的約定（包括 '``-``' 和 '``--``' "
"形式的參數的特殊含義）。類似於 GNU "
"軟件支援的長選項也可以通過可選的第三個參數使用。"

#: ../../library/getopt.rst:26
#, fuzzy
msgid "This module provides two functions and an exception:"
msgstr "該模組提供兩個函式和一個例外："

#: ../../library/getopt.rst:32
#, fuzzy
msgid ""
"Parses command line options and parameter list.  *args* is the argument list "
"to be parsed, without the leading reference to the running program. "
"Typically, this means ``sys.argv[1:]``. *shortopts* is the string of option "
"letters that the script wants to recognize, with options that require an "
"argument followed by a colon (``':'``; i.e., the same format that Unix :c:"
"func:`getopt` uses)."
msgstr ""
"剖析命令列選項和參數列表。 *args* "
"是要剖析的參數列表，沒有對正在運行的程式的前導引用。通常，這意味著 ``sys."
"argv[1:]``。 *shortopts* "
"是腳本想要識別的選項字母字串，選項需要一個參數後跟一個冒號（``':'``；即，與 "
"Unix :c:func:`getopt` 相同的格式使用）。"

#: ../../library/getopt.rst:40
#, fuzzy
msgid ""
"Unlike GNU :c:func:`getopt`, after a non-option argument, all further "
"arguments are considered also non-options. This is similar to the way non-"
"GNU Unix systems work."
msgstr ""
"與 GNU :c:func:`getopt` 不同，在非選項參數之後，所有其他參數也被視為非選項。"
"這類似於非 GNU Unix 系統的工作方式。"

#: ../../library/getopt.rst:44
#, fuzzy
msgid ""
"*longopts*, if specified, must be a list of strings with the names of the "
"long options which should be supported.  The leading ``'--'`` characters "
"should not be included in the option name.  Long options which require an "
"argument should be followed by an equal sign (``'='``).  Optional arguments "
"are not supported.  To accept only long options, *shortopts* should be an "
"empty string.  Long options on the command line can be recognized so long as "
"they provide a prefix of the option name that matches exactly one of the "
"accepted options.  For example, if *longopts* is ``['foo', 'frob']``, the "
"option ``--fo`` will match as ``--foo``, but ``--f`` will not match "
"uniquely, so :exc:`GetoptError` will be raised."
msgstr ""
"*longopts*，如果指定，必須是一個字串列表，其中包含應支援的長選項的名稱。前導"
"的 ``--``字元不應包含在選項名稱中。需要參數的長選項後應跟一個等號 "
"(``'='``)。不支援可選參數。要只接受長選項，*shortopts* 應該是一個空字串。只要"
"命令列上的長選項提供與接受的選項之一完全匹配的選項名稱前綴，就可以識別它們。"
"例如，如果 *longopts* 是 ``['foo', 'frob']``，則選項 ``--fo`` 將匹配為 "
"``--foo``，但是 ``--f``不會唯一匹配，因此將引發 :exc:`GetoptError`。"

#: ../../library/getopt.rst:55
#, fuzzy
msgid ""
"The return value consists of two elements: the first is a list of ``(option, "
"value)`` pairs; the second is the list of program arguments left after the "
"option list was stripped (this is a trailing slice of *args*).  Each option-"
"and-value pair returned has the option as its first element, prefixed with a "
"hyphen for short options (e.g., ``'-x'``) or two hyphens for long options (e."
"g., ``'--long-option'``), and the option argument as its second element, or "
"an empty string if the option has no argument.  The options occur in the "
"list in the same order in which they were found, thus allowing multiple "
"occurrences.  Long and short options may be mixed."
msgstr ""
"回傳值由兩個元素組成：第一個是“(option, "
"value)”對列表；第二個是選項列表被剝離後留下的程式參數列表（這是 *args* 的尾隨"
"切片）。回傳的每個選項和值對都將選項作為其第一個元素，短選項的前綴為連字元（"
"例如，``'-x'``）或長選項的兩個連字元（例如，``'--long） -option'``)，並將選項"
"參數作為其第二個元素，如果選項沒有參數，則為空字串。選項在列表中的出現順序與"
"它們被發現的順序相同，因此允許多次出現。多頭和空頭選項可能會混合。"

#: ../../library/getopt.rst:68
#, fuzzy
msgid ""
"This function works like :func:`getopt`, except that GNU style scanning mode "
"is used by default. This means that option and non-option arguments may be "
"intermixed. The :func:`getopt` function stops processing options as soon as "
"a non-option argument is encountered."
msgstr ""
"此函式的工作方式與 :func:`getopt` 類似，只是預設使用 GNU "
"風格的掃描模式。這意味著選項和非選項參數可以混合使用。 :func:`getopt` "
"函式在遇到非選項參數時立即停止處理選項。"

#: ../../library/getopt.rst:73
#, fuzzy
msgid ""
"If the first character of the option string is ``'+'``, or if the "
"environment variable :envvar:`POSIXLY_CORRECT` is set, then option "
"processing stops as soon as a non-option argument is encountered."
msgstr ""
"如果選項字串的第一個字元是``'+'``，或者如果設定了環境變數 :envvar:`POSIXLY_CO"
"RRECT`，那麼一旦遇到非選項參數，選項處理就會停止。"

#: ../../library/getopt.rst:80
#, fuzzy
msgid ""
"This is raised when an unrecognized option is found in the argument list or "
"when an option requiring an argument is given none. The argument to the "
"exception is a string indicating the cause of the error.  For long options, "
"an argument given to an option which does not require one will also cause "
"this exception to be raised.  The attributes :attr:`msg` and :attr:`opt` "
"give the error message and related option; if there is no specific option to "
"which the exception relates, :attr:`opt` is an empty string."
msgstr ""
"當在參數列表中找到無法識別的選項或者當需要參數的選項沒有給出時會引發此問題。"
"例外的參數是一個指示錯誤原因的字串。對於長選項，給不需要參數的選項的參數也會"
"導致引發此例外。屬性 :attr:`msg` 和 :attr:`opt` "
"給出錯誤資訊和相關選項；如果沒有與例外相關的特定選項，則 :attr:`opt` "
"為空字串。"

#: ../../library/getopt.rst:91
#, fuzzy
msgid "Alias for :exc:`GetoptError`; for backward compatibility."
msgstr ":exc:`GetoptError` 的別名；為了向後相容。"

#: ../../library/getopt.rst:93
#, fuzzy
msgid "An example using only Unix style options:"
msgstr "僅使用 Unix 樣式選項的示例："

#: ../../library/getopt.rst:105
#, fuzzy
msgid "Using long option names is equally easy:"
msgstr "使用長選項名稱同樣容易："

#: ../../library/getopt.rst:118
#, fuzzy
msgid "In a script, typical usage is something like this::"
msgstr "在腳本中，典型的用法是這樣的："

#: ../../library/getopt.rst:147
#, fuzzy
msgid ""
"Note that an equivalent command line interface could be produced with less "
"code and more informative help and error messages by using the :mod:"
"`argparse` module::"
msgstr "請注意，通過使用 :mod:`argparse` "
"模組，可以使用更少的程式碼和更多資訊幫助和錯誤消息生成等效的命令列界面："

#: ../../library/getopt.rst:162
msgid "Module :mod:`argparse`"
msgstr ":mod:`argparse` 模組"

#: ../../library/getopt.rst:163
#, fuzzy
msgid "Alternative command line option and argument parsing library."
msgstr "替代命令列選項和參數剖析庫。"
