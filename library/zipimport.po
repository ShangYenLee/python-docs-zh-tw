# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-16 19:25+0000\n"
"PO-Revision-Date: 2018-05-23 16:17+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/zipimport.rst:2
#, fuzzy
msgid ":mod:`zipimport` --- Import modules from Zip archives"
msgstr ":mod:`zipimport` --- 從 Zip 檔案中匯入模組"

#: ../../library/zipimport.rst:9
msgid "**Source code:** :source:`Lib/zipimport.py`"
msgstr "**原始碼：**\\ :source:`Lib/zipimport.py`"

#: ../../library/zipimport.rst:13
#, fuzzy
msgid ""
"This module adds the ability to import Python modules (:file:`\\*.py`, :file:"
"`\\*.pyc`) and packages from ZIP-format archives. It is usually not needed "
"to use the :mod:`zipimport` module explicitly; it is automatically used by "
"the built-in :keyword:`import` mechanism for :data:`sys.path` items that are "
"paths to ZIP archives."
msgstr ""
"此模組新增了從 ZIP 格式存檔匯入 Python 模組（:file:`\\*.py`、:file:`\\*."
"pyc`）和包的功能。通常不需要顯式使用 :mod:`zipimport` 模組；它被內建的 "
":keyword:`import` 機制自動用於 :data:`sys.path` 項目，這些項目是 ZIP "
"存檔的路徑。"

#: ../../library/zipimport.rst:19
#, fuzzy
msgid ""
"Typically, :data:`sys.path` is a list of directory names as strings.  This "
"module also allows an item of :data:`sys.path` to be a string naming a ZIP "
"file archive. The ZIP archive can contain a subdirectory structure to "
"support package imports, and a path within the archive can be specified to "
"only import from a subdirectory.  For example, the path :file:`example.zip/"
"lib/` would only import from the :file:`lib/` subdirectory within the "
"archive."
msgstr ""
"通常，:data:`sys.path` 是作為字串的目錄名稱列表。該模組還允許 :data:`sys."
"path` 的一項是命名 ZIP 文件存檔的字串。 ZIP 存檔可以包含支援包匯入的子目錄結"
"構，並且可以指定存檔內的路徑以僅從子目錄匯入。例如，路徑 :file:`example.zip/"
"lib/` 只會從存檔中的 :file:`lib/` 子目錄匯入。"

#: ../../library/zipimport.rst:26
#, fuzzy
msgid ""
"Any files may be present in the ZIP archive, but importers are only invoked "
"for :file:`.py` and :file:`.pyc` files.  ZIP import of dynamic modules (:"
"file:`.pyd`, :file:`.so`) is disallowed. Note that if an archive only "
"contains :file:`.py` files, Python will not attempt to modify the archive by "
"adding the corresponding :file:`.pyc` file, meaning that if a ZIP archive "
"doesn't contain :file:`.pyc` files, importing may be rather slow."
msgstr ""
"任何文件都可能存在於 ZIP 存檔中，但匯入程式只會為 :file:`.py` 和 :file:`.pyc`"
" 文件呼叫。不允許 ZIP 匯入動態模組（:file:`.pyd`, :file:`.so`）。請注意，"
"如果存檔僅包含 :file:`.py` 文件，Python 將不會嘗試通過新增相應的 :file:`.pyc`"
" 文件來修改存檔，這意味著如果 ZIP 存檔不包含 :file: `.pyc` "
"文件，匯入可能會很慢。"

#: ../../library/zipimport.rst:33
#, fuzzy
msgid "Previously, ZIP archives with an archive comment were not supported."
msgstr "以前，不支援帶有存檔註釋的 ZIP 存檔。"

#: ../../library/zipimport.rst:40
#, fuzzy
msgid ""
"`PKZIP Application Note <https://pkware.cachefly.net/webdocs/casestudies/"
"APPNOTE.TXT>`_"
msgstr ""
"`PKZIP 應用說明 <https://pkware.cachefly.net/webdocs/casestudies/APPNOTE."
"TXT>`_"

#: ../../library/zipimport.rst:39
#, fuzzy
msgid ""
"Documentation on the ZIP file format by Phil Katz, the creator of the format "
"and algorithms used."
msgstr "ZIP 文件格式的文檔，作者是所用格式和演算法的建立者 Phil Katz。"

#: ../../library/zipimport.rst:45
#, fuzzy
msgid ":pep:`273` - Import Modules from Zip Archives"
msgstr ":pep:`273` - 從 Zip 檔案中匯入模組"

#: ../../library/zipimport.rst:43
#, fuzzy
msgid ""
"Written by James C. Ahlstrom, who also provided an implementation. Python "
"2.3 follows the specification in :pep:`273`, but uses an implementation "
"written by Just van Rossum that uses the import hooks described in :pep:"
"`302`."
msgstr ""
"由 James C. Ahlstrom 編寫，他還提供了一個實作。 Python 2.3 遵循 :pep:`273` "
"中的規範，但使用 Just van Rossum 編寫的實作，該實作使用 :pep:`302` "
"中描述的匯入掛鉤。"

#: ../../library/zipimport.rst:48
#, fuzzy
msgid ":mod:`importlib` - The implementation of the import machinery"
msgstr ":mod:`importlib` - 匯入機制的實作"

#: ../../library/zipimport.rst:48
#, fuzzy
msgid ""
"Package providing the relevant protocols for all importers to implement."
msgstr "為所有進口商實施提供相關協定的軟件包。"

#: ../../library/zipimport.rst:52
#, fuzzy
msgid "This module defines an exception:"
msgstr "該模組定義了一個例外："

#: ../../library/zipimport.rst:56
#, fuzzy
msgid ""
"Exception raised by zipimporter objects. It's a subclass of :exc:"
"`ImportError`, so it can be caught as :exc:`ImportError`, too."
msgstr ""
"zipimporter 物件引發的例外。它是 :exc:`ImportError` 的子類別，"
"因此它也可以作為 :exc:`ImportError` 被捕獲。"

#: ../../library/zipimport.rst:63
msgid "zipimporter Objects"
msgstr "zipimporter 物件"

#: ../../library/zipimport.rst:65
#, fuzzy
msgid ":class:`zipimporter` is the class for importing ZIP files."
msgstr ":class:`zipimporter` 是匯入 ZIP 文件的類。"

#: ../../library/zipimport.rst:69
#, fuzzy
msgid ""
"Create a new zipimporter instance. *archivepath* must be a path to a ZIP "
"file, or to a specific path within a ZIP file.  For example, an "
"*archivepath* of :file:`foo/bar.zip/lib` will look for modules in the :file:"
"`lib` directory inside the ZIP file :file:`foo/bar.zip` (provided that it "
"exists)."
msgstr ""
"建立一個新的 zipimporter 實例。 *archivepath* 必須是 ZIP 文件的路徑，或 ZIP "
"文件中的特定路徑。例如， :file:`foo/bar.zip/lib` 的 *archivepath* 將在 ZIP "
"文件 :file:`foo/bar.zip` 內的 :file:`lib` 目錄中查找模組（前提是它存在）。"

#: ../../library/zipimport.rst:74
#, fuzzy
msgid ""
":exc:`ZipImportError` is raised if *archivepath* doesn't point to a valid "
"ZIP archive."
msgstr ":exc:`ZipImportError` 如果 *archivepath* 沒有指向一個有效的 ZIP "
"歸檔文件就會被引發。"

#: ../../library/zipimport.rst:79
#, fuzzy
msgid ""
"Implementation of :meth:`importlib.abc.Loader.create_module` that returns :"
"const:`None` to explicitly request the default semantics."
msgstr "importlib.abc.Loader.create_module 的實作回傳 :const:`None` "
"以明確請求預設語義。"

#: ../../library/zipimport.rst:87
#, fuzzy
msgid "Implementation of :meth:`importlib.abc.Loader.exec_module`."
msgstr "importlib.abc.Loader.exec_module 的實作。"

#: ../../library/zipimport.rst:94
#, fuzzy
msgid "An implementation of :meth:`importlib.abc.PathEntryFinder.find_loader`."
msgstr "importlib.abc.PathEntryFinder.find_loader 的實作。"

#: ../../library/zipimport.rst:98 ../../library/zipimport.rst:111
#, fuzzy
msgid "Use :meth:`find_spec` instead."
msgstr "使用 :meth:`find_spec` 代替。"

#: ../../library/zipimport.rst:103
#, fuzzy
msgid ""
"Search for a module specified by *fullname*. *fullname* must be the fully "
"qualified (dotted) module name. It returns the zipimporter instance itself "
"if the module was found, or :const:`None` if it wasn't. The optional *path* "
"argument is ignored---it's there for compatibility with the importer "
"protocol."
msgstr ""
"搜索由 *fullname* 指定的模組。 *fullname* "
"必須是完全限定的（點分）模組名稱。如果找到模組，它回傳 zipimporter "
"實例本身，如果沒有找到，則回傳 :const:`None`。可選的 *path* "
"參數被忽略——它的存在是為了與匯入協定相容。"

#: ../../library/zipimport.rst:116
#, fuzzy
msgid "An implementation of :meth:`importlib.abc.PathEntryFinder.find_spec`."
msgstr "importlib.abc.PathEntryFinder.find_spec 的實作。"

#: ../../library/zipimport.rst:123
#, fuzzy
msgid ""
"Return the code object for the specified module. Raise :exc:`ZipImportError` "
"if the module couldn't be imported."
msgstr "回傳指定模組的程式碼物件。如果無法匯入模組，則引發 :exc:`ZipImportError`。"

#: ../../library/zipimport.rst:129
#, fuzzy
msgid ""
"Return the data associated with *pathname*. Raise :exc:`OSError` if the file "
"wasn't found."
msgstr "回傳與 *pathname* 關聯的資料。如果找不到文件，則引發 :exc:`OSError`。"

#: ../../library/zipimport.rst:132
#, fuzzy
msgid ":exc:`IOError` used to be raised instead of :exc:`OSError`."
msgstr ":exc:`IOError` 曾經被引發而不是 :exc:`OSError`。"

#: ../../library/zipimport.rst:138
#, fuzzy
msgid ""
"Return the value ``__file__`` would be set to if the specified module was "
"imported. Raise :exc:`ZipImportError` if the module couldn't be imported."
msgstr "如果匯入了指定的模組，則回傳值 ``__file__`` 將被設定為。如果無法匯入模組，"
"則引發 :exc:`ZipImportError`。"

#: ../../library/zipimport.rst:147
#, fuzzy
msgid ""
"Return the source code for the specified module. Raise :exc:`ZipImportError` "
"if the module couldn't be found, return :const:`None` if the archive does "
"contain the module, but has no source for it."
msgstr ""
"回傳指定模組的源程式碼。如果找不到該模組，則引發 :exc:`ZipImportError`，如果"
"存檔確實包含該模組，則回傳 :const:`None`，但沒有它的來源。"

#: ../../library/zipimport.rst:155
#, fuzzy
msgid ""
"Return ``True`` if the module specified by *fullname* is a package. Raise :"
"exc:`ZipImportError` if the module couldn't be found."
msgstr "如果 *fullname* 指定的模組是一個包，則回傳 ``True``。如果找不到模組，則引發 "
":exc:`ZipImportError`。"

#: ../../library/zipimport.rst:161
#, fuzzy
msgid ""
"Load the module specified by *fullname*. *fullname* must be the fully "
"qualified (dotted) module name. Returns the imported module on success, "
"raises :exc:`ZipImportError` on failure."
msgstr ""
"加載由 *fullname* 指定的模組。 *fullname* "
"必須是完全限定的（點分）模組名稱。成功時回傳匯入的模組，失敗時引發 "
":exc:`ZipImportError`。"

#: ../../library/zipimport.rst:167
#, fuzzy
msgid "Use :meth:`exec_module` instead."
msgstr "使用 :meth:`exec_module` 代替。"

#: ../../library/zipimport.rst:172
#, fuzzy
msgid ""
"Clear out the internal cache of information about files found within the ZIP "
"archive."
msgstr "清除有關在 ZIP 存檔中找到的文件的資訊的內部快取。"

#: ../../library/zipimport.rst:180
#, fuzzy
msgid ""
"The file name of the importer's associated ZIP file, without a possible "
"subpath."
msgstr "匯入程式關聯的 ZIP 文件的文件名，沒有可能的子路徑。"

#: ../../library/zipimport.rst:186
#, fuzzy
msgid ""
"The subpath within the ZIP file where modules are searched.  This is the "
"empty string for zipimporter objects which point to the root of the ZIP file."
msgstr "ZIP 文件中搜索模組的子路徑。這是指向 ZIP 文件根目錄的 zipimporter "
"物件的空字串。"

#: ../../library/zipimport.rst:190
#, fuzzy
msgid ""
"The :attr:`archive` and :attr:`prefix` attributes, when combined with a "
"slash, equal the original *archivepath* argument given to the :class:"
"`zipimporter` constructor."
msgstr ""
":attr:`archive` 和 :attr:`prefix` 屬性與斜杠組合時，等於提供給 "
":class:`zipimporter` 構造函式的原始 *archivepath* 參數。"

#: ../../library/zipimport.rst:198
msgid "Examples"
msgstr "範例"

#: ../../library/zipimport.rst:200
#, fuzzy
msgid ""
"Here is an example that imports a module from a ZIP archive - note that the :"
"mod:`zipimport` module is not explicitly used."
msgstr "這是一個從 ZIP 存檔匯入模組的示例 - 請注意，未明確使用 :mod:`zipimport` "
"模組。"
