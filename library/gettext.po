# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-15 20:43+0000\n"
"PO-Revision-Date: 2018-05-23 16:02+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/gettext.rst:2
#, fuzzy
msgid ":mod:`gettext` --- Multilingual internationalization services"
msgstr ":mod:`gettext` --- 多語言國際化服務"

#: ../../library/gettext.rst:10
msgid "**Source code:** :source:`Lib/gettext.py`"
msgstr "**原始碼：**\\ :source:`Lib/gettext.py`"

#: ../../library/gettext.rst:14
#, fuzzy
msgid ""
"The :mod:`gettext` module provides internationalization (I18N) and "
"localization (L10N) services for your Python modules and applications. It "
"supports both the GNU :program:`gettext` message catalog API and a higher "
"level, class-based API that may be more appropriate for Python files.  The "
"interface described below allows you to write your module and application "
"messages in one natural language, and provide a catalog of translated "
"messages for running under different natural languages."
msgstr ""
":mod:`gettext` 模組為您的 Python 模組和應用程式提供國際化 (I18N) 和本地化 "
"(L10N) 服務。它同時支援 GNU :program:`gettext` 消息目錄 API "
"和更高階別的基於類的 API，這可能更適合 Python 文件。下面描述的界面允許您用一"
"種自然語言編寫模組和應用程式消息，並提供翻譯消息目錄以在不同自然語言下運行。"

#: ../../library/gettext.rst:22
#, fuzzy
msgid ""
"Some hints on localizing your Python modules and applications are also given."
msgstr "還提供了一些有關本地化 Python 模組和應用程式的提示。"

#: ../../library/gettext.rst:26
msgid "GNU :program:`gettext` API"
msgstr "GNU :program:`gettext` API"

#: ../../library/gettext.rst:28
#, fuzzy
msgid ""
"The :mod:`gettext` module defines the following API, which is very similar "
"to the GNU :program:`gettext` API.  If you use this API you will affect the "
"translation of your entire application globally.  Often this is what you "
"want if your application is monolingual, with the choice of language "
"dependent on the locale of your user.  If you are localizing a Python "
"module, or if your application needs to switch languages on the fly, you "
"probably want to use the class-based API instead."
msgstr ""
":mod:`gettext` 模組定義了以下 API，它與 GNU :program:`gettext` API 非常相似。"
"如果您使用此 API，您將在全球範圍內影響整個應用程式的翻譯。如果您的應用程式是"
"單語的，那麼這通常就是您想要的，語言的選擇取決於使用者的語言環境。"
"如果您正在本地化 Python 模組，或者如果您的應用程式需要即時切換語言，"
"您可能希望改用基於類的 API。"

#: ../../library/gettext.rst:39
#, fuzzy
msgid ""
"Bind the *domain* to the locale directory *localedir*.  More concretely, :"
"mod:`gettext` will look for binary :file:`.mo` files for the given domain "
"using the path (on Unix): :file:`{localedir}/{language}/LC_MESSAGES/{domain}."
"mo`, where *language* is searched for in the environment variables :envvar:"
"`LANGUAGE`, :envvar:`LC_ALL`, :envvar:`LC_MESSAGES`, and :envvar:`LANG` "
"respectively."
msgstr ""
"將 *domain* 綁定到語言環境目錄 *localedir*。更具體地說，:mod:`gettext` "
"將使用路徑（在 Unix 上）為給定域查找二進位 :file:`.mo` "
"文件：:file:`{localedir}/{language}/LC_MESSAGES/{domain} .mo`，其中 "
"*language* 分別在環境變數 "
":envvar:`LANGUAGE`、:envvar:`LC_ALL`、:envvar:`LC_MESSAGES` 和 :envvar:`LANG`"
" 中搜索。"

#: ../../library/gettext.rst:45
#, fuzzy
msgid ""
"If *localedir* is omitted or ``None``, then the current binding for *domain* "
"is returned. [#]_"
msgstr "如果省略 *localedir* 或 ``None`` ，則回傳 *domain* 的當前綁定。 [#]_"

#: ../../library/gettext.rst:51
#, fuzzy
msgid ""
"Change or query the current global domain.  If *domain* is ``None``, then "
"the current global domain is returned, otherwise the global domain is set to "
"*domain*, which is returned."
msgstr "更改或查詢當前的全局域。如果*domain* "
"為``None``，則回傳當前全局域，否則全局域設定為*domain*，回傳。"

#: ../../library/gettext.rst:59
#, fuzzy
msgid ""
"Return the localized translation of *message*, based on the current global "
"domain, language, and locale directory.  This function is usually aliased "
"as :func:`_` in the local namespace (see examples below)."
msgstr ""
"根據當前的全局域、語言和區域設定目錄，回傳 *message* 的本地化翻譯。"
"此函式通常在本地名稱空間中別名為 :func:`_`（請參見下面的示例）。"

#: ../../library/gettext.rst:66
#, fuzzy
msgid ""
"Like :func:`.gettext`, but look the message up in the specified *domain*."
msgstr "類似於 :func:`.gettext`，但在指定的 *domain* 中查找消息。"

#: ../../library/gettext.rst:71
#, fuzzy
msgid ""
"Like :func:`.gettext`, but consider plural forms. If a translation is found, "
"apply the plural formula to *n*, and return the resulting message (some "
"languages have more than two plural forms). If no translation is found, "
"return *singular* if *n* is 1; return *plural* otherwise."
msgstr ""
"像 :func:`.gettext`，但考慮複數形式。如果找到翻譯，將復數公式應用於 "
"*n*，並回傳結果消息（某些語言有兩種以上的複數形式）。如果沒有找到翻譯，如果 "
"*n* 為 1，則回傳 *singular*；否則回傳 *plural*。"

#: ../../library/gettext.rst:76
#, fuzzy
msgid ""
"The Plural formula is taken from the catalog header. It is a C or Python "
"expression that has a free variable *n*; the expression evaluates to the "
"index of the plural in the catalog. See `the GNU gettext documentation "
"<https://www.gnu.org/software/gettext/manual/gettext.html>`__ for the "
"precise syntax to be used in :file:`.po` files and the formulas for a "
"variety of languages."
msgstr ""
"複數公式取自目錄標題。它是具有自由變數 *n* 的 C 或 Python "
"表達式；表達式的計算結果為目錄中復數的索引。請參閱`GNU gettext 文檔 "
"<https://www.gnu.org/software/gettext/manual/gettext.html>`__ 以了解要在 "
":file:`.po` 文件中使用的精確語法以及用於多種語言。"

#: ../../library/gettext.rst:86
#, fuzzy
msgid ""
"Like :func:`ngettext`, but look the message up in the specified *domain*."
msgstr "類似於 :func:`ngettext`，但在指定的 *domain* 中查找消息。"

#: ../../library/gettext.rst:94
#, fuzzy
msgid ""
"Similar to the corresponding functions without the ``p`` in the prefix (that "
"is, :func:`gettext`, :func:`dgettext`, :func:`ngettext`, :func:`dngettext`), "
"but the translation is restricted to the given message *context*."
msgstr ""
"類似於前綴中沒有 ``p`` 的相應函式（即 :func:`gettext`、:func:`dgettext`、:fun"
"c:`ngettext`、:func:`dngettext`），但是翻譯僅限於給定的消息*上下文*。"

#: ../../library/gettext.rst:101
#, fuzzy
msgid ""
"Note that GNU :program:`gettext` also defines a :func:`dcgettext` method, "
"but this was deemed not useful and so it is currently unimplemented."
msgstr ""
"請注意，GNU :program:`gettext` 還定義了一個 :func:`dcgettext` "
"方法，但這被認為沒有用，因此目前尚未實作。"

#: ../../library/gettext.rst:104
#, fuzzy
msgid "Here's an example of typical usage for this API::"
msgstr "以下是此 API 的典型用法示例："

#: ../../library/gettext.rst:115
#, fuzzy
msgid "Class-based API"
msgstr "基於類的 API"

#: ../../library/gettext.rst:117
#, fuzzy
msgid ""
"The class-based API of the :mod:`gettext` module gives you more flexibility "
"and greater convenience than the GNU :program:`gettext` API.  It is the "
"recommended way of localizing your Python applications and modules.  :mod:`!"
"gettext` defines a :class:`GNUTranslations` class which implements the "
"parsing of GNU :file:`.mo` format files, and has methods for returning "
"strings. Instances of this class can also install themselves in the built-in "
"namespace as the function :func:`_`."
msgstr ""
":mod:`gettext` 模組的基於類的 API 為您提供了比 GNU :program:`gettext` API "
"更多的靈活性和便利性。這是本地化 Python 應用程式和模組的推薦方法。 "
":mod:`!gettext` 定義了一個 :class:`GNUTranslations` 類，它實作了 GNU :file:`."
"mo` 格式文件的解析，並具有回傳字串的方法。"
"此類的實例也可以將自己安裝在內建命名空間中作為函式 :func:`_`。"

#: ../../library/gettext.rst:127
#, fuzzy
msgid ""
"This function implements the standard :file:`.mo` file search algorithm.  It "
"takes a *domain*, identical to what :func:`textdomain` takes.  Optional "
"*localedir* is as in :func:`bindtextdomain`. Optional *languages* is a list "
"of strings, where each string is a language code."
msgstr ""
"這個函式實作了標準的 :file:`.mo` 文件搜索演算法。它需要一個*域*，與 "
":func:`textdomain` 相同。可選的 *localedir* 與 :func:`bindtextdomain` "
"中的一樣。可選的 *languages* 是一個字串列表，其中每個字串都是一個語言程式碼。"

#: ../../library/gettext.rst:132
#, fuzzy
msgid ""
"If *localedir* is not given, then the default system locale directory is "
"used. [#]_  If *languages* is not given, then the following environment "
"variables are searched: :envvar:`LANGUAGE`, :envvar:`LC_ALL`, :envvar:"
"`LC_MESSAGES`, and :envvar:`LANG`.  The first one returning a non-empty "
"value is used for the *languages* variable. The environment variables should "
"contain a colon separated list of languages, which will be split on the "
"colon to produce the expected list of language code strings."
msgstr ""
"如果未給出 *localedir*，則使用預設系統區域設定目錄。 [#]_ 如果未給出 *languag"
"es*，則搜索以下環境變數：:envvar:`LANGUAGE`、:envvar:`LC_ALL`、:envvar:`LC_ME"
"SSAGES` 和 :envvar:`LANG`。第一個回傳非空值的用於 *languages* 變數。環境變數"
"應包含以冒號分隔的語言列表，它將在冒號處拆分以生成預期的語言程式碼字串列表。"

#: ../../library/gettext.rst:140
#, fuzzy
msgid ""
":func:`find` then expands and normalizes the languages, and then iterates "
"through them, searching for an existing file built of these components:"
msgstr ":func:`find` "
"然後擴充和規範化語言，然後遍歷它們，搜索由這些組件構建的現有文件："

#: ../../library/gettext.rst:143
msgid ":file:`{localedir}/{language}/LC_MESSAGES/{domain}.mo`"
msgstr ":file:`{localedir}/{language}/LC_MESSAGES/{domain}.mo`"

#: ../../library/gettext.rst:145
#, fuzzy
msgid ""
"The first such file name that exists is returned by :func:`find`. If no such "
"file is found, then ``None`` is returned. If *all* is given, it returns a "
"list of all file names, in the order in which they appear in the languages "
"list or the environment variables."
msgstr ""
":func:`find` 回傳第一個這樣的文件名。如果找不到這樣的文件，則回傳 ``None`` 。"
"如果給出 *all*，它會回傳所有文件名的列表，按照它們在語言列表或環境變數中出現"
"的順序排列。"

#: ../../library/gettext.rst:153
#, fuzzy
msgid ""
"Return a :class:`*Translations` instance based on the *domain*, *localedir*, "
"and *languages*, which are first passed to :func:`find` to get a list of the "
"associated :file:`.mo` file paths.  Instances with identical :file:`.mo` "
"file names are cached.  The actual class instantiated is *class_* if "
"provided, otherwise :class:`GNUTranslations`.  The class's constructor must "
"take a single :term:`file object` argument.  If provided, *codeset* will "
"change the charset used to encode translated strings in the :meth:"
"`~NullTranslations.lgettext` and :meth:`~NullTranslations.lngettext` methods."
msgstr ""
"回傳基於 *domain*、*localedir* 和 *languages* 的 :class:`*Translations` "
"實例，這些實例首先傳遞給 :func:`find` 以獲取關聯的 :file:`.mo 的列表` "
"文件路徑。快取具有相同 :file:`.mo` 文件名的實例。實例化的實際類是 *class_* "
"如果提供，否則 :class:`GNUTranslations`。該類的構造函式必須採用單個 :term:`"
"file object` 參數。如果提供，*codeset* 將更改用於在 :meth:`~NullTranslations."
"lgettext` 和 :meth:`~NullTranslations.lngettext` 方法中編碼翻譯字串的字元集。"

#: ../../library/gettext.rst:163
#, fuzzy
msgid ""
"If multiple files are found, later files are used as fallbacks for earlier "
"ones. To allow setting the fallback, :func:`copy.copy` is used to clone each "
"translation object from the cache; the actual instance data is still shared "
"with the cache."
msgstr ""
"如果找到多個文件，則稍後的文件將用作較早文件的後備。為了允許設定後備，:func:`"
"copy.copy` 用於從快取中克隆每個翻譯物件；實際的實例資料仍然與快取共享。"

#: ../../library/gettext.rst:168
#, fuzzy
msgid ""
"If no :file:`.mo` file is found, this function raises :exc:`OSError` if "
"*fallback* is false (which is the default), and returns a :class:"
"`NullTranslations` instance if *fallback* is true."
msgstr ""
"如果未找到 :file:`.mo` 文件，如果 *fallback* 為 false（這是預設值），"
"則此函式引發 :exc:`OSError`，如果 *fallback* 為 false，則回傳一個 "
"NullTranslations 實例真的。"

#: ../../library/gettext.rst:172
#, fuzzy
msgid ":exc:`IOError` used to be raised instead of :exc:`OSError`."
msgstr ":exc:`IOError` 曾經被引發而不是 :exc:`OSError`。"

#: ../../library/gettext.rst:175
msgid "*codeset* parameter is removed."
msgstr "*codeset* 參數被移除。"

#: ../../library/gettext.rst:180
#, fuzzy
msgid ""
"This installs the function :func:`_` in Python's builtins namespace, based "
"on *domain* and *localedir* which are passed to the function :func:"
"`translation`."
msgstr ""
"這會在 Python 的內建命名空間中安裝函式 :func:`_`，基於傳遞給函式 "
":func:`translation` 的 *domain* 和 *localedir*。"

#: ../../library/gettext.rst:183
#, fuzzy
msgid ""
"For the *names* parameter, please see the description of the translation "
"object's :meth:`~NullTranslations.install` method."
msgstr "對於 *names* 參數，請參閱翻譯物件的 :meth:`~NullTranslations.install` "
"方法的說明。"

#: ../../library/gettext.rst:186
#, fuzzy
msgid ""
"As seen below, you usually mark the strings in your application that are "
"candidates for translation, by wrapping them in a call to the :func:`_` "
"function, like this::"
msgstr "如下所示，您通常會在應用程式中標記要翻譯的候選字串，方法是將它們包裝在對 "
":func:`_` 函式的呼叫中，如下所示："

#: ../../library/gettext.rst:192
#, fuzzy
msgid ""
"For convenience, you want the :func:`_` function to be installed in Python's "
"builtins namespace, so it is easily accessible in all modules of your "
"application."
msgstr "為方便起見，您希望將 :func:`_` 函式安裝在 Python "
"的內建命名空間中，以便在應用程式的所有模組中輕鬆訪問它。"

#: ../../library/gettext.rst:196
#, fuzzy
msgid "*names* is now a keyword-only parameter."
msgstr "*names* 現在是一個僅限關鍵字的參數。"

#: ../../library/gettext.rst:200
#, fuzzy
msgid "The :class:`NullTranslations` class"
msgstr ":class:`NullTranslations` 類"

#: ../../library/gettext.rst:202
#, fuzzy
msgid ""
"Translation classes are what actually implement the translation of original "
"source file message strings to translated message strings. The base class "
"used by all translation classes is :class:`NullTranslations`; this provides "
"the basic interface you can use to write your own specialized translation "
"classes.  Here are the methods of :class:`!NullTranslations`:"
msgstr ""
"翻譯類實際上實作了將原始源文件消息字串翻譯成翻譯後的消息字串。所有翻譯類使用"
"的基底類別是 :class:`NullTranslations`;這提供了您可以用來編寫自己的專用翻譯類"
"的基本介面。以下是 :class:`!NullTranslations` 的方法："

#: ../../library/gettext.rst:211
#, fuzzy
msgid ""
"Takes an optional :term:`file object` *fp*, which is ignored by the base "
"class. Initializes \"protected\" instance variables *_info* and *_charset* "
"which are set by derived classes, as well as *_fallback*, which is set "
"through :meth:`add_fallback`.  It then calls ``self._parse(fp)`` if *fp* is "
"not ``None``."
msgstr ""
"採用可選的 :term:`file object` "
"*fp*，它會被基底類別忽略。初始化由派生類設定的“受保護”實例變數 *_info* 和 "
"*_charset*，以及通過 add_fallback 設定的 *_fallback*。如果*fp* "
"不是 ``None``，它會呼叫“self._parse(fp)”。"

#: ../../library/gettext.rst:219
#, fuzzy
msgid ""
"No-op in the base class, this method takes file object *fp*, and reads the "
"data from the file, initializing its message catalog.  If you have an "
"unsupported message catalog file format, you should override this method to "
"parse your format."
msgstr ""
"基底類別中的空操作，此方法獲取文件物件*fp*，並從文件中讀取資料，初始化其消息"
"目錄。如果您有不受支援的消息目錄文件格式，您應該覆蓋此方法來解析您的格式。"

#: ../../library/gettext.rst:227
#, fuzzy
msgid ""
"Add *fallback* as the fallback object for the current translation object. A "
"translation object should consult the fallback if it cannot provide a "
"translation for a given message."
msgstr "新增 *fallback* 作為當前翻譯物件的回退物件。如果翻譯物件無法為給定消息提供翻"
"譯，則應諮詢回退。"

#: ../../library/gettext.rst:234
#, fuzzy
msgid ""
"If a fallback has been set, forward :meth:`!gettext` to the fallback. "
"Otherwise, return *message*.  Overridden in derived classes."
msgstr "如果設定了回退，則將 :meth:`!gettext` "
"轉發到回退。否則，回傳*消息*。在派生類中重寫。"

#: ../../library/gettext.rst:240
#, fuzzy
msgid ""
"If a fallback has been set, forward :meth:`!ngettext` to the fallback. "
"Otherwise, return *singular* if *n* is 1; return *plural* otherwise. "
"Overridden in derived classes."
msgstr ""
"如果設定了回退，則將 :meth:`!ngettext` 轉發到回退。否則，如果 *n* 為 1，"
"則回傳 *singular*；否則回傳 *plural*。在派生類中重寫。"

#: ../../library/gettext.rst:247
#, fuzzy
msgid ""
"If a fallback has been set, forward :meth:`pgettext` to the fallback. "
"Otherwise, return the translated message.  Overridden in derived classes."
msgstr "如果設定了後備，則將 :meth:`pgettext` "
"轉發到後備。否則，回傳翻譯後的消息。在派生類中重寫。"

#: ../../library/gettext.rst:255
#, fuzzy
msgid ""
"If a fallback has been set, forward :meth:`npgettext` to the fallback. "
"Otherwise, return the translated message.  Overridden in derived classes."
msgstr "如果設定了回退，則將 :meth:`npgettext` "
"轉發到回退。否則，回傳翻譯後的消息。在派生類中重寫。"

#: ../../library/gettext.rst:263
#, fuzzy
msgid ""
"Return the \"protected\" :attr:`_info` variable, a dictionary containing the "
"metadata found in the message catalog file."
msgstr "回傳 ``protected`` :attr:`_info` "
"變數，一個包含在消息目錄文件中找到的元資料的字典。"

#: ../../library/gettext.rst:269
#, fuzzy
msgid "Return the encoding of the message catalog file."
msgstr "回傳消息目錄文件的編碼。"

#: ../../library/gettext.rst:274
#, fuzzy
msgid ""
"This method installs :meth:`.gettext` into the built-in namespace, binding "
"it to ``_``."
msgstr "此方法將 :meth:`.gettext` 安裝到內建命名空間中，將其綁定到 ``_``。"

#: ../../library/gettext.rst:277
#, fuzzy
msgid ""
"If the *names* parameter is given, it must be a sequence containing the "
"names of functions you want to install in the builtins namespace in addition "
"to :func:`_`.  Supported names are ``'gettext'``, ``'ngettext'``, "
"``'pgettext'``, ``'npgettext'``, ``'lgettext'``, and ``'lngettext'``."
msgstr ""
"如果給出了 *names* 參數，它必須是一個序列，其中包含除了 :func:`_` 之外要安裝"
"在內建命名空間中的函式的名稱。支援的名稱是 ``gettext`` 、 ``ngettext`` 、 ``pgettext`` 、"
" ``npgettext`` 、 ``lgettext`` 和 ``lngettext``  `。"

#: ../../library/gettext.rst:282
#, fuzzy
msgid ""
"Note that this is only one way, albeit the most convenient way, to make the :"
"func:`_` function available to your application.  Because it affects the "
"entire application globally, and specifically the built-in namespace, "
"localized modules should never install :func:`_`. Instead, they should use "
"this code to make :func:`_` available to their module::"
msgstr ""
"請注意，這只是使 :func:`_` 函式可用於您的應用程式的一種方法，儘管是最方便的方"
"法。因為它會全局影響整個應用程式，特別是內建命名空間，"
"所以本地化模組永遠不應該安裝 :func:`_`。相反，他們應該使用此程式碼使 "
":func:`_` 可用於他們的模組::"

#: ../../library/gettext.rst:292
#, fuzzy
msgid ""
"This puts :func:`_` only in the module's global namespace and so only "
"affects calls within this module."
msgstr "這會將 :func:`_` 僅放在模組的全局命名空間中，因此只會影響此模組內的呼叫。"

#: ../../library/gettext.rst:295
msgid "Added ``'pgettext'`` and ``'npgettext'``."
msgstr "新增 ``'pgettext'`` 與 ``'npgettext'``\\ 。"

#: ../../library/gettext.rst:300
#, fuzzy
msgid "The :class:`GNUTranslations` class"
msgstr ":class:`GNUTranslations` 類"

#: ../../library/gettext.rst:302
#, fuzzy
msgid ""
"The :mod:`gettext` module provides one additional class derived from :class:"
"`NullTranslations`: :class:`GNUTranslations`.  This class overrides :meth:"
"`_parse` to enable reading GNU :program:`gettext` format :file:`.mo` files "
"in both big-endian and little-endian format."
msgstr ""
":mod:`gettext` 模組提供了一個額外的類，派生自 :class:`NullTranslations`: "
":class:`GNUTranslations`。此類覆蓋 :meth:`_parse` 以啟用讀取 GNU "
":program:`gettext` 格式 :file:`.mo` 大端和小端格式的文件。"

#: ../../library/gettext.rst:307
#, fuzzy
msgid ""
":class:`GNUTranslations` parses optional metadata out of the translation "
"catalog. It is convention with GNU :program:`gettext` to include metadata as "
"the translation for the empty string. This metadata is in :rfc:`822`\\ -"
"style ``key: value`` pairs, and should contain the ``Project-Id-Version`` "
"key.  If the key ``Content-Type`` is found, then the ``charset`` property is "
"used to initialize the \"protected\" :attr:`_charset` instance variable, "
"defaulting to ``None`` if not found.  If the charset encoding is specified, "
"then all message ids and message strings read from the catalog are converted "
"to Unicode using this encoding, else ASCII is assumed."
msgstr ""
":class:`GNUTranslations` 從翻譯目錄中解析出可選的元資料。 GNU "
":program:`gettext` 的慣例是包含元資料作為空字串的翻譯。此元資料採用 "
":rfc:`822`\\ 樣式的 ``key: value`` 對，並且應包含 ``Project-Id-Version`` "
"鍵。如果找到鍵“Content-"
"Type”，則 ``charset`` 屬性用於初始化“受保護” :attr:`_charset` "
"實例變數，如果未找到則預設為 ``None``。如果指定了字元集編碼，"
"那麼從目錄中讀取的所有消息 ID 和消息字串都將使用此編碼轉換為 Unicode，"
"否則假定為 ASCII。"

#: ../../library/gettext.rst:317
#, fuzzy
msgid ""
"Since message ids are read as Unicode strings too, all :meth:`*gettext` "
"methods will assume message ids as Unicode strings, not byte strings."
msgstr ""
"由於消息 id 也被讀取為 Unicode 字串，所有 :meth:`*gettext` 方法都將消息 id "
"假定為 Unicode 字串，而不是位元組字串。"

#: ../../library/gettext.rst:320
#, fuzzy
msgid ""
"The entire set of key/value pairs are placed into a dictionary and set as "
"the \"protected\" :attr:`_info` instance variable."
msgstr "整組鍵/值對被放入一個字典中並設定為“受保護的” :attr:`_info` 實例變數。"

#: ../../library/gettext.rst:323
#, fuzzy
msgid ""
"If the :file:`.mo` file's magic number is invalid, the major version number "
"is unexpected, or if other problems occur while reading the file, "
"instantiating a :class:`GNUTranslations` class can raise :exc:`OSError`."
msgstr ""
"如果 :file:`.mo` "
"文件的幻數無效，主版本號是意外的，或者如果在讀取文件時出現其他問題，"
"則實例化一個 GNUTranslations 類會引發 :exc:`OSError`。"

#: ../../library/gettext.rst:329
#, fuzzy
msgid ""
"The following methods are overridden from the base class implementation:"
msgstr "從基底類別實作中重寫了以下方法："

#: ../../library/gettext.rst:333
#, fuzzy
msgid ""
"Look up the *message* id in the catalog and return the corresponding message "
"string, as a Unicode string.  If there is no entry in the catalog for the "
"*message* id, and a fallback has been set, the look up is forwarded to the "
"fallback's :meth:`~NullTranslations.gettext` method.  Otherwise, the "
"*message* id is returned."
msgstr ""
"在目錄中查找 *message* id 並回傳相應的消息字串，作為 Unicode 字串。"
"如果目錄中沒有 *message* id 的條目，並且已設定回退，則查找將轉發到回退的 "
":meth:`~NullTranslations.gettext` 方法。否則，回傳 *message* id。"

#: ../../library/gettext.rst:342
#, fuzzy
msgid ""
"Do a plural-forms lookup of a message id.  *singular* is used as the message "
"id for purposes of lookup in the catalog, while *n* is used to determine "
"which plural form to use.  The returned message string is a Unicode string."
msgstr ""
"對消息 ID 進行複數形式查找。 *singular* 用作消息 ID，以便在目錄中查找，而 *n*"
" 用於確定要使用的複數形式。回傳的消息字串是 Unicode 字串。"

#: ../../library/gettext.rst:346
#, fuzzy
msgid ""
"If the message id is not found in the catalog, and a fallback is specified, "
"the request is forwarded to the fallback's :meth:`~NullTranslations."
"ngettext` method.  Otherwise, when *n* is 1 *singular* is returned, and "
"*plural* is returned in all other cases."
msgstr ""
"如果在目錄中找不到消息 ID，並且指定了回退，則請求將轉發到回退的 "
":meth:`~NullTranslations.ngettext` 方法。否則，當 *n* 為 1 時，回傳 "
"*singular*，而在所有其他情況下回傳 *plural*。"

#: ../../library/gettext.rst:351
msgid "Here is an example::"
msgstr ""
"以下是個範例：\n"
"\n"
"::"

#: ../../library/gettext.rst:363
#, fuzzy
msgid ""
"Look up the *context* and *message* id in the catalog and return the "
"corresponding message string, as a Unicode string.  If there is no entry in "
"the catalog for the *message* id and *context*, and a fallback has been set, "
"the look up is forwarded to the fallback's :meth:`pgettext` method.  "
"Otherwise, the *message* id is returned."
msgstr ""
"在目錄中查找 *context* 和 *message* id 並回傳相應的消息字串，作為 Unicode "
"字串。如果目錄中沒有 *message* id 和 *context* 的條目，並且已設定回退，"
"則查找將轉發到回退的 pgettext 方法。否則，回傳 *message* id。"

#: ../../library/gettext.rst:374
#, fuzzy
msgid ""
"Do a plural-forms lookup of a message id.  *singular* is used as the message "
"id for purposes of lookup in the catalog, while *n* is used to determine "
"which plural form to use."
msgstr "對消息 ID 進行複數形式查找。 *singular* 用作消息 ID，以便在目錄中查找，而 *n*"
" 用於確定要使用的複數形式。"

#: ../../library/gettext.rst:378
#, fuzzy
msgid ""
"If the message id for *context* is not found in the catalog, and a fallback "
"is specified, the request is forwarded to the fallback's :meth:`npgettext` "
"method.  Otherwise, when *n* is 1 *singular* is returned, and *plural* is "
"returned in all other cases."
msgstr ""
"如果在目錄中找不到 *context* 的消息 ID，並且指定了回退，則請求將轉發到回退的 "
"npgettext 方法。否則，當 *n* 為 1 時，回傳 *singular*，"
"而在所有其他情況下回傳 *plural*。"

#: ../../library/gettext.rst:387
#, fuzzy
msgid "Solaris message catalog support"
msgstr "Solaris 消息目錄支援"

#: ../../library/gettext.rst:389
#, fuzzy
msgid ""
"The Solaris operating system defines its own binary :file:`.mo` file format, "
"but since no documentation can be found on this format, it is not supported "
"at this time."
msgstr "Solaris 操作系統定義了它自己的二進位 :file:`.mo` "
"文件格式，但是由於找不到關於這種格式的文檔，所以目前不支援它。"

#: ../../library/gettext.rst:395
#, fuzzy
msgid "The Catalog constructor"
msgstr "目錄構造器"

#: ../../library/gettext.rst:399
#, fuzzy
msgid ""
"GNOME uses a version of the :mod:`gettext` module by James Henstridge, but "
"this version has a slightly different API.  Its documented usage was::"
msgstr ""
"GNOME 使用 James Henstridge 的 :mod:`gettext` 模組的一個版本，但這個版本的 "
"API 略有不同。它記錄的用法是::"

#: ../../library/gettext.rst:407
#, fuzzy
msgid ""
"For compatibility with this older module, the function :func:`Catalog` is an "
"alias for the :func:`translation` function described above."
msgstr "為了與這個舊模組相容，函式 :func:`Catalog` 是上述 :func:`translation` "
"函式的別名。"

#: ../../library/gettext.rst:410
#, fuzzy
msgid ""
"One difference between this module and Henstridge's: his catalog objects "
"supported access through a mapping API, but this appears to be unused and so "
"is not currently supported."
msgstr "此模組與 Henstridge 的模組之間的一個區別是：他的目錄物件支援通過映射 API "
"進行訪問，但這似乎未被使用，因此當前不受支援。"

#: ../../library/gettext.rst:416
#, fuzzy
msgid "Internationalizing your programs and modules"
msgstr "國際化您的程式和模組"

#: ../../library/gettext.rst:418
#, fuzzy
msgid ""
"Internationalization (I18N) refers to the operation by which a program is "
"made aware of multiple languages.  Localization (L10N) refers to the "
"adaptation of your program, once internationalized, to the local language "
"and cultural habits. In order to provide multilingual messages for your "
"Python programs, you need to take the following steps:"
msgstr ""
"國際化 (I18N) 是指使程式能夠識別多種語言的操作。本地化 (L10N) "
"是指您的程式在國際化後適應當地語言和文化習慣。為了為您的 Python "
"程式提供多語言消息，您需要執行以下步驟："

#: ../../library/gettext.rst:424
#, fuzzy
msgid ""
"prepare your program or module by specially marking translatable strings"
msgstr "通過特別標記可翻譯字串來準備您的程式或模組"

#: ../../library/gettext.rst:426
#, fuzzy
msgid ""
"run a suite of tools over your marked files to generate raw messages catalogs"
msgstr "在標記的文件上運行一套工具以生成原始消息目錄"

#: ../../library/gettext.rst:428
#, fuzzy
msgid "create language-specific translations of the message catalogs"
msgstr "建立消息目錄的特定語言翻譯"

#: ../../library/gettext.rst:430
#, fuzzy
msgid ""
"use the :mod:`gettext` module so that message strings are properly translated"
msgstr "使用 :mod:`gettext` 模組以便正確翻譯消息字串"

#: ../../library/gettext.rst:432
#, fuzzy
msgid ""
"In order to prepare your code for I18N, you need to look at all the strings "
"in your files.  Any string that needs to be translated should be marked by "
"wrapping it in ``_('...')`` --- that is, a call to the function :func:`_`.  "
"For example::"
msgstr ""
"為了為 I18N 準備程式碼，您需要查看文件中的所有字串。"
"任何需要翻譯的字串都應該通過將其包裝在 ``_('...')`` 中進行標記 --- "
"即呼叫函式 :func:`_`。例如：："

#: ../../library/gettext.rst:441
#, fuzzy
msgid ""
"In this example, the string ``'writing a log message'`` is marked as a "
"candidate for translation, while the strings ``'mylog.txt'`` and ``'w'`` are "
"not."
msgstr "在這個例子中，字串“'writing a log "
"message'”被標記為翻譯的候選者，而字串“'mylog.txt'”和 ``'w'`` 則不是。"

#: ../../library/gettext.rst:444
#, fuzzy
msgid ""
"There are a few tools to extract the strings meant for translation. The "
"original GNU :program:`gettext` only supported C or C++ source code but its "
"extended version :program:`xgettext` scans code written in a number of "
"languages, including Python, to find strings marked as translatable.  `Babel "
"<https://babel.pocoo.org/>`__ is a Python internationalization library that "
"includes a :file:`pybabel` script to extract and compile message catalogs.  "
"François Pinard's program called :program:`xpot` does a similar job and is "
"available as part of his `po-utils package <https://github.com/pinard/po-"
"utils>`__."
msgstr ""
"有一些工具可以提取用於翻譯的字串。原始 GNU :program:`gettext` 僅支援 C 或 C++"
" 源程式碼，但其擴充版本 :program:`xgettext` 掃描以多種語言（包括 "
"Python）編寫的程式碼，以查找標記為可翻譯的字串。 `Babel <https://babel.pocoo."
"org/>`__ 是一個 Python 國際化庫，包括一個 :file:`pybabel` "
"腳本來提取和編譯消息目錄。 François Pinard 的名為 :program:`xpot` "
"的程式執行類似的工作，並且作為他的 `po-utils 包 <https://github.com/pinard/"
"po-utils>`__ 的一部分提供。"

#: ../../library/gettext.rst:454
#, fuzzy
msgid ""
"(Python also includes pure-Python versions of these programs, called :"
"program:`pygettext.py` and :program:`msgfmt.py`; some Python distributions "
"will install them for you.  :program:`pygettext.py` is similar to :program:"
"`xgettext`, but only understands Python source code and cannot handle other "
"programming languages such as C or C++. :program:`pygettext.py` supports a "
"command-line interface similar to :program:`xgettext`; for details on its "
"use, run ``pygettext.py --help``.  :program:`msgfmt.py` is binary compatible "
"with GNU :program:`msgfmt`.  With these two programs, you may not need the "
"GNU :program:`gettext` package to internationalize your Python applications.)"
msgstr ""
"（Python 還包括這些程式的純 Python 版本，稱為 :program:`pygettext.py` 和 "
":program:`msgfmt.py`；一些 Python 發行版會為您安裝它們。:program:`pygettext."
"py` 是類似的 :program:`xgettext`，但只理解 Python "
"源程式碼，無法處理其他編程語言，如 C 或 C++。:program:`pygettext.py` "
"支援類似於 :program:`xgettext` 的命令列界面；對於有關其使用的詳細資訊，請運行 "
"``pygettext.py --help``。:program:`msgfmt.py` 與 GNU :program:`msgfmt` "
"二進位相容。使用這兩個程式，您可能不需要 GNU :program :`gettext` "
"包來國際化你的 Python 應用程式。）"

#: ../../library/gettext.rst:466
#, fuzzy
msgid ""
":program:`xgettext`, :program:`pygettext`, and similar tools generate :file:"
"`.po` files that are message catalogs.  They are structured human-readable "
"files that contain every marked string in the source code, along with a "
"placeholder for the translated versions of these strings."
msgstr ""
":program:`xgettext`、:program:`pygettext` 和類似工俱生成 :file:`.po` 文件，這"
"些文件是消息目錄。它們是結構化的人類可讀文件，其中包含源程式碼中每個標記的字"
"串，以及這些字串的翻譯版本的佔位符。"

#: ../../library/gettext.rst:472
#, fuzzy
msgid ""
"Copies of these :file:`.po` files are then handed over to the individual "
"human translators who write translations for every supported natural "
"language.  They send back the completed language-specific versions as a :"
"file:`<language-name>.po` file that's compiled into a machine-readable :file:"
"`.mo` binary catalog file using the :program:`msgfmt` program.  The :file:`."
"mo` files are used by the :mod:`gettext` module for the actual translation "
"processing at run-time."
msgstr ""
"然後將這些 :file:`.po` "
"文件的副本移交給為每種支援的自然語言編寫翻譯的個人翻譯人員。"
"他們將完整的特定語言版本作為 :file:`<language-name>.po` 文件發回，該文件使用 "
":program:`msgfmt` 程式編譯成機器可讀的 :file:`.mo` 二進位目錄文件. :file:`."
"mo` 文件被 :mod:`gettext` 模組用於運行時的實際翻譯處理。"

#: ../../library/gettext.rst:481
#, fuzzy
msgid ""
"How you use the :mod:`gettext` module in your code depends on whether you "
"are internationalizing a single module or your entire application. The next "
"two sections will discuss each case."
msgstr "如何在程式碼中使用 :mod:`gettext` "
"模組取決於您是要國際化單個模組還是整個應用程式。接下來的兩節將討論每個案例。"

#: ../../library/gettext.rst:487
#, fuzzy
msgid "Localizing your module"
msgstr "本地化你的模組"

#: ../../library/gettext.rst:489
#, fuzzy
msgid ""
"If you are localizing your module, you must take care not to make global "
"changes, e.g. to the built-in namespace. You should not use the GNU :program:"
"`gettext` API but instead the class-based API."
msgstr ""
"如果您正在本地化您的模組，您必須注意不要進行全局更改，例如到內建命名空間。"
"您不應使用 GNU :program:`gettext` API，而應使用基於類的 API。"

#: ../../library/gettext.rst:493
#, fuzzy
msgid ""
"Let's say your module is called \"spam\" and the module's various natural "
"language translation :file:`.mo` files reside in :file:`/usr/share/locale` "
"in GNU :program:`gettext` format.  Here's what you would put at the top of "
"your module::"
msgstr ""
"假設您的模組稱為“垃圾郵件”，模組的各種自然語言翻譯 :file:`.mo` 文件以 GNU "
":program:`gettext` 格式駐留在 :file:`/usr/share/locale` "
"中。這是您要放在模組頂部的內容::"

#: ../../library/gettext.rst:504
#, fuzzy
msgid "Localizing your application"
msgstr "本地化您的應用程式"

#: ../../library/gettext.rst:506
#, fuzzy
msgid ""
"If you are localizing your application, you can install the :func:`_` "
"function globally into the built-in namespace, usually in the main driver "
"file of your application.  This will let all your application-specific files "
"just use ``_('...')`` without having to explicitly install it in each file."
msgstr ""
"如果您正在本地化您的應用程式，您可以將 :func:`_` "
"函式全局安裝到內建命名空間中，通常在您的應用程式的主驅動程式文件中。"
"這將使您所有的特定於應用程式的文件只使用 ``_('...')`` "
"而不必在每個文件中顯式安裝它。"

#: ../../library/gettext.rst:511
#, fuzzy
msgid ""
"In the simple case then, you need only add the following bit of code to the "
"main driver file of your application::"
msgstr "那麼在簡單的情況下，您只需將以下程式碼新增到應用程式的主驅動程式文件中："

#: ../../library/gettext.rst:517
#, fuzzy
msgid ""
"If you need to set the locale directory, you can pass it into the :func:"
"`install` function::"
msgstr "如果需要設定語言環境目錄，可以將其傳遞給 :func:`install` 函式::"

#: ../../library/gettext.rst:525
#, fuzzy
msgid "Changing languages on the fly"
msgstr "即時更改語言"

#: ../../library/gettext.rst:527
#, fuzzy
msgid ""
"If your program needs to support many languages at the same time, you may "
"want to create multiple translation instances and then switch between them "
"explicitly, like so::"
msgstr "如果您的程式需要同時支援多種語言，您可能希望建立多個翻譯實例，然後在它們之間"
"顯式切換，如下所示："

#: ../../library/gettext.rst:548
#, fuzzy
msgid "Deferred translations"
msgstr "延遲翻譯"

#: ../../library/gettext.rst:550
#, fuzzy
msgid ""
"In most coding situations, strings are translated where they are coded. "
"Occasionally however, you need to mark strings for translation, but defer "
"actual translation until later.  A classic example is::"
msgstr "在大多數編碼情況下，字串在編碼的地方被翻譯。然而，有時您需要標記要翻譯的字串"
"，但將實際翻譯推遲到以後。一個經典的例子是："

#: ../../library/gettext.rst:563
#, fuzzy
msgid ""
"Here, you want to mark the strings in the ``animals`` list as being "
"translatable, but you don't actually want to translate them until they are "
"printed."
msgstr "在這裡，您想將 ``animals`` "
"列表中的字串標記為可翻譯，但實際上您不想翻譯它們，直到它們被印出出來。"

#: ../../library/gettext.rst:567
#, fuzzy
msgid "Here is one way you can handle this situation::"
msgstr "這是您可以處理這種情況的一種方法::"

#: ../../library/gettext.rst:583
#, fuzzy
msgid ""
"This works because the dummy definition of :func:`_` simply returns the "
"string unchanged.  And this dummy definition will temporarily override any "
"definition of :func:`_` in the built-in namespace (until the :keyword:`del` "
"command). Take care, though if you have a previous definition of :func:`_` "
"in the local namespace."
msgstr ""
"這是有效的，因為 :func:`_` 的虛擬定義簡單地回傳不變的字串。"
"這個虛擬定義將暫時覆蓋內建命名空間中 :func:`_` 的任何定義（直到 "
":keyword:`del` 命令）。請注意，如果您之前在本地命名空間中定義了 :func:`_`。"

#: ../../library/gettext.rst:589
#, fuzzy
msgid ""
"Note that the second use of :func:`_` will not identify \"a\" as being "
"translatable to the :program:`gettext` program, because the parameter is not "
"a string literal."
msgstr "請注意，第二次使用 :func:`_` 不會將 ``a``識別為可翻譯為 :program:`gettext` "
"程式，因為該參數不是字串文字。"

#: ../../library/gettext.rst:593
#, fuzzy
msgid "Another way to handle this is with the following example::"
msgstr "另一種處理方法是使用以下示例："

#: ../../library/gettext.rst:607
#, fuzzy
msgid ""
"In this case, you are marking translatable strings with the function :func:"
"`N_`, which won't conflict with any definition of :func:`_`. However, you "
"will need to teach your message extraction program to look for translatable "
"strings marked with :func:`N_`. :program:`xgettext`, :program:`pygettext`, "
"``pybabel extract``, and :program:`xpot` all support this through the use of "
"the :option:`!-k` command-line switch. The choice of :func:`N_` here is "
"totally arbitrary; it could have just as easily been :func:"
"`MarkThisStringForTranslation`."
msgstr ""
"在這種情況下，您使用函式 :func:`N_` 標記可翻譯字串，這不會與 :func:`_` "
"的任何定義衝突。但是，您將需要教您的消息提取程式查找標有 :func:`N_` "
"的可翻譯字串。 :program:`xgettext`、:program:`pygettext`、``pybabel extract``"
" 和 :program:`xpot` 都通過使用 :option:`!-k` 命令列開關來支援這一點。這裡的 "
":func:`N_` 的選擇完全是任意的；它可能很容易成為 "
":func:`MarkThisStringForTranslation`。"

#: ../../library/gettext.rst:618
msgid "Acknowledgements"
msgstr "致謝"

#: ../../library/gettext.rst:620
#, fuzzy
msgid ""
"The following people contributed code, feedback, design suggestions, "
"previous implementations, and valuable experience to the creation of this "
"module:"
msgstr "以下人員為建立此模組貢獻了程式碼、反饋、設計建議、以前的實作和寶貴的經驗："

#: ../../library/gettext.rst:623
msgid "Peter Funk"
msgstr "Peter Funk"

#: ../../library/gettext.rst:625
msgid "James Henstridge"
msgstr "James Henstridge"

#: ../../library/gettext.rst:627
msgid "Juan David Ibáñez Palomar"
msgstr "Juan David Ibáñez Palomar"

#: ../../library/gettext.rst:629
msgid "Marc-André Lemburg"
msgstr "Marc-André Lemburg"

#: ../../library/gettext.rst:631
msgid "Martin von Löwis"
msgstr "Martin von Löwis"

#: ../../library/gettext.rst:633
msgid "François Pinard"
msgstr "François Pinard"

#: ../../library/gettext.rst:635
msgid "Barry Warsaw"
msgstr "Barry Warsaw"

#: ../../library/gettext.rst:637
msgid "Gustavo Niemeyer"
msgstr "Gustavo Niemeyer"

#: ../../library/gettext.rst:640
msgid "Footnotes"
msgstr "註解"

#: ../../library/gettext.rst:641
#, fuzzy
msgid ""
"The default locale directory is system dependent; for example, on RedHat "
"Linux it is :file:`/usr/share/locale`, but on Solaris it is :file:`/usr/lib/"
"locale`. The :mod:`gettext` module does not try to support these system "
"dependent defaults; instead its default is :file:`{sys.base_prefix}/share/"
"locale` (see :data:`sys.base_prefix`). For this reason, it is always best to "
"call :func:`bindtextdomain` with an explicit absolute path at the start of "
"your application."
msgstr ""
"預設的語言環境目錄是系統相關的；例如，在 RedHat Linux 上它是 :file:`/usr/"
"share/locale`，但在 Solaris 上它是 :file:`/usr/lib/locale`。 :mod:`gettext` "
"模組不會嘗試支援這些系統相關的預設值；相反，它的預設值是 :file:`{sys."
"base_prefix}/share/locale`（參見 :data:`sys.base_prefix`）。出於這個原因，"
"最好在應用程式開始時使用顯式絕對路徑呼叫 :func:`bindtextdomain`。"

#: ../../library/gettext.rst:649
msgid "See the footnote for :func:`bindtextdomain` above."
msgstr "請見上方 :func:`bindtextdomain` 之註解。"
