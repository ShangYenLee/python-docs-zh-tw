# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# jerrychen <jerrychen.ee@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-15 20:43+0000\n"
"PO-Revision-Date: 2018-05-23 14:37+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/2to3.rst:4
msgid "2to3 --- Automated Python 2 to 3 code translation"
msgstr "2to3 --- 自動將 Python 2 的程式碼轉成 Python 3"

#: ../../library/2to3.rst:8
#, fuzzy
msgid ""
"2to3 is a Python program that reads Python 2.x source code and applies a "
"series of *fixers* to transform it into valid Python 3.x code.  The standard "
"library contains a rich set of fixers that will handle almost all code.  "
"2to3 supporting library :mod:`lib2to3` is, however, a flexible and generic "
"library, so it is possible to write your own fixers for 2to3."
msgstr ""
"2to3 是一個 Python 程式，它讀取 Python 2.x 源程式碼並應用一系列 *fixers* "
"將其轉換為有效的 Python 3.x "
"程式碼。標準庫包含一組豐富的修復程式，可以處理幾乎所有程式碼。 2to3 支援庫 "
":mod:`lib2to3` 是一個靈活的通用庫，因此可以為 2to3 編寫自己的修復程式。"

#: ../../library/2to3.rst:19
#, fuzzy
msgid ""
"The ``lib2to3`` module was marked pending for deprecation in Python 3.9 "
"(raising :exc:`PendingDeprecationWarning` on import) and fully deprecated in "
"Python 3.11 (raising :exc:`DeprecationWarning`).  The ``2to3`` tool is part "
"of that.  It will be removed in Python 3.13."
msgstr ""
"``lib2to3`` 模組在 Python 3.9 中被標記為待棄用（在導入時引發 "
":exc:`PendingDeprecationWarning`）並在 Python 3.11 中被完全棄用（引發 "
":exc:`DeprecationWarning`）。 ``2to3`` 工具就是其中的一部分。它將在 Python "
"3.13 中刪除。"

#: ../../library/2to3.rst:23
msgid "Using 2to3"
msgstr "使用 2to3"

#: ../../library/2to3.rst:25
#, fuzzy
msgid ""
"2to3 will usually be installed with the Python interpreter as a script.  It "
"is also located in the :file:`Tools/scripts` directory of the Python root."
msgstr "2to3 通常作為腳本與 Python 直譯器一起安裝。它也位於 Python 根目錄的 :file:`"
"Tools/scripts` 目錄中。"

#: ../../library/2to3.rst:28
#, fuzzy
msgid ""
"2to3's basic arguments are a list of files or directories to transform.  The "
"directories are recursively traversed for Python sources."
msgstr "2to3 的基本參數是要轉換的文件或目錄的列表。遞迴遍歷 Python 源程式碼的目錄。"

#: ../../library/2to3.rst:31
msgid "Here is a sample Python 2.x source file, :file:`example.py`::"
msgstr "這邊有簡單的 Python 2的原始檔案 :file:`example.py`::"

#: ../../library/2to3.rst:39
#, fuzzy
msgid "It can be converted to Python 3.x code via 2to3 on the command line:"
msgstr "可以在命令列通過2to3轉成Python 3.x程式碼："

#: ../../library/2to3.rst:45
#, fuzzy
msgid ""
"A diff against the original source file is printed.  2to3 can also write the "
"needed modifications right back to the source file.  (A backup of the "
"original file is made unless :option:`!-n` is also given.)  Writing the "
"changes back is enabled with the :option:`!-w` flag:"
msgstr ""
"印出與原始源文件的差異。 2to3 還可以將需要的修改直接寫回源文件。 （"
"除非還給出了 :option:`!-n`，否則會對原始文件進行備份。）使用 :option:`!-w` "
"旗標啟用寫回更改："

#: ../../library/2to3.rst:54
#, fuzzy
msgid "After transformation, :file:`example.py` looks like this::"
msgstr "轉換後，:file:`example.py` 看起來像這樣::"

#: ../../library/2to3.rst:62
#, fuzzy
msgid ""
"Comments and exact indentation are preserved throughout the translation "
"process."
msgstr "註釋和準確的縮進在整個翻譯過程中得到保留。"

#: ../../library/2to3.rst:64
#, fuzzy
msgid ""
"By default, 2to3 runs a set of :ref:`predefined fixers <2to3-fixers>`.  The :"
"option:`!-l` flag lists all available fixers.  An explicit set of fixers to "
"run can be given with :option:`!-f`.  Likewise the :option:`!-x` explicitly "
"disables a fixer.  The following example runs only the ``imports`` and "
"``has_key`` fixers:"
msgstr ""
"預設情況下，2to3 運行一組 :ref:`predefined fixers <2to3-fixers>`。 "
":option:`!-l` 旗標列出了所有可用的修復程式。可以使用 :option:`!-f` "
"給出要運行的一組明確的修復程式。同樣，:option:`!-x` 明確禁用修復程式。"
"以下示例僅運行 ``imports`` 和 ``has_key`` 修復器："

#: ../../library/2to3.rst:73
#, fuzzy
msgid "This command runs every fixer except the ``apply`` fixer:"
msgstr "此命令運行除 ``apply`` 修復程式之外的所有修復程式："

#: ../../library/2to3.rst:79
#, fuzzy
msgid ""
"Some fixers are *explicit*, meaning they aren't run by default and must be "
"listed on the command line to be run.  Here, in addition to the default "
"fixers, the ``idioms`` fixer is run:"
msgstr ""
"一些修復程式是*明確*的，這意味著它們不是預設運行的，必須在命令列上列出才能運"
"行。在這裡，除了預設修復器之外，還運行了 ``idioms`` 修復器："

#: ../../library/2to3.rst:87
#, fuzzy
msgid "Notice how passing ``all`` enables all default fixers."
msgstr "請注意傳遞 ``all`` 是如何啟用所有預設修復程式的。"

#: ../../library/2to3.rst:89
#, fuzzy
msgid ""
"Sometimes 2to3 will find a place in your source code that needs to be "
"changed, but 2to3 cannot fix automatically.  In this case, 2to3 will print a "
"warning beneath the diff for a file.  You should address the warning in "
"order to have compliant 3.x code."
msgstr ""
"有時 2to3 會在您的源程式碼中找到需要更改的地方，但 2to3 "
"無法自動修復。在這種情況下，2to3 將在文件差異下方印出一條警告。"
"您應該解決該警告以獲得相容的 3.x 程式碼。"

#: ../../library/2to3.rst:94
#, fuzzy
msgid ""
"2to3 can also refactor doctests.  To enable this mode, use the :option:`!-d` "
"flag.  Note that *only* doctests will be refactored.  This also doesn't "
"require the module to be valid Python.  For example, doctest like examples "
"in a reST document could also be refactored with this option."
msgstr ""
"2to3 也可以重構 doctests。要啟用此模式，請使用 :option:`!-d` "
"旗標。請注意，*只有* doctests 將被重構。這也不要求模組是有效的 Python。例如，"
"reST 文檔中類似 doctest 的示例也可以使用此選項進行重構。"

#: ../../library/2to3.rst:99
#, fuzzy
msgid ""
"The :option:`!-v` option enables output of more information on the "
"translation process."
msgstr ":option:`!-v` 選項可以輸出有關翻譯過程的更多資訊。"

#: ../../library/2to3.rst:102
#, fuzzy
msgid ""
"Since some print statements can be parsed as function calls or statements, "
"2to3 cannot always read files containing the print function.  When 2to3 "
"detects the presence of the ``from __future__ import print_function`` "
"compiler directive, it modifies its internal grammar to interpret :func:"
"`print` as a function.  This change can also be enabled manually with the :"
"option:`!-p` flag.  Use :option:`!-p` to run fixers on code that already has "
"had its print statements converted. Also :option:`!-e` can be used to make :"
"func:`exec` a function."
msgstr ""
"由於一些 print 語句可以被解析為函式呼叫或語句，2to3 不能總是讀取包含 print "
"函式的文件。當 2to3 檢測到 ``from __future__ import print_function`` "
"編譯器指令的存在時，它會修改其內部語法以將 :func:`print` 解釋為一個函式。"
"也可以使用 :option:`!-p` 旗標手動啟用此更改。使用 :option:`!-p` "
"在已經轉換印出語句的程式碼上運行修復程式。 :option:`!-e` 也可用於使 "
":func:`exec` 成為一個函式。"

#: ../../library/2to3.rst:110
#, fuzzy
msgid ""
"The :option:`!-o` or :option:`!--output-dir` option allows specification of "
"an alternate directory for processed output files to be written to.  The :"
"option:`!-n` flag is required when using this as backup files do not make "
"sense when not overwriting the input files."
msgstr ""
":option:`!-o` 或 :option:`!--output-dir` "
"選項允許為要寫入的已處理輸出文件指定備用目錄。 :option:`!-n` "
"旗標在使用它時是必需的，因為備份文件在不覆蓋輸入文件時沒有意義。"

#: ../../library/2to3.rst:115
msgid "The :option:`!-o` option was added."
msgstr "新增 :option:`!-o` 選項。"

#: ../../library/2to3.rst:118
#, fuzzy
msgid ""
"The :option:`!-W` or :option:`!--write-unchanged-files` flag tells 2to3 to "
"always write output files even if no changes were required to the file.  "
"This is most useful with :option:`!-o` so that an entire Python source tree "
"is copied with translation from one directory to another. This option "
"implies the :option:`!-w` flag as it would not make sense otherwise."
msgstr ""
":option:`!-W` 或 :option:`!--write-unchanged-files` 旗標告訴 2to3 "
"始終寫入輸出文件，即使文件不需要更改也是如此。這對 :option:`!-o` 最有用，"
"這樣整個 Python 源程式碼樹就會被複製，並從一個目錄轉換到另一個目錄。"
"這個選項暗示了 :option:`!-w` 旗標，否則它就沒有意義了。"

#: ../../library/2to3.rst:124
#, fuzzy
msgid "The :option:`!-W` flag was added."
msgstr "新增了 :option:`!-W` 旗標。"

#: ../../library/2to3.rst:127
#, fuzzy
msgid ""
"The :option:`!--add-suffix` option specifies a string to append to all "
"output filenames.  The :option:`!-n` flag is required when specifying this "
"as backups are not necessary when writing to different filenames.  Example:"
msgstr ""
":option:`!--add-suffix` 選項指定一個字串附加到所有輸出文件名。 :option:`!-n` "
"旗標在指定時是必需的，因為在寫入不同的文件名時不需要備份。例子："

#: ../../library/2to3.rst:135
#, fuzzy
msgid "Will cause a converted file named ``example.py3`` to be written."
msgstr "將導致寫入一個名為 example.py3 的轉換文件。"

#: ../../library/2to3.rst:137
#, fuzzy
msgid "The :option:`!--add-suffix` option was added."
msgstr "新增了 :option:`!--add-suffix` 選項。"

#: ../../library/2to3.rst:140
#, fuzzy
msgid "To translate an entire project from one directory tree to another use:"
msgstr "要將整個項目從一個目錄樹轉換為另一個目錄樹，請使用："

#: ../../library/2to3.rst:150
#, fuzzy
msgid "Fixers"
msgstr "固定器"

#: ../../library/2to3.rst:152
#, fuzzy
msgid ""
"Each step of transforming code is encapsulated in a fixer.  The command "
"``2to3 -l`` lists them.  As :ref:`documented above <2to3-using>`, each can "
"be turned on and off individually.  They are described here in more detail."
msgstr ""
"轉換程式碼的每一步都封裝在一個固定器中。命令 ``2to3 -l`` 列出了它們。如 "
":ref:`上面 <2to3-using> "
"所述，每個都可以單獨打開和關閉。它們在此處有更詳細的描述。"

#: ../../library/2to3.rst:159
#, fuzzy
msgid ""
"Removes usage of :func:`apply`.  For example ``apply(function, *args, "
"**kwargs)`` is converted to ``function(*args, **kwargs)``."
msgstr ""
"刪除 :func:`apply` 的用法。例如，``apply(function, *args, **kwargs)`` "
"被轉換為 ``function(*args, **kwargs)``。"

#: ../../library/2to3.rst:164
#, fuzzy
msgid "Replaces deprecated :mod:`unittest` method names with the correct ones."
msgstr "用正確的方法名稱替換棄用的 :mod:`unittest` 方法名稱。"

#: ../../library/2to3.rst:167 ../../library/2to3.rst:356
msgid "From"
msgstr "從"

#: ../../library/2to3.rst:167 ../../library/2to3.rst:356
msgid "To"
msgstr "到"

#: ../../library/2to3.rst:169
msgid "``failUnlessEqual(a, b)``"
msgstr "``failUnlessEqual(a, b)``"

#: ../../library/2to3.rst:169 ../../library/2to3.rst:171
msgid ":meth:`assertEqual(a, b) <unittest.TestCase.assertEqual>`"
msgstr ":meth:`assertEqual(a, b) <unittest.TestCase.assertEqual>`"

#: ../../library/2to3.rst:171
msgid "``assertEquals(a, b)``"
msgstr "``assertEquals(a, b)``"

#: ../../library/2to3.rst:173
msgid "``failIfEqual(a, b)``"
msgstr "``failIfEqual(a, b)``"

#: ../../library/2to3.rst:173 ../../library/2to3.rst:175
msgid ":meth:`assertNotEqual(a, b) <unittest.TestCase.assertNotEqual>`"
msgstr ":meth:`assertNotEqual(a, b) <unittest.TestCase.assertNotEqual>`"

#: ../../library/2to3.rst:175
msgid "``assertNotEquals(a, b)``"
msgstr "``assertNotEquals(a, b)``"

#: ../../library/2to3.rst:177
msgid "``failUnless(a)``"
msgstr "``failUnless(a)``"

#: ../../library/2to3.rst:177 ../../library/2to3.rst:179
msgid ":meth:`assertTrue(a) <unittest.TestCase.assertTrue>`"
msgstr ":meth:`assertTrue(a) <unittest.TestCase.assertTrue>`"

#: ../../library/2to3.rst:179
msgid "``assert_(a)``"
msgstr "``assert_(a)``"

#: ../../library/2to3.rst:181
msgid "``failIf(a)``"
msgstr "``failIf(a)``"

#: ../../library/2to3.rst:181
msgid ":meth:`assertFalse(a) <unittest.TestCase.assertFalse>`"
msgstr ":meth:`assertFalse(a) <unittest.TestCase.assertFalse>`"

#: ../../library/2to3.rst:183
msgid "``failUnlessRaises(exc, cal)``"
msgstr "``failUnlessRaises(exc, cal)``"

#: ../../library/2to3.rst:183
msgid ":meth:`assertRaises(exc, cal) <unittest.TestCase.assertRaises>`"
msgstr ":meth:`assertRaises(exc, cal) <unittest.TestCase.assertRaises>`"

#: ../../library/2to3.rst:185
msgid "``failUnlessAlmostEqual(a, b)``"
msgstr "``failUnlessAlmostEqual(a, b)``"

#: ../../library/2to3.rst:185 ../../library/2to3.rst:187
msgid ":meth:`assertAlmostEqual(a, b) <unittest.TestCase.assertAlmostEqual>`"
msgstr ":meth:`assertAlmostEqual(a, b) <unittest.TestCase.assertAlmostEqual>`"

#: ../../library/2to3.rst:187
msgid "``assertAlmostEquals(a, b)``"
msgstr "``assertAlmostEquals(a, b)``"

#: ../../library/2to3.rst:189
msgid "``failIfAlmostEqual(a, b)``"
msgstr "``failIfAlmostEqual(a, b)``"

#: ../../library/2to3.rst:189 ../../library/2to3.rst:191
#, fuzzy
msgid ""
":meth:`assertNotAlmostEqual(a, b) <unittest.TestCase.assertNotAlmostEqual>`"
msgstr ""
":meth:`assertNotAlmostEqual(a, b) <unittest.TestCase.assertNotAlmostEqual>`"

#: ../../library/2to3.rst:191
msgid "``assertNotAlmostEquals(a, b)``"
msgstr "``assertNotAlmostEquals(a, b)``"

#: ../../library/2to3.rst:197
#, fuzzy
msgid "Converts :class:`basestring` to :class:`str`."
msgstr "將 :class:`basestring` 轉換為 :class:`str`。"

#: ../../library/2to3.rst:201
#, fuzzy
msgid ""
"Converts :class:`buffer` to :class:`memoryview`.  This fixer is optional "
"because the :class:`memoryview` API is similar but not exactly the same as "
"that of :class:`buffer`."
msgstr ""
"將 :class:`buffer` 轉換為 "
":class:`memoryview`。此修復程式是可選的，因為 :class:`memoryview` API "
"與 :class:`buffer` 的 API 相似但不完全相同。"

#: ../../library/2to3.rst:207
#, fuzzy
msgid ""
"Fixes dictionary iteration methods.  :meth:`dict.iteritems` is converted to :"
"meth:`dict.items`, :meth:`dict.iterkeys` to :meth:`dict.keys`, and :meth:"
"`dict.itervalues` to :meth:`dict.values`.  Similarly, :meth:`dict."
"viewitems`, :meth:`dict.viewkeys` and :meth:`dict.viewvalues` are converted "
"respectively to :meth:`dict.items`, :meth:`dict.keys` and :meth:`dict."
"values`.  It also wraps existing usages of :meth:`dict.items`, :meth:`dict."
"keys`, and :meth:`dict.values` in a call to :class:`list`."
msgstr ""
"修復字典疊代方法。 :meth:`dict.iteritems` 轉換為 :meth:`dict.items`, "
":meth:`dict.iterkeys` 轉換為 :meth:`dict.keys`, :meth:`dict.itervalues` "
"轉換為:meth ：`dict.values`。同樣，:meth:`dict.viewitems`、:meth:`dict."
"viewkeys` 和 :meth:`dict.viewvalues` 分別轉換為 :meth:`dict.items`、:meth:`dict"
".keys` 和 :meth:`dict.values`。它還在對 list 的呼叫中包裝了 dict.items、"
"dict.keys 和 dict.values 的現有用法。"

#: ../../library/2to3.rst:217
#, fuzzy
msgid "Converts ``except X, T`` to ``except X as T``."
msgstr "將``除了X，T``轉換為``除了X作為T``。"

#: ../../library/2to3.rst:221
#, fuzzy
msgid "Converts the ``exec`` statement to the :func:`exec` function."
msgstr "將 ``exec`` 語句轉換為 :func:`exec` 函式。"

#: ../../library/2to3.rst:225
#, fuzzy
msgid ""
"Removes usage of :func:`execfile`.  The argument to :func:`execfile` is "
"wrapped in calls to :func:`open`, :func:`compile`, and :func:`exec`."
msgstr ""
"刪除 :func:`execfile` 的使用。 :func:`execfile` 的參數包含在對 "
":func:`open`、:func:`compile` 和 :func:`exec` 的呼叫中。"

#: ../../library/2to3.rst:230
#, fuzzy
msgid ""
"Changes assignment of :attr:`sys.exitfunc` to use of the :mod:`atexit` "
"module."
msgstr "將 :attr:`sys.exitfunc` 的分配更改為使用 :mod:`atexit` 模組。"

#: ../../library/2to3.rst:235
#, fuzzy
msgid "Wraps :func:`filter` usage in a :class:`list` call."
msgstr "在 :class:`list` 呼叫中包裝 :func:`filter` 用法。"

#: ../../library/2to3.rst:239
#, fuzzy
msgid ""
"Fixes function attributes that have been renamed.  For example, "
"``my_function.func_closure`` is converted to ``my_function.__closure__``."
msgstr ""
"修復已重命名的函式屬性。例如，``my_function.func_closure`` 被轉換為 "
"``my_function.__closure__``。"

#: ../../library/2to3.rst:244
#, fuzzy
msgid "Removes ``from __future__ import new_feature`` statements."
msgstr "刪除 ``from __future__ import new_feature`` 語句。"

#: ../../library/2to3.rst:248
#, fuzzy
msgid "Renames :func:`os.getcwdu` to :func:`os.getcwd`."
msgstr "將 :func:`os.getcwdu` 重命名為 :func:`os.getcwd`。"

#: ../../library/2to3.rst:252
#, fuzzy
msgid "Changes ``dict.has_key(key)`` to ``key in dict``."
msgstr "將 ``dict.has_key(key)`` 更改為 ``key in dict``。"

#: ../../library/2to3.rst:256
#, fuzzy
msgid ""
"This optional fixer performs several transformations that make Python code "
"more idiomatic.  Type comparisons like ``type(x) is SomeClass`` and "
"``type(x) == SomeClass`` are converted to ``isinstance(x, SomeClass)``. "
"``while 1`` becomes ``while True``.  This fixer also tries to make use of :"
"func:`sorted` in appropriate places.  For example, this block ::"
msgstr ""
"這個可選的修復器執行多個轉換，使 Python 程式碼更加地道。像``type(x) is "
"SomeClass`` 和``type(x) == SomeClass`` 這樣的型別比較被轉換為``isinstance(x, "
"SomeClass)``。 ``while 1`` 變為 ``while True``。"
"此修復程式還嘗試在適當的地方使用 :func:`sorted`。例如，這個塊 ::"

#: ../../library/2to3.rst:265
#, fuzzy
msgid "is changed to ::"
msgstr "更改為 ::"

#: ../../library/2to3.rst:271
#, fuzzy
msgid "Detects sibling imports and converts them to relative imports."
msgstr "檢測兄弟導入並將它們轉換為相對導入。"

#: ../../library/2to3.rst:275
#, fuzzy
msgid "Handles module renames in the standard library."
msgstr "處理標準庫中的模組重命名。"

#: ../../library/2to3.rst:279
#, fuzzy
msgid ""
"Handles other modules renames in the standard library.  It is separate from "
"the :2to3fixer:`imports` fixer only because of technical limitations."
msgstr "處理標準庫中的其他模組重命名。它與 :2to3fixer:`imports` "
"修復器分開只是因為技術限制。"

#: ../../library/2to3.rst:284
#, fuzzy
msgid "Converts ``input(prompt)`` to ``eval(input(prompt))``."
msgstr "將 ``input(prompt)`` 轉換為 ``eval(input(prompt))``。"

#: ../../library/2to3.rst:288
#, fuzzy
msgid "Converts :func:`intern` to :func:`sys.intern`."
msgstr "將 :func:`intern` 轉換為 :func:`sys.intern`。"

#: ../../library/2to3.rst:292
#, fuzzy
msgid ""
"Fixes duplicate types in the second argument of :func:`isinstance`.  For "
"example, ``isinstance(x, (int, int))`` is converted to ``isinstance(x, "
"int)`` and ``isinstance(x, (int, float, int))`` is converted to "
"``isinstance(x, (int, float))``."
msgstr ""
"修復了 isinstance 的第二個參數中的重複型別。例如，``isinstance(x, (int, "
"int))`` 被轉換為 ``isinstance(x, int)`` 和 ``isinstance(x, (int, float, "
"int))`` 被轉換為``isinstance(x, (int, float))``。"

#: ../../library/2to3.rst:299
#, fuzzy
msgid ""
"Removes imports of :func:`itertools.ifilter`, :func:`itertools.izip`, and :"
"func:`itertools.imap`.  Imports of :func:`itertools.ifilterfalse` are also "
"changed to :func:`itertools.filterfalse`."
msgstr ""
"刪除 :func:`itertools.ifilter`、:func:`itertools.izip` 和 :func:`itertools."
"imap` 的導入。 :func:`itertools.ifilterfalse` 的導入也更改為 :func:`itertools"
".filterfalse`。"

#: ../../library/2to3.rst:305
#, fuzzy
msgid ""
"Changes usage of :func:`itertools.ifilter`, :func:`itertools.izip`, and :"
"func:`itertools.imap` to their built-in equivalents. :func:`itertools."
"ifilterfalse` is changed to :func:`itertools.filterfalse`."
msgstr ""
"將 :func:`itertools.ifilter`、:func:`itertools.izip` 和 :func:`itertools."
"imap` 的用法更改為其內建等效項。 :func:`itertools.ifilterfalse` 更改為 "
":func:`itertools.filterfalse`。"

#: ../../library/2to3.rst:311
#, fuzzy
msgid "Renames :class:`long` to :class:`int`."
msgstr "將 :class:`long` 重命名為 :class:`int`。"

#: ../../library/2to3.rst:315
#, fuzzy
msgid ""
"Wraps :func:`map` in a :class:`list` call.  It also changes ``map(None, x)`` "
"to ``list(x)``.  Using ``from future_builtins import map`` disables this "
"fixer."
msgstr ""
"在 :class:`list` 呼叫中包裝 :func:`map`。它還將 ``map(None, x)`` 更改為 "
"``list(x)``。使用“from future_builtins import map”禁用此修復程式。"

#: ../../library/2to3.rst:321
#, fuzzy
msgid ""
"Converts the old metaclass syntax (``__metaclass__ = Meta`` in the class "
"body) to the new (``class X(metaclass=Meta)``)."
msgstr ""
"將舊的元類語法（類主體中的``__metaclass__ = Meta``）轉換為新的（``class X（"
"metaclass = Meta）``）。"

#: ../../library/2to3.rst:326
#, fuzzy
msgid ""
"Fixes old method attribute names.  For example, ``meth.im_func`` is "
"converted to ``meth.__func__``."
msgstr "修復舊的方法屬性名稱。例如，``meth.im_func`` 被轉換為 ``meth.__func__``。"

#: ../../library/2to3.rst:331
#, fuzzy
msgid "Converts the old not-equal syntax, ``<>``, to ``!=``."
msgstr "將舊的不等於語法“<>”轉換為“!=”。"

#: ../../library/2to3.rst:335
#, fuzzy
msgid ""
"Converts the use of iterator's :meth:`~iterator.next` methods to the :func:"
"`next` function.  It also renames :meth:`next` methods to :meth:`~iterator."
"__next__`."
msgstr ""
"將疊代器的 :meth:`~iterator.next` 方法的使用轉換為 :func:`next` 函式。它還將 "
":meth:`next` 方法重命名為 :meth:`~iterator.__next__`。"

#: ../../library/2to3.rst:341
#, fuzzy
msgid ""
"Renames definitions of methods called :meth:`__nonzero__` to :meth:`~object."
"__bool__`."
msgstr "將名為 :meth:`__nonzero__` 的方法的定義重命名為 :meth:`~object.__bool__`。"

#: ../../library/2to3.rst:346
#, fuzzy
msgid "Converts octal literals into the new syntax."
msgstr "將八進位文字轉換為新語法。"

#: ../../library/2to3.rst:350
#, fuzzy
msgid ""
"Converts calls to various functions in the :mod:`operator` module to other, "
"but equivalent, function calls.  When needed, the appropriate ``import`` "
"statements are added, e.g. ``import collections.abc``.  The following "
"mapping are made:"
msgstr ""
"將對 :mod:`operator` 模組中各種函式的呼叫轉換為其他但等效的函式呼叫。需要時，"
"新增適當的 ``import`` 語句，例如``導入 collections.abc``。進行了以下映射："

#: ../../library/2to3.rst:358
msgid "``operator.isCallable(obj)``"
msgstr "``operator.isCallable(obj)``"

#: ../../library/2to3.rst:358
msgid "``callable(obj)``"
msgstr "``callable(obj)``"

#: ../../library/2to3.rst:359
msgid "``operator.sequenceIncludes(obj)``"
msgstr "``operator.sequenceIncludes(obj)``"

#: ../../library/2to3.rst:359
msgid "``operator.contains(obj)``"
msgstr "``operator.contains(obj)``"

#: ../../library/2to3.rst:360
msgid "``operator.isSequenceType(obj)``"
msgstr "``operator.isSequenceType(obj)``"

#: ../../library/2to3.rst:360
msgid "``isinstance(obj, collections.abc.Sequence)``"
msgstr "``isinstance(obj, collections.abc.Sequence)``"

#: ../../library/2to3.rst:361
msgid "``operator.isMappingType(obj)``"
msgstr "``operator.isMappingType(obj)``"

#: ../../library/2to3.rst:361
msgid "``isinstance(obj, collections.abc.Mapping)``"
msgstr "``isinstance(obj, collections.abc.Mapping)``"

#: ../../library/2to3.rst:362
msgid "``operator.isNumberType(obj)``"
msgstr "``operator.isNumberType(obj)``"

#: ../../library/2to3.rst:362
msgid "``isinstance(obj, numbers.Number)``"
msgstr "``isinstance(obj, numbers.Number)``"

#: ../../library/2to3.rst:363
msgid "``operator.repeat(obj, n)``"
msgstr "``operator.repeat(obj, n)``"

#: ../../library/2to3.rst:363
msgid "``operator.mul(obj, n)``"
msgstr "``operator.mul(obj, n)``"

#: ../../library/2to3.rst:364
msgid "``operator.irepeat(obj, n)``"
msgstr "``operator.irepeat(obj, n)``"

#: ../../library/2to3.rst:364
msgid "``operator.imul(obj, n)``"
msgstr "``operator.imul(obj, n)``"

#: ../../library/2to3.rst:369
#, fuzzy
msgid ""
"Add extra parenthesis where they are required in list comprehensions.  For "
"example, ``[x for x in 1, 2]`` becomes ``[x for x in (1, 2)]``."
msgstr "在列表理解中需要的地方新增額外的括號。例如，``[x for x in 1, 2]`` 變成``[x "
"for x in (1, 2)]``。"

#: ../../library/2to3.rst:374
#, fuzzy
msgid "Converts the ``print`` statement to the :func:`print` function."
msgstr "將 ``print`` 語句轉換為 :func:`print` 函式。"

#: ../../library/2to3.rst:378
#, fuzzy
msgid ""
"Converts ``raise E, V`` to ``raise E(V)``, and ``raise E, V, T`` to ``raise "
"E(V).with_traceback(T)``.  If ``E`` is a tuple, the translation will be "
"incorrect because substituting tuples for exceptions has been removed in 3.0."
msgstr ""
"將“提高 E、V”轉換為“提高 E(V)”，並將“提高 E、V、T”轉換為“提高 E(V)."
"with_traceback(T)”。如果 ``E``是元組，翻譯將不正確，因為在 3.0 "
"中已刪除用元組代替例外。"

#: ../../library/2to3.rst:384
#, fuzzy
msgid "Converts :func:`raw_input` to :func:`input`."
msgstr "將 :func:`raw_input` 轉換為 :func:`input`。"

#: ../../library/2to3.rst:388
#, fuzzy
msgid "Handles the move of :func:`reduce` to :func:`functools.reduce`."
msgstr "處理 :func:`reduce` 到 :func:`functools.reduce` 的移動。"

#: ../../library/2to3.rst:392
#, fuzzy
msgid "Converts :func:`reload` to :func:`importlib.reload`."
msgstr "將 :func:`reload` 轉換為 :func:`importlib.reload`。"

#: ../../library/2to3.rst:396
#, fuzzy
msgid "Changes :data:`sys.maxint` to :data:`sys.maxsize`."
msgstr "將 :data:`sys.maxint` 更改為 :data:`sys.maxsize`。"

#: ../../library/2to3.rst:400
#, fuzzy
msgid "Replaces backtick repr with the :func:`repr` function."
msgstr "用 :func:`repr` 函式替換反引號 repr。"

#: ../../library/2to3.rst:404
#, fuzzy
msgid ""
"Replaces use of the :class:`set` constructor with set literals.  This fixer "
"is optional."
msgstr "用集合字面量替換 :class:`set` 構造函式的使用。此固定器是可選的。"

#: ../../library/2to3.rst:409
#, fuzzy
msgid "Renames :exc:`StandardError` to :exc:`Exception`."
msgstr "將 :exc:`StandardError` 重命名為 :exc:`Exception`。"

#: ../../library/2to3.rst:413
#, fuzzy
msgid ""
"Changes the deprecated :data:`sys.exc_value`, :data:`sys.exc_type`, :data:"
"`sys.exc_traceback` to use :func:`sys.exc_info`."
msgstr ""
"更改已棄用的 :data:`sys.exc_value`、:data:`sys.exc_type`、:data:`sys."
"exc_traceback` 以使用 :func:`sys.exc_info`。"

#: ../../library/2to3.rst:418
#, fuzzy
msgid "Fixes the API change in generator's :meth:`throw` method."
msgstr "修復了生成器的 :meth:`throw` 方法中的 API 更改。"

#: ../../library/2to3.rst:422
#, fuzzy
msgid ""
"Removes implicit tuple parameter unpacking.  This fixer inserts temporary "
"variables."
msgstr "刪除隱式元組參數解包。這個固定器插入臨時變數。"

#: ../../library/2to3.rst:427
#, fuzzy
msgid ""
"Fixes code broken from the removal of some members in the :mod:`types` "
"module."
msgstr "修復了因刪除 :mod:`types` 模組中的某些成員而損壞的程式碼。"

#: ../../library/2to3.rst:432
#, fuzzy
msgid "Renames :class:`unicode` to :class:`str`."
msgstr "將 :class:`unicode` 重命名為 :class:`str`。"

#: ../../library/2to3.rst:436
#, fuzzy
msgid ""
"Handles the rename of :mod:`urllib` and :mod:`urllib2` to the :mod:`urllib` "
"package."
msgstr "處理 :mod:`urllib` 和 :mod:`urllib2` 到 :mod:`urllib` 包的重命名。"

#: ../../library/2to3.rst:441
#, fuzzy
msgid ""
"Removes excess whitespace from comma separated items.  This fixer is "
"optional."
msgstr "從逗號分隔的項目中刪除多餘的空格。此固定器是可選的。"

#: ../../library/2to3.rst:446
#, fuzzy
msgid ""
"Renames :func:`xrange` to :func:`range` and wraps existing :func:`range` "
"calls with :class:`list`."
msgstr ""
"將 :func:`xrange` 重命名為 :func:`range` 並用 :class:`list` 包裝現有的 "
":func:`range` 呼叫。"

#: ../../library/2to3.rst:451
#, fuzzy
msgid "Changes ``for x in file.xreadlines()`` to ``for x in file``."
msgstr "將 ``for x in file.xreadlines()`` 更改為 ``for x in file``。"

#: ../../library/2to3.rst:455
#, fuzzy
msgid ""
"Wraps :func:`zip` usage in a :class:`list` call.  This is disabled when "
"``from future_builtins import zip`` appears."
msgstr ""
"在 :class:`list` 呼叫中包裝 :func:`zip` 用法。當 ``from future_builtins "
"import zip`` 出現時，這將被禁用。"

#: ../../library/2to3.rst:460
#, fuzzy
msgid ":mod:`lib2to3` --- 2to3's library"
msgstr ":mod:`lib2to3` --- 2to3 的庫"

#: ../../library/2to3.rst:469
msgid "**Source code:** :source:`Lib/lib2to3/`"
msgstr "**原始碼：**\\ :source:`Lib/lib2to3/`"

#: ../../library/2to3.rst:482
#, fuzzy
msgid ""
"Python 3.9 switched to a PEG parser (see :pep:`617`) while lib2to3 is using "
"a less flexible LL(1) parser.  Python 3.10 includes new language syntax that "
"is not parsable by lib2to3's LL(1) parser (see :pep:`634`). The ``lib2to3`` "
"module was marked pending for deprecation in Python 3.9 (raising :exc:"
"`PendingDeprecationWarning` on import) and fully deprecated in Python 3.11 "
"(raising :exc:`DeprecationWarning`). It will be removed from the standard "
"library in Python 3.13. Consider third-party alternatives such as `LibCST`_ "
"or `parso`_."
msgstr ""
"Python 3.9 切換到 PEG 解析器（參見 :pep:`617`），而 lib2to3 使用不太靈活的 "
"LL(1) 解析器。 Python 3.10 包含 lib2to3 的 LL(1) "
"解析器無法解析的新語言語法（請參閱 :pep:`634`）。 ``lib2to3`` 模組在 Python "
"3.9 中被標記為待棄用（在導入時引發 :exc:`PendingDeprecationWarning`）並在 "
"Python 3.11 中被完全棄用（引發 :exc:`DeprecationWarning`）。它將在 Python "
"3.13 中從標準庫中刪除。考慮第三方替代方案，例如 `LibCST`_ 或 `parso`_。"

#: ../../library/2to3.rst:485
#, fuzzy
msgid ""
"The :mod:`lib2to3` API should be considered unstable and may change "
"drastically in the future."
msgstr ":mod:`lib2to3` API 應該被認為是不穩定的，將來可能會發生巨大變化。"
