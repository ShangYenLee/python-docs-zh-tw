# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-20 18:08+0800\n"
"PO-Revision-Date: 2018-05-23 14:40+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/code.rst:2
msgid ":mod:`code` --- Interpreter base classes"
msgstr ":mod:`code` --- 直譯器基底類別"

#: ../../library/code.rst:7
msgid "**Source code:** :source:`Lib/code.py`"
msgstr "**原始碼：**\\ :source:`Lib/code.py`"

#: ../../library/code.rst:11
#, fuzzy
msgid ""
"The ``code`` module provides facilities to implement read-eval-print loops "
"in Python.  Two classes and convenience functions are included which can be "
"used to build applications which provide an interactive interpreter prompt."
msgstr ""
"``code`` 模組提供了在 Python 中實作讀取-評估-印出循環的工具。包含兩個類和便利"
"函式，可用於構建提供交互式直譯器提示的應用程式。"

#: ../../library/code.rst:18
#, fuzzy
msgid ""
"This class deals with parsing and interpreter state (the user's namespace); "
"it does not deal with input buffering or prompting or input file naming (the "
"filename is always passed in explicitly). The optional *locals* argument "
"specifies the dictionary in which code will be executed; it defaults to a "
"newly created dictionary with key ``'__name__'`` set to ``'__console__'`` "
"and key ``'__doc__'`` set to ``None``."
msgstr ""
"此類處理解析和直譯器狀態（使用者的命名空間）；它不處理輸入緩衝或提示或輸入文"
"件命名（文件名總是明確傳遞）。可選的 *locals* 參數指定將在其中執行程式碼的字"
"典；它預設為新建立的字典，鍵“__name__”設定為“__console__”，鍵“__doc__”設定為“"
"無”。"

#: ../../library/code.rst:28
#, fuzzy
msgid ""
"Closely emulate the behavior of the interactive Python interpreter. This "
"class builds on :class:`InteractiveInterpreter` and adds prompting using the "
"familiar ``sys.ps1`` and ``sys.ps2``, and input buffering."
msgstr ""
"密切模擬交互式 Python 直譯器的行為。這個類建立在 "
":class:`InteractiveInterpreter` 之上，並使用熟悉的 ``sys.ps1`` 和 ``sys.ps2``"
" 新增提示，以及輸入緩衝。"

#: ../../library/code.rst:35
#, fuzzy
msgid ""
"Convenience function to run a read-eval-print loop.  This creates a new "
"instance of :class:`InteractiveConsole` and sets *readfunc* to be used as "
"the :meth:`InteractiveConsole.raw_input` method, if provided.  If *local* is "
"provided, it is passed to the :class:`InteractiveConsole` constructor for "
"use as the default namespace for the interpreter loop.  The :meth:`interact` "
"method of the instance is then run with *banner* and *exitmsg* passed as the "
"banner and exit message to use, if provided.  The console object is "
"discarded after use."
msgstr ""
"運行讀取-評估-印出循環的便捷功能。這將建立 :class:`InteractiveConsole` "
"的新實例，並設定 *readfunc* 用作 :meth:`InteractiveConsole.raw_input` "
"方法（如果提供）。如果提供了 *local*，它會被傳遞給 InteractiveConsole "
"構造函式，用作直譯器循環的預設命名空間。然後實例的 :meth:`interact` 方法與 "
"*banner* 和 *exitmsg* "
"一起運行，作為要使用的橫幅和退出消息（如果提供）。控制台對像在使用後被丟棄。"

#: ../../library/code.rst:44
msgid "Added *exitmsg* parameter."
msgstr "新增 *exitmsg* 參數。"

#: ../../library/code.rst:50
#, fuzzy
msgid ""
"This function is useful for programs that want to emulate Python's "
"interpreter main loop (a.k.a. the read-eval-print loop).  The tricky part is "
"to determine when the user has entered an incomplete command that can be "
"completed by entering more text (as opposed to a complete command or a "
"syntax error).  This function *almost* always makes the same decision as the "
"real interpreter main loop."
msgstr ""
"此函式對於想要模擬 Python 的直譯器主循環（也稱為 read-eval-print 循環）的程式"
"很有用。棘手的部分是確定使用者何時輸入了一個不完整的命令，該命令可以通過輸入"
"更多文本來完成（而不是完整的命令或語法錯誤）。這個函式*幾乎*總是做出與真正的"
"直譯器主循環相同的決定。"

#: ../../library/code.rst:57
#, fuzzy
msgid ""
"*source* is the source string; *filename* is the optional filename from "
"which source was read, defaulting to ``'<input>'``; and *symbol* is the "
"optional grammar start symbol, which should be ``'single'`` (the default), "
"``'eval'`` or ``'exec'``."
msgstr ""
"*source* 是源字串； *filename* 是從中讀取源的可選文件名，預設為 "
"``'<input>'``； *symbol* "
"是可選的語法開始符號，它應該是``'single'``（預設），``'eval'`` 或``'exec'``。"

#: ../../library/code.rst:62
#, fuzzy
msgid ""
"Returns a code object (the same as ``compile(source, filename, symbol)``) if "
"the command is complete and valid; ``None`` if the command is incomplete; "
"raises :exc:`SyntaxError` if the command is complete and contains a syntax "
"error, or raises :exc:`OverflowError` or :exc:`ValueError` if the command "
"contains an invalid literal."
msgstr ""
"如果命令完整且有效，則回傳一個程式碼物件（與 ``compile(source, filename, "
"symbol)`` 相同）； ``None`` 如果命令不完整；如果命令完整且包含語法錯誤，則引"
"發 :exec:`SyntaxError`，如果命令包含無效文字，則引發 :exec:`OverflowError` 或 "
":exc:`ValueError`。"

#: ../../library/code.rst:72
#, fuzzy
msgid "Interactive Interpreter Objects"
msgstr "交互式直譯器物件"

#: ../../library/code.rst:77
#, fuzzy
msgid ""
"Compile and run some source in the interpreter. Arguments are the same as "
"for :func:`compile_command`; the default for *filename* is ``'<input>'``, "
"and for *symbol* is ``'single'``.  One of several things can happen:"
msgstr ""
"在直譯器中編譯並運行一些源程式碼。參數與 :func:`compile_command` 相同； "
"*filename* 的預設值是 ``'<input>'``，*symbol* 的預設值是 "
"``'single'``。可能會發生以下幾種情況之一："

#: ../../library/code.rst:81
#, fuzzy
msgid ""
"The input is incorrect; :func:`compile_command` raised an exception (:exc:"
"`SyntaxError` or :exc:`OverflowError`).  A syntax traceback will be printed "
"by calling the :meth:`showsyntaxerror` method.  :meth:`runsource` returns "
"``False``."
msgstr ""
"輸入錯誤； :func:`compile_command` 引發例外（:exc:`SyntaxError` 或 "
":exc:`OverflowError`）。將通過呼叫 showsyntaxerror 方法印出語法回溯。 "
":meth:`runsource` 回傳 ``False``。"

#: ../../library/code.rst:86
#, fuzzy
msgid ""
"The input is incomplete, and more input is required; :func:`compile_command` "
"returned ``None``. :meth:`runsource` returns ``True``."
msgstr ""
"輸入不完整，需要更多輸入； :func:`compile_command` 回傳了``None``。 "
":meth:`runsource` 回傳 ``True``。"

#: ../../library/code.rst:89
#, fuzzy
msgid ""
"The input is complete; :func:`compile_command` returned a code object.  The "
"code is executed by calling the :meth:`runcode` (which also handles run-time "
"exceptions, except for :exc:`SystemExit`). :meth:`runsource` returns "
"``False``."
msgstr ""
"輸入完成； :func:`compile_command` 回傳了一個程式碼物件。程式碼通過呼叫 "
":meth:`runcode` 執行（它也處理運行時例外，除了 "
":exc:`SystemExit`）。 :meth:`runsource` 回傳 ``False``。"

#: ../../library/code.rst:93
#, fuzzy
msgid ""
"The return value can be used to decide whether to use ``sys.ps1`` or ``sys."
"ps2`` to prompt the next line."
msgstr "回傳值可以用來決定是使用``sys.ps1``還是``sys.ps2``來提示下一行。"

#: ../../library/code.rst:99
#, fuzzy
msgid ""
"Execute a code object. When an exception occurs, :meth:`showtraceback` is "
"called to display a traceback.  All exceptions are caught except :exc:"
"`SystemExit`, which is allowed to propagate."
msgstr ""
"執行程式碼物件。當發生例外時，呼叫 :meth:`showtraceback` 來顯示回溯。"
"除了允許傳播的 :exc:`SystemExit` 之外，所有例外都會被捕獲。"

#: ../../library/code.rst:103
#, fuzzy
msgid ""
"A note about :exc:`KeyboardInterrupt`: this exception may occur elsewhere in "
"this code, and may not always be caught.  The caller should be prepared to "
"deal with it."
msgstr ""
"關於 :exc:`KeyboardInterrupt` 的注意事項：此例外可能會出現在這段程式碼的其他"
"地方，並且可能不會總是被捕獲。呼叫者應該準備好處理它。"

#: ../../library/code.rst:110
#, fuzzy
msgid ""
"Display the syntax error that just occurred.  This does not display a stack "
"trace because there isn't one for syntax errors. If *filename* is given, it "
"is stuffed into the exception instead of the default filename provided by "
"Python's parser, because it always uses ``'<string>'`` when reading from a "
"string. The output is written by the :meth:`write` method."
msgstr ""
"顯示剛剛發生的語法錯誤。這不會顯示堆疊跟踪，因為沒有語法錯誤。如果給出 "
"*filename*，它會被填充到例外中，而不是 Python 解析器提供的預設文件名，"
"因為它在讀取字串時總是使用 ``'<string>'``。輸出由 :meth:`write` 方法寫入。"

#: ../../library/code.rst:119
#, fuzzy
msgid ""
"Display the exception that just occurred.  We remove the first stack item "
"because it is within the interpreter object implementation. The output is "
"written by the :meth:`write` method."
msgstr "顯示剛剛發生的例外。我們刪除第一個堆疊項，因為它在直譯器物件實作中。輸出由 "
":meth:`write` 方法寫入。"

#: ../../library/code.rst:123
#, fuzzy
msgid ""
"The full chained traceback is displayed instead of just the primary "
"traceback."
msgstr "顯示完整的鏈接回溯，而不僅僅是主要回溯。"

#: ../../library/code.rst:129
#, fuzzy
msgid ""
"Write a string to the standard error stream (``sys.stderr``). Derived "
"classes should override this to provide the appropriate output handling as "
"needed."
msgstr "將字串寫入標準錯誤流（``sys.stderr``）。派生類應該覆蓋它以根"
"據需要提供適當的輸出處理。"

#: ../../library/code.rst:136
#, fuzzy
msgid "Interactive Console Objects"
msgstr "交互式控制台物件"

#: ../../library/code.rst:138
#, fuzzy
msgid ""
"The :class:`InteractiveConsole` class is a subclass of :class:"
"`InteractiveInterpreter`, and so offers all the methods of the interpreter "
"objects as well as the following additions."
msgstr ""
":class:`InteractiveConsole` 類是 :class:`InteractiveInterpreter` "
"的子類別，因此提供了直譯器物件的所有方法以及以下附加內容。"

#: ../../library/code.rst:145
#, fuzzy
msgid ""
"Closely emulate the interactive Python console. The optional *banner* "
"argument specify the banner to print before the first interaction; by "
"default it prints a banner similar to the one printed by the standard Python "
"interpreter, followed by the class name of the console object in parentheses "
"(so as not to confuse this with the real interpreter -- since it's so "
"close!)."
msgstr ""
"密切模擬交互式 Python 控制台。可選的 *banner* "
"參數指定在第一次交互之前印出的橫幅；預設情況下，它會印出一個類似於標準 "
"Python 直譯器印出的橫幅，後面是括號中的控制台物件的類名（以免與真正的直譯器混"
"淆——因為它非常接近！）。"

#: ../../library/code.rst:151
#, fuzzy
msgid ""
"The optional *exitmsg* argument specifies an exit message printed when "
"exiting. Pass the empty string to suppress the exit message. If *exitmsg* is "
"not given or ``None``, a default message is printed."
msgstr "可選的 *exitmsg* 參數指定退出時印出的退出消息。傳遞空字串以抑制退出消息。"
"如果未給出 *exitmsg* 或 ``None`` ，則印出預設消息。"

#: ../../library/code.rst:155
#, fuzzy
msgid "To suppress printing any banner, pass an empty string."
msgstr "要禁止印出任何橫幅，請傳遞一個空字串。"

#: ../../library/code.rst:158
#, fuzzy
msgid "Print an exit message when exiting."
msgstr "退出時印出退出消息。"

#: ../../library/code.rst:164
#, fuzzy
msgid ""
"Push a line of source text to the interpreter. The line should not have a "
"trailing newline; it may have internal newlines.  The line is appended to a "
"buffer and the interpreter's :meth:`runsource` method is called with the "
"concatenated contents of the buffer as source.  If this indicates that the "
"command was executed or invalid, the buffer is reset; otherwise, the command "
"is incomplete, and the buffer is left as it was after the line was "
"appended.  The return value is ``True`` if more input is required, ``False`` "
"if the line was dealt with in some way (this is the same as :meth:"
"`runsource`)."
msgstr ""
"將一行源文本推送給直譯器。該行不應有尾隨換行符；它可能有內部換行符。該行被附"
"加到一個緩衝區，直譯器的 :meth:`runsource` 方法被呼叫，緩衝區的連接內容作為源"
"。如果這表明命令已執行或無效，則重置緩衝區；否則，命令是不完整的，並且緩衝區"
"在附加行之後保持原樣。如果需要更多輸入，則回傳值為 ``True``，如果以某種方式處理"
"了該行，則回傳值為 ``False``（這與 runsource 相同）。"

#: ../../library/code.rst:176
#, fuzzy
msgid "Remove any unhandled source text from the input buffer."
msgstr "從輸入緩衝區中刪除任何未處理的源文本。"

#: ../../library/code.rst:181
#, fuzzy
msgid ""
"Write a prompt and read a line.  The returned line does not include the "
"trailing newline.  When the user enters the EOF key sequence, :exc:"
"`EOFError` is raised. The base implementation reads from ``sys.stdin``; a "
"subclass may replace this with a different implementation."
msgstr ""
"寫一個提示並讀一行。回傳的行不包括結尾的換行符。當使用者輸入 EOF "
"鍵序列時，會引發 :exec:`EOFError`。基本實作從 sys.stdin "
"讀取；一個子類別可以用不同的實作替換它。"
