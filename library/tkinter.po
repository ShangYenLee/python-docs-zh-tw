# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-09-28 00:27+0000\n"
"PO-Revision-Date: 2018-05-23 16:13+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/tkinter.rst:2
msgid ":mod:`tkinter` --- Python interface to Tcl/Tk"
msgstr ":mod:`tkinter` --- Tcl/Tk 的 Python 介面"

#: ../../library/tkinter.rst:9
msgid "**Source code:** :source:`Lib/tkinter/__init__.py`"
msgstr "**原始碼：**\\ :source:`Lib/tkinter/__init__.py`"

#: ../../library/tkinter.rst:13
#, fuzzy
msgid ""
"The :mod:`tkinter` package (\"Tk interface\") is the standard Python "
"interface to the Tcl/Tk GUI toolkit.  Both Tk and :mod:`tkinter` are "
"available on most Unix platforms, including macOS, as well as on Windows "
"systems."
msgstr ""
":mod:`tkinter` 包（“Tk 介面”）是 Tcl/Tk GUI 工具包的標準 Python 介面。 Tk 和 "
":mod:`tkinter` 在大多數 Unix 平台（包括 macOS）以及 Windows 系統上都可用。"

#: ../../library/tkinter.rst:17
#, fuzzy
msgid ""
"Running ``python -m tkinter`` from the command line should open a window "
"demonstrating a simple Tk interface, letting you know that :mod:`tkinter` is "
"properly installed on your system, and also showing what version of Tcl/Tk "
"is installed, so you can read the Tcl/Tk documentation specific to that "
"version."
msgstr ""
"從命令列運行 ``python -m tkinter`` 應該會打開一個窗口，演示一個簡單的 Tk "
"界面，讓您知道 :mod:`tkinter` 已正確安裝在您的系統上，並顯示 Tcl/Tk "
"的版本安裝，因此您可以閱讀特定於該版本的 Tcl/Tk 文檔。"

#: ../../library/tkinter.rst:22
#, fuzzy
msgid ""
"Tkinter supports a range of Tcl/Tk versions, built either with or without "
"thread support. The official Python binary release bundles Tcl/Tk 8.6 "
"threaded. See the source code for the :mod:`_tkinter` module for more "
"information about supported versions."
msgstr ""
"Tkinter 支援一系列 Tcl/Tk 版本，構建時有或沒有執行緒支援。官方 Python "
"二進位版本捆綁了 Tcl/Tk 8.6 執行緒。有關受支援版本的更多資訊，請參閱 "
":mod:`_tkinter` 模組的源程式碼。"

#: ../../library/tkinter.rst:27
#, fuzzy
msgid ""
"Tkinter is not a thin wrapper, but adds a fair amount of its own logic to "
"make the experience more pythonic. This documentation will concentrate on "
"these additions and changes, and refer to the official Tcl/Tk documentation "
"for details that are unchanged."
msgstr ""
"Tkinter 不是一個簡單的包裝器，而是新增了相當多的自己的邏輯以使體驗更像 "
"pythonic。本文檔將重點介紹這些新增和更改，有關未更改的詳細資訊，請參閱官方 "
"Tcl/Tk 文檔。"

#: ../../library/tkinter.rst:34
#, fuzzy
msgid ""
"Tcl/Tk 8.5 (2007) introduced a modern set of themed user interface "
"components along with a new API to use them. Both old and new APIs are still "
"available. Most documentation you will find online still uses the old API "
"and can be woefully outdated."
msgstr ""
"Tcl/Tk 8.5 (2007) 引入了一組現代主題使用者界面組件以及使用它們的新 API。新舊 "
"API 仍然可用。您在網上找到的大多數文檔仍然使用舊的 API，並且可能已經過時了。"

#: ../../library/tkinter.rst:43
msgid "`TkDocs <https://tkdocs.com/>`_"
msgstr "`TkDocs <https://tkdocs.com/>`_"

#: ../../library/tkinter.rst:42
#, fuzzy
msgid ""
"Extensive tutorial on creating user interfaces with Tkinter.  Explains key "
"concepts, and illustrates recommended approaches using the modern API."
msgstr "關於使用 Tkinter 建立使用者界面的廣泛教程。解釋關鍵概念，並說明使用現代 API "
"的推薦方法。"

#: ../../library/tkinter.rst:46
#, fuzzy
msgid ""
"`Tkinter 8.5 reference: a GUI for Python <https://www.tkdocs.com/shipman/>`_"
msgstr "`Tkinter 8.5 參考：Python 的 GUI <https://www.tkdocs.com/shipman/>`_"

#: ../../library/tkinter.rst:46
#, fuzzy
msgid ""
"Reference documentation for Tkinter 8.5 detailing available classes, "
"methods, and options."
msgstr "Tkinter 8.5 的參考文檔詳細說明了可用的類、方法和選項。"

#: ../../library/tkinter.rst:48
msgid "Tcl/Tk Resources:"
msgstr "Tcl/Tk 相關資源："

#: ../../library/tkinter.rst:51
msgid "`Tk commands <https://www.tcl.tk/man/tcl8.6/TkCmd/contents.htm>`_"
msgstr "`Tk 指令 <https://www.tcl.tk/man/tcl8.6/TkCmd/contents.htm>`_"

#: ../../library/tkinter.rst:51
#, fuzzy
msgid ""
"Comprehensive reference to each of the underlying Tcl/Tk commands used by "
"Tkinter."
msgstr "對 Tkinter 使用的每個底層 Tcl/Tk 命令的全面參考。"

#: ../../library/tkinter.rst:54
msgid "`Tcl/Tk Home Page <https://www.tcl.tk>`_"
msgstr "`Tcl/Tk 首頁 <https://www.tcl.tk>`_"

#: ../../library/tkinter.rst:54
#, fuzzy
msgid "Additional documentation, and links to Tcl/Tk core development."
msgstr "附加文檔和指向 Tcl/Tk 核心開發的鏈接。"

#: ../../library/tkinter.rst:56
msgid "Books:"
msgstr "書籍："

#: ../../library/tkinter.rst:59
msgid ""
"`Modern Tkinter for Busy Python Developers <https://tkdocs.com/book.html>`_"
msgstr ""
"`Modern Tkinter for Busy Python Developers <https://tkdocs.com/book.html>`_"

#: ../../library/tkinter.rst:59
msgid "By Mark Roseman. (ISBN 978-1999149567)"
msgstr "由 Mark Roseman 所著。(ISBN 978-1999149567)"

#: ../../library/tkinter.rst:62
msgid ""
"`Python and Tkinter Programming <https://www.packtpub.com/product/python-gui-"
"programming-with-tkinter/9781788835886>`_"
msgstr ""
"`Python and Tkinter Programming <https://www.packtpub.com/product/python-gui-"
"programming-with-tkinter/9781788835886>`_"

#: ../../library/tkinter.rst:62
msgid "By Alan Moore. (ISBN 978-1788835886)"
msgstr "由 Alan Moore 所著。(ISBN 978-1788835886)"

#: ../../library/tkinter.rst:65
msgid "`Programming Python <https://learning-python.com/about-pp4e.html>`_"
msgstr "`Programming Python <https://learning-python.com/about-pp4e.html>`_"

#: ../../library/tkinter.rst:65
msgid "By Mark Lutz; has excellent coverage of Tkinter. (ISBN 978-0596158101)"
msgstr "由 Mark Lutz 所著；大部分 Tkinter 主題都有涵蓋。(ISBN 978-0596158101)"

#: ../../library/tkinter.rst:67
msgid ""
"`Tcl and the Tk Toolkit (2nd edition)  <https://www.amazon.com/exec/obidos/"
"ASIN/032133633X>`_"
msgstr ""
"`Tcl and the Tk Toolkit (2nd edition)  <https://www.amazon.com/exec/obidos/"
"ASIN/032133633X>`_"

#: ../../library/tkinter.rst:68
msgid ""
"By John Ousterhout, inventor of Tcl/Tk, and Ken Jones; does not cover "
"Tkinter. (ISBN 978-0321336330)"
msgstr ""
"由 Tcl/Tk 發明者 John Ousterhout 與 Ken Jones 所著；不包含 Tkinter。(ISBN "
"978-0321336330)"

#: ../../library/tkinter.rst:72
#, fuzzy
msgid "Architecture"
msgstr "建築學"

#: ../../library/tkinter.rst:74
#, fuzzy
msgid ""
"Tcl/Tk is not a single library but rather consists of a few distinct "
"modules, each with separate functionality and its own official "
"documentation. Python's binary releases also ship an add-on module together "
"with it."
msgstr ""
"Tcl/Tk 不是一個單一的庫，而是由幾個不同的模組組成，每個模組都有獨立的功能和自"
"己的官方文檔。 Python 的二進位版本還附帶了一個附加模組。"

#: ../../library/tkinter.rst:90
msgid "Tcl"
msgstr "Tcl"

#: ../../library/tkinter.rst:80
#, fuzzy
msgid ""
"Tcl is a dynamic interpreted programming language, just like Python. Though "
"it can be used on its own as a general-purpose programming language, it is "
"most commonly embedded into C applications as a scripting engine or an "
"interface to the Tk toolkit. The Tcl library has a C interface to create and "
"manage one or more instances of a Tcl interpreter, run Tcl commands and "
"scripts in those instances, and add custom commands implemented in either "
"Tcl or C. Each interpreter has an event queue, and there are facilities to "
"send events to it and process them. Unlike Python, Tcl's execution model is "
"designed around cooperative multitasking, and Tkinter bridges this "
"difference (see `Threading model`_ for details)."
msgstr ""
"Tcl 是一種動態解釋型編程語言，就像 Python "
"一樣。雖然它可以單獨用作通用編程語言，但它最常作為腳本引擎或 Tk "
"工具包的介面嵌入到 C 應用程式中。 Tcl 庫有一個 C 介面來建立和管理一個或多個 "
"Tcl 直譯器實例，在這些實例中運行 Tcl 命令和腳本，並新增用 Tcl 或 C 實作的自定"
"義命令。每個直譯器都有一個事件隊列，並且有向它發送事件並處理它們的設施。與 "
"Python 不同，Tcl 的執行模型是圍繞協作多任務設計的，而 Tkinter "
"彌合了這種差異（有關詳細資訊，請參閱“執行緒模型”）。"

#: ../../library/tkinter.rst:97 ../../library/tkinter.rst:908
msgid "Tk"
msgstr "Tk"

#: ../../library/tkinter.rst:93
#, fuzzy
msgid ""
"Tk is a `Tcl package <https://wiki.tcl-lang.org/37432>`_ implemented in C "
"that adds custom commands to create and manipulate GUI widgets. Each :class:"
"`Tk` object embeds its own Tcl interpreter instance with Tk loaded into it. "
"Tk's widgets are very customizable, though at the cost of a dated "
"appearance. Tk uses Tcl's event queue to generate and process GUI events."
msgstr ""
"Tk 是一個用 C 實作的`Tcl 包 <https://wiki.tcl-lang.org/37432>`_，"
"它新增了自定義命令來建立和操作 GUI 小部件。每個 :class:`Tk` "
"對像都嵌入了自己的 Tcl 直譯器實例，其中加載了 Tk。 Tk "
"的小部件是非常可定制的，儘管是以過時的外觀為代價的。 Tk 使用 Tcl "
"的事件隊列來生成和處理 GUI 事件。"

#: ../../library/tkinter.rst:103
msgid "Ttk"
msgstr "Ttk"

#: ../../library/tkinter.rst:100
#, fuzzy
msgid ""
"Themed Tk (Ttk) is a newer family of Tk widgets that provide a much better "
"appearance on different platforms than many of the classic Tk widgets. Ttk "
"is distributed as part of Tk, starting with Tk version 8.5. Python bindings "
"are provided in a separate module, :mod:`tkinter.ttk`."
msgstr ""
"Themed Tk (Ttk) 是一個較新的 Tk 小部件系列，與許多經典的 Tk "
"小部件相比，它在不同平台上提供了更好的外觀。 Ttk 作為 Tk 的一部分分發，從 Tk "
"版本 8.5 開始。 Python 綁定在單獨的模組 :mod:`tkinter.ttk` 中提供。"

#: ../../library/tkinter.rst:105
#, fuzzy
msgid ""
"Internally, Tk and Ttk use facilities of the underlying operating system, i."
"e., Xlib on Unix/X11, Cocoa on macOS, GDI on Windows."
msgstr ""
"在內部，Tk 和 Ttk 使用底層操作系統的功能，即 Unix/X11 上的 Xlib、macOS 上的 "
"Cocoa、Windows 上的 GDI。"

#: ../../library/tkinter.rst:108
#, fuzzy
msgid ""
"When your Python application uses a class in Tkinter, e.g., to create a "
"widget, the :mod:`tkinter` module first assembles a Tcl/Tk command string. "
"It passes that Tcl command string to an internal :mod:`_tkinter` binary "
"module, which then calls the Tcl interpreter to evaluate it. The Tcl "
"interpreter will then call into the Tk and/or Ttk packages, which will in "
"turn make calls to Xlib, Cocoa, or GDI."
msgstr ""
"當您的 Python 應用程式使用 Tkinter "
"中的一個類時，例如，建立一個小部件時，:mod:`tkinter` 模組首先組裝一個 Tcl/Tk "
"命令字串。它將那個 Tcl 命令字串傳遞給內部 :mod:`_tkinter` 二進位模組，"
"然後呼叫 Tcl 直譯器對其進行評估。然後 Tcl 直譯器將呼叫 Tk 和/或 Ttk 包，"
"這些包將依次呼叫 Xlib、Cocoa 或 GDI。"

#: ../../library/tkinter.rst:116
#, fuzzy
msgid "Tkinter Modules"
msgstr "Tkinter 模組"

#: ../../library/tkinter.rst:118
#, fuzzy
msgid ""
"Support for Tkinter is spread across several modules. Most applications will "
"need the main :mod:`tkinter` module, as well as the :mod:`tkinter.ttk` "
"module, which provides the modern themed widget set and API::"
msgstr ""
"對 Tkinter 的支援分佈在多個模組中。大多數應用程式將需要主要的 :mod:`tkinter` "
"模組，以及 :mod:`tkinter.ttk` 模組，它提供了現代主題的小部件集和 API::"

#: ../../library/tkinter.rst:129
#, fuzzy
msgid ""
"Construct a toplevel Tk widget, which is usually the main window of an "
"application, and initialize a Tcl interpreter for this widget.  Each "
"instance has its own associated Tcl interpreter."
msgstr "構造一個頂層 Tk 小部件，它通常是應用程式的主窗口，並為這個小部件初始化一個 "
"Tcl 直譯器。每個實例都有自己關聯的 Tcl 直譯器。"

#: ../../library/tkinter.rst:133
#, fuzzy
msgid ""
"The :class:`Tk` class is typically instantiated using all default values. "
"However, the following keyword arguments are currently recognized:"
msgstr ":class:`Tk` "
"類通常使用所有預設值進行實例化。但是，目前可以識別以下關鍵字參數："

#: ../../library/tkinter.rst:137
#, fuzzy
msgid "*screenName*"
msgstr "*屏幕名稱*"

#: ../../library/tkinter.rst:137
#, fuzzy
msgid ""
"When given (as a string), sets the :envvar:`DISPLAY` environment variable. "
"(X11 only)"
msgstr "當給定（作為字串）時，設定 :envvar:`DISPLAY` 環境變數。 （僅限 X11）"

#: ../../library/tkinter.rst:140
msgid "*baseName*"
msgstr "*baseName*"

#: ../../library/tkinter.rst:140
#, fuzzy
msgid ""
"Name of the profile file.  By default, *baseName* is derived from the "
"program name (``sys.argv[0]``)."
msgstr "配置文件的名稱。預設情況下，*baseName* 派生自程式名稱（``sys.argv[0]``）。"

#: ../../library/tkinter.rst:143
msgid "*className*"
msgstr "*className*"

#: ../../library/tkinter.rst:143
#, fuzzy
msgid ""
"Name of the widget class.  Used as a profile file and also as the name with "
"which Tcl is invoked (*argv0* in *interp*)."
msgstr "小部件類的名稱。用作配置文件，也用作呼叫 Tcl 的名稱（*interp* 中的 "
"*argv0*）。"

#: ../../library/tkinter.rst:146
msgid "*useTk*"
msgstr "*useTk*"

#: ../../library/tkinter.rst:146
#, fuzzy
msgid ""
"If ``True``, initialize the Tk subsystem.  The :func:`tkinter.Tcl() <Tcl>` "
"function sets this to ``False``."
msgstr "如果為 ``True``，則初始化 Tk 子系統。 :func:`tkinter.Tcl() <Tcl>` 函式將其設定為 "
"``False``。"

#: ../../library/tkinter.rst:149
msgid "*sync*"
msgstr "*sync*"

#: ../../library/tkinter.rst:149
#, fuzzy
msgid ""
"If ``True``, execute all X server commands synchronously, so that errors are "
"reported immediately.  Can be used for debugging. (X11 only)"
msgstr "如果為 ``True``，則同步執行所有 X 伺服器命令，以便立即報告錯誤。可以用來除錯。 "
"（僅限 X11）"

#: ../../library/tkinter.rst:159
msgid "*use*"
msgstr "*use*"

#: ../../library/tkinter.rst:152
#, fuzzy
msgid ""
"Specifies the *id* of the window in which to embed the application, instead "
"of it being created as an independent toplevel window. *id* must be "
"specified in the same way as the value for the -use option for toplevel "
"widgets (that is, it has a form like that returned by :meth:`winfo_id`)."
msgstr ""
"指定要嵌入應用程式的窗口的 *id*，而不是將其建立為獨立的頂層窗口。 *id* "
"必須以與頂層小部件的 -use 選項的值相同的方式指定（即，它具有類似於 "
":meth:`winfo_id` 回傳的形式）。"

#: ../../library/tkinter.rst:158
#, fuzzy
msgid ""
"Note that on some platforms this will only work correctly if *id* refers to "
"a Tk frame or toplevel that has its -container option enabled."
msgstr "請注意，在某些平台上，只有當 *id* 引用啟用了 -container 選項的 Tk "
"框架或頂層時，這才會正常工作。"

#: ../../library/tkinter.rst:161
#, fuzzy
msgid ""
":class:`Tk` reads and interprets profile files, named :file:`.{className}."
"tcl` and :file:`.{baseName}.tcl`, into the Tcl interpreter and calls :func:"
"`exec` on the contents of :file:`.{className}.py` and :file:`.{baseName}."
"py`.  The path for the profile files is the :envvar:`HOME` environment "
"variable or, if that isn't defined, then :attr:`os.curdir`."
msgstr ""
":class:`Tk` 將名為 :file:`.{className}.tcl` 和 :file:`.{baseName}.tcl` "
"的配置文件讀取並解釋到 Tcl 直譯器中，並呼叫 :func:`exec` :file:`.{className}."
"py` 和 :file:`.{baseName}.py` 的內容。配置文件的路徑是 :envvar:`HOME` "
"環境變數，或者，如果未定義，則為 :attr:`os.curdir`。"

#: ../../library/tkinter.rst:170
#, fuzzy
msgid ""
"The Tk application object created by instantiating :class:`Tk`.  This "
"provides access to the Tcl interpreter.  Each widget that is attached the "
"same instance of :class:`Tk` has the same value for its :attr:`tk` attribute."
msgstr ""
"通過實例化 :class:`Tk` 建立的 Tk 應用程式物件。這提供了對 Tcl "
"直譯器的訪問。附加到同一 Tk 實例的每個小部件的 :attr:`tk` 屬性具有相同的值。"

#: ../../library/tkinter.rst:177
#, fuzzy
msgid ""
"The widget object that contains this widget.  For :class:`Tk`, the *master* "
"is :const:`None` because it is the main window.  The terms *master* and "
"*parent* are similar and sometimes used interchangeably as argument names; "
"however, calling :meth:`winfo_parent` returns a string of the widget name "
"whereas :attr:`master` returns the object. *parent*/*child* reflects the "
"tree-like relationship while *master*/*slave* reflects the container "
"structure."
msgstr ""
"包含此小部件的小部件物件。對於 :class:`Tk`，*master* 是 :const:`None` "
"因為它是主窗口。術語 *master* 和 *parent* "
"相似，有時可互換用作參數名稱；然而，呼叫 :meth:`winfo_parent` "
"回傳小部件名稱的字串，而 :attr:`master` 回傳物件。 "
"*parent*/*child*體現樹狀關係，*master*/*slave*體現容器結構。"

#: ../../library/tkinter.rst:187
#, fuzzy
msgid ""
"The immediate descendants of this widget as a :class:`dict` with the child "
"widget names as the keys and the child instance objects as the values."
msgstr "此小部件的直接後代作為 "
":class:`dict`，其中子小部件名稱作為鍵，子實例對像作為值。"

#: ../../library/tkinter.rst:194
#, fuzzy
msgid ""
"The :func:`Tcl` function is a factory function which creates an object much "
"like that created by the :class:`Tk` class, except that it does not "
"initialize the Tk subsystem.  This is most often useful when driving the Tcl "
"interpreter in an environment where one doesn't want to create extraneous "
"toplevel windows, or where one cannot (such as Unix/Linux systems without an "
"X server).  An object created by the :func:`Tcl` object can have a Toplevel "
"window created (and the Tk subsystem initialized) by calling its :meth:"
"`loadtk` method."
msgstr ""
":func:`Tcl` 函式是一個工廠函式，它建立的物件與 :class:`Tk` "
"類建立的物件非常相似，只是它不初始化 Tk "
"子系統。在不想建立無關的頂層窗口或不能建立的環境（例如沒有 X 伺服器的 Unix/"
"Linux 系統）中驅動 Tcl 直譯器時，這通常很有用。 :func:`Tcl` "
"物件建立的物件可以通過呼叫其 :meth:`loadtk` 方法來建立 Toplevel 窗口（"
"並初始化 Tk 子系統）。"

#: ../../library/tkinter.rst:203
#, fuzzy
msgid "The modules that provide Tk support include:"
msgstr "提供 Tk 支援的模組包括："

#: ../../library/tkinter.rst:206
msgid ":mod:`tkinter`"
msgstr ":mod:`tkinter`"

#: ../../library/tkinter.rst:206
#, fuzzy
msgid "Main Tkinter module."
msgstr "主 Tkinter 模組。"

#: ../../library/tkinter.rst:209
msgid ":mod:`tkinter.colorchooser`"
msgstr ":mod:`tkinter.colorchooser`"

#: ../../library/tkinter.rst:209
#, fuzzy
msgid "Dialog to let the user choose a color."
msgstr "讓使用者選擇顏色的對話框。"

#: ../../library/tkinter.rst:212
msgid ":mod:`tkinter.commondialog`"
msgstr ":mod:`tkinter.commondialog`"

#: ../../library/tkinter.rst:212
#, fuzzy
msgid "Base class for the dialogs defined in the other modules listed here."
msgstr "此處列出的其他模組中定義的對話框的基底類別。"

#: ../../library/tkinter.rst:215
msgid ":mod:`tkinter.filedialog`"
msgstr ":mod:`tkinter.filedialog`"

#: ../../library/tkinter.rst:215
#, fuzzy
msgid "Common dialogs to allow the user to specify a file to open or save."
msgstr "允許使用者指定要打開或保存的文件的通用對話框。"

#: ../../library/tkinter.rst:218
msgid ":mod:`tkinter.font`"
msgstr ":mod:`tkinter.font`"

#: ../../library/tkinter.rst:218
#, fuzzy
msgid "Utilities to help work with fonts."
msgstr "幫助處理字體的實用程式。"

#: ../../library/tkinter.rst:221
msgid ":mod:`tkinter.messagebox`"
msgstr ":mod:`tkinter.messagebox`"

#: ../../library/tkinter.rst:221
#, fuzzy
msgid "Access to standard Tk dialog boxes."
msgstr "訪問標準 Tk 對話框。"

#: ../../library/tkinter.rst:224
msgid ":mod:`tkinter.scrolledtext`"
msgstr ":mod:`tkinter.scrolledtext`"

#: ../../library/tkinter.rst:224
#, fuzzy
msgid "Text widget with a vertical scroll bar built in."
msgstr "內建垂直滾動條的文本小部件。"

#: ../../library/tkinter.rst:227
msgid ":mod:`tkinter.simpledialog`"
msgstr ":mod:`tkinter.simpledialog`"

#: ../../library/tkinter.rst:227
#, fuzzy
msgid "Basic dialogs and convenience functions."
msgstr "基本對話框和便利功能。"

#: ../../library/tkinter.rst:231
msgid ":mod:`tkinter.ttk`"
msgstr ":mod:`tkinter.ttk`"

#: ../../library/tkinter.rst:230
#, fuzzy
msgid ""
"Themed widget set introduced in Tk 8.5, providing modern alternatives for "
"many of the classic widgets in the main :mod:`tkinter` module."
msgstr "Tk 8.5 中引入的主題小部件集，為主要 :mod:`tkinter` "
"模組中的許多經典小部件提供現代替代品。"

#: ../../library/tkinter.rst:233
#, fuzzy
msgid "Additional modules:"
msgstr "附加模組："

#: ../../library/tkinter.rst:240
msgid ":mod:`_tkinter`"
msgstr ":mod:`_tkinter`"

#: ../../library/tkinter.rst:236
#, fuzzy
msgid ""
"A binary module that contains the low-level interface to Tcl/Tk. It is "
"automatically imported by the main :mod:`tkinter` module, and should never "
"be used directly by application programmers. It is usually a shared library "
"(or DLL), but might in some cases be statically linked with the Python "
"interpreter."
msgstr ""
"包含 Tcl/Tk 低階介面的二進位模組。它由主 :mod:`tkinter` "
"模組自動導入，應用程式程式員不應直接使用。它通常是一個共享庫（或 DLL），"
"但在某些情況下可能與 Python 直譯器靜態鏈接。"

#: ../../library/tkinter.rst:244
msgid ":mod:`idlelib`"
msgstr ":mod:`idlelib`"

#: ../../library/tkinter.rst:243
#, fuzzy
msgid ""
"Python's Integrated Development and Learning Environment (IDLE). Based on :"
"mod:`tkinter`."
msgstr "Python 的集成開發和學習環境 (IDLE)。基於 :mod:`tkinter`。"

#: ../../library/tkinter.rst:249
msgid ":mod:`tkinter.constants`"
msgstr ":mod:`tkinter.constants`"

#: ../../library/tkinter.rst:247
#, fuzzy
msgid ""
"Symbolic constants that can be used in place of strings when passing various "
"parameters to Tkinter calls. Automatically imported by the main :mod:"
"`tkinter` module."
msgstr "將各種參數傳遞給 Tkinter 呼叫時，可用於代替字串的符號常數。由主 "
":mod:`tkinter` 模組自動導入。"

#: ../../library/tkinter.rst:253
msgid ":mod:`tkinter.dnd`"
msgstr ":mod:`tkinter.dnd`"

#: ../../library/tkinter.rst:252
#, fuzzy
msgid ""
"(experimental) Drag-and-drop support for :mod:`tkinter`. This will become "
"deprecated when it is replaced with the Tk DND."
msgstr "（實驗性的）對 :mod:`tkinter` 的拖放支援。當它被 Tk DND 取代時，這將被棄用。"

#: ../../library/tkinter.rst:257
msgid ":mod:`tkinter.tix`"
msgstr ":mod:`tkinter.tix`"

#: ../../library/tkinter.rst:256
#, fuzzy
msgid ""
"(deprecated) An older third-party Tcl/Tk package that adds several new "
"widgets. Better alternatives for most can be found in :mod:`tkinter.ttk`."
msgstr "（已棄用）一個較舊的第三方 Tcl/Tk 包，新增了幾個新的小部件。"
"大多數人的更好選擇可以在 :mod:`tkinter.ttk` 中找到。"

#: ../../library/tkinter.rst:261
msgid ":mod:`turtle`"
msgstr ":mod:`turtle`"

#: ../../library/tkinter.rst:260
#, fuzzy
msgid "Turtle graphics in a Tk window."
msgstr "Tk 窗口中的海龜圖形。"

#: ../../library/tkinter.rst:264
#, fuzzy
msgid "Tkinter Life Preserver"
msgstr "Tkinter 救生衣"

#: ../../library/tkinter.rst:266
#, fuzzy
msgid ""
"This section is not designed to be an exhaustive tutorial on either Tk or "
"Tkinter.  For that, refer to one of the external resources noted earlier. "
"Instead, this section provides a very quick orientation to what a Tkinter "
"application looks like, identifies foundational Tk concepts, and explains "
"how the Tkinter wrapper is structured."
msgstr ""
"本節並非旨在成為 Tk 或 Tkinter "
"的詳盡教程。為此，請參閱前面提到的外部資源之一。相反，本節提供了對 Tkinter "
"應用程式外觀的快速定位，確定了基本的 Tk 概念，並解釋了 Tkinter 包裝器的結構。"

#: ../../library/tkinter.rst:272
#, fuzzy
msgid ""
"The remainder of this section will help you to identify the classes, "
"methods, and options you'll need in your Tkinter application, and where to "
"find more detailed documentation on them, including in the official Tcl/Tk "
"reference manual."
msgstr ""
"本節的其餘部分將幫助您確定 Tkinter "
"應用程式中需要的類、方法和選項，以及在哪裡可以找到有關它們的更多詳細文檔，"
"包括官方 Tcl/Tk 參考手冊。"

#: ../../library/tkinter.rst:279
#, fuzzy
msgid "A Hello World Program"
msgstr "一個你好世界程式"

#: ../../library/tkinter.rst:281
#, fuzzy
msgid ""
"We'll start by walking through a \"Hello World\" application in Tkinter. "
"This isn't the smallest one we could write, but has enough to illustrate "
"some key concepts you'll need to know."
msgstr "我們將從瀏覽 Tkinter 中的“Hello World”應用程式開始。這不是我們能寫的最小的，"
"但足以說明您需要了解的一些關鍵概念。"

#: ../../library/tkinter.rst:297
#, fuzzy
msgid ""
"After the imports, the next line creates an instance of the :class:`Tk` "
"class, which initializes Tk and creates its associated Tcl interpreter. It "
"also creates a toplevel window, known as the root window, which serves as "
"the main window of the application."
msgstr ""
"導入之後，下一行建立 :class:`Tk` 類的實例，它初始化 Tk 並建立其關聯的 Tcl "
"直譯器。它還建立一個頂層窗口，稱為根窗口，用作應用程式的主窗口。"

#: ../../library/tkinter.rst:302
#, fuzzy
msgid ""
"The following line creates a frame widget, which in this case will contain a "
"label and a button we'll create next. The frame is fit inside the root "
"window."
msgstr "以下行建立了一個框架小部件，在本例中，它將包含一個標籤和一個我們接下來要建立"
"的按鈕。框架適合根窗口。"

#: ../../library/tkinter.rst:306
#, fuzzy
msgid ""
"The next line creates a label widget holding a static text string. The :meth:"
"`grid` method is used to specify the relative layout (position) of the label "
"within its containing frame widget, similar to how tables in HTML work."
msgstr ""
"下一行建立一個包含靜態文本字串的標籤小部件。 :meth:`grid` "
"方法用於指定標籤在其包含的框架小部件中的相對佈局（位置），類似於 HTML "
"中表格的工作方式。"

#: ../../library/tkinter.rst:310
#, fuzzy
msgid ""
"A button widget is then created, and placed to the right of the label. When "
"pressed, it will call the :meth:`destroy` method of the root window."
msgstr "然後建立一個按鈕小部件，並將其放置在標籤的右側。按下時，它將呼叫根窗口的 "
":meth:`destroy` 方法。"

#: ../../library/tkinter.rst:313
#, fuzzy
msgid ""
"Finally, the :meth:`mainloop` method puts everything on the display, and "
"responds to user input until the program terminates."
msgstr "最後，:meth:`mainloop` "
"方法將所有內容都顯示在屏幕上，並響應使用者輸入，直到程式終止。"

#: ../../library/tkinter.rst:319
#, fuzzy
msgid "Important Tk Concepts"
msgstr "重要的知識概念"

#: ../../library/tkinter.rst:321
#, fuzzy
msgid "Even this simple program illustrates the following key Tk concepts:"
msgstr "即使是這個簡單的程式也說明了以下關鍵的 Tk 概念："

#: ../../library/tkinter.rst:326
#, fuzzy
msgid "widgets"
msgstr "小部件"

#: ../../library/tkinter.rst:324
#, fuzzy
msgid ""
"A Tkinter user interface is made up of individual *widgets*. Each widget is "
"represented as a Python object, instantiated from classes like :class:`ttk."
"Frame`, :class:`ttk.Label`, and :class:`ttk.Button`."
msgstr ""
"Tkinter 使用者界面由單獨的 *widgets* 組成。每個小部件都表示為一個 Python "
"物件，從 ttk.Frame、ttk.Label 和 ttk.Button 等類實例化。"

#: ../../library/tkinter.rst:332
#, fuzzy
msgid "widget hierarchy"
msgstr "小部件層次結構"

#: ../../library/tkinter.rst:329
#, fuzzy
msgid ""
"Widgets are arranged in a *hierarchy*. The label and button were contained "
"within a frame, which in turn was contained within the root window. When "
"creating each *child* widget, its *parent* widget is passed as the first "
"argument to the widget constructor."
msgstr ""
"小部件按*層次結構*排列。標籤和按鈕包含在框架中，框架又包含在根窗口中。"
"建立每個 *child* 小部件時，其 *parent* "
"小部件作為第一個參數傳遞給小部件構造函式。"

#: ../../library/tkinter.rst:337
#, fuzzy
msgid "configuration options"
msgstr "配置選項"

#: ../../library/tkinter.rst:335
#, fuzzy
msgid ""
"Widgets have *configuration options*, which modify their appearance and "
"behavior, such as the text to display in a label or button. Different "
"classes of widgets will have different sets of options."
msgstr "小部件具有*配置選項*，可以修改它們的外觀和行為，例如要在標籤或按鈕中顯示的文"
"本。不同類別的小部件將具有不同的選項集。"

#: ../../library/tkinter.rst:342
#, fuzzy
msgid "geometry management"
msgstr "幾何管理"

#: ../../library/tkinter.rst:340
#, fuzzy
msgid ""
"Widgets aren't automatically added to the user interface when they are "
"created. A *geometry manager* like ``grid`` controls where in the user "
"interface they are placed."
msgstr "小部件在建立時不會自動新增到使用者界面。像``grid`` 這樣的 *geometry manager* "
"控制它們在使用者界面中的放置位置。"

#: ../../library/tkinter.rst:348
#, fuzzy
msgid "event loop"
msgstr "事件循環"

#: ../../library/tkinter.rst:345
#, fuzzy
msgid ""
"Tkinter reacts to user input, changes from your program, and even refreshes "
"the display only when actively running an *event loop*. If your program "
"isn't running the event loop, your user interface won't update."
msgstr ""
"Tkinter 對使用者輸入、程式更改做出反應，甚至僅在主動運行*事件循環*時才刷新顯"
"示。如果您的程式沒有運行事件循環，您的使用者界面將不會更新。"

#: ../../library/tkinter.rst:351
#, fuzzy
msgid "Understanding How Tkinter Wraps Tcl/Tk"
msgstr "了解 Tkinter 如何包裝 Tcl/Tk"

#: ../../library/tkinter.rst:353
#, fuzzy
msgid ""
"When your application uses Tkinter's classes and methods, internally Tkinter "
"is assembling strings representing Tcl/Tk commands, and executing those "
"commands in the Tcl interpreter attached to your applicaton's :class:`Tk` "
"instance."
msgstr ""
"當您的應用程式使用 Tkinter 的類和方法時，Tkinter 在內部組裝表示 Tcl/Tk "
"命令的字串，並在附加到您的應用程式的 Tk 實例的 Tcl 直譯器中執行這些命令。"

#: ../../library/tkinter.rst:358
#, fuzzy
msgid ""
"Whether it's trying to navigate reference documentation, trying to find the "
"right method or option, adapting some existing code, or debugging your "
"Tkinter application, there are times that it will be useful to understand "
"what those underlying Tcl/Tk commands look like."
msgstr ""
"無論是嘗試瀏覽參考文檔、嘗試找到正確的方法或選項、調整一些現有程式碼，"
"還是除錯您的 Tkinter 應用程式，有時了解那些底層 Tcl/Tk 命令的樣子都會很有用。"

#: ../../library/tkinter.rst:363
#, fuzzy
msgid ""
"To illustrate, here is the Tcl/Tk equivalent of the main part of the Tkinter "
"script above."
msgstr "為了說明，這裡是上面 Tkinter 腳本主要部分的 Tcl/Tk 等價物。"

#: ../../library/tkinter.rst:374
#, fuzzy
msgid ""
"Tcl's syntax is similar to many shell languages, where the first word is the "
"command to be executed, with arguments to that command following it, "
"separated by spaces. Without getting into too many details, notice the "
"following:"
msgstr ""
"Tcl 的語法類似於許多 shell 語言，其中第一個單詞是要執行的命令，後面是該命令的"
"參數，以空格分隔。無需深入了解太多細節，請注意以下幾點："

#: ../../library/tkinter.rst:378
#, fuzzy
msgid ""
"The commands used to create widgets (like ``ttk::frame``) correspond to "
"widget classes in Tkinter."
msgstr "用於建立小部件的命令（如 ``ttk::frame``）對應於 Tkinter 中的小部件類。"

#: ../../library/tkinter.rst:381
#, fuzzy
msgid ""
"Tcl widget options (like ``-text``) correspond to keyword arguments in "
"Tkinter."
msgstr "Tcl 小部件選項（如 ``-text``）對應於 Tkinter 中的關鍵字參數。"

#: ../../library/tkinter.rst:384
#, fuzzy
msgid ""
"Widgets are referred to by a *pathname* in Tcl (like ``.frm.btn``), whereas "
"Tkinter doesn't use names but object references."
msgstr "小部件在 Tcl 中由 *pathname* 引用（如 ``.frm.btn``），而 Tkinter "
"不使用名稱而是使用物件引用。"

#: ../../library/tkinter.rst:387
#, fuzzy
msgid ""
"A widget's place in the widget hierarchy is encoded in its (hierarchical) "
"pathname, which uses a ``.`` (dot) as a path separator. The pathname for the "
"root window is just ``.`` (dot). In Tkinter, the hierarchy is defined not by "
"pathname but by specifying the parent widget when creating each child widget."
msgstr ""
"小部件在小部件層次結構中的位置在其（分層）路徑名中進行編碼，該路徑名使用 ``.``（"
"點）作為路徑分隔符。根窗口的路徑名只是``.``（點）。在 Tkinter 中，層次結構不"
"是通過路徑名定義的，而是通過在建立每個子小部件時指定父小部件來定義的。"

#: ../../library/tkinter.rst:393
#, fuzzy
msgid ""
"Operations which are implemented as separate *commands* in Tcl (like "
"``grid`` or ``destroy``) are represented as *methods* on Tkinter widget "
"objects. As you'll see shortly, at other times Tcl uses what appear to be "
"method calls on widget objects, which more closely mirror what would is used "
"in Tkinter."
msgstr ""
"在 Tcl 中作為單獨的 *commands* 實作的操作（如 ``grid`` 或 ``destroy``）在 "
"Tkinter 小部件對像上表示為 *methods*。正如您很快就會看到的，在其他時候，Tcl "
"使用的似乎是對小部件物件的方法呼叫，這更接近於 Tkinter 中使用的內容。"

#: ../../library/tkinter.rst:401
#, fuzzy
msgid "How do I...? What option does...?"
msgstr "我如何...？什麼選項...？"

#: ../../library/tkinter.rst:403
#, fuzzy
msgid ""
"If you're not sure how to do something in Tkinter, and you can't immediately "
"find it in the tutorial or reference documentation you're using, there are a "
"few strategies that can be helpful."
msgstr "如果您不確定如何在 Tkinter 中做某事，並且無法立即在您使用的教程或參考文檔中找"
"到它，那麼有一些策略可能會有所幫助。"

#: ../../library/tkinter.rst:407
#, fuzzy
msgid ""
"First, remember that the details of how individual widgets work may vary "
"across different versions of both Tkinter and Tcl/Tk. If you're searching "
"documentation, make sure it corresponds to the Python and Tcl/Tk versions "
"installed on your system."
msgstr ""
"首先，請記住各個小部件如何工作的細節可能因 Tkinter 和 Tcl/Tk "
"的不同版本而異。如果您正在搜索文檔，請確保它與您系統上安裝的 Python 和 Tcl/"
"Tk 版本相對應。"

#: ../../library/tkinter.rst:412
#, fuzzy
msgid ""
"When searching for how to use an API, it helps to know the exact name of the "
"class, option, or method that you're using. Introspection, either in an "
"interactive Python shell or with :func:`print`, can help you identify what "
"you need."
msgstr ""
"在搜索如何使用 API 時，了解您正在使用的類、選項或方法的確切名稱會有所幫助。"
"在交互式 Python shell 中或使用 :func:`print` "
"進行內省可以幫助您確定您需要什麼。"

#: ../../library/tkinter.rst:417
#, fuzzy
msgid ""
"To find out what configuration options are available on any widget, call "
"its :meth:`configure` method, which returns a dictionary containing a "
"variety of information about each object, including its default and current "
"values. Use :meth:`keys` to get just the names of each option."
msgstr ""
"要找出任何小部件上可用的配置選項，請呼叫其 :meth:`configure` 方法，該方法回傳"
"一個字典，其中包含有關每個物件的各種資訊，包括其預設值和當前值。使用 "
":meth:`keys` 只獲取每個選項的名稱。"

#: ../../library/tkinter.rst:427
#, fuzzy
msgid ""
"As most widgets have many configuration options in common, it can be useful "
"to find out which are specific to a particular widget class. Comparing the "
"list of options to that of a simpler widget, like a frame, is one way to do "
"that."
msgstr ""
"由於大多數小部件都有許多共同的配置選項，因此找出哪些特定於特定小部件類可能很"
"有用。將選項列表與更簡單的小部件（如框架）的選項列表進行比較是一種方法。"

#: ../../library/tkinter.rst:436
#, fuzzy
msgid ""
"Similarly, you can find the available methods for a widget object using the "
"standard :func:`dir` function. If you try it, you'll see there are over 200 "
"common widget methods, so again identifying those specific to a widget class "
"is helpful."
msgstr ""
"同樣，您可以使用標準 :func:`dir` "
"函式找到小部件物件的可用方法。如果您嘗試一下，您會發現有超過 200 "
"種常見的小部件方法，因此再次識別那些特定於小部件類的方法是有幫助的。"

#: ../../library/tkinter.rst:448
#, fuzzy
msgid "Navigating the Tcl/Tk Reference Manual"
msgstr "瀏覽 Tcl/Tk 參考手冊"

#: ../../library/tkinter.rst:450
#, fuzzy
msgid ""
"As noted, the official `Tk commands <https://www.tcl.tk/man/tcl8.6/TkCmd/"
"contents.htm>`_ reference manual (man pages) is often the most accurate "
"description of what specific operations on widgets do. Even when you know "
"the name of the option or method that you need, you may still have a few "
"places to look."
msgstr ""
"如前所述，官方 `Tk 命令 <https://www.tcl.tk/man/tcl8.6/TkCmd/contents.htm>`_ "
"參考手冊（手冊頁）通常是對具體操作的最準確描述小部件做。即使您知道所需的選項"
"或方法的名稱，您仍可能需要查看一些地方。"

#: ../../library/tkinter.rst:455
#, fuzzy
msgid ""
"While all operations in Tkinter are implemented as method calls on widget "
"objects, you've seen that many Tcl/Tk operations appear as commands that "
"take a widget pathname as its first parameter, followed by optional "
"parameters, e.g."
msgstr ""
"雖然 Tkinter 中的所有操作都是作為對小部件物件的方法呼叫實作的，"
"但您已經看到許多 Tcl/Tk "
"操作顯示為將小部件路徑名作為其第一個參數的命令，然後是可選參數，例如"

#: ../../library/tkinter.rst:465
#, fuzzy
msgid ""
"Others, however, look more like methods called on a widget object (in fact, "
"when you create a widget in Tcl/Tk, it creates a Tcl command with the name "
"of the widget pathname, with the first parameter to that command being the "
"name of a method to call)."
msgstr ""
"然而，其他的看起來更像是在小部件對像上呼叫的方法（事實上，當您在 Tcl/Tk "
"中建立小部件時，它會建立一個 Tcl "
"命令，其名稱為小部件路徑名，該命令的第一個參數是名稱要呼叫的方法）。"

#: ../../library/tkinter.rst:476
#, fuzzy
msgid ""
"In the official Tcl/Tk reference documentation, you'll find most operations "
"that look like method calls on the man page for a specific widget (e.g., "
"you'll find the :meth:`invoke` method on the `ttk::button <https://www.tcl."
"tk/man/tcl8.6/TkCmd/ttk_button.htm>`_ man page), while functions that take a "
"widget as a parameter often have their own man page (e.g., `grid <https://"
"www.tcl.tk/man/tcl8.6/TkCmd/grid.htm>`_)."
msgstr ""
"在官方 Tcl/Tk "
"參考文檔中，您會發現大多數操作看起來像特定小部件的手冊頁上的方法呼叫（例如，"
"您會在 `ttk::button 上找到 :meth:`invoke` 方法<https://www.tcl.tk/man/tcl8.6/"
"TkCmd/ttk_button.htm>`_ "
"手冊頁），而將小部件作為參數的函式通常有自己的手冊頁（例如，`grid < "
"https://www.tcl.tk/man/tcl8.6/TkCmd/grid.htm>`_)。"

#: ../../library/tkinter.rst:484
#, fuzzy
msgid ""
"You'll find many common options and methods in the `options <https://www.tcl."
"tk/man/tcl8.6/TkCmd/options.htm>`_ or `ttk::widget <https://www.tcl.tk/man/"
"tcl8.6/TkCmd/ttk_widget.htm>`_ man pages, while others are found in the man "
"page for a specific widget class."
msgstr ""
"您會在 `options <https://www.tcl.tk/man/tcl8.6/TkCmd/options.htm>`_ 或 `ttk::"
"widget <https://www .tcl.tk/man/tcl8.6/TkCmd/ttk_widget.htm>`_ "
"手冊頁，而其他的可以在特定小部件類的手冊頁中找到。"

#: ../../library/tkinter.rst:489
#, fuzzy
msgid ""
"You'll also find that many Tkinter methods have compound names, e.g., :func:"
"`winfo_x`, :func:`winfo_height`, :func:`winfo_viewable`. You'd find "
"documentation for all of these in the `winfo <https://www.tcl.tk/man/tcl8.6/"
"TkCmd/winfo.htm>`_ man page."
msgstr ""
"您還會發現許多 Tkinter 方法都有復合名稱，例如 :func:`winfo_x`、:func:`winfo_h"
"eight`、:func:`winfo_viewable`。您可以在 `winfo <https://www.tcl.tk/man/tcl8."
"6/TkCmd/winfo.htm>`_ 手冊頁中找到所有這些的文檔。"

#: ../../library/tkinter.rst:495
#, fuzzy
msgid ""
"Somewhat confusingly, there are also methods on all Tkinter widgets that "
"don't actually operate on the widget, but operate at a global scope, "
"independent of any widget. Examples are methods for accessing the clipboard "
"or the system bell. (They happen to be implemented as methods in the base :"
"class:`Widget` class that all Tkinter widgets inherit from)."
msgstr ""
"有點令人困惑的是，所有 Tkinter 小部件上還有一些方法實際上並不在小部件上運行，"
"而是在全局範圍內運行，獨立於任何小部件。例如訪問剪貼板或系統鈴聲的方法。 （"
"它們恰好作為所有 Tkinter 小部件繼承自的 Widget 基底類別中的方法實作）。"

#: ../../library/tkinter.rst:504
#, fuzzy
msgid "Threading model"
msgstr "執行緒模型"

#: ../../library/tkinter.rst:506
#, fuzzy
msgid ""
"Python and Tcl/Tk have very different threading models, which :mod:`tkinter` "
"tries to bridge. If you use threads, you may need to be aware of this."
msgstr "Python 和 Tcl/Tk 有非常不同的執行緒模型，:mod:`tkinter` "
"試圖橋接。如果您使用執行緒，您可能需要注意這一點。"

#: ../../library/tkinter.rst:509
#, fuzzy
msgid ""
"A Python interpreter may have many threads associated with it. In Tcl, "
"multiple threads can be created, but each thread has a separate Tcl "
"interpreter instance associated with it. Threads can also create more than "
"one interpreter instance, though each interpreter instance can be used only "
"by the one thread that created it."
msgstr ""
"一個 Python 直譯器可能有許多與之關聯的執行緒。在 Tcl 中，可以建立多個執行緒，"
"但每個執行緒都有一個獨立的 Tcl 直譯器實例與之關聯。執行緒也可以建立多個直譯器"
"實例，儘管每個直譯器實例只能由建立它的一個執行緒使用。"

#: ../../library/tkinter.rst:514
#, fuzzy
msgid ""
"Each :class:`Tk` object created by :mod:`tkinter` contains a Tcl "
"interpreter. It also keeps track of which thread created that interpreter. "
"Calls to :mod:`tkinter` can be made from any Python thread. Internally, if a "
"call comes from a thread other than the one that created the :class:`Tk` "
"object, an event is posted to the interpreter's event queue, and when "
"executed, the result is returned to the calling Python thread."
msgstr ""
":mod:`tkinter` 建立的每個 :class:`Tk` 對像都包含一個 Tcl "
"直譯器。它還跟踪哪個執行緒建立了該直譯器。可以從任何 Python 執行緒呼叫 "
":mod:`tkinter`。在內部，如果呼叫來自建立 :class:`Tk` "
"物件的執行緒以外的執行緒，則會將一個事件發佈到直譯器的事件隊列，"
"並在執行時將結果回傳給呼叫 Python 執行緒。"

#: ../../library/tkinter.rst:521
#, fuzzy
msgid ""
"Tcl/Tk applications are normally event-driven, meaning that after "
"initialization, the interpreter runs an event loop (i.e. :func:`Tk."
"mainloop`) and responds to events. Because it is single-threaded, event "
"handlers must respond quickly, otherwise they will block other events from "
"being processed. To avoid this, any long-running computations should not run "
"in an event handler, but are either broken into smaller pieces using timers, "
"or run in another thread. This is different from many GUI toolkits where the "
"GUI runs in a completely separate thread from all application code including "
"event handlers."
msgstr ""
"Tcl/Tk 應用程式通常是事件驅動的，這意味著在初始化之後，直譯器運行一個事件循環"
"（即 :func:`Tk.mainloop`）並響應事件。因為是單執行緒的，事件處理器必須快速響"
"應，否則會阻塞其他事件的處理。為避免這種情況，任何長時間運行的計算都不應該在"
"事件處理程式中運行，而是使用計時器將其分成更小的部分，或者在另一個執行緒中運"
"行。這與許多 GUI 工具包不同，在這些工具包中，GUI "
"在與包括事件處理程式在內的所有應用程式程式碼完全獨立的執行緒中運行。"

#: ../../library/tkinter.rst:530
#, fuzzy
msgid ""
"If the Tcl interpreter is not running the event loop and processing events, "
"any :mod:`tkinter` calls made from threads other than the one running the "
"Tcl interpreter will fail."
msgstr ""
"如果 Tcl 直譯器沒有運行事件循環和處理事件，則從運行 Tcl "
"直譯器的執行緒以外的執行緒發出的任何 :mod:`tkinter` 呼叫都將失敗。"

#: ../../library/tkinter.rst:534
#, fuzzy
msgid "A number of special cases exist:"
msgstr "存在一些特殊情況："

#: ../../library/tkinter.rst:536
#, fuzzy
msgid ""
"Tcl/Tk libraries can be built so they are not thread-aware. In this case, :"
"mod:`tkinter` calls the library from the originating Python thread, even if "
"this is different than the thread that created the Tcl interpreter. A global "
"lock ensures only one call occurs at a time."
msgstr ""
"可以構建 Tcl/Tk 庫，因此它們不是執行緒感知的。在這種情況下，:mod:`tkinter` "
"從原始 Python 執行緒呼叫庫，即使這與建立 Tcl "
"直譯器的執行緒不同。全局鎖確保一次只發生一個呼叫。"

#: ../../library/tkinter.rst:541
#, fuzzy
msgid ""
"While :mod:`tkinter` allows you to create more than one instance of a :class:"
"`Tk` object (with its own interpreter), all interpreters that are part of "
"the same thread share a common event queue, which gets ugly fast. In "
"practice, don't create more than one instance of :class:`Tk` at a time. "
"Otherwise, it's best to create them in separate threads and ensure you're "
"running a thread-aware Tcl/Tk build."
msgstr ""
"雖然 :mod:`tkinter` 允許您建立一個 :class:`Tk` 物件的多個實例（帶有自己的直譯"
"器），但屬於同一執行緒的所有直譯器共享一個公開事件隊列，這會很快變得醜陋."
"實際上，不要一次建立多個 :class:`Tk` 實例。否則，"
"最好在單獨的執行緒中建立它們並確保您運行的是執行緒感知 Tcl/Tk 構建。"

#: ../../library/tkinter.rst:547
#, fuzzy
msgid ""
"Blocking event handlers are not the only way to prevent the Tcl interpreter "
"from reentering the event loop. It is even possible to run multiple nested "
"event loops or abandon the event loop entirely. If you're doing anything "
"tricky when it comes to events or threads, be aware of these possibilities."
msgstr ""
"阻塞事件處理程式並不是防止 Tcl 直譯器重新進入事件循環的唯一方法。甚至可以運行"
"多個嵌套事件循環或完全放棄事件循環。如果您在涉及事件或執行緒時做任何棘手的事"
"情，請注意這些可能性。"

#: ../../library/tkinter.rst:552
#, fuzzy
msgid ""
"There are a few select :mod:`tkinter` functions that presently work only "
"when called from the thread that created the Tcl interpreter."
msgstr "有一些 select :mod:`tkinter` 函式目前僅在從建立 Tcl "
"直譯器的執行緒呼叫時才有效。"

#: ../../library/tkinter.rst:557
#, fuzzy
msgid "Handy Reference"
msgstr "方便參考"

#: ../../library/tkinter.rst:563
#, fuzzy
msgid "Setting Options"
msgstr "設定選項"

#: ../../library/tkinter.rst:565
#, fuzzy
msgid ""
"Options control things like the color and border width of a widget. Options "
"can be set in three ways:"
msgstr "選項控制諸如小部件的顏色和邊框寬度之類的東西。可以通過三種方式設定選項："

#: ../../library/tkinter.rst:571
#, fuzzy
msgid "At object creation time, using keyword arguments"
msgstr "在物件建立時，使用關鍵字參數"

#: ../../library/tkinter.rst:577
#, fuzzy
msgid "After object creation, treating the option name like a dictionary index"
msgstr "建立對像後，將選項名稱視為字典索引"

#: ../../library/tkinter.rst:582
#, fuzzy
msgid ""
"Use the config() method to update multiple attrs subsequent to object "
"creation"
msgstr "使用 config() 方法在物件建立之後更新多個屬性"

#: ../../library/tkinter.rst:584
#, fuzzy
msgid ""
"For a complete explanation of a given option and its behavior, see the Tk "
"man pages for the widget in question."
msgstr "有關給定選項及其行為的完整解釋，請參閱相關小部件的 Tk 手冊頁。"

#: ../../library/tkinter.rst:587
#, fuzzy
msgid ""
"Note that the man pages list \"STANDARD OPTIONS\" and \"WIDGET SPECIFIC "
"OPTIONS\" for each widget.  The former is a list of options that are common "
"to many widgets, the latter are the options that are idiosyncratic to that "
"particular widget.  The Standard Options are documented on the :manpage:"
"`options(3)` man page."
msgstr ""
"請注意，手冊頁列出了每個小部件的“標準選項”和“小部件特定選項”。前者是許多小部"
"件共有的選項列表，後者是特定小部件特有的選項。標準選項記錄在 "
":manpage:`options(3)` 手冊頁中。"

#: ../../library/tkinter.rst:593
#, fuzzy
msgid ""
"No distinction between standard and widget-specific options is made in this "
"document.  Some options don't apply to some kinds of widgets. Whether a "
"given widget responds to a particular option depends on the class of the "
"widget; buttons have a ``command`` option, labels do not."
msgstr ""
"本文檔中沒有區分標準選項和特定於小部件的選項。某些選項不適用於某些型別的小部"
"件。給定的小部件是否響應特定選項取決於小部件的類；按鈕有一個 ``command`` "
"選項，標籤沒有。"

#: ../../library/tkinter.rst:598
#, fuzzy
msgid ""
"The options supported by a given widget are listed in that widget's man "
"page, or can be queried at runtime by calling the :meth:`config` method "
"without arguments, or by calling the :meth:`keys` method on that widget.  "
"The return value of these calls is a dictionary whose key is the name of the "
"option as a string (for example, ``'relief'``) and whose values are 5-tuples."
msgstr ""
"給定小部件支援的選項列在該小部件的手冊頁中，"
"或者可以在運行時通過呼叫不帶參數的 :meth:`config` 方法或通過呼叫該小部件的 "
":meth:`keys` 方法來查詢。這些呼叫的回傳值是一個字典，其鍵是字串形式的選項名稱"
"（例如，``'relief'``），其值為 5 元組。"

#: ../../library/tkinter.rst:604
#, fuzzy
msgid ""
"Some options, like ``bg`` are synonyms for common options with long names "
"(``bg`` is shorthand for \"background\"). Passing the ``config()`` method "
"the name of a shorthand option will return a 2-tuple, not 5-tuple. The 2-"
"tuple passed back will contain the name of the synonym and the \"real\" "
"option (such as ``('bg', 'background')``)."
msgstr ""
"一些選項，如 ``bg`` 是具有長名稱的常見選項的同義詞（``bg`` 是“背景”的簡寫）。"
"將 ``config()`` 方法傳遞給速記選項的名稱將回傳一個 2 元組，而不是 5 "
"元組。傳回的二元組將包含同義詞的名稱和“真實”選項（例如 ``('bg', "
"'background')``）。"

#: ../../library/tkinter.rst:611
#, fuzzy
msgid "Index"
msgstr "指數"

#: ../../library/tkinter.rst:611
#, fuzzy
msgid "Meaning"
msgstr "意義"

#: ../../library/tkinter.rst:611
msgid "Example"
msgstr "範例"

#: ../../library/tkinter.rst:613
msgid "0"
msgstr "0"

#: ../../library/tkinter.rst:613
#, fuzzy
msgid "option name"
msgstr "選項名稱"

#: ../../library/tkinter.rst:613 ../../library/tkinter.rst:615
msgid "``'relief'``"
msgstr "``'relief'``"

#: ../../library/tkinter.rst:615
msgid "1"
msgstr "1"

#: ../../library/tkinter.rst:615
#, fuzzy
msgid "option name for database lookup"
msgstr "資料庫查找的選項名稱"

#: ../../library/tkinter.rst:617
msgid "2"
msgstr "2"

#: ../../library/tkinter.rst:617
#, fuzzy
msgid "option class for database lookup"
msgstr "資料庫查找的選項類"

#: ../../library/tkinter.rst:617
msgid "``'Relief'``"
msgstr "``'Relief'``"

#: ../../library/tkinter.rst:620
msgid "3"
msgstr "3"

#: ../../library/tkinter.rst:620
msgid "default value"
msgstr "預設值"

#: ../../library/tkinter.rst:620
msgid "``'raised'``"
msgstr "``'raised'``"

#: ../../library/tkinter.rst:622
msgid "4"
msgstr "4"

#: ../../library/tkinter.rst:622
#, fuzzy
msgid "current value"
msgstr "當前值"

#: ../../library/tkinter.rst:622
msgid "``'groove'``"
msgstr "``'groove'``"

#: ../../library/tkinter.rst:625
msgid "Example::"
msgstr ""
"範例：\n"
"\n"
"::"

#: ../../library/tkinter.rst:630
#, fuzzy
msgid ""
"Of course, the dictionary printed will include all the options available and "
"their values.  This is meant only as an example."
msgstr "當然，印出的字典將包括所有可用的選項及其值。這僅作為示例。"

#: ../../library/tkinter.rst:635
#, fuzzy
msgid "The Packer"
msgstr "包裝工"

#: ../../library/tkinter.rst:639
#, fuzzy
msgid ""
"The packer is one of Tk's geometry-management mechanisms.    Geometry "
"managers are used to specify the relative positioning of widgets within "
"their container - their mutual *master*.  In contrast to the more cumbersome "
"*placer* (which is used less commonly, and we do not cover here), the packer "
"takes qualitative relationship specification - *above*, *to the left of*, "
"*filling*, etc - and works everything out to determine the exact placement "
"coordinates for you."
msgstr ""
"打包器是 Tk 的幾何管理機制之一。幾何管理器用於指定小部件在其容器內的相對定位 "
"- 它們的共同 *master*。與更繁瑣的 "
"*placer*（較少使用，我們不在此處介紹）相比，打包器採用定性關係規範 - "
"*上方*、*左側*、*填充*等 - 並且可以工作一切都為您確定確切的放置坐標。"

#: ../../library/tkinter.rst:646
#, fuzzy
msgid ""
"The size of any *master* widget is determined by the size of the \"slave "
"widgets\" inside.  The packer is used to control where slave widgets appear "
"inside the master into which they are packed.  You can pack widgets into "
"frames, and frames into other frames, in order to achieve the kind of layout "
"you desire. Additionally, the arrangement is dynamically adjusted to "
"accommodate incremental changes to the configuration, once it is packed."
msgstr ""
"任何 *master* 小部件的大小都由內部“從屬小部件”的大小決定。打包器用於控制從部"
"件出現在它們被打包到的主部件中的位置。您可以將小部件打包到框架中，然後將框架"
"打包到其他框架中，以實作您想要的佈局。此外，一旦打包，安排就會動態調整以適應"
"對配置的增量更改。"

#: ../../library/tkinter.rst:653
#, fuzzy
msgid ""
"Note that widgets do not appear until they have had their geometry specified "
"with a geometry manager.  It's a common early mistake to leave out the "
"geometry specification, and then be surprised when the widget is created but "
"nothing appears.  A widget will appear only after it has had, for example, "
"the packer's :meth:`pack` method applied to it."
msgstr ""
"請注意，小部件只有在使用幾何管理器指定其幾何形狀後才會出現。遺漏幾何規範是一"
"個常見的早期錯誤，然後在建立小部件但什麼也沒有出現時感到驚訝。"
"小部件只有在應用了例如打包程式的 :meth:`pack` 方法後才會出現。"

#: ../../library/tkinter.rst:659
#, fuzzy
msgid ""
"The pack() method can be called with keyword-option/value pairs that control "
"where the widget is to appear within its container, and how it is to behave "
"when the main application window is resized.  Here are some examples::"
msgstr ""
"可以使用關鍵字-選項/值對呼叫 pack() 方法，這些關鍵字-選項/值對控制小部件在其"
"容器中出現的位置，以及在調整主應用程式窗口大小時它的行為方式。這裡有些例子："
"："

#: ../../library/tkinter.rst:669
#, fuzzy
msgid "Packer Options"
msgstr "包裝選項"

#: ../../library/tkinter.rst:671
#, fuzzy
msgid ""
"For more extensive information on the packer and the options that it can "
"take, see the man pages and page 183 of John Ousterhout's book."
msgstr "有關打包程式及其可用選項的更多詳細資訊，請參閱手冊頁和 John Ousterhout "
"的書的第 183 頁。"

#: ../../library/tkinter.rst:675 ../../library/tkinter.rst:795
#, fuzzy
msgid "anchor"
msgstr "錨"

#: ../../library/tkinter.rst:675
#, fuzzy
msgid ""
"Anchor type.  Denotes where the packer is to place each slave in its parcel."
msgstr "錨型別。表示包裝器將每個奴隸放置在其包裹中的位置。"

#: ../../library/tkinter.rst:678
#, fuzzy
msgid "expand"
msgstr "擴張"

#: ../../library/tkinter.rst:678
#, fuzzy
msgid "Boolean, ``0`` or ``1``."
msgstr "布爾值， ``0``或 ``1``。"

#: ../../library/tkinter.rst:681
#, fuzzy
msgid "fill"
msgstr "充滿"

#: ../../library/tkinter.rst:681
#, fuzzy
msgid "Legal values: ``'x'``, ``'y'``, ``'both'``, ``'none'``."
msgstr "合法值：``'x'``、``'y'``、``'both'``、``'none'``。"

#: ../../library/tkinter.rst:684
#, fuzzy
msgid "ipadx and ipady"
msgstr "ipadx 和 ipady"

#: ../../library/tkinter.rst:684
#, fuzzy
msgid ""
"A distance - designating internal padding on each side of the slave widget."
msgstr "距離 - 指定從部件每一側的內部填充。"

#: ../../library/tkinter.rst:687
#, fuzzy
msgid "padx and pady"
msgstr "padx 和 pady"

#: ../../library/tkinter.rst:687
#, fuzzy
msgid ""
"A distance - designating external padding on each side of the slave widget."
msgstr "距離 - 指定從部件每一側的外部填充。"

#: ../../library/tkinter.rst:691
#, fuzzy
msgid "side"
msgstr "邊"

#: ../../library/tkinter.rst:690
#, fuzzy
msgid "Legal values are: ``'left'``, ``'right'``, ``'top'``, ``'bottom'``."
msgstr "合法值是：``'left'``, ``'right'``, ``'top'``, ``'bottom'``。"

#: ../../library/tkinter.rst:694
#, fuzzy
msgid "Coupling Widget Variables"
msgstr "耦合小部件變數"

#: ../../library/tkinter.rst:696
#, fuzzy
msgid ""
"The current-value setting of some widgets (like text entry widgets) can be "
"connected directly to application variables by using special options.  These "
"options are ``variable``, ``textvariable``, ``onvalue``, ``offvalue``, and "
"``value``.  This connection works both ways: if the variable changes for any "
"reason, the widget it's connected to will be updated to reflect the new "
"value."
msgstr ""
"一些小部件（如文本輸入小部件）的當前值設定可以通過使用特殊選項直接連接到應用"
"程式變數。這些選項是 ``variable`` 、 ``textvariable`` 、 ``onvalue`` 、 ``offvalue`` 和“value"
"”。這種連接是雙向的：如果變數因任何原因發生變化，它所連接的小部件將更新以反映"
"新值。"

#: ../../library/tkinter.rst:702
#, fuzzy
msgid ""
"Unfortunately, in the current implementation of :mod:`tkinter` it is not "
"possible to hand over an arbitrary Python variable to a widget through a "
"``variable`` or ``textvariable`` option.  The only kinds of variables for "
"which this works are variables that are subclassed from a class called "
"Variable, defined in :mod:`tkinter`."
msgstr ""
"不幸的是，在 :mod:`tkinter` 的當前實作中，不可能通過 ``variable`` 或 "
"``textvariable`` 選項將任意 Python 變數移交給小部件。"
"這適用的唯一型別的變數是從名為 Variable 的類的子類別化的變數，該類在 "
":mod:`tkinter` 中定義。"

#: ../../library/tkinter.rst:708
#, fuzzy
msgid ""
"There are many useful subclasses of Variable already defined: :class:"
"`StringVar`, :class:`IntVar`, :class:`DoubleVar`, and :class:`BooleanVar`.  "
"To read the current value of such a variable, call the :meth:`get` method on "
"it, and to change its value you call the :meth:`!set` method.  If you follow "
"this protocol, the widget will always track the value of the variable, with "
"no further intervention on your part."
msgstr ""
"已經定義了很多有用的 Variable 子類別：StringVar、IntVar、DoubleVar 和 "
"BooleanVar。要讀取此類變數的當前值，請對其呼叫 :meth:`get` "
"方法，而要更改其值，請呼叫 :meth:`!set` "
"方法。如果您遵循此協定，小部件將始終跟踪變數的值，而無需您進一步干預。"

#: ../../library/tkinter.rst:715 ../../library/tkinter.rst:895
msgid "For example::"
msgstr ""
"舉例來說：\n"
"\n"
"::"

#: ../../library/tkinter.rst:748
#, fuzzy
msgid "The Window Manager"
msgstr "窗口管理器"

#: ../../library/tkinter.rst:752
#, fuzzy
msgid ""
"In Tk, there is a utility command, ``wm``, for interacting with the window "
"manager.  Options to the ``wm`` command allow you to control things like "
"titles, placement, icon bitmaps, and the like.  In :mod:`tkinter`, these "
"commands have been implemented as methods on the :class:`Wm` class.  "
"Toplevel widgets are subclassed from the :class:`Wm` class, and so can call "
"the :class:`Wm` methods directly."
msgstr ""
"在 Tk 中，有一個實用命令 ``wm``，用於與窗口管理器交互。 ``wm`` "
"命令的選項允許您控制標題、位置、圖標位圖等內容。在 :mod:`tkinter` 中，"
"這些命令已作為 :class:`Wm` 類上的方法實作。 Toplevel 小部件是 Wm 類的子類別，"
"因此可以直接呼叫 Wm 方法。"

#: ../../library/tkinter.rst:759
#, fuzzy
msgid ""
"To get at the toplevel window that contains a given widget, you can often "
"just refer to the widget's master.  Of course if the widget has been packed "
"inside of a frame, the master won't represent a toplevel window.  To get at "
"the toplevel window that contains an arbitrary widget, you can call the :"
"meth:`_root` method. This method begins with an underscore to denote the "
"fact that this function is part of the implementation, and not an interface "
"to Tk functionality."
msgstr ""
"要獲得包含給定小部件的頂層窗口，您通常可以只引用小部件的母版。當然，如果小部"
"件已打包在框架內，主窗口將不會代表頂層窗口。要獲得包含任意小部件的頂層窗口，"
"您可以呼叫 :meth:`_root` 方法。此方法以底線開頭，表示此函式是實作的一部分，"
"而不是 Tk 功能的介面。"

#: ../../library/tkinter.rst:766
msgid "Here are some examples of typical usage::"
msgstr ""
"以下是一些常見用法範例：\n"
"\n"
"::"

#: ../../library/tkinter.rst:789
#, fuzzy
msgid "Tk Option Data Types"
msgstr "Tk 選項資料型別"

#: ../../library/tkinter.rst:794
#, fuzzy
msgid ""
"Legal values are points of the compass: ``\"n\"``, ``\"ne\"``, ``\"e\"``, ``"
"\"se\"``, ``\"s\"``, ``\"sw\"``, ``\"w\"``, ``\"nw\"``, and also ``\"center"
"\"``."
msgstr ""
"合法值是羅盤的點：``\"n\"``, ``\"ne\"``, ``\"e\"``, ``\"se\"``, ``\"s\"``, ``"
"  ``sw````、``\"w\"``、``\"nw\"`` 以及 ``\"center\"``。"

#: ../../library/tkinter.rst:801
#, fuzzy
msgid "bitmap"
msgstr "位圖"

#: ../../library/tkinter.rst:798
#, fuzzy
msgid ""
"There are eight built-in, named bitmaps: ``'error'``, ``'gray25'``, "
"``'gray50'``, ``'hourglass'``, ``'info'``, ``'questhead'``, ``'question'``, "
"``'warning'``.  To specify an X bitmap filename, give the full path to the "
"file, preceded with an ``@``, as in ``\"@/usr/contrib/bitmap/gumby.bit\"``."
msgstr ""
"有八個內建的命名位圖：``'error'``, ``'gray25'``, ``'gray50'``, "
"``'hourglass'``, ``'info'``, ``'questhead'``，``'question'``，``'warning'``。"
"要指定 X 位圖文件名，請提供文件的完整路徑，並在前面加上 ``@``，如 ``\"@/usr/contrib/bitmap/gumby.bit\"``。"

#: ../../library/tkinter.rst:804
#, fuzzy
msgid "boolean"
msgstr "布爾值"

#: ../../library/tkinter.rst:804
#, fuzzy
msgid "You can pass integers 0 or 1 or the strings ``\"yes\"`` or ``\"no\"``."
msgstr "您可以傳遞整數 0 或 1 或字串 ``\"yes\"`` 或 ``\"no\"``。"

#: ../../library/tkinter.rst:811
#, fuzzy
msgid "callback"
msgstr "打回來"

#: ../../library/tkinter.rst:807
#, fuzzy
msgid "This is any Python function that takes no arguments.  For example::"
msgstr "這是任何不帶參數的 Python 函式。例如：："

#: ../../library/tkinter.rst:817
#, fuzzy
msgid "color"
msgstr "顏色"

#: ../../library/tkinter.rst:814
#, fuzzy
msgid ""
"Colors can be given as the names of X colors in the rgb.txt file, or as "
"strings representing RGB values in 4 bit: ``\"#RGB\"``, 8 bit: ``\"#RRGGBB"
"\"``, 12 bit: ``\"#RRRGGGBBB\"``, or 16 bit: ``\"#RRRRGGGGBBBB\"`` ranges, "
"where R,G,B here represent any legal hex digit.  See page 160 of "
"Ousterhout's book for details."
msgstr ""
"顏色可以作為 rgb.txt 文件中 X 顏色的名稱給出，或者作為表示 4 位 RGB "
"值的字串：``\"#RGB\"``，8 位：``\"#RRGGBB\"``，12 位：``\"#RRRGGGBBB\""
"``，或者16位：``\"#RRRRGGGGBBBB\""
"``範圍，這裡的R,G,B代表任意合法的十六進位數字。有關詳細資訊，請參見 "
"Ousterhout 的書的第 160 頁。"

#: ../../library/tkinter.rst:823
#, fuzzy
msgid "cursor"
msgstr "光標"

#: ../../library/tkinter.rst:820
#, fuzzy
msgid ""
"The standard X cursor names from :file:`cursorfont.h` can be used, without "
"the ``XC_`` prefix.  For example to get a hand cursor (:const:`XC_hand2`), "
"use the string ``\"hand2\"``.  You can also specify a bitmap and mask file "
"of your own. See page 179 of Ousterhout's book."
msgstr ""
"可以使用 :file:`cursorfont.h` 中的標準 X 游標名稱，不帶 ``XC_`` 前綴。例如，"
"要獲得手形光標 (:const:`XC_hand2`)，請使用字串 ``\"hand2\""
"``。您還可以指定自己的位圖和掩碼文件。請參閱 Ousterhout 的書的第 179 頁。"

#: ../../library/tkinter.rst:830
#, fuzzy
msgid "distance"
msgstr "距離"

#: ../../library/tkinter.rst:826
#, fuzzy
msgid ""
"Screen distances can be specified in either pixels or absolute distances. "
"Pixels are given as numbers and absolute distances as strings, with the "
"trailing character denoting units: ``c`` for centimetres, ``i`` for inches, "
"``m`` for millimetres, ``p`` for printer's points.  For example, 3.5 inches "
"is expressed as ``\"3.5i\"``."
msgstr ""
"屏幕距離可以用像素或絕對距離指定。像素以數字形式給出，絕對距離以字串形式給出"
"，尾隨字元表示單位： ``c``表示厘米， ``i``表示英寸， ``m``表示毫米， ``p``表示印出機點."
"例如，3.5 英寸表示為``\"3.5i\"``。"

#: ../../library/tkinter.rst:835
#, fuzzy
msgid "font"
msgstr "字體"

#: ../../library/tkinter.rst:833
#, fuzzy
msgid ""
"Tk uses a list font name format, such as ``{courier 10 bold}``. Font sizes "
"with positive numbers are measured in points; sizes with negative numbers "
"are measured in pixels."
msgstr "Tk 使用列表字體名稱格式，例如``{courier 10 "
"bold}``。正數的字體大小以磅為單位；負數的大小以像素為單位。"

#: ../../library/tkinter.rst:840
#, fuzzy
msgid "geometry"
msgstr "幾何學"

#: ../../library/tkinter.rst:838
#, fuzzy
msgid ""
"This is a string of the form ``widthxheight``, where width and height are "
"measured in pixels for most widgets (in characters for widgets displaying "
"text). For example: ``fred[\"geometry\"] = \"200x100\"``."
msgstr ""
"這是一個 ``widthxheight`` 形式的字串，其中對於大多數小部件，寬度和高度以像素"
"為單位（對於顯示文本的小部件，以字元為單位）。例如：``fred[\"geometry\"] = "
"\"200x100\"``。"

#: ../../library/tkinter.rst:844
#, fuzzy
msgid "justify"
msgstr "證明合法"

#: ../../library/tkinter.rst:843
#, fuzzy
msgid ""
"Legal values are the strings: ``\"left\"``, ``\"center\"``, ``\"right\"``, "
"and ``\"fill\"``."
msgstr "合法值是字串：``\"left\"``、``\"center\"``、``\"right\"`` 和 ``\"fill\"``。"

#: ../../library/tkinter.rst:849
#, fuzzy
msgid "region"
msgstr "地區"

#: ../../library/tkinter.rst:847
#, fuzzy
msgid ""
"This is a string with four space-delimited elements, each of which is a "
"legal distance (see above).  For example: ``\"2 3 4 5\"`` and ``\"3i 2i 4.5i "
"2i\"`` and ``\"3c 2c 4c 10.43c\"``  are all legal regions."
msgstr ""
"這是一個包含四個以空格分隔的元素的字串，每個元素都是一個合法的距離（見上文）"
"。例如：``\"2 3 4 5\"`` 和``\"3i 2i 4.5i 2i\"`` 和``\"3c 2c 4c 10.43c\"`` "
"都是合法區域。"

#: ../../library/tkinter.rst:853
#, fuzzy
msgid "relief"
msgstr "寬慰"

#: ../../library/tkinter.rst:852
#, fuzzy
msgid ""
"Determines what the border style of a widget will be.  Legal values are: ``"
"\"raised\"``, ``\"sunken\"``, ``\"flat\"``, ``\"groove\"``, and ``\"ridge"
"\"``."
msgstr ""
"確定小部件的邊框樣式。合法值是：``\"凸起\"``、``\"凹陷\"``、``\"平坦\"``、``"
"\"凹槽\"`` 和 ``\"脊\"``。"

#: ../../library/tkinter.rst:857
#, fuzzy
msgid "scrollcommand"
msgstr "滾動命令"

#: ../../library/tkinter.rst:856
#, fuzzy
msgid ""
"This is almost always the :meth:`!set` method of some scrollbar widget, but "
"can be any widget method that takes a single argument."
msgstr "這幾乎總是某些滾動條小部件的 :meth:`!set` "
"方法，但可以是任何採用單個參數的小部件方法。"

#: ../../library/tkinter.rst:860
#, fuzzy
msgid "wrap"
msgstr "裹"

#: ../../library/tkinter.rst:860
#, fuzzy
msgid "Must be one of: ``\"none\"``, ``\"char\"``, or ``\"word\"``."
msgstr "必須是以下之一：``\"none\"``、``\"char\"`` 或 ``\"word\"``。"

#: ../../library/tkinter.rst:865
#, fuzzy
msgid "Bindings and Events"
msgstr "綁定和事件"

#: ../../library/tkinter.rst:871
#, fuzzy
msgid ""
"The bind method from the widget command allows you to watch for certain "
"events and to have a callback function trigger when that event type occurs.  "
"The form of the bind method is::"
msgstr "小部件命令中的綁定方法允許您監視某些事件並在該事件型別發生時觸發回呼函式。 "
"bind 方法的形式是："

#: ../../library/tkinter.rst:877
#, fuzzy
msgid "where:"
msgstr "在哪裡："

#: ../../library/tkinter.rst:882
#, fuzzy
msgid "sequence"
msgstr "順序"

#: ../../library/tkinter.rst:880
#, fuzzy
msgid ""
"is a string that denotes the target kind of event.  (See the :manpage:"
"`bind(3tk)` man page, and page 201 of John Ousterhout's book, :title-"
"reference:`Tcl and the Tk Toolkit (2nd edition)`, for details)."
msgstr ""
"是表示目標事件型別的字串。 （有關詳細資訊，請參閱 :manpage:`bind(3tk)` "
"手冊頁和 John Ousterhout 的書 :title-reference:`Tcl 和 Tk 工具包（第 2 版）` "
"的第 201 頁）。"

#: ../../library/tkinter.rst:887
#, fuzzy
msgid "func"
msgstr "功能"

#: ../../library/tkinter.rst:885
#, fuzzy
msgid ""
"is a Python function, taking one argument, to be invoked when the event "
"occurs. An Event instance will be passed as the argument. (Functions "
"deployed this way are commonly known as *callbacks*.)"
msgstr "是一個 Python 函式，接受一個參數，在事件發生時呼叫。一個 Event "
"實例將作為參數傳遞。 （以這種方式部署的功能通常稱為*回呼*。）"

#: ../../library/tkinter.rst:893
#, fuzzy
msgid "add"
msgstr "新增"

#: ../../library/tkinter.rst:890
#, fuzzy
msgid ""
"is optional, either ``''`` or ``'+'``.  Passing an empty string denotes that "
"this binding is to replace any other bindings that this event is associated "
"with.  Passing a ``'+'`` means that this function is to be added to the list "
"of functions bound to this event type."
msgstr ""
"是可選的，``''`` "
"或``'+'``。傳遞空字串表示此綁定將替換與此事件關聯的任何其他綁定。傳遞一個 "
"``'+'`` 意味著這個函式將被新增到綁定到這個事件型別的函式列表中。"

#: ../../library/tkinter.rst:902
#, fuzzy
msgid ""
"Notice how the widget field of the event is being accessed in the "
"``turn_red()`` callback.  This field contains the widget that caught the X "
"event.  The following table lists the other event fields you can access, and "
"how they are denoted in Tk, which can be useful when referring to the Tk man "
"pages."
msgstr ""
"注意事件的 widget 欄位是如何在 ``turn_red()`` 回呼中被訪問的。該欄位包含捕獲 "
"X 事件的小部件。下表列出了您可以訪問的其他事件欄位，以及它們在 Tk "
"中的表示方式，這在參考 Tk 手冊頁時很有用。"

#: ../../library/tkinter.rst:908
#, fuzzy
msgid "Tkinter Event Field"
msgstr "Tkinter 事件欄位"

#: ../../library/tkinter.rst:910
msgid "%f"
msgstr "%f"

#: ../../library/tkinter.rst:910
#, fuzzy
msgid "focus"
msgstr "重點"

#: ../../library/tkinter.rst:910
msgid "%A"
msgstr "%A"

#: ../../library/tkinter.rst:910
msgid "char"
msgstr "char"

#: ../../library/tkinter.rst:912
msgid "%h"
msgstr "%h"

#: ../../library/tkinter.rst:912
#, fuzzy
msgid "height"
msgstr "高度"

#: ../../library/tkinter.rst:912
msgid "%E"
msgstr "%E"

#: ../../library/tkinter.rst:912
msgid "send_event"
msgstr "send_event"

#: ../../library/tkinter.rst:914
msgid "%k"
msgstr "%k"

#: ../../library/tkinter.rst:914
#, fuzzy
msgid "keycode"
msgstr "關鍵程式碼"

#: ../../library/tkinter.rst:914
msgid "%K"
msgstr "%K"

#: ../../library/tkinter.rst:914
#, fuzzy
msgid "keysym"
msgstr "鍵盤符號"

#: ../../library/tkinter.rst:916
msgid "%s"
msgstr "%s"

#: ../../library/tkinter.rst:916
#, fuzzy
msgid "state"
msgstr "狀態"

#: ../../library/tkinter.rst:916
msgid "%N"
msgstr "%N"

#: ../../library/tkinter.rst:916
msgid "keysym_num"
msgstr "keysym_num"

#: ../../library/tkinter.rst:918
msgid "%t"
msgstr "%t"

#: ../../library/tkinter.rst:918
#, fuzzy
msgid "time"
msgstr "時間"

#: ../../library/tkinter.rst:918
msgid "%T"
msgstr "%T"

#: ../../library/tkinter.rst:918
#, fuzzy
msgid "type"
msgstr "型別"

#: ../../library/tkinter.rst:920
msgid "%w"
msgstr "%w"

#: ../../library/tkinter.rst:920
#, fuzzy
msgid "width"
msgstr "寬度"

#: ../../library/tkinter.rst:920
msgid "%W"
msgstr "%W"

#: ../../library/tkinter.rst:920
#, fuzzy
msgid "widget"
msgstr "小部件"

#: ../../library/tkinter.rst:922
msgid "%x"
msgstr "%x"

#: ../../library/tkinter.rst:922
msgid "x"
msgstr "x"

#: ../../library/tkinter.rst:922
msgid "%X"
msgstr "%X"

#: ../../library/tkinter.rst:922
msgid "x_root"
msgstr "x_root"

#: ../../library/tkinter.rst:924
msgid "%y"
msgstr "%y"

#: ../../library/tkinter.rst:924
msgid "y"
msgstr "y"

#: ../../library/tkinter.rst:924
msgid "%Y"
msgstr "%Y"

#: ../../library/tkinter.rst:924
msgid "y_root"
msgstr "y_root"

#: ../../library/tkinter.rst:929
#, fuzzy
msgid "The index Parameter"
msgstr "索引參數"

#: ../../library/tkinter.rst:931
#, fuzzy
msgid ""
"A number of widgets require \"index\" parameters to be passed.  These are "
"used to point at a specific place in a Text widget, or to particular "
"characters in an Entry widget, or to particular menu items in a Menu widget."
msgstr "許多小部件需要傳遞“索引”參數。這些用於指向文本小部件中的特定位置，或指向條目"
"小部件中的特定字元，或指向菜單小部件中的特定菜單項。"

#: ../../library/tkinter.rst:938
#, fuzzy
msgid "Entry widget indexes (index, view index, etc.)"
msgstr "條目小部件索引（索引、視圖索引等）"

#: ../../library/tkinter.rst:936
#, fuzzy
msgid ""
"Entry widgets have options that refer to character positions in the text "
"being displayed.  You can use these :mod:`tkinter` functions to access these "
"special points in text widgets:"
msgstr "條目小部件具有引用所顯示文本中字元位置的選項。您可以使用這些 :mod:`tkinter` "
"函式來訪問文本小部件中的這些特殊點："

#: ../../library/tkinter.rst:942
#, fuzzy
msgid "Text widget indexes"
msgstr "文本小部件索引"

#: ../../library/tkinter.rst:941
#, fuzzy
msgid ""
"The index notation for Text widgets is very rich and is best described in "
"the Tk man pages."
msgstr "文本小部件的索引符號非常豐富，在 Tk 手冊頁中有最好的描述。"

#: ../../library/tkinter.rst:967
#, fuzzy
msgid "Menu indexes (menu.invoke(), menu.entryconfig(), etc.)"
msgstr "菜單索引（menu.invoke()、menu.entryconfig() 等）"

#: ../../library/tkinter.rst:945
#, fuzzy
msgid ""
"Some options and methods for menus manipulate specific menu entries. Anytime "
"a menu index is needed for an option or a parameter, you may pass in:"
msgstr "菜單的一些選項和方法操作特定的菜單項。每當選項或參數需要菜單索引時，您可以傳"
"入："

#: ../../library/tkinter.rst:948
#, fuzzy
msgid ""
"an integer which refers to the numeric position of the entry in the widget, "
"counted from the top, starting with 0;"
msgstr "一個整數，它指的是小部件中條目的數字位置，從頂部開始計數，從 0 開始；"

#: ../../library/tkinter.rst:951
#, fuzzy
msgid ""
"the string ``\"active\"``, which refers to the menu position that is "
"currently under the cursor;"
msgstr "字串``\"active\"``，表示當前光標所在的菜單位置；"

#: ../../library/tkinter.rst:954
#, fuzzy
msgid "the string ``\"last\"`` which refers to the last menu item;"
msgstr "字串 ``\"last\"`` 指的是最後一個菜單項；"

#: ../../library/tkinter.rst:956
#, fuzzy
msgid ""
"An integer preceded by ``@``, as in ``@6``, where the integer is interpreted "
"as a y pixel coordinate in the menu's coordinate system;"
msgstr "以 ``@``開頭的整數，如“@6”，其中整數被解釋為菜單坐標系中的 y 像素坐標；"

#: ../../library/tkinter.rst:959
#, fuzzy
msgid ""
"the string ``\"none\"``, which indicates no menu entry at all, most often "
"used with menu.activate() to deactivate all entries, and finally,"
msgstr "字串 ``\"none\"``，表示根本沒有菜單項，最常與 menu.activate() "
"一起使用以停用所有條目，最後，"

#: ../../library/tkinter.rst:962
#, fuzzy
msgid ""
"a text string that is pattern matched against the label of the menu entry, "
"as scanned from the top of the menu to the bottom.  Note that this index "
"type is considered after all the others, which means that matches for menu "
"items labelled ``last``, ``active``, or ``none`` may be interpreted as the "
"above literals, instead."
msgstr ""
"一個文本字串，它與菜單條目的標籤進行模式匹配，從菜單頂部掃描到底部。請注意，"
"此索引型別在所有其他索引型別之後被考慮，這意味著匹配標記為 ``last``、 ``active``或“"
"none”的菜單項可能會被解釋為上述文字。"

#: ../../library/tkinter.rst:970
#, fuzzy
msgid "Images"
msgstr "圖片"

#: ../../library/tkinter.rst:972
#, fuzzy
msgid ""
"Images of different formats can be created through the corresponding "
"subclass of :class:`tkinter.Image`:"
msgstr "通過 :class:`tkinter.Image` 的相應子類別可以建立不同格式的圖像："

#: ../../library/tkinter.rst:975
#, fuzzy
msgid ":class:`BitmapImage` for images in XBM format."
msgstr ":class:`BitmapImage` 用於 XBM 格式的圖像。"

#: ../../library/tkinter.rst:977
#, fuzzy
msgid ""
":class:`PhotoImage` for images in PGM, PPM, GIF and PNG formats. The latter "
"is supported starting with Tk 8.6."
msgstr ":class:`PhotoImage` 用於 PGM、PPM、GIF 和 PNG 格式的圖像。後者從 Tk 8.6 "
"開始受支援。"

#: ../../library/tkinter.rst:980
#, fuzzy
msgid ""
"Either type of image is created through either the ``file`` or the ``data`` "
"option (other options are available as well)."
msgstr "任何一種型別的圖像都是通過“文件”或“資料”選項建立的（其他選項也可用）。"

#: ../../library/tkinter.rst:983
#, fuzzy
msgid ""
"The image object can then be used wherever an ``image`` option is supported "
"by some widget (e.g. labels, buttons, menus). In these cases, Tk will not "
"keep a reference to the image. When the last Python reference to the image "
"object is deleted, the image data is deleted as well, and Tk will display an "
"empty box wherever the image was used."
msgstr ""
"然後可以在某些小部件（例如標籤、按鈕、菜單）支援“圖像”選項的任何地方使用圖像"
"物件。在這些情況下，Tk 不會保留對圖像的引用。當對圖像物件的最後一個 Python "
"引用被刪除時，圖像資料也被刪除，並且 Tk 將在使用圖像的任何地方顯示一個空框。"

#: ../../library/tkinter.rst:991
#, fuzzy
msgid ""
"The `Pillow <https://python-pillow.org/>`_ package adds support for formats "
"such as BMP, JPEG, TIFF, and WebP, among others."
msgstr ""
"`Pillow <https://python-pillow.org/>`_ 包增加了對 BMP、JPEG、TIFF 和 WebP "
"等格式的支援。"

#: ../../library/tkinter.rst:997
#, fuzzy
msgid "File Handlers"
msgstr "文件處理程式"

#: ../../library/tkinter.rst:999
#, fuzzy
msgid ""
"Tk allows you to register and unregister a callback function which will be "
"called from the Tk mainloop when I/O is possible on a file descriptor. Only "
"one handler may be registered per file descriptor. Example code::"
msgstr ""
"Tk 允許您註冊和取消註冊回呼函式，當文件描述器上可以進行 I/O 時，"
"該回呼函式將從 Tk "
"主循環呼叫。每個文件描述器只能註冊一個處理程式。示例程式碼::"

#: ../../library/tkinter.rst:1010
#, fuzzy
msgid "This feature is not available on Windows."
msgstr "此功能在 Windows 上不可用。"

#: ../../library/tkinter.rst:1012
#, fuzzy
msgid ""
"Since you don't know how many bytes are available for reading, you may not "
"want to use the :class:`~io.BufferedIOBase` or :class:`~io.TextIOBase` :meth:"
"`~io.BufferedIOBase.read` or :meth:`~io.IOBase.readline` methods, since "
"these will insist on reading a predefined number of bytes. For sockets, the :"
"meth:`~socket.socket.recv` or :meth:`~socket.socket.recvfrom` methods will "
"work fine; for other files, use raw reads or ``os.read(file.fileno(), "
"maxbytecount)``."
msgstr ""
"由於您不知道有多少位元組可供讀取，因此您可能不想使用 :class:`~io."
"BufferedIOBase` 或 :class:`~io.TextIOBase` :meth:`~io.BufferedIOBase.read ` "
"或 :meth:`~io.IOBase.readline` "
"方法，因為這些方法將堅持讀取預定義的位元組數。對於 socket ，:meth:`~socket."
"socket.recv` 或 :meth:`~socket.socket.recvfrom` "
"方法可以正常工作；對於其他文件，使用原始讀取或 ``os.read(file.fileno(), "
"maxbytecount)``。"

#: ../../library/tkinter.rst:1023
#, fuzzy
msgid ""
"Registers the file handler callback function *func*. The *file* argument may "
"either be an object with a :meth:`~io.IOBase.fileno` method (such as a file "
"or socket object), or an integer file descriptor. The *mask* argument is an "
"ORed combination of any of the three constants below. The callback is called "
"as follows::"
msgstr ""
"註冊文件處理程式回呼函式 *func*。 *file* 參數可以是具有 :meth:`~io.IOBase."
"fileno` 方法的物件（例如文件或 socket 物件），也可以是整數文件描述器。 *mask* "
"參數是以下三個常數中任何一個的 ORed 組合。回呼呼叫如下："

#: ../../library/tkinter.rst:1034
#, fuzzy
msgid "Unregisters a file handler."
msgstr "註銷文件處理程式。"

#: ../../library/tkinter.rst:1041
#, fuzzy
msgid "Constants used in the *mask* arguments."
msgstr "*mask* 參數中使用的常數。"
