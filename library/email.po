# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-13 00:11+0000\n"
"PO-Revision-Date: 2018-05-23 16:01+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/email.rst:2
msgid ":mod:`email` --- An email and MIME handling package"
msgstr ":mod:`email` --- 電子郵件和 MIME 處理套件"

#: ../../library/email.rst:11
msgid "**Source code:** :source:`Lib/email/__init__.py`"
msgstr "**原始碼：**\\ :source:`Lib/email/__init__.py`"

#: ../../library/email.rst:15
#, fuzzy
msgid ""
"The :mod:`email` package is a library for managing email messages.  It is "
"specifically *not* designed to do any sending of email messages to SMTP (:"
"rfc:`2821`), NNTP, or other servers; those are functions of modules such as :"
"mod:`smtplib` and :mod:`nntplib`.  The :mod:`email` package attempts to be "
"as RFC-compliant as possible, supporting :rfc:`5322` and :rfc:`6532`, as "
"well as such MIME-related RFCs as :rfc:`2045`, :rfc:`2046`, :rfc:`2047`, :"
"rfc:`2183`, and :rfc:`2231`."
msgstr ""
":mod:`email` 包是一個用於管理電子郵件的庫。它專門*不*設計用於向 SMTP "
"(:rfc:`2821`)、NNTP 或其他伺服器發送任何電子郵件消息；這些是模組的功能，例如 "
":mod:`smtplib` 和 :mod:`nntplib`。 :mod:`email` 包嘗試盡可能符合 RFC，支援 "
":rfc:`5322` 和 :rfc:`6532`，以及 :rfc:`2045` 等與 MIME 相關的 RFC： "
"rfc:`2046`、:rfc:`2047`、:rfc:`2183` 和 :rfc:`2231`。"

#: ../../library/email.rst:23
#, fuzzy
msgid ""
"The overall structure of the email package can be divided into three major "
"components, plus a fourth component that controls the behavior of the other "
"components."
msgstr "電子郵件包的總體結構可以分為三個主要組件，以及控制其他組件行為的第四個組件。"

#: ../../library/email.rst:27
#, fuzzy
msgid ""
"The central component of the package is an \"object model\" that represents "
"email messages.  An application interacts with the package primarily through "
"the object model interface defined in the :mod:`~email.message` sub-module.  "
"The application can use this API to ask questions about an existing email, "
"to construct a new email, or to add or remove email subcomponents that "
"themselves use the same object model interface.  That is, following the "
"nature of email messages and their MIME subcomponents, the email object "
"model is a tree structure of objects that all provide the :class:`~email."
"message.EmailMessage` API."
msgstr ""
"包的核心組件是表示電子郵件消息的“對像模型”。應用程式主要通過 :mod:`~email."
"message` 子模組中定義的對像模型介面與包進行交互。應用程式可以使用此 API 詢問"
"有關現有電子郵件的問題、構建新電子郵件或新增或刪除本身使用相同對像模型介面的"
"電子郵件子組件。也就是說，根據電子郵件及其 MIME 子組件的性質，電子郵件對像模"
"型是一個物件的樹結構，所有對像都提供 :class:`~email.message.EmailMessage` "
"API。"

#: ../../library/email.rst:37
#, fuzzy
msgid ""
"The other two major components of the package are the :mod:`~email.parser` "
"and the :mod:`~email.generator`.  The parser takes the serialized version of "
"an email message (a stream of bytes) and converts it into a tree of :class:"
"`~email.message.EmailMessage` objects.  The generator takes an :class:"
"`~email.message.EmailMessage` and turns it back into a serialized byte "
"stream.  (The parser and generator also handle streams of text characters, "
"but this usage is discouraged as it is too easy to end up with messages that "
"are not valid in one way or another.)"
msgstr ""
"該軟件包的另外兩個主要組件是 :mod:`~email.parser` 和 :mod:`~email.generator`。"
"解析器獲取電子郵件消息的序列化版本（位元組流）並將其轉換為 :class:`~email."
"message.EmailMessage` 物件的樹。生成器採用 :class:`~email.message."
"EmailMessage` 並將其轉換回序列化位元組流。 （解析器和生成器也處理文本字元流，"
"但不鼓勵這種用法，因為很容易以某種方式以無效消息結束。）"

#: ../../library/email.rst:46
#, fuzzy
msgid ""
"The control component is the :mod:`~email.policy` module.  Every :class:"
"`~email.message.EmailMessage`, every :mod:`~email.generator`, and every :mod:"
"`~email.parser` has an associated :mod:`~email.policy` object that controls "
"its behavior.  Usually an application only needs to specify the policy when "
"an :class:`~email.message.EmailMessage` is created, either by directly "
"instantiating an :class:`~email.message.EmailMessage`  to create a new "
"email, or by parsing an input stream using a :mod:`~email.parser`.  But the "
"policy can be changed when the message is serialized using a :mod:`~email."
"generator`. This allows, for example, a generic email message to be parsed "
"from disk, but to serialize it using standard SMTP settings when sending it "
"to an email server."
msgstr ""
"控制組件是 :mod:`~email.policy` 模組。每個 :class:`~email.message."
"EmailMessage`、每個 :mod:`~email.generator` 和每個 :mod:`~email.parser` "
"都有一個關聯的 :mod:`~email.policy` 物件來控制它的行為。通常，"
"應用程式只需要在建立 :class:`~email.message.EmailMessage` 時指定策略，"
"通過直接實例化 :class:`~email.message.EmailMessage` 來建立新電子郵件，"
"或者通過解析使用 :mod:`~email.parser` 的輸入流。但是當使用 :mod:`~email."
"generator` "
"序列化消息時，可以更改策略。例如，這允許從磁盤解析通用電子郵件消息，"
"但在將其發送到電子郵件伺服器時使用標準 SMTP 設定對其進行序列化。"

#: ../../library/email.rst:58
#, fuzzy
msgid ""
"The email package does its best to hide the details of the various governing "
"RFCs from the application.  Conceptually the application should be able to "
"treat the email message as a structured tree of unicode text and binary "
"attachments, without having to worry about how these are represented when "
"serialized.  In practice, however, it is often necessary to be aware of at "
"least some of the rules governing MIME messages and their structure, "
"specifically the names and nature of the MIME \"content types\" and how they "
"identify multipart documents.  For the most part this knowledge should only "
"be required for more complex applications, and even then it should only be "
"the high level structure in question, and not the details of how those "
"structures are represented.  Since MIME content types are used widely in "
"modern internet software (not just email), this will be a familiar concept "
"to many programmers."
msgstr ""
"電子郵件包盡力向應用程式隱藏各種管理 RFC 的詳細資訊。從概念上講，"
"應用程式應該能夠將電子郵件消息視為 unicode 文本和二進位附件的結構化樹，而不必"
"擔心在序列化時如何表示它們。然而，在實踐中，通常有必要至少了解一些管理 MIME "
"消息及其結構的規則，特別是 MIME“內容型別”的名稱和性質以及它們如何識別多部分文"
"檔。在大多數情況下，只有更複雜的應用程式才需要這些知識，即使那樣，它也應該只"
"是所討論的高階結構，而不是這些結構如何表示的細節。由於 MIME "
"內容型別廣泛用於現代 Internet "
"軟件（不僅僅是電子郵件），因此這對許多程式員來說是一個熟悉的概念。"

#: ../../library/email.rst:71
#, fuzzy
msgid ""
"The following sections describe the functionality of the :mod:`email` "
"package. We start with the :mod:`~email.message` object model, which is the "
"primary interface an application will use, and follow that with the :mod:"
"`~email.parser` and :mod:`~email.generator` components.  Then we cover the :"
"mod:`~email.policy` controls, which completes the treatment of the main "
"components of the library."
msgstr ""
"以下部分描述了 :mod:`email` 包的功能。我們從 :mod:`~email.message` "
"對像模型開始，這是應用程式將使用的主要介面，然後是 :mod:`~email.parser` 和 "
":mod:`~email.generator`成分。然後我們覆蓋 :mod:`~email.policy` "
"控件，它完成了庫主要組件的處理。"

#: ../../library/email.rst:78
#, fuzzy
msgid ""
"The next three sections cover the exceptions the package may raise and the "
"defects (non-compliance with the RFCs) that the :mod:`~email.parser` may "
"detect.  Then we cover the :mod:`~email.headerregistry` and the :mod:`~email."
"contentmanager` sub-components, which provide tools for doing more detailed "
"manipulation of headers and payloads, respectively.  Both of these "
"components contain features relevant to consuming and producing non-trivial "
"messages, but also document their extensibility APIs, which will be of "
"interest to advanced applications."
msgstr ""
"接下來的三個部分涵蓋了包可能引發的例外以及 :mod:`~email.parser` "
"可能檢測到的缺陷（不符合 RFC）。然後我們介紹 :mod:`~email.headerregistry` 和 "
":mod:`~email.contentmanager` 子組件，它們分別提供用於對標頭和有效負載進行更詳"
"細操作的工具。這兩個組件都包含與使用和生成重要消息相關的功能，"
"而且還記錄了它們的可擴充性 API，這將對高階應用程式感興趣。"

#: ../../library/email.rst:87
#, fuzzy
msgid ""
"Following those is a set of examples of using the fundamental parts of the "
"APIs covered in the preceding sections."
msgstr "在這些之後是一組使用前面部分中介紹的 API 的基本部分的示例。"

#: ../../library/email.rst:90
#, fuzzy
msgid ""
"The foregoing represent the modern (unicode friendly) API of the email "
"package. The remaining sections, starting with the :class:`~email.message."
"Message` class, cover the legacy :data:`~email.policy.compat32` API that "
"deals much more directly with the details of how email messages are "
"represented.  The :data:`~email.policy.compat32` API does *not* hide the "
"details of the RFCs from the application, but for applications that need to "
"operate at that level, they can be useful tools.  This documentation is also "
"relevant for applications that are still using the :mod:`~email.policy."
"compat32` API for backward compatibility reasons."
msgstr ""
"上述內容代表了電子郵件包的現代（unicode 友好）API。其餘部分，從 "
":class:`~email.message.Message` 類開始，涵蓋遺留的 :data:`~email.policy."
"compat32` API，它更直接地處理如何表示電子郵件消息的細節。 :data:`~email."
"policy.compat32` API *不會*向應用程式隱藏 RFC "
"的詳細資訊，但對於需要在該級別運行的應用程式，它們可能是有用的工具。"
"本文檔還與出於向後相容性原因仍在使用 :mod:`~email.policy.compat32` API "
"的應用程式相關。"

#: ../../library/email.rst:100
#, fuzzy
msgid ""
"Docs reorganized and rewritten to promote the new :class:`~email.message."
"EmailMessage`/:class:`~email.policy.EmailPolicy` API."
msgstr ""
"重新組織和重寫文檔以推廣新的 :class:`~email.message."
"EmailMessage`/:class:`~email.policy.EmailPolicy` API。"

#: ../../library/email.rst:105
#, fuzzy
msgid "Contents of the :mod:`email` package documentation:"
msgstr ":mod:`email` 包文檔的內容："

#: ../../library/email.rst:120
#, fuzzy
msgid "Legacy API:"
msgstr "遺留 API："

#: ../../library/email.rst:136
msgid "Module :mod:`smtplib`"
msgstr ":mod:`smtplib` 模組"

#: ../../library/email.rst:136
#, fuzzy
msgid "SMTP (Simple Mail Transport Protocol) client"
msgstr "SMTP（簡單郵件傳輸協定）客戶端"

#: ../../library/email.rst:139
msgid "Module :mod:`poplib`"
msgstr ":mod:`poplib` 模組"

#: ../../library/email.rst:139
#, fuzzy
msgid "POP (Post Office Protocol) client"
msgstr "POP（郵局協定）客戶端"

#: ../../library/email.rst:142
msgid "Module :mod:`imaplib`"
msgstr ":mod:`imaplib` 模組"

#: ../../library/email.rst:142
#, fuzzy
msgid "IMAP (Internet Message Access Protocol) client"
msgstr "IMAP（網際網路消息訪問協定）客戶端"

#: ../../library/email.rst:145
msgid "Module :mod:`nntplib`"
msgstr ":mod:`nntplib` 模組"

#: ../../library/email.rst:145
#, fuzzy
msgid "NNTP (Net News Transport Protocol) client"
msgstr "NNTP（網絡新聞傳輸協定）客戶端"

#: ../../library/email.rst:149
msgid "Module :mod:`mailbox`"
msgstr ":mod:`mailbox` 模組"

#: ../../library/email.rst:148
#, fuzzy
msgid ""
"Tools for creating, reading, and managing collections of messages on disk "
"using a variety standard formats."
msgstr "使用各種標準格式在磁盤上建立、讀取和管理消息集合的工具。"

#: ../../library/email.rst:151
msgid "Module :mod:`smtpd`"
msgstr ":mod:`smtpd` 模組"

#: ../../library/email.rst:152
#, fuzzy
msgid "SMTP server framework (primarily useful for testing)"
msgstr "SMTP 伺服器框架（主要用於測試）"
