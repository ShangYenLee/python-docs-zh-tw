# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-24 00:16+0000\n"
"PO-Revision-Date: 2018-05-23 16:14+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/types.rst:2
msgid ":mod:`types` --- Dynamic type creation and names for built-in types"
msgstr ":mod:`types` --- 內建型別的動態型別建立與名稱"

#: ../../library/types.rst:7
msgid "**Source code:** :source:`Lib/types.py`"
msgstr "**原始碼：**\\ :source:`Lib/types.py`"

#: ../../library/types.rst:11
#, fuzzy
msgid ""
"This module defines utility functions to assist in dynamic creation of new "
"types."
msgstr "該模組定義實用函式以協助動態建立新型別。"

#: ../../library/types.rst:14
#, fuzzy
msgid ""
"It also defines names for some object types that are used by the standard "
"Python interpreter, but not exposed as builtins like :class:`int` or :class:"
"`str` are."
msgstr ""
"它還為標準 Python 直譯器使用的某些物件型別定義了名稱，但沒有像 :class:`int` "
"或 :class:`str` 這樣的內建函式公開。"

#: ../../library/types.rst:18
#, fuzzy
msgid ""
"Finally, it provides some additional type-related utility classes and "
"functions that are not fundamental enough to be builtins."
msgstr "最後，它提供了一些額外的與型別相關的實用程式類和函式，這些類和函式的基礎不足"
"以成為內建函式。"

#: ../../library/types.rst:23
#, fuzzy
msgid "Dynamic Type Creation"
msgstr "動態型別建立"

#: ../../library/types.rst:27
#, fuzzy
msgid "Creates a class object dynamically using the appropriate metaclass."
msgstr "使用適當的元類動態建立類物件。"

#: ../../library/types.rst:29
#, fuzzy
msgid ""
"The first three arguments are the components that make up a class definition "
"header: the class name, the base classes (in order), the keyword arguments "
"(such as ``metaclass``)."
msgstr "前三個參數是構成類定義頭的組件：類名、基底類別（按順序）、關鍵字參數（例如“元"
"類”）。"

#: ../../library/types.rst:33
#, fuzzy
msgid ""
"The *exec_body* argument is a callback that is used to populate the freshly "
"created class namespace. It should accept the class namespace as its sole "
"argument and update the namespace directly with the class contents. If no "
"callback is provided, it has the same effect as passing in ``lambda ns: "
"None``."
msgstr ""
"*exec_body* 參數是一個回呼，用於填充新建立的類命名空間。它應該接受類命名空間"
"作為其唯一參數，並直接使用類內容更新命名空間。如果沒有提供回呼，它與傳入 ``"
"lambda ns: None`` 具有相同的效果。"

#: ../../library/types.rst:43
#, fuzzy
msgid "Calculates the appropriate metaclass and creates the class namespace."
msgstr "計算適當的元類並建立類命名空間。"

#: ../../library/types.rst:45
#, fuzzy
msgid ""
"The arguments are the components that make up a class definition header: the "
"class name, the base classes (in order) and the keyword arguments (such as "
"``metaclass``)."
msgstr "參數是構成類定義頭的組件：類名、基底類別（按順序）和關鍵字參數（例如“元類”）"
"。"

#: ../../library/types.rst:49
#, fuzzy
msgid "The return value is a 3-tuple: ``metaclass, namespace, kwds``"
msgstr "回傳值是一個 3 元組：``元類、命名空間、kwds``"

#: ../../library/types.rst:51
#, fuzzy
msgid ""
"*metaclass* is the appropriate metaclass, *namespace* is the prepared class "
"namespace and *kwds* is an updated copy of the passed in *kwds* argument "
"with any ``'metaclass'`` entry removed. If no *kwds* argument is passed in, "
"this will be an empty dict."
msgstr ""
"*metaclass* 是適當的元類，*namespace* 是準備好的類命名空間，*kwds* 是傳入的 "
"*kwds* 參數的更新副本，刪除了任何 ``'metaclass'`` 條目。如果沒有傳入 *kwds* "
"參數，這將是一個空字典。"

#: ../../library/types.rst:60
#, fuzzy
msgid ""
"The default value for the ``namespace`` element of the returned tuple has "
"changed.  Now an insertion-order-preserving mapping is used when the "
"metaclass does not have a ``__prepare__`` method."
msgstr "回傳元組的 ``namespace`` 元素的預設值已更改。現在，當元類沒有 __prepare__ "
"方法時，將使用保留插入順序的映射。"

#: ../../library/types.rst:67
msgid ":ref:`metaclasses`"
msgstr ":ref:`metaclasses`"

#: ../../library/types.rst:67
#, fuzzy
msgid "Full details of the class creation process supported by these functions"
msgstr "這些函式支援的類建立過程的完整細節"

#: ../../library/types.rst:69
#, fuzzy
msgid ":pep:`3115` - Metaclasses in Python 3000"
msgstr ":pep:`3115` - Python 3000 中的元類"

#: ../../library/types.rst:70
#, fuzzy
msgid "Introduced the ``__prepare__`` namespace hook"
msgstr "引入了``__prepare__`` 命名空間鉤子"

#: ../../library/types.rst:74
#, fuzzy
msgid "Resolve MRO entries dynamically as specified by :pep:`560`."
msgstr "按照 :pep:`560` 的指定動態解析 MRO 條目。"

#: ../../library/types.rst:76
#, fuzzy
msgid ""
"This function looks for items in *bases* that are not instances of :class:"
"`type`, and returns a tuple where each such object that has an :meth:"
"`~object.__mro_entries__` method is replaced with an unpacked result of "
"calling this method.  If a *bases* item is an instance of :class:`type`, or "
"it doesn't have an :meth:`!__mro_entries__` method, then it is included in "
"the return tuple unchanged."
msgstr ""
"此函式在 *bases* 中查找不是 :class:`type` 實例的項目，並回傳一個元組，"
"其中每個具有 :meth:`~object.__mro_entries__` "
"方法的此類物件都被呼叫的解壓縮結果替換這個方法。如果 *bases* 項是 "
":class:`type` 的實例，或者它沒有 :meth:`!__mro_entries__` "
"方法，那麼它會原封不動地包含在回傳元組中。"

#: ../../library/types.rst:87
#, fuzzy
msgid ":pep:`560` - Core support for typing module and generic types"
msgstr ":pep:`560` - 對輸入模組和通用型別的核心支援"

#: ../../library/types.rst:91
#, fuzzy
msgid "Standard Interpreter Types"
msgstr "標準口譯員型別"

#: ../../library/types.rst:93
#, fuzzy
msgid ""
"This module provides names for many of the types that are required to "
"implement a Python interpreter. It deliberately avoids including some of the "
"types that arise only incidentally during processing such as the "
"``listiterator`` type."
msgstr ""
"該模組為實作 Python 直譯器所需的許多型別提供了名稱。它有意避免包含一些僅在處"
"理過程中偶然出現的型別，例如 ``listiterator`` 型別。"

#: ../../library/types.rst:98
#, fuzzy
msgid ""
"Typical use of these names is for :func:`isinstance` or :func:`issubclass` "
"checks."
msgstr "這些名稱的典型用途是用於 :func:`isinstance` 或 :func:`issubclass` 檢查。"

#: ../../library/types.rst:102
#, fuzzy
msgid ""
"If you instantiate any of these types, note that signatures may vary between "
"Python versions."
msgstr "如果您實例化這些型別中的任何一個，請注意簽名可能因 Python 版本而異。"

#: ../../library/types.rst:104
#, fuzzy
msgid "Standard names are defined for the following types:"
msgstr "為以下型別定義了標準名稱："

#: ../../library/types.rst:108
msgid "The type of :data:`None`."
msgstr ":data:`None` 的型別。"

#: ../../library/types.rst:116
#, fuzzy
msgid ""
"The type of user-defined functions and functions created by :keyword:"
"`lambda`  expressions."
msgstr "使用者定義的函式和由 lambda 表達式建立的函式的型別。"

#: ../../library/types.rst:119
msgid ""
"Raises an :ref:`auditing event <auditing>` ``function.__new__`` with "
"argument ``code``."
msgstr ""
"引發一個附帶引數 ``code`` 的\\ :ref:`稽核事件 <auditing>` ``function.__new__``。"

#: ../../library/types.rst:121
#, fuzzy
msgid ""
"The audit event only occurs for direct instantiation of function objects, "
"and is not raised for normal compilation."
msgstr "審核事件僅在函式物件的直接實例化時發生，不會在正常編譯時引發。"

#: ../../library/types.rst:127
#, fuzzy
msgid ""
"The type of :term:`generator`-iterator objects, created by generator "
"functions."
msgstr "生成器函式建立的 :term:`generator`-iterator 物件的型別。"

#: ../../library/types.rst:133
#, fuzzy
msgid ""
"The type of :term:`coroutine` objects, created by :keyword:`async def` "
"functions."
msgstr ":term:`coroutine` 物件的型別，由 :keyword:`async def` 函式建立。"

#: ../../library/types.rst:141
#, fuzzy
msgid ""
"The type of :term:`asynchronous generator`-iterator objects, created by "
"asynchronous generator functions."
msgstr ":term:`asynchronous generator`-iterator 物件的型別，由非同步生成器函式建立。"

#: ../../library/types.rst:151
#, fuzzy
msgid "The type for code objects such as returned by :func:`compile`."
msgstr "程式碼物件的型別，例如 :func:`compile` 回傳的型別。"

#: ../../library/types.rst:153
msgid ""
"Raises an :ref:`auditing event <auditing>` ``code.__new__`` with arguments "
"``code``, ``filename``, ``name``, ``argcount``, ``posonlyargcount``, "
"``kwonlyargcount``, ``nlocals``, ``stacksize``, ``flags``."
msgstr ""
"引發一個附帶引數 ``code``、``filename``、``name``、``argcount``、``posonlyargcount``、"
"``kwonlyargcount``、``nlocals``、``stacksize``、``flags`` 的\\ :ref:`稽核事件 <auditing>` ``code.__new__``。"

#: ../../library/types.rst:155
#, fuzzy
msgid ""
"Note that the audited arguments may not match the names or positions "
"required by the initializer.  The audit event only occurs for direct "
"instantiation of code objects, and is not raised for normal compilation."
msgstr "請注意，審核的參數可能與初始化程式所需的名稱或位置不匹配。審核事件僅在程式碼"
"物件的直接實例化時發生，不會在正常編譯時引發。"

#: ../../library/types.rst:161
#, fuzzy
msgid ""
"Return a copy of the code object with new values for the specified fields."
msgstr "回傳程式碼物件的副本，其中包含指定欄位的新值。"

#: ../../library/types.rst:167
#, fuzzy
msgid ""
"The type for cell objects: such objects are used as containers for a "
"function's free variables."
msgstr "單元物件的型別：此類物件用作函式自由變數的容器。"

#: ../../library/types.rst:175
#, fuzzy
msgid "The type of methods of user-defined class instances."
msgstr "使用者定義類實例的方法型別。"

#: ../../library/types.rst:181
#, fuzzy
msgid ""
"The type of built-in functions like :func:`len` or :func:`sys.exit`, and "
"methods of built-in classes.  (Here, the term \"built-in\" means \"written "
"in C\".)"
msgstr ""
"內建函式的型別，如 :func:`len` 或 :func:`sys.exit`，以及內建類的方法。 "
"（在這裡，術語“內建”意味著“用 C 語言編寫”。）"

#: ../../library/types.rst:188
#, fuzzy
msgid ""
"The type of methods of some built-in data types and base classes such as :"
"meth:`object.__init__` or :meth:`object.__lt__`."
msgstr "一些內建資料型別和基底類別的方法型別，例如 :meth:`object.__init__` 或 "
":meth:`object.__lt__`。"

#: ../../library/types.rst:196
#, fuzzy
msgid ""
"The type of *bound* methods of some built-in data types and base classes. "
"For example it is the type of :code:`object().__str__`."
msgstr "某些內建資料型別和基底類別的*綁定*方法的型別。例如，它是 :code:`object()."
"__str__` 的型別。"

#: ../../library/types.rst:204
msgid "The type of :data:`NotImplemented`."
msgstr ":data:`NotImplemented` 的型別。"

#: ../../library/types.rst:211
#, fuzzy
msgid ""
"The type of methods of some built-in data types such as :meth:`str.join`."
msgstr "某些內建資料型別的方法型別，例如 :meth:`str.join`。"

#: ../../library/types.rst:218
#, fuzzy
msgid ""
"The type of *unbound* class methods of some built-in data types such as "
"``dict.__dict__['fromkeys']``."
msgstr "某些內建資料型別的 *unbound* 類別方法的型別，例如 ``dict."
"__dict__['fromkeys']``。"

#: ../../library/types.rst:226
#, fuzzy
msgid ""
"The type of :term:`modules <module>`. The constructor takes the name of the "
"module to be created and optionally its :term:`docstring`."
msgstr ":term:`modules <module>` 的型別。構造函式採用要建立的模組的名稱和可選的 "
":term:`docstring`。"

#: ../../library/types.rst:230
#, fuzzy
msgid ""
"Use :func:`importlib.util.module_from_spec` to create a new module if you "
"wish to set the various import-controlled attributes."
msgstr "如果您希望設定各種導入控制屬性，請使用 :func:`importlib.util."
"module_from_spec` 建立一個新模組。"

#: ../../library/types.rst:235
#, fuzzy
msgid "The :term:`docstring` of the module. Defaults to ``None``."
msgstr "模組的 :term:`docstring`。預設為 ``None`` 。"

#: ../../library/types.rst:239
#, fuzzy
msgid "The :term:`loader` which loaded the module. Defaults to ``None``."
msgstr "加載模組的 :term:`loader`。預設為 ``None`` 。"

#: ../../library/types.rst:241
#, fuzzy
msgid ""
"This attribute is to match :attr:`importlib.machinery.ModuleSpec.loader` as "
"stored in the :attr:`__spec__` object."
msgstr "此屬性與儲存在 __spec__ 物件中的 importlib.machinery.ModuleSpec.loader "
"相匹配。"

#: ../../library/types.rst:245
#, fuzzy
msgid ""
"A future version of Python may stop setting this attribute by default. To "
"guard against this potential change, preferably read from the :attr:"
"`__spec__` attribute instead or use ``getattr(module, \"__loader__\", "
"None)`` if you explicitly need to use this attribute."
msgstr ""
"預設情況下，未來版本的 Python 可能會停止設定此屬性。為了防止這種潛在的變化，"
"最好從 :attr:`__spec__` 屬性中讀取，或者如果您明確需要使用此屬性，則使用 "
"``getattr(module, \"__loader__\", None)``。"

#: ../../library/types.rst:251 ../../library/types.rst:276
#, fuzzy
msgid "Defaults to ``None``. Previously the attribute was optional."
msgstr "預設為 ``None`` 。以前該屬性是可選的。"

#: ../../library/types.rst:256
#, fuzzy
msgid ""
"The name of the module. Expected to match :attr:`importlib.machinery."
"ModuleSpec.name`."
msgstr "模組的名稱。預期匹配 :attr:`importlib.machinery.ModuleSpec.name`。"

#: ../../library/types.rst:261
#, fuzzy
msgid ""
"Which :term:`package` a module belongs to. If the module is top-level (i.e. "
"not a part of any specific package) then the attribute should be set to "
"``''``, else it should be set to the name of the package (which can be :attr:"
"`__name__` if the module is a package itself). Defaults to ``None``."
msgstr ""
"模組屬於哪個 :term:`package`。如果模組是頂級模組（即不是任何特定包的一部分）"
"，則該屬性應設定為 ``''``，否則應設定為包的名稱（可以是 :attr:` __name__` "
"如果模組本身是一個包）。預設為 ``None`` 。"

#: ../../library/types.rst:266
#, fuzzy
msgid ""
"This attribute is to match :attr:`importlib.machinery.ModuleSpec.parent` as "
"stored in the :attr:`__spec__` object."
msgstr "此屬性與儲存在 __spec__ 物件中的 importlib.machinery.ModuleSpec.parent "
"相匹配。"

#: ../../library/types.rst:270
#, fuzzy
msgid ""
"A future version of Python may stop setting this attribute by default. To "
"guard against this potential change, preferably read from the :attr:"
"`__spec__` attribute instead or use ``getattr(module, \"__package__\", "
"None)`` if you explicitly need to use this attribute."
msgstr ""
"預設情況下，未來版本的 Python "
"可能會停止設定此屬性。為了防止這種潛在的變化，最好從 :attr:`__spec__` "
"屬性中讀取，或者如果您明確需要使用此屬性，則使用``getattr(module, "
"\"__package__\", None)``。"

#: ../../library/types.rst:281
#, fuzzy
msgid ""
"A record of the module's import-system-related state. Expected to be an "
"instance of :class:`importlib.machinery.ModuleSpec`."
msgstr "模組導入系統相關狀態的記錄。應該是 importlib.machinery.ModuleSpec "
"的一個實例。"

#: ../../library/types.rst:289
#, fuzzy
msgid "The type of :data:`Ellipsis`."
msgstr ":data:`Ellipsis` 的型別。"

#: ../../library/types.rst:295
#, fuzzy
msgid ""
"The type of :ref:`parameterized generics <types-genericalias>` such as "
"``list[int]``."
msgstr ":ref:`參數化泛型 <types-genericalias>` 的型別，例如 ``list[int]``。"

#: ../../library/types.rst:298
#, fuzzy
msgid ""
"``t_origin`` should be a non-parameterized generic class, such as ``list``, "
"``tuple`` or ``dict``.  ``t_args`` should be a :class:`tuple` (possibly of "
"length 1) of types which parameterize ``t_origin``::"
msgstr ""
"``t_origin`` 應該是一個非參數化的泛型類，例如 ``list``、``tuple`` 或 "
"``dict``。 ``t_args`` 應該是參數化 ``t_origin`` 型別的元組（可能長度為 1）::"

#: ../../library/types.rst:311
#, fuzzy
msgid "This type can now be subclassed."
msgstr "這種型別現在可以被子類別化。"

#: ../../library/types.rst:317
#, fuzzy
msgid "The type of :ref:`union type expressions<types-union>`."
msgstr ":ref:`union type expressions<types-union>` 的型別。"

#: ../../library/types.rst:323
#, fuzzy
msgid ""
"The type of traceback objects such as found in ``sys.exception()."
"__traceback__``."
msgstr "追溯物件的型別，例如在 sys.exception().__traceback__ 中找到的。"

#: ../../library/types.rst:325
#, fuzzy
msgid ""
"See :ref:`the language reference <traceback-objects>` for details of the "
"available attributes and operations, and guidance on creating tracebacks "
"dynamically."
msgstr "請參閱 :ref:`語言參考 <traceback-objects>` "
"了解可用屬性和操作的詳細資訊，以及動態建立回溯的指南。"

#: ../../library/types.rst:332
#, fuzzy
msgid ""
"The type of frame objects such as found in ``tb.tb_frame`` if ``tb`` is a "
"traceback object."
msgstr "如果 ``tb`` 是回溯物件，則框架物件的型別如在 ``tb.tb_frame`` 中找到的。"

#: ../../library/types.rst:335
#, fuzzy
msgid ""
"See :ref:`the language reference <frame-objects>` for details of the "
"available attributes and operations."
msgstr "有關可用屬性和操作的詳細資訊，請參閱 :ref:`語言參考 <frame-objects>`。"

#: ../../library/types.rst:341
#, fuzzy
msgid ""
"The type of objects defined in extension modules with ``PyGetSetDef``, such "
"as ``FrameType.f_locals`` or ``array.array.typecode``.  This type is used as "
"descriptor for object attributes; it has the same purpose as the :class:"
"`property` type, but for classes defined in extension modules."
msgstr ""
"使用 PyGetSetDef 擴充模組中定義的物件型別，例如 FrameType.f_locals 或 array."
"array.typecode。此型別用作物件屬性的描述器；它與 :class:`property` "
"型別具有相同的用途，但用於擴充模組中定義的類。"

#: ../../library/types.rst:349
#, fuzzy
msgid ""
"The type of objects defined in extension modules with ``PyMemberDef``, such "
"as ``datetime.timedelta.days``.  This type is used as descriptor for simple "
"C data members which use standard conversion functions; it has the same "
"purpose as the :class:`property` type, but for classes defined in extension "
"modules."
msgstr ""
"使用 PyMemberDef 擴充模組中定義的物件型別，例如 datetime.timedelta.days。"
"此型別用作使用標準轉換函式的簡單 C 資料成員的描述器；它與 :class:`property` "
"型別具有相同的用途，但用於擴充模組中定義的類。"

#: ../../library/types.rst:356
#, fuzzy
msgid ""
"In other implementations of Python, this type may be identical to "
"``GetSetDescriptorType``."
msgstr "在 Python 的其他實作中，此型別可能與 ``GetSetDescriptorType`` 相同。"

#: ../../library/types.rst:361
#, fuzzy
msgid ""
"Read-only proxy of a mapping. It provides a dynamic view on the mapping's "
"entries, which means that when the mapping changes, the view reflects these "
"changes."
msgstr "映射的只讀代理。它提供映射條目的動態視圖，這意味著當映射發生變化時，視圖會反"
"映這些變化。"

#: ../../library/types.rst:369
#, fuzzy
msgid ""
"Updated to support the new union (``|``) operator from :pep:`584`, which "
"simply delegates to the underlying mapping."
msgstr "更新以支援來自 :pep:`584` 的新聯合 (``|``) 運算符，它只是委託給底層映射。"

#: ../../library/types.rst:374
#, fuzzy
msgid ""
"Return ``True`` if the underlying mapping has a key *key*, else ``False``."
msgstr "如果底層映射有鍵 *key*，則回傳 ``True``，否則回傳 ``False``。"

#: ../../library/types.rst:379
#, fuzzy
msgid ""
"Return the item of the underlying mapping with key *key*.  Raises a :exc:"
"`KeyError` if *key* is not in the underlying mapping."
msgstr "回傳具有鍵 *key* 的底層映射項。如果 *key* 不在底層映射中，則引發 "
":exc:`KeyError`。"

#: ../../library/types.rst:384
#, fuzzy
msgid ""
"Return an iterator over the keys of the underlying mapping.  This is a "
"shortcut for ``iter(proxy.keys())``."
msgstr "在底層映射的鍵上回傳一個疊代器。這是 ``iter(proxy.keys())`` 的快捷方式。"

#: ../../library/types.rst:389
#, fuzzy
msgid "Return the number of items in the underlying mapping."
msgstr "回傳基礎映射中的項目數。"

#: ../../library/types.rst:393
#, fuzzy
msgid "Return a shallow copy of the underlying mapping."
msgstr "回傳底層映射的淺表副本。"

#: ../../library/types.rst:397
#, fuzzy
msgid ""
"Return the value for *key* if *key* is in the underlying mapping, else "
"*default*.  If *default* is not given, it defaults to ``None``, so that this "
"method never raises a :exc:`KeyError`."
msgstr ""
"如果 *key* 在底層映射中，則回傳 *key* 的值，否則回傳 *default*。如果沒有給出 "
"*default*，它預設為 ``None``，因此該方法永遠不會引發 :exc:`KeyError`。"

#: ../../library/types.rst:403
#, fuzzy
msgid ""
"Return a new view of the underlying mapping's items (``(key, value)`` pairs)."
msgstr "回傳底層映射項的新視圖（``（鍵，值）`` 對）。"

#: ../../library/types.rst:408
#, fuzzy
msgid "Return a new view of the underlying mapping's keys."
msgstr "回傳底層映射鍵的新視圖。"

#: ../../library/types.rst:412
#, fuzzy
msgid "Return a new view of the underlying mapping's values."
msgstr "回傳底層映射值的新視圖。"

#: ../../library/types.rst:416
#, fuzzy
msgid "Return a reverse iterator over the keys of the underlying mapping."
msgstr "在底層映射的鍵上回傳一個反向疊代器。"

#: ../../library/types.rst:422
#, fuzzy
msgid "Additional Utility Classes and Functions"
msgstr "其他實用程式類和函式"

#: ../../library/types.rst:426
#, fuzzy
msgid ""
"A simple :class:`object` subclass that provides attribute access to its "
"namespace, as well as a meaningful repr."
msgstr "一個簡單的 :class:`object` 子類別，提供對其命名空間的屬性訪問，以及有意義的 "
"repr。"

#: ../../library/types.rst:429
#, fuzzy
msgid ""
"Unlike :class:`object`, with ``SimpleNamespace`` you can add and remove "
"attributes.  If a ``SimpleNamespace`` object is initialized with keyword "
"arguments, those are directly added to the underlying namespace."
msgstr ""
"與 :class:`object` 不同，使用 ``SimpleNamespace`` 可以新增和刪除屬性。如果使"
"用關鍵字參數初始化 ``SimpleNamespace`` 物件，則這些物件會直接新增到底層命名空間。"

#: ../../library/types.rst:433
msgid "The type is roughly equivalent to the following code::"
msgstr "該型別大致相當於以下程式碼::"

#: ../../library/types.rst:448
#, fuzzy
msgid ""
"``SimpleNamespace`` may be useful as a replacement for ``class NS: pass``. "
"However, for a structured record type use :func:`~collections.namedtuple` "
"instead."
msgstr ""
"``SimpleNamespace`` 可以替代``class NS: pass``。但是，對於結構化記錄型別，"
"請改用 :func:`~collections.namedtuple`。"

#: ../../library/types.rst:454
#, fuzzy
msgid ""
"Attribute order in the repr changed from alphabetical to insertion (like "
"``dict``)."
msgstr "repr 中的屬性順序從字母順序變為插入順序（如 ``dict``）。"

#: ../../library/types.rst:460
#, fuzzy
msgid "Route attribute access on a class to __getattr__."
msgstr "將類的屬性訪問路由到 __getattr__。"

#: ../../library/types.rst:462
#, fuzzy
msgid ""
"This is a descriptor, used to define attributes that act differently when "
"accessed through an instance and through a class.  Instance access remains "
"normal, but access to an attribute through a class will be routed to the "
"class's __getattr__ method; this is done by raising AttributeError."
msgstr ""
"這是一個描述器，用於定義在通過實例和類訪問時行為不同的屬性。實例訪問保持正常"
"，但通過類訪問屬性將被路由到類的 __getattr__ 方法；這是通過引發 "
"AttributeError 來完成的。"

#: ../../library/types.rst:467
#, fuzzy
msgid ""
"This allows one to have properties active on an instance, and have virtual "
"attributes on the class with the same name (see :class:`enum.Enum` for an "
"example)."
msgstr "這允許一個人在一個實例上擁有活動的屬性，並在類上擁有同名的虛擬屬性（參見 "
"enum.Enum 的例子）。"

#: ../../library/types.rst:474
#, fuzzy
msgid "Coroutine Utility Functions"
msgstr "協程實用函式"

#: ../../library/types.rst:478
#, fuzzy
msgid ""
"This function transforms a :term:`generator` function into a :term:"
"`coroutine function` which returns a generator-based coroutine. The "
"generator-based coroutine is still a :term:`generator iterator`, but is also "
"considered to be a :term:`coroutine` object and is :term:`awaitable`.  "
"However, it may not necessarily implement the :meth:`~object.__await__` "
"method."
msgstr ""
"此函式將 :term:`generator` 函式轉換為 :term:`coroutine "
"function`，後者回傳基於生成器的協程。基於生成器的協程仍然是 :term:`generator "
"iterator`，但也被認為是 :term:`coroutine` 物件並且是 "
":term:`awaitable`。但是，它不一定要實作 :meth:`~object.__await__` 方法。"

#: ../../library/types.rst:485
#, fuzzy
msgid "If *gen_func* is a generator function, it will be modified in-place."
msgstr "如果 *gen_func* 是一個生成器函式，它將被就地修改。"

#: ../../library/types.rst:487
#, fuzzy
msgid ""
"If *gen_func* is not a generator function, it will be wrapped. If it returns "
"an instance of :class:`collections.abc.Generator`, the instance will be "
"wrapped in an *awaitable* proxy object.  All other types of objects will be "
"returned as is."
msgstr ""
"如果 *gen_func* 不是生成器函式，它將被包裝。如果它回傳 :class:`collections."
"abc.Generator` 的一個實例，該實例將被包裝在一個 *awaitable* "
"代理物件中。所有其他型別的物件將按原樣回傳。"
