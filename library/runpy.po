# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-16 00:14+0000\n"
"PO-Revision-Date: 2016-11-19 00:33+0000\n"
"Last-Translator: Liang-Bo Wang <me@liang2.tw>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/runpy.rst:2
msgid ":mod:`runpy` --- Locating and executing Python modules"
msgstr ":mod:`runpy` --- 定位和執行 Python 模組"

#: ../../library/runpy.rst:9
msgid "**Source code:** :source:`Lib/runpy.py`"
msgstr "**原始碼：**\\ :source:`Lib/runpy.py`"

#: ../../library/runpy.rst:13
#, fuzzy
msgid ""
"The :mod:`runpy` module is used to locate and run Python modules without "
"importing them first. Its main use is to implement the :option:`-m` command "
"line switch that allows scripts to be located using the Python module "
"namespace rather than the filesystem."
msgstr ""
":mod:`runpy` 模組用於定位和運行 Python 模組，無需先導入它們。"
"它的主要用途是實作 :option:`-m` 命令列開關，允許使用 Python "
"模組命名空間而不是文件系統來定位腳本。"

#: ../../library/runpy.rst:18
#, fuzzy
msgid ""
"Note that this is *not* a sandbox module - all code is executed in the "
"current process, and any side effects (such as cached imports of other "
"modules) will remain in place after the functions have returned."
msgstr "請注意，這 *不是* 沙盒模組 - 所有程式碼都在當前行程中執行，任何副作用（例如其"
"他模組的快取導入）將在函式回傳後保留在原地。"

#: ../../library/runpy.rst:22
#, fuzzy
msgid ""
"Furthermore, any functions and classes defined by the executed code are not "
"guaranteed to work correctly after a :mod:`runpy` function has returned. If "
"that limitation is not acceptable for a given use case, :mod:`importlib` is "
"likely to be a more suitable choice than this module."
msgstr ""
"此外，在 :mod:`runpy` 函式回傳後，不保證由已執行程式碼定義的任何函式和類都能"
"正常工作。如果給定用例不能接受該限制，則 :mod:`importlib` "
"可能是比此模組更合適的選擇。"

#: ../../library/runpy.rst:27
msgid "The :mod:`runpy` module provides two functions:"
msgstr ":mod:`runpy` 模組提供了兩個函式："

#: ../../library/runpy.rst:35
#, fuzzy
msgid ""
"Execute the code of the specified module and return the resulting module "
"globals dictionary. The module's code is first located using the standard "
"import mechanism (refer to :pep:`302` for details) and then executed in a "
"fresh module namespace."
msgstr ""
"執行指定模組的程式碼並回傳生成的模組全局字典。該模組的程式碼首先使用標準導入"
"機制定位（有關詳細資訊，請參閱 :pep:`302`），然後在新的模組命名空間中執行。"

#: ../../library/runpy.rst:40
#, fuzzy
msgid ""
"The *mod_name* argument should be an absolute module name. If the module "
"name refers to a package rather than a normal module, then that package is "
"imported and the ``__main__`` submodule within that package is then executed "
"and the resulting module globals dictionary returned."
msgstr ""
"*mod_name* "
"參數應該是絕對模組名稱。如果模組名稱指的是包而不是普通模組，則導入該包，"
"然後執行該包中的 `__main__`` 子模組，並回傳生成的模組全局字典。"

#: ../../library/runpy.rst:46
#, fuzzy
msgid ""
"The optional dictionary argument *init_globals* may be used to pre-populate "
"the module's globals dictionary before the code is executed. The supplied "
"dictionary will not be modified. If any of the special global variables "
"below are defined in the supplied dictionary, those definitions are "
"overridden by :func:`run_module`."
msgstr ""
"可選的字典參數 *init_globals* 可用於在執行程式碼之前預填充模組的全局字典。提"
"供的詞典不會被修改。如果在提供的字典中定義了以下任何特殊全局變數，"
"則這些定義將被 :func:`run_module` 覆蓋。"

#: ../../library/runpy.rst:52 ../../library/runpy.rst:121
#, fuzzy
msgid ""
"The special global variables ``__name__``, ``__spec__``, ``__file__``, "
"``__cached__``, ``__loader__`` and ``__package__`` are set in the globals "
"dictionary before the module code is executed (Note that this is a minimal "
"set of variables - other variables may be set implicitly as an interpreter "
"implementation detail)."
msgstr ""
"特殊的全局變數``__name__``, ``__spec__``, ``__file__``, ``__cached__``, "
"``__loader__`` 和 ``__package__`` "
"在模組程式碼被呼叫之前被設定在全局字典中已執行（請注意，這是一組最小的變數 - "
"其他變數可能會隱式設定為直譯器實作細節）。"

#: ../../library/runpy.rst:58
#, fuzzy
msgid ""
"``__name__`` is set to *run_name* if this optional argument is not :const:"
"`None`, to ``mod_name + '.__main__'`` if the named module is a package and "
"to the *mod_name* argument otherwise."
msgstr ""
"如果此可選參數不是 :const:`None`，``__name__`` 設定為 "
"*run_name*，如果命名模組是一個包，則設定為``mod_name + '.__main__'``，"
"否則設定為 *mod_name* 參數."

#: ../../library/runpy.rst:62
#, fuzzy
msgid ""
"``__spec__`` will be set appropriately for the *actually* imported module "
"(that is, ``__spec__.name`` will always be *mod_name* or ``mod_name + '."
"__main__``, never *run_name*)."
msgstr ""
"``__spec__`` 將針對*實際*導入的模組進行適當設定（即，``__spec__.name`` "
"將始終是 *mod_name* 或 ``mod_name + '.__main__``，永遠不會是 *run_name*）。"

#: ../../library/runpy.rst:66
#, fuzzy
msgid ""
"``__file__``, ``__cached__``, ``__loader__`` and ``__package__`` are :ref:"
"`set as normal <import-mod-attrs>` based on the module spec."
msgstr ""
"``__file__``、``__cached__``、``__loader__`` 和 ``__package__`` 是 :ref:`"
"根據模組規範設定為正常 <import-mod-attrs>`。"

#: ../../library/runpy.rst:69
#, fuzzy
msgid ""
"If the argument *alter_sys* is supplied and evaluates to :const:`True`, then "
"``sys.argv[0]`` is updated with the value of ``__file__`` and ``sys."
"modules[__name__]`` is updated with a temporary module object for the module "
"being executed. Both ``sys.argv[0]`` and ``sys.modules[__name__]`` are "
"restored to their original values before the function returns."
msgstr ""
"如果參數 *alter_sys* 被提供並評估為 :const:`True`，則 ``sys.argv[0]`` "
"將更新為 ``__file__`` 和 ``sys.modules[__name__]` 的值` "
"更新為正在執行的模組的臨時模組物件。在函式回傳之前，``sys.argv[0]`` 和 ``sys."
"modules[__name__]`` 都恢復到它們的原始值。"

#: ../../library/runpy.rst:75
#, fuzzy
msgid ""
"Note that this manipulation of :mod:`sys` is not thread-safe. Other threads "
"may see the partially initialised module, as well as the altered list of "
"arguments. It is recommended that the :mod:`sys` module be left alone when "
"invoking this function from threaded code."
msgstr ""
"請注意，這種對 :mod:`sys` 的操作不是執行緒安全的。其他執行緒可能會看到部分初"
"始化的模組，以及更改後的參數列表。從執行緒程式碼呼叫此函式時，建議單獨保留 "
":mod:`sys` 模組。"

#: ../../library/runpy.rst:81
#, fuzzy
msgid ""
"The :option:`-m` option offering equivalent functionality from the command "
"line."
msgstr ":option:`-m` 選項從命令列提供等效的功能。"

#: ../../library/runpy.rst:84
#, fuzzy
msgid ""
"Added ability to execute packages by looking for a ``__main__`` submodule."
msgstr "新增了通過查找 ``__main__`` 子模組來執行包的能力。"

#: ../../library/runpy.rst:87
#, fuzzy
msgid "Added ``__cached__`` global variable (see :pep:`3147`)."
msgstr "新增了 ``__cached__`` 全局變數（參見 :pep:`3147`）。"

#: ../../library/runpy.rst:90
#, fuzzy
msgid ""
"Updated to take advantage of the module spec feature added by :pep:`451`. "
"This allows ``__cached__`` to be set correctly for modules run this way, as "
"well as ensuring the real module name is always accessible as ``__spec__."
"name``."
msgstr ""
"已更新以利用 :pep:`451` 新增的模組規範功能。這允許 ``__cached__`` "
"為以這種方式運行的模組正確設定，並確保真正的模組名稱始終可以作為 ``__spec__."
"name`` 訪問。"

#: ../../library/runpy.rst:101
#, fuzzy
msgid ""
"Execute the code at the named filesystem location and return the resulting "
"module globals dictionary. As with a script name supplied to the CPython "
"command line, the supplied path may refer to a Python source file, a "
"compiled bytecode file or a valid sys.path entry containing a ``__main__`` "
"module (e.g. a zipfile containing a top-level ``__main__.py`` file)."
msgstr ""
"在指定的文件系統位置執行程式碼並回傳生成的模組全局字典。與提供給 CPython "
"命令列的腳本名稱一樣，提供的路徑可以引用 Python 源文件、"
"編譯的位元組碼文件或包含 ``__main__`` 模組的有效 sys.path 條目（例如，"
"包含頂級文件的 zip 文件）級``__main__.py`` 文件）。"

#: ../../library/runpy.rst:107
#, fuzzy
msgid ""
"For a simple script, the specified code is simply executed in a fresh module "
"namespace. For a valid sys.path entry (typically a zipfile or directory), "
"the entry is first added to the beginning of ``sys.path``. The function then "
"looks for and executes a :mod:`__main__` module using the updated path. Note "
"that there is no special protection against invoking an existing :mod:"
"`__main__` entry located elsewhere on ``sys.path`` if there is no such "
"module at the specified location."
msgstr ""
"對於一個簡單的腳本，指定的程式碼只是在一個新的模組命名空間中執行。對於有效的 "
"sys.path 條目（通常是 zip 文件或目錄），該條目首先新增到 ``sys.path`` "
"的開頭。然後該函式使用更新後的路徑查找並執行 :mod:`__main__` "
"模組。請注意，如果在指定位置沒有這樣的模組，則沒有針對呼叫位於 ``sys.path`` "
"上其他地方的現有 :mod:`__main__` 條目的特殊保護。"

#: ../../library/runpy.rst:115
#, fuzzy
msgid ""
"The optional dictionary argument *init_globals* may be used to pre-populate "
"the module's globals dictionary before the code is executed. The supplied "
"dictionary will not be modified. If any of the special global variables "
"below are defined in the supplied dictionary, those definitions are "
"overridden by :func:`run_path`."
msgstr ""
"可選的字典參數 *init_globals* 可用於在執行程式碼之前預填充模組的全局字典。提"
"供的詞典不會被修改。如果在提供的字典中定義了以下任何特殊全局變數，"
"則這些定義將被 :func:`run_path` 覆蓋。"

#: ../../library/runpy.rst:127
#, fuzzy
msgid ""
"``__name__`` is set to *run_name* if this optional argument is not :const:"
"`None` and to ``'<run_path>'`` otherwise."
msgstr ""
"``__name__`` 設定為 *run_name* 如果此可選參數不是 :const:`None` 否則設定為 "
"``'<run_path>'``。"

#: ../../library/runpy.rst:130
#, fuzzy
msgid ""
"If the supplied path directly references a script file (whether as source or "
"as precompiled byte code), then ``__file__`` will be set to the supplied "
"path, and ``__spec__``, ``__cached__``, ``__loader__`` and ``__package__`` "
"will all be set to :const:`None`."
msgstr ""
"如果提供的路徑直接引用腳本文件（無論是源程式碼還是預編譯的位元組碼），那麼 "
"``__file__`` 將被設定為提供的路徑，並且 ``__spec__``、``__cached__``、``"
"__loader__ `` 和 ``__package__`` 都將設定為 :const:`None`。"

#: ../../library/runpy.rst:135
#, fuzzy
msgid ""
"If the supplied path is a reference to a valid sys.path entry, then "
"``__spec__`` will be set appropriately for the imported ``__main__`` module "
"(that is, ``__spec__.name`` will always be ``__main__``). ``__file__``, "
"``__cached__``, ``__loader__`` and ``__package__`` will be :ref:`set as "
"normal <import-mod-attrs>` based on the module spec."
msgstr ""
"如果提供的路徑是對有效 sys.path 條目的引用，則 ``__spec__`` 將為導入的 "
"``__main__`` 模組適當設定（即，``__spec__.name`` 將始終為 `` __main__``）。 "
"``__file__``、``__cached__``、``__loader__`` 和 ``__package__`` "
"將根據模組規範設定為正常 <import-mod-attrs>`。"

#: ../../library/runpy.rst:141
#, fuzzy
msgid ""
"A number of alterations are also made to the :mod:`sys` module. Firstly, "
"``sys.path`` may be altered as described above. ``sys.argv[0]`` is updated "
"with the value of ``path_name`` and ``sys.modules[__name__]`` is updated "
"with a temporary module object for the module being executed. All "
"modifications to items in :mod:`sys` are reverted before the function "
"returns."
msgstr ""
"還對 :mod:`sys` 模組進行了一些更改。首先，``sys.path`` 可以如上所述進行更改。"
" ``sys.argv[0]`` 更新為``path_name`` 的值，``sys.modules[__name__]`` "
"更新為正在執行的模組的臨時模組物件。在函式回傳之前，對 :mod:`sys` "
"中項目的所有修改都將被還原。"

#: ../../library/runpy.rst:148
#, fuzzy
msgid ""
"Note that, unlike :func:`run_module`, the alterations made to :mod:`sys` are "
"not optional in this function as these adjustments are essential to allowing "
"the execution of sys.path entries. As the thread-safety limitations still "
"apply, use of this function in threaded code should be either serialised "
"with the import lock or delegated to a separate process."
msgstr ""
"請注意，與 :func:`run_module` 不同，對 :mod:`sys` "
"所做的更改在此函式中不是可選的，因為這些調整對於允許執行 sys.path 條目至關重"
"要。由於執行緒安全限制仍然適用，因此在執行緒程式碼中使用此函式應使用導入鎖序"
"列化或委託給單獨的行程。"

#: ../../library/runpy.rst:155
#, fuzzy
msgid ""
":ref:`using-on-interface-options` for equivalent functionality on the "
"command line (``python path/to/script``)."
msgstr ""
":ref:`using-on-interface-options` 在命令列上實作等效功能（``python path/to/"
"script``）。"

#: ../../library/runpy.rst:160
#, fuzzy
msgid ""
"Updated to take advantage of the module spec feature added by :pep:`451`. "
"This allows ``__cached__`` to be set correctly in the case where "
"``__main__`` is imported from a valid sys.path entry rather than being "
"executed directly."
msgstr ""
"已更新以利用 :pep:`451` 新增的模組規範功能。這允許在從有效的 sys.path "
"條目導入而不是直接執行的 __main__ 的情況下正確設定 __cached__ 。"

#: ../../library/runpy.rst:169
#, fuzzy
msgid ":pep:`338` -- Executing modules as scripts"
msgstr ":pep:`338` -- 將模組作為腳本執行"

#: ../../library/runpy.rst:169 ../../library/runpy.rst:172
#, fuzzy
msgid "PEP written and implemented by Nick Coghlan."
msgstr "PEP 由 Nick Coghlan 編寫和實施。"

#: ../../library/runpy.rst:172
#, fuzzy
msgid ":pep:`366` -- Main module explicit relative imports"
msgstr ":pep:`366` -- 主模組顯式相對導入"

#: ../../library/runpy.rst:175
#, fuzzy
msgid ":pep:`451` -- A ModuleSpec Type for the Import System"
msgstr ":pep:`451` -- 導入系統的 ModuleSpec 型別"

#: ../../library/runpy.rst:175
#, fuzzy
msgid "PEP written and implemented by Eric Snow"
msgstr "PEP 由 Eric Snow 編寫和實施"

#: ../../library/runpy.rst:177
#, fuzzy
msgid ":ref:`using-on-general` - CPython command line details"
msgstr ":ref:`using-on-general` - CPython 命令列細節"

#: ../../library/runpy.rst:179
#, fuzzy
msgid "The :func:`importlib.import_module` function"
msgstr ":func:`importlib.import_module` 函式"
