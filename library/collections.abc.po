# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-15 00:17+0000\n"
"PO-Revision-Date: 2018-05-23 14:41+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/collections.abc.rst:2
msgid ":mod:`collections.abc` --- Abstract Base Classes for Containers"
msgstr ":mod:`collections.abc` --- 容器的抽象基底類別"

#: ../../library/collections.abc.rst:10
#, fuzzy
msgid "Formerly, this module was part of the :mod:`collections` module."
msgstr "以前，這個模組是 :mod:`collections` 模組的一部分。"

#: ../../library/collections.abc.rst:13
msgid "**Source code:** :source:`Lib/_collections_abc.py`"
msgstr "**原始碼：**\\ :source:`Lib/_collections_abc.py`"

#: ../../library/collections.abc.rst:23
#, fuzzy
msgid ""
"This module provides :term:`abstract base classes <abstract base class>` "
"that can be used to test whether a class provides a particular interface; "
"for example, whether it is :term:`hashable` or whether it is a mapping."
msgstr ""
"該模組提供 :term:`抽象基底類別<abstract base "
"class>`，可用於測試類是否提供特定介面；例如，它是否是 :term:`hashable` "
"或者它是否是一個映射。"

#: ../../library/collections.abc.rst:27
#, fuzzy
msgid ""
"An :func:`issubclass` or :func:`isinstance` test for an interface works in "
"one of three ways."
msgstr "介面的 :func:`issubclass` 或 :func:`isinstance` 測試以三種方式之一工作。"

#: ../../library/collections.abc.rst:30
#, fuzzy
msgid ""
"1) A newly written class can inherit directly from one of the abstract base "
"classes.  The class must supply the required abstract methods.  The "
"remaining mixin methods come from inheritance and can be overridden if "
"desired.  Other methods may be added as needed:"
msgstr ""
"1）一個新寫的類可以直接繼承其中一個抽象基底類別。該類必須提供所需的抽象方法。"
"其餘的 mixin 方法來自繼承，如果需要可以覆蓋。可以根據需要新增其他方法："

#: ../../library/collections.abc.rst:50
#, fuzzy
msgid ""
"2) Existing classes and built-in classes can be registered as \"virtual "
"subclasses\" of the ABCs.  Those classes should define the full API "
"including all of the abstract methods and all of the mixin methods. This "
"lets users rely on :func:`issubclass` or :func:`isinstance` tests to "
"determine whether the full interface is supported.  The exception to this "
"rule is for methods that are automatically inferred from the rest of the API:"
msgstr ""
"2) 現有類和內建類可以註冊為ABC 的“虛擬子類別”。這些類應該定義完整的 "
"API，包括所有抽象方法和所有混合方法。這讓使用者可以依靠 :func:`issubclass` "
"或 :func:`isinstance` 測試來確定是否支援完整介面。此規則的例外是從 API "
"的其餘部分自動推斷的方法："

#: ../../library/collections.abc.rst:76
#, fuzzy
msgid ""
"In this example, class :class:`D` does not need to define ``__contains__``, "
"``__iter__``, and ``__reversed__`` because the :ref:`in-operator "
"<comparisons>`, the :term:`iteration <iterable>` logic, and the :func:"
"`reversed` function automatically fall back to using ``__getitem__`` and "
"``__len__``."
msgstr ""
"在這個例子中，類 :class:`D` 不需要定義 ``__contains__``、``__iter__`` 和 "
"``__reversed__``，因為 :ref:`in-operator <comparisons>`： term:`iteration "
"<iterable>` 邏輯，並且 :func:`reversed` 函式自動回退到使用 ``__getitem__`` "
"和 ``__len__``。"

#: ../../library/collections.abc.rst:82
#, fuzzy
msgid ""
"3) Some simple interfaces are directly recognizable by the presence of the "
"required methods (unless those methods have been set to :const:`None`):"
msgstr "3）一些簡單的介面可以通過所需方法的存在直接識別（除非這些方法已設定為：const"
"：`None`）："

#: ../../library/collections.abc.rst:99
#, fuzzy
msgid ""
"Complex interfaces do not support this last technique because an interface "
"is more than just the presence of method names.  Interfaces specify "
"semantics and relationships between methods that cannot be inferred solely "
"from the presence of specific method names.  For example, knowing that a "
"class supplies ``__getitem__``, ``__len__``, and ``__iter__`` is "
"insufficient for distinguishing a :class:`Sequence` from a :class:`Mapping`."
msgstr ""
"複雜介面不支援最後一種技術，因為介面不僅僅是方法名稱的存在。介面指定不能僅從"
"特定方法名稱的存在推斷出的方法之間的語義和關係。例如，知道一個類提供 "
"``__getitem__``、``__len__`` 和 ``__iter__`` 不足以區分 Sequence 和 Mapping。"

#: ../../library/collections.abc.rst:107
#, fuzzy
msgid ""
"These abstract classes now support ``[]``. See :ref:`types-genericalias` "
"and :pep:`585`."
msgstr "這些抽像類現在支援“[]”。參見 :ref:`types-genericalias` 和 :pep:`585`。"

#: ../../library/collections.abc.rst:114
#, fuzzy
msgid "Collections Abstract Base Classes"
msgstr "集合抽象基底類別"

#: ../../library/collections.abc.rst:116
#, fuzzy
msgid ""
"The collections module offers the following :term:`ABCs <abstract base "
"class>`:"
msgstr "collections 模組提供以下 :term:`ABCs <abstract base class>`:"

#: ../../library/collections.abc.rst:121
msgid "ABC"
msgstr "ABC"

#: ../../library/collections.abc.rst:121
#, fuzzy
msgid "Inherits from"
msgstr "繼承自"

#: ../../library/collections.abc.rst:121
#, fuzzy
msgid "Abstract Methods"
msgstr "抽象方法"

#: ../../library/collections.abc.rst:121
#, fuzzy
msgid "Mixin Methods"
msgstr "混合方法"

#: ../../library/collections.abc.rst:123
msgid ":class:`Container` [1]_"
msgstr ":class:`Container` [1]_"

#: ../../library/collections.abc.rst:123
msgid "``__contains__``"
msgstr "``__contains__``"

#: ../../library/collections.abc.rst:124
msgid ":class:`Hashable` [1]_"
msgstr ":class:`Hashable` [1]_"

#: ../../library/collections.abc.rst:124
msgid "``__hash__``"
msgstr "``__hash__``"

#: ../../library/collections.abc.rst:125
msgid ":class:`Iterable` [1]_ [2]_"
msgstr ":class:`Iterable` [1]_ [2]_"

#: ../../library/collections.abc.rst:125 ../../library/collections.abc.rst:126
msgid "``__iter__``"
msgstr "``__iter__``"

#: ../../library/collections.abc.rst:126
msgid ":class:`Iterator` [1]_"
msgstr ":class:`Iterator` [1]_"

#: ../../library/collections.abc.rst:126 ../../library/collections.abc.rst:127
msgid ":class:`Iterable`"
msgstr ":class:`Iterable`"

#: ../../library/collections.abc.rst:126
msgid "``__next__``"
msgstr "``__next__``"

#: ../../library/collections.abc.rst:127
msgid ":class:`Reversible` [1]_"
msgstr ":class:`Reversible` [1]_"

#: ../../library/collections.abc.rst:127
msgid "``__reversed__``"
msgstr "``__reversed__``"

#: ../../library/collections.abc.rst:128
msgid ":class:`Generator`  [1]_"
msgstr ":class:`Generator`  [1]_"

#: ../../library/collections.abc.rst:128
msgid ":class:`Iterator`"
msgstr ":class:`Iterator`"

#: ../../library/collections.abc.rst:128 ../../library/collections.abc.rst:176
msgid "``send``, ``throw``"
msgstr "``send``\\ 、\\ ``throw``"

#: ../../library/collections.abc.rst:128
msgid "``close``, ``__iter__``, ``__next__``"
msgstr "``close``\\ 、\\ ``__iter__``\\ 、\\ ``__next__``"

#: ../../library/collections.abc.rst:129
msgid ":class:`Sized`  [1]_"
msgstr ":class:`Sized`  [1]_"

#: ../../library/collections.abc.rst:129 ../../library/collections.abc.rst:168
msgid "``__len__``"
msgstr "``__len__``"

#: ../../library/collections.abc.rst:130
msgid ":class:`Callable`  [1]_"
msgstr ":class:`Callable`  [1]_"

#: ../../library/collections.abc.rst:130
msgid "``__call__``"
msgstr "``__call__``"

#: ../../library/collections.abc.rst:131
msgid ":class:`Collection`  [1]_"
msgstr ":class:`Collection`  [1]_"

#: ../../library/collections.abc.rst:131
msgid ":class:`Sized`, :class:`Iterable`, :class:`Container`"
msgstr ":class:`Sized`\\ 、\\ :class:`Iterable`\\ 、\\ :class:`Container`"

#: ../../library/collections.abc.rst:131 ../../library/collections.abc.rst:147
msgid "``__contains__``, ``__iter__``, ``__len__``"
msgstr "``__contains__``\\ 、\\ ``__iter__``\\ 、\\ ``__len__``"

#: ../../library/collections.abc.rst:135 ../../library/collections.abc.rst:138
#: ../../library/collections.abc.rst:144
msgid ":class:`Sequence`"
msgstr ":class:`Sequence`"

#: ../../library/collections.abc.rst:135
msgid ":class:`Reversible`, :class:`Collection`"
msgstr ":class:`Reversible`, :class:`Collection`"

#: ../../library/collections.abc.rst:135 ../../library/collections.abc.rst:144
msgid "``__getitem__``, ``__len__``"
msgstr "``__getitem__``\\ 、\\ ``__len__``"

#: ../../library/collections.abc.rst:135
msgid ""
"``__contains__``, ``__iter__``, ``__reversed__``, ``index``, and ``count``"
msgstr ""
"``__contains__``\\ 、\\ ``__iter__``\\ 、\\ ``__reversed__``\\ 、\\ "
"``index`` 和 ``count``"

#: ../../library/collections.abc.rst:138
msgid ":class:`MutableSequence`"
msgstr ":class:`MutableSequence`"

#: ../../library/collections.abc.rst:138
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``insert``"
msgstr ""
"``__getitem__``\\ 、\\ ``__setitem__``\\ 、\\ ``__delitem__``\\ 、\\ "
"``__len__``\\ 、\\ ``insert``"

#: ../../library/collections.abc.rst:138
#, fuzzy
msgid ""
"Inherited :class:`Sequence` methods and ``append``, ``reverse``, ``extend``, "
"``pop``, ``remove``, and ``__iadd__``"
msgstr ""
"繼承 :class:`Sequence`方法和``append``、``reverse``、``extend``、``pop``、``re"
"move``和``__iadd__``"

#: ../../library/collections.abc.rst:144
msgid ":class:`ByteString`"
msgstr ":class:`ByteString`"

#: ../../library/collections.abc.rst:144
#, fuzzy
msgid "Inherited :class:`Sequence` methods"
msgstr "繼承的 :class:`Sequence` 方法"

#: ../../library/collections.abc.rst:147 ../../library/collections.abc.rst:151
msgid ":class:`Set`"
msgstr ":class:`Set`"

#: ../../library/collections.abc.rst:147 ../../library/collections.abc.rst:157
msgid ":class:`Collection`"
msgstr ":class:`Collection`"

#: ../../library/collections.abc.rst:147
msgid ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__``, and ``isdisjoint``"
msgstr ""
"``__le__``\\ 、\\ ``__lt__``\\ 、\\ ``__eq__``\\ 、\\ ``__ne__``\\ 、\\ "
"``__gt__``\\ 、\\ ``__ge__``\\ 、\\ ``__and__``\\ 、\\ ``__or__``\\ 、\\ "
"``__sub__``\\ 、\\ ``__xor__`` 與 ``isdisjoint``"

#: ../../library/collections.abc.rst:151
msgid ":class:`MutableSet`"
msgstr ":class:`MutableSet`"

#: ../../library/collections.abc.rst:151
msgid "``__contains__``, ``__iter__``, ``__len__``, ``add``, ``discard``"
msgstr ""
"``__contains__``\\ 、\\ ``__iter__``\\ 、\\ ``__len__``\\ 、\\ "
"``add``\\ 、\\ ``discard``"

#: ../../library/collections.abc.rst:151
#, fuzzy
msgid ""
"Inherited :class:`Set` methods and ``clear``, ``pop``, ``remove``, "
"``__ior__``, ``__iand__``, ``__ixor__``, and ``__isub__``"
msgstr ""
"繼承 :class:`Set`方法和``clear``, ``pop``, ``remove``, `__ior__``, "
"``__iand__``, ``__ixor__``, ``__isub__` `"

#: ../../library/collections.abc.rst:157 ../../library/collections.abc.rst:161
msgid ":class:`Mapping`"
msgstr ":class:`Mapping`"

#: ../../library/collections.abc.rst:157
msgid "``__getitem__``, ``__iter__``, ``__len__``"
msgstr "``__getitem__``\\ 、\\ ``__iter__``\\ 、\\ ``__len__``"

#: ../../library/collections.abc.rst:157
msgid ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__``, and "
"``__ne__``"
msgstr ""
"``__contains__``\\ 、\\ ``keys``\\ 、\\ ``items``\\ 、\\ ``values``\\ 、\\ "
"``get``\\ 、\\ ``__eq__`` 和 ``__ne__``"

#: ../../library/collections.abc.rst:161
msgid ":class:`MutableMapping`"
msgstr ":class:`MutableMapping`"

#: ../../library/collections.abc.rst:161
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, ``__len__``"
msgstr ""
"``__getitem__``\\ 、\\ ``__setitem__``\\ 、\\ ``__delitem__``\\ 、\\ "
"``__iter__``\\ 、\\ ``__len__``"

#: ../../library/collections.abc.rst:161
#, fuzzy
msgid ""
"Inherited :class:`Mapping` methods and ``pop``, ``popitem``, ``clear``, "
"``update``, and ``setdefault``"
msgstr ""
"繼承 :class:`Mapping` 方法和``pop``、``popitem``、``clear``、``update`` "
"和``setdefault``"

#: ../../library/collections.abc.rst:168
msgid ":class:`MappingView`"
msgstr ":class:`MappingView`"

#: ../../library/collections.abc.rst:168
msgid ":class:`Sized`"
msgstr ":class:`Sized`"

#: ../../library/collections.abc.rst:169
msgid ":class:`ItemsView`"
msgstr ":class:`ItemsView`"

#: ../../library/collections.abc.rst:169 ../../library/collections.abc.rst:171
msgid ":class:`MappingView`, :class:`Set`"
msgstr ":class:`MappingView`\\ 、\\ :class:`Set`"

#: ../../library/collections.abc.rst:169 ../../library/collections.abc.rst:171
#: ../../library/collections.abc.rst:173
msgid "``__contains__``, ``__iter__``"
msgstr "``__contains__``\\ 、\\ ``__iter__``"

#: ../../library/collections.abc.rst:171
msgid ":class:`KeysView`"
msgstr ":class:`KeysView`"

#: ../../library/collections.abc.rst:173
msgid ":class:`ValuesView`"
msgstr ":class:`ValuesView`"

#: ../../library/collections.abc.rst:173
msgid ":class:`MappingView`, :class:`Collection`"
msgstr ":class:`MappingView`\\ 、\\ :class:`Collection`"

#: ../../library/collections.abc.rst:175
msgid ":class:`Awaitable` [1]_"
msgstr ":class:`Awaitable` [1]_"

#: ../../library/collections.abc.rst:175
msgid "``__await__``"
msgstr "``__await__``"

#: ../../library/collections.abc.rst:176
msgid ":class:`Coroutine` [1]_"
msgstr ":class:`Coroutine` [1]_"

#: ../../library/collections.abc.rst:176
msgid ":class:`Awaitable`"
msgstr ":class:`Awaitable`"

#: ../../library/collections.abc.rst:176
msgid "``close``"
msgstr "``close``"

#: ../../library/collections.abc.rst:177
msgid ":class:`AsyncIterable` [1]_"
msgstr ":class:`AsyncIterable` [1]_"

#: ../../library/collections.abc.rst:177 ../../library/collections.abc.rst:178
msgid "``__aiter__``"
msgstr "``__aiter__``"

#: ../../library/collections.abc.rst:178
msgid ":class:`AsyncIterator` [1]_"
msgstr ":class:`AsyncIterator` [1]_"

#: ../../library/collections.abc.rst:178
msgid ":class:`AsyncIterable`"
msgstr ":class:`AsyncIterable`"

#: ../../library/collections.abc.rst:178
msgid "``__anext__``"
msgstr "``__anext__``"

#: ../../library/collections.abc.rst:179
msgid ":class:`AsyncGenerator` [1]_"
msgstr ":class:`AsyncGenerator` [1]_"

#: ../../library/collections.abc.rst:179
msgid ":class:`AsyncIterator`"
msgstr ":class:`AsyncIterator`"

#: ../../library/collections.abc.rst:179
msgid "``asend``, ``athrow``"
msgstr "``asend``\\ 、\\ ``athrow``"

#: ../../library/collections.abc.rst:179
msgid "``aclose``, ``__aiter__``, ``__anext__``"
msgstr "``aclose``\\ 、\\ ``__aiter__``\\ 、\\ ``__anext__``"

#: ../../library/collections.abc.rst:184
msgid "Footnotes"
msgstr "註解"

#: ../../library/collections.abc.rst:185
#, fuzzy
msgid ""
"These ABCs override :meth:`object.__subclasshook__` to support testing an "
"interface by verifying the required methods are present and have not been "
"set to :const:`None`.  This only works for simple interfaces.  More complex "
"interfaces require registration or direct subclassing."
msgstr ""
"這些 ABC 覆蓋 :meth:`object.__subclasshook__` "
"以支援通過驗證所需方法是否存在且未設定為 :const:`None` "
"來測試介面。這僅適用於簡單的界面。更複雜的介面需要註冊或直接子類別化。"

#: ../../library/collections.abc.rst:191
#, fuzzy
msgid ""
"Checking ``isinstance(obj, Iterable)`` detects classes that are registered "
"as :class:`Iterable` or that have an :meth:`__iter__` method, but it does "
"not detect classes that iterate with the :meth:`__getitem__` method.  The "
"only reliable way to determine whether an object is :term:`iterable` is to "
"call ``iter(obj)``."
msgstr ""
"檢查 ``isinstance(obj, Iterable)`` 檢測註冊為 Iterable 或具有 __iter__ "
"方法的類，但它不檢測使用 __getitem__ 疊代的類` "
"方法。確定對像是否可疊代的唯一可靠方法是呼叫“iter(obj)”。"

#: ../../library/collections.abc.rst:199
#, fuzzy
msgid "Collections Abstract Base Classes -- Detailed Descriptions"
msgstr "集合抽象基底類別——詳細說明"

#: ../../library/collections.abc.rst:204
#, fuzzy
msgid "ABC for classes that provide the :meth:`__contains__` method."
msgstr "提供 :meth:`__contains__` 方法的類的 ABC。"

#: ../../library/collections.abc.rst:208
#, fuzzy
msgid "ABC for classes that provide the :meth:`__hash__` method."
msgstr "提供 :meth:`__hash__` 方法的類的 ABC。"

#: ../../library/collections.abc.rst:212
#, fuzzy
msgid "ABC for classes that provide the :meth:`__len__` method."
msgstr "提供 :meth:`__len__` 方法的類的 ABC。"

#: ../../library/collections.abc.rst:216
#, fuzzy
msgid "ABC for classes that provide the :meth:`__call__` method."
msgstr "提供 :meth:`__call__` 方法的類的 ABC。"

#: ../../library/collections.abc.rst:220
#, fuzzy
msgid "ABC for classes that provide the :meth:`__iter__` method."
msgstr "提供 :meth:`__iter__` 方法的類的 ABC。"

#: ../../library/collections.abc.rst:222
#, fuzzy
msgid ""
"Checking ``isinstance(obj, Iterable)`` detects classes that are registered "
"as :class:`Iterable` or that have an :meth:`__iter__` method, but it does "
"not detect classes that iterate with the :meth:`__getitem__` method. The "
"only reliable way to determine whether an object is :term:`iterable` is to "
"call ``iter(obj)``."
msgstr ""
"檢查 ``isinstance(obj, Iterable)`` 檢測註冊為 Iterable 或具有 __iter__ "
"方法的類，但它不檢測使用 __getitem__ 疊代的類` "
"方法。確定對像是否可疊代的唯一可靠方法是呼叫“iter(obj)”。"

#: ../../library/collections.abc.rst:230
#, fuzzy
msgid "ABC for sized iterable container classes."
msgstr "大小可疊代容器類的 ABC。"

#: ../../library/collections.abc.rst:236
#, fuzzy
msgid ""
"ABC for classes that provide the :meth:`~iterator.__iter__` and :meth:"
"`~iterator.__next__` methods.  See also the definition of :term:`iterator`."
msgstr ""
"提供 :meth:`~iterator.__iter__` 和 :meth:`~iterator.__next__` 方法的類的 "
"ABC。另見 :term:`iterator` 的定義。"

#: ../../library/collections.abc.rst:242
#, fuzzy
msgid ""
"ABC for iterable classes that also provide the :meth:`__reversed__` method."
msgstr "ABC 適用於還提供 :meth:`__reversed__` 方法的可疊代類。"

#: ../../library/collections.abc.rst:249
#, fuzzy
msgid ""
"ABC for generator classes that implement the protocol defined in :pep:`342` "
"that extends iterators with the :meth:`~generator.send`, :meth:`~generator."
"throw` and :meth:`~generator.close` methods. See also the definition of :"
"term:`generator`."
msgstr ""
"用於實作 :pep:`342` 中定義的協定的生成器類的 ABC，該協定使用 "
":meth:`~generator.send`、:meth:`~generator.throw` 和 :meth:`~generator.close`"
" 擴充疊代器方法。另見 :term:`generator` 的定義。"

#: ../../library/collections.abc.rst:260
#, fuzzy
msgid "ABCs for read-only and mutable :term:`sequences <sequence>`."
msgstr "只讀和可變的 ABCs :term:`sequences <sequence>`。"

#: ../../library/collections.abc.rst:262
#, fuzzy
msgid ""
"Implementation note: Some of the mixin methods, such as :meth:`__iter__`, :"
"meth:`__reversed__` and :meth:`index`, make repeated calls to the "
"underlying :meth:`__getitem__` method. Consequently, if :meth:`__getitem__` "
"is implemented with constant access speed, the mixin methods will have "
"linear performance; however, if the underlying method is linear (as it would "
"be with a linked list), the mixins will have quadratic performance and will "
"likely need to be overridden."
msgstr ""
"實作注意事項：一些 mixin 方法，例如 :meth:`__iter__`、:meth:`__reversed__` "
"和 :meth:`index`，重複呼叫底層的 :meth:`__getitem__` 方法。因此，如果 "
":meth:`__getitem__` 以恆定的訪問速度實作，mixin "
"方法將具有線性性能；然而，如果底層方法是線性的（就像鍊錶一樣），mixins "
"將具有二次性能並且可能需要被覆蓋。"

#: ../../library/collections.abc.rst:271
#, fuzzy
msgid "The index() method added support for *stop* and *start* arguments."
msgstr "index() 方法新增了對 *stop* 和 *start* 參數的支援。"

#: ../../library/collections.abc.rst:278
#, fuzzy
msgid "ABCs for read-only and mutable sets."
msgstr "只讀和可變集的 ABC。"

#: ../../library/collections.abc.rst:283
#, fuzzy
msgid "ABCs for read-only and mutable :term:`mappings <mapping>`."
msgstr "只讀和可變 :term:`mappings <mapping>` 的基礎知識。"

#: ../../library/collections.abc.rst:290
#, fuzzy
msgid ""
"ABCs for mapping, items, keys, and values :term:`views <dictionary view>`."
msgstr "映射、項、鍵和值的基礎知識 :term:`views <dictionary view>`。"

#: ../../library/collections.abc.rst:294
#, fuzzy
msgid ""
"ABC for :term:`awaitable` objects, which can be used in :keyword:`await` "
"expressions.  Custom implementations must provide the :meth:`__await__` "
"method."
msgstr ""
"ABC for :term:`awaitable` 物件，可用於 :keyword:`await` 表達式。"
"自定義實作必須提供 :meth:`__await__` 方法。"

#: ../../library/collections.abc.rst:298
#, fuzzy
msgid ""
":term:`Coroutine <coroutine>` objects and instances of the :class:"
"`~collections.abc.Coroutine` ABC are all instances of this ABC."
msgstr ""
":term:`Coroutine <coroutine>` 物件和 :class:`~collections.abc.Coroutine` ABC "
"的實例都是這個 ABC 的實例。"

#: ../../library/collections.abc.rst:302
#, fuzzy
msgid ""
"In CPython, generator-based coroutines (generators decorated with :func:"
"`types.coroutine`) are *awaitables*, even though they do not have an :meth:"
"`__await__` method. Using ``isinstance(gencoro, Awaitable)`` for them will "
"return ``False``. Use :func:`inspect.isawaitable` to detect them."
msgstr ""
"在 CPython 中，基於生成器的協程（用 :func:`types.coroutine` 修飾的生成器）是 "
"*awaitables*，即使它們沒有 :meth:`__await__` 方法。對它們使用 ``isinstance("
"gencoro, Awaitable)`` 將回傳 ``False``。使用 :func:`inspect.isawaitable` "
"來檢測它們。"

#: ../../library/collections.abc.rst:312
#, fuzzy
msgid ""
"ABC for coroutine compatible classes.  These implement the following "
"methods, defined in :ref:`coroutine-objects`: :meth:`~coroutine.send`, :meth:"
"`~coroutine.throw`, and :meth:`~coroutine.close`.  Custom implementations "
"must also implement :meth:`__await__`.  All :class:`Coroutine` instances are "
"also instances of :class:`Awaitable`.  See also the definition of :term:"
"`coroutine`."
msgstr ""
"協程相容類的 ABC。它們實作了以下方法，在 coroutine-objects "
"中定義 :meth:`~coroutine.send`、:meth:`~coroutine.throw` 和 :meth:`~coroutine"
".close`。自定義實作還必須實作 :meth:`__await__`。所有 :class:`Coroutine` "
"實例也是 :class:`Awaitable` 的實例。另見 :term:`coroutine` 的定義。"

#: ../../library/collections.abc.rst:320
#, fuzzy
msgid ""
"In CPython, generator-based coroutines (generators decorated with :func:"
"`types.coroutine`) are *awaitables*, even though they do not have an :meth:"
"`__await__` method. Using ``isinstance(gencoro, Coroutine)`` for them will "
"return ``False``. Use :func:`inspect.isawaitable` to detect them."
msgstr ""
"在 CPython 中，基於生成器的協程（用 :func:`types.coroutine` 修飾的生成器）是 "
"*awaitables*，即使它們沒有 :meth:`__await__` 方法。對它們使用 ``isinstance("
"gencoro, Coroutine)`` 將回傳 ``False``。使用 :func:`inspect.isawaitable` "
"來檢測它們。"

#: ../../library/collections.abc.rst:330
#, fuzzy
msgid ""
"ABC for classes that provide ``__aiter__`` method.  See also the definition "
"of :term:`asynchronous iterable`."
msgstr "提供 __aiter__ 方法的類的 ABC。另見 :term:`asynchronous iterable` 的定義。"

#: ../../library/collections.abc.rst:337
#, fuzzy
msgid ""
"ABC for classes that provide ``__aiter__`` and ``__anext__`` methods.  See "
"also the definition of :term:`asynchronous iterator`."
msgstr ""
"ABC 用於提供``__aiter__`` 和``__anext__`` 方法的類。另見 :term:`asynchronous "
"iterator` 的定義。"

#: ../../library/collections.abc.rst:344
#, fuzzy
msgid ""
"ABC for asynchronous generator classes that implement the protocol defined "
"in :pep:`525` and :pep:`492`."
msgstr "非同步生成器類的 ABC 實作了在 :pep:`525` 和 :pep:`492` 中定義的協定。"

#: ../../library/collections.abc.rst:350
#, fuzzy
msgid "Examples and Recipes"
msgstr "例子和食譜"

#: ../../library/collections.abc.rst:352
#, fuzzy
msgid ""
"ABCs allow us to ask classes or instances if they provide particular "
"functionality, for example::"
msgstr "ABC 允許我們詢問類或實例是否提供特定功能，例如："

#: ../../library/collections.abc.rst:359
#, fuzzy
msgid ""
"Several of the ABCs are also useful as mixins that make it easier to develop "
"classes supporting container APIs.  For example, to write a class supporting "
"the full :class:`Set` API, it is only necessary to supply the three "
"underlying abstract methods: :meth:`__contains__`, :meth:`__iter__`, and :"
"meth:`__len__`. The ABC supplies the remaining methods such as :meth:"
"`__and__` and :meth:`isdisjoint`::"
msgstr ""
"一些 ABC 也可用作 mixins，使開發支援容器 API 的類變得更加容易。例如，"
"要編寫一個支援完整 :class:`Set` API "
"的類，只需要提供三個底層抽象方法：:meth:`__contains__`、:meth:`__iter__` "
"和 :meth:`__len__ `。 ABC 提供了剩餘的方法，例如 :meth:`__and__` 和 "
":meth:`isdisjoint`::"

#: ../../library/collections.abc.rst:388
#, fuzzy
msgid "Notes on using :class:`Set` and :class:`MutableSet` as a mixin:"
msgstr "使用 :class:`Set` 和 :class:`MutableSet` 作為 mixin 的注意事項："

#: ../../library/collections.abc.rst:391
#, fuzzy
msgid ""
"Since some set operations create new sets, the default mixin methods need a "
"way to create new instances from an iterable. The class constructor is "
"assumed to have a signature in the form ``ClassName(iterable)``. That "
"assumption is factored-out to an internal classmethod called :meth:"
"`_from_iterable` which calls ``cls(iterable)`` to produce a new set. If the :"
"class:`Set` mixin is being used in a class with a different constructor "
"signature, you will need to override :meth:`_from_iterable` with a "
"classmethod or regular method that can construct new instances from an "
"iterable argument."
msgstr ""
"由於某些集合操作會建立新集合，因此預設的混合方法需要一種從可疊代物件建立新實"
"例的方法。假定類構造函式具有 ``ClassName(iterable)`` 形式的簽名。"
"該假設被分解為一個名為 :meth:`_from_iterable` 的內部類方法，它呼叫 "
"``cls(iterable)`` 來生成一個新集合。如果在具有不同構造函式簽名的類中使用 "
":class:`Set` mixin，"
"您將需要使用類方法或可以從可疊代參數構造新實例的常規方法來覆蓋 "
":meth:`_from_iterable`。"

#: ../../library/collections.abc.rst:402
#, fuzzy
msgid ""
"To override the comparisons (presumably for speed, as the semantics are "
"fixed), redefine :meth:`__le__` and :meth:`__ge__`, then the other "
"operations will automatically follow suit."
msgstr ""
"要覆蓋比較（大概是為了速度，因為語義是固定的），重新定義 :meth:`__le__` 和 "
":meth:`__ge__`，然後其他操作將自動效仿。"

#: ../../library/collections.abc.rst:407
#, fuzzy
msgid ""
"The :class:`Set` mixin provides a :meth:`_hash` method to compute a hash "
"value for the set; however, :meth:`__hash__` is not defined because not all "
"sets are :term:`hashable` or immutable.  To add set hashability using "
"mixins, inherit from both :meth:`Set` and :meth:`Hashable`, then define "
"``__hash__ = Set._hash``."
msgstr ""
":class:`Set` mixin 提供了一個 :meth:`_hash` "
"方法來計算集合的雜湊值；然而，:meth:`__hash__` "
"沒有定義，因為不是所有的集合都是 :term:`hashable` 或不可變的。要使用 mixins "
"新增集合可雜湊性，請繼承 :meth:`Set` 和 :meth:`Hashable`，然後定義 ``"
"__hash__ = Set._hash``。"

#: ../../library/collections.abc.rst:415
#, fuzzy
msgid ""
"`OrderedSet recipe <https://code.activestate.com/recipes/576694/>`_ for an "
"example built on :class:`MutableSet`."
msgstr ""
"`OrderedSet 配方 <https://code.activestate.com/recipes/576694/>`_ 構建在 "
":class:`MutableSet` 上的示例。"

#: ../../library/collections.abc.rst:418
msgid "For more about ABCs, see the :mod:`abc` module and :pep:`3119`."
msgstr "關於 ABC 的更多資訊請見 :mod:`abc` module 和 :pep:`3119`\\ 。"
