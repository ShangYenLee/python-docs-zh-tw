# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-21 17:35+0000\n"
"PO-Revision-Date: 2018-05-23 16:16+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/xml.etree.elementtree.rst:2
msgid ":mod:`xml.etree.ElementTree` --- The ElementTree XML API"
msgstr ":mod:`xml.etree.ElementTree` --- ElementTree XML API"

#: ../../library/xml.etree.elementtree.rst:9
msgid "**Source code:** :source:`Lib/xml/etree/ElementTree.py`"
msgstr "**原始碼：**\\ :source:`Lib/xml/etree/ElementTree.py`"

#: ../../library/xml.etree.elementtree.rst:13
#, fuzzy
msgid ""
"The :mod:`xml.etree.ElementTree` module implements a simple and efficient "
"API for parsing and creating XML data."
msgstr ":mod:`xml.etree.ElementTree` 模組實作了一個簡單高效的 API，用於剖析和建立 "
"XML 資料。"

#: ../../library/xml.etree.elementtree.rst:16
#, fuzzy
msgid "This module will use a fast implementation whenever available."
msgstr "該模組將在可用時使用快速實作。"

#: ../../library/xml.etree.elementtree.rst:19
#, fuzzy
msgid "The :mod:`xml.etree.cElementTree` module is deprecated."
msgstr ":mod:`xml.etree.cElementTree` 模組已棄用。"

#: ../../library/xml.etree.elementtree.rst:25
#, fuzzy
msgid ""
"The :mod:`xml.etree.ElementTree` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data "
"see :ref:`xml-vulnerabilities`."
msgstr ""
":mod:`xml.etree.ElementTree` "
"模組對惡意構造的資料不安全。如果您需要剖析不受信任或未經身份驗證的資料，"
"請參閱 :ref:`xml-vulnerabilities`。"

#: ../../library/xml.etree.elementtree.rst:30
#, fuzzy
msgid "Tutorial"
msgstr "教程"

#: ../../library/xml.etree.elementtree.rst:32
#, fuzzy
msgid ""
"This is a short tutorial for using :mod:`xml.etree.ElementTree` (``ET`` in "
"short).  The goal is to demonstrate some of the building blocks and basic "
"concepts of the module."
msgstr "這是使用 :mod:`xml.etree.ElementTree`（簡稱 "
"``ET``）的簡短教程。目標是演示模組的一些構建塊和基本概念。"

#: ../../library/xml.etree.elementtree.rst:37
#, fuzzy
msgid "XML tree and elements"
msgstr "XML 樹和元素"

#: ../../library/xml.etree.elementtree.rst:39
#, fuzzy
msgid ""
"XML is an inherently hierarchical data format, and the most natural way to "
"represent it is with a tree.  ``ET`` has two classes for this purpose - :"
"class:`ElementTree` represents the whole XML document as a tree, and :class:"
"`Element` represents a single node in this tree.  Interactions with the "
"whole document (reading and writing to/from files) are usually done on the :"
"class:`ElementTree` level.  Interactions with a single XML element and its "
"sub-elements are done on the :class:`Element` level."
msgstr ""
"XML 是一種固有的分層資料格式，表示它的最自然方式是用樹。 ``ET`` "
"為此目的有兩個類 - :class:`ElementTree` 將整個 XML 文檔表示為樹，而 "
":class:`Element` 表示這棵樹中的單個節點。與整個文檔的交互（讀取和寫入文件）"
"通常在 ElementTree 級別完成。與單個 XML 元素及其子元素的交互是在 Element "
"級別完成的。"

#: ../../library/xml.etree.elementtree.rst:50
#, fuzzy
msgid "Parsing XML"
msgstr "剖析 XML"

#: ../../library/xml.etree.elementtree.rst:52
#, fuzzy
msgid ""
"We'll be using the following XML document as the sample data for this "
"section:"
msgstr "我們將使用以下 XML 文檔作為本節的示例資料："

#: ../../library/xml.etree.elementtree.rst:80
#, fuzzy
msgid "We can import this data by reading from a file::"
msgstr "我們可以通過從文件中讀取來導入此資料::"

#: ../../library/xml.etree.elementtree.rst:86
#, fuzzy
msgid "Or directly from a string::"
msgstr "或者直接來自字串::"

#: ../../library/xml.etree.elementtree.rst:90
#, fuzzy
msgid ""
":func:`fromstring` parses XML from a string directly into an :class:"
"`Element`, which is the root element of the parsed tree.  Other parsing "
"functions may create an :class:`ElementTree`.  Check the documentation to be "
"sure."
msgstr ""
":func:`fromstring` 將 XML 從字串直接剖析為 "
":class:`Element`，這是剖析樹的根元素。其他剖析函式可能會建立一個 "
"ElementTree。檢查文檔以確保。"

#: ../../library/xml.etree.elementtree.rst:94
#, fuzzy
msgid ""
"As an :class:`Element`, ``root`` has a tag and a dictionary of attributes::"
msgstr "作為一個 :class:`Element`，``root`` 有一個標籤和一個屬性字典::"

#: ../../library/xml.etree.elementtree.rst:101
#, fuzzy
msgid "It also has children nodes over which we can iterate::"
msgstr "它也有我們可以疊代的子節點::"

#: ../../library/xml.etree.elementtree.rst:110
#, fuzzy
msgid "Children are nested, and we can access specific child nodes by index::"
msgstr "children是嵌套的，我們可以通過index::來訪問具體的子節點："

#: ../../library/xml.etree.elementtree.rst:118
#, fuzzy
msgid ""
"Not all elements of the XML input will end up as elements of the parsed "
"tree. Currently, this module skips over any XML comments, processing "
"instructions, and document type declarations in the input. Nevertheless, "
"trees built using this module's API rather than parsing from XML text can "
"have comments and processing instructions in them; they will be included "
"when generating XML output. A document type declaration may be accessed by "
"passing a custom :class:`TreeBuilder` instance to the :class:`XMLParser` "
"constructor."
msgstr ""
"並非 XML 輸入的所有元素最終都會成為剖析樹的元素。目前，"
"此模組會跳過輸入中的任何 XML 註釋、處理指令和文檔型別聲明。儘管如此，"
"使用該模組的 API 而不是從 XML 文本剖析構建的樹可以在其中包含註釋和處理指令；"
"它們將在生成 XML 輸出時包含在內。可以通過將自定義 TreeBuilder 實例傳遞給 "
"XMLParser 構造函式來訪問文檔型別聲明。"

#: ../../library/xml.etree.elementtree.rst:132
#, fuzzy
msgid "Pull API for non-blocking parsing"
msgstr "用於非阻塞剖析的 Pull API"

#: ../../library/xml.etree.elementtree.rst:134
#, fuzzy
msgid ""
"Most parsing functions provided by this module require the whole document to "
"be read at once before returning any result.  It is possible to use an :"
"class:`XMLParser` and feed data into it incrementally, but it is a push API "
"that calls methods on a callback target, which is too low-level and "
"inconvenient for most needs.  Sometimes what the user really wants is to be "
"able to parse XML incrementally, without blocking operations, while enjoying "
"the convenience of fully constructed :class:`Element` objects."
msgstr ""
"該模組提供的大多數剖析函式都需要在回傳任何結果之前立即讀取整個文檔。可以使用 "
":class:`XMLParser` 並將資料遞增地提供給它，"
"但它是一個在回呼目標上呼叫方法的推送 "
"API，對於大多數需求來說級別太低且不方便。"
"有時使用者真正想要的是能夠在不阻塞操作的情況下逐步剖析 XML，"
"同時享受完全構造的 :class:`Element` 物件的便利。"

#: ../../library/xml.etree.elementtree.rst:142
#, fuzzy
msgid ""
"The most powerful tool for doing this is :class:`XMLPullParser`.  It does "
"not require a blocking read to obtain the XML data, and is instead fed with "
"data incrementally with :meth:`XMLPullParser.feed` calls.  To get the parsed "
"XML elements, call :meth:`XMLPullParser.read_events`.  Here is an example::"
msgstr ""
"執行此操作的最強大工具是 :class:`XMLPullParser`。它不需要阻塞讀取來獲取 XML "
"資料，而是通過 :meth:`XMLPullParser.feed` 呼叫以增量方式提供資料。"
"要獲取已剖析的 XML 元素，請呼叫 :meth:`XMLPullParser."
"read_events`。這是一個例子::"

#: ../../library/xml.etree.elementtree.rst:158
#, fuzzy
msgid ""
"The obvious use case is applications that operate in a non-blocking fashion "
"where the XML data is being received from a socket or read incrementally "
"from some storage device.  In such cases, blocking reads are unacceptable."
msgstr "明顯的用例是以非阻塞方式運行的應用程式，其中從 socket 接收 XML "
"資料或從某些儲存設備增量讀取。在這種情況下，阻塞讀取是不可接受的。"

#: ../../library/xml.etree.elementtree.rst:162
#, fuzzy
msgid ""
"Because it's so flexible, :class:`XMLPullParser` can be inconvenient to use "
"for simpler use-cases.  If you don't mind your application blocking on "
"reading XML data but would still like to have incremental parsing "
"capabilities, take a look at :func:`iterparse`.  It can be useful when "
"you're reading a large XML document and don't want to hold it wholly in "
"memory."
msgstr ""
"因為它非常靈活，XMLPullParser 可能不方便用於更簡單的用例。"
"如果您不介意您的應用程式在讀取 XML 資料時阻塞，但仍希望具有增量剖析功能，"
"請查看 :func:`iterparse`。當您正在閱讀大型 XML "
"文檔並且不想將其完全保存在記憶體中時，它會很有用。"

#: ../../library/xml.etree.elementtree.rst:169
#, fuzzy
msgid "Finding interesting elements"
msgstr "尋找有趣的元素"

#: ../../library/xml.etree.elementtree.rst:171
#, fuzzy
msgid ""
":class:`Element` has some useful methods that help iterate recursively over "
"all the sub-tree below it (its children, their children, and so on).  For "
"example, :meth:`Element.iter`::"
msgstr ""
":class:`Element` 有一些有用的方法可以幫助遞迴疊代它下面的所有子樹（它的子樹、"
"它們的子樹等等）。例如，:meth:`Element.iter`::"

#: ../../library/xml.etree.elementtree.rst:184
#, fuzzy
msgid ""
":meth:`Element.findall` finds only elements with a tag which are direct "
"children of the current element.  :meth:`Element.find` finds the *first* "
"child with a particular tag, and :attr:`Element.text` accesses the element's "
"text content.  :meth:`Element.get` accesses the element's attributes::"
msgstr ""
":meth:`Element.findall` "
"只查找帶有標記的元素，這些標記是當前元素的直接子元素。 :meth:`Element.find` "
"找到帶有特定標籤的 *first* 子元素，而 :attr:`Element.text` "
"訪問元素的文本內容。 :meth:`Element.get` 訪問元素的屬性::"

#: ../../library/xml.etree.elementtree.rst:198
#, fuzzy
msgid ""
"More sophisticated specification of which elements to look for is possible "
"by using :ref:`XPath <elementtree-xpath>`."
msgstr "使用 :ref:`XPath <elementtree-xpath>` 可以更複雜地指定要查找的元素。"

#: ../../library/xml.etree.elementtree.rst:202
#, fuzzy
msgid "Modifying an XML File"
msgstr "修改 XML 文件"

#: ../../library/xml.etree.elementtree.rst:204
#, fuzzy
msgid ""
":class:`ElementTree` provides a simple way to build XML documents and write "
"them to files. The :meth:`ElementTree.write` method serves this purpose."
msgstr ""
":class:`ElementTree` 提供了一種構建 XML 文檔並將其寫入文件的簡單方法。 "
":meth:`ElementTree.write` 方法就是為了這個目的。"

#: ../../library/xml.etree.elementtree.rst:207
#, fuzzy
msgid ""
"Once created, an :class:`Element` object may be manipulated by directly "
"changing its fields (such as :attr:`Element.text`), adding and modifying "
"attributes (:meth:`Element.set` method), as well as adding new children (for "
"example with :meth:`Element.append`)."
msgstr ""
"建立後，Element 物件可以通過直接更改其欄位（例如 Element."
"text）、新增和修改屬性（Element.set "
"方法）以及新增新的孩子（例如 :meth:`Element.append`）。"

#: ../../library/xml.etree.elementtree.rst:212
#, fuzzy
msgid ""
"Let's say we want to add one to each country's rank, and add an ``updated`` "
"attribute to the rank element::"
msgstr "假設我們要為每個國家/地區的排名新增一個，並向排名元素新增一個 ``updated`` "
"屬性::"

#: ../../library/xml.etree.elementtree.rst:222
#: ../../library/xml.etree.elementtree.rst:266
#, fuzzy
msgid "Our XML now looks like this:"
msgstr "我們的 XML 現在看起來像這樣："

#: ../../library/xml.etree.elementtree.rst:250
#, fuzzy
msgid ""
"We can remove elements using :meth:`Element.remove`.  Let's say we want to "
"remove all countries with a rank higher than 50::"
msgstr "我們可以使用 :meth:`Element.remove` 刪除元素。假設我們要刪除排名高於 50 "
"的所有國家/地區::"

#: ../../library/xml.etree.elementtree.rst:261
#, fuzzy
msgid ""
"Note that concurrent modification while iterating can lead to problems, just "
"like when iterating and modifying Python lists or dicts. Therefore, the "
"example first collects all matching elements with ``root.findall()``, and "
"only then iterates over the list of matches."
msgstr ""
"請注意，疊代時並發修改可能會導致問題，就像疊代和修改 Python "
"列表或字典時一樣。因此，該示例首先使用 ``root.findall()`` "
"收集所有匹配元素，然後才遍歷匹配列表。"

#: ../../library/xml.etree.elementtree.rst:288
#, fuzzy
msgid "Building XML documents"
msgstr "構建 XML 文檔"

#: ../../library/xml.etree.elementtree.rst:290
#, fuzzy
msgid ""
"The :func:`SubElement` function also provides a convenient way to create new "
"sub-elements for a given element::"
msgstr ":func:`SubElement` 函式還提供了一種為給定元素建立新子元素的便捷方法::"

#: ../../library/xml.etree.elementtree.rst:301
#, fuzzy
msgid "Parsing XML with Namespaces"
msgstr "使用名稱空間剖析 XML"

#: ../../library/xml.etree.elementtree.rst:303
#, fuzzy
msgid ""
"If the XML input has `namespaces <https://en.wikipedia.org/wiki/"
"XML_namespace>`__, tags and attributes with prefixes in the form ``prefix:"
"sometag`` get expanded to ``{uri}sometag`` where the *prefix* is replaced by "
"the full *URI*. Also, if there is a `default namespace <https://www.w3.org/"
"TR/xml-names/#defaulting>`__, that full URI gets prepended to all of the non-"
"prefixed tags."
msgstr ""
"如果 XML 輸入有 `namespaces <https://en.wikipedia.org/wiki/"
"XML_namespace>`__，帶有 ``prefix:sometag`` 形式前綴的標籤和屬性將擴充為 "
"``{uri}sometag` ` 其中 *prefix* 被完整的 *URI* 替換。此外，如果有一個`"
"預設命名空間 <https://www.w3.org/TR/xml-names/#defaulting>`__，那麼完整的 "
"URI 將被新增到所有非前綴標籤的前面。"

#: ../../library/xml.etree.elementtree.rst:311
#, fuzzy
msgid ""
"Here is an XML example that incorporates two namespaces, one with the prefix "
"\"fictional\" and the other serving as the default namespace:"
msgstr "下面是一個包含兩個命名空間的 XML "
"示例，一個帶有前綴 ``fictional`` ，另一個用作預設命名空間："

#: ../../library/xml.etree.elementtree.rst:332
#, fuzzy
msgid ""
"One way to search and explore this XML example is to manually add the URI to "
"every tag or attribute in the xpath of a :meth:`~Element.find` or :meth:"
"`~Element.findall`::"
msgstr ""
"搜索和探索此 XML 示例的一種方法是手動將 URI 新增到 :meth:`~Element.find` 或 "
":meth:`~Element.findall`:: 的 xpath 中的每個標籤或屬性："

#: ../../library/xml.etree.elementtree.rst:343
#, fuzzy
msgid ""
"A better way to search the namespaced XML example is to create a dictionary "
"with your own prefixes and use those in the search functions::"
msgstr "搜索命名空間 XML "
"示例的更好方法是建立一個帶有您自己的前綴的字典，並在搜索函式中使用它們："

#: ../../library/xml.etree.elementtree.rst:355
#, fuzzy
msgid "These two approaches both output::"
msgstr "這兩種方法都輸出::"

#: ../../library/xml.etree.elementtree.rst:369
#, fuzzy
msgid "XPath support"
msgstr "XPath 支援"

#: ../../library/xml.etree.elementtree.rst:371
#, fuzzy
msgid ""
"This module provides limited support for `XPath expressions <https://www.w3."
"org/TR/xpath>`_ for locating elements in a tree.  The goal is to support a "
"small subset of the abbreviated syntax; a full XPath engine is outside the "
"scope of the module."
msgstr ""
"此模組為 `XPath 表達式 <https://www.w3.org/TR/xpath>`_ "
"提供有限支援，用於在樹中定位元素。目標是支援一小部分縮寫語法；完整的 XPath "
"引擎不在本模組的範圍之內。"

#: ../../library/xml.etree.elementtree.rst:377
#: ../../library/xml.etree.elementtree.rst:769
msgid "Example"
msgstr "範例"

#: ../../library/xml.etree.elementtree.rst:379
#, fuzzy
msgid ""
"Here's an example that demonstrates some of the XPath capabilities of the "
"module.  We'll be using the ``countrydata`` XML document from the :ref:"
"`Parsing XML <elementtree-parsing-xml>` section::"
msgstr ""
"下面是一個演示該模組的某些 XPath 功能的示例。我們將使用來自 :ref:`Parsing "
"XML <elementtree-parsing-xml>` 部分的 ``countrydata`` XML 文檔::"

#: ../../library/xml.etree.elementtree.rst:403
#, fuzzy
msgid ""
"For XML with namespaces, use the usual qualified ``{namespace}tag`` "
"notation::"
msgstr "對於帶有命名空間的 XML，使用通常的限定 ``{namespace}tag`` 表示法::"

#: ../../library/xml.etree.elementtree.rst:410
#, fuzzy
msgid "Supported XPath syntax"
msgstr "支援的 XPath 語法"

#: ../../library/xml.etree.elementtree.rst:415
#, fuzzy
msgid "Syntax"
msgstr "句法"

#: ../../library/xml.etree.elementtree.rst:415
#, fuzzy
msgid "Meaning"
msgstr "意義"

#: ../../library/xml.etree.elementtree.rst:417
msgid "``tag``"
msgstr "``tag``"

#: ../../library/xml.etree.elementtree.rst:417
#, fuzzy
msgid ""
"Selects all child elements with the given tag. For example, ``spam`` selects "
"all child elements named ``spam``, and ``spam/egg`` selects all "
"grandchildren named ``egg`` in all children named ``spam``.  ``{namespace}"
"*`` selects all tags in the given namespace, ``{*}spam`` selects tags named "
"``spam`` in any (or no) namespace, and ``{}*`` only selects tags that are "
"not in a namespace."
msgstr ""
"選擇具有給定標籤的所有子元素。例如，``spam`` 選擇名為``spam`` "
"的所有子元素，``spam/egg`` 選擇所有名為``spam`` 的子元素中所有名為``egg`` "
"的孫元素。 ``{namespace}*`` 選擇給定命名空間中的所有標籤，``{*}spam`` "
"選擇任何（或沒有）命名空間中名為 ``spam`` 的標籤，``{}*`` "
"僅選擇不在命名空間中的標籤。"

#: ../../library/xml.etree.elementtree.rst:426
#, fuzzy
msgid "Support for star-wildcards was added."
msgstr "新增了對星通配符的支援。"

#: ../../library/xml.etree.elementtree.rst:429
msgid "``*``"
msgstr "``*``"

#: ../../library/xml.etree.elementtree.rst:429
#, fuzzy
msgid ""
"Selects all child elements, including comments and processing instructions.  "
"For example, ``*/egg`` selects all grandchildren named ``egg``."
msgstr "選擇所有子元素，包括註釋和處理指令。例如，``*/egg`` 選擇所有名為 ``egg`` "
"的孫子。"

#: ../../library/xml.etree.elementtree.rst:433
msgid "``.``"
msgstr "``.``"

#: ../../library/xml.etree.elementtree.rst:433
#, fuzzy
msgid ""
"Selects the current node.  This is mostly useful at the beginning of the "
"path, to indicate that it's a relative path."
msgstr "選擇當前節點。這在路徑的開頭最有用，表明它是一個相對路徑。"

#: ../../library/xml.etree.elementtree.rst:437
msgid "``//``"
msgstr "``//``"

#: ../../library/xml.etree.elementtree.rst:437
#, fuzzy
msgid ""
"Selects all subelements, on all levels beneath the current  element.  For "
"example, ``.//egg`` selects all ``egg`` elements in the entire tree."
msgstr "選擇當前元素下所有級別的所有子元素。例如，``.//egg`` 選擇整個樹中的所有 "
"``egg`` 元素。"

#: ../../library/xml.etree.elementtree.rst:441
msgid "``..``"
msgstr "``..``"

#: ../../library/xml.etree.elementtree.rst:441
#, fuzzy
msgid ""
"Selects the parent element.  Returns ``None`` if the path attempts to reach "
"the ancestors of the start element (the element ``find`` was called on)."
msgstr "選擇父元素。如果路徑試圖到達起始元素的祖先（呼叫了元素 ``find``），則回傳 ``None``"
"。"

#: ../../library/xml.etree.elementtree.rst:445
msgid "``[@attrib]``"
msgstr "``[@attrib]``"

#: ../../library/xml.etree.elementtree.rst:445
#, fuzzy
msgid "Selects all elements that have the given attribute."
msgstr "選擇具有給定屬性的所有元素。"

#: ../../library/xml.etree.elementtree.rst:447
msgid "``[@attrib='value']``"
msgstr "``[@attrib='value']``"

#: ../../library/xml.etree.elementtree.rst:447
#, fuzzy
msgid ""
"Selects all elements for which the given attribute has the given value.  The "
"value cannot contain quotes."
msgstr "選擇給定屬性具有給定值的所有元素。該值不能包含引號。"

#: ../../library/xml.etree.elementtree.rst:451
msgid "``[@attrib!='value']``"
msgstr "``[@attrib!='value']``"

#: ../../library/xml.etree.elementtree.rst:451
#, fuzzy
msgid ""
"Selects all elements for which the given attribute does not have the given "
"value. The value cannot contain quotes."
msgstr "選擇給定屬性不具有給定值的所有元素。該值不能包含引號。"

#: ../../library/xml.etree.elementtree.rst:457
msgid "``[tag]``"
msgstr "``[tag]``"

#: ../../library/xml.etree.elementtree.rst:457
#, fuzzy
msgid ""
"Selects all elements that have a child named ``tag``.  Only immediate "
"children are supported."
msgstr "選擇所有具有名為 ``tag`` 的子元素的元素。僅支援直系子代。"

#: ../../library/xml.etree.elementtree.rst:460
msgid "``[.='text']``"
msgstr "``[.='text']``"

#: ../../library/xml.etree.elementtree.rst:460
#, fuzzy
msgid ""
"Selects all elements whose complete text content, including descendants, "
"equals the given ``text``."
msgstr "選擇其完整文本內容（包括後代）等於給定“文本”的所有元素。"

#: ../../library/xml.etree.elementtree.rst:465
msgid "``[.!='text']``"
msgstr "``[.!='text']``"

#: ../../library/xml.etree.elementtree.rst:465
#, fuzzy
msgid ""
"Selects all elements whose complete text content, including descendants, "
"does not equal the given ``text``."
msgstr "選擇其完整文本內容（包括後代）不等於給定“文本”的所有元素。"

#: ../../library/xml.etree.elementtree.rst:471
msgid "``[tag='text']``"
msgstr "``[tag='text']``"

#: ../../library/xml.etree.elementtree.rst:471
#, fuzzy
msgid ""
"Selects all elements that have a child named ``tag`` whose complete text "
"content, including descendants, equals the given ``text``."
msgstr "選擇具有名為 ``tag`` 的子元素的所有元素，其完整文本內容（包括後代）"
"等於給定的 ``text``。"

#: ../../library/xml.etree.elementtree.rst:475
msgid "``[tag!='text']``"
msgstr "``[tag!='text']``"

#: ../../library/xml.etree.elementtree.rst:475
#, fuzzy
msgid ""
"Selects all elements that have a child named ``tag`` whose complete text "
"content, including descendants, does not equal the given ``text``."
msgstr "選擇具有名為 ``tag``的子元素的所有元素，其完整文本內容（包括後代）不等於給定的“t"
"ext”。"

#: ../../library/xml.etree.elementtree.rst:481
msgid "``[position]``"
msgstr "``[position]``"

#: ../../library/xml.etree.elementtree.rst:481
#, fuzzy
msgid ""
"Selects all elements that are located at the given position.  The position "
"can be either an integer (1 is the first position), the expression "
"``last()`` (for the last position), or a position relative to the last "
"position (e.g. ``last()-1``)."
msgstr ""
"選擇位於給定位置的所有元素。該位置可以是整數（1 是第一個位置）、表達式“last()"
"”（表示最後一個位置）或相對於最後一個位置的位置（例如“last()-1”） )."

#: ../../library/xml.etree.elementtree.rst:488
#, fuzzy
msgid ""
"Predicates (expressions within square brackets) must be preceded by a tag "
"name, an asterisk, or another predicate.  ``position`` predicates must be "
"preceded by a tag name."
msgstr "謂詞（方括號內的表達式）前面必須有標記名稱、星號或其他謂詞。 ``position`` "
"謂詞前面必須有標籤名。"

#: ../../library/xml.etree.elementtree.rst:493
#: ../../library/xml.etree.elementtree.rst:821
#, fuzzy
msgid "Reference"
msgstr "參考"

#: ../../library/xml.etree.elementtree.rst:498
#: ../../library/xml.etree.elementtree.rst:826
msgid "Functions"
msgstr "函式"

#: ../../library/xml.etree.elementtree.rst:502
#, fuzzy
msgid "`C14N 2.0 <https://www.w3.org/TR/xml-c14n2/>`_ transformation function."
msgstr "`C14N 2.0 <https://www.w3.org/TR/xml-c14n2/>`_ 轉換函式。"

#: ../../library/xml.etree.elementtree.rst:504
#, fuzzy
msgid ""
"Canonicalization is a way to normalise XML output in a way that allows byte-"
"by-byte comparisons and digital signatures.  It reduced the freedom that XML "
"serializers have and instead generates a more constrained XML "
"representation.  The main restrictions regard the placement of namespace "
"declarations, the ordering of attributes, and ignorable whitespace."
msgstr ""
"規範化是一種以允許逐位元組比較和數字簽名的方式規範化 XML 輸出的方法。"
"它減少了 XML 序列化程式所具有的自由度，而是生成了更受限制的 XML "
"表示形式。主要限制涉及命名空間聲明的放置、屬性的順序和可忽略的空格。"

#: ../../library/xml.etree.elementtree.rst:510
#, fuzzy
msgid ""
"This function takes an XML data string (*xml_data*) or a file path or file-"
"like object (*from_file*) as input, converts it to the canonical form, and "
"writes it out using the *out* file(-like) object, if provided, or returns it "
"as a text string if not.  The output file receives text, not bytes.  It "
"should therefore be opened in text mode with ``utf-8`` encoding."
msgstr ""
"此函式將 XML 資料字串 (*xml_data*) 或文件路徑或類文件物件 (*from_file*) "
"作為輸入，將其轉換為規範形式，並使用 *out* 文件（-like）將其寫出物件（如果提"
"供），如果沒有，則將其作為文本字串回傳。輸出文件接收文本，而不是位元組。因此"
"，它應該以 ``utf-8``編碼的文本模式打開。"

#: ../../library/xml.etree.elementtree.rst:517
#, fuzzy
msgid "Typical uses::"
msgstr "典型用途::"

#: ../../library/xml.etree.elementtree.rst:528
#, fuzzy
msgid "The configuration *options* are as follows:"
msgstr "配置*選項*如下："

#: ../../library/xml.etree.elementtree.rst:530
#, fuzzy
msgid "*with_comments*: set to true to include comments (default: false)"
msgstr "*with_comments*：設定為 true 以包含評論（預設值：false）"

#: ../../library/xml.etree.elementtree.rst:531
#, fuzzy
msgid ""
"*strip_text*: set to true to strip whitespace before and after text content"
msgstr "*strip_text*：設定為 true 以去除文本內容前後的空白"

#: ../../library/xml.etree.elementtree.rst:532
#: ../../library/xml.etree.elementtree.rst:534
#, fuzzy
msgid "(default: false)"
msgstr "（預設值：假）"

#: ../../library/xml.etree.elementtree.rst:533
#, fuzzy
msgid ""
"*rewrite_prefixes*: set to true to replace namespace prefixes by "
"\"n{number}\""
msgstr "*rewrite_prefixes*：設定為 true 以用“n{number}”替換名稱空間前綴"

#: ../../library/xml.etree.elementtree.rst:535
#, fuzzy
msgid "*qname_aware_tags*: a set of qname aware tag names in which prefixes"
msgstr "*qname_aware_tags*：一組 qname 感知標籤名稱，其中前綴"

#: ../../library/xml.etree.elementtree.rst:536
#: ../../library/xml.etree.elementtree.rst:538
#, fuzzy
msgid "should be replaced in text content (default: empty)"
msgstr "應在文本內容中替換（預設值：空）"

#: ../../library/xml.etree.elementtree.rst:537
#, fuzzy
msgid ""
"*qname_aware_attrs*: a set of qname aware attribute names in which prefixes"
msgstr "*qname_aware_attrs*：一組 qname 感知屬性名稱，其中前綴"

#: ../../library/xml.etree.elementtree.rst:539
#, fuzzy
msgid "*exclude_attrs*: a set of attribute names that should not be serialised"
msgstr "*exclude_attrs*：一組不應該被序列化的屬性名"

#: ../../library/xml.etree.elementtree.rst:540
#, fuzzy
msgid "*exclude_tags*: a set of tag names that should not be serialised"
msgstr "*exclude_tags*：一組不應該被序列化的標籤名稱"

#: ../../library/xml.etree.elementtree.rst:542
#, fuzzy
msgid ""
"In the option list above, \"a set\" refers to any collection or iterable of "
"strings, no ordering is expected."
msgstr "在上面的選項列表中，“集合”指的是字串的任何集合或可疊代物件，不需要排序。"

#: ../../library/xml.etree.elementtree.rst:550
#, fuzzy
msgid ""
"Comment element factory.  This factory function creates a special element "
"that will be serialized as an XML comment by the standard serializer.  The "
"comment string can be either a bytestring or a Unicode string.  *text* is a "
"string containing the comment string.  Returns an element instance "
"representing a comment."
msgstr ""
"註釋元素工廠。這個工廠函式建立一個特殊元素，它將被標準序列化程式序列化為 XML "
"註釋。註釋字串可以是位元組串或 Unicode 字串。 *text* "
"是一個包含註釋字串的字串。回傳表示評論的元素實例。"

#: ../../library/xml.etree.elementtree.rst:556
#, fuzzy
msgid ""
"Note that :class:`XMLParser` skips over comments in the input instead of "
"creating comment objects for them. An :class:`ElementTree` will only contain "
"comment nodes if they have been inserted into to the tree using one of the :"
"class:`Element` methods."
msgstr ""
"請注意，XMLParser 會跳過輸入中的註釋，而不是為它們建立註釋物件。 "
":class:`ElementTree` 將僅包含註釋節點，如果它們已使用 :class:`Element` "
"方法之一插入到樹中。"

#: ../../library/xml.etree.elementtree.rst:563
#, fuzzy
msgid ""
"Writes an element tree or element structure to sys.stdout.  This function "
"should be used for debugging only."
msgstr "將元素樹或元素結構寫入 sys.stdout。此函式應僅用於除錯。"

#: ../../library/xml.etree.elementtree.rst:566
#, fuzzy
msgid ""
"The exact output format is implementation dependent.  In this version, it's "
"written as an ordinary XML file."
msgstr "確切的輸出格式取決於實作。在這個版本中，它被寫成一個普通的 XML 文件。"

#: ../../library/xml.etree.elementtree.rst:569
#, fuzzy
msgid "*elem* is an element tree or an individual element."
msgstr "*elem* 是元素樹或單個元素。"

#: ../../library/xml.etree.elementtree.rst:571
#, fuzzy
msgid ""
"The :func:`dump` function now preserves the attribute order specified by the "
"user."
msgstr ":func:`dump` 函式現在保留使用者指定的屬性順序。"

#: ../../library/xml.etree.elementtree.rst:578
#, fuzzy
msgid ""
"Parses an XML section from a string constant.  Same as :func:`XML`.  *text* "
"is a string containing XML data.  *parser* is an optional parser instance. "
"If not given, the standard :class:`XMLParser` parser is used. Returns an :"
"class:`Element` instance."
msgstr ""
"從字串常數剖析 XML 部分。與 :func:`XML` 相同。 *text* 是包含 XML 資料的字串。"
" *parser* 是一個可選的剖析器實例。如果未給出，則使用標準的 XMLParser 剖析器。"
"回傳一個 :class:`Element` 實例。"

#: ../../library/xml.etree.elementtree.rst:586
#, fuzzy
msgid ""
"Parses an XML document from a sequence of string fragments.  *sequence* is a "
"list or other sequence containing XML data fragments.  *parser* is an "
"optional parser instance.  If not given, the standard :class:`XMLParser` "
"parser is used.  Returns an :class:`Element` instance."
msgstr ""
"從一系列字串片段中剖析 XML 文檔。 *sequence* 是一個列表或其他包含 XML "
"資料片段的序列。 *parser* 是一個可選的剖析器實例。如果未給出，則使用標準的 "
"XMLParser 剖析器。回傳一個 :class:`Element` 實例。"

#: ../../library/xml.etree.elementtree.rst:596
#, fuzzy
msgid ""
"Appends whitespace to the subtree to indent the tree visually. This can be "
"used to generate pretty-printed XML output. *tree* can be an Element or "
"ElementTree.  *space* is the whitespace string that will be inserted for "
"each indentation level, two space characters by default.  For indenting "
"partial subtrees inside of an already indented tree, pass the initial "
"indentation level as *level*."
msgstr ""
"將空格附加到子樹以直觀地縮進樹。這可用於生成漂亮的 XML 輸出。 *tree* 可以是 "
"Element 或 ElementTree。 *space* 是將為每個縮進級別插入的空白字串，預設為兩個"
"空格字元。要在已縮進的樹中縮進部分子樹，請將初始縮進級別傳遞為 *level*。"

#: ../../library/xml.etree.elementtree.rst:608
#, fuzzy
msgid ""
"Check if an object appears to be a valid element object.  *element* is an "
"element instance.  Return ``True`` if this is an element object."
msgstr "檢查一個對像是否看起來是一個有效的元素物件。 *element* "
"是一個元素實例。如果這是一個元素物件，則回傳 ``True``。"

#: ../../library/xml.etree.elementtree.rst:614
#, fuzzy
msgid ""
"Parses an XML section into an element tree incrementally, and reports what's "
"going on to the user.  *source* is a filename or :term:`file object` "
"containing XML data.  *events* is a sequence of events to report back.  The "
"supported events are the strings ``\"start\"``, ``\"end\"``, ``\"comment"
"\"``, ``\"pi\"``, ``\"start-ns\"`` and ``\"end-ns\"`` (the \"ns\" events are "
"used to get detailed namespace information).  If *events* is omitted, only ``"
"\"end\"`` events are reported. *parser* is an optional parser instance.  If "
"not given, the standard :class:`XMLParser` parser is used.  *parser* must be "
"a subclass of :class:`XMLParser` and can only use the default :class:"
"`TreeBuilder` as a target.  Returns an :term:`iterator` providing ``(event, "
"elem)`` pairs."
msgstr ""
"將 XML 部分逐步剖析為元素樹，並向使用者報告正在發生的事情。 *source* 是包含 "
"XML 資料的文件名或 :term:`file object`。 *events* "
"是要報告的一系列事件。支援的事件是字串``\"start\"``、``\"end\"``、``\"comment"
"\"``、``\"pi\"``、``\"start-ns\"`` 和 `` “end-"
"ns”``（ ``ns``事件用於獲取詳細的命名空間資訊）。如果省略 *events*，則僅報告 ``"
"\"end\"`` 事件。 *parser* 是一個可選的剖析器實例。如果未給出，則使用標準的 "
"XMLParser 剖析器。 *parser* 必須是 :class:`XMLParser` 的子類別，"
"並且只能使用預設的 :class:`TreeBuilder` 作為目標。回傳一個提供 ``(event, "
"elem)`` 對的疊代器。"

#: ../../library/xml.etree.elementtree.rst:626
#, fuzzy
msgid ""
"Note that while :func:`iterparse` builds the tree incrementally, it issues "
"blocking reads on *source* (or the file it names).  As such, it's unsuitable "
"for applications where blocking reads can't be made.  For fully non-blocking "
"parsing, see :class:`XMLPullParser`."
msgstr ""
"請注意，雖然 :func:`iterparse` 以增量方式構建樹，但它會在 *source*（或它命名"
"的文件）上發出阻塞讀取。因此，它不適合無法進行阻塞讀取的應用程式。對於完全非"
"阻塞的剖析，請參見 :class:`XMLPullParser`。"

#: ../../library/xml.etree.elementtree.rst:633
#, fuzzy
msgid ""
":func:`iterparse` only guarantees that it has seen the \">\" character of a "
"starting tag when it emits a \"start\" event, so the attributes are defined, "
"but the contents of the text and tail attributes are undefined at that "
"point.  The same applies to the element children; they may or may not be "
"present."
msgstr ""
":func:`iterparse` "
"僅保證它在發出“開始”事件時已經看到起始標記的 ``>``字元，因此定義了屬性，"
"但此時未定義文本和尾部屬性的內容.這同樣適用於元素 "
"children；他們可能存在也可能不存在。"

#: ../../library/xml.etree.elementtree.rst:639
#: ../../library/xml.etree.elementtree.rst:1469
#, fuzzy
msgid "If you need a fully populated element, look for \"end\" events instead."
msgstr "如果您需要一個完全填充的元素，請改為查找“結束”事件。"

#: ../../library/xml.etree.elementtree.rst:641
msgid "The *parser* argument."
msgstr "*parser* 引數。"

#: ../../library/xml.etree.elementtree.rst:644
#: ../../library/xml.etree.elementtree.rst:1473
msgid "The ``comment`` and ``pi`` events were added."
msgstr "新增 *context* 與 *check_hostname* 事件。"

#: ../../library/xml.etree.elementtree.rst:650
#, fuzzy
msgid ""
"Parses an XML section into an element tree.  *source* is a filename or file "
"object containing XML data.  *parser* is an optional parser instance.  If "
"not given, the standard :class:`XMLParser` parser is used.  Returns an :"
"class:`ElementTree` instance."
msgstr ""
"將 XML 部分剖析為元素樹。 *source* 是包含 XML 資料的文件名或文件物件。 "
"*parser* 是一個可選的剖析器實例。如果未給出，則使用標準的 XMLParser 剖析器。"
"回傳一個 ElementTree 實例。"

#: ../../library/xml.etree.elementtree.rst:658
#, fuzzy
msgid ""
"PI element factory.  This factory function creates a special element that "
"will be serialized as an XML processing instruction.  *target* is a string "
"containing the PI target.  *text* is a string containing the PI contents, if "
"given.  Returns an element instance, representing a processing instruction."
msgstr ""
"PI元件工廠。該工廠函式建立一個特殊元素，該元素將被序列化為 XML 處理指令。 "
"*target* 是一個包含 PI 目標的字串。 *text* 是包含 PI "
"內容的字串（如果給定）。回傳一個元素實例，表示一個處理指令。"

#: ../../library/xml.etree.elementtree.rst:663
#, fuzzy
msgid ""
"Note that :class:`XMLParser` skips over processing instructions in the input "
"instead of creating comment objects for them. An :class:`ElementTree` will "
"only contain processing instruction nodes if they have been inserted into to "
"the tree using one of the :class:`Element` methods."
msgstr ""
"請注意，XMLParser 會跳過輸入中的處理指令，而不是為它們建立註釋物件。 "
":class:`ElementTree` 將僅包含處理指令節點，前提是它們已使用 :class:`Element` "
"方法之一插入到樹中。"

#: ../../library/xml.etree.elementtree.rst:671
#, fuzzy
msgid ""
"Registers a namespace prefix.  The registry is global, and any existing "
"mapping for either the given prefix or the namespace URI will be removed. "
"*prefix* is a namespace prefix.  *uri* is a namespace uri.  Tags and "
"attributes in this namespace will be serialized with the given prefix, if at "
"all possible."
msgstr ""
"註冊命名空間前綴。註冊表是全局的，給定前綴或名稱空間 URI "
"的任何現有映射都將被刪除。 *prefix* 是命名空間前綴。 *uri* 是命名空間 "
"uri。如果可能的話，這個命名空間中的標籤和屬性將使用給定的前綴進行序列化。"

#: ../../library/xml.etree.elementtree.rst:682
#, fuzzy
msgid ""
"Subelement factory.  This function creates an element instance, and appends "
"it to an existing element."
msgstr "子元素工廠。此函式建立一個元素實例，並將其附加到現有元素。"

#: ../../library/xml.etree.elementtree.rst:685
#, fuzzy
msgid ""
"The element name, attribute names, and attribute values can be either "
"bytestrings or Unicode strings.  *parent* is the parent element.  *tag* is "
"the subelement name.  *attrib* is an optional dictionary, containing element "
"attributes.  *extra* contains additional attributes, given as keyword "
"arguments.  Returns an element instance."
msgstr ""
"元素名稱、屬性名稱和屬性值可以是位元組串或 Unicode 字串。 *parent* 是父元素。"
" *tag* 是子元素名稱。 *attrib* 是一個可選的字典，包含元素屬性。 *extra* "
"包含額外的屬性，作為關鍵字參數給出。回傳一個元素實例。"

#: ../../library/xml.etree.elementtree.rst:696
#, fuzzy
msgid ""
"Generates a string representation of an XML element, including all "
"subelements.  *element* is an :class:`Element` instance.  *encoding* [1]_ is "
"the output encoding (default is US-ASCII).  Use ``encoding=\"unicode\"`` to "
"generate a Unicode string (otherwise, a bytestring is generated).  *method* "
"is either ``\"xml\"``, ``\"html\"`` or ``\"text\"`` (default is ``\"xml"
"\"``). *xml_declaration*, *default_namespace* and *short_empty_elements* has "
"the same meaning as in :meth:`ElementTree.write`. Returns an (optionally) "
"encoded string containing the XML data."
msgstr ""
"生成 XML 元素的字串表示形式，包括所有子元素。 *element* 是一個 "
":class:`Element` 實例。 *encoding* [1]_ 是輸出編碼（預設為 US-ASCII）。使用 "
"``encoding=\"unicode\"`` 生成 Unicode 字串（否則生成位元組串）。 *method* 是 "
"``\"xml\"``、``\"html\"`` 或 ``\"text\"``（預設為 ``\"xml\"``）。 "
"*xml_declaration*、*default_namespace* 和 "
"*short_empty_elements* 與 ElementTree.write 中的含義相同。回傳包含 XML "
"資料的（可選）編碼字串。"

#: ../../library/xml.etree.elementtree.rst:705
#: ../../library/xml.etree.elementtree.rst:732
#: ../../library/xml.etree.elementtree.rst:1181
msgid "The *short_empty_elements* parameter."
msgstr "*short_empty_elements* 參數。"

#: ../../library/xml.etree.elementtree.rst:708
#: ../../library/xml.etree.elementtree.rst:735
#, fuzzy
msgid "The *xml_declaration* and *default_namespace* parameters."
msgstr "*xml_declaration* 和 *default_namespace* 參數。"

#: ../../library/xml.etree.elementtree.rst:711
#, fuzzy
msgid ""
"The :func:`tostring` function now preserves the attribute order specified by "
"the user."
msgstr ":func:`tostring` 函式現在保留使用者指定的屬性順序。"

#: ../../library/xml.etree.elementtree.rst:720
#, fuzzy
msgid ""
"Generates a string representation of an XML element, including all "
"subelements.  *element* is an :class:`Element` instance.  *encoding* [1]_ is "
"the output encoding (default is US-ASCII).  Use ``encoding=\"unicode\"`` to "
"generate a Unicode string (otherwise, a bytestring is generated).  *method* "
"is either ``\"xml\"``, ``\"html\"`` or ``\"text\"`` (default is ``\"xml"
"\"``). *xml_declaration*, *default_namespace* and *short_empty_elements* has "
"the same meaning as in :meth:`ElementTree.write`. Returns a list of "
"(optionally) encoded strings containing the XML data. It does not guarantee "
"any specific sequence, except that ``b\"\".join(tostringlist(element)) == "
"tostring(element)``."
msgstr ""
"生成 XML 元素的字串表示形式，包括所有子元素。 *element* 是一個 "
":class:`Element` 實例。 *encoding* [1]_ 是輸出編碼（預設為 US-ASCII）。使用 "
"``encoding=\"unicode\"`` 生成 Unicode 字串（否則生成位元組串）。 *method* 是 "
"``\"xml\"``、``\"html\"`` 或 ``\"text\"``（預設為 ``\"xml\"``）。 "
"*xml_declaration*、*default_namespace* 和 "
"*short_empty_elements* 與 ElementTree.write 中的含義相同。回傳包含 XML "
"資料的（可選）編碼字串列表。它不保證任何特定的順序，除了``b\"\"."
"join(tostringlist(element)) == tostring(element)``。"

#: ../../library/xml.etree.elementtree.rst:738
#, fuzzy
msgid ""
"The :func:`tostringlist` function now preserves the attribute order "
"specified by the user."
msgstr ":func:`tostringlist` 函式現在保留使用者指定的屬性順序。"

#: ../../library/xml.etree.elementtree.rst:745
#, fuzzy
msgid ""
"Parses an XML section from a string constant.  This function can be used to "
"embed \"XML literals\" in Python code.  *text* is a string containing XML "
"data.  *parser* is an optional parser instance.  If not given, the standard :"
"class:`XMLParser` parser is used.  Returns an :class:`Element` instance."
msgstr ""
"從字串常數剖析 XML 部分。此函式可用於在 Python 程式碼中嵌入“XML 文字”。 "
"*text* 是包含 XML 資料的字串。 *parser* 是一個可選的剖析器實例。如果未給出，"
"則使用標準的 XMLParser 剖析器。回傳一個 :class:`Element` 實例。"

#: ../../library/xml.etree.elementtree.rst:753
#, fuzzy
msgid ""
"Parses an XML section from a string constant, and also returns a dictionary "
"which maps from element id:s to elements.  *text* is a string containing XML "
"data.  *parser* is an optional parser instance.  If not given, the standard :"
"class:`XMLParser` parser is used.  Returns a tuple containing an :class:"
"`Element` instance and a dictionary."
msgstr ""
"從字串常數剖析 XML 部分，並回傳從元素 id:s 映射到元素的字典。 *text* 是包含 "
"XML 資料的字串。 *parser* 是一個可選的剖析器實例。如果未給出，則使用標準的 "
"XMLParser 剖析器。回傳一個包含 :class:`Element` 實例和字典的元組。"

#: ../../library/xml.etree.elementtree.rst:763
#, fuzzy
msgid "XInclude support"
msgstr "X包括支援"

#: ../../library/xml.etree.elementtree.rst:765
#, fuzzy
msgid ""
"This module provides limited support for `XInclude directives <https://www."
"w3.org/TR/xinclude/>`_, via the :mod:`xml.etree.ElementInclude` helper "
"module.  This module can be used to insert subtrees and text strings into "
"element trees, based on information in the tree."
msgstr ""
"此模組通過 :mod:`xml.etree.ElementInclude` 幫助程式模組為 `XInclude 指令 "
"<https://www.w3.org/TR/xinclude/>`_ "
"提供有限支援。該模組可用於根據樹中的資訊將子樹和文本字串插入到元素樹中。"

#: ../../library/xml.etree.elementtree.rst:771
#, fuzzy
msgid ""
"Here's an example that demonstrates use of the XInclude module. To include "
"an XML document in the current document, use the ``{http://www.w3.org/2001/"
"XInclude}include`` element and set the **parse** attribute to ``\"xml\"``, "
"and use the **href** attribute to specify the document to include."
msgstr ""
"下面是一個演示 XInclude 模組用法的示例。要在當前文檔中包含 XML "
"文檔，請使用``{http://www.w3.org/2001/XInclude}include`` 元素並將**parse** "
"屬性設定為``\"xml\"`` , 並使用 **href** 屬性指定要包含的文檔。"

#: ../../library/xml.etree.elementtree.rst:780
#, fuzzy
msgid ""
"By default, the **href** attribute is treated as a file name. You can use "
"custom loaders to override this behaviour. Also note that the standard "
"helper does not support XPointer syntax."
msgstr "預設情況下，**href** "
"屬性被視為文件名。您可以使用自定義加載器來覆蓋此行為。另請注意，"
"標準幫助程式不支援 XPointer 語法。"

#: ../../library/xml.etree.elementtree.rst:782
#, fuzzy
msgid ""
"To process this file, load it as usual, and pass the root element to the :"
"mod:`xml.etree.ElementTree` module:"
msgstr "要處理此文件，請照常加載它，並將根元素傳遞給 :mod:`xml.etree.ElementTree` "
"模組："

#: ../../library/xml.etree.elementtree.rst:793
#, fuzzy
msgid ""
"The ElementInclude module replaces the ``{http://www.w3.org/2001/XInclude}"
"include`` element with the root element from the **source.xml** document. "
"The result might look something like this:"
msgstr ""
"ElementInclude 模組將 ``{http://www.w3.org/2001/XInclude}include`` "
"元素替換為 **source.xml** 文檔中的根元素。結果可能看起來像這樣："

#: ../../library/xml.etree.elementtree.rst:801
#, fuzzy
msgid ""
"If the **parse** attribute is omitted, it defaults to \"xml\". The href "
"attribute is required."
msgstr "如果省略 **parse** 屬性，則預設為 ``xml``。 href 屬性是必需的。"

#: ../../library/xml.etree.elementtree.rst:803
#, fuzzy
msgid ""
"To include a text document, use the ``{http://www.w3.org/2001/XInclude}"
"include`` element, and set the **parse** attribute to \"text\":"
msgstr ""
"要包含文本文檔，請使用``{http://www.w3.org/2001/XInclude}include`` "
"元素，並將**parse** 屬性設定為“文本”："

#: ../../library/xml.etree.elementtree.rst:812
#, fuzzy
msgid "The result might look something like:"
msgstr "結果可能類似於："

#: ../../library/xml.etree.elementtree.rst:831
#, fuzzy
msgid ""
"Default loader. This default loader reads an included resource from disk.  "
"*href* is a URL. *parse* is for parse mode either \"xml\" or \"text\".  "
"*encoding* is an optional text encoding.  If not given, encoding is "
"``utf-8``.  Returns the expanded resource.  If the parse mode is ``\"xml"
"\"``, this is an ElementTree instance.  If the parse mode is \"text\", this "
"is a Unicode string.  If the loader fails, it can return None or raise an "
"exception."
msgstr ""
"預設加載程式。此預設加載程式從磁盤讀取包含的資源。 *href* 是一個 URL。 "
"*parse* 用於剖析模式 ``xml``或 ``text``。 *encoding* "
"是可選的文本編碼。如果未給出，則編碼為 ``utf-8``。回傳擴充的資源。"
"如果剖析模式是 ``\"xml\"``，這是一個 ElementTree 實例。如果剖析模式是“文本”，"
"這是一個 Unicode 字串。如果加載器失敗，它可以回傳 None 或引發例外。"

#: ../../library/xml.etree.elementtree.rst:843
#, fuzzy
msgid ""
"This function expands XInclude directives.  *elem* is the root element.  "
"*loader* is an optional resource loader.  If omitted, it defaults to :func:"
"`default_loader`. If given, it should be a callable that implements the same "
"interface as :func:`default_loader`.  *base_url* is base URL of the original "
"file, to resolve relative include file references.  *max_depth* is the "
"maximum number of recursive inclusions.  Limited to reduce the risk of "
"malicious content explosion. Pass a negative value to disable the limitation."
msgstr ""
"此函式擴充了 XInclude 指令。 *elem* 是根元素。 *loader* "
"是一個可選的資源加載器。如果省略，則預設為 :func:`default_loader`。如果給定，"
"它應該是一個實作與 default_loader 相同介面的可呼叫物件。 *base_url* "
"是原始文件的基本 URL，用於剖析相對包含文件引用。 *max_depth* "
"是遞迴包含的最大數量。限制以降低惡意內容爆炸的風險。傳遞負值以禁用限制。"

#: ../../library/xml.etree.elementtree.rst:851
#, fuzzy
msgid ""
"Returns the expanded resource.  If the parse mode is ``\"xml\"``, this is an "
"ElementTree instance.  If the parse mode is \"text\", this is a Unicode "
"string.  If the loader fails, it can return None or raise an exception."
msgstr ""
"回傳擴充的資源。如果剖析模式是 ``\"xml\"``，這是一個 ElementTree "
"實例。如果剖析模式是“文本”，這是一個 Unicode 字串。如果加載器失敗，"
"它可以回傳 None 或引發例外。"

#: ../../library/xml.etree.elementtree.rst:856
#, fuzzy
msgid "The *base_url* and *max_depth* parameters."
msgstr "*base_url* 和 *max_depth* 參數。"

#: ../../library/xml.etree.elementtree.rst:863
#, fuzzy
msgid "Element Objects"
msgstr "元素物件"

#: ../../library/xml.etree.elementtree.rst:867
#, fuzzy
msgid ""
"Element class.  This class defines the Element interface, and provides a "
"reference implementation of this interface."
msgstr "元素類。該類定義了 Element 介面，並提供了該介面的參考實作。"

#: ../../library/xml.etree.elementtree.rst:870
#, fuzzy
msgid ""
"The element name, attribute names, and attribute values can be either "
"bytestrings or Unicode strings.  *tag* is the element name.  *attrib* is an "
"optional dictionary, containing element attributes.  *extra* contains "
"additional attributes, given as keyword arguments."
msgstr ""
"元素名稱、屬性名稱和屬性值可以是位元組串或 Unicode 字串。 *tag* 是元素名稱。 "
"*attrib* 是一個可選的字典，包含元素屬性。 *extra* "
"包含額外的屬性，作為關鍵字參數給出。"

#: ../../library/xml.etree.elementtree.rst:878
#, fuzzy
msgid ""
"A string identifying what kind of data this element represents (the element "
"type, in other words)."
msgstr "一個字串，標識此元素表示的資料型別（換句話說，元素型別）。"

#: ../../library/xml.etree.elementtree.rst:885
#, fuzzy
msgid ""
"These attributes can be used to hold additional data associated with the "
"element.  Their values are usually strings but may be any application-"
"specific object.  If the element is created from an XML file, the *text* "
"attribute holds either the text between the element's start tag and its "
"first child or end tag, or ``None``, and the *tail* attribute holds either "
"the text between the element's end tag and the next tag, or ``None``.  For "
"the XML data"
msgstr ""
"這些屬性可用於保存與元素關聯的附加資料。它們的值通常是字串，但也可以是任何特"
"定於應用程式的物件。如果元素是從 XML 文件建立的，則 *text* "
"屬性保存元素的開始標記與其第一個子標記或結束標記之間的文本，或者 ``None`` ，而 "
"*tail* 屬性保存元素之間的文本元素的結束標記和下一個標記，或 ``None`` 。對於 XML "
"資料"

#: ../../library/xml.etree.elementtree.rst:897
#, fuzzy
msgid ""
"the *a* element has ``None`` for both *text* and *tail* attributes, the *b* "
"element has *text* ``\"1\"`` and *tail* ``\"4\"``, the *c* element has "
"*text* ``\"2\"`` and *tail* ``None``, and the *d* element has *text* "
"``None`` and *tail* ``\"3\"``."
msgstr ""
"*a* 元素對於 *text* 和 *tail* 屬性都具有 ``None``，*b* 元素具有 *text* ``\"1"
"\"`` 和 *tail* ``\"4\"``， *c* 元素有 *text* ``\"2\"`` 和 *tail* "
"``None``，*d* 元素有 *text* ``None`` 和 *tail* ``\"3\" ``。"

#: ../../library/xml.etree.elementtree.rst:902
#, fuzzy
msgid ""
"To collect the inner text of an element, see :meth:`itertext`, for example ``"
"\"\".join(element.itertext())``."
msgstr "要收集元素的內部文本，請參閱 :meth:`itertext`，例如``\"\".join(element."
"itertext())``。"

#: ../../library/xml.etree.elementtree.rst:905
#, fuzzy
msgid "Applications may store arbitrary objects in these attributes."
msgstr "應用程式可以在這些屬性中儲存任意物件。"

#: ../../library/xml.etree.elementtree.rst:910
#, fuzzy
msgid ""
"A dictionary containing the element's attributes.  Note that while the "
"*attrib* value is always a real mutable Python dictionary, an ElementTree "
"implementation may choose to use another internal representation, and create "
"the dictionary only if someone asks for it.  To take advantage of such "
"implementations, use the dictionary methods below whenever possible."
msgstr ""
"包含元素屬性的字典。請注意，雖然 *attrib* 值始終是一個真正的可變 Python "
"字典，但 ElementTree 實作可能會選擇使用另一種內部表示，並且僅在有人要求時才建"
"立字典。要利用此類實作，請盡可能使用下面的字典方法。"

#: ../../library/xml.etree.elementtree.rst:916
#, fuzzy
msgid "The following dictionary-like methods work on the element attributes."
msgstr "以下類似字典的方法適用於元素屬性。"

#: ../../library/xml.etree.elementtree.rst:921
#, fuzzy
msgid ""
"Resets an element.  This function removes all subelements, clears all "
"attributes, and sets the text and tail attributes to ``None``."
msgstr "重置元素。此函式刪除所有子元素，清除所有屬性，並將文本和尾部屬性設定為 ``None`` 。"

#: ../../library/xml.etree.elementtree.rst:927
#, fuzzy
msgid "Gets the element attribute named *key*."
msgstr "獲取名為 *key* 的元素屬性。"

#: ../../library/xml.etree.elementtree.rst:929
#, fuzzy
msgid ""
"Returns the attribute value, or *default* if the attribute was not found."
msgstr "回傳屬性值，如果未找到該屬性，則回傳 *default*。"

#: ../../library/xml.etree.elementtree.rst:934
#, fuzzy
msgid ""
"Returns the element attributes as a sequence of (name, value) pairs.  The "
"attributes are returned in an arbitrary order."
msgstr "將元素屬性作為（名稱，值）對的序列回傳。屬性以任意順序回傳。"

#: ../../library/xml.etree.elementtree.rst:940
#, fuzzy
msgid ""
"Returns the elements attribute names as a list.  The names are returned in "
"an arbitrary order."
msgstr "將元素屬性名稱作為列表回傳。名稱以任意順序回傳。"

#: ../../library/xml.etree.elementtree.rst:946
#, fuzzy
msgid "Set the attribute *key* on the element to *value*."
msgstr "將元素上的屬性 *key* 設定為 *value*。"

#: ../../library/xml.etree.elementtree.rst:948
#, fuzzy
msgid "The following methods work on the element's children (subelements)."
msgstr "以下方法適用於元素的子元素（子元素）。"

#: ../../library/xml.etree.elementtree.rst:953
#, fuzzy
msgid ""
"Adds the element *subelement* to the end of this element's internal list of "
"subelements.  Raises :exc:`TypeError` if *subelement* is not an :class:"
"`Element`."
msgstr ""
"將元素 *subelement* 新增到此元素的內部子元素列表的末尾。如果 *subelement* "
"不是 :class:`Element` 則引發 :exc:`TypeError`。"

#: ../../library/xml.etree.elementtree.rst:960
#, fuzzy
msgid ""
"Appends *subelements* from a sequence object with zero or more elements. "
"Raises :exc:`TypeError` if a subelement is not an :class:`Element`."
msgstr ""
"從具有零個或多個元素的序列物件追加 *subelements*。如果子元素不是 "
":class:`Element` 則引發 :exc:`TypeError`。"

#: ../../library/xml.etree.elementtree.rst:968
#, fuzzy
msgid ""
"Finds the first subelement matching *match*.  *match* may be a tag name or "
"a :ref:`path <elementtree-xpath>`.  Returns an element instance or "
"``None``.  *namespaces* is an optional mapping from namespace prefix to full "
"name.  Pass ``''`` as prefix to move all unprefixed tag names in the "
"expression into the given namespace."
msgstr ""
"查找第一個匹配 *match* 的子元素。 *match* 可以是標籤名稱或 :ref:`path "
"<elementtree-xpath>`。回傳一個元素實例或 ``None`` 。 *namespaces* "
"是從命名空間前綴到全名的可選映射。將 ``''`` "
"作為前綴傳遞，以將表達式中所有未加前綴的標記名稱移動到給定的命名空間中。"

#: ../../library/xml.etree.elementtree.rst:977
#, fuzzy
msgid ""
"Finds all matching subelements, by tag name or :ref:`path <elementtree-"
"xpath>`.  Returns a list containing all matching elements in document "
"order.  *namespaces* is an optional mapping from namespace prefix to full "
"name.  Pass ``''`` as prefix to move all unprefixed tag names in the "
"expression into the given namespace."
msgstr ""
"通過標記名稱或 :ref:`path <elementtree-xpath>` "
"查找所有匹配的子元素。回傳包含按文檔順序排列的所有匹配元素的列表。 "
"*namespaces* 是從命名空間前綴到全名的可選映射。將 ``''`` "
"作為前綴傳遞，以將表達式中所有未加前綴的標記名稱移動到給定的命名空間中。"

#: ../../library/xml.etree.elementtree.rst:986
#, fuzzy
msgid ""
"Finds text for the first subelement matching *match*.  *match* may be a tag "
"name or a :ref:`path <elementtree-xpath>`.  Returns the text content of the "
"first matching element, or *default* if no element was found. Note that if "
"the matching element has no text content an empty string is returned. "
"*namespaces* is an optional mapping from namespace prefix to full name.  "
"Pass ``''`` as prefix to move all unprefixed tag names in the expression "
"into the given namespace."
msgstr ""
"查找匹配 *match* 的第一個子元素的文本。 *match* 可以是標籤名稱或 :ref:`path "
"<elementtree-xpath>`。回傳第一個匹配元素的文本內容，如果沒有找到元素，則回傳 "
"*default*。請注意，如果匹配元素沒有文本內容，則回傳一個空字串。 *namespaces* "
"是從命名空間前綴到全名的可選映射。將 ``''`` "
"作為前綴傳遞，以將表達式中所有未加前綴的標記名稱移動到給定的命名空間中。"

#: ../../library/xml.etree.elementtree.rst:997
#, fuzzy
msgid ""
"Inserts *subelement* at the given position in this element.  Raises :exc:"
"`TypeError` if *subelement* is not an :class:`Element`."
msgstr ""
"在此元素中的給定位置插入 *subelement*。如果 *subelement* 不是 "
":class:`Element` 則引發 :exc:`TypeError`。"

#: ../../library/xml.etree.elementtree.rst:1003
#, fuzzy
msgid ""
"Creates a tree :term:`iterator` with the current element as the root. The "
"iterator iterates over this element and all elements below it, in document "
"(depth first) order.  If *tag* is not ``None`` or ``'*'``, only elements "
"whose tag equals *tag* are returned from the iterator.  If the tree "
"structure is modified during iteration, the result is undefined."
msgstr ""
"建立一個以當前元素為根的樹 "
":term:`iterator`。疊代器以文檔（深度優先）順序疊代此元素及其下方的所有元素。"
"如果 *tag* 不是 ``None`` 或 ``'*'``，則疊代器只回傳標籤等於 *tag* "
"的元素。如果在疊代過程中修改了樹結構，則結果是未定義的。"

#: ../../library/xml.etree.elementtree.rst:1014
#, fuzzy
msgid ""
"Finds all matching subelements, by tag name or :ref:`path <elementtree-"
"xpath>`.  Returns an iterable yielding all matching elements in document "
"order. *namespaces* is an optional mapping from namespace prefix to full "
"name."
msgstr ""
"通過標記名稱或 :ref:`path <elementtree-xpath>` 查找所有匹配的子元素。"
"回傳一個 iterable，以文檔順序產生所有匹配的元素。 *namespaces* "
"是從命名空間前綴到全名的可選映射。"

#: ../../library/xml.etree.elementtree.rst:1025
#, fuzzy
msgid ""
"Creates a text iterator.  The iterator loops over this element and all "
"subelements, in document order, and returns all inner text."
msgstr "建立一個文本疊代器。疊代器按文檔順序遍歷此元素和所有子元素，並回傳所有內部文"
"本。"

#: ../../library/xml.etree.elementtree.rst:1033
#, fuzzy
msgid ""
"Creates a new element object of the same type as this element.  Do not call "
"this method, use the :func:`SubElement` factory function instead."
msgstr "建立與此元素型別相同的新元素物件。不要呼叫此方法，而是使用 :func:`SubElement`"
" 工廠函式。"

#: ../../library/xml.etree.elementtree.rst:1039
#, fuzzy
msgid ""
"Removes *subelement* from the element.  Unlike the find\\* methods this "
"method compares elements based on the instance identity, not on tag value or "
"contents."
msgstr "從元素中移除 *subelement*。與 find\\* "
"方法不同，此方法根據實例標識而不是標記值或內容來比較元素。"

#: ../../library/xml.etree.elementtree.rst:1043
#, fuzzy
msgid ""
":class:`Element` objects also support the following sequence type methods "
"for working with subelements: :meth:`~object.__delitem__`, :meth:`~object."
"__getitem__`, :meth:`~object.__setitem__`, :meth:`~object.__len__`."
msgstr ""
":class:`Element` 對像還支援以下用於處理子元素的序列型別方法：:meth:`~object."
"__delitem__`, :meth:`~object.__getitem__`, :meth:`~object.__setitem__`, "
":方法：`~object.__len__`。"

#: ../../library/xml.etree.elementtree.rst:1048
#, fuzzy
msgid ""
"Caution: Elements with no subelements will test as ``False``.  This behavior "
"will change in future versions.  Use specific ``len(elem)`` or ``elem is "
"None`` test instead. ::"
msgstr ""
"注意：沒有子元素的元素將測試為 ``False``。此行為將在未來版本中更改。"
"請改用特定的 ``len(elem)`` 或 ``elem is None`` 測試。 ::"

#: ../../library/xml.etree.elementtree.rst:1060
#, fuzzy
msgid ""
"Prior to Python 3.8, the serialisation order of the XML attributes of "
"elements was artificially made predictable by sorting the attributes by "
"their name. Based on the now guaranteed ordering of dicts, this arbitrary "
"reordering was removed in Python 3.8 to preserve the order in which "
"attributes were originally parsed or created by user code."
msgstr ""
"在 Python 3.8 之前，元素的 XML 屬性的序列化順序是通過按屬性名稱排序來人為地使"
"其可預測的。基於現在保證的字典排序，這種任意重新排序在 Python 3.8 "
"中被刪除，以保留使用者程式碼最初剖析或建立屬性的順序。"

#: ../../library/xml.etree.elementtree.rst:1066
#, fuzzy
msgid ""
"In general, user code should try not to depend on a specific ordering of "
"attributes, given that the `XML Information Set <https://www.w3.org/TR/xml-"
"infoset/>`_ explicitly excludes the attribute order from conveying "
"information. Code should be prepared to deal with any ordering on input. In "
"cases where deterministic XML output is required, e.g. for cryptographic "
"signing or test data sets, canonical serialisation is available with the :"
"func:`canonicalize` function."
msgstr ""
"一般來說，使用者程式碼應該盡量不依賴於特定的屬性順序，因為 `XML 資訊集 "
"<https://www.w3.org/TR/xml-infoset/>`_ "
"明確排除了屬性順序傳遞資訊。程式碼應該準備好處理任何輸入順序。在需要確定性 "
"XML 輸出的情況下，例如對於加密簽名或測試資料集，規範序列化可通過 "
":func:`canonicalize` 函式獲得。"

#: ../../library/xml.etree.elementtree.rst:1074
#, fuzzy
msgid ""
"In cases where canonical output is not applicable but a specific attribute "
"order is still desirable on output, code should aim for creating the "
"attributes directly in the desired order, to avoid perceptual mismatches for "
"readers of the code. In cases where this is difficult to achieve, a recipe "
"like the following can be applied prior to serialisation to enforce an order "
"independently from the Element creation::"
msgstr ""
"在規範輸出不適用但仍希望輸出特定屬性順序的情況下，程式碼應旨在以所需順序直接"
"建立屬性，以避免程式碼讀者的感知不匹配。在難以實作的情況下，可以在序列化之前"
"應用如下配方，以獨立於元素建立來強制執行順序："

#: ../../library/xml.etree.elementtree.rst:1094
msgid "ElementTree Objects"
msgstr "ElementTree 物件"

#: ../../library/xml.etree.elementtree.rst:1099
#, fuzzy
msgid ""
"ElementTree wrapper class.  This class represents an entire element "
"hierarchy, and adds some extra support for serialization to and from "
"standard XML."
msgstr "ElementTree 包裝類。此類表示整個元素層次結構，並新增了一些對標準 XML "
"序列化和從標準 XML 序列化的額外支援。"

#: ../../library/xml.etree.elementtree.rst:1103
#, fuzzy
msgid ""
"*element* is the root element.  The tree is initialized with the contents of "
"the XML *file* if given."
msgstr "*element* 是根元素。如果給定，樹將使用 XML *文件* 的內容進行初始化。"

#: ../../library/xml.etree.elementtree.rst:1109
#, fuzzy
msgid ""
"Replaces the root element for this tree.  This discards the current contents "
"of the tree, and replaces it with the given element.  Use with care.  "
"*element* is an element instance."
msgstr "替換此樹的根元素。這會丟棄樹的當前內容，並用給定的元素替換它。小心使用。 "
"*element* 是一個元素實例。"

#: ../../library/xml.etree.elementtree.rst:1116
#, fuzzy
msgid "Same as :meth:`Element.find`, starting at the root of the tree."
msgstr "與 :meth:`Element.find` 相同，從樹的根開始。"

#: ../../library/xml.etree.elementtree.rst:1121
#, fuzzy
msgid "Same as :meth:`Element.findall`, starting at the root of the tree."
msgstr "與 :meth:`Element.findall` 相同，從樹的根開始。"

#: ../../library/xml.etree.elementtree.rst:1126
#, fuzzy
msgid "Same as :meth:`Element.findtext`, starting at the root of the tree."
msgstr "與 :meth:`Element.findtext` 相同，從樹的根開始。"

#: ../../library/xml.etree.elementtree.rst:1131
#, fuzzy
msgid "Returns the root element for this tree."
msgstr "回傳此樹的根元素。"

#: ../../library/xml.etree.elementtree.rst:1136
#, fuzzy
msgid ""
"Creates and returns a tree iterator for the root element.  The iterator "
"loops over all elements in this tree, in section order.  *tag* is the tag to "
"look for (default is to return all elements)."
msgstr "為根元素建立並回傳一個樹疊代器。疊代器按部分順序遍歷此樹中的所有元素。 *tag* "
"是要查找的標籤（預設是回傳所有元素）。"

#: ../../library/xml.etree.elementtree.rst:1143
#, fuzzy
msgid "Same as :meth:`Element.iterfind`, starting at the root of the tree."
msgstr "與 :meth:`Element.iterfind` 相同，從樹的根開始。"

#: ../../library/xml.etree.elementtree.rst:1150
#, fuzzy
msgid ""
"Loads an external XML section into this element tree.  *source* is a file "
"name or :term:`file object`.  *parser* is an optional parser instance. If "
"not given, the standard :class:`XMLParser` parser is used.  Returns the "
"section root element."
msgstr ""
"將外部 XML 部分加載到此元素樹中。 *source* 是文件名或 :term:`file object`。 "
"*parser* 是一個可選的剖析器實例。如果未給出，則使用標準的 XMLParser "
"剖析器。回傳節的根元素。"

#: ../../library/xml.etree.elementtree.rst:1160
#, fuzzy
msgid ""
"Writes the element tree to a file, as XML.  *file* is a file name, or a :"
"term:`file object` opened for writing.  *encoding* [1]_ is the output "
"encoding (default is US-ASCII). *xml_declaration* controls if an XML "
"declaration should be added to the file.  Use ``False`` for never, ``True`` "
"for always, ``None`` for only if not US-ASCII or UTF-8 or Unicode (default "
"is ``None``). *default_namespace* sets the default XML namespace (for \"xmlns"
"\"). *method* is either ``\"xml\"``, ``\"html\"`` or ``\"text\"`` (default "
"is ``\"xml\"``). The keyword-only *short_empty_elements* parameter controls "
"the formatting of elements that contain no content.  If ``True`` (the "
"default), they are emitted as a single self-closed tag, otherwise they are "
"emitted as a pair of start/end tags."
msgstr ""
"將元素樹作為 XML 寫入文件。 *file* "
"是一個文件名，或者是一個為寫入而打開的文件物件。 *encoding* [1]_ 是輸出編碼（"
"預設為 US-ASCII）。 *xml_declaration* 控制是否應將 XML 聲明新增到文件中。"
"使用 ``False`` 表示從不，``True`` 表示始終，``None`` 僅當不是 US-ASCII 或 "
"UTF-8 或 Unicode 時（預設為 ``None``）。 *default_namespace* 設定預設的 XML "
"命名空間（對於 ``xmlns``）。 *method* 是 ``\"xml\"``、``\"html\"`` 或 ``\"text\""
"``（預設為 ``\"xml\"``）。僅限關鍵字的 *short_empty_elements* 參數控制不包含"
"內容的元素的格式。如果為 ``True``（預設值），它們將作為單個自閉合標籤發出，否則"
"它們將作為一對開始/結束標籤發出。"

#: ../../library/xml.etree.elementtree.rst:1174
#, fuzzy
msgid ""
"The output is either a string (:class:`str`) or binary (:class:`bytes`). "
"This is controlled by the *encoding* argument.  If *encoding* is ``\"unicode"
"\"``, the output is a string; otherwise, it's binary.  Note that this may "
"conflict with the type of *file* if it's an open :term:`file object`; make "
"sure you do not try to write a string to a binary stream and vice versa."
msgstr ""
"輸出是字串 (:class:`str`) 或二進位 (:class:`bytes`)。這是由 *encoding* "
"參數控制的。如果*encoding*是``\"unicode\""
"``，輸出是一個字串；否則，它是二進位的。請注意，如果它是一個打開的文件物件，"
"這可能會與 *file* 的型別沖突；確保不要嘗試將字串寫入二進位流，反之亦然。"

#: ../../library/xml.etree.elementtree.rst:1184
#, fuzzy
msgid ""
"The :meth:`write` method now preserves the attribute order specified by the "
"user."
msgstr ":meth:`write` 方法現在保留使用者指定的屬性順序。"

#: ../../library/xml.etree.elementtree.rst:1189
#, fuzzy
msgid "This is the XML file that is going to be manipulated::"
msgstr "這是將要被操作的 XML 文件："

#: ../../library/xml.etree.elementtree.rst:1201
#, fuzzy
msgid ""
"Example of changing the attribute \"target\" of every link in first "
"paragraph::"
msgstr "更改第一段中每個鏈接的屬性“目標”的示例::"

#: ../../library/xml.etree.elementtree.rst:1220
msgid "QName Objects"
msgstr "QName 物件"

#: ../../library/xml.etree.elementtree.rst:1225
#, fuzzy
msgid ""
"QName wrapper.  This can be used to wrap a QName attribute value, in order "
"to get proper namespace handling on output.  *text_or_uri* is a string "
"containing the QName value, in the form {uri}local, or, if the tag argument "
"is given, the URI part of a QName.  If *tag* is given, the first argument is "
"interpreted as a URI, and this argument is interpreted as a local name. :"
"class:`QName` instances are opaque."
msgstr ""
"QName 包裝器。這可用於包裝 QName 屬性值，以便對輸出進行正確的命名空間處理。 "
"*text_or_uri* 是一個包含 QName 值的字串，格式為 "
"{uri}local，或者，如果給出了標籤參數，則為 QName 的 URI 部分。如果給出 "
"*tag*，第一個參數被解釋為 URI，而這個參數被解釋為本地名稱。 :class:`QName` "
"實例是不透明的。"

#: ../../library/xml.etree.elementtree.rst:1237
msgid "TreeBuilder Objects"
msgstr "TreeBuilder 物件"

#: ../../library/xml.etree.elementtree.rst:1243
#, fuzzy
msgid ""
"Generic element structure builder.  This builder converts a sequence of "
"start, data, end, comment and pi method calls to a well-formed element "
"structure.  You can use this class to build an element structure using a "
"custom XML parser, or a parser for some other XML-like format."
msgstr ""
"通用元素結構生成器。此構建器將一系列開始、資料、結束、註釋和 pi "
"方法呼叫轉換為格式正確的元素結構。您可以使用此類使用自定義 XML "
"剖析器或其他類似 XML 格式的剖析器來構建元素結構。"

#: ../../library/xml.etree.elementtree.rst:1248
#, fuzzy
msgid ""
"*element_factory*, when given, must be a callable accepting two positional "
"arguments: a tag and a dict of attributes.  It is expected to return a new "
"element instance."
msgstr "*element_factory*，當給定時，必須是一個可呼叫的，接受兩個位置參數：一個標籤和"
"一個屬性字典。它應該回傳一個新的元素實例。"

#: ../../library/xml.etree.elementtree.rst:1252
#, fuzzy
msgid ""
"The *comment_factory* and *pi_factory* functions, when given, should behave "
"like the :func:`Comment` and :func:`ProcessingInstruction` functions to "
"create comments and processing instructions.  When not given, the default "
"factories will be used.  When *insert_comments* and/or *insert_pis* is true, "
"comments/pis will be inserted into the tree if they appear within the root "
"element (but not outside of it)."
msgstr ""
"*comment_factory* 和 *pi_factory* 函式在給定時應該像 :func:`Comment` 和 "
":func:`ProcessingInstruction` "
"函式一樣來建立註釋和處理指令。如果沒有給出，將使用預設工廠。當 "
"*insert_comments* 和/或 *insert_pis* 為真時，如果 comments/pis "
"出現在根元素內（但不在根元素外），它們將被插入到樹中。"

#: ../../library/xml.etree.elementtree.rst:1261
#, fuzzy
msgid ""
"Flushes the builder buffers, and returns the toplevel document element.  "
"Returns an :class:`Element` instance."
msgstr "刷新構建器緩衝區，並回傳頂層文檔元素。回傳一個 :class:`Element` 實例。"

#: ../../library/xml.etree.elementtree.rst:1267
#, fuzzy
msgid ""
"Adds text to the current element.  *data* is a string.  This should be "
"either a bytestring, or a Unicode string."
msgstr "將文本新增到當前元素。 *data* 是一個字串。這應該是位元組串或 Unicode 字串。"

#: ../../library/xml.etree.elementtree.rst:1273
#, fuzzy
msgid ""
"Closes the current element.  *tag* is the element name.  Returns the closed "
"element."
msgstr "關閉當前元素。 *tag* 是元素名稱。回傳封閉元素。"

#: ../../library/xml.etree.elementtree.rst:1279
#, fuzzy
msgid ""
"Opens a new element.  *tag* is the element name.  *attrs* is a dictionary "
"containing element attributes.  Returns the opened element."
msgstr "打開一個新元素。 *tag* 是元素名稱。 *attrs* "
"是一個包含元素屬性的字典。回傳打開的元素。"

#: ../../library/xml.etree.elementtree.rst:1285
#, fuzzy
msgid ""
"Creates a comment with the given *text*.  If ``insert_comments`` is true, "
"this will also add it to the tree."
msgstr "使用給定的 *text* 建立評論。如果 ``insert_comments`` "
"為真，這也會將其新增到樹中。"

#: ../../library/xml.etree.elementtree.rst:1293
#, fuzzy
msgid ""
"Creates a comment with the given *target* name and *text*.  If "
"``insert_pis`` is true, this will also add it to the tree."
msgstr "使用給定的 *target* 名稱和 *text* 建立評論。如果 ``insert_pis`` "
"為真，這也會將其新增到樹中。"

#: ../../library/xml.etree.elementtree.rst:1299
#, fuzzy
msgid ""
"In addition, a custom :class:`TreeBuilder` object can provide the following "
"methods:"
msgstr "此外，自定義 :class:`TreeBuilder` 物件可以提供以下方法："

#: ../../library/xml.etree.elementtree.rst:1304
#, fuzzy
msgid ""
"Handles a doctype declaration.  *name* is the doctype name.  *pubid* is the "
"public identifier.  *system* is the system identifier.  This method does not "
"exist on the default :class:`TreeBuilder` class."
msgstr ""
"處理文檔型別聲明。 *name* 是文檔型別名稱。 *pubid* 是公開標識符。 *system* "
"是系統標識符。預設的 TreeBuilder 類中不存在此方法。"

#: ../../library/xml.etree.elementtree.rst:1312
#, fuzzy
msgid ""
"Is called whenever the parser encounters a new namespace declaration, before "
"the ``start()`` callback for the opening element that defines it. *prefix* "
"is ``''`` for the default namespace and the declared namespace prefix name "
"otherwise.  *uri* is the namespace URI."
msgstr ""
"每當剖析器遇到新的命名空間聲明時，在定義它的開始元素的 ``start()`` "
"回呼之前被呼叫。 *prefix* "
"是預設命名空間的``''``，否則是聲明的命名空間前綴名稱。 *uri* 是命名空間 URI。"

#: ../../library/xml.etree.elementtree.rst:1321
#, fuzzy
msgid ""
"Is called after the ``end()`` callback of an element that declared a "
"namespace prefix mapping, with the name of the *prefix* that went out of "
"scope."
msgstr "在聲明命名空間前綴映射的元素的 ``end()`` 回呼之後呼叫，*prefix* "
"的名稱超出範圍。"

#: ../../library/xml.etree.elementtree.rst:1333
#, fuzzy
msgid ""
"A `C14N 2.0 <https://www.w3.org/TR/xml-c14n2/>`_ writer.  Arguments are the "
"same as for the :func:`canonicalize` function.  This class does not build a "
"tree but translates the callback events directly into a serialised form "
"using the *write* function."
msgstr ""
"`C14N 2.0 <https://www.w3.org/TR/xml-c14n2/>`_ 作者。參數與 "
":func:`canonicalize` 函式相同。此類不構建樹，而是使用 *write* "
"函式將回呼事件直接轉換為序列化形式。"

#: ../../library/xml.etree.elementtree.rst:1344
msgid "XMLParser Objects"
msgstr "XMLParser 物件"

#: ../../library/xml.etree.elementtree.rst:1349
#, fuzzy
msgid ""
"This class is the low-level building block of the module.  It uses :mod:`xml."
"parsers.expat` for efficient, event-based parsing of XML.  It can be fed XML "
"data incrementally with the :meth:`feed` method, and parsing events are "
"translated to a push API - by invoking callbacks on the *target* object.  If "
"*target* is omitted, the standard :class:`TreeBuilder` is used. If "
"*encoding* [1]_ is given, the value overrides the encoding specified in the "
"XML file."
msgstr ""
"此類是模組的低階構建塊。它使用 :mod:`xml.parsers.expat` 進行高效的、"
"基於事件的 XML 剖析。它可以使用 :meth:`feed` 方法遞增地提供 XML 資料，"
"並將剖析事件轉換為推送 API - 通過呼叫 *target* 對像上的回呼。如果省略 "
"*target*，則使用標準的 :class:`TreeBuilder`。如果給出了 *encoding* [1]_，"
"該值將覆蓋 XML 文件中指定的編碼。"

#: ../../library/xml.etree.elementtree.rst:1357
#, fuzzy
msgid ""
"Parameters are now :ref:`keyword-only <keyword-only_parameter>`. The *html* "
"argument no longer supported."
msgstr "參數現在是 :ref:`keyword-only <keyword-only_parameter>`。不再支援 *html* "
"參數。"

#: ../../library/xml.etree.elementtree.rst:1364
#, fuzzy
msgid ""
"Finishes feeding data to the parser.  Returns the result of calling the "
"``close()`` method of the *target* passed during construction; by default, "
"this is the toplevel document element."
msgstr "完成向剖析器提供資料。回傳構造時傳入的*target*呼叫``close()``方法的結果；預設"
"情況下，這是頂級文檔元素。"

#: ../../library/xml.etree.elementtree.rst:1371
#, fuzzy
msgid "Feeds data to the parser.  *data* is encoded data."
msgstr "將資料提供給剖析器。 *data* 是編碼資料。"

#: ../../library/xml.etree.elementtree.rst:1373
#, fuzzy
msgid ""
":meth:`XMLParser.feed` calls *target*\\'s ``start(tag, attrs_dict)`` method "
"for each opening tag, its ``end(tag)`` method for each closing tag, and data "
"is processed by method ``data(data)``.  For further supported callback "
"methods, see the :class:`TreeBuilder` class.  :meth:`XMLParser.close` calls "
"*target*\\'s method ``close()``. :class:`XMLParser` can be used not only for "
"building a tree structure. This is an example of counting the maximum depth "
"of an XML file::"
msgstr ""
":meth:`XMLParser.feed` 為每個開始標籤呼叫 *target*\\ 的 ``start(tag, "
"attrs_dict)`` 方法，為每個結束標籤呼叫其 ``end(tag)`` 方法，"
"並處理資料通過方法 ``data(data)``。有關進一步支援的回呼方法，請參閱 "
"TreeBuilder 類。 :meth:`XMLParser.close` 呼叫 *target*\\ 的方法 ``close()``。"
" :class:`XMLParser` 不僅可以用於構建樹結構。這是計算 XML "
"文件的最大深度的示例::"

#: ../../library/xml.etree.elementtree.rst:1417
msgid "XMLPullParser Objects"
msgstr "XMLPullParser 物件"

#: ../../library/xml.etree.elementtree.rst:1421
#, fuzzy
msgid ""
"A pull parser suitable for non-blocking applications.  Its input-side API is "
"similar to that of :class:`XMLParser`, but instead of pushing calls to a "
"callback target, :class:`XMLPullParser` collects an internal list of parsing "
"events and lets the user read from it. *events* is a sequence of events to "
"report back.  The supported events are the strings ``\"start\"``, ``\"end"
"\"``, ``\"comment\"``, ``\"pi\"``, ``\"start-ns\"`` and ``\"end-ns\"`` (the "
"\"ns\" events are used to get detailed namespace information).  If *events* "
"is omitted, only ``\"end\"`` events are reported."
msgstr ""
"適用於非阻塞應用程式的拉式剖析器。它的輸入端 API 類似於 "
":class:`XMLParser`，但不是將呼叫推送到回呼目標，:class:`XMLPullParser` "
"收集剖析事件的內部列表並讓使用者從中讀取。 *events* "
"是要報告的一系列事件。支援的事件是字串``\"start\"``、``\"end\"``、``\"comment"
"\"``、``\"pi\"``、``\"start-ns\"`` 和 `` “end-"
"ns”``（ ``ns``事件用於獲取詳細的命名空間資訊）。如果省略 *events*，則僅報告 ``"
"\"end\"`` 事件。"

#: ../../library/xml.etree.elementtree.rst:1432
#, fuzzy
msgid "Feed the given bytes data to the parser."
msgstr "將給定的位元組資料提供給剖析器。"

#: ../../library/xml.etree.elementtree.rst:1436
#, fuzzy
msgid ""
"Signal the parser that the data stream is terminated. Unlike :meth:"
"`XMLParser.close`, this method always returns :const:`None`. Any events not "
"yet retrieved when the parser is closed can still be read with :meth:"
"`read_events`."
msgstr ""
"向剖析器發出資料流已終止的信號。與 :meth:`XMLParser.close` 不同，"
"此方法始終回傳 :const:`None`。剖析器關閉時尚未檢索到的任何事件仍然可以使用 "
"read_events 讀取。"

#: ../../library/xml.etree.elementtree.rst:1443
#, fuzzy
msgid ""
"Return an iterator over the events which have been encountered in the data "
"fed to the parser.  The iterator yields ``(event, elem)`` pairs, where "
"*event* is a string representing the type of event (e.g. ``\"end\"``) and "
"*elem* is the encountered :class:`Element` object, or other context value as "
"follows."
msgstr ""
"回傳在提供給剖析器的資料中遇到的事件的疊代器。疊代器產生 ``(event, elem)`` "
"對，其中 *event* 是表示事件型別的字串（例如 ``\"end\"``），*elem* 是遇到的 "
"Element 物件，或其他上下文值如下。"

#: ../../library/xml.etree.elementtree.rst:1449
#, fuzzy
msgid "``start``, ``end``: the current Element."
msgstr "``start``, ``end``：當前元素。"

#: ../../library/xml.etree.elementtree.rst:1450
#, fuzzy
msgid "``comment``, ``pi``: the current comment / processing instruction"
msgstr "``comment``, ``pi``：當前註釋/處理指令"

#: ../../library/xml.etree.elementtree.rst:1451
#, fuzzy
msgid ""
"``start-ns``: a tuple ``(prefix, uri)`` naming the declared namespace "
"mapping."
msgstr "``start-ns``：一個元組``（前綴，uri）``命名聲明的命名空間映射。"

#: ../../library/xml.etree.elementtree.rst:1453
#, fuzzy
msgid "``end-ns``: :const:`None` (this may change in a future version)"
msgstr "``end-ns``: :const:`None`（這可能會在未來的版本中改變）"

#: ../../library/xml.etree.elementtree.rst:1455
#, fuzzy
msgid ""
"Events provided in a previous call to :meth:`read_events` will not be "
"yielded again.  Events are consumed from the internal queue only when they "
"are retrieved from the iterator, so multiple readers iterating in parallel "
"over iterators obtained from :meth:`read_events` will have unpredictable "
"results."
msgstr ""
"之前呼叫 read_events 時提供的事件將不會再次產生。僅當從疊代器中檢索到事件時，"
"才會從內部隊列中使用事件，因此多個讀取器並行疊代從 :meth:`read_events` "
"獲得的疊代器將產生不可預測的結果。"

#: ../../library/xml.etree.elementtree.rst:1463
#, fuzzy
msgid ""
":class:`XMLPullParser` only guarantees that it has seen the \">\" character "
"of a starting tag when it emits a \"start\" event, so the attributes are "
"defined, but the contents of the text and tail attributes are undefined at "
"that point.  The same applies to the element children; they may or may not "
"be present."
msgstr ""
":class:`XMLPullParser` "
"僅保證它在發出“開始”事件時已經看到起始標記的 ``>``字元，因此定義了屬性，"
"但此時未定義 text 和 tail 屬性的內容.這同樣適用於元素 "
"children；他們可能存在也可能不存在。"

#: ../../library/xml.etree.elementtree.rst:1478
msgid "Exceptions"
msgstr "例外"

#: ../../library/xml.etree.elementtree.rst:1482
#, fuzzy
msgid ""
"XML parse error, raised by the various parsing methods in this module when "
"parsing fails.  The string representation of an instance of this exception "
"will contain a user-friendly error message.  In addition, it will have the "
"following attributes available:"
msgstr ""
"XML 剖析錯誤，剖析失敗時由本模組中的各種剖析方法引發。"
"此例外實例的字串表示形式將包含使用者友好的錯誤消息"
"。此外，它將具有以下可用屬性："

#: ../../library/xml.etree.elementtree.rst:1489
#, fuzzy
msgid ""
"A numeric error code from the expat parser. See the documentation of :mod:"
"`xml.parsers.expat` for the list of error codes and their meanings."
msgstr "來自 expat 剖析器的數字錯誤程式碼。有關錯誤程式碼及其含義的列表，請參閱 "
":mod:`xml.parsers.expat` 的文檔。"

#: ../../library/xml.etree.elementtree.rst:1494
#, fuzzy
msgid ""
"A tuple of *line*, *column* numbers, specifying where the error occurred."
msgstr "*行*、*列*數字的元組，指定錯誤發生的位置。"

#: ../../library/xml.etree.elementtree.rst:1497
msgid "Footnotes"
msgstr "註解"

#: ../../library/xml.etree.elementtree.rst:1498
#, fuzzy
msgid ""
"The encoding string included in XML output should conform to the appropriate "
"standards.  For example, \"UTF-8\" is valid, but \"UTF8\" is not.  See "
"https://www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl and https://"
"www.iana.org/assignments/character-sets/character-sets.xhtml."
msgstr ""
"XML 輸出中包含的編碼字串應符合相應的標準。例如， ``UTF-8``有效，但 ``UTF8``無效。"
"請參閱 https://www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl 和 "
"https://www.iana.org/assignments/character-sets/character-sets.xhtml。"
