# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-06 00:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/importlib.metadata.rst:5
msgid "Using :mod:`!importlib.metadata`"
msgstr "使用 :mod:`!importlib.metadata`"

#: ../../library/importlib.metadata.rst:11
#, fuzzy
msgid "``importlib.metadata`` is no longer provisional."
msgstr "``importlib.metadata`` 不再是臨時的。"

#: ../../library/importlib.metadata.rst:14
msgid "**Source code:** :source:`Lib/importlib/metadata/__init__.py`"
msgstr "**原始碼：**\\ :source:`Lib/importlib/metadata/__init__.py`"

#: ../../library/importlib.metadata.rst:16
#, fuzzy
msgid ""
"``importlib_metadata`` is a library that provides access to the metadata of "
"an installed `Distribution Package <https://packaging.python.org/en/latest/"
"glossary/#term-Distribution-Package>`_, such as its entry points or its top-"
"level names (`Import Package <https://packaging.python.org/en/latest/"
"glossary/#term-Import-Package>`_\\s, modules, if any). Built in part on "
"Python's import system, this library intends to replace similar "
"functionality in the `entry point API`_ and `metadata API`_ of "
"``pkg_resources``.  Along with :mod:`importlib.resources`, this package can "
"eliminate the need to use the older and less efficient ``pkg_resources`` "
"package."
msgstr ""
"``importlib_metadata`` 是一個庫，它提供對已安裝的 `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-Package>`"
"_ 的元資料的訪問，例如它的入口點或其頂級名稱（`Import Package "
"<https://packaging.python.org/en/latest/glossary/#term-Import-Package>`_\\s"
"，模組，如果有的話）。該庫部分建立在 Python "
"的導入系統上，旨在替換“pkg_resources”的“入口點 API”和“元資料 "
"API”中的類似功能。與 :mod:`importlib.resources` 一起，"
"這個包可以消除使用舊的和低效的 ``pkg_resources`` 包的需要。"

#: ../../library/importlib.metadata.rst:27
#, fuzzy
msgid ""
"``importlib_metadata`` operates on third-party *distribution packages* "
"installed into Python's ``site-packages`` directory via tools such as `pip "
"<https://pypi.org/project/pip/>`_. Specifically, it works with distributions "
"with discoverable ``dist-info`` or ``egg-info`` directories, and metadata "
"defined by the `Core metadata specifications <https://packaging.python.org/"
"en/latest/specifications/core-metadata/#core-metadata>`_."
msgstr ""
"``importlib_metadata`` 在通過諸如`pip <https://pypi.org/project/pip/>`_ "
"之類的工具安裝到 Python 的``site-packages`` 目錄中的第三方*分發包* "
"上運行。具體來說，它適用於具有可發現的 ``dist-info`` 或“egg-"
"info”目錄的發行版，以及由“核心元資料規範”定義的元資料 <https://packaging."
"python.org/en/latest/specifications /核心元資料/#核心元資料>`_。"

#: ../../library/importlib.metadata.rst:36
#, fuzzy
msgid ""
"These are *not* necessarily equivalent to or correspond 1:1 with the top-"
"level *import package* names that can be imported inside Python code. One "
"*distribution package* can contain multiple *import packages* (and single "
"modules), and one top-level *import package* may map to multiple "
"*distribution packages* if it is a namespace package. You can use :ref:"
"`package_distributions() <package-distributions>` to get a mapping between "
"them."
msgstr ""
"這些*不一定*等同於或與可以在 Python 程式碼中導入的頂級*導入包*名稱 1:1 對應。"
"一個*分發包*可以包含多個*導入包*（和單個模組），如果一個頂級*導入包*是一個命"
"名空間包，則它可以映射到多個*分發包*。您可以使用 "
":ref:`package_distributions() <package-distributions>` 來獲取它們之間的映射。"

#: ../../library/importlib.metadata.rst:47
#, fuzzy
msgid ""
"By default, distribution metadata can live on the file system or in zip "
"archives on :data:`sys.path`.  Through an extension mechanism, the metadata "
"can live almost anywhere."
msgstr ""
"預設情況下，分發元資料可以存在於文件系統或 :data:`sys.path` 上的 zip "
"存檔中。通過擴充機制，元資料幾乎可以存在於任何地方。"

#: ../../library/importlib.metadata.rst:62
#, fuzzy
msgid "https://importlib-metadata.readthedocs.io/"
msgstr "https://importlib-metadata.readthedocs.io/"

#: ../../library/importlib.metadata.rst:56
#, fuzzy
msgid ""
"The documentation for ``importlib_metadata``, which supplies a backport of "
"``importlib.metadata``. This includes an `API reference <https://importlib-"
"metadata.readthedocs.io/en/latest/api.html>`__ for this module's classes and "
"functions, as well as a `migration guide <https://importlib-metadata."
"readthedocs.io/en/latest/migration.html>`__ for existing users of "
"``pkg_resources``."
msgstr ""
"``importlib_metadata`` 的文檔，它提供了``importlib.metadata`` "
"的反向移植。這包括此模組的類和函式的`API 參考<https://importlib-metadata."
"readthedocs.io/en/latest/api.html>`__，以及`遷移指南<https://importlib- "
"metadata.readthedocs.io/en/latest/migration.html>`__ 適用於``pkg_resources`` "
"的現有使用者。"

#: ../../library/importlib.metadata.rst:67
#, fuzzy
msgid "Overview"
msgstr "概述"

#: ../../library/importlib.metadata.rst:69
#, fuzzy
msgid ""
"Let's say you wanted to get the version string for a `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ you've installed using ``pip``.  We start by creating a virtual "
"environment and installing something into it:"
msgstr ""
"假設您想獲取使用 ``pip``安裝的“分發包 <https://packaging.python.org/en/latest/"
"glossary/#term-Distribution-Package>”的版本字串."
"我們首先建立一個虛擬環境並在其中安裝一些東西："

#: ../../library/importlib.metadata.rst:80
#, fuzzy
msgid "You can get the version string for ``wheel`` by running the following:"
msgstr "您可以通過運行以下命令獲取 ``wheel``的版本字串："

#: ../../library/importlib.metadata.rst:89
#, fuzzy
msgid ""
"You can also get a collection of entry points selectable by properties of "
"the EntryPoint (typically 'group' or 'name'), such as ``console_scripts``, "
"``distutils.commands`` and others.  Each group contains a collection of :ref:"
"`EntryPoint <entry-points>` objects."
msgstr ""
"您還可以獲得可通過 EntryPoint 的屬性（通常是 ``group``或 ``name``）選擇的入口點集合"
"，例如“console_scripts”、“distutils.commands”等。每個組包含一組 :ref:`"
"EntryPoint <entry-points>` 物件。"

#: ../../library/importlib.metadata.rst:93
#, fuzzy
msgid "You can get the :ref:`metadata for a distribution <metadata>`::"
msgstr "您可以獲得 :ref:` 分發的元資料 <metadata>`::"

#: ../../library/importlib.metadata.rst:98
#, fuzzy
msgid ""
"You can also get a :ref:`distribution's version number <version>`, list its :"
"ref:`constituent files <files>`, and get a list of the distribution's :ref:"
"`requirements`."
msgstr ""
"您還可以獲得 :ref:`發行版的版本號 <version>`，列出其 :ref:`組成文件 "
"<files>`，並獲得發行版的 :ref:`requirements` 列表。"

#: ../../library/importlib.metadata.rst:104
#, fuzzy
msgid "Functional API"
msgstr "函式式 API"

#: ../../library/importlib.metadata.rst:106
#, fuzzy
msgid "This package provides the following functionality via its public API."
msgstr "此包通過其公開 API 提供以下功能。"

#: ../../library/importlib.metadata.rst:112
#, fuzzy
msgid "Entry points"
msgstr "切入點"

#: ../../library/importlib.metadata.rst:114
#, fuzzy
msgid ""
"The ``entry_points()`` function returns a collection of entry points. Entry "
"points are represented by ``EntryPoint`` instances; each ``EntryPoint`` has "
"a ``.name``, ``.group``, and ``.value`` attributes and a ``.load()`` method "
"to resolve the value.  There are also ``.module``, ``.attr``, and ``."
"extras`` attributes for getting the components of the ``.value`` attribute."
msgstr ""
"``entry_points()`` "
"函式回傳入口點的集合。入口點由 ``EntryPoint``實例表示；每個“入口點”都有一個“."
"name”、“.group”和“.value”屬性以及一個“.load()”方法來解析值。還有``."
"module``、``.attr`` 和``.extras`` 屬性用於獲取``.value`` 屬性的組件。"

#: ../../library/importlib.metadata.rst:121
#, fuzzy
msgid "Query all entry points::"
msgstr "查詢所有入口點::"

#: ../../library/importlib.metadata.rst:125
#, fuzzy
msgid ""
"The ``entry_points()`` function returns an ``EntryPoints`` object, a "
"collection of all ``EntryPoint`` objects with ``names`` and ``groups`` "
"attributes for convenience::"
msgstr ""
"``entry_points()`` 函式回傳一個 ``EntryPoints`` 物件，為方便起見，所有具有 "
"``names`` 和 ``groups`` 屬性的 ``EntryPoint`` 物件的集合::"

#: ../../library/importlib.metadata.rst:132
#, fuzzy
msgid ""
"``EntryPoints`` has a ``select`` method to select entry points matching "
"specific properties. Select entry points in the ``console_scripts`` group::"
msgstr ""
"``EntryPoints`` 有一個 ``select`` 方法來選擇匹配特定屬性的入口點。在 "
"``console_scripts`` 組中選擇入口點::"

#: ../../library/importlib.metadata.rst:138
#, fuzzy
msgid ""
"Equivalently, since ``entry_points`` passes keyword arguments through to "
"select::"
msgstr "等價地，因為 ``entry_points`` 將關鍵字參數傳遞給 select::"

#: ../../library/importlib.metadata.rst:143
#, fuzzy
msgid ""
"Pick out a specific script named \"wheel\" (found in the wheel project)::"
msgstr "選擇一個名為 ``wheel``的特定腳本（在 wheel 項目中找到）::"

#: ../../library/importlib.metadata.rst:149
#, fuzzy
msgid "Equivalently, query for that entry point during selection::"
msgstr "等效地，在選擇期間查詢該入口點::"

#: ../../library/importlib.metadata.rst:154
#, fuzzy
msgid "Inspect the resolved entry point::"
msgstr "檢查已解析的入口點::"

#: ../../library/importlib.metadata.rst:168
#, fuzzy
msgid ""
"The ``group`` and ``name`` are arbitrary values defined by the package "
"author and usually a client will wish to resolve all entry points for a "
"particular group.  Read `the setuptools docs <https://setuptools.pypa.io/en/"
"latest/userguide/entry_point.html>`_ for more information on entry points, "
"their definition, and usage."
msgstr ""
"``group`` 和 ``name`` "
"是由包作者定義的任意值，通常客戶希望解析特定組的所有入口點。閱讀`setuptools "
"文檔 <https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_ "
"以獲取有關入口點、它們的定義和用法的更多資訊。"

#: ../../library/importlib.metadata.rst:174
#, fuzzy
msgid "*Compatibility Note*"
msgstr "*相容性說明*"

#: ../../library/importlib.metadata.rst:176
#, fuzzy
msgid ""
"The \"selectable\" entry points were introduced in ``importlib_metadata`` "
"3.6 and Python 3.10. Prior to those changes, ``entry_points`` accepted no "
"parameters and always returned a dictionary of entry points, keyed by group. "
"For compatibility, if no parameters are passed to entry_points, a "
"``SelectableGroups`` object is returned, implementing that dict interface. "
"In the future, calling ``entry_points`` with no parameters will return an "
"``EntryPoints`` object. Users should rely on the selection interface to "
"retrieve entry points by group."
msgstr ""
"“可選”入口點是在 ``importlib_metadata`` 3.6 和 Python 3.10 "
"中引入的。在這些更改之前，``entry_points`` "
"不接受任何參數，並且總是回傳一個入口點字典，按組鍵控。為了相容性，"
"如果沒有參數傳遞給 "
"entry_points，則回傳一個 ``SelectableGroups`` 物件，實作該字典介面。將來，"
"呼叫不帶參數的 ``entry_points`` 將回傳一個 ``EntryPoints`` "
"物件。使用者應該依靠選擇界面來按組檢索入口點。"

#: ../../library/importlib.metadata.rst:189
#, fuzzy
msgid "Distribution metadata"
msgstr "分佈元資料"

#: ../../library/importlib.metadata.rst:191
#, fuzzy
msgid ""
"Every `Distribution Package <https://packaging.python.org/en/latest/glossary/"
"#term-Distribution-Package>`_ includes some metadata, which you can extract "
"using the ``metadata()`` function::"
msgstr ""
"每個“分發包 <https://packaging.python.org/en/latest/glossary/#term-"
"Distribution-"
"Package>”都包含一些元資料，您可以使用“metadata()”函式提取這些元資料::"

#: ../../library/importlib.metadata.rst:197
#, fuzzy
msgid ""
"The keys of the returned data structure, a ``PackageMetadata``, name the "
"metadata keywords, and the values are returned unparsed from the "
"distribution metadata::"
msgstr "回傳的資料結構的鍵，一個``PackageMetadata``，命名元資料關鍵字，並且回傳的值未"
"從分發元資料中解析::"

#: ../../library/importlib.metadata.rst:204
#, fuzzy
msgid ""
"``PackageMetadata`` also presents a ``json`` attribute that returns all the "
"metadata in a JSON-compatible form per :PEP:`566`::"
msgstr ""
"``PackageMetadata`` 還提供了一個 ``json`` 屬性，該屬性按照 :PEP:`566`:: 以 "
"JSON 相容的形式回傳所有元資料："

#: ../../library/importlib.metadata.rst:212
#, fuzzy
msgid ""
"The actual type of the object returned by ``metadata()`` is an "
"implementation detail and should be accessed only through the interface "
"described by the `PackageMetadata protocol <https://importlib-metadata."
"readthedocs.io/en/latest/api.html#importlib_metadata.PackageMetadata>`_."
msgstr ""
"``metadata()`` 回傳的物件的實際型別是一個實作細節，只能通過 `PackageMetadata "
"協定 <https://importlib-metadata.readthedocs.io/en/latest/ api."
"html#importlib_metadata.PackageMetadata>`_。"

#: ../../library/importlib.metadata.rst:217
#, fuzzy
msgid ""
"The ``Description`` is now included in the metadata when presented through "
"the payload. Line continuation characters have been removed."
msgstr "當通過有效負載呈現時，“描述”現在包含在元資料中。行繼續字元已被刪除。"

#: ../../library/importlib.metadata.rst:221
#, fuzzy
msgid "The ``json`` attribute was added."
msgstr "新增了 ``json`` 屬性。"

#: ../../library/importlib.metadata.rst:228
#, fuzzy
msgid "Distribution versions"
msgstr "分發版本"

#: ../../library/importlib.metadata.rst:230
#, fuzzy
msgid ""
"The ``version()`` function is the quickest way to get a `Distribution "
"Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_'s version number, as a string::"
msgstr ""
"``version()`` 函式是獲取 `Distribution Package <https://packaging.python.org/"
"en/latest/glossary/#term-Distribution-Package>`_ "
"版本號的最快方法，作為細繩：："

#: ../../library/importlib.metadata.rst:241
#, fuzzy
msgid "Distribution files"
msgstr "分發文件"

#: ../../library/importlib.metadata.rst:243
#, fuzzy
msgid ""
"You can also get the full set of files contained within a distribution.  The "
"``files()`` function takes a `Distribution Package <https://packaging.python."
"org/en/latest/glossary/#term-Distribution-Package>`_ name and returns all of "
"the files installed by this distribution.  Each file object returned is a "
"``PackagePath``, a :class:`pathlib.PurePath` derived object with additional "
"``dist``, ``size``, and ``hash`` properties as indicated by the metadata.  "
"For example::"
msgstr ""
"您還可以獲得分發版中包含的完整文件集。 ``files()`` 函式採用`Distribution "
"Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ 名稱並回傳由此安裝的所有文件分配。回傳的每個文件對像都是一個 "
"``PackagePath``，一個 :class:`pathlib.PurePath` 派生物件，"
"帶有元資料指示的附加 ``dist``、``size`` 和 ``hash`` 屬性。例如：："

#: ../../library/importlib.metadata.rst:260
#, fuzzy
msgid "Once you have the file, you can also read its contents::"
msgstr "擁有該文件後，您還可以閱讀其內容::"

#: ../../library/importlib.metadata.rst:271
#, fuzzy
msgid ""
"You can also use the ``locate`` method to get a the absolute path to the "
"file::"
msgstr "您還可以使用 ``locate`` 方法獲取文件的絕對路徑::"

#: ../../library/importlib.metadata.rst:277
#, fuzzy
msgid ""
"In the case where the metadata file listing files (RECORD or SOURCES.txt) is "
"missing, ``files()`` will return ``None``. The caller may wish to wrap calls "
"to ``files()`` in `always_iterable <https://more-itertools.readthedocs.io/en/"
"stable/api.html#more_itertools.always_iterable>`_ or otherwise guard against "
"this condition if the target distribution is not known to have the metadata "
"present."
msgstr ""
"如果元資料文件列表文件（RECORD 或 SOURCES.txt）丟失，``files()`` "
"將回傳``None``。呼叫者可能希望將對 `files()`` 的呼叫包裝在 `always_iterable "
"<https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools."
"always_iterable>`_ "
"或以其他方式防止這種情況不知道目標分佈是否存在元資料的條件。"

#: ../../library/importlib.metadata.rst:288
#, fuzzy
msgid "Distribution requirements"
msgstr "配送要求"

#: ../../library/importlib.metadata.rst:290
#, fuzzy
msgid ""
"To get the full set of requirements for a `Distribution Package <https://"
"packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_, use "
"the ``requires()`` function::"
msgstr ""
"要獲取“分發包”的全套要求<https://packaging.python.org/en/latest/glossary/"
"#term-Distribution-Package>`_，請使用“requires()”函式： :"

#: ../../library/importlib.metadata.rst:302
#, fuzzy
msgid "Mapping import to distribution packages"
msgstr "將導入映射到分發包"

#: ../../library/importlib.metadata.rst:304
#, fuzzy
msgid ""
"A convenience method to resolve the `Distribution Package <https://packaging."
"python.org/en/latest/glossary/#term-Distribution-Package>`_ name (or names, "
"in the case of a namespace package) that provide each importable top-level "
"Python module or `Import Package <https://packaging.python.org/en/latest/"
"glossary/#term-Import-Package>`_::"
msgstr ""
"一種解析分發包 <https://packaging.python.org/en/latest/glossary/#term-"
"Distribution-Package> 的便捷方法每個可導入的頂級 Python 模組或 `Import "
"Package <https://packaging.python.org/en/latest/glossary/#term-Import-"
"Package>`_::"

#: ../../library/importlib.metadata.rst:317
#, fuzzy
msgid "Distributions"
msgstr "分佈"

#: ../../library/importlib.metadata.rst:319
#, fuzzy
msgid ""
"While the above API is the most common and convenient usage, you can get all "
"of that information from the ``Distribution`` class.  A ``Distribution`` is "
"an abstract object that represents the metadata for a Python `Distribution "
"Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_.  You can get the ``Distribution`` instance::"
msgstr ""
"雖然上述 API 是最常見和最方便的用法，但您可以從 ``Distribution`` "
"類中獲取所有這些資訊。 ``Distribution`` 是一個抽像物件，表示 Python `"
"Distribution Package <https://packaging.python.org/en/latest/glossary/#term-"
"Distribution-Package>`_ 的元資料。你可以獲得``Distribution``實例::"

#: ../../library/importlib.metadata.rst:328
#, fuzzy
msgid ""
"Thus, an alternative way to get the version number is through the "
"``Distribution`` instance::"
msgstr "因此，另一種獲取版本號的方法是通過 ``Distribution`` 實例："

#: ../../library/importlib.metadata.rst:334
#, fuzzy
msgid ""
"There are all kinds of additional metadata available on the ``Distribution`` "
"instance::"
msgstr "``Distribution`` 實例上有各種可用的附加元資料："

#: ../../library/importlib.metadata.rst:342
#, fuzzy
msgid ""
"The full set of available metadata is not described here. See the `Core "
"metadata specifications <https://packaging.python.org/en/latest/"
"specifications/core-metadata/#core-metadata>`_ for additional details."
msgstr ""
"此處未描述完整的可用元資料集。有關更多詳細資訊，請參閱`核心元資料規範 "
"<https://packaging.python.org/en/latest/specifications/core-metadata/#core-"
"metadata>`_。"

#: ../../library/importlib.metadata.rst:347
#, fuzzy
msgid "Distribution Discovery"
msgstr "分佈發現"

#: ../../library/importlib.metadata.rst:349
#, fuzzy
msgid ""
"By default, this package provides built-in support for discovery of metadata "
"for file system and zip file `Distribution Package <https://packaging.python."
"org/en/latest/glossary/#term-Distribution-Package>`_\\s. This metadata "
"finder search defaults to ``sys.path``, but varies slightly in how it "
"interprets those values from how other import machinery does. In particular:"
msgstr ""
"預設情況下，此包為發現文件系統和 zip 文件的元資料提供內建支援`Distribution "
"Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_\\秒。此元資料查找器搜索預設為“sys."
"path”，但在解釋這些值的方式與其他導入機制的方式上略有不同。尤其："

#: ../../library/importlib.metadata.rst:353
#, fuzzy
msgid ""
"``importlib.metadata`` does not honor :class:`bytes` objects on ``sys.path``."
msgstr "``importlib.metadata`` 不支援 ``sys.path`` 上的 :class:`bytes` 物件。"

#: ../../library/importlib.metadata.rst:354
#, fuzzy
msgid ""
"``importlib.metadata`` will incidentally honor :py:class:`pathlib.Path` "
"objects on ``sys.path`` even though such values will be ignored for imports."
msgstr ""
"``importlib.metadata`` 會附帶地尊重 ``sys.path`` 上的 :py:class:`pathlib."
"Path` 物件，即使這些值在導入時會被忽略。"

#: ../../library/importlib.metadata.rst:358
#, fuzzy
msgid "Extending the search algorithm"
msgstr "擴充搜索演算法"

#: ../../library/importlib.metadata.rst:360
#, fuzzy
msgid ""
"Because `Distribution Package <https://packaging.python.org/en/latest/"
"glossary/#term-Distribution-Package>`_ metadata is not available through :"
"data:`sys.path` searches, or package loaders directly, the metadata for a "
"distribution is found through import system `finders`_.  To find a "
"distribution package's metadata, ``importlib.metadata`` queries the list of :"
"term:`meta path finders <meta path finder>` on :data:`sys.meta_path`."
msgstr ""
"因為 `Distribution Package <https://packaging.python.org/en/latest/glossary/"
"#term-Distribution-Package>`_ 元資料無法通過 :data:`sys.path` "
"搜索或包加載器直接獲取，分發的元資料是通過導入系統 `finders`_ "
"找到的。要查找分發包的元資料，``importlib.metadata`` 查詢 :data:`sys."
"meta_path` 上的 :term:`meta path finders <meta path finder>` 列表。"

#: ../../library/importlib.metadata.rst:368
#, fuzzy
msgid ""
"By default ``importlib_metadata`` installs a finder for distribution "
"packages found on the file system. This finder doesn't actually find any "
"*distributions*, but it can find their metadata."
msgstr ""
"預設情況下，``importlib_metadata`` 為在文件系統上找到的分發包安裝一個查找器。"
"這個查找器實際上並沒有找到任何*發行版*，但它可以找到它們的元資料。"

#: ../../library/importlib.metadata.rst:373
#, fuzzy
msgid ""
"The abstract class :py:class:`importlib.abc.MetaPathFinder` defines the "
"interface expected of finders by Python's import system. ``importlib."
"metadata`` extends this protocol by looking for an optional "
"``find_distributions`` callable on the finders from :data:`sys.meta_path` "
"and presents this extended interface as the ``DistributionFinder`` abstract "
"base class, which defines this abstract method::"
msgstr ""
"抽像類 :py:class:`importlib.abc.MetaPathFinder` 定義了 Python "
"導入系統期望的查找器介面。 ``importlib.metadata`` "
"通過查找一個可選的``find_distributions`` 來擴充這個協定，在 sys.meta_path` "
"的查找器上呼叫並將這個擴充介面呈現為``DistributionFinder`` "
"抽象基底類別，它定義這個抽象方法::"

#: ../../library/importlib.metadata.rst:387
#, fuzzy
msgid ""
"The ``DistributionFinder.Context`` object provides ``.path`` and ``.name`` "
"properties indicating the path to search and name to match and may supply "
"other relevant context."
msgstr ""
"``DistributionFinder.Context`` 物件提供``.path`` 和``.name`` "
"屬性，指示要搜索的路徑和要匹配的名稱，並可能提供其他相關上下文。"

#: ../../library/importlib.metadata.rst:391
#, fuzzy
msgid ""
"What this means in practice is that to support finding distribution package "
"metadata in locations other than the file system, subclass ``Distribution`` "
"and implement the abstract methods. Then from a custom finder, return "
"instances of this derived ``Distribution`` in the ``find_distributions()`` "
"method."
msgstr ""
"這在實踐中意味著支援在文件系統以外的位置查找分發包元資料，將“分發”子類別化並"
"實作抽象方法。然後從自定義查找器中，在“find_distributions()”方法中回傳這個派"
"生的 ``Distribution`` 實例。"

#~ msgid "Footnotes"
#~ msgstr "註解"
