# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-13 00:11+0000\n"
"PO-Revision-Date: 2016-01-31 07:13+0000\n"
"Last-Translator: Liang-Bo Wang <me@liang2.tw>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/atexit.rst:2
msgid ":mod:`atexit` --- Exit handlers"
msgstr ":mod:`atexit` --- 退出處理程式"

#: ../../library/atexit.rst:12
#, fuzzy
msgid ""
"The :mod:`atexit` module defines functions to register and unregister "
"cleanup functions.  Functions thus registered are automatically executed "
"upon normal interpreter termination.  :mod:`atexit` runs these functions in "
"the *reverse* order in which they were registered; if you register ``A``, "
"``B``, and ``C``, at interpreter termination time they will be run in the "
"order ``C``, ``B``, ``A``."
msgstr ""
":mod:`atexit` 模組定義了註冊和取消註冊清理功能的功能。這樣註冊的函式會在正常"
"的直譯器終止時自動執行。 :mod:`atexit` 以*相反*它們註冊的順序運行這些函式；如"
"果你註冊了``A``、``B``和``C``，在直譯器終止時它們將按照``C``、``B``、``A``的"
"順序運行."

#: ../../library/atexit.rst:19
#, fuzzy
msgid ""
"**Note:** The functions registered via this module are not called when the "
"program is killed by a signal not handled by Python, when a Python fatal "
"internal error is detected, or when :func:`os._exit` is called."
msgstr ""
"**注意：**當程式被 Python 未處理的信號殺死、檢測到 Python 致命內部錯誤或呼叫 "
":func:`os._exit` 時，不會呼叫通過此模組註冊的函式。"

#: ../../library/atexit.rst:23
#, fuzzy
msgid ""
"When used with C-API subinterpreters, registered functions are local to the "
"interpreter they were registered in."
msgstr "當與 C-API 子直譯器一起使用時，註冊的函式對於它們註冊的直譯器是本地的。"

#: ../../library/atexit.rst:29
#, fuzzy
msgid ""
"Register *func* as a function to be executed at termination.  Any optional "
"arguments that are to be passed to *func* must be passed as arguments to :"
"func:`register`.  It is possible to register the same function and arguments "
"more than once."
msgstr ""
"將 *func* 註冊為要在終止時執行的函式。任何要傳遞給 *func* 的可選參數都必須作"
"為參數傳遞給 :func:`register`。可以多次註冊相同的函式和參數。"

#: ../../library/atexit.rst:34
#, fuzzy
msgid ""
"At normal program termination (for instance, if :func:`sys.exit` is called "
"or the main module's execution completes), all functions registered are "
"called in last in, first out order.  The assumption is that lower level "
"modules will normally be imported before higher level modules and thus must "
"be cleaned up later."
msgstr ""
"在正常的程式終止時（例如，如果 :func:`sys.exit` 被呼叫或主模組的執行完成），"
"所有註冊的函式都會按照後進先出的順序呼叫。假設較低階別的模組通常會在較高階別"
"的模組之前導入，因此必須稍後清理。"

#: ../../library/atexit.rst:40
#, fuzzy
msgid ""
"If an exception is raised during execution of the exit handlers, a traceback "
"is printed (unless :exc:`SystemExit` is raised) and the exception "
"information is saved.  After all exit handlers have had a chance to run, the "
"last exception to be raised is re-raised."
msgstr ""
"如果在執行退出處理程式期間引發例外，則會印出回溯（除非引發 :exc:`SystemExit`"
"）並保存例外資訊。在所有退出處理程式都有機會運行之後，將重新引發最後一次引發"
"的例外。"

#: ../../library/atexit.rst:45
#, fuzzy
msgid ""
"This function returns *func*, which makes it possible to use it as a "
"decorator."
msgstr "此函式回傳 *func*，這使得它可以用作裝飾器。"

#: ../../library/atexit.rst:51
#, fuzzy
msgid ""
"Remove *func* from the list of functions to be run at interpreter shutdown. :"
"func:`unregister` silently does nothing if *func* was not previously "
"registered.  If *func* has been registered more than once, every occurrence "
"of that function in the :mod:`atexit` call stack will be removed.  Equality "
"comparisons (``==``) are used internally during unregistration, so function "
"references do not need to have matching identities."
msgstr ""
"從要在直譯器關閉時運行的函式列表中刪除 *func*。 :func:`unregister` 如果 "
"*func* 之前沒有註冊過，則靜靜地什麼都不做。如果 *func* 被註冊了不止一次，"
"該函式在 :mod:`atexit` 呼叫堆疊中的每次出現都將被刪除。註銷期間在內部使用相等"
"比較（``==``），因此函式引用不需要具有匹配的標識。"

#: ../../library/atexit.rst:62
msgid "Module :mod:`readline`"
msgstr ":mod:`readline` 模組"

#: ../../library/atexit.rst:62
#, fuzzy
msgid ""
"Useful example of :mod:`atexit` to read and write :mod:`readline` history "
"files."
msgstr ":mod:`atexit` 的有用示例，用於讀取和寫入 :mod:`readline` 歷史文件。"

#: ../../library/atexit.rst:69
msgid ":mod:`atexit` Example"
msgstr ":mod:`atexit` 範例"

#: ../../library/atexit.rst:71
#, fuzzy
msgid ""
"The following simple example demonstrates how a module can initialize a "
"counter from a file when it is imported and save the counter's updated value "
"automatically when the program terminates without relying on the application "
"making an explicit call into this module at termination. ::"
msgstr ""
"下面的簡單示例演示了模組如何在導入文件時從文件初始化計數器，並在程式終止時自"
"動保存計數器的更新值，而不依賴應用程式在終止時顯式呼叫此模組。 ::"

#: ../../library/atexit.rst:94
#, fuzzy
msgid ""
"Positional and keyword arguments may also be passed to :func:`register` to "
"be passed along to the registered function when it is called::"
msgstr "位置參數和關鍵字參數也可以傳遞給 :func:`register`，以便在呼叫時傳遞給已註冊的"
"函式::"

#: ../../library/atexit.rst:106
#, fuzzy
msgid "Usage as a :term:`decorator`::"
msgstr "用作 :term:`decorator`::"

#: ../../library/atexit.rst:114
#, fuzzy
msgid "This only works with functions that can be called without arguments."
msgstr "這僅適用於無需參數即可呼叫的函式。"
