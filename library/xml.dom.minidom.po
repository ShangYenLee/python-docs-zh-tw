# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-31 08:13+0000\n"
"PO-Revision-Date: 2018-05-23 16:15+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/xml.dom.minidom.rst:2
#, fuzzy
msgid ":mod:`xml.dom.minidom` --- Minimal DOM implementation"
msgstr ":mod:`xml.dom.minidom` --- 最小 DOM 實作"

#: ../../library/xml.dom.minidom.rst:11
msgid "**Source code:** :source:`Lib/xml/dom/minidom.py`"
msgstr "**原始碼：**\\ :source:`Lib/xml/dom/minidom.py`"

#: ../../library/xml.dom.minidom.rst:15
#, fuzzy
msgid ""
":mod:`xml.dom.minidom` is a minimal implementation of the Document Object "
"Model interface, with an API similar to that in other languages.  It is "
"intended to be simpler than the full DOM and also significantly smaller.  "
"Users who are not already proficient with the DOM should consider using the :"
"mod:`xml.etree.ElementTree` module for their XML processing instead."
msgstr ""
":mod:`xml.dom.minidom` 是文檔物件模型介面的最小實作，其 API "
"類似於其他語言中的 API。它旨在比完整的 DOM 更簡單，也更小。還不精通 DOM "
"的使用者應該考慮使用 :mod:`xml.etree.ElementTree` 模組來代替他們的 XML 處理。"

#: ../../library/xml.dom.minidom.rst:24
#, fuzzy
msgid ""
"The :mod:`xml.dom.minidom` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data "
"see :ref:`xml-vulnerabilities`."
msgstr ""
":mod:`xml.dom.minidom` "
"模組對惡意構造的資料不安全。如果您需要剖析不受信任或未經身份驗證的資料，"
"請參閱 :ref:`xml-vulnerabilities`。"

#: ../../library/xml.dom.minidom.rst:29
#, fuzzy
msgid ""
"DOM applications typically start by parsing some XML into a DOM.  With :mod:"
"`xml.dom.minidom`, this is done through the parse functions::"
msgstr "DOM 應用程式通常首先將一些 XML 剖析為 DOM。使用 :mod:`xml.dom."
"minidom`，這是通過剖析函式完成的："

#: ../../library/xml.dom.minidom.rst:41
#, fuzzy
msgid ""
"The :func:`parse` function can take either a filename or an open file object."
msgstr ":func:`parse` 函式可以接受文件名或打開的文件物件。"

#: ../../library/xml.dom.minidom.rst:46
#, fuzzy
msgid ""
"Return a :class:`Document` from the given input. *filename_or_file* may be "
"either a file name, or a file-like object. *parser*, if given, must be a "
"SAX2 parser object. This function will change the document handler of the "
"parser and activate namespace support; other parser configuration (like "
"setting an entity resolver) must have been done in advance."
msgstr ""
"從給定的輸入回傳一個 :class:`Document`。 *filename_or_file* "
"可以是文件名，也可以是類文件物件。 *parser*，如果給定，則必須是 SAX2 剖析器物"
"件。此函式將更改剖析器的文檔處理程式並激活名稱空間支援；其他剖析器配置（如設"
"定實體剖析器）必須提前完成。"

#: ../../library/xml.dom.minidom.rst:52
#, fuzzy
msgid ""
"If you have XML in a string, you can use the :func:`parseString` function "
"instead:"
msgstr "如果字串中有 XML，則可以改用 :func:`parseString` 函式："

#: ../../library/xml.dom.minidom.rst:58
#, fuzzy
msgid ""
"Return a :class:`Document` that represents the *string*. This method creates "
"an :class:`io.StringIO` object for the string and passes that on to :func:"
"`parse`."
msgstr ""
"回傳表示 *string* 的 :class:`Document`。此方法為字串建立一個 :class:`io."
"StringIO` 物件並將其傳遞給 :func:`parse`。"

#: ../../library/xml.dom.minidom.rst:61
#, fuzzy
msgid ""
"Both functions return a :class:`Document` object representing the content of "
"the document."
msgstr "這兩個函式都回傳一個表示文檔內容的 Document 物件。"

#: ../../library/xml.dom.minidom.rst:64
#, fuzzy
msgid ""
"What the :func:`parse` and :func:`parseString` functions do is connect an "
"XML parser with a \"DOM builder\" that can accept parse events from any SAX "
"parser and convert them into a DOM tree.  The name of the functions are "
"perhaps misleading, but are easy to grasp when learning the interfaces.  The "
"parsing of the document will be completed before these functions return; "
"it's simply that these functions do not provide a parser implementation "
"themselves."
msgstr ""
":func:`parse` 和 :func:`parseString` 函式的作用是將 XML 剖析器與“DOM "
"構建器”連接起來，後者可以接受來自任何 SAX 剖析器的剖析事件並將它們轉換為 DOM "
"樹。函式的名稱可能具有誤導性，但在學習介面時很容易掌握。文檔的剖析將在這些函"
"式回傳之前完成；只是這些函式本身不提供剖析器實作。"

#: ../../library/xml.dom.minidom.rst:71
#, fuzzy
msgid ""
"You can also create a :class:`Document` by calling a method on a \"DOM "
"Implementation\" object.  You can get this object either by calling the :"
"func:`getDOMImplementation` function in the :mod:`xml.dom` package or the :"
"mod:`xml.dom.minidom` module.  Once you have a :class:`Document`, you can "
"add child nodes to it to populate the DOM::"
msgstr ""
"您還可以通過呼叫“DOM 實作”物件上的方法來建立 :class:`Document`。"
"您可以通過呼叫 :mod:`xml.dom` 包或 :mod:`xml.dom.minidom` 模組中的 "
":func:`getDOMImplementation` 函式來獲取此物件。一旦你有了一個 "
":class:`Document`，你可以向它新增子節點來填充 DOM::"

#: ../../library/xml.dom.minidom.rst:86
#, fuzzy
msgid ""
"Once you have a DOM document object, you can access the parts of your XML "
"document through its properties and methods.  These properties are defined "
"in the DOM specification.  The main property of the document object is the :"
"attr:`documentElement` property.  It gives you the main element in the XML "
"document: the one that holds all others.  Here is an example program::"
msgstr ""
"一旦有了 DOM 文檔物件，就可以通過它的屬性和方法訪問 XML 文檔的各個部分。"
"這些屬性在 DOM 規範中定義。文檔物件的主要屬性是 :attr:`documentElement` "
"屬性。它為您提供了 XML "
"文檔中的主要元素：包含所有其他元素的元素。這是一個示例程式::"

#: ../../library/xml.dom.minidom.rst:95
#, fuzzy
msgid ""
"When you are finished with a DOM tree, you may optionally call the :meth:"
"`unlink` method to encourage early cleanup of the now-unneeded objects.  :"
"meth:`unlink` is an :mod:`xml.dom.minidom`\\ -specific extension to the DOM "
"API that renders the node and its descendants essentially useless.  "
"Otherwise, Python's garbage collector will eventually take care of the "
"objects in the tree."
msgstr ""
"當您完成 DOM 樹時，您可以選擇呼叫 :meth:`unlink` "
"方法來鼓勵儘早清理現在不需要的物件。 :meth:`unlink` 是 :mod:`xml.dom.minidom`"
"\\ 特定於 DOM API 的擴充，它使節點及其後代基本上無用。否則，Python "
"的垃圾收集器最終會處理樹中的物件。"

#: ../../library/xml.dom.minidom.rst:104
#, fuzzy
msgid ""
"`Document Object Model (DOM) Level 1 Specification <https://www.w3.org/TR/"
"REC-DOM-Level-1/>`_"
msgstr "`文檔物件模型 (DOM) 級別 1 規範 <https://www.w3.org/TR/REC-DOM-Level-1/>`_"

#: ../../library/xml.dom.minidom.rst:105
#, fuzzy
msgid "The W3C recommendation for the DOM supported by :mod:`xml.dom.minidom`."
msgstr ":mod:`xml.dom.minidom` 支援的 DOM 的 W3C 推薦。"

#: ../../library/xml.dom.minidom.rst:111
msgid "DOM Objects"
msgstr "DOM 物件"

#: ../../library/xml.dom.minidom.rst:113
#, fuzzy
msgid ""
"The definition of the DOM API for Python is given as part of the :mod:`xml."
"dom` module documentation.  This section lists the differences between the "
"API and :mod:`xml.dom.minidom`."
msgstr ""
"Python 的 DOM API 的定義作為 :mod:`xml.dom` 模組文檔的一部分給出。本節列出了 "
"API 和 :mod:`xml.dom.minidom` 之間的區別。"

#: ../../library/xml.dom.minidom.rst:120
#, fuzzy
msgid ""
"Break internal references within the DOM so that it will be garbage "
"collected on versions of Python without cyclic GC.  Even when cyclic GC is "
"available, using this can make large amounts of memory available sooner, so "
"calling this on DOM objects as soon as they are no longer needed is good "
"practice.  This only needs to be called on the :class:`Document` object, but "
"may be called on child nodes to discard children of that node."
msgstr ""
"打破 DOM 中的內部引用，以便在沒有循環 GC 的 Python 版本上對其進行垃圾收集。"
"即使循環 GC 可用，使用它也可以使大量記憶體更快可用，因此在不再需要 DOM "
"物件時立即呼叫它們是一種很好的做法。這只需要在 Document "
"物件上呼叫，但可以在子節點上呼叫以丟棄該節點的子節點。"

#: ../../library/xml.dom.minidom.rst:127
#, fuzzy
msgid ""
"You can avoid calling this method explicitly by using the :keyword:`with` "
"statement. The following code will automatically unlink *dom* when the :"
"keyword:`!with` block is exited::"
msgstr ""
"您可以使用 :keyword:`with` 語句避免顯式呼叫此方法。當 :keyword:`!with` "
"塊退出時，以下程式碼將自動取消鏈接 *dom*："

#: ../../library/xml.dom.minidom.rst:138
#, fuzzy
msgid ""
"Write XML to the writer object.  The writer receives texts but not bytes as "
"input, it should have a :meth:`write` method which matches that of the file "
"object interface.  The *indent* parameter is the indentation of the current "
"node. The *addindent* parameter is the incremental indentation to use for "
"subnodes of the current one.  The *newl* parameter specifies the string to "
"use to terminate newlines."
msgstr ""
"將 XML 寫入編寫器物件。編寫器接收文本而不是位元組作為輸入，"
"它應該有一個與文件物件介面相匹配的 :meth:`write` 方法。 *indent* "
"參數是當前節點的縮進。 *addindent* 參數是用於當前子節點的增量縮進。 *newl* "
"參數指定用於終止換行符的字串。"

#: ../../library/xml.dom.minidom.rst:145
#, fuzzy
msgid ""
"For the :class:`Document` node, an additional keyword argument *encoding* "
"can be used to specify the encoding field of the XML header."
msgstr "對於 :class:`Document` 節點，可以使用附加關鍵字參數 *encoding* 來指定 XML "
"標頭的編碼欄位。"

#: ../../library/xml.dom.minidom.rst:148
#, fuzzy
msgid ""
"Similarly, explicitly stating the *standalone* argument causes the "
"standalone document declarations to be added to the prologue of the XML "
"document. If the value is set to ``True``, ``standalone=\"yes\"`` is added, "
"otherwise it is set to ``\"no\"``. Not stating the argument will omit the "
"declaration from the document."
msgstr ""
"同樣，顯式聲明 *standalone* 參數會導致將獨立文檔聲明新增到 XML "
"文檔的序言中。如果該值設定為 ``True``，則新增“standalone=\"yes\"\""
"，否則設定為 ``no``。不說明參數將省略文檔中的聲明。"

#: ../../library/xml.dom.minidom.rst:155
#, fuzzy
msgid ""
"The :meth:`writexml` method now preserves the attribute order specified by "
"the user."
msgstr ":meth:`writexml` 方法現在保留使用者指定的屬性順序。"

#: ../../library/xml.dom.minidom.rst:159 ../../library/xml.dom.minidom.rst:180
#: ../../library/xml.dom.minidom.rst:199
msgid "The *standalone* parameter was added."
msgstr "新增 *standalone* 參數。"

#: ../../library/xml.dom.minidom.rst:164
#, fuzzy
msgid ""
"Return a string or byte string containing the XML represented by the DOM "
"node."
msgstr "回傳包含 DOM 節點表示的 XML 的字串或位元組字串。"

#: ../../library/xml.dom.minidom.rst:167
#, fuzzy
msgid ""
"With an explicit *encoding* [1]_ argument, the result is a byte string in "
"the specified encoding. With no *encoding* argument, the result is a Unicode "
"string, and the XML declaration in the resulting string does not specify an "
"encoding. Encoding this string in an encoding other than UTF-8 is likely "
"incorrect, since UTF-8 is the default encoding of XML."
msgstr ""
"使用顯式 *encoding* [1]_ 參數，結果是指定編碼的位元組字串。如果沒有 "
"*encoding* 參數，結果是一個 Unicode 字串，結果字串中的 XML 聲明不指定編碼。"
"使用 UTF-8 以外的編碼對該字串進行編碼可能不正確，因為 UTF-8 是 XML "
"的預設編碼。"

#: ../../library/xml.dom.minidom.rst:174 ../../library/xml.dom.minidom.rst:193
#, fuzzy
msgid "The *standalone* argument behaves exactly as in :meth:`writexml`."
msgstr "*standalone* 參數的行為與 :meth:`writexml` 中的行為完全相同。"

#: ../../library/xml.dom.minidom.rst:176
#, fuzzy
msgid ""
"The :meth:`toxml` method now preserves the attribute order specified by the "
"user."
msgstr ":meth:`toxml` 方法現在保留使用者指定的屬性順序。"

#: ../../library/xml.dom.minidom.rst:186
#, fuzzy
msgid ""
"Return a pretty-printed version of the document. *indent* specifies the "
"indentation string and defaults to a tabulator; *newl* specifies the string "
"emitted at the end of each line and defaults to ``\\n``."
msgstr ""
"回傳文檔的漂亮印出版本。 *indent* 指定縮進字串，預設為製表符； *newl* "
"指定在每行末尾發出的字串，預設為“\\n"
"”。"

#: ../../library/xml.dom.minidom.rst:190
#, fuzzy
msgid ""
"The *encoding* argument behaves like the corresponding argument of :meth:"
"`toxml`."
msgstr "*encoding* 參數的行為類似於 :meth:`toxml` 的相應參數。"

#: ../../library/xml.dom.minidom.rst:195
#, fuzzy
msgid ""
"The :meth:`toprettyxml` method now preserves the attribute order specified "
"by the user."
msgstr ":meth:`toprettyxml` 方法現在保留使用者指定的屬性順序。"

#: ../../library/xml.dom.minidom.rst:205
msgid "DOM Example"
msgstr "DOM 範例"

#: ../../library/xml.dom.minidom.rst:207
#, fuzzy
msgid ""
"This example program is a fairly realistic example of a simple program. In "
"this particular case, we do not take much advantage of the flexibility of "
"the DOM."
msgstr "這個示例程式是一個相當現實的簡單程式示例。在這種特殊情況下，我們沒有充分利用 "
"DOM 的靈活性。"

#: ../../library/xml.dom.minidom.rst:216
#, fuzzy
msgid "minidom and the DOM standard"
msgstr "minidom 和 DOM 標準"

#: ../../library/xml.dom.minidom.rst:218
#, fuzzy
msgid ""
"The :mod:`xml.dom.minidom` module is essentially a DOM 1.0-compatible DOM "
"with some DOM 2 features (primarily namespace features)."
msgstr ""
":mod:`xml.dom.minidom` 模組本質上是一個與 DOM 1.0 相容的 DOM，具有一些 DOM 2 "
"特性（主要是命名空間特性）。"

#: ../../library/xml.dom.minidom.rst:221
#, fuzzy
msgid ""
"Usage of the DOM interface in Python is straight-forward.  The following "
"mapping rules apply:"
msgstr "在 Python 中使用 DOM 介面非常簡單。以下映射規則適用："

#: ../../library/xml.dom.minidom.rst:224
#, fuzzy
msgid ""
"Interfaces are accessed through instance objects. Applications should not "
"instantiate the classes themselves; they should use the creator functions "
"available on the :class:`Document` object. Derived interfaces support all "
"operations (and attributes) from the base interfaces, plus any new "
"operations."
msgstr ""
"通過實例物件訪問介面。應用程式不應該自己實例化類；他們應該使用 "
"Document 物件上可用的建立者函式。派生介面支援來自基本介面的所有操作（和屬性）"
"，以及任何新操作。"

#: ../../library/xml.dom.minidom.rst:229
#, fuzzy
msgid ""
"Operations are used as methods. Since the DOM uses only :keyword:`in` "
"parameters, the arguments are passed in normal order (from left to right). "
"There are no optional arguments. ``void`` operations return ``None``."
msgstr ""
"操作用作方法。由於 DOM 僅使用 :keyword:`in` "
"參數，因此參數按正常順序（從左到右）傳遞。沒有可選參數。 ``void`` "
"操作回傳``None``。"

#: ../../library/xml.dom.minidom.rst:233
#, fuzzy
msgid ""
"IDL attributes map to instance attributes. For compatibility with the OMG "
"IDL language mapping for Python, an attribute ``foo`` can also be accessed "
"through accessor methods :meth:`_get_foo` and :meth:`_set_foo`.  "
"``readonly`` attributes must not be changed; this is not enforced at runtime."
msgstr ""
"IDL 屬性映射到實例屬性。為了與 Python 的 OMG IDL 語言映射相容，屬性 ``foo``"
"也可以通過訪問器方法 :meth:`_get_foo` 和 :meth:`_set_foo` 訪問。 ``readonly``"
" 屬性不得更改；這不是在運行時強制執行的。"

#: ../../library/xml.dom.minidom.rst:238
#, fuzzy
msgid ""
"The types ``short int``, ``unsigned int``, ``unsigned long long``, and "
"``boolean`` all map to Python integer objects."
msgstr ""
"型別“short int”、“unsigned int”、“unsigned long long”和 ``boolean`` 都映射到 "
"Python 整數物件。"

#: ../../library/xml.dom.minidom.rst:241
#, fuzzy
msgid ""
"The type ``DOMString`` maps to Python strings. :mod:`xml.dom.minidom` "
"supports either bytes or strings, but will normally produce strings. Values "
"of type ``DOMString`` may also be ``None`` where allowed to have the IDL "
"``null`` value by the DOM specification from the W3C."
msgstr ""
"``DOMString`` 型別映射到 Python 字串。 :mod:`xml.dom.minidom` "
"支援位元組或字串，但通常會生成字串。 ``DOMString`` 型別的值也可以是 "
"``None``，W3C 的 DOM 規範允許其具有 IDL ``null`` 值。"

#: ../../library/xml.dom.minidom.rst:246
#, fuzzy
msgid ""
"``const`` declarations map to variables in their respective scope (e.g. "
"``xml.dom.minidom.Node.PROCESSING_INSTRUCTION_NODE``); they must not be "
"changed."
msgstr ""
"``const`` 聲明映射到各自範圍內的變數（例如 ``xml.dom.minidom.Node."
"PROCESSING_INSTRUCTION_NODE``）；不得更改。"

#: ../../library/xml.dom.minidom.rst:249
#, fuzzy
msgid ""
"``DOMException`` is currently not supported in :mod:`xml.dom.minidom`. "
"Instead, :mod:`xml.dom.minidom` uses standard Python exceptions such as :exc:"
"`TypeError` and :exc:`AttributeError`."
msgstr ""
":mod:`xml.dom.minidom` 目前不支援``DOMException``。相反，:mod:`xml.dom."
"minidom` 使用標準的 Python 例外，例如 :exc:`TypeError` 和 "
":exc:`AttributeError`。"

#: ../../library/xml.dom.minidom.rst:253
#, fuzzy
msgid ""
":class:`NodeList` objects are implemented using Python's built-in list type. "
"These objects provide the interface defined in the DOM specification, but "
"with earlier versions of Python they do not support the official API.  They "
"are, however, much more \"Pythonic\" than the interface defined in the W3C "
"recommendations."
msgstr ""
":class:`NodeList` 物件是使用 Python 的內建列表型別實作的。這些物件提供了 DOM "
"規範中定義的介面，但對於較早版本的 Python，它們不支援官方 API。然而，它們比 "
"W3C 建議中定義的介面更 ``Pythonic`` 。"

#: ../../library/xml.dom.minidom.rst:259
#, fuzzy
msgid ""
"The following interfaces have no implementation in :mod:`xml.dom.minidom`:"
msgstr "以下介面在 :mod:`xml.dom.minidom` 中沒有實作："

#: ../../library/xml.dom.minidom.rst:261
msgid ":class:`DOMTimeStamp`"
msgstr ":class:`DOMTimeStamp`"

#: ../../library/xml.dom.minidom.rst:263
msgid ":class:`EntityReference`"
msgstr ":class:`EntityReference`"

#: ../../library/xml.dom.minidom.rst:265
#, fuzzy
msgid ""
"Most of these reflect information in the XML document that is not of general "
"utility to most DOM users."
msgstr "其中大部分反映了 XML 文檔中的資訊，這些資訊對大多數 DOM "
"使用者來說不是通用的。"

#: ../../library/xml.dom.minidom.rst:269
msgid "Footnotes"
msgstr "註解"

#: ../../library/xml.dom.minidom.rst:270
#, fuzzy
msgid ""
"The encoding name included in the XML output should conform to the "
"appropriate standards. For example, \"UTF-8\" is valid, but \"UTF8\" is not "
"valid in an XML document's declaration, even though Python accepts it as an "
"encoding name. See https://www.w3.org/TR/2006/REC-xml11-20060816/#NT-"
"EncodingDecl and https://www.iana.org/assignments/character-sets/character-"
"sets.xhtml."
msgstr ""
"XML 輸出中包含的編碼名稱應符合相應的標準。例如， ``UTF-8``是有效的，但 ``UTF8``在 "
"XML 文檔的聲明中無效，即使 Python 接受它作為編碼名稱。請參閱 https://www.w3."
"org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl 和 https://www.iana.org/"
"assignments/character-sets/character-sets.xhtml。"
