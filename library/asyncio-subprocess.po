# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Leon H., 2017
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-09 00:19+0000\n"
"PO-Revision-Date: 2018-05-23 14:39+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-subprocess.rst:7
msgid "Subprocesses"
msgstr "子行程"

#: ../../library/asyncio-subprocess.rst:9
msgid ""
"**Source code:** :source:`Lib/asyncio/subprocess.py`, :source:`Lib/asyncio/"
"base_subprocess.py`"
msgstr ""
"**原始碼：**\\ :source:`Lib/asyncio/subprocess.py`\\ 、\\ :source:`Lib/"
"asyncio/base_subprocess.py`"

#: ../../library/asyncio-subprocess.rst:14
#, fuzzy
msgid ""
"This section describes high-level async/await asyncio APIs to create and "
"manage subprocesses."
msgstr "本節描述用於建立和管理子行程的高階非同步/等待非同步 API。"

#: ../../library/asyncio-subprocess.rst:19
#, fuzzy
msgid ""
"Here's an example of how asyncio can run a shell command and obtain its "
"result::"
msgstr "以下是 asyncio 如何運行 shell 命令並獲取其結果的示例："

#: ../../library/asyncio-subprocess.rst:40
#, fuzzy
msgid "will print::"
msgstr "將印出::"

#: ../../library/asyncio-subprocess.rst:46
#, fuzzy
msgid ""
"Because all asyncio subprocess functions are asynchronous and asyncio "
"provides many tools to work with such functions, it is easy to execute and "
"monitor multiple subprocesses in parallel.  It is indeed trivial to modify "
"the above example to run several commands simultaneously::"
msgstr ""
"因為所有 asyncio 子行程函式都是非同步的，並且 asyncio 提供了許多工具來處理這"
"些函式，所以很容易並行執行和監視多個子行程。修改上面的示例以同時運行多個命令"
"確實是微不足道的::"

#: ../../library/asyncio-subprocess.rst:58
msgid "See also the `Examples`_ subsection."
msgstr "另請參閱\\ `Examples`_\\ 。"

#: ../../library/asyncio-subprocess.rst:62
msgid "Creating Subprocesses"
msgstr "建立子行程"

#: ../../library/asyncio-subprocess.rst:67
#, fuzzy
msgid "Create a subprocess."
msgstr "建立一個子行程。"

#: ../../library/asyncio-subprocess.rst:69
#: ../../library/asyncio-subprocess.rst:87
#, fuzzy
msgid ""
"The *limit* argument sets the buffer limit for :class:`StreamReader` "
"wrappers for :attr:`Process.stdout` and :attr:`Process.stderr` (if :attr:"
"`subprocess.PIPE` is passed to *stdout* and *stderr* arguments)."
msgstr ""
"*limit* 參數為 Process.stdout 和 Process.stderr 的 StreamReader "
"包裝器設定緩衝區限制（如果 subprocess.PIPE 傳遞給 *stdout * 和 *stderr* "
"參數）。"

#: ../../library/asyncio-subprocess.rst:73
#: ../../library/asyncio-subprocess.rst:91
#, fuzzy
msgid "Return a :class:`~asyncio.subprocess.Process` instance."
msgstr "回傳一個 :class:`~asyncio.subprocess.Process` 實例。"

#: ../../library/asyncio-subprocess.rst:75
#, fuzzy
msgid ""
"See the documentation of :meth:`loop.subprocess_exec` for other parameters."
msgstr "有關其他參數，請參閱 :meth:`loop.subprocess_exec` 的文檔。"

#: ../../library/asyncio-subprocess.rst:78
#: ../../library/asyncio-subprocess.rst:105
#, fuzzy
msgid "Removed the *loop* parameter."
msgstr "刪除了 *loop* 參數。"

#: ../../library/asyncio-subprocess.rst:85
#, fuzzy
msgid "Run the *cmd* shell command."
msgstr "運行 *cmd* 外殼命令。"

#: ../../library/asyncio-subprocess.rst:93
#, fuzzy
msgid ""
"See the documentation of :meth:`loop.subprocess_shell` for other parameters."
msgstr "有關其他參數，請參閱 :meth:`loop.subprocess_shell` 的文檔。"

#: ../../library/asyncio-subprocess.rst:98
#, fuzzy
msgid ""
"It is the application's responsibility to ensure that all whitespace and "
"special characters are quoted appropriately to avoid `shell injection "
"<https://en.wikipedia.org/wiki/Shell_injection#Shell_injection>`_ "
"vulnerabilities. The :func:`shlex.quote` function can be used to properly "
"escape whitespace and special shell characters in strings that are going to "
"be used to construct shell commands."
msgstr ""
"應用程式有責任確保所有空格和特殊字元都被適當地引用以避免`shell 注入 "
"<https://en.wikipedia.org/wiki/Shell_injection#Shell_injection>`_ 漏洞。 "
":func:`shlex.quote` 函式可用於正確轉義將用於構造 shell "
"命令的字串中的空格和特殊 shell 字元。"

#: ../../library/asyncio-subprocess.rst:110
#, fuzzy
msgid ""
"Subprocesses are available for Windows if a :class:`ProactorEventLoop` is "
"used. See :ref:`Subprocess Support on Windows <asyncio-windows-subprocess>` "
"for details."
msgstr ""
"如果使用 ProactorEventLoop，則子行程可用於 "
"Windows。有關詳細資訊，請參閱 :ref:`Windows 上的子行程支援 <asyncio-windows-"
"subprocess>`。"

#: ../../library/asyncio-subprocess.rst:116
#, fuzzy
msgid ""
"asyncio also has the following *low-level* APIs to work with subprocesses: :"
"meth:`loop.subprocess_exec`, :meth:`loop.subprocess_shell`, :meth:`loop."
"connect_read_pipe`, :meth:`loop.connect_write_pipe`, as well as the :ref:"
"`Subprocess Transports <asyncio-subprocess-transports>` and :ref:`Subprocess "
"Protocols <asyncio-subprocess-protocols>`."
msgstr ""
"asyncio 還具有以下 *low-level* APIs 來處理子行程： `，以及 :ref:`Subprocess "
"Transports <asyncio-subprocess-transports>` 和 :ref:`Subprocess Protocols "
"<asyncio-subprocess-protocols>`。"

#: ../../library/asyncio-subprocess.rst:124
msgid "Constants"
msgstr "常數"

#: ../../library/asyncio-subprocess.rst:129
#, fuzzy
msgid "Can be passed to the *stdin*, *stdout* or *stderr* parameters."
msgstr "可以傳遞給 *stdin*、*stdout* 或 *stderr* 參數。"

#: ../../library/asyncio-subprocess.rst:131
#, fuzzy
msgid ""
"If *PIPE* is passed to *stdin* argument, the :attr:`Process.stdin <asyncio."
"subprocess.Process.stdin>` attribute will point to a :class:`StreamWriter` "
"instance."
msgstr ""
"如果將 *PIPE* 傳遞給 *stdin* 參數，Process.stdin "
"<asyncio.subprocess.Process.stdin> 屬性將指向一個 StreamWriter 實例。"

#: ../../library/asyncio-subprocess.rst:135
#, fuzzy
msgid ""
"If *PIPE* is passed to *stdout* or *stderr* arguments, the :attr:`Process."
"stdout <asyncio.subprocess.Process.stdout>` and :attr:`Process.stderr "
"<asyncio.subprocess.Process.stderr>` attributes will point to :class:"
"`StreamReader` instances."
msgstr ""
"如果 *PIPE* 傳遞給 *stdout* 或 *stderr* 參數，:attr:`Process.stdout <asyncio."
"subprocess.Process.stdout>` 和 :attr:`Process.stderr "
"<asyncio.subprocess.Process.stderr >` 屬性將指向 :class:`StreamReader` 實例。"

#: ../../library/asyncio-subprocess.rst:143
#, fuzzy
msgid ""
"Special value that can be used as the *stderr* argument and indicates that "
"standard error should be redirected into standard output."
msgstr "可用作 *stderr* 參數並指示標準錯誤應重定向到標準輸出的特殊值。"

#: ../../library/asyncio-subprocess.rst:149
#, fuzzy
msgid ""
"Special value that can be used as the *stdin*, *stdout* or *stderr* argument "
"to process creation functions.  It indicates that the special file :data:`os."
"devnull` will be used for the corresponding subprocess stream."
msgstr ""
"可用作行程建立函式的 *stdin*、*stdout* 或 *stderr* 參數的特殊值。"
"它表示特殊文件 :data:`os.devnull` 將用於相應的子行程流。"

#: ../../library/asyncio-subprocess.rst:155
#, fuzzy
msgid "Interacting with Subprocesses"
msgstr "與子流程交互"

#: ../../library/asyncio-subprocess.rst:157
#, fuzzy
msgid ""
"Both :func:`create_subprocess_exec` and :func:`create_subprocess_shell` "
"functions return instances of the *Process* class.  *Process* is a high-"
"level wrapper that allows communicating with subprocesses and watching for "
"their completion."
msgstr ""
":func:`create_subprocess_exec` 和 :func:`create_subprocess_shell` 函式都回傳 "
"*Process* 類的實例。 *Process* "
"是一個高階包裝器，允許與子流程通信並觀察它們的完成。"

#: ../../library/asyncio-subprocess.rst:165
#, fuzzy
msgid ""
"An object that wraps OS processes created by the :func:"
"`create_subprocess_exec` and :func:`create_subprocess_shell` functions."
msgstr "包裝由 create_subprocess_exec 和 create_subprocess_shell "
"函式建立的操作系統行程的物件。"

#: ../../library/asyncio-subprocess.rst:169
#, fuzzy
msgid ""
"This class is designed to have a similar API to the :class:`subprocess."
"Popen` class, but there are some notable differences:"
msgstr "此類旨在具有與 subprocess.Popen 類類似的 API，但有一些顯著差異："

#: ../../library/asyncio-subprocess.rst:173
#, fuzzy
msgid ""
"unlike Popen, Process instances do not have an equivalent to the :meth:"
"`~subprocess.Popen.poll` method;"
msgstr "與 Popen 不同，Process 實例沒有與 :meth:`~subprocess.Popen.poll` "
"方法等價的方法；"

#: ../../library/asyncio-subprocess.rst:176
#, fuzzy
msgid ""
"the :meth:`~asyncio.subprocess.Process.communicate` and :meth:`~asyncio."
"subprocess.Process.wait` methods don't have a *timeout* parameter: use the :"
"func:`~asyncio.wait_for` function;"
msgstr ""
":meth:`~asyncio.subprocess.Process.communicate` 和 :meth:`~asyncio.subprocess"
".Process.wait` 方法沒有 *timeout* 參數：使用 :func:`~asyncio.wait_for`功能;"

#: ../../library/asyncio-subprocess.rst:180
#, fuzzy
msgid ""
"the :meth:`Process.wait() <asyncio.subprocess.Process.wait>` method is "
"asynchronous, whereas :meth:`subprocess.Popen.wait` method is implemented as "
"a blocking busy loop;"
msgstr ""
":meth:`Process.wait() <asyncio.subprocess.Process.wait>` 方法是非同步的，而 "
":meth:`subprocess.Popen.wait` 方法是作為阻塞式繁忙循環實作的；"

#: ../../library/asyncio-subprocess.rst:184
#, fuzzy
msgid "the *universal_newlines* parameter is not supported."
msgstr "不支援 *universal_newlines* 參數。"

#: ../../library/asyncio-subprocess.rst:186
#, fuzzy
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr "這個類是 :ref:`不是執行緒安全的 <asyncio-multithreading>`。"

#: ../../library/asyncio-subprocess.rst:188
#, fuzzy
msgid ""
"See also the :ref:`Subprocess and Threads <asyncio-subprocess-threads>` "
"section."
msgstr "另請參閱 :ref:`Subprocess and Threads <asyncio-subprocess-threads>` 部分。"

#: ../../library/asyncio-subprocess.rst:193
#, fuzzy
msgid "Wait for the child process to terminate."
msgstr "等待子行程終止。"

#: ../../library/asyncio-subprocess.rst:195
#, fuzzy
msgid "Set and return the :attr:`returncode` attribute."
msgstr "設定並回傳 :attr:`returncode` 屬性。"

#: ../../library/asyncio-subprocess.rst:199
#, fuzzy
msgid ""
"This method can deadlock when using ``stdout=PIPE`` or ``stderr=PIPE`` and "
"the child process generates so much output that it blocks waiting for the OS "
"pipe buffer to accept more data. Use the :meth:`communicate` method when "
"using pipes to avoid this condition."
msgstr ""
"當使用 ``stdout=PIPE`` 或 ``stderr=PIPE`` 時，此方法可能會死鎖，"
"並且子行程生成太多輸出以致於阻塞等待 OS 管道緩衝區接受更多資料。"
"在使用管道時使用 :meth:`communicate` 方法來避免這種情況。"

#: ../../library/asyncio-subprocess.rst:207
#, fuzzy
msgid "Interact with process:"
msgstr "與行程交互："

#: ../../library/asyncio-subprocess.rst:209
#, fuzzy
msgid "send data to *stdin* (if *input* is not ``None``);"
msgstr "將資料發送到 *stdin*（如果 *input* 不是 ``None``）；"

#: ../../library/asyncio-subprocess.rst:210
#, fuzzy
msgid "read data from *stdout* and *stderr*, until EOF is reached;"
msgstr "從 *stdout* 和 *stderr* 讀取資料，直到到達 EOF；"

#: ../../library/asyncio-subprocess.rst:211
#, fuzzy
msgid "wait for process to terminate."
msgstr "等待行程終止。"

#: ../../library/asyncio-subprocess.rst:213
#, fuzzy
msgid ""
"The optional *input* argument is the data (:class:`bytes` object) that will "
"be sent to the child process."
msgstr "可選的 *input* 參數是將被發送到子行程的資料（:class:`bytes` 物件）。"

#: ../../library/asyncio-subprocess.rst:216
#, fuzzy
msgid "Return a tuple ``(stdout_data, stderr_data)``."
msgstr "回傳一個元組``(stdout_data, stderr_data)``。"

#: ../../library/asyncio-subprocess.rst:218
#, fuzzy
msgid ""
"If either :exc:`BrokenPipeError` or :exc:`ConnectionResetError` exception is "
"raised when writing *input* into *stdin*, the exception is ignored.  This "
"condition occurs when the process exits before all data are written into "
"*stdin*."
msgstr ""
"如果在將 *input* 寫入 *stdin* 時引發 :exc:`BrokenPipeError` 或 "
":exc:`ConnectionResetError` 例外，則忽略該例外。當行程在所有資料寫入 *stdin* "
"之前退出時，就會出現這種情況。"

#: ../../library/asyncio-subprocess.rst:223
#, fuzzy
msgid ""
"If it is desired to send data to the process' *stdin*, the process needs to "
"be created with ``stdin=PIPE``.  Similarly, to get anything other than "
"``None`` in the result tuple, the process has to be created with "
"``stdout=PIPE`` and/or ``stderr=PIPE`` arguments."
msgstr ""
"如果希望將資料發送到行程'*stdin*，則需要使用 ``stdin=PIPE`` 建立行程。類似地"
"，要在結果元組中獲取除 ``None``以外的任何內容，必須使用“stdout=PIPE”和/或“stderr"
"=PIPE”參數建立行程。"

#: ../../library/asyncio-subprocess.rst:229
#, fuzzy
msgid ""
"Note, that the data read is buffered in memory, so do not use this method if "
"the data size is large or unlimited."
msgstr "注意，讀取的資料是快取在記憶體中的，所以如果資料量很大或者沒有限制，不要使用"
"這種方法。"

#: ../../library/asyncio-subprocess.rst:234
#, fuzzy
msgid "Sends the signal *signal* to the child process."
msgstr "將信號 *signal* 發送到子行程。"

#: ../../library/asyncio-subprocess.rst:238
#, fuzzy
msgid ""
"On Windows, :py:data:`SIGTERM` is an alias for :meth:`terminate`. "
"``CTRL_C_EVENT`` and ``CTRL_BREAK_EVENT`` can be sent to processes started "
"with a *creationflags* parameter which includes ``CREATE_NEW_PROCESS_GROUP``."
msgstr ""
"在 Windows 上，:py:data:`SIGTERM` 是 :meth:`terminate` 的別名。 "
"``CTRL_C_EVENT`` 和 ``CTRL_BREAK_EVENT`` 可以發送到以 *creationflags* "
"參數啟動的行程，其中包括 ``CREATE_NEW_PROCESS_GROUP``。"

#: ../../library/asyncio-subprocess.rst:245
#, fuzzy
msgid "Stop the child process."
msgstr "停止子行程。"

#: ../../library/asyncio-subprocess.rst:247
#, fuzzy
msgid ""
"On POSIX systems this method sends :py:data:`signal.SIGTERM` to the child "
"process."
msgstr "在 POSIX 系統上，此方法將 :py:data:`signal.SIGTERM` 發送到子行程。"

#: ../../library/asyncio-subprocess.rst:250
#, fuzzy
msgid ""
"On Windows the Win32 API function :c:func:`TerminateProcess` is called to "
"stop the child process."
msgstr "在 Windows 上，呼叫 Win32 API 函式 :c:func:`TerminateProcess` 來停止子行程。"

#: ../../library/asyncio-subprocess.rst:255
#, fuzzy
msgid "Kill the child process."
msgstr "殺死子行程。"

#: ../../library/asyncio-subprocess.rst:257
#, fuzzy
msgid ""
"On POSIX systems this method sends :py:data:`SIGKILL` to the child process."
msgstr "在 POSIX 系統上，此方法將 :py:data:`SIGKILL` 發送到子行程。"

#: ../../library/asyncio-subprocess.rst:260
#, fuzzy
msgid "On Windows this method is an alias for :meth:`terminate`."
msgstr "在 Windows 上，此方法是 :meth:`terminate` 的別名。"

#: ../../library/asyncio-subprocess.rst:264
#, fuzzy
msgid ""
"Standard input stream (:class:`StreamWriter`) or ``None`` if the process was "
"created with ``stdin=None``."
msgstr "標準輸入流 (:class:`StreamWriter`) 或 ``None`` 如果行程是用 ``stdin=None`` "
"建立的。"

#: ../../library/asyncio-subprocess.rst:269
#, fuzzy
msgid ""
"Standard output stream (:class:`StreamReader`) or ``None`` if the process "
"was created with ``stdout=None``."
msgstr "標準輸出流 (:class:`StreamReader`) 或 ``None`` 如果行程是用 ``stdout=None`` "
"建立的。"

#: ../../library/asyncio-subprocess.rst:274
#, fuzzy
msgid ""
"Standard error stream (:class:`StreamReader`) or ``None`` if the process was "
"created with ``stderr=None``."
msgstr "標準錯誤流 (:class:`StreamReader`) 或 ``None`` 如果行程是使用 ``stderr=None``"
" 建立的。"

#: ../../library/asyncio-subprocess.rst:279
#, fuzzy
msgid ""
"Use the :meth:`communicate` method rather than :attr:`process.stdin.write() "
"<stdin>`, :attr:`await process.stdout.read() <stdout>` or :attr:`await "
"process.stderr.read() <stderr>`. This avoids deadlocks due to streams "
"pausing reading or writing and blocking the child process."
msgstr ""
"使用 :meth:`communicate` 方法而不是 :attr:`process.stdin.write() <stdin>`, "
":attr:`await process.stdout.read() <stdout>` 或 :attr:`await process .stderr."
"read() <標準錯誤>`。這避免了由於流暫停讀取或寫入並阻塞子行程而導致的死鎖。"

#: ../../library/asyncio-subprocess.rst:288
#, fuzzy
msgid "Process identification number (PID)."
msgstr "行程標識號 (PID)。"

#: ../../library/asyncio-subprocess.rst:290
#, fuzzy
msgid ""
"Note that for processes created by the :func:`create_subprocess_shell` "
"function, this attribute is the PID of the spawned shell."
msgstr "請注意，對於由 create_subprocess_shell 函式建立的行程，此屬性是生成的 shell "
"的 PID。"

#: ../../library/asyncio-subprocess.rst:295
#, fuzzy
msgid "Return code of the process when it exits."
msgstr "行程退出時的回傳碼。"

#: ../../library/asyncio-subprocess.rst:297
#, fuzzy
msgid "A ``None`` value indicates that the process has not terminated yet."
msgstr "``None`` 值表示行程尚未終止。"

#: ../../library/asyncio-subprocess.rst:299
#, fuzzy
msgid ""
"A negative value ``-N`` indicates that the child was terminated by signal "
"``N`` (POSIX only)."
msgstr "負值 ``-N``表示孩子被信號 ``N``終止（僅限 POSIX）。"

#: ../../library/asyncio-subprocess.rst:306
msgid "Subprocess and Threads"
msgstr "子行程與線程"

#: ../../library/asyncio-subprocess.rst:308
#, fuzzy
msgid ""
"Standard asyncio event loop supports running subprocesses from different "
"threads by default."
msgstr "預設情況下，標準非同步事件循環支援從不同執行緒運行子行程。"

#: ../../library/asyncio-subprocess.rst:311
#, fuzzy
msgid ""
"On Windows subprocesses are provided by :class:`ProactorEventLoop` only "
"(default), :class:`SelectorEventLoop` has no subprocess support."
msgstr "在 Windows 上，子行程僅由 ProactorEventLoop 提供（預設），SelectorEventLoop "
"沒有子行程支援。"

#: ../../library/asyncio-subprocess.rst:314
#, fuzzy
msgid ""
"On UNIX *child watchers* are used for subprocess finish waiting, see :ref:"
"`asyncio-watchers` for more info."
msgstr "在 UNIX 上，*child watchers* 用於子行程完成等待，請參閱 :ref:`asyncio-"
"watchers` 了解更多資訊。"

#: ../../library/asyncio-subprocess.rst:320
#, fuzzy
msgid ""
"UNIX switched to use :class:`ThreadedChildWatcher` for spawning subprocesses "
"from different threads without any limitation."
msgstr "UNIX 切換到使用 ThreadedChildWatcher 來不受任何限制地從不同執行緒生成子行程。"

#: ../../library/asyncio-subprocess.rst:323
#, fuzzy
msgid ""
"Spawning a subprocess with *inactive* current child watcher raises :exc:"
"`RuntimeError`."
msgstr "使用 *inactive* 當前子觀察者生成子行程會引發 :exc:`RuntimeError`。"

#: ../../library/asyncio-subprocess.rst:326
#, fuzzy
msgid ""
"Note that alternative event loop implementations might have own limitations; "
"please refer to their documentation."
msgstr "請注意，替代事件循環實作可能有其自身的局限性；請參閱他們的文檔。"

#: ../../library/asyncio-subprocess.rst:331
#, fuzzy
msgid ""
"The :ref:`Concurrency and multithreading in asyncio <asyncio-"
"multithreading>` section."
msgstr ":ref:`asyncio 中的並發和多執行緒 <asyncio-multithreading>` 部分。"

#: ../../library/asyncio-subprocess.rst:336
msgid "Examples"
msgstr "範例"

#: ../../library/asyncio-subprocess.rst:338
#, fuzzy
msgid ""
"An example using the :class:`~asyncio.subprocess.Process` class to control a "
"subprocess and the :class:`StreamReader` class to read from its standard "
"output."
msgstr ""
"使用 :class:`~asyncio.subprocess.Process` 類控制子行程和 "
":class:`StreamReader` 類從其標準輸出讀取的示例。"

#: ../../library/asyncio-subprocess.rst:344
#, fuzzy
msgid ""
"The subprocess is created by the :func:`create_subprocess_exec` function::"
msgstr "子行程由 :func:`create_subprocess_exec` 函式建立："

#: ../../library/asyncio-subprocess.rst:371
#, fuzzy
msgid ""
"See also the :ref:`same example <asyncio_example_subprocess_proto>` written "
"using low-level APIs."
msgstr "另請參閱 :ref:`使用低階 API 編寫的相同示例 "
"<asyncio_example_subprocess_proto>`。"
