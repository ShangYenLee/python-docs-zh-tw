# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-25 00:20+0000\n"
"PO-Revision-Date: 2018-05-23 14:38+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/argparse.rst:2
msgid ""
":mod:`argparse` --- Parser for command-line options, arguments and sub-"
"commands"
msgstr ":mod:`argparse` --- 命令列選項、引數和子命令的剖析器"

#: ../../library/argparse.rst:12
msgid "**Source code:** :source:`Lib/argparse.py`"
msgstr "**原始碼：**\\ :source:`Lib/argparse.py`"

#: ../../library/argparse.rst:-1
msgid "Tutorial"
msgstr "教學"

#: ../../library/argparse.rst:18
#, fuzzy
msgid ""
"This page contains the API reference information. For a more gentle "
"introduction to Python command-line parsing, have a look at the :ref:"
"`argparse tutorial <argparse-tutorial>`."
msgstr ""
"此頁麵包含 API 參考資訊。如需更詳細地介紹 Python 命令列剖析，請查看 :ref:`"
"argparse 教程 <argparse-tutorial>`。"

#: ../../library/argparse.rst:22
#, fuzzy
msgid ""
"The :mod:`argparse` module makes it easy to write user-friendly command-line "
"interfaces. The program defines what arguments it requires, and :mod:"
"`argparse` will figure out how to parse those out of :data:`sys.argv`.  The :"
"mod:`argparse` module also automatically generates help and usage messages.  "
"The module will also issue errors when users give the program invalid "
"arguments."
msgstr ""
":mod:`argparse` "
"模組使編寫使用者友好的命令列界面變得容易。該程式定義了它需要的參數，並且 "
":mod:`argparse` 將找出如何從 :data:`sys.argv` 中剖析這些參數。 "
":mod:`argparse` 模組還會自動生成幫助和用法消息。當使用者為程式提供無效參數時"
"，該模組也會發出錯誤。"

#: ../../library/argparse.rst:30
#, fuzzy
msgid "Core Functionality"
msgstr "核心功能"

#: ../../library/argparse.rst:32
#, fuzzy
msgid ""
"The :mod:`argparse` module's support for command-line interfaces is built "
"around an instance of :class:`argparse.ArgumentParser`.  It is a container "
"for argument specifications and has options that apply the parser as whole::"
msgstr ""
":mod:`argparse` 模組對命令列界面的支援是圍繞 :class:`argparse.ArgumentParser`"
" 的實例構建的。它是參數規範的容器，並具有將剖析器作為整體應用的選項："

#: ../../library/argparse.rst:41
#, fuzzy
msgid ""
"The :meth:`ArgumentParser.add_argument` method attaches individual argument "
"specifications to the parser.  It supports positional arguments, options "
"that accept values, and on/off flags::"
msgstr "ArgumentParser.add_argument "
"方法將各個參數規範附加到剖析器。它支援位置參數、接受值的選項和開/關旗標::"

#: ../../library/argparse.rst:50
#, fuzzy
msgid ""
"The :meth:`ArgumentParser.parse_args` method runs the parser and places the "
"extracted data in a :class:`argparse.Namespace` object::"
msgstr "ArgumentParser.parse_args 方法運行剖析器並將提取的資料放入 "
"argparse.Namespace 對像中："

#: ../../library/argparse.rst:58
#, fuzzy
msgid "Quick Links for add_argument()"
msgstr "add_argument() 的快速鏈接"

#: ../../library/argparse.rst:61
msgid "Name"
msgstr "名稱"

#: ../../library/argparse.rst:61
msgid "Description"
msgstr "描述"

#: ../../library/argparse.rst:61
msgid "Values"
msgstr "數值"

#: ../../library/argparse.rst:63
msgid "action_"
msgstr "action_"

#: ../../library/argparse.rst:63
#, fuzzy
msgid "Specify how an argument should be handled"
msgstr "指定應如何處理參數"

#: ../../library/argparse.rst:63
msgid ""
"``'store'``, ``'store_const'``, ``'store_true'``, ``'append'``, "
"``'append_const'``, ``'count'``, ``'help'``, ``'version'``"
msgstr ""
"``'store'``, ``'store_const'``, ``'store_true'``, ``'append'``, "
"``'append_const'``, ``'count'``, ``'help'``, ``'version'``"

#: ../../library/argparse.rst:64
msgid "choices_"
msgstr "choices_"

#: ../../library/argparse.rst:64
#, fuzzy
msgid "Limit values to a specific set of choices"
msgstr "將值限制為一組特定的選擇"

#: ../../library/argparse.rst:64
msgid ""
"``['foo', 'bar']``, ``range(1, 10)``, or :class:`~collections.abc.Container` "
"instance"
msgstr ""
"``['foo', 'bar']``、``range(1, 10)`` 或 :class:`~collections.abc.Container` "
"實例"

#: ../../library/argparse.rst:65
msgid "const_"
msgstr "const_"

#: ../../library/argparse.rst:65
msgid "Store a constant value"
msgstr "儲存一個常數值"

#: ../../library/argparse.rst:66
msgid "default_"
msgstr "default_"

#: ../../library/argparse.rst:66
#, fuzzy
msgid "Default value used when an argument is not provided"
msgstr "未提供參數時使用的預設值"

#: ../../library/argparse.rst:66
msgid "Defaults to ``None``"
msgstr "預設為 ``None`` "

#: ../../library/argparse.rst:67
msgid "dest_"
msgstr "dest_"

#: ../../library/argparse.rst:67
#, fuzzy
msgid "Specify the attribute name used in the result namespace"
msgstr "指定結果命名空間中使用的屬性名稱"

#: ../../library/argparse.rst:68
msgid "help_"
msgstr "help_"

#: ../../library/argparse.rst:68
#, fuzzy
msgid "Help message for an argument"
msgstr "參數的幫助資訊"

#: ../../library/argparse.rst:69
msgid "metavar_"
msgstr "metavar_"

#: ../../library/argparse.rst:69
#, fuzzy
msgid "Alternate display name for the argument as shown in help"
msgstr "參數的備用顯示名稱，如幫助中所示"

#: ../../library/argparse.rst:70
msgid "nargs_"
msgstr "nargs_"

#: ../../library/argparse.rst:70
msgid "Number of times the argument can be used"
msgstr "引數可以使用的次數"

#: ../../library/argparse.rst:70
msgid ":class:`int`, ``'?'``, ``'*'``, or ``'+'``"
msgstr ":class:`int`, ``'?'``, ``'*'``, or ``'+'``"

#: ../../library/argparse.rst:71
msgid "required_"
msgstr "required_"

#: ../../library/argparse.rst:71
#, fuzzy
msgid "Indicate whether an argument is required or optional"
msgstr "指示參數是必需的還是可選的"

#: ../../library/argparse.rst:71
msgid "``True`` or ``False``"
msgstr "``True`` 或 ``False``"

#: ../../library/argparse.rst:72
msgid "type_"
msgstr "type_"

#: ../../library/argparse.rst:72
#, fuzzy
msgid "Automatically convert an argument to the given type"
msgstr "自動將參數轉換為給定型別"

#: ../../library/argparse.rst:72
msgid ""
":class:`int`, :class:`float`, ``argparse.FileType('w')``, or callable "
"function"
msgstr ""
":class:`int`、:class:`float`、``argparse.FileType('w')`` 或可呼叫的函式"

#: ../../library/argparse.rst:77
msgid "Example"
msgstr "範例"

#: ../../library/argparse.rst:79
#, fuzzy
msgid ""
"The following code is a Python program that takes a list of integers and "
"produces either the sum or the max::"
msgstr "以下程式碼是一個 Python 程式，它接受一個整數列表並生成總和或最大值："

#: ../../library/argparse.rst:94
#, fuzzy
msgid ""
"Assuming the above Python code is saved into a file called ``prog.py``, it "
"can be run at the command line and it provides useful help messages:"
msgstr "假設上面的 Python 程式碼保存在一個名為 ``prog.py`` "
"的文件中，它可以在命令列運行，並提供有用的幫助資訊："

#: ../../library/argparse.rst:111
#, fuzzy
msgid ""
"When run with the appropriate arguments, it prints either the sum or the max "
"of the command-line integers:"
msgstr "當使用適當的參數運行時，它會印出命令列整數的總和或最大值："

#: ../../library/argparse.rst:122
#, fuzzy
msgid "If invalid arguments are passed in, an error will be displayed:"
msgstr "如果傳入無效參數，將顯示錯誤："

#: ../../library/argparse.rst:130
#, fuzzy
msgid "The following sections walk you through this example."
msgstr "以下部分將引導您完成此示例。"

#: ../../library/argparse.rst:134
msgid "Creating a parser"
msgstr "建立一個剖析器"

#: ../../library/argparse.rst:136
#, fuzzy
msgid ""
"The first step in using the :mod:`argparse` is creating an :class:"
"`ArgumentParser` object::"
msgstr "使用 :mod:`argparse` 的第一步是建立一個 :class:`ArgumentParser` 物件::"

#: ../../library/argparse.rst:141
#, fuzzy
msgid ""
"The :class:`ArgumentParser` object will hold all the information necessary "
"to parse the command line into Python data types."
msgstr "ArgumentParser 物件將保存將命令列剖析為 Python 資料型別所需的所有資訊。"

#: ../../library/argparse.rst:146
msgid "Adding arguments"
msgstr "增加引數"

#: ../../library/argparse.rst:148
#, fuzzy
msgid ""
"Filling an :class:`ArgumentParser` with information about program arguments "
"is done by making calls to the :meth:`~ArgumentParser.add_argument` method. "
"Generally, these calls tell the :class:`ArgumentParser` how to take the "
"strings on the command line and turn them into objects.  This information is "
"stored and used when :meth:`~ArgumentParser.parse_args` is called. For "
"example::"
msgstr ""
"通過呼叫 :meth:`~ArgumentParser.add_argument` 方法，用有關程式參數的資訊填充 "
"ArgumentParser。通常，這些呼叫告訴 ArgumentParser "
"如何獲取命令列上的字串並將它們轉換為物件。呼叫 :meth:`~ArgumentParser."
"parse_args` 時會儲存和使用此資訊。例如：："

#: ../../library/argparse.rst:160
#, fuzzy
msgid ""
"Later, calling :meth:`~ArgumentParser.parse_args` will return an object with "
"two attributes, ``integers`` and ``accumulate``.  The ``integers`` attribute "
"will be a list of one or more integers, and the ``accumulate`` attribute "
"will be either the :func:`sum` function, if ``--sum`` was specified at the "
"command line, or the :func:`max` function if it was not."
msgstr ""
"稍後，呼叫 :meth:`~ArgumentParser.parse_args` "
"將回傳一個具有兩個屬性的物件，``integers`` 和 ``accumulate``。 ``integers`` "
"屬性將是一個或多個整數的列表，``accumulate`` 屬性將是 :func:`sum` 函式，"
"如果在命令中指定了 ``--sum``行，或者 :func:`max` 函式，如果不是的話。"

#: ../../library/argparse.rst:168
msgid "Parsing arguments"
msgstr "剖析引數"

#: ../../library/argparse.rst:170
#, fuzzy
msgid ""
":class:`ArgumentParser` parses arguments through the :meth:`~ArgumentParser."
"parse_args` method.  This will inspect the command line, convert each "
"argument to the appropriate type and then invoke the appropriate action. In "
"most cases, this means a simple :class:`Namespace` object will be built up "
"from attributes parsed out of the command line::"
msgstr ""
":class:`ArgumentParser` 通過 :meth:`~ArgumentParser.parse_args` 方法剖析參數"
"。這將檢查命令列，將每個參數轉換為適當的型別，然後呼叫適當的操作。在大多數情"
"況下，這意味著一個簡單的 :class:`Namespace` 物件將從命令列剖析的屬性構建："

#: ../../library/argparse.rst:179
#, fuzzy
msgid ""
"In a script, :meth:`~ArgumentParser.parse_args` will typically be called "
"with no arguments, and the :class:`ArgumentParser` will automatically "
"determine the command-line arguments from :data:`sys.argv`."
msgstr ""
"在腳本中，:meth:`~ArgumentParser.parse_args` "
"通常會在沒有參數的情況下呼叫，並且 :class:`ArgumentParser` "
"將自動確定來自 :data:`sys.argv` 的命令列參數。"

#: ../../library/argparse.rst:185
msgid "ArgumentParser objects"
msgstr "ArgumentParser 物件"

#: ../../library/argparse.rst:194
#, fuzzy
msgid ""
"Create a new :class:`ArgumentParser` object. All parameters should be passed "
"as keyword arguments. Each parameter has its own more detailed description "
"below, but in short they are:"
msgstr "建立一個新的 ArgumentParser 物件。所有參數都應作為關鍵字參數傳遞。每個參數在"
"下面都有自己更詳細的描述，但簡而言之，它們是："

#: ../../library/argparse.rst:198
#, fuzzy
msgid ""
"prog_ - The name of the program (default: ``os.path.basename(sys.argv[0])``)"
msgstr "prog_ - 程式的名稱（預設值：``os.path.basename(sys.argv[0])``）"

#: ../../library/argparse.rst:201
#, fuzzy
msgid ""
"usage_ - The string describing the program usage (default: generated from "
"arguments added to parser)"
msgstr "usage_ - 描述程式用法的字串（預設值：從新增到剖析器的參數生成）"

#: ../../library/argparse.rst:204
#, fuzzy
msgid ""
"description_ - Text to display before the argument help (by default, no text)"
msgstr "description_ - 在參數幫助之前顯示的文本（預設情況下，沒有文本）"

#: ../../library/argparse.rst:207
#, fuzzy
msgid "epilog_ - Text to display after the argument help (by default, no text)"
msgstr "epilog_ - 在參數幫助後顯示的文本（預設情況下，無文本）"

#: ../../library/argparse.rst:209
#, fuzzy
msgid ""
"parents_ - A list of :class:`ArgumentParser` objects whose arguments should "
"also be included"
msgstr "parents_ - ArgumentParser 物件的列表，其參數也應包括在內"

#: ../../library/argparse.rst:212
#, fuzzy
msgid "formatter_class_ - A class for customizing the help output"
msgstr "formatter_class_ - 用於自定義幫助輸出的類"

#: ../../library/argparse.rst:214
#, fuzzy
msgid ""
"prefix_chars_ - The set of characters that prefix optional arguments "
"(default: '-')"
msgstr "prefix_chars_ - 前綴可選參數的字元集（預設值：'-'）"

#: ../../library/argparse.rst:217
#, fuzzy
msgid ""
"fromfile_prefix_chars_ - The set of characters that prefix files from which "
"additional arguments should be read (default: ``None``)"
msgstr "fromfile_prefix_chars_ - "
"應該從中讀取附加參數的文件前綴字元集（預設值：``None``）"

#: ../../library/argparse.rst:220
#, fuzzy
msgid ""
"argument_default_ - The global default value for arguments (default: "
"``None``)"
msgstr "argument_default_ - 參數的全局預設值（預設值：``None``）"

#: ../../library/argparse.rst:223
#, fuzzy
msgid ""
"conflict_handler_ - The strategy for resolving conflicting optionals "
"(usually unnecessary)"
msgstr "conflict_handler_ - 解決衝突選項的策略（通常是不必要的）"

#: ../../library/argparse.rst:226
#, fuzzy
msgid ""
"add_help_ - Add a ``-h/--help`` option to the parser (default: ``True``)"
msgstr "add_help_ - 向剖析器新增一個``-h/--help``選項（預設值：``True``）"

#: ../../library/argparse.rst:228
#, fuzzy
msgid ""
"allow_abbrev_ - Allows long options to be abbreviated if the abbreviation is "
"unambiguous. (default: ``True``)"
msgstr "allow_abbrev_ - 如果縮寫是明確的，則允許縮寫長選項。 （預設值：``True``）"

#: ../../library/argparse.rst:231
#, fuzzy
msgid ""
"exit_on_error_ - Determines whether or not ArgumentParser exits with error "
"info when an error occurs. (default: ``True``)"
msgstr "exit_on_error_ - 確定發生錯誤時 ArgumentParser 是否退出並顯示錯誤資訊。 "
"（預設值：``True``）"

#: ../../library/argparse.rst:234
msgid "*allow_abbrev* parameter was added."
msgstr "新增 *allow_abbrev* 參數。"

#: ../../library/argparse.rst:237
#, fuzzy
msgid ""
"In previous versions, *allow_abbrev* also disabled grouping of short flags "
"such as ``-vv`` to mean ``-v -v``."
msgstr "在以前的版本中，*allow_abbrev* 還禁用了短旗標的分組，例如 ``-vv`` 表示 ``-v "
"-v``。"

#: ../../library/argparse.rst:241
msgid "*exit_on_error* parameter was added."
msgstr "新增 *exit_on_error* 參數。"

#: ../../library/argparse.rst:244 ../../library/argparse.rst:770
#, fuzzy
msgid "The following sections describe how each of these are used."
msgstr "以下各節描述瞭如何使用它們中的每一個。"

#: ../../library/argparse.rst:250
#, fuzzy
msgid "prog"
msgstr "前衛"

#: ../../library/argparse.rst:252
#, fuzzy
msgid ""
"By default, :class:`ArgumentParser` objects use ``sys.argv[0]`` to determine "
"how to display the name of the program in help messages.  This default is "
"almost always desirable because it will make the help messages match how the "
"program was invoked on the command line.  For example, consider a file named "
"``myprogram.py`` with the following code::"
msgstr ""
"預設情況下，ArgumentParser 物件使用 sys.argv[0] 來確定如何在幫助消息中顯示程"
"序名稱。這個預設值幾乎總是可取的，因為它會使幫助消息與程式在命令列上的呼叫方"
"式相匹配。例如，考慮一個名為“myprogram.py”的文件，其中包含以下程式碼："

#: ../../library/argparse.rst:263
#, fuzzy
msgid ""
"The help for this program will display ``myprogram.py`` as the program name "
"(regardless of where the program was invoked from):"
msgstr "該程式的幫助將顯示“myprogram.py”作為程式名稱（無論從何處呼叫程式）："

#: ../../library/argparse.rst:282
#, fuzzy
msgid ""
"To change this default behavior, another value can be supplied using the "
"``prog=`` argument to :class:`ArgumentParser`::"
msgstr "要更改此預設行為，可以使用 ``prog=`` 參數提供另一個值給 "
":class:`ArgumentParser`::"

#: ../../library/argparse.rst:292
#, fuzzy
msgid ""
"Note that the program name, whether determined from ``sys.argv[0]`` or from "
"the ``prog=`` argument, is available to help messages using the ``%(prog)s`` "
"format specifier."
msgstr "請注意，無論是從“sys.argv[0]”還是“prog=”參數確定的程式名稱，都可用於使用“%(pr"
"og)s”格式說明符的幫助消息。"

#: ../../library/argparse.rst:309
#, fuzzy
msgid "usage"
msgstr "用法"

#: ../../library/argparse.rst:311
#, fuzzy
msgid ""
"By default, :class:`ArgumentParser` calculates the usage message from the "
"arguments it contains::"
msgstr "預設情況下，ArgumentParser 會根據它包含的參數計算用法消息："

#: ../../library/argparse.rst:327
#, fuzzy
msgid ""
"The default message can be overridden with the ``usage=`` keyword argument::"
msgstr "可以使用 ``usage=`` 關鍵字參數覆蓋預設消息::"

#: ../../library/argparse.rst:342
#, fuzzy
msgid ""
"The ``%(prog)s`` format specifier is available to fill in the program name "
"in your usage messages."
msgstr "``%(prog)s`` 格式說明符可用於在您的使用消息中填寫程式名稱。"

#: ../../library/argparse.rst:349
msgid "description"
msgstr "描述"

#: ../../library/argparse.rst:351
#, fuzzy
msgid ""
"Most calls to the :class:`ArgumentParser` constructor will use the "
"``description=`` keyword argument.  This argument gives a brief description "
"of what the program does and how it works.  In help messages, the "
"description is displayed between the command-line usage string and the help "
"messages for the various arguments::"
msgstr ""
"大多數對 ArgumentParser 構造函式的呼叫將使用 ``description=`` 關鍵字參數。該"
"參數簡要描述了程式的作用及其工作原理。在幫助消息中，說明顯示在命令列用法字串"
"和各種參數的幫助消息之間："

#: ../../library/argparse.rst:366
#, fuzzy
msgid ""
"By default, the description will be line-wrapped so that it fits within the "
"given space.  To change this behavior, see the formatter_class_ argument."
msgstr "預設情況下，描述將換行以適合給定的空間。要更改此行為，請參閱 "
"formatter_class_ 參數。"

#: ../../library/argparse.rst:371
#, fuzzy
msgid "epilog"
msgstr "結語"

#: ../../library/argparse.rst:373
#, fuzzy
msgid ""
"Some programs like to display additional description of the program after "
"the description of the arguments.  Such text can be specified using the "
"``epilog=`` argument to :class:`ArgumentParser`::"
msgstr "有些程式喜歡在參數描述之後顯示程式的附加描述。可以使用 ArgumentParser 的 "
"``epilog=`` 參數指定此類文本："

#: ../../library/argparse.rst:390
#, fuzzy
msgid ""
"As with the description_ argument, the ``epilog=`` text is by default line-"
"wrapped, but this behavior can be adjusted with the formatter_class_ "
"argument to :class:`ArgumentParser`."
msgstr ""
"與 description_ 參數一樣，``epilog=`` 文本預設換行，但可以使用 "
"ArgumentParser 的 formatter_class_ 參數調整此行為。"

#: ../../library/argparse.rst:396
#, fuzzy
msgid "parents"
msgstr "父母"

#: ../../library/argparse.rst:398
#, fuzzy
msgid ""
"Sometimes, several parsers share a common set of arguments. Rather than "
"repeating the definitions of these arguments, a single parser with all the "
"shared arguments and passed to ``parents=`` argument to :class:"
"`ArgumentParser` can be used.  The ``parents=`` argument takes a list of :"
"class:`ArgumentParser` objects, collects all the positional and optional "
"actions from them, and adds these actions to the :class:`ArgumentParser` "
"object being constructed::"
msgstr ""
"有時，多個剖析器共享一組公開參數。與其重複這些參數的定義，"
"不如使用具有所有共享參數並傳遞給 ArgumentParser 的 ``parents=`` "
"參數的單個剖析器。 ``parents=`` 參數採用 ArgumentParser "
"物件列表，從中收集所有位置和可選操作，並將這些操作新增到正在構造的 "
"ArgumentParser 對像中::"

#: ../../library/argparse.rst:418
#, fuzzy
msgid ""
"Note that most parent parsers will specify ``add_help=False``.  Otherwise, "
"the :class:`ArgumentParser` will see two ``-h/--help`` options (one in the "
"parent and one in the child) and raise an error."
msgstr ""
"請注意，大多數父剖析器將指定 "
"``add_help=False``。否則，:class:`ArgumentParser` 將看到兩個 ``-h/--help`` "
"選項（一個在父項中，一個在子項中）並引發錯誤。"

#: ../../library/argparse.rst:423
#, fuzzy
msgid ""
"You must fully initialize the parsers before passing them via ``parents=``. "
"If you change the parent parsers after the child parser, those changes will "
"not be reflected in the child."
msgstr "在通過 ``parents=`` 傳遞它們之前，您必須完全初始化剖析器。如果在子剖析器之後"
"更改父剖析器，這些更改將不會反映在子剖析器中。"

#: ../../library/argparse.rst:431
msgid "formatter_class"
msgstr "formatter_class"

#: ../../library/argparse.rst:433
#, fuzzy
msgid ""
":class:`ArgumentParser` objects allow the help formatting to be customized "
"by specifying an alternate formatting class.  Currently, there are four such "
"classes:"
msgstr ":class:`ArgumentParser` "
"物件允許通過指定替代格式類來自定義幫助格式。目前，有四個這樣的類："

#: ../../library/argparse.rst:442
#, fuzzy
msgid ""
":class:`RawDescriptionHelpFormatter` and :class:`RawTextHelpFormatter` give "
"more control over how textual descriptions are displayed. By default, :class:"
"`ArgumentParser` objects line-wrap the description_ and epilog_ texts in "
"command-line help messages::"
msgstr ""
":class:`RawDescriptionHelpFormatter` 和 :class:`RawTextHelpFormatter` "
"可以更好地控制文本描述的顯示方式。預設情況下，ArgumentParser "
"物件將命令列幫助消息中的 description_ 和 epilog_ 文本換行::"

#: ../../library/argparse.rst:467
#, fuzzy
msgid ""
"Passing :class:`RawDescriptionHelpFormatter` as ``formatter_class=`` "
"indicates that description_ and epilog_ are already correctly formatted and "
"should not be line-wrapped::"
msgstr ""
"傳遞 :class:`RawDescriptionHelpFormatter` 作為 ``formatter_class=`` 表示 "
"description_ 和 epilog_ 已經正確格式化並且不應該換行::"

#: ../../library/argparse.rst:493
#, fuzzy
msgid ""
":class:`RawTextHelpFormatter` maintains whitespace for all sorts of help "
"text, including argument descriptions. However, multiple new lines are "
"replaced with one. If you wish to preserve multiple blank lines, add spaces "
"between the newlines."
msgstr ""
":class:`RawTextHelpFormatter` 為各種幫助文本保留空白，包括參數描述。但是，多"
"個新行被替換為一個。如果您希望保留多個空行，請在換行符之間新增空格。"

#: ../../library/argparse.rst:498
#, fuzzy
msgid ""
":class:`ArgumentDefaultsHelpFormatter` automatically adds information about "
"default values to each of the argument help messages::"
msgstr ":class:`ArgumentDefaultsHelpFormatter` "
"自動將有關預設值的資訊新增到每個參數幫助消息中::"

#: ../../library/argparse.rst:516
#, fuzzy
msgid ""
":class:`MetavarTypeHelpFormatter` uses the name of the type_ argument for "
"each argument as the display name for its values (rather than using the "
"dest_ as the regular formatter does)::"
msgstr ""
":class:`MetavarTypeHelpFormatter` 使用每個參數的 type_ "
"參數的名稱作為其值的顯示名稱（而不是像常規格式化程式那樣使用 dest_）::"

#: ../../library/argparse.rst:537
msgid "prefix_chars"
msgstr "prefix_chars"

#: ../../library/argparse.rst:539
#, fuzzy
msgid ""
"Most command-line options will use ``-`` as the prefix, e.g. ``-f/--foo``. "
"Parsers that need to support different or additional prefix characters, e.g. "
"for options like ``+f`` or ``/foo``, may specify them using the "
"``prefix_chars=`` argument to the ArgumentParser constructor::"
msgstr ""
"大多數命令列選項將使用 ``-``作為前綴，例如``-f/"
"--foo``。需要支援不同或額外前綴字元的剖析器，例如對於像``+f`` 或``/foo`` "
"這樣的選項，可以使用ArgumentParser 構造函式的``prefix_chars=`` 參數指定它們："

#: ../../library/argparse.rst:551
#, fuzzy
msgid ""
"The ``prefix_chars=`` argument defaults to ``'-'``. Supplying a set of "
"characters that does not include ``-`` will cause ``-f/--foo`` options to be "
"disallowed."
msgstr "``prefix_chars=`` 參數預設為 ``'-'``。提供一組不包括 ``-``的字元將導致“-f/"
"--foo”選項被禁止。"

#: ../../library/argparse.rst:557
msgid "fromfile_prefix_chars"
msgstr "fromfile_prefix_chars"

#: ../../library/argparse.rst:559
#, fuzzy
msgid ""
"Sometimes, when dealing with a particularly long argument list, it may make "
"sense to keep the list of arguments in a file rather than typing it out at "
"the command line.  If the ``fromfile_prefix_chars=`` argument is given to "
"the :class:`ArgumentParser` constructor, then arguments that start with any "
"of the specified characters will be treated as files, and will be replaced "
"by the arguments they contain.  For example::"
msgstr ""
"有時，在處理特別長的參數列表時，將參數列表保存在文件中而不是在命令列中鍵入它"
"可能更有意義。如果將 ``fromfile_prefix_chars=`` 參數提供給 ArgumentParser 構"
"造函式，則以任何指定字元開頭的參數將被視為文件，並將被它們包含的參數替換。例"
"如：："

#: ../../library/argparse.rst:573
#, fuzzy
msgid ""
"Arguments read from a file must by default be one per line (but see also :"
"meth:`~ArgumentParser.convert_arg_line_to_args`) and are treated as if they "
"were in the same place as the original file referencing argument on the "
"command line.  So in the example above, the expression ``['-f', 'foo', "
"'@args.txt']`` is considered equivalent to the expression ``['-f', 'foo', '-"
"f', 'bar']``."
msgstr ""
"從文件中讀取的參數必須預設為每行一個（但另請參閱 :meth:`~ArgumentParser.conve"
"rt_arg_line_to_args`）並且被視為與原始文件在命令列上引用參數相同的位置。所以"
"在上面的例子中，表達式 ``['-f', 'foo', '@args.txt']`` 被認為等同於表達式 "
"``['-f', 'foo', '-f '，'酒吧']``。"

#: ../../library/argparse.rst:579
#, fuzzy
msgid ""
"The ``fromfile_prefix_chars=`` argument defaults to ``None``, meaning that "
"arguments will never be treated as file references."
msgstr "``fromfile_prefix_chars=`` 參數預設為 "
"``None``，這意味著參數永遠不會被視為文件引用。"

#: ../../library/argparse.rst:584
msgid "argument_default"
msgstr "argument_default"

#: ../../library/argparse.rst:586
#, fuzzy
msgid ""
"Generally, argument defaults are specified either by passing a default to :"
"meth:`~ArgumentParser.add_argument` or by calling the :meth:`~ArgumentParser."
"set_defaults` methods with a specific set of name-value pairs.  Sometimes "
"however, it may be useful to specify a single parser-wide default for "
"arguments.  This can be accomplished by passing the ``argument_default=`` "
"keyword argument to :class:`ArgumentParser`.  For example, to globally "
"suppress attribute creation on :meth:`~ArgumentParser.parse_args` calls, we "
"supply ``argument_default=SUPPRESS``::"
msgstr ""
"通常，通過將預設值傳遞給 :meth:`~ArgumentParser.add_argument` "
"或通過使用一組特定的名稱-值對呼叫 :meth:`~ArgumentParser.set_defaults` "
"方法來指定參數預設值。然而，有時為參數指定單個剖析器範圍的預設值可能很有用。"
"這可以通過將 argument_default= 關鍵字參數傳遞給 ArgumentParser 來實作。例如，"
"要在 :meth:`~ArgumentParser.parse_args` 呼叫中全局抑制屬性建立，我們提供 "
"``argument_default=SUPPRESS``::"

#: ../../library/argparse.rst:606
msgid "allow_abbrev"
msgstr "allow_abbrev"

#: ../../library/argparse.rst:608
#, fuzzy
msgid ""
"Normally, when you pass an argument list to the :meth:`~ArgumentParser."
"parse_args` method of an :class:`ArgumentParser`, it :ref:`recognizes "
"abbreviations <prefix-matching>` of long options."
msgstr ""
"通常，當您將參數列表傳遞給 ArgumentParser 的 :meth:`~ArgumentParser."
"parse_args` 方法時，它會識別長選項的縮寫 <prefix-matching>。"

#: ../../library/argparse.rst:612
#, fuzzy
msgid "This feature can be disabled by setting ``allow_abbrev`` to ``False``::"
msgstr "可以通過將 ``allow_abbrev`` 設定為 ``False`` 來禁用此功能::"

#: ../../library/argparse.rst:625
msgid "conflict_handler"
msgstr "conflict_handler"

#: ../../library/argparse.rst:627
#, fuzzy
msgid ""
":class:`ArgumentParser` objects do not allow two actions with the same "
"option string.  By default, :class:`ArgumentParser` objects raise an "
"exception if an attempt is made to create an argument with an option string "
"that is already in use::"
msgstr ""
":class:`ArgumentParser` 對像不允許兩個操作具有相同的選項字串。預設情況下，如"
"果嘗試使用已在使用的選項字串建立參數，ArgumentParser 物件會引發例外："

#: ../../library/argparse.rst:639
#, fuzzy
msgid ""
"Sometimes (e.g. when using parents_) it may be useful to simply override any "
"older arguments with the same option string.  To get this behavior, the "
"value ``'resolve'`` can be supplied to the ``conflict_handler=`` argument "
"of :class:`ArgumentParser`::"
msgstr ""
"有時（例如，當使用 parents_ "
"時）簡單地用相同的選項字串覆蓋任何舊參數可能很有用。要獲得此行為，可以將值 "
"``'resolve'`` 提供給 ArgumentParser:: 的 ``conflict_handler=`` 參數："

#: ../../library/argparse.rst:655
#, fuzzy
msgid ""
"Note that :class:`ArgumentParser` objects only remove an action if all of "
"its option strings are overridden.  So, in the example above, the old ``-f/--"
"foo`` action is retained as the ``-f`` action, because only the ``--foo`` "
"option string was overridden."
msgstr ""
"請注意 :class:`ArgumentParser` "
"物件僅在其所有選項字串都被覆蓋時才刪除操作。因此，在上面的示例中，舊的 ``-f/"
"--foo`` 操作保留為 ``-f`` 操作，因為只有 ``--foo`` 選項字串被覆蓋。"

#: ../../library/argparse.rst:662
msgid "add_help"
msgstr "add_help"

#: ../../library/argparse.rst:664
#, fuzzy
msgid ""
"By default, ArgumentParser objects add an option which simply displays the "
"parser's help message. For example, consider a file named ``myprogram.py`` "
"containing the following code::"
msgstr ""
"預設情況下，ArgumentParser "
"物件新增一個選項，該選項僅顯示剖析器的幫助消息。例如，考慮一個名為“myprogram."
"py”的文件，其中包含以下程式碼："

#: ../../library/argparse.rst:673
#, fuzzy
msgid ""
"If ``-h`` or ``--help`` is supplied at the command line, the ArgumentParser "
"help will be printed:"
msgstr "如果在命令列中提供了``-h`` 或``--help``，ArgumentParser 幫助將被印出出來："

#: ../../library/argparse.rst:685
#, fuzzy
msgid ""
"Occasionally, it may be useful to disable the addition of this help option. "
"This can be achieved by passing ``False`` as the ``add_help=`` argument to :"
"class:`ArgumentParser`::"
msgstr ""
"有時，禁用此幫助選項的新增可能很有用。這可以通過將 ``False`` 作為 "
"``add_help=`` 參數傳遞給 ArgumentParser::"

#: ../../library/argparse.rst:697
#, fuzzy
msgid ""
"The help option is typically ``-h/--help``. The exception to this is if the "
"``prefix_chars=`` is specified and does not include ``-``, in which case ``-"
"h`` and ``--help`` are not valid options.  In this case, the first character "
"in ``prefix_chars`` is used to prefix the help options::"
msgstr ""
"幫助選項通常是``-h/--help``。例外情況是，如果指定了 ``prefix_chars=`` "
"並且不包括 ``-``，在這種情況下，``-h`` 和 ``--help`` "
"不是有效選項。在這種情況下，``prefix_chars`` "
"中的第一個字元用於作為幫助選項的前綴::"

#: ../../library/argparse.rst:712
msgid "exit_on_error"
msgstr "exit_on_error"

#: ../../library/argparse.rst:714
#, fuzzy
msgid ""
"Normally, when you pass an invalid argument list to the :meth:"
"`~ArgumentParser.parse_args` method of an :class:`ArgumentParser`, it will "
"exit with error info."
msgstr ""
"通常，當您將無效參數列表傳遞給 ArgumentParser 的 :meth:`~ArgumentParser."
"parse_args` 方法時，它將退出並顯示錯誤資訊。"

#: ../../library/argparse.rst:717
#, fuzzy
msgid ""
"If the user would like to catch errors manually, the feature can be enabled "
"by setting ``exit_on_error`` to ``False``::"
msgstr "如果使用者想手動捕獲錯誤，可以通過將“exit_on_error”設定為 ``False``來啟用該功能"
"："

#: ../../library/argparse.rst:734
#, fuzzy
msgid "The add_argument() method"
msgstr "add_argument() 方法"

#: ../../library/argparse.rst:740
#, fuzzy
msgid ""
"Define how a single command-line argument should be parsed.  Each parameter "
"has its own more detailed description below, but in short they are:"
msgstr "定義應如何剖析單個命令列參數。每個參數在下面都有自己更詳細的描述，但簡而言之"
"，它們是："

#: ../../library/argparse.rst:743
#, fuzzy
msgid ""
"`name or flags`_ - Either a name or a list of option strings, e.g. ``foo`` "
"or ``-f, --foo``."
msgstr "`name or flags`_ - 名稱或選項字串列表，例如``foo`` 或 ``-f, --foo``。"

#: ../../library/argparse.rst:746
#, fuzzy
msgid ""
"action_ - The basic type of action to be taken when this argument is "
"encountered at the command line."
msgstr "action_ - 在命令列遇到此參數時要採取的基本操作型別。"

#: ../../library/argparse.rst:749
#, fuzzy
msgid "nargs_ - The number of command-line arguments that should be consumed."
msgstr "nargs_ - 應該使用的命令列參數的數量。"

#: ../../library/argparse.rst:751
#, fuzzy
msgid ""
"const_ - A constant value required by some action_ and nargs_ selections."
msgstr "const_ - 某些 action_ 和 nargs_ 選擇所需的常數值。"

#: ../../library/argparse.rst:753
#, fuzzy
msgid ""
"default_ - The value produced if the argument is absent from the command "
"line and if it is absent from the namespace object."
msgstr "default_ - 如果參數在命令列中不存在並且在命名空間對像中不存在，則生成的值。"

#: ../../library/argparse.rst:756
#, fuzzy
msgid ""
"type_ - The type to which the command-line argument should be converted."
msgstr "type_ - 命令列參數應轉換成的型別。"

#: ../../library/argparse.rst:758
#, fuzzy
msgid "choices_ - A sequence of the allowable values for the argument."
msgstr "choices_ - 參數允許值的序列。"

#: ../../library/argparse.rst:760
#, fuzzy
msgid ""
"required_ - Whether or not the command-line option may be omitted (optionals "
"only)."
msgstr "required_ - 命令列選項是否可以省略（僅限選項）。"

#: ../../library/argparse.rst:763
#, fuzzy
msgid "help_ - A brief description of what the argument does."
msgstr "help_ - 參數作用的簡要說明。"

#: ../../library/argparse.rst:765
#, fuzzy
msgid "metavar_ - A name for the argument in usage messages."
msgstr "metavar_ - 使用消息中參數的名稱。"

#: ../../library/argparse.rst:767
#, fuzzy
msgid ""
"dest_ - The name of the attribute to be added to the object returned by :"
"meth:`parse_args`."
msgstr "dest_ - 要新增到由 parse_args 回傳的物件的屬性的名稱。"

#: ../../library/argparse.rst:776
#, fuzzy
msgid "name or flags"
msgstr "名稱或旗標"

#: ../../library/argparse.rst:778
#, fuzzy
msgid ""
"The :meth:`~ArgumentParser.add_argument` method must know whether an "
"optional argument, like ``-f`` or ``--foo``, or a positional argument, like "
"a list of filenames, is expected.  The first arguments passed to :meth:"
"`~ArgumentParser.add_argument` must therefore be either a series of flags, "
"or a simple argument name."
msgstr ""
":meth:`~ArgumentParser.add_argument` 方法必須知道是否需要一個可選參數，如 "
"``-f`` 或 ``--foo``，或一個位置參數，如文件名列表。因此，傳遞給 "
":meth:`~ArgumentParser.add_argument` "
"的第一個參數必須是一系列旗標，或者是一個簡單的參數名稱。"

#: ../../library/argparse.rst:784
#, fuzzy
msgid "For example, an optional argument could be created like::"
msgstr "例如，可以像這樣建立一個可選參數："

#: ../../library/argparse.rst:788
#, fuzzy
msgid "while a positional argument could be created like::"
msgstr "雖然可以像這樣建立位置參數："

#: ../../library/argparse.rst:792
#, fuzzy
msgid ""
"When :meth:`~ArgumentParser.parse_args` is called, optional arguments will "
"be identified by the ``-`` prefix, and the remaining arguments will be "
"assumed to be positional::"
msgstr ""
"當呼叫 :meth:`~ArgumentParser.parse_args` 時，可選參數將由 ``-`` "
"前綴標識，其餘參數將被假定為位置::"

#: ../../library/argparse.rst:811
#, fuzzy
msgid "action"
msgstr "行動"

#: ../../library/argparse.rst:813
#, fuzzy
msgid ""
":class:`ArgumentParser` objects associate command-line arguments with "
"actions.  These actions can do just about anything with the command-line "
"arguments associated with them, though most actions simply add an attribute "
"to the object returned by :meth:`~ArgumentParser.parse_args`.  The "
"``action`` keyword argument specifies how the command-line arguments should "
"be handled. The supplied actions are:"
msgstr ""
":class:`ArgumentParser` 物件將命令列參數與操作相關聯。這些操作幾乎可以用與之"
"關聯的命令列參數做任何事情，儘管大多數操作只是向 :meth:`~ArgumentParser."
"parse_args` 回傳的物件新增一個屬性。 ``action`` "
"關鍵字參數指定應如何處理命令列參數。提供的操作是："

#: ../../library/argparse.rst:819
#, fuzzy
msgid ""
"``'store'`` - This just stores the argument's value.  This is the default "
"action. For example::"
msgstr "``'store'`` - 這只是儲存參數的值。這是預設操作。例如：："

#: ../../library/argparse.rst:827
#, fuzzy
msgid ""
"``'store_const'`` - This stores the value specified by the const_ keyword "
"argument; note that the const_ keyword argument defaults to ``None``.  The "
"``'store_const'`` action is most commonly used with optional arguments that "
"specify some sort of flag.  For example::"
msgstr ""
"``'store_const'`` - 這儲存由 const_ 關鍵字參數指定的值；請注意，const_ "
"關鍵字參數預設為 ``None`` 。 ``'store_const'`` "
"操作最常與指定某種旗標的可選參數一起使用。例如：："

#: ../../library/argparse.rst:837
#, fuzzy
msgid ""
"``'store_true'`` and ``'store_false'`` - These are special cases of "
"``'store_const'`` used for storing the values ``True`` and ``False`` "
"respectively.  In addition, they create default values of ``False`` and "
"``True`` respectively.  For example::"
msgstr ""
"``'store_true'`` 和 ``'store_false'`` - 這些是 ``'store_const'`` 的特例，"
"分別用於儲存值 ``True`` 和 "
"``False``。此外，它們分別建立預設值 ``False``和 ``True``。例如：："

#: ../../library/argparse.rst:849
#, fuzzy
msgid ""
"``'append'`` - This stores a list, and appends each argument value to the "
"list. It is useful to allow an option to be specified multiple times. If the "
"default value is non-empty, the default elements will be present in the "
"parsed value for the option, with any values from the command line appended "
"after those default values. Example usage::"
msgstr ""
"``'append'`` - 這儲存了一個列表，並將每個參數值附加到列表中。允許多次指定一個"
"選項很有用。如果預設值非空，預設元素將出現在選項的剖析值中，命令列中的任何值"
"附加在這些預設值之後。用法示例::"

#: ../../library/argparse.rst:860
#, fuzzy
msgid ""
"``'append_const'`` - This stores a list, and appends the value specified by "
"the const_ keyword argument to the list; note that the const_ keyword "
"argument defaults to ``None``. The ``'append_const'`` action is typically "
"useful when multiple arguments need to store constants to the same list. For "
"example::"
msgstr ""
"``'append_const'`` - 這儲存了一個列表，並將 const_ "
"關鍵字參數指定的值附加到列表；請注意，const_ 關鍵字參數預設為 ``None`` 。當多個參數"
"需要將常數儲存到同一個列表時，``'append_const'`` 操作通常很有用。例如：："

#: ../../library/argparse.rst:872
#, fuzzy
msgid ""
"``'count'`` - This counts the number of times a keyword argument occurs. For "
"example, this is useful for increasing verbosity levels::"
msgstr "``'count'`` - 這會計算關鍵字參數出現的次數。例如，這對於增加冗長級別很有用::"

#: ../../library/argparse.rst:880
#, fuzzy
msgid "Note, the *default* will be ``None`` unless explicitly set to *0*."
msgstr "請注意，除非明確設定為 *0*，*預設* 將為 ``None`` 。"

#: ../../library/argparse.rst:882
#, fuzzy
msgid ""
"``'help'`` - This prints a complete help message for all the options in the "
"current parser and then exits. By default a help action is automatically "
"added to the parser. See :class:`ArgumentParser` for details of how the "
"output is created."
msgstr ""
"``'help'`` - 這將印出當前剖析器中所有選項的完整幫助消息，然後退出。預設情況下"
"，幫助操作會自動新增到剖析器中。有關如何建立輸出的詳細資訊，請參閱 "
"ArgumentParser。"

#: ../../library/argparse.rst:887
#, fuzzy
msgid ""
"``'version'`` - This expects a ``version=`` keyword argument in the :meth:"
"`~ArgumentParser.add_argument` call, and prints version information and "
"exits when invoked::"
msgstr ""
"``'version'`` - 這需要在 :meth:`~ArgumentParser.add_argument` 呼叫中有一個 "
"``version=`` 關鍵字參數，並印出版本資訊並在呼叫時退出::"

#: ../../library/argparse.rst:897
#, fuzzy
msgid ""
"``'extend'`` - This stores a list, and extends each argument value to the "
"list. Example usage::"
msgstr "``'extend'`` - 這儲存了一個列表，並將每個參數值擴充到列表中。用法示例::"

#: ../../library/argparse.rst:908
#, fuzzy
msgid ""
"You may also specify an arbitrary action by passing an Action subclass or "
"other object that implements the same interface. The "
"``BooleanOptionalAction`` is available in ``argparse`` and adds support for "
"boolean actions such as ``--foo`` and ``--no-foo``::"
msgstr ""
"您還可以通過傳遞 Action 子類別或實作相同介面的其他物件來指定任意操作。 "
"``BooleanOptionalAction`` 在 ``argparse`` 中可用，並新增了對布爾操作的支援，"
"例如 ``--foo`` 和 ``--no-foo``::"

#: ../../library/argparse.rst:921
#, fuzzy
msgid ""
"The recommended way to create a custom action is to extend :class:`Action`, "
"overriding the ``__call__`` method and optionally the ``__init__`` and "
"``format_usage`` methods."
msgstr ""
"建立自定義操作的推薦方法是擴充 :class:`Action`，覆蓋``__call__`` "
"方法和可選的``__init__`` 和``format_usage`` 方法。"

#: ../../library/argparse.rst:925
#, fuzzy
msgid "An example of a custom action::"
msgstr "自定義操作的示例::"

#: ../../library/argparse.rst:945
#, fuzzy
msgid "For more details, see :class:`Action`."
msgstr "有關更多詳細資訊，請參閱 :class:`Action`。"

#: ../../library/argparse.rst:951
#, fuzzy
msgid "nargs"
msgstr "納格斯"

#: ../../library/argparse.rst:953
#, fuzzy
msgid ""
"ArgumentParser objects usually associate a single command-line argument with "
"a single action to be taken.  The ``nargs`` keyword argument associates a "
"different number of command-line arguments with a single action.  The "
"supported values are:"
msgstr ""
"ArgumentParser 物件通常將單個命令列參數與要執行的單個操作相關聯。 ``nargs`` "
"關鍵字參數將不同數量的命令列參數與單個操作相關聯。支援的值是："

#: ../../library/argparse.rst:958
#, fuzzy
msgid ""
"``N`` (an integer).  ``N`` arguments from the command line will be gathered "
"together into a list.  For example::"
msgstr "``N``（整數）。來自命令列的``N``參數將被收集到一個列表中。例如：："

#: ../../library/argparse.rst:967
#, fuzzy
msgid ""
"Note that ``nargs=1`` produces a list of one item.  This is different from "
"the default, in which the item is produced by itself."
msgstr "請注意，``nargs=1`` "
"生成一個包含一項的列表。這與預設情況不同，預設情況下項目是自己生產的。"

#: ../../library/argparse.rst:972
#, fuzzy
msgid ""
"``'?'``. One argument will be consumed from the command line if possible, "
"and produced as a single item.  If no command-line argument is present, the "
"value from default_ will be produced.  Note that for optional arguments, "
"there is an additional case - the option string is present but not followed "
"by a command-line argument.  In this case the value from const_ will be "
"produced.  Some examples to illustrate this::"
msgstr ""
"``'？'``。如果可能，將從命令列使用一個參數，並作為單個項目生成。如果不存在命"
"令行參數，將生成 default_ 中的值。請注意，對於可選參數，還有一種情況 - "
"存在選項字串但後面沒有命令列參數。在這種情況下，將產生 const_ "
"的值。一些例子來說明這一點："

#: ../../library/argparse.rst:989
#, fuzzy
msgid ""
"One of the more common uses of ``nargs='?'`` is to allow optional input and "
"output files::"
msgstr "``nargs='?'`` 更常見的用途之一是允許可選的輸入和輸出文件::"

#: ../../library/argparse.rst:1006
#, fuzzy
msgid ""
"``'*'``.  All command-line arguments present are gathered into a list.  Note "
"that it generally doesn't make much sense to have more than one positional "
"argument with ``nargs='*'``, but multiple optional arguments with "
"``nargs='*'`` is possible.  For example::"
msgstr ""
"``'*'``。存在的所有命令列參數都收集到一個列表中。請注意，使用 ``nargs='*'`` "
"設定多個位置參數通常沒有多大意義，但使用 ``nargs='*'`` "
"設定多個可選參數是可能的。例如：："

#: ../../library/argparse.rst:1020
#, fuzzy
msgid ""
"``'+'``. Just like ``'*'``, all command-line args present are gathered into "
"a list.  Additionally, an error message will be generated if there wasn't at "
"least one command-line argument present.  For example::"
msgstr ""
"``'+'``。就像``'*'``一樣，所有存在的命令列參數都被收集到一個列表中。此外，如"
"果不存在至少一個命令列參數，則會生成一條錯誤消息。例如：："

#: ../../library/argparse.rst:1032
#, fuzzy
msgid ""
"If the ``nargs`` keyword argument is not provided, the number of arguments "
"consumed is determined by the action_.  Generally this means a single "
"command-line argument will be consumed and a single item (not a list) will "
"be produced."
msgstr ""
"如果未提供 ``nargs`` 關鍵字參數，則消耗的參數數量由 action_ "
"確定。通常這意味著將使用單個命令列參數並生成單個項目（不是列表）。"

#: ../../library/argparse.rst:1040
#, fuzzy
msgid "const"
msgstr "常數"

#: ../../library/argparse.rst:1042
#, fuzzy
msgid ""
"The ``const`` argument of :meth:`~ArgumentParser.add_argument` is used to "
"hold constant values that are not read from the command line but are "
"required for the various :class:`ArgumentParser` actions.  The two most "
"common uses of it are:"
msgstr ""
":meth:`~ArgumentParser.add_argument` 的 ``const`` "
"參數用於保存常數值，這些值不是從命令列讀取的，而是各種 "
":class:`ArgumentParser` 操作所必需的。它的兩個最常見的用途是："

#: ../../library/argparse.rst:1046
#, fuzzy
msgid ""
"When :meth:`~ArgumentParser.add_argument` is called with "
"``action='store_const'`` or ``action='append_const'``.  These actions add "
"the ``const`` value to one of the attributes of the object returned by :meth:"
"`~ArgumentParser.parse_args`. See the action_ description for examples. If "
"``const`` is not provided to :meth:`~ArgumentParser.add_argument`, it will "
"receive a default value of ``None``."
msgstr ""
"當 :meth:`~ArgumentParser.add_argument` 被呼叫為 ``action='store_const'`` 或 "
"``action='append_const'`` 時。這些操作將 ``const`` 值新增到 "
":meth:`~ArgumentParser.parse_args` 回傳的物件的屬性之一。有關示例，請參見 "
"action_ 說明。如果未向 :meth:`~ArgumentParser.add_argument 提供 ``const``，"
"它將收到預設值 ``None``。"

#: ../../library/argparse.rst:1054
#, fuzzy
msgid ""
"When :meth:`~ArgumentParser.add_argument` is called with option strings "
"(like ``-f`` or ``--foo``) and ``nargs='?'``.  This creates an optional "
"argument that can be followed by zero or one command-line arguments. When "
"parsing the command line, if the option string is encountered with no "
"command-line argument following it, the value of ``const`` will be assumed "
"to be ``None`` instead.  See the nargs_ description for examples."
msgstr ""
"當 :meth:`~ArgumentParser.add_argument` 使用選項字串（如 ``-f`` 或 "
"``--foo``）和 ``nargs='?'`` 呼叫時。這會建立一個可選參數，後面可以跟零個或一"
"個命令列參數。剖析命令列時，如果遇到選項字串後面沒有命令列參數，則 ``const`` "
"的值將被假定為 ``None``。有關示例，請參見 nargs_ 說明。"

#: ../../library/argparse.rst:1061
#, fuzzy
msgid ""
"``const=None`` by default, including when ``action='append_const'`` or "
"``action='store_const'``."
msgstr ""
"``const=None`` 預設情況下，包括當 ``action='append_const'`` 或 "
"``action='store_const'`` 時。"

#: ../../library/argparse.rst:1068
#, fuzzy
msgid "default"
msgstr "預設"

#: ../../library/argparse.rst:1070
#, fuzzy
msgid ""
"All optional arguments and some positional arguments may be omitted at the "
"command line.  The ``default`` keyword argument of :meth:`~ArgumentParser."
"add_argument`, whose value defaults to ``None``, specifies what value should "
"be used if the command-line argument is not present. For optional arguments, "
"the ``default`` value is used when the option string was not present at the "
"command line::"
msgstr ""
"在命令列中可以省略所有可選參數和一些位置參數。 :meth:`~ArgumentParser."
"add_argument` 的 ``default`` 關鍵字參數，其值預設為 ``None``，指定在命令列參"
"數不存在時應使用的值。對於可選參數，當命令列中不存在選項字串時，將使用“預設”"
"值::"

#: ../../library/argparse.rst:1084
#, fuzzy
msgid ""
"If the target namespace already has an attribute set, the action *default* "
"will not over write it::"
msgstr "如果目標命名空間已經有一個屬性集，*default* 操作將不會覆蓋它::"

#: ../../library/argparse.rst:1092
#, fuzzy
msgid ""
"If the ``default`` value is a string, the parser parses the value as if it "
"were a command-line argument.  In particular, the parser applies any type_ "
"conversion argument, if provided, before setting the attribute on the :class:"
"`Namespace` return value.  Otherwise, the parser uses the value as is::"
msgstr ""
"如果 ``default`` "
"值是一個字串，剖析器剖析該值，就好像它是一個命令列參數一樣。特別是，"
"剖析器在設定 Namespace 回傳值的屬性之前應用任何 type_ "
"轉換參數（如果提供）。否則，剖析器按原樣使用該值::"

#: ../../library/argparse.rst:1103
#, fuzzy
msgid ""
"For positional arguments with nargs_ equal to ``?`` or ``*``, the "
"``default`` value is used when no command-line argument was present::"
msgstr "對於 nargs_ 等於 ``?`` 或 ``*`` 的位置參數，當沒有命令列參數時使用 "
"``default`` 值::"

#: ../../library/argparse.rst:1114
#, fuzzy
msgid ""
"Providing ``default=argparse.SUPPRESS`` causes no attribute to be added if "
"the command-line argument was not present::"
msgstr "如果命令列參數不存在，提供 ``default=argparse.SUPPRESS`` 不會新增任何屬性："

#: ../../library/argparse.rst:1128
#, fuzzy
msgid "type"
msgstr "型別"

#: ../../library/argparse.rst:1130
#, fuzzy
msgid ""
"By default, the parser reads command-line arguments in as simple strings. "
"However, quite often the command-line string should instead be interpreted "
"as another type, such as a :class:`float` or :class:`int`.  The ``type`` "
"keyword for :meth:`~ArgumentParser.add_argument` allows any necessary type-"
"checking and type conversions to be performed."
msgstr ""
"預設情況下，剖析器將命令列參數作為簡單字串讀取。然而，命令列字串通常應該被解"
"釋為另一種型別，例如 float 或 int。 :meth:`~ArgumentParser.add_argument` "
"的``type`` 關鍵字允許執行任何必要的型別檢查和型別轉換。"

#: ../../library/argparse.rst:1136
#, fuzzy
msgid ""
"If the type_ keyword is used with the default_ keyword, the type converter "
"is only applied if the default is a string."
msgstr "如果 type_ 關鍵字與 default_ "
"關鍵字一起使用，則僅當預設值為字串時才應用型別轉換器。"

#: ../../library/argparse.rst:1139
#, fuzzy
msgid ""
"The argument to ``type`` can be any callable that accepts a single string. "
"If the function raises :exc:`ArgumentTypeError`, :exc:`TypeError`, or :exc:"
"`ValueError`, the exception is caught and a nicely formatted error message "
"is displayed.  No other exception types are handled."
msgstr ""
"``type`` 的參數可以是任何接受單個字串的可呼叫物件。如果函式引發 "
":exc:`ArgumentTypeError`、:exc:`TypeError` 或 "
":exc:`ValueError`，則會捕獲例外並顯示格式正確的錯誤消息。不處理其他例外型別。"

#: ../../library/argparse.rst:1144
#, fuzzy
msgid "Common built-in types and functions can be used as type converters:"
msgstr "常見的內建型別和函式可以用作型別轉換器："

#: ../../library/argparse.rst:1160
#, fuzzy
msgid "User defined functions can be used as well:"
msgstr "也可以使用使用者定義的函式："

#: ../../library/argparse.rst:1172
#, fuzzy
msgid ""
"The :func:`bool` function is not recommended as a type converter.  All it "
"does is convert empty strings to ``False`` and non-empty strings to "
"``True``. This is usually not what is desired."
msgstr ""
":func:`bool` 函式不推薦作為型別轉換器。它所做的只是將空字串轉換為 ``False``，將"
"非空字串轉換為 ``True``。這通常不是所希望的。"

#: ../../library/argparse.rst:1176
#, fuzzy
msgid ""
"In general, the ``type`` keyword is a convenience that should only be used "
"for simple conversions that can only raise one of the three supported "
"exceptions. Anything with more interesting error-handling or resource "
"management should be done downstream after the arguments are parsed."
msgstr ""
"一般來說，``type`` 關鍵字是一種便利，只應用於只能引發三種支援例外之一的簡單轉"
"換。任何更有趣的錯誤處理或資源管理都應該在剖析參數後在下游完成。"

#: ../../library/argparse.rst:1181
#, fuzzy
msgid ""
"For example, JSON or YAML conversions have complex error cases that require "
"better reporting than can be given by the ``type`` keyword.  A :exc:`~json."
"JSONDecodeError` would not be well formatted and a :exc:`FileNotFoundError` "
"exception would not be handled at all."
msgstr ""
"例如，JSON 或 YAML "
"轉換具有復雜的錯誤情況，需要比 ``type``關鍵字提供的報告更好的報告。 :exc:`~json."
"JSONDecodeError` 的格式不正確，並且根本不會處理 :exc:`FileNotFoundError` "
"例外。"

#: ../../library/argparse.rst:1186
#, fuzzy
msgid ""
"Even :class:`~argparse.FileType` has its limitations for use with the "
"``type`` keyword.  If one argument uses *FileType* and then a subsequent "
"argument fails, an error is reported but the file is not automatically "
"closed.  In this case, it would be better to wait until after the parser has "
"run and then use the :keyword:`with`-statement to manage the files."
msgstr ""
"甚至 :class:`~argparse.FileType` 也有其與 ``type`` 關鍵字一起使用的限制。"
"如果一個參數使用 *FileType* 而後一個參數失敗，則會報告錯誤，但文件不會自動關"
"閉。在這種情況下，最好等到剖析器運行後再使用 :keyword:`with`-語句來管理文件。"

#: ../../library/argparse.rst:1192
#, fuzzy
msgid ""
"For type checkers that simply check against a fixed set of values, consider "
"using the choices_ keyword instead."
msgstr "對於只檢查一組固定值的型別檢查器，請考慮改用 choices_ 關鍵字。"

#: ../../library/argparse.rst:1199
#, fuzzy
msgid "choices"
msgstr "選擇"

#: ../../library/argparse.rst:1201
#, fuzzy
msgid ""
"Some command-line arguments should be selected from a restricted set of "
"values. These can be handled by passing a sequence object as the *choices* "
"keyword argument to :meth:`~ArgumentParser.add_argument`.  When the command "
"line is parsed, argument values will be checked, and an error message will "
"be displayed if the argument was not one of the acceptable values::"
msgstr ""
"一些命令列參數應該從一組受限制的值中選擇。這些可以通過將序列對像作為 "
"*choices* 關鍵字參數傳遞給 :meth:`~ArgumentParser.add_argument` 來處理。剖析"
"命令列時，將檢查參數值，如果參數不是可接受的值之一，將顯示錯誤消息::"

#: ../../library/argparse.rst:1216
#, fuzzy
msgid ""
"Note that inclusion in the *choices* sequence is checked after any type_ "
"conversions have been performed, so the type of the objects in the *choices* "
"sequence should match the type_ specified::"
msgstr ""
"請注意，在執行任何 type_ 轉換後檢查 *choices* 序列中的包含，因此 *choices* "
"序列中的對像型別應與指定的 type_ 匹配："

#: ../../library/argparse.rst:1228
#, fuzzy
msgid ""
"Any sequence can be passed as the *choices* value, so :class:`list` "
"objects, :class:`tuple` objects, and custom sequences are all supported."
msgstr ""
"任何序列都可以作為 *choices* 值傳遞，因此 :class:`list` 物件、:class:`tuple` "
"物件和自定義序列都受支援。"

#: ../../library/argparse.rst:1231
#, fuzzy
msgid ""
"Use of :class:`enum.Enum` is not recommended because it is difficult to "
"control its appearance in usage, help, and error messages."
msgstr "不推薦使用 :class:`enum.Enum`，因為很難控制它在使用、幫助和錯誤消息中的出現。"

#: ../../library/argparse.rst:1234
#, fuzzy
msgid ""
"Formatted choices override the default *metavar* which is normally derived "
"from *dest*.  This is usually what you want because the user never sees the "
"*dest* parameter.  If this display isn't desirable (perhaps because there "
"are many choices), just specify an explicit metavar_."
msgstr ""
"格式化的選擇會覆蓋預設的 *metavar*，它通常來自 *dest*。這通常是您想要的，"
"因為使用者永遠不會看到 *dest* "
"參數。如果不需要這種顯示（可能是因為有很多選擇），只需指定一個顯式的 "
"metavar_。"

#: ../../library/argparse.rst:1243
#, fuzzy
msgid "required"
msgstr "必需的"

#: ../../library/argparse.rst:1245
#, fuzzy
msgid ""
"In general, the :mod:`argparse` module assumes that flags like ``-f`` and "
"``--bar`` indicate *optional* arguments, which can always be omitted at the "
"command line. To make an option *required*, ``True`` can be specified for "
"the ``required=`` keyword argument to :meth:`~ArgumentParser.add_argument`::"
msgstr ""
"一般來說，:mod:`argparse` 模組假定像 ``-f`` 和 ``--bar`` "
"這樣的旗標指示*可選*參數，這些參數總是可以在命令列中省略。要使選項 "
"*required*，可以為 ``required=`` 關鍵字參數指定 ``True`` "
":meth:`~ArgumentParser.add_argument`::"

#: ../../library/argparse.rst:1258
#, fuzzy
msgid ""
"As the example shows, if an option is marked as ``required``, :meth:"
"`~ArgumentParser.parse_args` will report an error if that option is not "
"present at the command line."
msgstr ""
"如示例所示，如果一個選項被標記為“必需”，如果命令列中不存在該選項，:meth:`~Arg"
"umentParser.parse_args` 將報告錯誤。"

#: ../../library/argparse.rst:1264
#, fuzzy
msgid ""
"Required options are generally considered bad form because users expect "
"*options* to be *optional*, and thus they should be avoided when possible."
msgstr "必需的選項通常被認為是錯誤的形式，因為使用者希望 *options* 是 "
"*optional*，因此應盡可能避免使用它們。"

#: ../../library/argparse.rst:1271
#, fuzzy
msgid "help"
msgstr "幫助"

#: ../../library/argparse.rst:1273
#, fuzzy
msgid ""
"The ``help`` value is a string containing a brief description of the "
"argument. When a user requests help (usually by using ``-h`` or ``--help`` "
"at the command line), these ``help`` descriptions will be displayed with "
"each argument::"
msgstr ""
"``help`` 值是一個包含參數簡要說明的字串。當使用者請求幫助時（通常通過在命令列"
"使用 ``-h``或 ``--help``），這些“幫助”描述將與每個參數一起顯示："

#: ../../library/argparse.rst:1293
#, fuzzy
msgid ""
"The ``help`` strings can include various format specifiers to avoid "
"repetition of things like the program name or the argument default_.  The "
"available specifiers include the program name, ``%(prog)s`` and most keyword "
"arguments to :meth:`~ArgumentParser.add_argument`, e.g. ``%(default)s``, "
"``%(type)s``, etc.::"
msgstr ""
"``help`` 字串可以包含各種格式說明符，以避免重複程式名稱或參數 default_ "
"等內容。可用的說明符包括程式名稱、``%(prog)s`` 和 :meth:`~ArgumentParser."
"add_argument` 的大多數關鍵字參數，例如``%(default)s``, ``%(type)s``, 等等::"

#: ../../library/argparse.rst:1310
#, fuzzy
msgid ""
"As the help string supports %-formatting, if you want a literal ``%`` to "
"appear in the help string, you must escape it as ``%%``."
msgstr "由於幫助字串支援 % "
"格式，如果您希望文字 ``%``出現在幫助字串中，您必須將其轉義為“%%”。"

#: ../../library/argparse.rst:1313
#, fuzzy
msgid ""
":mod:`argparse` supports silencing the help entry for certain options, by "
"setting the ``help`` value to ``argparse.SUPPRESS``::"
msgstr ":mod:`argparse` 支援通過將 ``help`` 值設定為 ``argparse.SUPPRESS`` "
"使某些選項的幫助條目靜音："

#: ../../library/argparse.rst:1328
#, fuzzy
msgid "metavar"
msgstr "元變數"

#: ../../library/argparse.rst:1330
#, fuzzy
msgid ""
"When :class:`ArgumentParser` generates help messages, it needs some way to "
"refer to each expected argument.  By default, ArgumentParser objects use the "
"dest_ value as the \"name\" of each object.  By default, for positional "
"argument actions, the dest_ value is used directly, and for optional "
"argument actions, the dest_ value is uppercased.  So, a single positional "
"argument with ``dest='bar'`` will be referred to as ``bar``. A single "
"optional argument ``--foo`` that should be followed by a single command-line "
"argument will be referred to as ``FOO``.  An example::"
msgstr ""
"當 ArgumentParser "
"生成幫助消息時，它需要某種方式來引用每個預期的參數。預設情況下，"
"ArgumentParser 物件使用 dest_ "
"值作為每個物件的“名稱”。預設情況下，對於位置參數操作，直接使用 dest_ "
"值，對於可選參數操作，dest_ 值是大寫的。因此，帶有 ``dest='bar'`` "
"的單個位置參數將被稱為 ``bar``。一個單一的可選參數 ``--foo`` "
"後面應該跟一個單一的命令列參數將被稱為 ``FOO``。一個例子：："

#: ../../library/argparse.rst:1354
#, fuzzy
msgid "An alternative name can be specified with ``metavar``::"
msgstr "可以使用 ``metavar`` 指定替代名稱::"

#: ../../library/argparse.rst:1371
#, fuzzy
msgid ""
"Note that ``metavar`` only changes the *displayed* name - the name of the "
"attribute on the :meth:`~ArgumentParser.parse_args` object is still "
"determined by the dest_ value."
msgstr ""
"請注意，``metavar`` 僅更改*顯示*名稱 - :meth:`~ArgumentParser.parse_args` "
"對像上的屬性名稱仍由 dest_ 值確定。"

#: ../../library/argparse.rst:1375
#, fuzzy
msgid ""
"Different values of ``nargs`` may cause the metavar to be used multiple "
"times. Providing a tuple to ``metavar`` specifies a different display for "
"each of the arguments::"
msgstr "``nargs`` 的不同值可能會導致元變數被多次使用。為 ``metavar`` "
"提供一個元組為每個參數指定不同的顯示::"

#: ../../library/argparse.rst:1394
#, fuzzy
msgid "dest"
msgstr "目的地"

#: ../../library/argparse.rst:1396
#, fuzzy
msgid ""
"Most :class:`ArgumentParser` actions add some value as an attribute of the "
"object returned by :meth:`~ArgumentParser.parse_args`.  The name of this "
"attribute is determined by the ``dest`` keyword argument of :meth:"
"`~ArgumentParser.add_argument`.  For positional argument actions, ``dest`` "
"is normally supplied as the first argument to :meth:`~ArgumentParser."
"add_argument`::"
msgstr ""
"大多數 :class:`ArgumentParser` 操作新增一些值作為 :meth:`~ArgumentParser."
"parse_args` 回傳的物件的屬性。此屬性的名稱由 :meth:`~ArgumentParser."
"add_argument` 的``dest`` 關鍵字參數確定。對於位置參數操作，``dest`` "
"通常作為第一個參數提供給 :meth:`~ArgumentParser.add_argument`::"

#: ../../library/argparse.rst:1408
#, fuzzy
msgid ""
"For optional argument actions, the value of ``dest`` is normally inferred "
"from the option strings.  :class:`ArgumentParser` generates the value of "
"``dest`` by taking the first long option string and stripping away the "
"initial ``--`` string.  If no long option strings were supplied, ``dest`` "
"will be derived from the first short option string by stripping the initial "
"``-`` character.  Any internal ``-`` characters will be converted to ``_`` "
"characters to make sure the string is a valid attribute name.  The examples "
"below illustrate this behavior::"
msgstr ""
"對於可選參數操作，``dest`` 的值通常是從選項字串中推斷出來的。 "
":class:`ArgumentParser` 通過獲取第一個長選項字串並剝離初始的 ``--`` "
"字串來生成 ``dest`` 的值。如果沒有提供長選項字串，``dest`` "
"將通過剝離初始的``-`` 字元從第一個短選項字串派生。任何內部的 ``-``字元都將被轉換"
"為 ``_``字元，以確保該字串是一個有效的屬性名稱。下面的例子說明了這種行為::"

#: ../../library/argparse.rst:1425
#, fuzzy
msgid "``dest`` allows a custom attribute name to be provided::"
msgstr "``dest`` 允許提供自定義屬性名稱::"

#: ../../library/argparse.rst:1433
#, fuzzy
msgid "Action classes"
msgstr "動作類"

#: ../../library/argparse.rst:1435
#, fuzzy
msgid ""
"Action classes implement the Action API, a callable which returns a callable "
"which processes arguments from the command-line. Any object which follows "
"this API may be passed as the ``action`` parameter to :meth:`~ArgumentParser."
"add_argument`."
msgstr ""
"Action 類實作 Action API，這是一個可呼叫物件，它回傳一個可呼叫物件，該可呼叫"
"物件處理來自命令列的參數。此 API 之後的任何對像都可以作為 ``action`` "
"參數傳遞給 :meth:`~ArgumentParser.add_argument`。"

#: ../../library/argparse.rst:1444
#, fuzzy
msgid ""
"Action objects are used by an ArgumentParser to represent the information "
"needed to parse a single argument from one or more strings from the command "
"line. The Action class must accept the two positional arguments plus any "
"keyword arguments passed to :meth:`ArgumentParser.add_argument` except for "
"the ``action`` itself."
msgstr ""
"ArgumentParser 使用 Action "
"物件來表示從命令列剖析一個或多個字串中的單個參數所需的資訊。 Action "
"類必須接受兩個位置參數以及傳遞給 ArgumentParser.add_argument "
"的任何關鍵字參數，除了 ``action``本身。"

#: ../../library/argparse.rst:1450
#, fuzzy
msgid ""
"Instances of Action (or return value of any callable to the ``action`` "
"parameter) should have attributes \"dest\", \"option_strings\", \"default\", "
"\"type\", \"required\", \"help\", etc. defined. The easiest way to ensure "
"these attributes are defined is to call ``Action.__init__``."
msgstr ""
"Action 的實例（或任何可呼叫的 ``action``參數的回傳值）應該定義 ``dest``、“option_st"
"rings”、 ``default`` 、 ``type``、 ``required`` 、 ``help``等屬性。確保定義這些屬性的最簡單"
"方法是呼叫“Action.__init__”。"

#: ../../library/argparse.rst:1455
#, fuzzy
msgid ""
"Action instances should be callable, so subclasses must override the "
"``__call__`` method, which should accept four parameters:"
msgstr "動作實例應該是可呼叫的，因此子類別必須重寫 ``__call__`` "
"方法，該方法應該接受四個參數："

#: ../../library/argparse.rst:1458
#, fuzzy
msgid "``parser`` - The ArgumentParser object which contains this action."
msgstr "``parser`` - 包含此操作的 ArgumentParser 物件。"

#: ../../library/argparse.rst:1460
#, fuzzy
msgid ""
"``namespace`` - The :class:`Namespace` object that will be returned by :meth:"
"`~ArgumentParser.parse_args`.  Most actions add an attribute to this object "
"using :func:`setattr`."
msgstr ""
"``namespace`` - 將由 :meth:`~ArgumentParser.parse_args` 回傳的 Namespace "
"物件。大多數操作使用 :func:`setattr` 向該物件新增一個屬性。"

#: ../../library/argparse.rst:1464
#, fuzzy
msgid ""
"``values`` - The associated command-line arguments, with any type "
"conversions applied.  Type conversions are specified with the type_ keyword "
"argument to :meth:`~ArgumentParser.add_argument`."
msgstr ""
"``values`` - 關聯的命令列參數，應用了任何型別轉換。型別轉換是通過 type_ "
"關鍵字參數指定給 :meth:`~ArgumentParser.add_argument` 的。"

#: ../../library/argparse.rst:1468
#, fuzzy
msgid ""
"``option_string`` - The option string that was used to invoke this action. "
"The ``option_string`` argument is optional, and will be absent if the action "
"is associated with a positional argument."
msgstr ""
"``option_string`` - 用於呼叫此操作的選項字串。 ``option_string`` "
"參數是可選的，如果操作與位置參數相關聯，則該參數將不存在。"

#: ../../library/argparse.rst:1472
#, fuzzy
msgid ""
"The ``__call__`` method may perform arbitrary actions, but will typically "
"set attributes on the ``namespace`` based on ``dest`` and ``values``."
msgstr ""
"``__call__`` 方法可以執行任意操作，但通常會根據``dest`` 和``values`` "
"在``namespace`` 上設定屬性。"

#: ../../library/argparse.rst:1475
#, fuzzy
msgid ""
"Action subclasses can define a ``format_usage`` method that takes no "
"argument and return a string which will be used when printing the usage of "
"the program. If such method is not provided, a sensible default will be used."
msgstr ""
"動作子類別可以定義一個“format_usage”方法，該方法不帶任何參數並回傳一個字串，"
"該字串將在印出程式的用法時使用。如果未提供此類方法，將使用合理的預設值。"

#: ../../library/argparse.rst:1480
#, fuzzy
msgid "The parse_args() method"
msgstr "parse_args() 方法"

#: ../../library/argparse.rst:1484
#, fuzzy
msgid ""
"Convert argument strings to objects and assign them as attributes of the "
"namespace.  Return the populated namespace."
msgstr "將參數字串轉換為物件並將它們分配為命名空間的屬性。回傳填充的命名空間。"

#: ../../library/argparse.rst:1487
#, fuzzy
msgid ""
"Previous calls to :meth:`add_argument` determine exactly what objects are "
"created and how they are assigned. See the documentation for :meth:"
"`add_argument` for details."
msgstr "之前對 add_argument 的呼叫確定了建立哪些對像以及如何分配它們。有關詳細資訊，"
"請參閱 add_argument 的文檔。"

#: ../../library/argparse.rst:1491
#, fuzzy
msgid ""
"args_ - List of strings to parse.  The default is taken from :data:`sys."
"argv`."
msgstr "args_ - 要剖析的字串列表。預設值取自 :data:`sys.argv`。"

#: ../../library/argparse.rst:1494
#, fuzzy
msgid ""
"namespace_ - An object to take the attributes.  The default is a new empty :"
"class:`Namespace` object."
msgstr "namespace_ - 獲取屬性的物件。預設是一個新的空 :class:`Namespace` 物件。"

#: ../../library/argparse.rst:1499
#, fuzzy
msgid "Option value syntax"
msgstr "選項值語法"

#: ../../library/argparse.rst:1501
#, fuzzy
msgid ""
"The :meth:`~ArgumentParser.parse_args` method supports several ways of "
"specifying the value of an option (if it takes one).  In the simplest case, "
"the option and its value are passed as two separate arguments::"
msgstr ""
":meth:`~ArgumentParser.parse_args` 方法支援多種指定選項值的方法（如果需要的話"
"）。在最簡單的情況下，選項及其值作為兩個單獨的參數傳遞："

#: ../../library/argparse.rst:1513
#, fuzzy
msgid ""
"For long options (options with names longer than a single character), the "
"option and value can also be passed as a single command-line argument, using "
"``=`` to separate them::"
msgstr "對於長選項（名稱超過單個字元的選項），選項和值也可以作為單個命令列參數傳遞，"
"使用 ``=`` 將它們分隔："

#: ../../library/argparse.rst:1520
#, fuzzy
msgid ""
"For short options (options only one character long), the option and its "
"value can be concatenated::"
msgstr "對於短選項（選項只有一個字元長），選項及其值可以連接::"

#: ../../library/argparse.rst:1526
#, fuzzy
msgid ""
"Several short options can be joined together, using only a single ``-`` "
"prefix, as long as only the last option (or none of them) requires a value::"
msgstr "幾個短選項可以連接在一起，只使用一個 ``-``前綴，只要最後一個選項（或沒有一個）需"
"要一個值::"

#: ../../library/argparse.rst:1538
#, fuzzy
msgid "Invalid arguments"
msgstr "無效參數"

#: ../../library/argparse.rst:1540
#, fuzzy
msgid ""
"While parsing the command line, :meth:`~ArgumentParser.parse_args` checks "
"for a variety of errors, including ambiguous options, invalid types, invalid "
"options, wrong number of positional arguments, etc.  When it encounters such "
"an error, it exits and prints the error along with a usage message::"
msgstr ""
"在剖析命令列時，:meth:`~ArgumentParser.parse_args` 會檢查各種錯誤，包括不明確"
"的選項、無效型別、無效選項、錯誤的位置參數數量等。當遇到此類錯誤時，它會退出"
"並印出錯誤以及使用消息::"

#: ../../library/argparse.rst:1566
#, fuzzy
msgid "Arguments containing ``-``"
msgstr "包含``-``的參數"

#: ../../library/argparse.rst:1568
#, fuzzy
msgid ""
"The :meth:`~ArgumentParser.parse_args` method attempts to give errors "
"whenever the user has clearly made a mistake, but some situations are "
"inherently ambiguous.  For example, the command-line argument ``-1`` could "
"either be an attempt to specify an option or an attempt to provide a "
"positional argument. The :meth:`~ArgumentParser.parse_args` method is "
"cautious here: positional arguments may only begin with ``-`` if they look "
"like negative numbers and there are no options in the parser that look like "
"negative numbers::"
msgstr ""
":meth:`~ArgumentParser.parse_args` 方法試圖在使用者明顯犯錯時給出錯誤，但有些"
"情況本質上是模棱兩可的。例如，命令列參數 ``-1``可能是嘗試指定選項或嘗試提供位置"
"參數。 :meth:`~ArgumentParser.parse_args` 方法在這裡很謹慎：如果位置參數看起"
"來像負數並且剖析器中沒有看起來像負數的選項，則位置參數只能以 ``-`` 開頭::"

#: ../../library/argparse.rst:1606
#, fuzzy
msgid ""
"If you have positional arguments that must begin with ``-`` and don't look "
"like negative numbers, you can insert the pseudo-argument ``'--'`` which "
"tells :meth:`~ArgumentParser.parse_args` that everything after that is a "
"positional argument::"
msgstr ""
"如果你有必須以 ``-``開頭並且看起來不像負數的位置參數，你可以插入偽參數 ``--``，它告"
"訴 :meth:`~ArgumentParser.parse_args`之後的所有內容都是位置參數::"

#: ../../library/argparse.rst:1617
#, fuzzy
msgid "Argument abbreviations (prefix matching)"
msgstr "參數縮寫（前綴匹配）"

#: ../../library/argparse.rst:1619
#, fuzzy
msgid ""
"The :meth:`~ArgumentParser.parse_args` method :ref:`by default "
"<allow_abbrev>` allows long options to be abbreviated to a prefix, if the "
"abbreviation is unambiguous (the prefix matches a unique option)::"
msgstr ""
":meth:`~ArgumentParser.parse_args` 方法 :ref:`預設情況下 <allow_abbrev>` "
"允許將長選項縮寫為前綴，如果縮寫是明確的（前綴與唯一選項匹配）::"

#: ../../library/argparse.rst:1634
#, fuzzy
msgid ""
"An error is produced for arguments that could produce more than one options. "
"This feature can be disabled by setting :ref:`allow_abbrev` to ``False``."
msgstr "對於可能產生多個選項的參數，會產生錯誤。可以通過將 :ref:`allow_abbrev` "
"設定為 ``False`` 來禁用此功能。"

#: ../../library/argparse.rst:1640
#, fuzzy
msgid "Beyond ``sys.argv``"
msgstr "超越``sys.argv``"

#: ../../library/argparse.rst:1642
#, fuzzy
msgid ""
"Sometimes it may be useful to have an ArgumentParser parse arguments other "
"than those of :data:`sys.argv`.  This can be accomplished by passing a list "
"of strings to :meth:`~ArgumentParser.parse_args`.  This is useful for "
"testing at the interactive prompt::"
msgstr ""
"有時，讓 ArgumentParser 剖析 sys.argv 以外的參數可能很有用。"
"這可以通過將字串列表傳遞給 :meth:`~ArgumentParser.parse_args` "
"來完成。這對於在交互式提示下進行測試很有用::"

#: ../../library/argparse.rst:1662
#, fuzzy
msgid "The Namespace object"
msgstr "命名空間物件"

#: ../../library/argparse.rst:1666
#, fuzzy
msgid ""
"Simple class used by default by :meth:`~ArgumentParser.parse_args` to create "
"an object holding attributes and return it."
msgstr ":meth:`~ArgumentParser.parse_args` "
"預設使用的簡單類來建立一個包含屬性的物件並回傳它。"

#: ../../library/argparse.rst:1669
#, fuzzy
msgid ""
"This class is deliberately simple, just an :class:`object` subclass with a "
"readable string representation. If you prefer to have dict-like view of the "
"attributes, you can use the standard Python idiom, :func:`vars`::"
msgstr ""
"這個類很簡單，只是一個 :class:`object` "
"的子類別，帶有可讀的字串表示。如果你喜歡字典式的屬性視圖，你可以使用標準的 "
"Python 習慣用法，:func:`vars`::"

#: ../../library/argparse.rst:1679
#, fuzzy
msgid ""
"It may also be useful to have an :class:`ArgumentParser` assign attributes "
"to an already existing object, rather than a new :class:`Namespace` object.  "
"This can be achieved by specifying the ``namespace=`` keyword argument::"
msgstr ""
"讓 ArgumentParser 將屬性分配給已經存在的物件而不是新的 Namespace "
"對像也可能很有用。這可以通過指定 ``namespace=`` 關鍵字參數來實作："

#: ../../library/argparse.rst:1695
#, fuzzy
msgid "Other utilities"
msgstr "其他公用事業"

#: ../../library/argparse.rst:1698
#, fuzzy
msgid "Sub-commands"
msgstr "子命令"

#: ../../library/argparse.rst:1705
#, fuzzy
msgid ""
"Many programs split up their functionality into a number of sub-commands, "
"for example, the ``svn`` program can invoke sub-commands like ``svn "
"checkout``, ``svn update``, and ``svn commit``.  Splitting up functionality "
"this way can be a particularly good idea when a program performs several "
"different functions which require different kinds of command-line "
"arguments. :class:`ArgumentParser` supports the creation of such sub-"
"commands with the :meth:`add_subparsers` method.  The :meth:`add_subparsers` "
"method is normally called with no arguments and returns a special action "
"object.  This object has a single method, :meth:`~_SubParsersAction."
"add_parser`, which takes a command name and any :class:`ArgumentParser` "
"constructor arguments, and returns an :class:`ArgumentParser` object that "
"can be modified as usual."
msgstr ""
"許多程式將它們的功能拆分為多個子命令，例如， ``svn``程式可以呼叫“svn "
"checkout”、“svn update”和“svn commit”等子命令`。當程式執行多個需要不同型別的"
"命令列參數的不同功能時，以這種方式拆分功能可能是一個特別好的主意。 "
":class:`ArgumentParser` 支援使用 :meth:`add_subparsers` 方法建立此類子命令。 "
":meth:`add_subparsers` 方法通常不帶參數呼叫，並回傳一個特殊的操作物件。這個對"
"像有一個方法，:meth:`~_SubParsersAction."
"add_parser`，它接受一個命令名稱和任何 :class:`ArgumentParser` "
"構造函式參數，並回傳一個可以照常修改的 :class:`ArgumentParser` 物件。"

#: ../../library/argparse.rst:1717
#, fuzzy
msgid "Description of parameters:"
msgstr "參數說明："

#: ../../library/argparse.rst:1719
#, fuzzy
msgid ""
"title - title for the sub-parser group in help output; by default "
"\"subcommands\" if description is provided, otherwise uses title for "
"positional arguments"
msgstr "title - 幫助輸出中子剖析器組的標題；如果提供了描述，則預設為“子命令”，否則使"
"用標題作為位置參數"

#: ../../library/argparse.rst:1723
#, fuzzy
msgid ""
"description - description for the sub-parser group in help output, by "
"default ``None``"
msgstr "description - 幫助輸出中子剖析器組的描述，預設為 ``None`` "

#: ../../library/argparse.rst:1726
#, fuzzy
msgid ""
"prog - usage information that will be displayed with sub-command help, by "
"default the name of the program and any positional arguments before the "
"subparser argument"
msgstr "prog - 將與子命令幫助一起顯示的使用資訊，預設情況下是程式名稱和 subparser "
"參數之前的任何位置參數"

#: ../../library/argparse.rst:1730
#, fuzzy
msgid ""
"parser_class - class which will be used to create sub-parser instances, by "
"default the class of the current parser (e.g. ArgumentParser)"
msgstr "parser_class - 將用於建立子剖析器實例的類，預設情況下是當前剖析器的類（例如 "
"ArgumentParser）"

#: ../../library/argparse.rst:1733
#, fuzzy
msgid ""
"action_ - the basic type of action to be taken when this argument is "
"encountered at the command line"
msgstr "action_ - 在命令列遇到此參數時要採取的基本操作型別"

#: ../../library/argparse.rst:1736
#, fuzzy
msgid ""
"dest_ - name of the attribute under which sub-command name will be stored; "
"by default ``None`` and no value is stored"
msgstr "dest_ - 將儲存子命令名稱的屬性名稱；預設情況下 ``None`` 並且不儲存任何值"

#: ../../library/argparse.rst:1739
#, fuzzy
msgid ""
"required_ - Whether or not a subcommand must be provided, by default "
"``False`` (added in 3.7)"
msgstr "required_ - 是否必須提供子命令，預設情況下為 ``False``（在 3.7 中新增）"

#: ../../library/argparse.rst:1742
#, fuzzy
msgid "help_ - help for sub-parser group in help output, by default ``None``"
msgstr "help_ - 幫助輸出中子剖析器組的幫助，預設為 ``None`` "

#: ../../library/argparse.rst:1744
#, fuzzy
msgid ""
"metavar_ - string presenting available sub-commands in help; by default it "
"is ``None`` and presents sub-commands in form {cmd1, cmd2, ..}"
msgstr "metavar_ - 在幫助中顯示可用子命令的字串；預設情況下它是 ``None`` 並以 {cmd1, "
"cmd2, ..} 形式呈現子命令"

#: ../../library/argparse.rst:1747
msgid "Some example usage::"
msgstr ""
"一些使用範例：\n"
"\n"
"::"

#: ../../library/argparse.rst:1768
#, fuzzy
msgid ""
"Note that the object returned by :meth:`parse_args` will only contain "
"attributes for the main parser and the subparser that was selected by the "
"command line (and not any other subparsers).  So in the example above, when "
"the ``a`` command is specified, only the ``foo`` and ``bar`` attributes are "
"present, and when the ``b`` command is specified, only the ``foo`` and "
"``baz`` attributes are present."
msgstr ""
"請注意 :meth:`parse_args` 回傳的物件將僅包含主剖析器和命令列選擇的子剖析器的"
"屬性（而不包含任何其他子剖析器）。所以在上面的例子中，當指定 ``a`` 命令時，"
"只有 ``foo`` 和 ``bar`` 屬性存在，而當指定 ``b`` 命令時，只有 `` foo`` 和 "
"``baz`` 屬性存在。"

#: ../../library/argparse.rst:1775
#, fuzzy
msgid ""
"Similarly, when a help message is requested from a subparser, only the help "
"for that particular parser will be printed.  The help message will not "
"include parent parser or sibling parser messages.  (A help message for each "
"subparser command, however, can be given by supplying the ``help=`` argument "
"to :meth:`~_SubParsersAction.add_parser` as above.)"
msgstr ""
"類似地，當從子剖析器請求幫助消息時，只會印出該特定剖析器的幫助。幫助消息將不"
"包括父剖析器或兄弟剖析器消息。 （但是，可以通過向 :meth:`~"
"_SubParsersAction.add_parser 提供 ``help=`` "
"參數來提供每個子剖析器命令的幫助消息。）"

#: ../../library/argparse.rst:1811
#, fuzzy
msgid ""
"The :meth:`add_subparsers` method also supports ``title`` and "
"``description`` keyword arguments.  When either is present, the subparser's "
"commands will appear in their own group in the help output.  For example::"
msgstr ""
":meth:`add_subparsers` 方法還支援 ``title`` 和 ``description`` 關鍵字參數。當"
"其中任何一個存在時，子剖析器的命令將出現在幫助輸出中它們自己的組中。例如：："

#: ../../library/argparse.rst:1832
#, fuzzy
msgid ""
"Furthermore, ``add_parser`` supports an additional ``aliases`` argument, "
"which allows multiple strings to refer to the same subparser. This example, "
"like ``svn``, aliases ``co`` as a shorthand for ``checkout``::"
msgstr ""
"此外，``add_parser`` 支援額外的``aliases`` 參數，它允許多個字串引用同一個子解"
"析器。這個例子，像``svn``，別名``co``作為``checkout``的簡寫::"

#: ../../library/argparse.rst:1843
#, fuzzy
msgid ""
"One particularly effective way of handling sub-commands is to combine the "
"use of the :meth:`add_subparsers` method with calls to :meth:`set_defaults` "
"so that each subparser knows which Python function it should execute.  For "
"example::"
msgstr ""
"處理子命令的一種特別有效的方法是將 add_subparsers 方法的使用與對 "
"set_defaults 的呼叫結合起來，以便每個子剖析器知道它應該執行哪個 Python "
"函式。例如：："

#: ../../library/argparse.rst:1880
#, fuzzy
msgid ""
"This way, you can let :meth:`parse_args` do the job of calling the "
"appropriate function after argument parsing is complete.  Associating "
"functions with actions like this is typically the easiest way to handle the "
"different actions for each of your subparsers.  However, if it is necessary "
"to check the name of the subparser that was invoked, the ``dest`` keyword "
"argument to the :meth:`add_subparsers` call will work::"
msgstr ""
"這樣，您可以讓 :meth:`parse_args` 在參數剖析完成後執行呼叫適當函式的工作。將"
"函式與這樣的操作相關聯通常是處理每個子剖析器的不同操作的最簡單方法。但是，如"
"果有必要檢查被呼叫的子剖析器的名稱，add_subparsers 呼叫的 dest "
"關鍵字參數將起作用::"

#: ../../library/argparse.rst:1896
#, fuzzy
msgid "New *required* keyword argument."
msgstr "新的 *required* 關鍵字參數。"

#: ../../library/argparse.rst:1901
msgid "FileType objects"
msgstr "FileType 物件"

#: ../../library/argparse.rst:1905
#, fuzzy
msgid ""
"The :class:`FileType` factory creates objects that can be passed to the type "
"argument of :meth:`ArgumentParser.add_argument`.  Arguments that have :class:"
"`FileType` objects as their type will open command-line arguments as files "
"with the requested modes, buffer sizes, encodings and error handling (see "
"the :func:`open` function for more details)::"
msgstr ""
":class:`FileType` 工廠建立可以傳遞給 ArgumentParser.add_argument "
"的型別參數的物件。具有 :class:`FileType` 對像作為其型別的參數將打開命令列參數"
"作為具有請求模式、緩衝區大小、編碼和錯誤處理的文件（有關詳細資訊，請參閱 "
":func:`open` 函式）::"

#: ../../library/argparse.rst:1917
#, fuzzy
msgid ""
"FileType objects understand the pseudo-argument ``'-'`` and automatically "
"convert this into :data:`sys.stdin` for readable :class:`FileType` objects "
"and :data:`sys.stdout` for writable :class:`FileType` objects::"
msgstr ""
"FileType 物件理解偽參數 ``'-'`` 並自動將其轉換為可讀的 :class:`FileType` "
"物件的 :data:`sys.stdin` 和可寫的 :data:`sys.stdout` :class: `FileType` "
"物件::"

#: ../../library/argparse.rst:1926
#, fuzzy
msgid "The *encodings* and *errors* keyword arguments."
msgstr "*encodings* 和 *errors* 關鍵字參數。"

#: ../../library/argparse.rst:1931
#, fuzzy
msgid "Argument groups"
msgstr "參數組"

#: ../../library/argparse.rst:1935
#, fuzzy
msgid ""
"By default, :class:`ArgumentParser` groups command-line arguments into "
"\"positional arguments\" and \"options\" when displaying help messages. When "
"there is a better conceptual grouping of arguments than this default one, "
"appropriate groups can be created using the :meth:`add_argument_group` "
"method::"
msgstr ""
"預設情況下，ArgumentParser 在顯示幫助消息時將命令列參數分組為“位置參數”和“選"
"項”。當存在比預設參數更好的概念分組時，可以使用 add_argument_group "
"方法建立適當的組："

#: ../../library/argparse.rst:1952
#, fuzzy
msgid ""
"The :meth:`add_argument_group` method returns an argument group object which "
"has an :meth:`~ArgumentParser.add_argument` method just like a regular :"
"class:`ArgumentParser`.  When an argument is added to the group, the parser "
"treats it just like a normal argument, but displays the argument in a "
"separate group for help messages.  The :meth:`add_argument_group` method "
"accepts *title* and *description* arguments which can be used to customize "
"this display::"
msgstr ""
":meth:`add_argument_group` 方法回傳一個參數組物件，它有一個 "
":meth:`~ArgumentParser.add_argument` 方法，就像常規的 :class:`ArgumentParser`"
" 一樣。當一個參數被新增到組中時，剖析器將其視為普通參數，但會在單獨的組中顯示"
"該參數以獲取幫助消息。 :meth:`add_argument_group` "
"方法接受可用於自定義此顯示的 *title* 和 *description* 參數::"

#: ../../library/argparse.rst:1978
#, fuzzy
msgid ""
"Note that any arguments not in your user-defined groups will end up back in "
"the usual \"positional arguments\" and \"optional arguments\" sections."
msgstr "請注意，任何不在您的使用者定義組中的參數將最終回傳到通常的“位置參數”和“可選參"
"數”部分。"

#: ../../library/argparse.rst:1981
#, fuzzy
msgid ""
"Calling :meth:`add_argument_group` on an argument group is deprecated. This "
"feature was never supported and does not always work correctly. The function "
"exists on the API by accident through inheritance and will be removed in the "
"future."
msgstr ""
"在參數組上呼叫 add_argument_group "
"已被棄用。此功能從未得到支援，並不總是能正常工作。該功能通過繼承意外地存在於 "
"API 上，將來會被刪除。"

#: ../../library/argparse.rst:1989
#, fuzzy
msgid "Mutual exclusion"
msgstr "互斥"

#: ../../library/argparse.rst:1993
#, fuzzy
msgid ""
"Create a mutually exclusive group. :mod:`argparse` will make sure that only "
"one of the arguments in the mutually exclusive group was present on the "
"command line::"
msgstr "建立一個互斥組。 :mod:`argparse` 將確保互斥組中只有一個參數出現在命令列中::"

#: ../../library/argparse.rst:2009
#, fuzzy
msgid ""
"The :meth:`add_mutually_exclusive_group` method also accepts a *required* "
"argument, to indicate that at least one of the mutually exclusive arguments "
"is required::"
msgstr ""
":meth:`add_mutually_exclusive_group` 方法還接受一個 *required* "
"參數，以指示至少需要一個互斥參數::"

#: ../../library/argparse.rst:2021
#, fuzzy
msgid ""
"Note that currently mutually exclusive argument groups do not support the "
"*title* and *description* arguments of :meth:`~ArgumentParser."
"add_argument_group`."
msgstr ""
"請注意，當前互斥參數組不支援 :meth:`~ArgumentParser.add_argument_group` 的 "
"*title* 和 *description* 參數。"

#: ../../library/argparse.rst:2025
#, fuzzy
msgid ""
"Calling :meth:`add_argument_group` or :meth:`add_mutually_exclusive_group` "
"on a mutually exclusive group is deprecated. These features were never "
"supported and do not always work correctly. The functions exist on the API "
"by accident through inheritance and will be removed in the future."
msgstr ""
"在互斥組上呼叫 add_argument_group 或 add_mutually_exclusive_group "
"已被棄用。這些功能從未得到支援，並且並不總是能正常工作。"
"這些功能通過繼承意外地存在於 API 上，將來會被刪除。"

#: ../../library/argparse.rst:2033
#, fuzzy
msgid "Parser defaults"
msgstr "剖析器預設值"

#: ../../library/argparse.rst:2037
#, fuzzy
msgid ""
"Most of the time, the attributes of the object returned by :meth:"
"`parse_args` will be fully determined by inspecting the command-line "
"arguments and the argument actions.  :meth:`set_defaults` allows some "
"additional attributes that are determined without any inspection of the "
"command line to be added::"
msgstr ""
"大多數時候，parse_args "
"回傳的物件的屬性將完全通過檢查命令列參數和參數操作來確定。 "
":meth:`set_defaults` 允許新增一些無需檢查命令列即可確定的附加屬性::"

#: ../../library/argparse.rst:2049
#, fuzzy
msgid ""
"Note that parser-level defaults always override argument-level defaults::"
msgstr "請注意，剖析器級別的預設值總是覆蓋參數級別的預設值::"

#: ../../library/argparse.rst:2057
#, fuzzy
msgid ""
"Parser-level defaults can be particularly useful when working with multiple "
"parsers.  See the :meth:`~ArgumentParser.add_subparsers` method for an "
"example of this type."
msgstr ""
"在使用多個剖析器時，剖析器級別的預設值可能特別有用。有關此型別的示例，請參閱 "
":meth:`~ArgumentParser.add_subparsers` 方法。"

#: ../../library/argparse.rst:2063
#, fuzzy
msgid ""
"Get the default value for a namespace attribute, as set by either :meth:"
"`~ArgumentParser.add_argument` or by :meth:`~ArgumentParser.set_defaults`::"
msgstr ""
"獲取命名空間屬性的預設值，由 :meth:`~ArgumentParser.add_argument` 或 "
":meth:`~ArgumentParser.set_defaults` 設定："

#: ../../library/argparse.rst:2074
#, fuzzy
msgid "Printing help"
msgstr "印出幫助"

#: ../../library/argparse.rst:2076
#, fuzzy
msgid ""
"In most typical applications, :meth:`~ArgumentParser.parse_args` will take "
"care of formatting and printing any usage or error messages.  However, "
"several formatting methods are available:"
msgstr ""
"在大多數典型應用程式中，:meth:`~ArgumentParser.parse_args` "
"將負責格式化和印出任何用法或錯誤消息。但是，有幾種格式化方法可用："

#: ../../library/argparse.rst:2082
#, fuzzy
msgid ""
"Print a brief description of how the :class:`ArgumentParser` should be "
"invoked on the command line.  If *file* is ``None``, :data:`sys.stdout` is "
"assumed."
msgstr ""
"印出關於如何在命令列上呼叫 ArgumentParser 的簡要說明。如果 *file* 是 "
"``None``，則假定為 :data:`sys.stdout`。"

#: ../../library/argparse.rst:2088
#, fuzzy
msgid ""
"Print a help message, including the program usage and information about the "
"arguments registered with the :class:`ArgumentParser`.  If *file* is "
"``None``, :data:`sys.stdout` is assumed."
msgstr ""
"印出一條幫助消息，包括程式使用和有關使用 ArgumentParser 註冊的參數的資訊。"
"如果 *file* 是 ``None``，則假定為 :data:`sys.stdout`。"

#: ../../library/argparse.rst:2092
#, fuzzy
msgid ""
"There are also variants of these methods that simply return a string instead "
"of printing it:"
msgstr "這些方法還有一些變體，它們只回傳一個字串而不是印出它："

#: ../../library/argparse.rst:2097
#, fuzzy
msgid ""
"Return a string containing a brief description of how the :class:"
"`ArgumentParser` should be invoked on the command line."
msgstr "回傳一個字串，其中包含應如何在命令列上呼叫 ArgumentParser 的簡要說明。"

#: ../../library/argparse.rst:2102
#, fuzzy
msgid ""
"Return a string containing a help message, including the program usage and "
"information about the arguments registered with the :class:`ArgumentParser`."
msgstr "回傳包含幫助消息的字串，包括程式用法和有關使用 ArgumentParser "
"註冊的參數的資訊。"

#: ../../library/argparse.rst:2107
#, fuzzy
msgid "Partial parsing"
msgstr "部分剖析"

#: ../../library/argparse.rst:2111
#, fuzzy
msgid ""
"Sometimes a script may only parse a few of the command-line arguments, "
"passing the remaining arguments on to another script or program. In these "
"cases, the :meth:`~ArgumentParser.parse_known_args` method can be useful.  "
"It works much like :meth:`~ArgumentParser.parse_args` except that it does "
"not produce an error when extra arguments are present.  Instead, it returns "
"a two item tuple containing the populated namespace and the list of "
"remaining argument strings."
msgstr ""
"有時一個腳本可能只剖析少數命令列參數，將剩餘的參數傳遞給另一個腳本或程式。在"
"這些情況下，:meth:`~ArgumentParser.parse_known_args` 方法會很有用。"
"它的工作方式與 :meth:`~ArgumentParser.parse_args` 非常相似，只是它在存在額外"
"參數時不會產生錯誤。相反，它回傳一個包含填充的命名空間和剩餘參數字串列表的兩"
"項元組。"

#: ../../library/argparse.rst:2127
#, fuzzy
msgid ""
":ref:`Prefix matching <prefix-matching>` rules apply to :meth:"
"`~ArgumentParser.parse_known_args`. The parser may consume an option even if "
"it's just a prefix of one of its known options, instead of leaving it in the "
"remaining arguments list."
msgstr ""
":ref:`前綴匹配 <prefix-matching>` 規則適用於 :meth:`~ArgumentParser.parse_know"
"n_args`。剖析器可能會使用一個選項，即使它只是其已知選項之一的前綴，而不是將其"
"留在剩餘的參數列表中。"

#: ../../library/argparse.rst:2134
#, fuzzy
msgid "Customizing file parsing"
msgstr "自定義文件剖析"

#: ../../library/argparse.rst:2138
#, fuzzy
msgid ""
"Arguments that are read from a file (see the *fromfile_prefix_chars* keyword "
"argument to the :class:`ArgumentParser` constructor) are read one argument "
"per line. :meth:`convert_arg_line_to_args` can be overridden for fancier "
"reading."
msgstr ""
"從文件中讀取的參數（請參閱 ArgumentParser 構造函式的 *fromfile_prefix_chars* "
"關鍵字參數）每行讀取一個參數。 :meth:`convert_arg_line_to_args` "
"可以被覆蓋以進行更有趣的閱讀。"

#: ../../library/argparse.rst:2143
#, fuzzy
msgid ""
"This method takes a single argument *arg_line* which is a string read from "
"the argument file.  It returns a list of arguments parsed from this string. "
"The method is called once per line read from the argument file, in order."
msgstr ""
"此方法採用單個參數 *arg_line*，它是從參數文件中讀取的字串。它回傳從該字串剖析"
"的參數列表。該方法按順序從參數文件中讀取的每行呼叫一次。"

#: ../../library/argparse.rst:2147
#, fuzzy
msgid ""
"A useful override of this method is one that treats each space-separated "
"word as an argument.  The following example demonstrates how to do this::"
msgstr "此方法的一個有用的覆蓋是將每個空格分隔的單詞視為一個參數。以下示例演示瞭如何"
"執行此操作："

#: ../../library/argparse.rst:2156
#, fuzzy
msgid "Exiting methods"
msgstr "退出方法"

#: ../../library/argparse.rst:2160
#, fuzzy
msgid ""
"This method terminates the program, exiting with the specified *status* and, "
"if given, it prints a *message* before that. The user can override this "
"method to handle these steps differently::"
msgstr ""
"此方法終止程式，以指定的 *status* 退出，如果給定，它會在此之前印出一條 "
"*message*。使用者可以覆蓋此方法以不同方式處理這些步驟::"

#: ../../library/argparse.rst:2172
#, fuzzy
msgid ""
"This method prints a usage message including the *message* to the standard "
"error and terminates the program with a status code of 2."
msgstr "此方法將包含 *message* 的用法消息印出到標準錯誤，並以狀態程式碼 2 終止程式。"

#: ../../library/argparse.rst:2177
#, fuzzy
msgid "Intermixed parsing"
msgstr "混合剖析"

#: ../../library/argparse.rst:2182
#, fuzzy
msgid ""
"A number of Unix commands allow the user to intermix optional arguments with "
"positional arguments.  The :meth:`~ArgumentParser.parse_intermixed_args` "
"and :meth:`~ArgumentParser.parse_known_intermixed_args` methods support this "
"parsing style."
msgstr ""
"許多 Unix 命令允許使用者將可選參數與位置參數混合使用。 :meth:`~ArgumentParser"
".parse_intermixed_args` 和 :meth:`~ArgumentParser."
"parse_known_intermixed_args` 方法支援這種剖析風格。"

#: ../../library/argparse.rst:2187
#, fuzzy
msgid ""
"These parsers do not support all the argparse features, and will raise "
"exceptions if unsupported features are used.  In particular, subparsers, and "
"mutually exclusive groups that include both optionals and positionals are "
"not supported."
msgstr "這些剖析器不支援所有 argparse 功能，如果使用不受支援的功能，則會引發例外。特"
"別是，不支援包含可选和位置的子剖析器和互斥組。"

#: ../../library/argparse.rst:2192
#, fuzzy
msgid ""
"The following example shows the difference between :meth:`~ArgumentParser."
"parse_known_args` and :meth:`~ArgumentParser.parse_intermixed_args`: the "
"former returns ``['2', '3']`` as unparsed arguments, while the latter "
"collects all the positionals into ``rest``.  ::"
msgstr ""
"以下示例顯示了 :meth:`~ArgumentParser.parse_known_args` 和 "
":meth:`~ArgumentParser.parse_intermixed_args` 之間的區別：前者回傳 ``['2', "
"'3']`` 作為未剖析的參數，而後者將所有位置收集到 ``rest`` 中。 ::"

#: ../../library/argparse.rst:2207
#, fuzzy
msgid ""
":meth:`~ArgumentParser.parse_known_intermixed_args` returns a two item tuple "
"containing the populated namespace and the list of remaining argument "
"strings. :meth:`~ArgumentParser.parse_intermixed_args` raises an error if "
"there are any remaining unparsed argument strings."
msgstr ""
":meth:`~ArgumentParser.parse_known_intermixed_args` "
"回傳一個包含填充的命名空間和剩餘參數字串列表的兩項元組。 "
":meth:`~ArgumentParser.parse_intermixed_args` "
"如果還有任何未剖析的參數字串，則會引發錯誤。"

#: ../../library/argparse.rst:2217
#, fuzzy
msgid "Upgrading optparse code"
msgstr "升級 optparse 程式碼"

#: ../../library/argparse.rst:2219
#, fuzzy
msgid ""
"Originally, the :mod:`argparse` module had attempted to maintain "
"compatibility with :mod:`optparse`.  However, :mod:`optparse` was difficult "
"to extend transparently, particularly with the changes required to support "
"the new ``nargs=`` specifiers and better usage messages.  When most "
"everything in :mod:`optparse` had either been copy-pasted over or monkey-"
"patched, it no longer seemed practical to try to maintain the backwards "
"compatibility."
msgstr ""
"最初，:mod:`argparse` 模組試圖保持與 :mod:`optparse` "
"的相容性。然而，:mod:`optparse` 很難透明地擴充，特別是需要進行更改以支援新的 "
"``nargs=`` 說明符和更好的使用消息。當 :mod:`optparse` "
"中的大部分內容都被複製粘貼或猴子修補時，嘗試保持向後相容性似乎不再可行。"

#: ../../library/argparse.rst:2226
#, fuzzy
msgid ""
"The :mod:`argparse` module improves on the standard library :mod:`optparse` "
"module in a number of ways including:"
msgstr ":mod:`argparse` 模組在標準庫 :mod:`optparse` 模組上進行了多種改進，包括："

#: ../../library/argparse.rst:2229
#, fuzzy
msgid "Handling positional arguments."
msgstr "處理位置參數。"

#: ../../library/argparse.rst:2230
#, fuzzy
msgid "Supporting sub-commands."
msgstr "支援子命令。"

#: ../../library/argparse.rst:2231
#, fuzzy
msgid "Allowing alternative option prefixes like ``+`` and ``/``."
msgstr "允許替代選項前綴，如 ``+`` 和 ``/``。"

#: ../../library/argparse.rst:2232
#, fuzzy
msgid "Handling zero-or-more and one-or-more style arguments."
msgstr "處理零個或多個和一個或多個樣式參數。"

#: ../../library/argparse.rst:2233
#, fuzzy
msgid "Producing more informative usage messages."
msgstr "生成更多資訊豐富的使用消息。"

#: ../../library/argparse.rst:2234
#, fuzzy
msgid "Providing a much simpler interface for custom ``type`` and ``action``."
msgstr "為自定義 ``type``和 ``action``提供更簡單的界面。"

#: ../../library/argparse.rst:2236
#, fuzzy
msgid "A partial upgrade path from :mod:`optparse` to :mod:`argparse`:"
msgstr "從 :mod:`optparse` 到 :mod:`argparse` 的部分升級路徑："

#: ../../library/argparse.rst:2238
#, fuzzy
msgid ""
"Replace all :meth:`optparse.OptionParser.add_option` calls with :meth:"
"`ArgumentParser.add_argument` calls."
msgstr ""
"將所有 :meth:`optparse.OptionParser.add_option` 呼叫替換為 "
":meth:`ArgumentParser.add_argument` 呼叫。"

#: ../../library/argparse.rst:2241
#, fuzzy
msgid ""
"Replace ``(options, args) = parser.parse_args()`` with ``args = parser."
"parse_args()`` and add additional :meth:`ArgumentParser.add_argument` calls "
"for the positional arguments. Keep in mind that what was previously called "
"``options``, now in the :mod:`argparse` context is called ``args``."
msgstr ""
"將 ``(options, args) = parser.parse_args()`` 替換為 ``args = parser."
"parse_args()`` 並新增額外的 :meth:`ArgumentParser.add_argument` "
"呼叫位置參數。請記住，以前稱為 ``options`` 的內容現在在 :mod:`argparse` "
"上下文中稱為 ``args``。"

#: ../../library/argparse.rst:2246
#, fuzzy
msgid ""
"Replace :meth:`optparse.OptionParser.disable_interspersed_args` by using :"
"meth:`~ArgumentParser.parse_intermixed_args` instead of :meth:"
"`~ArgumentParser.parse_args`."
msgstr ""
"使用 :meth:`~ArgumentParser.parse_intermixed_args` 代替 "
":meth:`~ArgumentParser.parse_args` 替換 :meth:`optparse.OptionParser."
"disable_interspersed_args`。"

#: ../../library/argparse.rst:2250
#, fuzzy
msgid ""
"Replace callback actions and the ``callback_*`` keyword arguments with "
"``type`` or ``action`` arguments."
msgstr "將回呼操作和 ``callback_*`` 關鍵字參數替換為 ``type`` 或 ``action`` 參數。"

#: ../../library/argparse.rst:2253
#, fuzzy
msgid ""
"Replace string names for ``type`` keyword arguments with the corresponding "
"type objects (e.g. int, float, complex, etc)."
msgstr "將 ``type``關鍵字參數的字串名稱替換為相應的型別物件（例如 int、float、complex "
"等）。"

#: ../../library/argparse.rst:2256
#, fuzzy
msgid ""
"Replace :class:`optparse.Values` with :class:`Namespace` and :exc:`optparse."
"OptionError` and :exc:`optparse.OptionValueError` with :exc:`ArgumentError`."
msgstr ""
"將 :class:`optparse.Values` 替換為 :class:`Namespace` 並將 :exc:`optparse."
"OptionError` 和 :exc:`optparse.OptionValueError` 替換為 "
":exc:`ArgumentError`。"

#: ../../library/argparse.rst:2260
#, fuzzy
msgid ""
"Replace strings with implicit arguments such as ``%default`` or ``%prog`` "
"with the standard Python syntax to use dictionaries to format strings, that "
"is, ``%(default)s`` and ``%(prog)s``."
msgstr ""
"用標準 Python 語法替換帶有隱式參數的字串，例如 ``%default`` 或 ``%prog`` "
"以使用字典來格式化字串，即 ``%(default)s`` 和 ``%(prog )s``。"

#: ../../library/argparse.rst:2264
#, fuzzy
msgid ""
"Replace the OptionParser constructor ``version`` argument with a call to "
"``parser.add_argument('--version', action='version', version='<the "
"version>')``."
msgstr ""
"用對 parser.add_argument('--version', action='version', version='<the "
"version>')`` 的呼叫替換 OptionParser 構造函式 ``version`` 參數。"

#: ../../library/argparse.rst:2268
#, fuzzy
msgid "Exceptions"
msgstr "例外情況"

#: ../../library/argparse.rst:2272
#, fuzzy
msgid "An error from creating or using an argument (optional or positional)."
msgstr "建立或使用參數（可選或位置）的錯誤。"

#: ../../library/argparse.rst:2274
#, fuzzy
msgid ""
"The string value of this exception is the message, augmented with "
"information about the argument that caused it."
msgstr "此例外的字串值是消息，增加了有關導致它的參數的資訊。"

#: ../../library/argparse.rst:2279
#, fuzzy
msgid ""
"Raised when something goes wrong converting a command line string to a type."
msgstr "在將命令列字串轉換為型別時出現問題時引發。"
