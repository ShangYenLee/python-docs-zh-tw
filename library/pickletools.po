# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-26 18:54+0800\n"
"PO-Revision-Date: 2018-05-23 16:07+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pickletools.rst:2
msgid ":mod:`pickletools` --- Tools for pickle developers"
msgstr ":mod:`pickletools` --- pickle 開發人員的工具"

#: ../../library/pickletools.rst:8
msgid "**Source code:** :source:`Lib/pickletools.py`"
msgstr "**原始碼：**\\ :source:`Lib/pickletools.py`"

#: ../../library/pickletools.rst:13
#, fuzzy
msgid ""
"This module contains various constants relating to the intimate details of "
"the :mod:`pickle` module, some lengthy comments about the implementation, "
"and a few useful functions for analyzing pickled data.  The contents of this "
"module are useful for Python core developers who are working on the :mod:"
"`pickle`; ordinary users of the :mod:`pickle` module probably won't find "
"the :mod:`pickletools` module relevant."
msgstr ""
"該模組包含與 :mod:`pickle` "
"模組的內部細節相關的各種常數，一些關於實作的冗長註釋，以及一些用於分析 "
"pickle 資料的有用函式。該模組的內容對從事 :mod:`pickle` 的 Python "
"核心開發人員很有用； :mod:`pickle` 模組的普通使用者可能不會發現 "
":mod:`pickletools` 模組相關。"

#: ../../library/pickletools.rst:21
#, fuzzy
msgid "Command line usage"
msgstr "命令列用法"

#: ../../library/pickletools.rst:25
#, fuzzy
msgid ""
"When invoked from the command line, ``python -m pickletools`` will "
"disassemble the contents of one or more pickle files.  Note that if you want "
"to see the Python object stored in the pickle rather than the details of "
"pickle format, you may want to use ``-m pickle`` instead. However, when the "
"pickle file that you want to examine comes from an untrusted source, ``-m "
"pickletools`` is a safer option because it does not execute pickle bytecode."
msgstr ""
"當從命令列呼叫時，``python -m pickletools`` 將反彙編一個或多個 pickle "
"文件的內容。請注意，如果您想查看儲存在 pickle 中的 Python 物件而不是 pickle "
"格式的詳細資訊，您可能需要使用 ``-m pickle`` 代替。但是，當您要檢查的 pickle "
"文件來自不受信任的來源時，``-m pickletools`` 是一個更安全的選項，"
"因為它不執行 pickle 位元組碼。"

#: ../../library/pickletools.rst:33
#, fuzzy
msgid "For example, with a tuple ``(1, 2)`` pickled in file ``x.pickle``:"
msgstr "例如，在文件 ``x.pickle`` 中醃製元組 ``(1, 2)``："

#: ../../library/pickletools.rst:50
#, fuzzy
msgid "Command line options"
msgstr "命令列選項"

#: ../../library/pickletools.rst:56
#, fuzzy
msgid "Annotate each line with a short opcode description."
msgstr "用簡短的操作碼描述註釋每一行。"

#: ../../library/pickletools.rst:60
#, fuzzy
msgid "Name of a file where the output should be written."
msgstr "應寫入輸出的文件的名稱。"

#: ../../library/pickletools.rst:64
#, fuzzy
msgid "The number of blanks by which to indent a new MARK level."
msgstr "縮進新 MARK 級別的空格數。"

#: ../../library/pickletools.rst:68
#, fuzzy
msgid ""
"When multiple objects are disassembled, preserve memo between disassemblies."
msgstr "拆卸多個物件時，在拆卸之間保留備忘錄。"

#: ../../library/pickletools.rst:73
#, fuzzy
msgid ""
"When more than one pickle file are specified, print given preamble before "
"each disassembly."
msgstr "當指定了多個 pickle 文件時，在每次反彙編之前印出給定的序言。"

#: ../../library/pickletools.rst:79
#, fuzzy
msgid "Programmatic Interface"
msgstr "編程介面"

#: ../../library/pickletools.rst:84
#, fuzzy
msgid ""
"Outputs a symbolic disassembly of the pickle to the file-like object *out*, "
"defaulting to ``sys.stdout``.  *pickle* can be a string or a file-like "
"object.  *memo* can be a Python dictionary that will be used as the pickle's "
"memo; it can be used to perform disassemblies across multiple pickles "
"created by the same pickler. Successive levels, indicated by ``MARK`` "
"opcodes in the stream, are indented by *indentlevel* spaces.  If a nonzero "
"value is given to *annotate*, each opcode in the output is annotated with a "
"short description.  The value of *annotate* is used as a hint for the column "
"where annotation should start."
msgstr ""
"將 pickle 的符號反彙編輸出到類文件物件 *out*，預設為“sys.stdout”。 *pickle* "
"可以是字串或類似文件的物件。 *memo* 可以是一個 Python 字典，用作 pickle "
"的備忘錄；它可用於對由同一 pickler 建立的多個 pickle "
"執行反彙編。由流中的 ``MARK``操作碼指示的連續級別由 *indentlevel* 空格縮進。"
"如果給 *annotate* 一個非零值，輸出中的每個操作碼都會用簡短的描述進行註釋。 "
"*annotate* 的值用作註釋應該開始的列的提示。"

#: ../../library/pickletools.rst:95
msgid "The *annotate* argument."
msgstr "*annotate* 引數。"

#: ../../library/pickletools.rst:100
#, fuzzy
msgid ""
"Provides an :term:`iterator` over all of the opcodes in a pickle, returning "
"a sequence of ``(opcode, arg, pos)`` triples.  *opcode* is an instance of "
"an :class:`OpcodeInfo` class; *arg* is the decoded value, as a Python "
"object, of the opcode's argument; *pos* is the position at which this opcode "
"is located. *pickle* can be a string or a file-like object."
msgstr ""
"在 pickle 中的所有操作碼上提供一個疊代器，回傳一個 ``(opcode, arg, pos)`` "
"三元組序列。 *opcode* 是一個 :class:`OpcodeInfo` 類的實例； *arg* "
"是操作碼參數的解碼值，作為 Python 物件； *pos* 是這個操作碼所在的位置。 "
"*pickle* 可以是字串或類似文件的物件。"

#: ../../library/pickletools.rst:108
#, fuzzy
msgid ""
"Returns a new equivalent pickle string after eliminating unused ``PUT`` "
"opcodes. The optimized pickle is shorter, takes less transmission time, "
"requires less storage space, and unpickles more efficiently."
msgstr ""
"在消除未使用的 ``PUT``操作碼後回傳一個新的等效 pickle 字串。最佳化的 pickle "
"更短，傳輸時間更短，需要的儲存空間更少，並且 unpickles 更高效。"
