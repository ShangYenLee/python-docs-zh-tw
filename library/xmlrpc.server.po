# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-13 00:17+0000\n"
"PO-Revision-Date: 2018-05-23 16:16+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/xmlrpc.server.rst:2
msgid ":mod:`xmlrpc.server` --- Basic XML-RPC servers"
msgstr ":mod:`xmlrpc.server` --- 基本的 XML-RPC 伺服器"

#: ../../library/xmlrpc.server.rst:10
msgid "**Source code:** :source:`Lib/xmlrpc/server.py`"
msgstr "**原始碼：**\\ :source:`Lib/xmlrpc/server.py`"

#: ../../library/xmlrpc.server.rst:14
#, fuzzy
msgid ""
"The :mod:`xmlrpc.server` module provides a basic server framework for XML-"
"RPC servers written in Python.  Servers can either be free standing, using :"
"class:`SimpleXMLRPCServer`, or embedded in a CGI environment, using :class:"
"`CGIXMLRPCRequestHandler`."
msgstr ""
":mod:`xmlrpc.server` 模組為用 Python 編寫的 XML-RPC "
"伺服器提供了一個基本的伺服器框架。伺服器可以是獨立的，使用 "
":class:`SimpleXMLRPCServer`，或者嵌入到 CGI 環境中，使用 "
":class:`CGIXMLRPCRequestHandler`。"

#: ../../library/xmlrpc.server.rst:22
#, fuzzy
msgid ""
"The :mod:`xmlrpc.server` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data "
"see :ref:`xml-vulnerabilities`."
msgstr ""
":mod:`xmlrpc.server` "
"模組對惡意構造的資料不安全。如果您需要解析不受信任或未經身份驗證的資料，"
"請參閱 :ref:`xml-vulnerabilities`。"

#: ../../includes/wasm-notavail.rst:3
#, fuzzy
msgid ":ref:`Availability <availability>`: not Emscripten, not WASI."
msgstr ":ref:`Availability <availability>`：不是 Emscripten，不是 WASI。"

#: ../../includes/wasm-notavail.rst:5
#, fuzzy
msgid ""
"This module does not work or is not available on WebAssembly platforms "
"``wasm32-emscripten`` and ``wasm32-wasi``. See :ref:`wasm-availability` for "
"more information."
msgstr ""
"此模組在 WebAssembly 平台 ``wasm32-emscripten`` 和 ``wasm32-wasi`` 上不起作用或不可用"
"。有關更多資訊，請參閱 :ref:`wasm-availability`。"

#: ../../library/xmlrpc.server.rst:32
#, fuzzy
msgid ""
"Create a new server instance.  This class provides methods for registration "
"of functions that can be called by the XML-RPC protocol.  The "
"*requestHandler* parameter should be a factory for request handler "
"instances; it defaults to :class:`SimpleXMLRPCRequestHandler`.  The *addr* "
"and *requestHandler* parameters are passed to the :class:`socketserver."
"TCPServer` constructor.  If *logRequests* is true (the default), requests "
"will be logged; setting this parameter to false will turn off logging.   The "
"*allow_none* and *encoding* parameters are passed on to :mod:`xmlrpc.client` "
"and control the XML-RPC responses that will be returned from the server. The "
"*bind_and_activate* parameter controls whether :meth:`server_bind` and :meth:"
"`server_activate` are called immediately by the constructor; it defaults to "
"true. Setting it to false allows code to manipulate the "
"*allow_reuse_address* class variable before the address is bound. The "
"*use_builtin_types* parameter is passed to the :func:`~xmlrpc.client.loads` "
"function and controls which types are processed when date/times values or "
"binary data are received; it defaults to false."
msgstr ""
"建立一個新的伺服器實例。此類提供用於註冊可由 XML-RPC 協定呼叫的函式的方法。 "
"*requestHandler* 參數應該是請求處理程式實例的工廠；它預設為 :class:`SimpleXML"
"RPCRequestHandler`。 *addr* 和 *requestHandler* 參數被傳遞給 "
":class:`socketserver.TCPServer` 構造函式。如果 *logRequests* "
"為真（預設），請求將被記錄；將此參數設定為 false 將關閉日誌記錄。 "
"*allow_none* 和 *encoding* 參數傳遞給 :mod:`xmlrpc.client` "
"並控制將從伺服器回傳的 XML-RPC 響應。 *bind_and_activate* 參數控制 "
":meth:`server_bind` 和 :meth:`server_activate` "
"是否被構造函式立即呼叫；它預設為真。將其設定為 false "
"允許程式碼在綁定地址之前操作 *allow_reuse_address* 類變數。 "
"*use_builtin_types* 參數傳遞給 :func:`~xmlrpc.client.loads` "
"函式並控制在接收到日期/時間值或二進位資料時處理哪些型別；它預設為假。"

#: ../../library/xmlrpc.server.rst:48 ../../library/xmlrpc.server.rst:62
#: ../../library/xmlrpc.server.rst:374
msgid "The *use_builtin_types* flag was added."
msgstr "新增了 *use_builtin_types* 旗標。"

#: ../../library/xmlrpc.server.rst:55
#, fuzzy
msgid ""
"Create a new instance to handle XML-RPC requests in a CGI environment.  The "
"*allow_none* and *encoding* parameters are passed on to :mod:`xmlrpc.client` "
"and control the XML-RPC responses that will be returned from the server. The "
"*use_builtin_types* parameter is passed to the :func:`~xmlrpc.client.loads` "
"function and controls which types are processed when date/times values or "
"binary data are received; it defaults to false."
msgstr ""
"建立一個新實例來處理 CGI 環境中的 XML-RPC 請求。 *allow_none* 和 *encoding* "
"參數傳遞給 :mod:`xmlrpc.client` 並控制將從伺服器回傳的 XML-RPC 響應。 "
"*use_builtin_types* 參數傳遞給 :func:`~xmlrpc.client.loads` "
"函式並控制在接收到日期/時間值或二進位資料時處理哪些型別；它預設為假。"

#: ../../library/xmlrpc.server.rst:68
#, fuzzy
msgid ""
"Create a new request handler instance.  This request handler supports "
"``POST`` requests and modifies logging so that the *logRequests* parameter "
"to the :class:`SimpleXMLRPCServer` constructor parameter is honored."
msgstr ""
"建立一個新的請求處理程式實例。此請求處理程式支援 ``POST`` "
"請求並修改日誌記錄，以便接受 :class:`SimpleXMLRPCServer` 構造函式參數的 "
"*logRequests* 參數。"

#: ../../library/xmlrpc.server.rst:76
msgid "SimpleXMLRPCServer Objects"
msgstr "SimpleXMLRPCServer 物件"

#: ../../library/xmlrpc.server.rst:78
#, fuzzy
msgid ""
"The :class:`SimpleXMLRPCServer` class is based on :class:`socketserver."
"TCPServer` and provides a means of creating simple, stand alone XML-RPC "
"servers."
msgstr ""
":class:`SimpleXMLRPCServer` 類基於 :class:`socketserver.TCPServer` "
"並提供了一種建立簡單、獨立的 XML-RPC 伺服器的方法。"

#: ../../library/xmlrpc.server.rst:85 ../../library/xmlrpc.server.rst:299
#, fuzzy
msgid ""
"Register a function that can respond to XML-RPC requests.  If *name* is "
"given, it will be the method name associated with *function*, otherwise "
"``function.__name__`` will be used.  *name* is a string, and may contain "
"characters not legal in Python identifiers, including the period character."
msgstr ""
"註冊一個可以響應 XML-RPC 請求的函式。如果給出 *name*，它將是與 *function* "
"關聯的方法名稱，否則將使用 ``function.__name__``。 *name* 是一個字串，"
"可能包含在 Python 標識符中不合法的字元，包括句點字元。"

#: ../../library/xmlrpc.server.rst:90 ../../library/xmlrpc.server.rst:304
#, fuzzy
msgid ""
"This method can also be used as a decorator.  When used as a decorator, "
"*name* can only be given as a keyword argument to register *function* under "
"*name*.  If no *name* is given, ``function.__name__`` will be used."
msgstr ""
"此方法也可以用作裝飾器。當用作裝飾器時，*name* 只能作為關鍵字參數在 *name* "
"下註冊 *function*。如果沒有給出 *name*，將使用 ``function.__name__``。"

#: ../../library/xmlrpc.server.rst:94 ../../library/xmlrpc.server.rst:308
msgid ":meth:`register_function` can be used as a decorator."
msgstr ":meth:`register_function` 也可被當作裝飾器使用。"

#: ../../library/xmlrpc.server.rst:100
#, fuzzy
msgid ""
"Register an object which is used to expose method names which have not been "
"registered using :meth:`register_function`.  If *instance* contains a :meth:"
"`_dispatch` method, it is called with the requested method name and the "
"parameters from the request.  Its API is ``def _dispatch(self, method, "
"params)`` (note that *params* does not represent a variable argument list).  "
"If it calls an underlying function to perform its task, that function is "
"called as ``func(*params)``, expanding the parameter list. The return value "
"from :meth:`_dispatch` is returned to the client as the result.  If "
"*instance* does not have a :meth:`_dispatch` method, it is searched for an "
"attribute matching the name of the requested method."
msgstr ""
"註冊一個物件，該對像用於公開尚未使用 :meth:`register_function` "
"註冊的方法名稱。如果 *instance* 包含 :meth:`_dispatch` "
"方法，則使用請求的方法名稱和請求中的參數呼叫它。它的 API 是“def _dispatch("
"self, method, params)”（注意 *params* 不代表可變參數列表）。如果它呼叫底層函"
"式來執行其任務，則該函式稱為“func(*params)”，擴充參數列表。 :meth:`_dispatch`"
" 的回傳值作為結果回傳給客戶端。如果 *instance* 沒有 :meth:`_dispatch` "
"方法，則會搜索與所請求方法名稱匹配的屬性。"

#: ../../library/xmlrpc.server.rst:111
#, fuzzy
msgid ""
"If the optional *allow_dotted_names* argument is true and the instance does "
"not have a :meth:`_dispatch` method, then if the requested method name "
"contains periods, each component of the method name is searched for "
"individually, with the effect that a simple hierarchical search is "
"performed.  The value found from this search is then called with the "
"parameters from the request, and the return value is passed back to the "
"client."
msgstr ""
"如果可選的 *allow_dotted_names* 參數為 true 並且實例沒有 :meth:`_dispatch` 方"
"法，那麼如果請求的方法名稱包含句點，則單獨搜索方法名稱的每個組件，其效果是一"
"個簡單的執行分層搜索。然後使用請求中的參數呼叫從該搜索中找到的值，並將回傳值"
"傳遞回客戶端。"

#: ../../library/xmlrpc.server.rst:120
#, fuzzy
msgid ""
"Enabling the *allow_dotted_names* option allows intruders to access your "
"module's global variables and may allow intruders to execute arbitrary code "
"on your machine.  Only use this option on a secure, closed network."
msgstr ""
"啟用 *allow_dotted_names* 選項允許入侵者訪問您模組的全局變數，並可能允許入侵"
"者在您的機器上執行任意程式碼。僅在安全、封閉的網絡上使用此選項。"

#: ../../library/xmlrpc.server.rst:127
#, fuzzy
msgid ""
"Registers the XML-RPC introspection functions ``system.listMethods``, "
"``system.methodHelp`` and ``system.methodSignature``."
msgstr ""
"註冊 XML-RPC 內省函式 ``system.listMethods``、``system.methodHelp`` 和 "
"``system.methodSignature``。"

#: ../../library/xmlrpc.server.rst:133
#, fuzzy
msgid "Registers the XML-RPC multicall function system.multicall."
msgstr "註冊 XML-RPC 多路呼叫函式 system.multicall。"

#: ../../library/xmlrpc.server.rst:138
#, fuzzy
msgid ""
"An attribute value that must be a tuple listing valid path portions of the "
"URL for receiving XML-RPC requests.  Requests posted to other paths will "
"result in a 404 \"no such page\" HTTP error.  If this tuple is empty, all "
"paths will be considered valid. The default value is ``('/', '/RPC2')``."
msgstr ""
"一個屬性值，它必須是一個元組，列出用於接收 XML-RPC 請求的 URL "
"的有效路徑部分。發佈到其他路徑的請求將導致 404“沒有這樣的頁面”HTTP "
"錯誤。如果此元組為空，則所有路徑都將被視為有效。預設值為``('/', '/RPC2')``。"

#: ../../library/xmlrpc.server.rst:147
msgid "SimpleXMLRPCServer Example"
msgstr "SimpleXMLRPCServer 範例"

#: ../../library/xmlrpc.server.rst:148
#, fuzzy
msgid "Server code::"
msgstr "伺服器程式碼：："

#: ../../library/xmlrpc.server.rst:182
#, fuzzy
msgid ""
"The following client code will call the methods made available by the "
"preceding server::"
msgstr "以下客戶端程式碼將呼叫前面伺服器提供的方法："

#: ../../library/xmlrpc.server.rst:195
#, fuzzy
msgid ""
":meth:`register_function` can also be used as a decorator. The previous "
"server example can register functions in a decorator way::"
msgstr ":meth:`register_function` "
"也可以用作裝飾器。前面的伺服器示例可以用裝飾器的方式註冊函式::"

#: ../../library/xmlrpc.server.rst:226
#, fuzzy
msgid ""
"The following example included in the :file:`Lib/xmlrpc/server.py` module "
"shows a server allowing dotted names and registering a multicall function."
msgstr ":file:`Lib/xmlrpc/server.py` "
"模組中包含的以下示例顯示了一個伺服器允許點名和註冊一個多呼叫函式。"

#: ../../library/xmlrpc.server.rst:231
#, fuzzy
msgid ""
"Enabling the *allow_dotted_names* option allows intruders to access your "
"module's global variables and may allow intruders to execute arbitrary code "
"on your machine.  Only use this example only within a secure, closed network."
msgstr ""
"啟用 *allow_dotted_names* 選項允許入侵者訪問您模組的全局變數，並可能允許入侵"
"者在您的機器上執行任意程式碼。僅在安全、封閉的網絡中使用此示例。"

#: ../../library/xmlrpc.server.rst:260
#, fuzzy
msgid "This ExampleService demo can be invoked from the command line::"
msgstr "這個 ExampleService 演示可以從命令列呼叫::"

#: ../../library/xmlrpc.server.rst:265
#, fuzzy
msgid ""
"The client that interacts with the above server is included in ``Lib/xmlrpc/"
"client.py``::"
msgstr "與上述伺服器交互的客戶端包含在``Lib/xmlrpc/client.py``::"

#: ../../library/xmlrpc.server.rst:285
#, fuzzy
msgid ""
"This client which interacts with the demo XMLRPC server can be invoked as::"
msgstr "這個與演示 XMLRPC 伺服器交互的客戶端可以呼叫為："

#: ../../library/xmlrpc.server.rst:291
msgid "CGIXMLRPCRequestHandler"
msgstr "CGIXMLRPCRequestHandler"

#: ../../library/xmlrpc.server.rst:293
#, fuzzy
msgid ""
"The :class:`CGIXMLRPCRequestHandler` class can be used to handle XML-RPC "
"requests sent to Python CGI scripts."
msgstr ":class:`CGIXMLRPCRequestHandler` 類可用於處理髮送到 Python CGI 腳本的 XML-"
"RPC 請求。"

#: ../../library/xmlrpc.server.rst:314
#, fuzzy
msgid ""
"Register an object which is used to expose method names  which have not been "
"registered using :meth:`register_function`. If  instance contains a :meth:"
"`_dispatch` method, it is called with the  requested method name and the "
"parameters from the  request; the return value is returned to the client as "
"the result. If instance does not have a :meth:`_dispatch` method, it is "
"searched for an attribute matching the name of the requested method; if  the "
"requested method name contains periods, each  component of the method name "
"is searched for individually,  with the effect that a simple hierarchical "
"search is performed. The value found from this search is then called with "
"the  parameters from the request, and the return value is passed  back to "
"the client."
msgstr ""
"註冊一個物件，該對像用於公開尚未使用 :meth:`register_function` "
"註冊的方法名稱。如果實例包含 :meth:`_dispatch` "
"方法，則使用請求的方法名稱和請求中的參數呼叫它；回傳值作為結果回傳給客戶端。"
"如果實例沒有 :meth:`_dispatch` 方法，則會搜索與所請求方法名稱匹配的屬性；如果"
"請求的方法名稱包含句點，則單獨搜索方法名稱的每個組成部分，從而執行簡單的層次"
"搜索。然後使用請求中的參數呼叫從該搜索中找到的值，並將回傳值傳遞回客戶端。"

#: ../../library/xmlrpc.server.rst:328
#, fuzzy
msgid ""
"Register the XML-RPC introspection functions  ``system.listMethods``, "
"``system.methodHelp`` and  ``system.methodSignature``."
msgstr ""
"註冊 XML-RPC 內省函式“system.listMethods”、“system.methodHelp”和“system."
"methodSignature”。"

#: ../../library/xmlrpc.server.rst:334
#, fuzzy
msgid "Register the XML-RPC multicall function ``system.multicall``."
msgstr "註冊 XML-RPC 多路呼叫函式 ``system.multicall``。"

#: ../../library/xmlrpc.server.rst:339
#, fuzzy
msgid ""
"Handle an XML-RPC request. If *request_text* is given, it should be the POST "
"data provided by the HTTP server,  otherwise the contents of stdin will be "
"used."
msgstr "處理 XML-RPC 請求。如果給出*request_text*，它應該是HTTP伺服器提供的POST資料，"
"否則將使用stdin的內容。"

#: ../../library/xmlrpc.server.rst:342
msgid "Example::"
msgstr ""
"範例：\n"
"\n"
"::"

#: ../../library/xmlrpc.server.rst:358
#, fuzzy
msgid "Documenting XMLRPC server"
msgstr "記錄 XMLRPC 伺服器"

#: ../../library/xmlrpc.server.rst:360
#, fuzzy
msgid ""
"These classes extend the above classes to serve HTML documentation in "
"response to HTTP GET requests.  Servers can either be free standing, using :"
"class:`DocXMLRPCServer`, or embedded in a CGI environment, using :class:"
"`DocCGIXMLRPCRequestHandler`."
msgstr ""
"這些類擴充了上述類以響應 HTTP GET 請求提供 HTML 文檔。伺服器可以是獨立的，"
"使用 DocXMLRPCServer ，也可以嵌入 CGI 環境中，使用 "
"DocCGIXMLRPCRequestHandler 。"

#: ../../library/xmlrpc.server.rst:370
#, fuzzy
msgid ""
"Create a new server instance. All parameters have the same meaning as for :"
"class:`SimpleXMLRPCServer`; *requestHandler* defaults to :class:"
"`DocXMLRPCRequestHandler`."
msgstr ""
"建立一個新的伺服器實例。所有參數的含義與 :class:`SimpleXMLRPCServer` 相同； "
"*requestHandler* 預設為 :class:`DocXMLRPCRequestHandler`。"

#: ../../library/xmlrpc.server.rst:380
#, fuzzy
msgid "Create a new instance to handle XML-RPC requests in a CGI environment."
msgstr "建立一個新實例來處理 CGI 環境中的 XML-RPC 請求。"

#: ../../library/xmlrpc.server.rst:385
#, fuzzy
msgid ""
"Create a new request handler instance. This request handler supports XML-RPC "
"POST requests, documentation GET requests, and modifies logging so that the "
"*logRequests* parameter to the :class:`DocXMLRPCServer` constructor "
"parameter is honored."
msgstr ""
"建立一個新的請求處理程式實例。此請求處理程式支援 XML-RPC POST 請求、文檔 GET "
"請求，並修改日誌記錄，以便 DocXMLRPCServer 構造函式參數的 *logRequests* "
"參數被接受。"

#: ../../library/xmlrpc.server.rst:394
msgid "DocXMLRPCServer Objects"
msgstr "DocXMLRPCServer 物件"

#: ../../library/xmlrpc.server.rst:396
#, fuzzy
msgid ""
"The :class:`DocXMLRPCServer` class is derived from :class:"
"`SimpleXMLRPCServer` and provides a means of creating self-documenting, "
"stand alone XML-RPC servers. HTTP POST requests are handled as XML-RPC "
"method calls. HTTP GET requests are handled by generating pydoc-style HTML "
"documentation. This allows a server to provide its own web-based "
"documentation."
msgstr ""
":class:`DocXMLRPCServer` 類派生自 :class:`SimpleXMLRPCServer` "
"並提供了一種建立自文檔、獨立 XML-RPC 伺服器的方法。 HTTP POST 請求作為 XML-"
"RPC 方法呼叫處理。 HTTP GET 請求通過生成 pydoc 樣式的 HTML 文檔來處理。"
"這允許伺服器提供自己的基於 Web 的文檔。"

#: ../../library/xmlrpc.server.rst:405 ../../library/xmlrpc.server.rst:433
#, fuzzy
msgid ""
"Set the title used in the generated HTML documentation. This title will be "
"used inside the HTML \"title\" element."
msgstr "設定生成的 HTML 文檔中使用的標題。此標題將在 HTML 的 ``title``元素中使用。"

#: ../../library/xmlrpc.server.rst:411 ../../library/xmlrpc.server.rst:439
#, fuzzy
msgid ""
"Set the name used in the generated HTML documentation. This name will appear "
"at the top of the generated documentation inside a \"h1\" element."
msgstr "設定生成的 HTML 文檔中使用的名稱。此名稱將出現在生成的文檔頂部的 ``h1``元素內。"

#: ../../library/xmlrpc.server.rst:417 ../../library/xmlrpc.server.rst:445
#, fuzzy
msgid ""
"Set the description used in the generated HTML documentation. This "
"description will appear as a paragraph, below the server name, in the "
"documentation."
msgstr "設定生成的 HTML "
"文檔中使用的描述。此描述將作為一個段落出現在文檔中的伺服器名稱下方。"

#: ../../library/xmlrpc.server.rst:422
msgid "DocCGIXMLRPCRequestHandler"
msgstr "DocCGIXMLRPCRequestHandler"

#: ../../library/xmlrpc.server.rst:424
#, fuzzy
msgid ""
"The :class:`DocCGIXMLRPCRequestHandler` class is derived from :class:"
"`CGIXMLRPCRequestHandler` and provides a means of creating self-documenting, "
"XML-RPC CGI scripts. HTTP POST requests are handled as XML-RPC method calls. "
"HTTP GET requests are handled by generating pydoc-style HTML documentation. "
"This allows a server to provide its own web-based documentation."
msgstr ""
":class:`DocCGIXMLRPCRequestHandler` 類派生自 :class:`CGIXMLRPCRequestHandler`"
" 並提供了一種建立自文檔化 XML-RPC CGI 腳本的方法。 HTTP POST 請求作為 XML-"
"RPC 方法呼叫處理。 HTTP GET 請求通過生成 pydoc 樣式的 HTML 文檔來處理。"
"這允許伺服器提供自己的基於 Web 的文檔。"
