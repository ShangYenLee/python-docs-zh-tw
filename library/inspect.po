# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-24 00:16+0000\n"
"PO-Revision-Date: 2022-10-16 06:59+0800\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.1.1\n"

#: ../../library/inspect.rst:2
#, fuzzy
msgid ":mod:`inspect` --- Inspect live objects"
msgstr ":mod:`inspect` --- 檢查活動物件"

#: ../../library/inspect.rst:10
msgid "**Source code:** :source:`Lib/inspect.py`"
msgstr "**原始碼：**\\ :source:`Lib/inspect.py`"

#: ../../library/inspect.rst:14
#, fuzzy
msgid ""
"The :mod:`inspect` module provides several useful functions to help get "
"information about live objects such as modules, classes, methods, functions, "
"tracebacks, frame objects, and code objects.  For example, it can help you "
"examine the contents of a class, retrieve the source code of a method, "
"extract and format the argument list for a function, or get all the "
"information you need to display a detailed traceback."
msgstr ""
":mod:`inspect` 模組提供了幾個有用的函式來幫助獲取有關活動物件的資訊，例如模組"
"、類、方法、函式、回溯、框架物件和程式碼物件。例如，它可以幫助您檢查類的內容"
"、檢索方法的源程式碼、提取和格式化函式的參數列表，或者獲取顯示詳細回溯所需的"
"所有資訊。"

#: ../../library/inspect.rst:21
#, fuzzy
msgid ""
"There are four main kinds of services provided by this module: type "
"checking, getting source code, inspecting classes and functions, and "
"examining the interpreter stack."
msgstr "該模組主要提供四種服務：型別檢查、獲取源程式碼、檢查類和函式以及檢查直譯器堆"
"疊。"

#: ../../library/inspect.rst:29
#, fuzzy
msgid "Types and members"
msgstr "型別和成員"

#: ../../library/inspect.rst:31
#, fuzzy
msgid ""
"The :func:`getmembers` function retrieves the members of an object such as a "
"class or module. The functions whose names begin with \"is\" are mainly "
"provided as convenient choices for the second argument to :func:"
"`getmembers`. They also help you determine when you can expect to find the "
"following special attributes (see :ref:`import-mod-attrs` for module "
"attributes):"
msgstr ""
":func:`getmembers` 函式檢索類或模組等物件的成員。名稱以 ``is``"
"開頭的函式主要作為 :func:`getmembers` 的第二個參數的方便選擇。它們還可以幫助"
"您確定何時可以找到以下特殊屬性（有關模組屬性，請參閱 :ref:`import-mod-"
"attrs`）："

#: ../../library/inspect.rst:41
#, fuzzy
msgid "Type"
msgstr "型別"

#: ../../library/inspect.rst:41
msgid "Attribute"
msgstr "屬性"

#: ../../library/inspect.rst:41
msgid "Description"
msgstr "描述"

#: ../../library/inspect.rst:43
#, fuzzy
msgid "class"
msgstr "班級"

#: ../../library/inspect.rst:43 ../../library/inspect.rst:53
#: ../../library/inspect.rst:71 ../../library/inspect.rst:233
msgid "__doc__"
msgstr "__doc__"

#: ../../library/inspect.rst:43 ../../library/inspect.rst:53
#: ../../library/inspect.rst:71 ../../library/inspect.rst:233
#, fuzzy
msgid "documentation string"
msgstr "文檔字串"

#: ../../library/inspect.rst:45 ../../library/inspect.rst:55
#: ../../library/inspect.rst:73 ../../library/inspect.rst:202
#: ../../library/inspect.rst:216 ../../library/inspect.rst:235
msgid "__name__"
msgstr "__name__"

#: ../../library/inspect.rst:45
#, fuzzy
msgid "name with which this class was defined"
msgstr "定義此類的名稱"

#: ../../library/inspect.rst:48 ../../library/inspect.rst:58
#: ../../library/inspect.rst:76 ../../library/inspect.rst:204
#: ../../library/inspect.rst:218 ../../library/inspect.rst:238
msgid "__qualname__"
msgstr "__qualname__"

#: ../../library/inspect.rst:48 ../../library/inspect.rst:58
#: ../../library/inspect.rst:76 ../../library/inspect.rst:204
#: ../../library/inspect.rst:218 ../../library/inspect.rst:238
#, fuzzy
msgid "qualified name"
msgstr "限定名稱"

#: ../../library/inspect.rst:50 ../../library/inspect.rst:68
#: ../../library/inspect.rst:101
msgid "__module__"
msgstr "__module__"

#: ../../library/inspect.rst:50
#, fuzzy
msgid "name of module in which this class was defined"
msgstr "定義此類的模組名稱"

#: ../../library/inspect.rst:53
#, fuzzy
msgid "method"
msgstr "方法"

#: ../../library/inspect.rst:55
#, fuzzy
msgid "name with which this method was defined"
msgstr "定義此方法的名稱"

#: ../../library/inspect.rst:60
msgid "__func__"
msgstr "__func__"

#: ../../library/inspect.rst:60
#, fuzzy
msgid "function object containing implementation of method"
msgstr "包含方法實作的函式物件"

#: ../../library/inspect.rst:64 ../../library/inspect.rst:240
msgid "__self__"
msgstr "__self__"

#: ../../library/inspect.rst:64
#, fuzzy
msgid "instance to which this method is bound, or ``None``"
msgstr "此方法綁定到的實例，或 ``None`` "

#: ../../library/inspect.rst:68
#, fuzzy
msgid "name of module in which this method was defined"
msgstr "定義此方法的模組的名稱"

#: ../../library/inspect.rst:71
msgid "function"
msgstr "函式"

#: ../../library/inspect.rst:73
#, fuzzy
msgid "name with which this function was defined"
msgstr "定義此函式的名稱"

#: ../../library/inspect.rst:78
msgid "__code__"
msgstr "__code__"

#: ../../library/inspect.rst:78
#, fuzzy
msgid "code object containing compiled function :term:`bytecode`"
msgstr "包含編譯函式的程式碼物件 :term:`bytecode`"

#: ../../library/inspect.rst:82
msgid "__defaults__"
msgstr "__defaults__"

#: ../../library/inspect.rst:82
#, fuzzy
msgid "tuple of any default values for positional or keyword parameters"
msgstr "位置或關鍵字參數的任何預設值的元組"

#: ../../library/inspect.rst:86
msgid "__kwdefaults__"
msgstr "__kwdefaults__"

#: ../../library/inspect.rst:86
#, fuzzy
msgid "mapping of any default values for keyword-only parameters"
msgstr "僅關鍵字參數的任何預設值的映射"

#: ../../library/inspect.rst:90
msgid "__globals__"
msgstr "__globals__"

#: ../../library/inspect.rst:90
#, fuzzy
msgid "global namespace in which this function was defined"
msgstr "定義此函式的全局命名空間"

#: ../../library/inspect.rst:93
msgid "__builtins__"
msgstr "__builtins__"

#: ../../library/inspect.rst:93
#, fuzzy
msgid "builtins namespace"
msgstr "內建命名空間"

#: ../../library/inspect.rst:95
msgid "__annotations__"
msgstr "__annotations__"

#: ../../library/inspect.rst:95
#, fuzzy
msgid ""
"mapping of parameters names to annotations; ``\"return\"`` key is reserved "
"for return annotations."
msgstr "參數名稱到註釋的映射； ``\"return\"`` 鍵保留用於回傳註釋。"

#: ../../library/inspect.rst:101
#, fuzzy
msgid "name of module in which this function was defined"
msgstr "定義此函式的模組的名稱"

#: ../../library/inspect.rst:104
#, fuzzy
msgid "traceback"
msgstr "追溯"

#: ../../library/inspect.rst:104
msgid "tb_frame"
msgstr "tb_frame"

#: ../../library/inspect.rst:104
#, fuzzy
msgid "frame object at this level"
msgstr "這一層的框架物件"

#: ../../library/inspect.rst:107
msgid "tb_lasti"
msgstr "tb_lasti"

#: ../../library/inspect.rst:107 ../../library/inspect.rst:129
#, fuzzy
msgid "index of last attempted instruction in bytecode"
msgstr "位元組碼中最後一條嘗試指令的索引"

#: ../../library/inspect.rst:110
msgid "tb_lineno"
msgstr "tb_lineno"

#: ../../library/inspect.rst:110 ../../library/inspect.rst:132
#, fuzzy
msgid "current line number in Python source code"
msgstr "Python 源程式碼中的當前行號"

#: ../../library/inspect.rst:113
msgid "tb_next"
msgstr "tb_next"

#: ../../library/inspect.rst:113
#, fuzzy
msgid "next inner traceback object (called by this level)"
msgstr "下一個內部回溯物件（由此級別呼叫）"

#: ../../library/inspect.rst:117 ../../library/inspect.rst:206
#: ../../library/inspect.rst:223
#, fuzzy
msgid "frame"
msgstr "框架"

#: ../../library/inspect.rst:117
msgid "f_back"
msgstr "f_back"

#: ../../library/inspect.rst:117
#, fuzzy
msgid "next outer frame object (this frame's caller)"
msgstr "下一個外部框架物件（此框架的呼叫者）"

#: ../../library/inspect.rst:120
msgid "f_builtins"
msgstr "f_builtins"

#: ../../library/inspect.rst:120
#, fuzzy
msgid "builtins namespace seen by this frame"
msgstr "此框架看到的內建命名空間"

#: ../../library/inspect.rst:123
msgid "f_code"
msgstr "f_code"

#: ../../library/inspect.rst:123
#, fuzzy
msgid "code object being executed in this frame"
msgstr "在此框架中執行的程式碼物件"

#: ../../library/inspect.rst:126
msgid "f_globals"
msgstr "f_globals"

#: ../../library/inspect.rst:126
#, fuzzy
msgid "global namespace seen by this frame"
msgstr "此框架看到的全局命名空間"

#: ../../library/inspect.rst:129
msgid "f_lasti"
msgstr "f_lasti"

#: ../../library/inspect.rst:132
msgid "f_lineno"
msgstr "f_lineno"

#: ../../library/inspect.rst:135
msgid "f_locals"
msgstr "f_locals"

#: ../../library/inspect.rst:135
#, fuzzy
msgid "local namespace seen by this frame"
msgstr "此框架看到的本地命名空間"

#: ../../library/inspect.rst:138
msgid "f_trace"
msgstr "f_trace"

#: ../../library/inspect.rst:138
#, fuzzy
msgid "tracing function for this frame, or ``None``"
msgstr "此幀的跟踪功能，或 ``None`` "

#: ../../library/inspect.rst:141 ../../library/inspect.rst:210
#: ../../library/inspect.rst:227
#, fuzzy
msgid "code"
msgstr "程式碼"

#: ../../library/inspect.rst:141
msgid "co_argcount"
msgstr "co_argcount"

#: ../../library/inspect.rst:141
#, fuzzy
msgid ""
"number of arguments (not including keyword only arguments, \\* or \\*\\* "
"args)"
msgstr "參數數量（不包括僅關鍵字參數、\\* 或 \\*\\* 參數）"

#: ../../library/inspect.rst:146
msgid "co_code"
msgstr "co_code"

#: ../../library/inspect.rst:146
#, fuzzy
msgid "string of raw compiled bytecode"
msgstr "原始編譯位元組碼字串"

#: ../../library/inspect.rst:149
msgid "co_cellvars"
msgstr "co_cellvars"

#: ../../library/inspect.rst:149
#, fuzzy
msgid "tuple of names of cell variables (referenced by containing scopes)"
msgstr "單元變數名稱的元組（由包含範圍引用）"

#: ../../library/inspect.rst:153
msgid "co_consts"
msgstr "co_consts"

#: ../../library/inspect.rst:153
#, fuzzy
msgid "tuple of constants used in the bytecode"
msgstr "位元組碼中使用的常數元組"

#: ../../library/inspect.rst:156
msgid "co_filename"
msgstr "co_filename"

#: ../../library/inspect.rst:156
#, fuzzy
msgid "name of file in which this code object was created"
msgstr "建立此程式碼物件的文件名"

#: ../../library/inspect.rst:160
msgid "co_firstlineno"
msgstr "co_firstlineno"

#: ../../library/inspect.rst:160
#, fuzzy
msgid "number of first line in Python source code"
msgstr "Python 源程式碼中的第一行數"

#: ../../library/inspect.rst:163
msgid "co_flags"
msgstr "co_flags"

#: ../../library/inspect.rst:163
#, fuzzy
msgid ""
"bitmap of ``CO_*`` flags, read more :ref:`here <inspect-module-co-flags>`"
msgstr "``CO_*`` 旗標的位圖，閱讀更多 :ref:`here <inspect-module-co-flags>`"

#: ../../library/inspect.rst:167
msgid "co_lnotab"
msgstr "co_lnotab"

#: ../../library/inspect.rst:167
#, fuzzy
msgid "encoded mapping of line numbers to bytecode indices"
msgstr "行號到位元組碼索引的編碼映射"

#: ../../library/inspect.rst:171
msgid "co_freevars"
msgstr "co_freevars"

#: ../../library/inspect.rst:171
#, fuzzy
msgid "tuple of names of free variables (referenced via a function's closure)"
msgstr "自由變數名稱的元組（通過函式的閉包引用）"

#: ../../library/inspect.rst:175
msgid "co_posonlyargcount"
msgstr "co_posonlyargcount"

#: ../../library/inspect.rst:175
#, fuzzy
msgid "number of positional only arguments"
msgstr "僅位置參數的數量"

#: ../../library/inspect.rst:178
msgid "co_kwonlyargcount"
msgstr "co_kwonlyargcount"

#: ../../library/inspect.rst:178
#, fuzzy
msgid "number of keyword only arguments (not including \\*\\* arg)"
msgstr "僅關鍵字參數的數量（不包括 \\*\\* arg）"

#: ../../library/inspect.rst:182
msgid "co_name"
msgstr "co_name"

#: ../../library/inspect.rst:182
#, fuzzy
msgid "name with which this code object was defined"
msgstr "定義此程式碼物件的名稱"

#: ../../library/inspect.rst:185
msgid "co_qualname"
msgstr "co_qualname"

#: ../../library/inspect.rst:185
#, fuzzy
msgid "fully qualified name with which this code object was defined"
msgstr "定義此程式碼物件的完全限定名稱"

#: ../../library/inspect.rst:189
msgid "co_names"
msgstr "co_names"

#: ../../library/inspect.rst:189
#, fuzzy
msgid "tuple of names other than arguments and function locals"
msgstr "除參數和函式局部變數之外的名稱元組"

#: ../../library/inspect.rst:193
msgid "co_nlocals"
msgstr "co_nlocals"

#: ../../library/inspect.rst:193
#, fuzzy
msgid "number of local variables"
msgstr "局部變數的數量"

#: ../../library/inspect.rst:195
msgid "co_stacksize"
msgstr "co_stacksize"

#: ../../library/inspect.rst:195
#, fuzzy
msgid "virtual machine stack space required"
msgstr "需要虛擬機堆疊空間"

#: ../../library/inspect.rst:198
msgid "co_varnames"
msgstr "co_varnames"

#: ../../library/inspect.rst:198
#, fuzzy
msgid "tuple of names of arguments and local variables"
msgstr "參數名稱和局部變數的元組"

#: ../../library/inspect.rst:202
#, fuzzy
msgid "generator"
msgstr "發電機"

#: ../../library/inspect.rst:202 ../../library/inspect.rst:216
#, fuzzy
msgid "name"
msgstr "姓名"

#: ../../library/inspect.rst:206
msgid "gi_frame"
msgstr "gi_frame"

#: ../../library/inspect.rst:208
msgid "gi_running"
msgstr "gi_running"

#: ../../library/inspect.rst:208
#, fuzzy
msgid "is the generator running?"
msgstr "發電機在運轉嗎？"

#: ../../library/inspect.rst:210
msgid "gi_code"
msgstr "gi_code"

#: ../../library/inspect.rst:212
msgid "gi_yieldfrom"
msgstr "gi_yieldfrom"

#: ../../library/inspect.rst:212
#, fuzzy
msgid "object being iterated by ``yield from``, or ``None``"
msgstr "對像被“yield from”或 ``None``疊代"

#: ../../library/inspect.rst:216
#, fuzzy
msgid "coroutine"
msgstr "協程"

#: ../../library/inspect.rst:220
msgid "cr_await"
msgstr "cr_await"

#: ../../library/inspect.rst:220
#, fuzzy
msgid "object being awaited on, or ``None``"
msgstr "正在等待的物件，或 ``None`` "

#: ../../library/inspect.rst:223
msgid "cr_frame"
msgstr "cr_frame"

#: ../../library/inspect.rst:225
msgid "cr_running"
msgstr "cr_running"

#: ../../library/inspect.rst:225
#, fuzzy
msgid "is the coroutine running?"
msgstr "協程在運行嗎？"

#: ../../library/inspect.rst:227
msgid "cr_code"
msgstr "cr_code"

#: ../../library/inspect.rst:229
msgid "cr_origin"
msgstr "cr_origin"

#: ../../library/inspect.rst:229
#, fuzzy
msgid "where coroutine was created, or ``None``. See |coroutine-origin-link|"
msgstr "建立協程的位置，或 ``None`` 。參見 |coroutine-origin-link|"

#: ../../library/inspect.rst:233
#, fuzzy
msgid "builtin"
msgstr "內建"

#: ../../library/inspect.rst:235
#, fuzzy
msgid "original name of this function or method"
msgstr "此函式或方法的原始名稱"

#: ../../library/inspect.rst:240
#, fuzzy
msgid "instance to which a method is bound, or ``None``"
msgstr "綁定方法的實例，或 ``None`` "

#: ../../library/inspect.rst:247
#, fuzzy
msgid "Add ``__qualname__`` and ``gi_yieldfrom`` attributes to generators."
msgstr "向生成器新增 ``__qualname__`` 和 ``gi_yieldfrom`` 屬性。"

#: ../../library/inspect.rst:249
#, fuzzy
msgid ""
"The ``__name__`` attribute of generators is now set from the function name, "
"instead of the code name, and it can now be modified."
msgstr "生成器的 ``__name__`` "
"屬性現在是從函式名而不是程式碼名設定的，現在可以修改它。"

#: ../../library/inspect.rst:254
#, fuzzy
msgid "Add ``cr_origin`` attribute to coroutines."
msgstr "將 ``cr_origin`` 屬性新增到協程。"

#: ../../library/inspect.rst:258
#, fuzzy
msgid "Add ``__builtins__`` attribute to functions."
msgstr "為函式新增 ``__builtins__`` 屬性。"

#: ../../library/inspect.rst:262
#, fuzzy
msgid ""
"Return all the members of an object in a list of ``(name, value)`` pairs "
"sorted by name. If the optional *predicate* argument—which will be called "
"with the ``value`` object of each member—is supplied, only members for which "
"the predicate returns a true value are included."
msgstr ""
"回傳按名稱排序的“（名稱，值）”對列表中物件的所有成員。如果提供了可選的 "
"*predicate* "
"參數（將使用每個成員的 ``value``物件呼叫），則僅包括謂詞回傳真值的成員。"

#: ../../library/inspect.rst:269
#, fuzzy
msgid ""
":func:`getmembers` will only return class attributes defined in the "
"metaclass when the argument is a class and those attributes have been listed "
"in the metaclass' custom :meth:`__dir__`."
msgstr ""
":func:`getmembers` 只會回傳在元類中定義的類屬性，"
"當參數是一個類並且這些屬性已在元類的自定義 :meth:`__dir__` 中列出時。"

#: ../../library/inspect.rst:276
#, fuzzy
msgid ""
"Return all the members of an object in a list of ``(name, value)`` pairs "
"sorted by name without triggering dynamic lookup via the descriptor "
"protocol, __getattr__ or __getattribute__. Optionally, only return members "
"that satisfy a given predicate."
msgstr ""
"回傳按名稱排序的“（名稱，值）”對列表中的物件的所有成員，而不會通過描述器協定 "
"__getattr__ 或 __getattribute__ "
"觸發動態查找。可選地，只回傳滿足給定謂詞的成員。"

#: ../../library/inspect.rst:283
#, fuzzy
msgid ""
":func:`getmembers_static` may not be able to retrieve all members that "
"getmembers can fetch (like dynamically created attributes) and may find "
"members that getmembers can't (like descriptors that raise AttributeError). "
"It can also return descriptor objects instead of instance members in some "
"cases."
msgstr ""
":func:`getmembers_static` 可能無法檢索 getmembers "
"可以獲取的所有成員（如動態建立的屬性），並且可能找到 getmembers "
"無法獲取的成員（如引發 AttributeError "
"的描述器）。在某些情況下，它還可以回傳描述器物件而不是實例成員。"

#: ../../library/inspect.rst:294
#, fuzzy
msgid ""
"Return the name of the module named by the file *path*, without including "
"the names of enclosing packages. The file extension is checked against all "
"of the entries in :func:`importlib.machinery.all_suffixes`. If it matches, "
"the final path component is returned with the extension removed. Otherwise, "
"``None`` is returned."
msgstr ""
"回傳由文件 *path* 命名的模組的名稱，不包括封閉包的名稱。針對 "
"importlib.machinery.all_suffixes 中的所有條目檢查文件擴充名。如果匹配，則回傳"
"最終路徑組件並刪除擴充名。否則，回傳 ``None`` 。"

#: ../../library/inspect.rst:300
#, fuzzy
msgid ""
"Note that this function *only* returns a meaningful name for actual Python "
"modules - paths that potentially refer to Python packages will still return "
"``None``."
msgstr "請注意，此函式*僅*為實際 Python 模組回傳一個有意義的名稱——可能引用 Python "
"包的路徑仍將回傳 ``None`` 。"

#: ../../library/inspect.rst:304
#, fuzzy
msgid "The function is based directly on :mod:`importlib`."
msgstr "該函式直接基於 :mod:`importlib`。"

#: ../../library/inspect.rst:310
#, fuzzy
msgid "Return ``True`` if the object is a module."
msgstr "如果對像是模組，則回傳 True。"

#: ../../library/inspect.rst:315
#, fuzzy
msgid ""
"Return ``True`` if the object is a class, whether built-in or created in "
"Python code."
msgstr "如果對像是一個類，無論是內建的還是在 Python 程式碼中建立的，都回傳 True。"

#: ../../library/inspect.rst:321
#, fuzzy
msgid "Return ``True`` if the object is a bound method written in Python."
msgstr "如果對像是用 Python 編寫的綁定方法，則回傳 ``True``。"

#: ../../library/inspect.rst:326
#, fuzzy
msgid ""
"Return ``True`` if the object is a Python function, which includes functions "
"created by a :term:`lambda` expression."
msgstr "如果對像是 Python 函式，則回傳 True，其中包括由 lambda 表達式建立的函式。"

#: ../../library/inspect.rst:332
#, fuzzy
msgid "Return ``True`` if the object is a Python generator function."
msgstr "如果對像是 Python 生成器函式，則回傳 True。"

#: ../../library/inspect.rst:334
#, fuzzy
msgid ""
"Functions wrapped in :func:`functools.partial` now return ``True`` if the "
"wrapped function is a Python generator function."
msgstr "如果包裝函式是 Python 生成器函式，則包裝在 :func:`functools.partial` "
"中的函式現在回傳 ``True``。"

#: ../../library/inspect.rst:341
#, fuzzy
msgid "Return ``True`` if the object is a generator."
msgstr "如果對像是生成器，則回傳 True。"

#: ../../library/inspect.rst:346
#, fuzzy
msgid ""
"Return ``True`` if the object is a :term:`coroutine function` (a function "
"defined with an :keyword:`async def` syntax)."
msgstr "如果對像是協程函式（使用 async def 語法定義的函式），則回傳 True。"

#: ../../library/inspect.rst:351
#, fuzzy
msgid ""
"Functions wrapped in :func:`functools.partial` now return ``True`` if the "
"wrapped function is a :term:`coroutine function`."
msgstr "如果包裝函式是協程函式，則包裝在 functools.partial 中的函式現在回傳 True。"

#: ../../library/inspect.rst:358
#, fuzzy
msgid ""
"Return ``True`` if the object is a :term:`coroutine` created by an :keyword:"
"`async def` function."
msgstr "如果對像是由 :keyword:`async def` 函式建立的協程，則回傳 ``True``。"

#: ../../library/inspect.rst:366
#, fuzzy
msgid ""
"Return ``True`` if the object can be used in :keyword:`await` expression."
msgstr "如果物件可以在 :keyword:`await` 表達式中使用，則回傳 ``True``。"

#: ../../library/inspect.rst:368
#, fuzzy
msgid ""
"Can also be used to distinguish generator-based coroutines from regular "
"generators::"
msgstr "也可用於區分基於生成器的協程與常規生成器::"

#: ../../library/inspect.rst:385
#, fuzzy
msgid ""
"Return ``True`` if the object is an :term:`asynchronous generator` function, "
"for example::"
msgstr "如果對像是非同步生成器函式，則回傳 True，例如："

#: ../../library/inspect.rst:396
#, fuzzy
msgid ""
"Functions wrapped in :func:`functools.partial` now return ``True`` if the "
"wrapped function is a :term:`asynchronous generator` function."
msgstr "如果包裝函式是非同步生成器函式，則包裝在 functools.partial 中的函式現在回傳 "
"True。"

#: ../../library/inspect.rst:403
#, fuzzy
msgid ""
"Return ``True`` if the object is an :term:`asynchronous generator iterator` "
"created by an :term:`asynchronous generator` function."
msgstr "如果對像是由非同步生成器函式建立的非同步生成器疊代器，則回傳 True。"

#: ../../library/inspect.rst:410
#, fuzzy
msgid "Return ``True`` if the object is a traceback."
msgstr "如果對像是回溯，則回傳 True。"

#: ../../library/inspect.rst:415
#, fuzzy
msgid "Return ``True`` if the object is a frame."
msgstr "如果對像是框架，則回傳 ``True``。"

#: ../../library/inspect.rst:420
#, fuzzy
msgid "Return ``True`` if the object is a code."
msgstr "如果對像是程式碼，則回傳 ``True``。"

#: ../../library/inspect.rst:425
#, fuzzy
msgid ""
"Return ``True`` if the object is a built-in function or a bound built-in "
"method."
msgstr "如果對像是內建函式或綁定的內建方法，則回傳 ``True``。"

#: ../../library/inspect.rst:430
#, fuzzy
msgid ""
"Return ``True`` if the type of object is a :class:`~types.MethodWrapperType`."
msgstr "如果物件的型別是 :class:`~types.MethodWrapperType`，則回傳 ``True``。"

#: ../../library/inspect.rst:432
#, fuzzy
msgid ""
"These are instances of :class:`~types.MethodWrapperType`, such as :meth:"
"`~object.__str__`, :meth:`~object.__eq__` and :meth:`~object.__repr__`."
msgstr ""
"這些是 :class:`~types.MethodWrapperType` 的實例，例如 :meth:`~object."
"__str__`、:meth:`~object.__eq__` 和 :meth:`~object.__repr__`。"

#: ../../library/inspect.rst:440
#, fuzzy
msgid ""
"Return ``True`` if the object is a user-defined or built-in function or "
"method."
msgstr "如果對像是使用者定義的或內建的函式或方法，則回傳 ``True``。"

#: ../../library/inspect.rst:445
#, fuzzy
msgid "Return ``True`` if the object is an abstract base class."
msgstr "如果對像是抽象基底類別，則回傳 True。"

#: ../../library/inspect.rst:450
#, fuzzy
msgid ""
"Return ``True`` if the object is a method descriptor, but not if :func:"
"`ismethod`, :func:`isclass`, :func:`isfunction` or :func:`isbuiltin` are "
"true."
msgstr ""
"如果對像是方法描述器，則回傳 True，但如果 ismethod、isclass、isfunction 或 "
"isbuiltin 為真，則不回傳。"

#: ../../library/inspect.rst:454
#, fuzzy
msgid ""
"This, for example, is true of ``int.__add__``.  An object passing this test "
"has a :meth:`~object.__get__` method but not a :meth:`~object.__set__` "
"method, but beyond that the set of attributes varies.  A :attr:`~definition."
"__name__` attribute is usually sensible, and :attr:`__doc__` often is."
msgstr ""
"例如，這對 ``int.__add__`` 是正確的。通過此測試的物件具有 :meth:`~object."
"__get__` 方法但沒有 :meth:`~object.__set__` "
"方法，但除此之外，屬性集會有所不同。 :attr:`~definition.__name__` "
"屬性通常是合理的，而 :attr:`__doc__` 通常是。"

#: ../../library/inspect.rst:460
#, fuzzy
msgid ""
"Methods implemented via descriptors that also pass one of the other tests "
"return ``False`` from the :func:`ismethoddescriptor` test, simply because "
"the other tests promise more -- you can, e.g., count on having the :attr:"
"`__func__` attribute (etc) when an object passes :func:`ismethod`."
msgstr ""
"通過也通過其他測試之一的描述器實作的方法從 ismethoddescriptor 測試回傳 "
"``False``，只是因為其他測試承諾更多 - 例如，您可以指望擁有 :attr:` __func__` "
"屬性（等）當物件通過 :func:`ismethod` 時。"

#: ../../library/inspect.rst:468
#, fuzzy
msgid "Return ``True`` if the object is a data descriptor."
msgstr "如果對像是資料描述器，則回傳 True。"

#: ../../library/inspect.rst:470
#, fuzzy
msgid ""
"Data descriptors have a :attr:`~object.__set__` or a :attr:`~object."
"__delete__` method. Examples are properties (defined in Python), getsets, "
"and members.  The latter two are defined in C and there are more specific "
"tests available for those types, which is robust across Python "
"implementations.  Typically, data descriptors will also have :attr:"
"`~definition.__name__` and :attr:`__doc__` attributes (properties, getsets, "
"and members have both of these attributes), but this is not guaranteed."
msgstr ""
"資料描述器有一個 :attr:`~object.__set__` 或 :attr:`~object.__delete__` "
"方法。示例是屬性（在 Python 中定義）、getsets 和成員。後兩者是用 C "
"定義的，並且有更具體的測試可用於這些型別，這在 Python 實作中是健壯的。通常，"
"資料描述器還將具有 :attr:`~definition.__name__` 和 :attr:`__doc__` "
"屬性（屬性、getsets 和成員都具有這兩個屬性），但這並不能保證。"

#: ../../library/inspect.rst:481
#, fuzzy
msgid "Return ``True`` if the object is a getset descriptor."
msgstr "如果對像是 getset 描述器，則回傳 True。"

#: ../../library/inspect.rst:485
#, fuzzy
msgid ""
"getsets are attributes defined in extension modules via :c:type:"
"`PyGetSetDef` structures.  For Python implementations without such types, "
"this method will always return ``False``."
msgstr ""
"getsets 是通過 PyGetSetDef 結構在擴充模組中定義的屬性。對於沒有此類型別的 "
"Python 實作，此方法將始終回傳 ``False``。"

#: ../../library/inspect.rst:492
#, fuzzy
msgid "Return ``True`` if the object is a member descriptor."
msgstr "如果對像是成員描述器，則回傳 True。"

#: ../../library/inspect.rst:496
#, fuzzy
msgid ""
"Member descriptors are attributes defined in extension modules via :c:type:"
"`PyMemberDef` structures.  For Python implementations without such types, "
"this method will always return ``False``."
msgstr "成員描述器是通過 PyMemberDef 結構在擴充模組中定義的屬性。對於沒有此類型別的 "
"Python 實作，此方法將始終回傳 ``False``。"

#: ../../library/inspect.rst:504
#, fuzzy
msgid "Retrieving source code"
msgstr "檢索源程式碼"

#: ../../library/inspect.rst:508
#, fuzzy
msgid ""
"Get the documentation string for an object, cleaned up with :func:"
"`cleandoc`. If the documentation string for an object is not provided and "
"the object is a class, a method, a property or a descriptor, retrieve the "
"documentation string from the inheritance hierarchy. Return ``None`` if the "
"documentation string is invalid or missing."
msgstr ""
"獲取物件的文檔字串，使用 :func:`cleandoc` 清理。如果未提供物件的文檔字串並且"
"對像是類、方法、屬性或描述器，則從繼承層次結構中檢索文檔字串。如果文檔字串無"
"效或丟失，則回傳 ``None`` 。"

#: ../../library/inspect.rst:514
#, fuzzy
msgid "Documentation strings are now inherited if not overridden."
msgstr "如果不覆蓋，文檔字串現在會被繼承。"

#: ../../library/inspect.rst:520
#, fuzzy
msgid ""
"Return in a single string any lines of comments immediately preceding the "
"object's source code (for a class, function, or method), or at the top of "
"the Python source file (if the object is a module).  If the object's source "
"code is unavailable, return ``None``.  This could happen if the object has "
"been defined in C or the interactive shell."
msgstr ""
"在單個字串中回傳對像源程式碼（對於類、函式或方法）之前或 Python 源文件頂部（"
"如果對像是模組）的任何註釋行。如果物件的源程式碼不可用，則回傳 ``None`` 。"
"如果對像已在 C 或交互式 shell 中定義，則可能會發生這種情況。"

#: ../../library/inspect.rst:529
#, fuzzy
msgid ""
"Return the name of the (text or binary) file in which an object was defined. "
"This will fail with a :exc:`TypeError` if the object is a built-in module, "
"class, or function."
msgstr "回傳定義物件的（文本或二進位）文件的名稱。如果對像是內建模組、類或函式，"
"這將失敗並顯示 :exc:`TypeError`。"

#: ../../library/inspect.rst:536
#, fuzzy
msgid ""
"Try to guess which module an object was defined in. Return ``None`` if the "
"module cannot be determined."
msgstr "嘗試猜測對像是在哪個模組中定義的。如果無法確定模組，則回傳 ``None``。"

#: ../../library/inspect.rst:542
#, fuzzy
msgid ""
"Return the name of the Python source file in which an object was defined or "
"``None`` if no way can be identified to get the source.  This will fail with "
"a :exc:`TypeError` if the object is a built-in module, class, or function."
msgstr ""
"回傳定義物件的 Python 源文件的名稱，如果無法識別獲取源的方法，則回傳 ``None``。"
"如果對像是內建模組、類或函式，這將失敗並顯示 :exc:`TypeError`。"

#: ../../library/inspect.rst:550
#, fuzzy
msgid ""
"Return a list of source lines and starting line number for an object. The "
"argument may be a module, class, method, function, traceback, frame, or code "
"object.  The source code is returned as a list of the lines corresponding to "
"the object and the line number indicates where in the original source file "
"the first line of code was found.  An :exc:`OSError` is raised if the source "
"code cannot be retrieved. A :exc:`TypeError` is raised if the object is a "
"built-in module, class, or function."
msgstr ""
"回傳物件的源行列表和起始行號。參數可以是模組、類、方法、函式、回溯、框架或程"
"式碼物件。源程式碼作為與對像對應的行列表回傳，行號指示在原始源文件中找到第一"
"行程式碼的位置。如果無法檢索源程式碼，則會引發 "
":exc:`OSError`。如果對像是內建模組、類或函式，則會引發 :exc:`TypeError`。"

#: ../../library/inspect.rst:559 ../../library/inspect.rst:573
#, fuzzy
msgid ""
":exc:`OSError` is raised instead of :exc:`IOError`, now an alias of the "
"former."
msgstr ":exc:`OSError` 被引發而不是 :exc:`IOError`，現在是前者的別名。"

#: ../../library/inspect.rst:566
#, fuzzy
msgid ""
"Return the text of the source code for an object. The argument may be a "
"module, class, method, function, traceback, frame, or code object.  The "
"source code is returned as a single string.  An :exc:`OSError` is raised if "
"the source code cannot be retrieved. A :exc:`TypeError` is raised if the "
"object is a built-in module, class, or function."
msgstr ""
"回傳對像源程式碼的文本。參數可以是模組、類、方法、函式、回溯、框架或程式碼物"
"件。源程式碼作為單個字串回傳。如果無法檢索源程式碼，則會引發 "
":exc:`OSError`。如果對像是內建模組、類或函式，則會引發 :exc:`TypeError`。"

#: ../../library/inspect.rst:580
#, fuzzy
msgid ""
"Clean up indentation from docstrings that are indented to line up with "
"blocks of code."
msgstr "從縮進的文檔字串中清除縮進以與程式碼塊對齊。"

#: ../../library/inspect.rst:583
#, fuzzy
msgid ""
"All leading whitespace is removed from the first line.  Any leading "
"whitespace that can be uniformly removed from the second line onwards is "
"removed.  Empty lines at the beginning and end are subsequently removed.  "
"Also, all tabs are expanded to spaces."
msgstr "從第一行中刪除所有前導空格。任何可以從第二行開始統一刪除的前導空格都將被刪除"
"。開頭和結尾的空行隨後被刪除。此外，所有選項卡都擴充為空格。"

#: ../../library/inspect.rst:592
#, fuzzy
msgid "Introspecting callables with the Signature object"
msgstr "使用 Signature 物件自省可呼叫物件"

#: ../../library/inspect.rst:596
#, fuzzy
msgid ""
"The Signature object represents the call signature of a callable object and "
"its return annotation.  To retrieve a Signature object, use the :func:"
"`signature` function."
msgstr ""
"Signature 物件表示可呼叫物件的呼叫簽名及其回傳註解。要檢索 Signature 物件，"
"請使用 :func:`signature` 函式。"

#: ../../library/inspect.rst:602
#, fuzzy
msgid "Return a :class:`Signature` object for the given ``callable``::"
msgstr "為給定的 ``callable`` 回傳一個 :class:`Signature` 物件："

#: ../../library/inspect.rst:619
#, fuzzy
msgid ""
"Accepts a wide range of Python callables, from plain functions and classes "
"to :func:`functools.partial` objects."
msgstr "接受範圍廣泛的 Python 可呼叫物件，從普通函式和類到 :func:`functools.partial` "
"物件。"

#: ../../library/inspect.rst:622
#, fuzzy
msgid ""
"For objects defined in modules using stringized annotations (``from "
"__future__ import annotations``), :func:`signature` will attempt to "
"automatically un-stringize the annotations using :func:`inspect."
"get_annotations()`.  The ``global``, ``locals``, and ``eval_str`` parameters "
"are passed into :func:`inspect.get_annotations()` when resolving the "
"annotations; see the documentation for :func:`inspect.get_annotations()` for "
"instructions on how to use these parameters."
msgstr ""
"對於使用字串化註釋（``from __future__ import "
"annotations``）在模組中定義的物件，:func:`signature` 將嘗試使用 :func:`inspect"
".get_annotations()` 自動取消註釋的字串化。 ``global``、``locals`` 和 "
"``eval_str`` 參數在解析註釋時被傳遞到 :func:`inspect."
"get_annotations()`；有關如何使用這些參數的說明，請參閱 :func:`inspect."
"get_annotations()` 的文檔。"

#: ../../library/inspect.rst:631
#, fuzzy
msgid ""
"Raises :exc:`ValueError` if no signature can be provided, and :exc:"
"`TypeError` if that type of object is not supported.  Also, if the "
"annotations are stringized, and ``eval_str`` is not false, the ``eval()`` "
"call(s) to un-stringize the annotations could potentially raise any kind of "
"exception."
msgstr ""
"如果無法提供簽名，則引發 :exc:`ValueError`，如果不支援該型別的物件，則引發 :e"
"xc:`TypeError`。此外，如果註釋被字串化，並且“eval_str”不為假，則對註釋進行反"
"字串化的“eval()”呼叫可能會引發任何型別的例外。"

#: ../../library/inspect.rst:637
#, fuzzy
msgid ""
"A slash(/) in the signature of a function denotes that the parameters prior "
"to it are positional-only. For more info, see :ref:`the FAQ entry on "
"positional-only parameters <faq-positional-only-arguments>`."
msgstr ""
"函式簽名中的斜杠 (/) "
"表示它之前的參數是位置參數。有關更多資訊，請參閱 :ref:`"
"僅位置參數的常見問題解答條目 <faq-positional-only-arguments>`。"

#: ../../library/inspect.rst:641
#, fuzzy
msgid ""
"``follow_wrapped`` parameter. Pass ``False`` to get a signature of "
"``callable`` specifically (``callable.__wrapped__`` will not be used to "
"unwrap decorated callables.)"
msgstr ""
"``follow_wrapped`` 參數。傳遞 ``False`` 以專門獲取 ``callable`` "
"的簽名（``callable.__wrapped__`` 將不會用於解包裝飾的可呼叫物件。）"

#: ../../library/inspect.rst:646
#, fuzzy
msgid "``globals``, ``locals``, and ``eval_str`` parameters."
msgstr "``globals``、``locals`` 和 ``eval_str`` 參數。"

#: ../../library/inspect.rst:651
#, fuzzy
msgid ""
"Some callables may not be introspectable in certain implementations of "
"Python.  For example, in CPython, some built-in functions defined in C "
"provide no metadata about their arguments."
msgstr ""
"在某些 Python 實作中，某些可呼叫物件可能無法自省。例如，在 CPython 中，"
"一些用 C 語言定義的內建函式不提供有關其參數的元資料。"

#: ../../library/inspect.rst:658
#, fuzzy
msgid ""
"A Signature object represents the call signature of a function and its "
"return annotation.  For each parameter accepted by the function it stores a :"
"class:`Parameter` object in its :attr:`parameters` collection."
msgstr ""
"Signature 物件表示函式的呼叫簽名及其回傳註釋。對於函式接受的每個參數，它在其 "
"parameters 集合中儲存一個 Parameter 物件。"

#: ../../library/inspect.rst:662
#, fuzzy
msgid ""
"The optional *parameters* argument is a sequence of :class:`Parameter` "
"objects, which is validated to check that there are no parameters with "
"duplicate names, and that the parameters are in the right order, i.e. "
"positional-only first, then positional-or-keyword, and that parameters with "
"defaults follow parameters without defaults."
msgstr ""
"可選的 *parameters* 參數是一系列 :class:`Parameter` 物件，它被驗證以檢查沒有"
"重複名稱的參數，並且參數的順序正確，即首先是位置，然後是位置-or-關鍵字，帶預"
"設值的參數跟在不帶預設值的參數後面。"

#: ../../library/inspect.rst:668
#, fuzzy
msgid ""
"The optional *return_annotation* argument, can be an arbitrary Python "
"object, is the \"return\" annotation of the callable."
msgstr "可選的 *return_annotation* 參數，可以是任意 Python "
"物件，是可呼叫物件的“回傳”註釋。"

#: ../../library/inspect.rst:671
#, fuzzy
msgid ""
"Signature objects are *immutable*.  Use :meth:`Signature.replace` to make a "
"modified copy."
msgstr "簽名對像是*不可變的*。使用 :meth:`Signature.replace` 製作修改後的副本。"

#: ../../library/inspect.rst:674
#, fuzzy
msgid "Signature objects are picklable and :term:`hashable`."
msgstr "簽名對像是可醃製的和 :term:`hashable`。"

#: ../../library/inspect.rst:679
#, fuzzy
msgid "A special class-level marker to specify absence of a return annotation."
msgstr "一個特殊的類級標記，用於指定缺少回傳註釋。"

#: ../../library/inspect.rst:683
#, fuzzy
msgid ""
"An ordered mapping of parameters' names to the corresponding :class:"
"`Parameter` objects.  Parameters appear in strict definition order, "
"including keyword-only parameters."
msgstr "參數名稱到相應 :class:`Parameter` "
"物件的有序映射。參數以嚴格的定義順序出現，包括僅限關鍵字的參數。"

#: ../../library/inspect.rst:687 ../../library/inspect.rst:1012
#, fuzzy
msgid ""
"Python only explicitly guaranteed that it preserved the declaration order of "
"keyword-only parameters as of version 3.7, although in practice this order "
"had always been preserved in Python 3."
msgstr "Python 只明確保證它保留了 3.7 版中僅關鍵字參數的聲明順序，"
"儘管實際上這個順序一直保留在 Python 3 中。"

#: ../../library/inspect.rst:694
#, fuzzy
msgid ""
"The \"return\" annotation for the callable.  If the callable has no "
"\"return\" annotation, this attribute is set to :attr:`Signature.empty`."
msgstr "可呼叫物件的“回傳”註解。如果可呼叫對像沒有“回傳”註釋，則此屬性設定為 :attr:`S"
"ignature.empty`。"

#: ../../library/inspect.rst:699
#, fuzzy
msgid ""
"Create a mapping from positional and keyword arguments to parameters. "
"Returns :class:`BoundArguments` if ``*args`` and ``**kwargs`` match the "
"signature, or raises a :exc:`TypeError`."
msgstr ""
"建立從位置參數和關鍵字參數到參數的映射。如果 ``*args`` 和 `**kwargs`` "
"與簽名匹配，則回傳 :class:`BoundArguments`，或者引發 :exc:`TypeError`。"

#: ../../library/inspect.rst:705
#, fuzzy
msgid ""
"Works the same way as :meth:`Signature.bind`, but allows the omission of "
"some required arguments (mimics :func:`functools.partial` behavior.) "
"Returns :class:`BoundArguments`, or raises a :exc:`TypeError` if the passed "
"arguments do not match the signature."
msgstr ""
"與 :meth:`Signature.bind` 的工作方式相同，但允許省略一些必需的參數（模仿 "
":func:`functools.partial` 行為。）回傳 :class:`BoundArguments`，或引發 :exc:`"
" TypeError` 如果傳遞的參數與簽名不匹配。"

#: ../../library/inspect.rst:712
#, fuzzy
msgid ""
"Create a new Signature instance based on the instance replace was invoked "
"on.  It is possible to pass different ``parameters`` and/or "
"``return_annotation`` to override the corresponding properties of the base "
"signature.  To remove return_annotation from the copied Signature, pass in :"
"attr:`Signature.empty`."
msgstr ""
"根據呼叫實例替換建立一個新的 Signature "
"實例。可以傳遞不同的“參數”和/或“return_annotation”來覆蓋基本簽名的相應屬性。"
"要從復制的簽名中刪除 return_annotation，請傳入 :attr:`Signature.empty`。"

#: ../../library/inspect.rst:729
#, fuzzy
msgid ""
"Return a :class:`Signature` (or its subclass) object for a given callable "
"``obj``.  Pass ``follow_wrapped=False`` to get a signature of ``obj`` "
"without unwrapping its ``__wrapped__`` chain. ``globalns`` and ``localns`` "
"will be used as the namespaces when resolving annotations."
msgstr ""
"為給定的可呼叫 obj 回傳一個 Signature（或其子類別）物件。傳遞 "
"``follow_wrapped=False`` 以獲取 ``obj`` 的簽名，而無需展開其 ``__wrapped__`` "
"鏈。 ``globalns`` 和 ``localns`` 將在解析註釋時用作命名空間。"

#: ../../library/inspect.rst:734
#, fuzzy
msgid "This method simplifies subclassing of :class:`Signature`::"
msgstr "此方法簡化了 :class:`Signature`:: 的子類別化："

#: ../../library/inspect.rst:743
#, fuzzy
msgid "``globalns`` and ``localns`` parameters."
msgstr "``globalns`` 和 ``localns`` 參數。"

#: ../../library/inspect.rst:749
#, fuzzy
msgid ""
"Parameter objects are *immutable*.  Instead of modifying a Parameter object, "
"you can use :meth:`Parameter.replace` to create a modified copy."
msgstr ""
"參數對像是*不可變的*。您可以使用 :meth:`Parameter.replace` 建立修改後的副本，"
"而不是修改 Parameter 物件。"

#: ../../library/inspect.rst:752
#, fuzzy
msgid "Parameter objects are picklable and :term:`hashable`."
msgstr "參數對像是 picklable 和 :term:`hashable`。"

#: ../../library/inspect.rst:757
#, fuzzy
msgid ""
"A special class-level marker to specify absence of default values and "
"annotations."
msgstr "一個特殊的類級別標記，用於指定缺少預設值和註釋。"

#: ../../library/inspect.rst:762
#, fuzzy
msgid ""
"The name of the parameter as a string.  The name must be a valid Python "
"identifier."
msgstr "作為字串的參數名稱。該名稱必須是有效的 Python 標識符。"

#: ../../library/inspect.rst:767
#, fuzzy
msgid ""
"CPython generates implicit parameter names of the form ``.0`` on the code "
"objects used to implement comprehensions and generator expressions."
msgstr "CPython 在用於實作理解和生成器表達式的程式碼對像上生成形式為 .0 "
"的隱式參數名稱。"

#: ../../library/inspect.rst:771
#, fuzzy
msgid ""
"These parameter names are exposed by this module as names like ``implicit0``."
msgstr "這些參數名稱由該模組公開為類似 ``implicit0`` 的名稱。"

#: ../../library/inspect.rst:777
#, fuzzy
msgid ""
"The default value for the parameter.  If the parameter has no default value, "
"this attribute is set to :attr:`Parameter.empty`."
msgstr "參數的預設值。如果參數沒有預設值，則此屬性設定為 :attr:`Parameter.empty`。"

#: ../../library/inspect.rst:782
#, fuzzy
msgid ""
"The annotation for the parameter.  If the parameter has no annotation, this "
"attribute is set to :attr:`Parameter.empty`."
msgstr "參數的註解。如果參數沒有註釋，則此屬性設定為 :attr:`Parameter.empty`。"

#: ../../library/inspect.rst:787
#, fuzzy
msgid ""
"Describes how argument values are bound to the parameter.  The possible "
"values are accessible via :class:`Parameter` (like ``Parameter."
"KEYWORD_ONLY``), and support comparison and ordering, in the following order:"
msgstr ""
"描述參數值如何綁定到參數。可以通過 :class:`Parameter`（如 ``Parameter."
"KEYWORD_ONLY``）訪問可能的值，並支援比較和排序，順序如下："

#: ../../library/inspect.rst:794
msgid "Name"
msgstr "名稱"

#: ../../library/inspect.rst:794
msgid "Meaning"
msgstr "意義"

#: ../../library/inspect.rst:796
msgid "*POSITIONAL_ONLY*"
msgstr "*POSITIONAL_ONLY*"

#: ../../library/inspect.rst:796
#, fuzzy
msgid ""
"Value must be supplied as a positional argument. Positional only parameters "
"are those which appear before a ``/`` entry (if present) in a Python "
"function definition."
msgstr "值必須作為位置參數提供。僅位置參數是那些出現在 Python "
"函式定義中的 ``/``條目（如果存在）之前的參數。"

#: ../../library/inspect.rst:801
msgid "*POSITIONAL_OR_KEYWORD*"
msgstr "*POSITIONAL_OR_KEYWORD*"

#: ../../library/inspect.rst:801
#, fuzzy
msgid ""
"Value may be supplied as either a keyword or positional argument (this is "
"the standard binding behaviour for functions implemented in Python.)"
msgstr "值可以作為關鍵字或位置參數提供（這是 Python 中實作的函式的標準綁定行為。）"

#: ../../library/inspect.rst:806
msgid "*VAR_POSITIONAL*"
msgstr "*VAR_POSITIONAL*"

#: ../../library/inspect.rst:806
#, fuzzy
msgid ""
"A tuple of positional arguments that aren't bound to any other parameter. "
"This corresponds to a ``*args`` parameter in a Python function definition."
msgstr "不綁定到任何其他參數的位置參數的元組。這對應於 Python "
"函式定義中的“*args”參數。"

#: ../../library/inspect.rst:811
msgid "*KEYWORD_ONLY*"
msgstr "*KEYWORD_ONLY*"

#: ../../library/inspect.rst:811
#, fuzzy
msgid ""
"Value must be supplied as a keyword argument. Keyword only parameters are "
"those which appear after a ``*`` or ``*args`` entry in a Python function "
"definition."
msgstr "值必須作為關鍵字參數提供。僅關鍵字參數是那些出現在 Python "
"函式定義中的 ``*``或“*args”條目之後的參數。"

#: ../../library/inspect.rst:816
msgid "*VAR_KEYWORD*"
msgstr "*VAR_KEYWORD*"

#: ../../library/inspect.rst:816
#, fuzzy
msgid ""
"A dict of keyword arguments that aren't bound to any other parameter. This "
"corresponds to a ``**kwargs`` parameter in a Python function definition."
msgstr "不綁定到任何其他參數的關鍵字參數的字典。這對應於 Python 函式定義中的 "
"``**kwargs`` 參數。"

#: ../../library/inspect.rst:822
#, fuzzy
msgid "Example: print all keyword-only arguments without default values::"
msgstr "示例：印出所有沒有預設值的僅關鍵字參數::"

#: ../../library/inspect.rst:836
#, fuzzy
msgid "Describes a enum value of Parameter.kind."
msgstr "描述 Parameter.kind 的枚舉值。"

#: ../../library/inspect.rst:840
#, fuzzy
msgid "Example: print all descriptions of arguments::"
msgstr "示例：印出參數的所有描述::"

#: ../../library/inspect.rst:855
#, fuzzy
msgid ""
"Create a new Parameter instance based on the instance replaced was invoked "
"on.  To override a :class:`Parameter` attribute, pass the corresponding "
"argument.  To remove a default value or/and an annotation from a Parameter, "
"pass :attr:`Parameter.empty`."
msgstr ""
"根據呼叫替換的實例建立一個新的參數實例。要覆蓋 :class:`Parameter` 屬性，請傳"
"遞相應的參數。要從參數中刪除預設值或/和註釋，請傳遞 :attr:`Parameter.empty`。"

#: ../../library/inspect.rst:873
#, fuzzy
msgid ""
"In Python 3.3 Parameter objects were allowed to have ``name`` set to "
"``None`` if their ``kind`` was set to ``POSITIONAL_ONLY``. This is no longer "
"permitted."
msgstr "在 Python 3.3 中，如果參數物件的“種類”設定為“POSITIONAL_ONLY”，則允許將“名稱”"
"設定為 ``None`` 。這不再被允許。"

#: ../../library/inspect.rst:880
#, fuzzy
msgid ""
"Result of a :meth:`Signature.bind` or :meth:`Signature.bind_partial` call. "
"Holds the mapping of arguments to the function's parameters."
msgstr ""
":meth:`Signature.bind` 或 :meth:`Signature.bind_partial` "
"呼叫的結果。保存參數到函式參數的映射。"

#: ../../library/inspect.rst:885
#, fuzzy
msgid ""
"A mutable mapping of parameters' names to arguments' values. Contains only "
"explicitly bound arguments.  Changes in :attr:`arguments` will reflect in :"
"attr:`args` and :attr:`kwargs`."
msgstr ""
"參數名稱到參數值的可變映射。僅包含明確綁定的參數。 :attr:`arguments` "
"中的更改將反映在 :attr:`args` 和 :attr:`kwargs` 中。"

#: ../../library/inspect.rst:889
#, fuzzy
msgid ""
"Should be used in conjunction with :attr:`Signature.parameters` for any "
"argument processing purposes."
msgstr "應與 :attr:`Signature.parameters` 一起用於任何參數處理目的。"

#: ../../library/inspect.rst:894
#, fuzzy
msgid ""
"Arguments for which :meth:`Signature.bind` or :meth:`Signature.bind_partial` "
"relied on a default value are skipped. However, if needed, use :meth:"
"`BoundArguments.apply_defaults` to add them."
msgstr ""
":meth:`Signature.bind` 或 :meth:`Signature.bind_partial` "
"依賴於預設值的參數將被跳過。但是，如果需要，請使用 "
"BoundArguments.apply_defaults 新增它們。"

#: ../../library/inspect.rst:899
#, fuzzy
msgid ""
":attr:`arguments` is now of type :class:`dict`. Formerly, it was of type :"
"class:`collections.OrderedDict`."
msgstr ""
":attr:`arguments` 現在是 :class:`dict` 型別。以前，它是 :class:`collections."
"OrderedDict` 型別。"

#: ../../library/inspect.rst:905
#, fuzzy
msgid ""
"A tuple of positional arguments values.  Dynamically computed from the :attr:"
"`arguments` attribute."
msgstr "位置參數值的元組。從 :attr:`arguments` 屬性動態計算。"

#: ../../library/inspect.rst:910
#, fuzzy
msgid ""
"A dict of keyword arguments values.  Dynamically computed from the :attr:"
"`arguments` attribute."
msgstr "關鍵字參數值的字典。從 :attr:`arguments` 屬性動態計算。"

#: ../../library/inspect.rst:915
#, fuzzy
msgid "A reference to the parent :class:`Signature` object."
msgstr "對父 Signature 物件的引用。"

#: ../../library/inspect.rst:919
#, fuzzy
msgid "Set default values for missing arguments."
msgstr "為缺少的參數設定預設值。"

#: ../../library/inspect.rst:921
#, fuzzy
msgid ""
"For variable-positional arguments (``*args``) the default is an empty tuple."
msgstr "對於可變位置參數（``*args``），預設值是一個空元組。"

#: ../../library/inspect.rst:924
#, fuzzy
msgid ""
"For variable-keyword arguments (``**kwargs``) the default is an empty dict."
msgstr "對於可變關鍵字參數（``**kwargs``），預設值為空字典。"

#: ../../library/inspect.rst:937
#, fuzzy
msgid ""
"The :attr:`args` and :attr:`kwargs` properties can be used to invoke "
"functions::"
msgstr ":attr:`args` 和 :attr:`kwargs` 屬性可用於呼叫函式::"

#: ../../library/inspect.rst:950
#, fuzzy
msgid ":pep:`362` - Function Signature Object."
msgstr ":pep:`362` - 函式簽名物件。"

#: ../../library/inspect.rst:951
#, fuzzy
msgid "The detailed specification, implementation details and examples."
msgstr "詳細規範、實施細節和示例。"

#: ../../library/inspect.rst:957
#, fuzzy
msgid "Classes and functions"
msgstr "類和函式"

#: ../../library/inspect.rst:961
#, fuzzy
msgid ""
"Arrange the given list of classes into a hierarchy of nested lists. Where a "
"nested list appears, it contains classes derived from the class whose entry "
"immediately precedes the list.  Each entry is a 2-tuple containing a class "
"and a tuple of its base classes.  If the *unique* argument is true, exactly "
"one entry appears in the returned structure for each class in the given "
"list.  Otherwise, classes using multiple inheritance and their descendants "
"will appear multiple times."
msgstr ""
"將給定的類列表排列成嵌套列表的層次結構。在出現嵌套列表的地方，它包含從其條目"
"緊接在列表之前的類派生的類。每個條目都是一個二元組，包含一個類及其基底類別的"
"一個元組。如果 *unique* 參數為真，則對於給定列表中的每個類，回傳的結構中只會"
"出現一個條目。否則，使用多重繼承的類及其後代將出現多次。"

#: ../../library/inspect.rst:972
#, fuzzy
msgid ""
"Get the names and default values of a Python function's parameters.  A :term:"
"`named tuple` is returned:"
msgstr "獲取 Python 函式參數的名稱和預設值。一個 :term:`named tuple` 被回傳："

#: ../../library/inspect.rst:975
#, fuzzy
msgid ""
"``FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, "
"annotations)``"
msgstr ""
"``FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, "
"annotations)``"

#: ../../library/inspect.rst:978
#, fuzzy
msgid ""
"*args* is a list of the positional parameter names. *varargs* is the name of "
"the ``*`` parameter or ``None`` if arbitrary positional arguments are not "
"accepted. *varkw* is the name of the ``**`` parameter or ``None`` if "
"arbitrary keyword arguments are not accepted. *defaults* is an *n*-tuple of "
"default argument values corresponding to the last *n* positional parameters, "
"or ``None`` if there are no such defaults defined. *kwonlyargs* is a list of "
"keyword-only parameter names in declaration order. *kwonlydefaults* is a "
"dictionary mapping parameter names from *kwonlyargs* to the default values "
"used if no argument is supplied. *annotations* is a dictionary mapping "
"parameter names to annotations. The special key ``\"return\"`` is used to "
"report the function return value annotation (if any)."
msgstr ""
"*args* 是位置參數名稱的列表。 *varargs* "
"是 ``*``參數的名稱，如果不接受任意位置參數，則為 ``None``。 *varkw* 是 ``**`` "
"參數的名稱，如果不接受任意關鍵字參數，則為 ``None``。 *defaults* 是一個 *n* "
"元組的預設參數值，對應於最後一個 *n* 位置參數，如果沒有定義這樣的預設值，"
"則為 ``None``。 *kwonlyargs* 是按聲明順序排列的僅限關鍵字的參數名稱列表。 "
"*kwonlydefaults* 是一個字典，將參數名稱從 *kwonlyargs* "
"映射到未提供參數時使用的預設值。 *annotations* 是將參數名稱映射到註釋的字典。"
"特殊鍵 ``\"return\"`` 用於報告函式回傳值註釋（如果有）。"

#: ../../library/inspect.rst:993
#, fuzzy
msgid ""
"Note that :func:`signature` and :ref:`Signature Object <inspect-signature-"
"object>` provide the recommended API for callable introspection, and support "
"additional behaviours (like positional-only arguments) that are sometimes "
"encountered in extension module APIs. This function is retained primarily "
"for use in code that needs to maintain compatibility with the Python 2 "
"``inspect`` module API."
msgstr ""
"請注意 :func:`signature` 和 :ref:`Signature Object <inspect-signature-"
"object>` 為可呼叫內省提供了推薦的 API，並支援擴充模組 API "
"中有時會遇到的其他行為（如僅位置參數） .保留此功能主要是為了在需要保持與 "
"Python 2 ``inspect`` 模組 API 的相容性的程式碼中使用。"

#: ../../library/inspect.rst:1000
#, fuzzy
msgid ""
"This function is now based on :func:`signature`, but still ignores "
"``__wrapped__`` attributes and includes the already bound first parameter in "
"the signature output for bound methods."
msgstr ""
"此函式現在基於 :func:`signature`，但仍忽略 ``__wrapped__`` "
"屬性，並在綁定方法的簽名輸出中包含已綁定的第一個參數。"

#: ../../library/inspect.rst:1005
#, fuzzy
msgid ""
"This method was previously documented as deprecated in favour of :func:"
"`signature` in Python 3.5, but that decision has been reversed in order to "
"restore a clearly supported standard interface for single-source Python 2/3 "
"code migrating away from the legacy :func:`getargspec` API."
msgstr ""
"此方法之前被記錄為在 Python 3.5 中棄用，支援 "
":func:`signature`，但該決定已被撤銷，以便為從遺留遷移的單源 Python 2/3 "
"程式碼恢復明確支援的標準介面 :func:`getargspec` API。"

#: ../../library/inspect.rst:1020
#, fuzzy
msgid ""
"Get information about arguments passed into a particular frame.  A :term:"
"`named tuple` ``ArgInfo(args, varargs, keywords, locals)`` is returned. "
"*args* is a list of the argument names.  *varargs* and *keywords* are the "
"names of the ``*`` and ``**`` arguments or ``None``.  *locals* is the locals "
"dictionary of the given frame."
msgstr ""
"獲取有關傳遞到特定框架的參數的資訊。一個 :term:`命名元組``ArgInfo(args, "
"varargs, keywords, locals)`` 被回傳。 *args* 是參數名稱的列表。 *varargs* 和 "
"*keywords* 是 ``*`` 和 ``**`` 參數的名稱或 ``None``。 *locals* "
"是給定框架的本地字典。"

#: ../../library/inspect.rst:1027 ../../library/inspect.rst:1037
#, fuzzy
msgid "This function was inadvertently marked as deprecated in Python 3.5."
msgstr "此函式在 Python 3.5 中被無意中標記為已棄用。"

#: ../../library/inspect.rst:1032
#, fuzzy
msgid ""
"Format a pretty argument spec from the four values returned by :func:"
"`getargvalues`.  The format\\* arguments are the corresponding optional "
"formatting functions that are called to turn names and values into strings."
msgstr ""
"從 getargvalues 回傳的四個值格式化一個漂亮的參數規範。 format\\* "
"參數是相應的可選格式化函式，呼叫這些函式可將名稱和值轉換為字串。"

#: ../../library/inspect.rst:1042
#, fuzzy
msgid ""
"Return a tuple of class cls's base classes, including cls, in method "
"resolution order.  No class appears more than once in this tuple. Note that "
"the method resolution order depends on cls's type.  Unless a very peculiar "
"user-defined metatype is in use, cls will be the first element of the tuple."
msgstr ""
"按方法解析順序回傳類 cls 的基底類別（包括 "
"cls）的元組。在這個元組中沒有類出現超過一次。請注意，方法解析順序取決於 cls "
"的型別。除非使用非常特殊的使用者定義元型別，否則 cls 將是元組的第一個元素。"

#: ../../library/inspect.rst:1050
#, fuzzy
msgid ""
"Bind the *args* and *kwds* to the argument names of the Python function or "
"method *func*, as if it was called with them. For bound methods, bind also "
"the first argument (typically named ``self``) to the associated instance. A "
"dict is returned, mapping the argument names (including the names of the "
"``*`` and ``**`` arguments, if any) to their values from *args* and *kwds*. "
"In case of invoking *func* incorrectly, i.e. whenever ``func(*args, "
"**kwds)`` would raise an exception because of incompatible signature, an "
"exception of the same type and the same or similar message is raised. For "
"example::"
msgstr ""
"將 *args* 和 *kwds* 綁定到 Python 函式或方法 *func* 的參數名稱，就好像它是用"
"它們呼叫的一樣。對於綁定方法，還將第一個參數（通常命名為 ``self``）綁定到關聯的"
"實例。回傳一個字典，將參數名稱（包括 ``*`` 和 ``**`` 參數的名稱，如果有的話）"
"映射到它們在 *args* 和 *kwds* 中的值。在錯誤呼叫 *func* "
"的情況下，即每當``func(*args, **kwds)`` "
"由於簽名不相容而引發例外時，將引發相同型別和相同或相似消息的例外。例如：："

#: ../../library/inspect.rst:1073
#, fuzzy
msgid "Use :meth:`Signature.bind` and :meth:`Signature.bind_partial` instead."
msgstr "使用 :meth:`Signature.bind` 和 :meth:`Signature.bind_partial` 代替。"

#: ../../library/inspect.rst:1079
#, fuzzy
msgid ""
"Get the mapping of external name references in a Python function or method "
"*func* to their current values. A :term:`named tuple` "
"``ClosureVars(nonlocals, globals, builtins, unbound)`` is returned. "
"*nonlocals* maps referenced names to lexical closure variables, *globals* to "
"the function's module globals and *builtins* to the builtins visible from "
"the function body. *unbound* is the set of names referenced in the function "
"that could not be resolved at all given the current module globals and "
"builtins."
msgstr ""
"獲取 Python 函式或方法 *func* "
"中的外部名稱引用到它們當前值的映射。一個 :term:`命名元組``ClosureVars("
"nonlocals, globals, builtins, unbound)`` 被回傳。 *nonlocals* "
"將引用名稱映射到詞法閉包變數，*globals* 映射到函式的模組全局變數，*builtins* "
"映射到從函式體可見的內建函式。 *unbound* 是函式中引用的一組名稱，在給定當前模"
"組全局變數和內建函式的情況下根本無法解析。"

#: ../../library/inspect.rst:1088
#, fuzzy
msgid ""
":exc:`TypeError` is raised if *func* is not a Python function or method."
msgstr "如果 *func* 不是 Python 函式或方法，則會引發 :exc:`TypeError`。"

#: ../../library/inspect.rst:1095
#, fuzzy
msgid ""
"Get the object wrapped by *func*. It follows the chain of :attr:"
"`__wrapped__` attributes returning the last object in the chain."
msgstr "獲取由 *func* 包裹的物件。它遵循 :attr:`__wrapped__` "
"屬性鏈回傳鏈中的最後一個物件。"

#: ../../library/inspect.rst:1098
#, fuzzy
msgid ""
"*stop* is an optional callback accepting an object in the wrapper chain as "
"its sole argument that allows the unwrapping to be terminated early if the "
"callback returns a true value. If the callback never returns a true value, "
"the last object in the chain is returned as usual. For example, :func:"
"`signature` uses this to stop unwrapping if any object in the chain has a "
"``__signature__`` attribute defined."
msgstr ""
"*stop* 是一個可選的回呼，接受包裝器鏈中的對像作為其唯一參數，如果回呼回傳真值"
"，則允許提前終止解包。如果回呼從不回傳真值，則照常回傳鏈中的最後一個物件。例"
"如，如果鏈中的任何物件定義了 __signature__ 屬性，則 :func:`signature` "
"使用它來停止展開。"

#: ../../library/inspect.rst:1105
#, fuzzy
msgid ":exc:`ValueError` is raised if a cycle is encountered."
msgstr ":exc:`ValueError` 如果遇到循環則被引發。"

#: ../../library/inspect.rst:1112
#, fuzzy
msgid "Compute the annotations dict for an object."
msgstr "計算物件的註解字典。"

#: ../../library/inspect.rst:1114
#, fuzzy
msgid ""
"``obj`` may be a callable, class, or module. Passing in an object of any "
"other type raises :exc:`TypeError`."
msgstr "``obj`` 可以是可呼叫物件、類或模組。傳入任何其他型別的物件會引發 "
":exc:`TypeError`。"

#: ../../library/inspect.rst:1117
#, fuzzy
msgid ""
"Returns a dict.  ``get_annotations()`` returns a new dict every time it's "
"called; calling it twice on the same object will return two different but "
"equivalent dicts."
msgstr "回傳字典。 ``get_annotations()`` 每次呼叫都會回傳一個新的字典；在同一個對像上"
"呼叫它兩次將回傳兩個不同但等效的字典。"

#: ../../library/inspect.rst:1121
#, fuzzy
msgid "This function handles several details for you:"
msgstr "此函式為您處理幾個細節："

#: ../../library/inspect.rst:1123
#, fuzzy
msgid ""
"If ``eval_str`` is true, values of type ``str`` will be un-stringized using :"
"func:`eval()`.  This is intended for use with stringized annotations (``from "
"__future__ import annotations``)."
msgstr ""
"如果 ``eval_str`` 為真，則型別 ``str`` 的值將使用 eval() "
"取消字串化。這旨在與字串化註釋一起使用（``from __future__ import "
"annotations``）。"

#: ../../library/inspect.rst:1127
#, fuzzy
msgid ""
"If ``obj`` doesn't have an annotations dict, returns an empty dict.  "
"(Functions and methods always have an annotations dict; classes, modules, "
"and other types of callables may not.)"
msgstr "如果 ``obj`` 沒有註釋字典，則回傳一個空字典。 "
"（函式和方法總是有註釋字典；類、模組和其他型別的可呼叫物件可能沒有。）"

#: ../../library/inspect.rst:1131
#, fuzzy
msgid ""
"Ignores inherited annotations on classes.  If a class doesn't have its own "
"annotations dict, returns an empty dict."
msgstr "忽略類上的繼承註解。如果一個類沒有自己的註釋字典，則回傳一個空字典。"

#: ../../library/inspect.rst:1133
#, fuzzy
msgid ""
"All accesses to object members and dict values are done using ``getattr()`` "
"and ``dict.get()`` for safety."
msgstr "為了安全起見，對物件成員和字典值的所有訪問都是使用 ``getattr()`` 和 ``dict."
"get()`` 完成的。"

#: ../../library/inspect.rst:1135
#, fuzzy
msgid "Always, always, always returns a freshly created dict."
msgstr "總是，總是，總是回傳一個新建立的字典。"

#: ../../library/inspect.rst:1137
#, fuzzy
msgid ""
"``eval_str`` controls whether or not values of type ``str`` are replaced "
"with the result of calling :func:`eval()` on those values:"
msgstr "``eval_str`` 控制是否將 ``str`` 型別的值替換為對這些值呼叫 eval() 的結果："

#: ../../library/inspect.rst:1140
#, fuzzy
msgid ""
"If eval_str is true, :func:`eval()` is called on values of type ``str``. "
"(Note that ``get_annotations`` doesn't catch exceptions; if :func:`eval()` "
"raises an exception, it will unwind the stack past the ``get_annotations`` "
"call.)"
msgstr ""
"如果 eval_str 為真，則對 str 型別的值呼叫 eval() 。 "
"（請注意，``get_annotations`` 不會捕獲例外；如果 eval()` 引發例外，它將在 "
"``get_annotations`` 呼叫之後展開堆疊。）"

#: ../../library/inspect.rst:1144
#, fuzzy
msgid ""
"If eval_str is false (the default), values of type ``str`` are unchanged."
msgstr "如果 eval_str 為 false（預設值），則 str 型別的值不變。"

#: ../../library/inspect.rst:1146
#, fuzzy
msgid ""
"``globals`` and ``locals`` are passed in to :func:`eval()`; see the "
"documentation for :func:`eval()` for more information.  If ``globals`` or "
"``locals`` is ``None``, this function may replace that value with a context-"
"specific default, contingent on ``type(obj)``:"
msgstr ""
"``globals`` 和 ``locals`` 被傳遞給 :func:`eval()`;有關更多資訊，請參閱 "
":func:`eval()` 的文檔。如果 ``globals`` 或 ``locals`` 為 ``None``，"
"此函式可能會根據 ``type(obj)`` 使用特定於上下文的預設值替換該值："

#: ../../library/inspect.rst:1151
#, fuzzy
msgid "If ``obj`` is a module, ``globals`` defaults to ``obj.__dict__``."
msgstr "如果 ``obj`` 是一個模組，``globals`` 預設為 ``obj.__dict__``。"

#: ../../library/inspect.rst:1152
#, fuzzy
msgid ""
"If ``obj`` is a class, ``globals`` defaults to ``sys.modules[obj.__module__]."
"__dict__`` and ``locals`` defaults to the ``obj`` class namespace."
msgstr ""
"如果 ``obj`` 是一個類，``globals`` 預設為 ``sys.modules[obj.__module__]."
"__dict__`` 和 ``locals`` 預設為 ``obj`` 類命名空間。"

#: ../../library/inspect.rst:1155
#, fuzzy
msgid ""
"If ``obj`` is a callable, ``globals`` defaults to ``obj.__globals__``, "
"although if ``obj`` is a wrapped function (using ``functools."
"update_wrapper()``) it is first unwrapped."
msgstr ""
"如果 ``obj`` 是可呼叫的，``globals`` 預設為 ``obj.__globals__``，儘管如果 "
"``obj`` 是一個包裝函式（使用 ``functools.update_wrapper()``）它是首先打開。"

#: ../../library/inspect.rst:1159
#, fuzzy
msgid ""
"Calling ``get_annotations`` is best practice for accessing the annotations "
"dict of any object.  See :ref:`annotations-howto` for more information on "
"annotations best practices."
msgstr ""
"呼叫 ``get_annotations`` "
"是訪問任何物件的註釋字典的最佳實踐。有關註釋最佳實踐的更多資訊，請參閱 :ref"
":`annotations-howto`。"

#: ../../library/inspect.rst:1169
#, fuzzy
msgid "The interpreter stack"
msgstr "直譯器棧"

#: ../../library/inspect.rst:1171
#, fuzzy
msgid ""
"Some of the following functions return :class:`FrameInfo` objects. For "
"backwards compatibility these objects allow tuple-like operations on all "
"attributes except ``positions``. This behavior is considered deprecated and "
"may be removed in the future."
msgstr ""
"以下一些函式回傳 :class:`FrameInfo` 物件。為了向後相容，這些物件允許對除“位置"
"”之外的所有屬性進行類似元組的操作。此行為已被棄用，將來可能會被刪除。"

#: ../../library/inspect.rst:1180
#, fuzzy
msgid "The :ref:`frame object <frame-objects>` that the record corresponds to."
msgstr "記錄對應的 :ref:`frame object <frame-objects>`。"

#: ../../library/inspect.rst:1184
#, fuzzy
msgid ""
"The file name associated with the code being executed by the frame this "
"record corresponds to."
msgstr "與此記錄對應的幀正在執行的程式碼關聯的文件名。"

#: ../../library/inspect.rst:1189
#, fuzzy
msgid ""
"The line number of the current line associated with the code being executed "
"by the frame this record corresponds to."
msgstr "與此記錄對應的幀正在執行的程式碼關聯的當前行的行號。"

#: ../../library/inspect.rst:1194
#, fuzzy
msgid ""
"The function name that is being executed by the frame this record "
"corresponds to."
msgstr "此記錄對應的框架正在執行的函式名稱。"

#: ../../library/inspect.rst:1198
#, fuzzy
msgid ""
"A list of lines of context from the source code that's being executed by the "
"frame this record corresponds to."
msgstr "此記錄對應的框架正在執行的源程式碼中的上下文行列表。"

#: ../../library/inspect.rst:1203 ../../library/inspect.rst:1242
#, fuzzy
msgid ""
"The index of the current line being executed in the :attr:`code_context` "
"list."
msgstr "在 :attr:`code_context` 列表中正在執行的當前行的索引。"

#: ../../library/inspect.rst:1207
#, fuzzy
msgid ""
"A :class:`dis.Positions` object containing the start line number, end line "
"number, start column offset, and end column offset associated with the "
"instruction being executed by the frame this record corresponds to."
msgstr ""
"一個 :class:`dis.Positions` 物件，包含與此記錄對應的幀正在執行的指令相關聯的"
"起始行號、結束行號、起始列偏移量和結束列偏移量。"

#: ../../library/inspect.rst:1211
#, fuzzy
msgid "Return a :term:`named tuple` instead of a :class:`tuple`."
msgstr "回傳一個 :term:`named tuple` 而不是 :class:`tuple`。"

#: ../../library/inspect.rst:1214
#, fuzzy
msgid ""
":class:`!FrameInfo` is now a class instance (that is backwards compatible "
"with the previous :term:`named tuple`)."
msgstr ":class:`!FrameInfo` 現在是一個類實例（與之前的 :term:`named tuple` "
"向後相容）。"

#: ../../library/inspect.rst:1223
#, fuzzy
msgid ""
"The file name associated with the code being executed by the frame this "
"traceback corresponds to."
msgstr "與此回溯對應的幀正在執行的程式碼關聯的文件名。"

#: ../../library/inspect.rst:1228
#, fuzzy
msgid ""
"The line number of the current line associated with the code being executed "
"by the frame this traceback corresponds to."
msgstr "與此回溯對應的幀正在執行的程式碼關聯的當前行的行號。"

#: ../../library/inspect.rst:1233
#, fuzzy
msgid ""
"The function name that is being executed by the frame this traceback "
"corresponds to."
msgstr "此回溯對應的幀正在執行的函式名稱。"

#: ../../library/inspect.rst:1237
#, fuzzy
msgid ""
"A list of lines of context from the source code that's being executed by the "
"frame this traceback corresponds to."
msgstr "此回溯對應的框架正在執行的源程式碼的上下文行列表。"

#: ../../library/inspect.rst:1246
#, fuzzy
msgid ""
"A :class:`dis.Positions` object containing the start line number, end line "
"number, start column offset, and end column offset associated with the "
"instruction being executed by the frame this traceback corresponds to."
msgstr ""
"一個 :class:`dis.Positions` 物件，包含起始行號、結束行號、起始列偏移量和結束"
"列偏移量，這些偏移量與此回溯對應的幀正在執行的指令相關聯。"

#: ../../library/inspect.rst:1251
#, fuzzy
msgid ""
":class:`!Traceback` is now a class instance (that is backwards compatible "
"with the previous :term:`named tuple`)."
msgstr ":class:`!Traceback` 現在是一個類實例（與之前的 :term:`named tuple` "
"向後相容）。"

#: ../../library/inspect.rst:1258
#, fuzzy
msgid ""
"Keeping references to frame objects, as found in the first element of the "
"frame records these functions return, can cause your program to create "
"reference cycles.  Once a reference cycle has been created, the lifespan of "
"all objects which can be accessed from the objects which form the cycle can "
"become much longer even if Python's optional cycle detector is enabled.  If "
"such cycles must be created, it is important to ensure they are explicitly "
"broken to avoid the delayed destruction of objects and increased memory "
"consumption which occurs."
msgstr ""
"保持對框架物件的引用，如在框架記錄的第一個元素中找到的，這些函式回傳，可能會"
"導致您的程式建立引用循環。一旦建立了引用循環，即使啟用了 Python 的可選循環檢"
"測器，可以從形成循環的物件訪問的所有物件的生命週期也會變得更長。如果必須建立"
"這樣的循環，重要的是要確保它們被顯式破壞以避免物件的延遲銷毀和發生的記憶體消"
"耗增加。"

#: ../../library/inspect.rst:1266
#, fuzzy
msgid ""
"Though the cycle detector will catch these, destruction of the frames (and "
"local variables) can be made deterministic by removing the cycle in a :"
"keyword:`finally` clause.  This is also important if the cycle detector was "
"disabled when Python was compiled or using :func:`gc.disable`.  For example::"
msgstr ""
"雖然循環檢測器會捕獲這些，但可以通過刪除 :keyword:`finally` "
"子句中的循環來確定幀（和局部變數）的破壞。如果在編譯 Python 或使用 :func:`gc."
"disable` 時禁用了循環檢測器，這也很重要。例如：："

#: ../../library/inspect.rst:1278
#, fuzzy
msgid ""
"If you want to keep the frame around (for example to print a traceback "
"later), you can also break reference cycles by using the :meth:`frame.clear` "
"method."
msgstr "如果你想保留框架（例如稍後印出回溯），你也可以使用 :meth:`frame.clear` "
"方法打破引用循環。"

#: ../../library/inspect.rst:1282
#, fuzzy
msgid ""
"The optional *context* argument supported by most of these functions "
"specifies the number of lines of context to return, which are centered "
"around the current line."
msgstr "大多數這些函式支援的可選 *context* "
"參數指定要回傳的上下文行數，這些行以當前行為中心。"

#: ../../library/inspect.rst:1289
#, fuzzy
msgid ""
"Get information about a frame or traceback object.  A :class:`Traceback` "
"object is returned."
msgstr "獲取有關框架或回溯物件的資訊。回傳一個 :class:`Traceback` 物件。"

#: ../../library/inspect.rst:1292
#, fuzzy
msgid "A :class:`Traceback` object is returned instead of a named tuple."
msgstr "回傳一個 :class:`Traceback` 物件而不是命名元組。"

#: ../../library/inspect.rst:1297
#, fuzzy
msgid ""
"Get a list of :class:`FrameInfo` objects for a frame and all outer frames. "
"These frames represent the calls that lead to the creation of *frame*. The "
"first entry in the returned list represents *frame*; the last entry "
"represents the outermost call on *frame*'s stack."
msgstr ""
"獲取框架和所有外部框架的 :class:`FrameInfo` "
"物件列表。這些框架代表導致建立*框架*的呼叫。回傳列表中的第一個條目表示 "
"*frame*；最後一個條目代表*frame* 堆疊上的最外層呼叫。"

#: ../../library/inspect.rst:1302 ../../library/inspect.rst:1317
#: ../../library/inspect.rst:1343 ../../library/inspect.rst:1358
#, fuzzy
msgid ""
"A list of :term:`named tuples <named tuple>` ``FrameInfo(frame, filename, "
"lineno, function, code_context, index)`` is returned."
msgstr ""
":term:`命名元組 <named tuple>` ``FrameInfo(frame, filename, lineno, "
"function, code_context, index)`` 的列表被回傳。"

#: ../../library/inspect.rst:1307 ../../library/inspect.rst:1322
#: ../../library/inspect.rst:1348 ../../library/inspect.rst:1363
#, fuzzy
msgid "A list of :class:`FrameInfo` objects is returned."
msgstr ":class:`FrameInfo` 物件的列表被回傳。"

#: ../../library/inspect.rst:1312
#, fuzzy
msgid ""
"Get a list of :class:`FrameInfo` objects for a traceback's frame and all "
"inner frames.  These frames represent calls made as a consequence of "
"*frame*. The first entry in the list represents *traceback*; the last entry "
"represents where the exception was raised."
msgstr ""
"獲取 :class:`FrameInfo` 物件的列表，用於回溯框架和所有內部框架。這些幀表示由 "
"*frame* 引起的呼叫。列表中的第一個條目代表*traceback*；最後一個條目表示引發例"
"外的位置。"

#: ../../library/inspect.rst:1327
#, fuzzy
msgid "Return the frame object for the caller's stack frame."
msgstr "回傳呼叫者棧幀的幀物件。"

#: ../../library/inspect.rst:1331
#, fuzzy
msgid ""
"This function relies on Python stack frame support in the interpreter, which "
"isn't guaranteed to exist in all implementations of Python.  If running in "
"an implementation without Python stack frame support this function returns "
"``None``."
msgstr ""
"此函式依賴於直譯器中的 Python 堆疊框架支援，不能保證它存在於所有 Python "
"實作中。如果在沒有 Python 堆疊框架支援的實作中運行，則此函式回傳 ``None`` 。"

#: ../../library/inspect.rst:1339
#, fuzzy
msgid ""
"Return a list of :class:`FrameInfo` objects for the caller's stack.  The "
"first entry in the returned list represents the caller; the last entry "
"represents the outermost call on the stack."
msgstr "回傳呼叫者堆疊的 :class:`FrameInfo` 物件列表。回傳列表中的第一個條目代表呼叫"
"者；最後一個條目代表堆疊中最外層的呼叫。"

#: ../../library/inspect.rst:1353
#, fuzzy
msgid ""
"Return a list of :class:`FrameInfo` objects for the stack between the "
"current frame and the frame in which an exception currently being handled "
"was raised in.  The first entry in the list represents the caller; the last "
"entry represents where the exception was raised."
msgstr ""
"回傳當前幀和引發當前正在處理的例外的幀之間的堆疊的 FrameInfo "
"物件列表。列表中的第一個條目代表呼叫者；最後一個條目表示引發例外的位置。"

#: ../../library/inspect.rst:1367
#, fuzzy
msgid "Fetching attributes statically"
msgstr "靜態獲取屬性"

#: ../../library/inspect.rst:1369
#, fuzzy
msgid ""
"Both :func:`getattr` and :func:`hasattr` can trigger code execution when "
"fetching or checking for the existence of attributes. Descriptors, like "
"properties, will be invoked and :meth:`__getattr__` and :meth:"
"`__getattribute__` may be called."
msgstr ""
":func:`getattr` 和 :func:`hasattr` "
"都可以在獲取或檢查屬性是否存在時觸發程式碼執行。描述器，如屬性，將被呼叫，"
"並且 :meth:`__getattr__` 和 :meth:`__getattribute__` 可能被呼叫。"

#: ../../library/inspect.rst:1374
#, fuzzy
msgid ""
"For cases where you want passive introspection, like documentation tools, "
"this can be inconvenient. :func:`getattr_static` has the same signature as :"
"func:`getattr` but avoids executing code when it fetches attributes."
msgstr ""
"對於需要被動內省的情況，比如文檔工具，這可能會很不方便。 "
":func:`getattr_static` 與 :func:`getattr` "
"具有相同的簽名，但在獲取屬性時避免執行程式碼。"

#: ../../library/inspect.rst:1380
#, fuzzy
msgid ""
"Retrieve attributes without triggering dynamic lookup via the descriptor "
"protocol, :meth:`__getattr__` or :meth:`__getattribute__`."
msgstr ""
"通過描述器協定 :meth:`__getattr__` 或 :meth:`__getattribute__` "
"在不觸發動態查找的情況下檢索屬性。"

#: ../../library/inspect.rst:1383
#, fuzzy
msgid ""
"Note: this function may not be able to retrieve all attributes that getattr "
"can fetch (like dynamically created attributes) and may find attributes that "
"getattr can't (like descriptors that raise AttributeError). It can also "
"return descriptors objects instead of instance members."
msgstr ""
"注意：此函式可能無法檢索 getattr 可以獲取的所有屬性（如動態建立的屬性），"
"並且可能會找到 getattr 無法獲取的屬性（如引發 AttributeError "
"的描述器）。它還可以回傳描述器物件而不是實例成員。"

#: ../../library/inspect.rst:1389
#, fuzzy
msgid ""
"If the instance :attr:`~object.__dict__` is shadowed by another member (for "
"example a property) then this function will be unable to find instance "
"members."
msgstr "如果實例 :attr:`~object.__dict__` "
"被另一個成員（例如一個屬性）覆蓋，那麼這個函式將無法找到實例成員。"

#: ../../library/inspect.rst:1395
#, fuzzy
msgid ""
":func:`getattr_static` does not resolve descriptors, for example slot "
"descriptors or getset descriptors on objects implemented in C. The "
"descriptor object is returned instead of the underlying attribute."
msgstr ""
":func:`getattr_static` 不解析描述器，例如在 C 中實作的對像上的槽描述器或 "
"getset 描述器。回傳描述器物件而不是底層屬性。"

#: ../../library/inspect.rst:1399
#, fuzzy
msgid ""
"You can handle these with code like the following. Note that for arbitrary "
"getset descriptors invoking these may trigger code execution::"
msgstr "您可以使用如下程式碼處理這些問題。請注意，對於呼叫這些的任意 getset "
"描述器，可能會觸發程式碼執行::"

#: ../../library/inspect.rst:1425
#, fuzzy
msgid "Current State of Generators and Coroutines"
msgstr "生成器和協程的現狀"

#: ../../library/inspect.rst:1427
#, fuzzy
msgid ""
"When implementing coroutine schedulers and for other advanced uses of "
"generators, it is useful to determine whether a generator is currently "
"executing, is waiting to start or resume or execution, or has already "
"terminated. :func:`getgeneratorstate` allows the current state of a "
"generator to be determined easily."
msgstr ""
"在實作協程調度程式和生成器的其他高階用途時，確定生成器當前是否正在執行、正在"
"等待啟動或恢復或執行，或者已經終止是很有用的。 :func:`getgeneratorstate` "
"允許輕鬆確定生成器的當前狀態。"

#: ../../library/inspect.rst:1435
#, fuzzy
msgid "Get current state of a generator-iterator."
msgstr "獲取生成器疊代器的當前狀態。"

#: ../../library/inspect.rst:1441 ../../library/inspect.rst:1456
#, fuzzy
msgid "Possible states are:"
msgstr "可能的狀態是："

#: ../../library/inspect.rst:1438
#, fuzzy
msgid "GEN_CREATED: Waiting to start execution."
msgstr "GEN_CREATED：等待開始執行。"

#: ../../library/inspect.rst:1439
#, fuzzy
msgid "GEN_RUNNING: Currently being executed by the interpreter."
msgstr "GEN_RUNNING：當前正在由直譯器執行。"

#: ../../library/inspect.rst:1440
#, fuzzy
msgid "GEN_SUSPENDED: Currently suspended at a yield expression."
msgstr "GEN_SUSPENDED：當前暫停在 yield 表達式。"

#: ../../library/inspect.rst:1441
#, fuzzy
msgid "GEN_CLOSED: Execution has completed."
msgstr "GEN_CLOSED：執行完成。"

#: ../../library/inspect.rst:1447
#, fuzzy
msgid ""
"Get current state of a coroutine object.  The function is intended to be "
"used with coroutine objects created by :keyword:`async def` functions, but "
"will accept any coroutine-like object that has ``cr_running`` and "
"``cr_frame`` attributes."
msgstr ""
"獲取協程物件的當前狀態。該函式旨在與由 :keyword:`async def` "
"函式建立的協程對像一起使用，但將接受任何具有 ``cr_running`` 和 ``cr_frame`` "
"屬性的類協程物件。"

#: ../../library/inspect.rst:1453
#, fuzzy
msgid "CORO_CREATED: Waiting to start execution."
msgstr "CORO_CREATED：等待開始執行。"

#: ../../library/inspect.rst:1454
#, fuzzy
msgid "CORO_RUNNING: Currently being executed by the interpreter."
msgstr "CORO_RUNNING：當前正在由直譯器執行。"

#: ../../library/inspect.rst:1455
#, fuzzy
msgid "CORO_SUSPENDED: Currently suspended at an await expression."
msgstr "CORO_SUSPENDED：當前暫停在 await 表達式。"

#: ../../library/inspect.rst:1456
#, fuzzy
msgid "CORO_CLOSED: Execution has completed."
msgstr "CORO_CLOSED：執行完成。"

#: ../../library/inspect.rst:1460
#, fuzzy
msgid ""
"The current internal state of the generator can also be queried. This is "
"mostly useful for testing purposes, to ensure that internal state is being "
"updated as expected:"
msgstr "也可以查詢生成器的當前內部狀態。這主要用於測試目的，以確保內部狀態按預期更新"
"："

#: ../../library/inspect.rst:1466
#, fuzzy
msgid ""
"Get the mapping of live local variables in *generator* to their current "
"values.  A dictionary is returned that maps from variable names to values. "
"This is the equivalent of calling :func:`locals` in the body of the "
"generator, and all the same caveats apply."
msgstr ""
"獲取 *generator* "
"中的實時局部變數到它們當前值的映射。回傳一個從變數名稱映射到值的字典。"
"這等同於在生成器主體中呼叫 :func:`locals`，並且適用所有相同的注意事項。"

#: ../../library/inspect.rst:1471
#, fuzzy
msgid ""
"If *generator* is a :term:`generator` with no currently associated frame, "
"then an empty dictionary is returned.  :exc:`TypeError` is raised if "
"*generator* is not a Python generator object."
msgstr ""
"如果 *generator* 是一個沒有當前關聯框架的 "
":term:`generator`，則回傳一個空字典。如果 *generator* 不是 Python "
"生成器物件，則會引發 :exc:`TypeError`。"

#: ../../library/inspect.rst:1477
#, fuzzy
msgid ""
"This function relies on the generator exposing a Python stack frame for "
"introspection, which isn't guaranteed to be the case in all implementations "
"of Python. In such cases, this function will always return an empty "
"dictionary."
msgstr ""
"此函式依賴於生成器公開 Python 堆疊幀以進行內省，但不能保證在 Python "
"的所有實作中都是如此。在這種情況下，此函式將始終回傳一個空字典。"

#: ../../library/inspect.rst:1486
#, fuzzy
msgid ""
"This function is analogous to :func:`~inspect.getgeneratorlocals`, but works "
"for coroutine objects created by :keyword:`async def` functions."
msgstr ""
"此函式類似於 :func:`~inspect.getgeneratorlocals`，但適用於由 :keyword:`async "
"def` 函式建立的協程物件。"

#: ../../library/inspect.rst:1495
#, fuzzy
msgid "Code Objects Bit Flags"
msgstr "程式碼物件位旗標"

#: ../../library/inspect.rst:1497
#, fuzzy
msgid ""
"Python code objects have a ``co_flags`` attribute, which is a bitmap of the "
"following flags:"
msgstr "Python 程式碼對像有一個 ``co_flags`` 屬性，它是以下旗標的位圖："

#: ../../library/inspect.rst:1502
#, fuzzy
msgid "The code object is optimized, using fast locals."
msgstr "程式碼物件經過最佳化，使用快速局部變數。"

#: ../../library/inspect.rst:1506
#, fuzzy
msgid ""
"If set, a new dict will be created for the frame's ``f_locals`` when the "
"code object is executed."
msgstr "如果設定，則在執行程式碼物件時將為框架的“f_locals”建立一個新的字典。"

#: ../../library/inspect.rst:1511
#, fuzzy
msgid "The code object has a variable positional parameter (``*args``-like)."
msgstr "程式碼對像有一個可變的位置參數（類似``*args``）。"

#: ../../library/inspect.rst:1515
#, fuzzy
msgid "The code object has a variable keyword parameter (``**kwargs``-like)."
msgstr "程式碼對像有一個可變關鍵字參數（``**kwargs``-like）。"

#: ../../library/inspect.rst:1519
#, fuzzy
msgid "The flag is set when the code object is a nested function."
msgstr "當程式碼對像是嵌套函式時設定該旗標。"

#: ../../library/inspect.rst:1523
#, fuzzy
msgid ""
"The flag is set when the code object is a generator function, i.e. a "
"generator object is returned when the code object is executed."
msgstr "當程式碼對像是一個生成器函式時設定該旗標，即當程式碼對像被執行時回傳一個生成"
"器物件。"

#: ../../library/inspect.rst:1528
#, fuzzy
msgid ""
"The flag is set when the code object is a coroutine function. When the code "
"object is executed it returns a coroutine object. See :pep:`492` for more "
"details."
msgstr "當程式碼對像是協程函式時設定該旗標。當程式碼對像被執行時，它回傳一個協程物件"
"。有關更多詳細資訊，請參見 :pep:`492`。"

#: ../../library/inspect.rst:1536
#, fuzzy
msgid ""
"The flag is used to transform generators into generator-based coroutines.  "
"Generator objects with this flag can be used in ``await`` expression, and "
"can ``yield from`` coroutine objects. See :pep:`492` for more details."
msgstr ""
"該旗標用於將生成器轉換為基於生成器的協程。帶有這個旗標的生成器物件可以用在 "
"``await`` 表達式中，並且可以``yield from`` "
"協程物件。有關更多詳細資訊，請參見 :pep:`492`。"

#: ../../library/inspect.rst:1545
#, fuzzy
msgid ""
"The flag is set when the code object is an asynchronous generator function.  "
"When the code object is executed it returns an asynchronous generator "
"object.  See :pep:`525` for more details."
msgstr "當程式碼對像是非同步生成器函式時設定該旗標。當程式碼對像被執行時，它回傳一個"
"非同步生成器物件。有關詳細資訊，請參見 :pep:`525`。"

#: ../../library/inspect.rst:1552
#, fuzzy
msgid ""
"The flags are specific to CPython, and may not be defined in other Python "
"implementations.  Furthermore, the flags are an implementation detail, and "
"can be removed or deprecated in future Python releases. It's recommended to "
"use public APIs from the :mod:`inspect` module for any introspection needs."
msgstr ""
"這些旗標特定於 CPython，可能未在其他 Python "
"實作中定義。此外，旗標是一個實作細節，可以在未來的 Python 版本中刪除或棄用。"
"建議使用 :mod:`inspect` 模組中的公開 API 來滿足任何內省需求。"

#: ../../library/inspect.rst:1562
#, fuzzy
msgid "Command Line Interface"
msgstr "命令列界面"

#: ../../library/inspect.rst:1564
#, fuzzy
msgid ""
"The :mod:`inspect` module also provides a basic introspection capability "
"from the command line."
msgstr ":mod:`inspect` 模組還提供了來自命令列的基本內省功能。"

#: ../../library/inspect.rst:1569
#, fuzzy
msgid ""
"By default, accepts the name of a module and prints the source of that "
"module. A class or function within the module can be printed instead by "
"appended a colon and the qualified name of the target object."
msgstr "預設情況下，接受模組的名稱並印出該模組的源程式碼。可以通過附加冒號和目標物件"
"的限定名稱來印出模組中的類或函式。"

#: ../../library/inspect.rst:1575
#, fuzzy
msgid ""
"Print information about the specified object rather than the source code"
msgstr "印出有關指定物件的資訊而不是源程式碼"

#~ msgid "module"
#~ msgstr "模組"

#~ msgid "__file__"
#~ msgstr "__file__"
