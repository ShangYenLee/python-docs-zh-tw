# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-31 00:16+0000\n"
"PO-Revision-Date: 2018-05-23 16:14+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/typing.rst:3
msgid ":mod:`typing` --- Support for type hints"
msgstr ":mod:`typing` --- 型別提示的支援"

#: ../../library/typing.rst:10
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr "**原始碼：**\\ :source:`Lib/typing.py`"

#: ../../library/typing.rst:14
#, fuzzy
msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as type checkers, IDEs, linters, "
"etc."
msgstr "Python 運行時不強制執行函式和變數型別註釋。它們可以被第三方工具使用，例如型別"
"檢查器、IDE、linters 等。"

#: ../../library/typing.rst:20
#, fuzzy
msgid ""
"This module provides runtime support for type hints. The most fundamental "
"support consists of the types :data:`Any`, :data:`Union`, :data:`Callable`, :"
"class:`TypeVar`, and :class:`Generic`. For a full specification, please see :"
"pep:`484`. For a simplified introduction to type hints, see :pep:`483`."
msgstr ""
"該模組為型別提示提供運行時支援。最基本的支援包括型別 :data:`Any`、:data:`Union"
"`、:data:`Callable`、:class:`TypeVar` 和 :class:`Generic`。有關完整規範，"
"請參閱 :pep:`484`。有關型別提示的簡單介紹，請參閱 :pep:`483`。"

#: ../../library/typing.rst:26
#, fuzzy
msgid ""
"The function below takes and returns a string and is annotated as follows::"
msgstr "下面的函式接受並回傳一個字串，並註釋如下："

#: ../../library/typing.rst:31
#, fuzzy
msgid ""
"In the function ``greeting``, the argument ``name`` is expected to be of "
"type :class:`str` and the return type :class:`str`. Subtypes are accepted as "
"arguments."
msgstr "在函式 ``greeting`` 中，參數 ``name`` 的型別應為 str 型別，回傳型別為 str "
"型別。子型別被接受為參數。"

#: ../../library/typing.rst:35
#, fuzzy
msgid ""
"New features are frequently added to the ``typing`` module. The "
"`typing_extensions <https://pypi.org/project/typing-extensions/>`_ package "
"provides backports of these new features to older versions of Python."
msgstr ""
"新功能經常新增到 ``typing`` 模組中。 `typing_extensions <https://pypi.org/"
"project/typing-extensions/>`_ 包將這些新功能向後移植到舊版本的 Python。"

#: ../../library/typing.rst:39
#, fuzzy
msgid ""
"For a summary of deprecated features and a deprecation timeline, please see "
"`Deprecation Timeline of Major Features`_."
msgstr "有關棄用功能的摘要和棄用時間表，請參閱`主要功能的棄用時間表`_。"

#: ../../library/typing.rst:44
#, fuzzy
msgid ""
"For a quick overview of type hints, refer to `this cheat sheet <https://mypy."
"readthedocs.io/en/stable/cheat_sheet_py3.html>`_."
msgstr ""
"有關型別提示的快速概述，請參閱“備忘單 <https://mypy.readthedocs.io/en/stable/"
"cheat_sheet_py3.html>”。"

#: ../../library/typing.rst:47
#, fuzzy
msgid ""
"The \"Type System Reference\" section of https://mypy.readthedocs.io/ -- "
"since the Python typing system is standardised via PEPs, this reference "
"should broadly apply to most Python type checkers, although some parts may "
"still be specific to mypy."
msgstr ""
"https://mypy.readthedocs.io/ 的“型別系統參考”部分——由於 Python "
"型別系統是通過 PEP 標準化的，因此該參考應廣泛適用於大多數 Python 型別檢查器，"
"儘管某些部分可能仍特定於 mypy ."

#: ../../library/typing.rst:52
#, fuzzy
msgid ""
"The documentation at https://typing.readthedocs.io/ serves as useful "
"reference for type system features, useful typing related tools and typing "
"best practices."
msgstr "https://typing.readthedocs.io/ "
"上的文檔可作為型別系統功能、有用的打字相關工具和打字最佳實踐的有用參考。"

#: ../../library/typing.rst:58
#, fuzzy
msgid "Relevant PEPs"
msgstr "相關 PEP"

#: ../../library/typing.rst:60
#, fuzzy
msgid ""
"Since the initial introduction of type hints in :pep:`484` and :pep:`483`, a "
"number of PEPs have modified and enhanced Python's framework for type "
"annotations. These include:"
msgstr ""
"自從在 :pep:`484` 和 :pep:`483` 中首次引入型別提示以來，許多 PEP "
"已經修改和增強了 Python 的型別註釋框架。這些包括："

#: ../../library/typing.rst:65
#, fuzzy
msgid ":pep:`526`: Syntax for Variable Annotations"
msgstr ":pep:`526`: 變數註釋的語法"

#: ../../library/typing.rst:65
#, fuzzy
msgid ""
"*Introducing* syntax for annotating variables outside of function "
"definitions, and :data:`ClassVar`"
msgstr "*引入*用於在函式定義之外註釋變數的語法，以及 :data:`ClassVar`"

#: ../../library/typing.rst:68
#, fuzzy
msgid ":pep:`544`: Protocols: Structural subtyping (static duck typing)"
msgstr ":pep:`544`: 協定：結構子型別（靜態鴨子型別）"

#: ../../library/typing.rst:68
#, fuzzy
msgid ""
"*Introducing* :class:`Protocol` and the :func:"
"`@runtime_checkable<runtime_checkable>` decorator"
msgstr ""
"*介紹* :class:`Protocol` 和 :func:`@runtime_checkable<runtime_checkable>` "
"裝飾器"

#: ../../library/typing.rst:71
#, fuzzy
msgid ":pep:`585`: Type Hinting Generics In Standard Collections"
msgstr ":pep:`585`: 標準集合中的型別提示泛型"

#: ../../library/typing.rst:71
#, fuzzy
msgid ""
"*Introducing* :class:`types.GenericAlias` and the ability to use standard "
"library classes as :ref:`generic types<types-genericalias>`"
msgstr ""
"*介紹* :class:`types.GenericAlias` 以及使用標準庫類作為 :ref:`generic types"
"<types-genericalias>` 的能力"

#: ../../library/typing.rst:73
#, fuzzy
msgid ":pep:`586`: Literal Types"
msgstr ":pep:`586`: 文字型別"

#: ../../library/typing.rst:74
#, fuzzy
msgid "*Introducing* :data:`Literal`"
msgstr "*介紹* :data:`文字`"

#: ../../library/typing.rst:75
#, fuzzy
msgid ""
":pep:`589`: TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys"
msgstr ":pep:`589`: TypedDict：使用固定鍵集的字典型別提示"

#: ../../library/typing.rst:76
#, fuzzy
msgid "*Introducing* :class:`TypedDict`"
msgstr "*介紹* :class:`TypedDict`"

#: ../../library/typing.rst:77
#, fuzzy
msgid ":pep:`591`: Adding a final qualifier to typing"
msgstr ":pep:`591`: 為打字新增最終限定符"

#: ../../library/typing.rst:78
#, fuzzy
msgid "*Introducing* :data:`Final` and the :func:`@final<final>` decorator"
msgstr "*介紹* :data:`Final` 和 :func:`@final<final>` 裝飾器"

#: ../../library/typing.rst:79
#, fuzzy
msgid ":pep:`593`: Flexible function and variable annotations"
msgstr ":pep:`593`: 靈活的函式和變數註釋"

#: ../../library/typing.rst:80
#, fuzzy
msgid "*Introducing* :data:`Annotated`"
msgstr "*介紹* :data:`註釋`"

#: ../../library/typing.rst:83
#, fuzzy
msgid ":pep:`604`: Allow writing union types as ``X | Y``"
msgstr ":pep:`604`: 允許將聯合型別寫為 ``X | Y``"

#: ../../library/typing.rst:82
#, fuzzy
msgid ""
"*Introducing* :data:`types.UnionType` and the ability to use the binary-or "
"operator ``|`` to signify a :ref:`union of types<types-union>`"
msgstr "*介紹* :data:`types.UnionType` 以及使用二元或運算符 ``|`` 表示型別聯合<types-"
"union>` 的能力"

#: ../../library/typing.rst:85
#, fuzzy
msgid ":pep:`612`: Parameter Specification Variables"
msgstr ":pep:`612`: 參數規範變數"

#: ../../library/typing.rst:86
#, fuzzy
msgid "*Introducing* :class:`ParamSpec` and :data:`Concatenate`"
msgstr "*介紹* :class:`ParamSpec` 和 :data:`Concatenate`"

#: ../../library/typing.rst:87
#, fuzzy
msgid ":pep:`613`: Explicit Type Aliases"
msgstr ":pep:`613`: 顯式型別別名"

#: ../../library/typing.rst:88
msgid "*Introducing* :data:`TypeAlias`"
msgstr "*引入* :data:`TypeAlias`"

#: ../../library/typing.rst:89
#, fuzzy
msgid ":pep:`646`: Variadic Generics"
msgstr ":pep:`646`: 可變泛型"

#: ../../library/typing.rst:90
msgid "*Introducing* :data:`TypeVarTuple`"
msgstr "*引入* :data:`TypeVarTuple`"

#: ../../library/typing.rst:91
#, fuzzy
msgid ":pep:`647`: User-Defined Type Guards"
msgstr ":pep:`647`: 使用者定義的型別保護"

#: ../../library/typing.rst:92
msgid "*Introducing* :data:`TypeGuard`"
msgstr "*引入* :data:`TypeGuard`"

#: ../../library/typing.rst:93
#, fuzzy
msgid ""
":pep:`655`: Marking individual TypedDict items as required or potentially "
"missing"
msgstr ":pep:`655`: 將單個 TypedDict 項目標記為必需或可能缺失"

#: ../../library/typing.rst:94
msgid "*Introducing* :data:`Required` and :data:`NotRequired`"
msgstr "*引入*  :data:`Required` 和 :data:`NotRequired`"

#: ../../library/typing.rst:95
#, fuzzy
msgid ":pep:`673`: Self type"
msgstr ":pep:`673`: 自我型別"

#: ../../library/typing.rst:96
msgid "*Introducing* :data:`Self`"
msgstr "*引入* :data:`Self`"

#: ../../library/typing.rst:97
#, fuzzy
msgid ":pep:`675`: Arbitrary Literal String Type"
msgstr ":pep:`675`: 任意文字字串型別"

#: ../../library/typing.rst:98
msgid "*Introducing* :data:`LiteralString`"
msgstr "*引入* :data:`LiteralString`"

#: ../../library/typing.rst:100
#, fuzzy
msgid ":pep:`681`: Data Class Transforms"
msgstr ":pep:`681`: 資料類轉換"

#: ../../library/typing.rst:100
msgid ""
"*Introducing* the :func:`@dataclass_transform<dataclass_transform>` decorator"
msgstr "*引入* :func:`@dataclass_transform<dataclass_transform>` 裝飾器"

#: ../../library/typing.rst:105
#, fuzzy
msgid "Type aliases"
msgstr "型別別名"

#: ../../library/typing.rst:107
#, fuzzy
msgid ""
"A type alias is defined by assigning the type to the alias. In this example, "
"``Vector`` and ``list[float]`` will be treated as interchangeable synonyms::"
msgstr "型別別名是通過將型別分配給別名來定義的。在此示例中，``Vector`` 和 "
"``list[float]`` 將被視為可互換的同義詞::"

#: ../../library/typing.rst:118
#, fuzzy
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr "型別別名對於簡化複雜的型別簽名很有用。例如：："

#: ../../library/typing.rst:136
#, fuzzy
msgid ""
"Note that ``None`` as a type hint is a special case and is replaced by "
"``type(None)``."
msgstr "請注意，作為型別提示的 ``None`` 是一種特殊情況，並被“型別（無）”取代。"

#: ../../library/typing.rst:142
msgid "NewType"
msgstr "NewType"

#: ../../library/typing.rst:144
#, fuzzy
msgid "Use the :class:`NewType` helper to create distinct types::"
msgstr "使用 :class:`NewType` 幫助器建立不同的型別::"

#: ../../library/typing.rst:151
#, fuzzy
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr "靜態型別檢查器會將新型別視為原始型別的子類別。這有助於捕獲邏輯"
"錯誤::"

#: ../../library/typing.rst:163
#, fuzzy
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent "
"you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""
"您仍然可以對 UserId 型別的變數執行所有 int 操作，但結果將始終為 int 型別。"
"這使您可以在任何可能需要 ``int`` 的地方傳遞 ``UserId``，"
"但會防止您以無效的方式意外建立 ``UserId``::"

#: ../../library/typing.rst:171
#, fuzzy
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime, the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a callable that immediately returns whatever parameter you pass "
"it. That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce much overhead beyond that of a regular function call."
msgstr ""
"請注意，這些檢查僅由靜態型別檢查器強制執行。在運行時，語句 ``Derived = "
"NewType('Derived', Base)`` 將使 ``Derived`` 成為一個可呼叫物件，它會立即回傳"
"您傳遞給它的任何參數。這意味著表達式“Derived(some_value)”不會建立新類，也不會"
"引入比常規函式呼叫更多的開銷。"

#: ../../library/typing.rst:177
#, fuzzy
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr "更準確地說，表達式“some_value is Derived(some_value)”在運行時始終為真。"

#: ../../library/typing.rst:180
#, fuzzy
msgid "It is invalid to create a subtype of ``Derived``::"
msgstr "建立 ``Derived`` 的子型別是無效的::"

#: ../../library/typing.rst:189
#, fuzzy
msgid ""
"However, it is possible to create a :class:`NewType` based on a 'derived' "
"``NewType``::"
msgstr "但是，可以基於“派生的”``NewType`` 建立一個 :class:`NewType`::"

#: ../../library/typing.rst:197
#, fuzzy
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr "``ProUserId`` 的型別檢查將按預期工作。"

#: ../../library/typing.rst:199
msgid "See :pep:`484` for more details."
msgstr "更多細節請見 :pep:`484`\\ 。"

#: ../../library/typing.rst:203
#, fuzzy
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to "
"one another. Doing ``Alias = Original`` will make the static type checker "
"treat ``Alias`` as being *exactly equivalent* to ``Original`` in all cases. "
"This is useful when you want to simplify complex type signatures."
msgstr ""
"回想一下，型別別名的使用聲明了兩種型別彼此*等價*。在所有情況下，執行“Alias = "
"Original”將使靜態型別檢查器將 ``Alias``視為*完全等同於 ``Original`` 。當您想要簡化複"
"雜的型別簽名時，這很有用。"

#: ../../library/typing.rst:208
#, fuzzy
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""
"相反，``NewType`` 將一種型別聲明為另一種型別的*子型別*。執行``Derived = "
"NewType('Derived', Original)`` 將使靜態型別檢查器將``Derived`` "
"視為``Original`` 的*子類別*，這意味著型別為``Original`` 的值不能在需要“派生”"
"型別值的地方使用。當您希望以最小的運行時成本防止邏輯錯誤時，這很有用。"

#: ../../library/typing.rst:217
#, fuzzy
msgid ""
"``NewType`` is now a class rather than a function.  There is some additional "
"runtime cost when calling ``NewType`` over a regular function.  However, "
"this cost will be reduced in 3.11.0."
msgstr ""
"``NewType`` 現在是一個類而不是一個函式。在常規函式上呼叫 NewType "
"時會產生一些額外的運行時成本。但是，此成本將在 3.11.0 中降低。"

#: ../../library/typing.rst:224
#, fuzzy
msgid "Callable"
msgstr "可呼叫物件"

#: ../../library/typing.rst:226
#, fuzzy
msgid ""
"Frameworks expecting callback functions of specific signatures might be type "
"hinted using ``Callable[[Arg1Type, Arg2Type], ReturnType]``."
msgstr "期望特定簽名的回呼函式的框架可能會使用“Callable[[Arg1Type, Arg2Type], "
"ReturnType]”進行型別提示。"

#: ../../library/typing.rst:229 ../../library/typing.rst:1171
#: ../../library/typing.rst:2824
msgid "For example::"
msgstr ""
"舉例來說：\n"
"\n"
"::"

#: ../../library/typing.rst:244
#, fuzzy
msgid ""
"It is possible to declare the return type of a callable without specifying "
"the call signature by substituting a literal ellipsis for the list of "
"arguments in the type hint: ``Callable[..., ReturnType]``."
msgstr ""
"通過用文字省略號代替型別提示中的參數列表，可以在不指定呼叫簽名的情況下聲明可"
"呼叫物件的回傳型別：``Callable[..., ReturnType]``。"

#: ../../library/typing.rst:248 ../../library/typing.rst:850
#, fuzzy
msgid ""
"Callables which take other callables as arguments may indicate that their "
"parameter types are dependent on each other using :class:`ParamSpec`. "
"Additionally, if that callable adds or removes arguments from other "
"callables, the :data:`Concatenate` operator may be used.  They take the form "
"``Callable[ParamSpecVariable, ReturnType]`` and "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` respectively."
msgstr ""
"將其他可呼叫對像作為參數的可呼叫物件可能表明它們的參數型別相互依賴，使用：cla"
"ss:`ParamSpec`。此外，如果該可呼叫物件新增或刪除其他可呼叫物件的參數，則可以"
"使用 :data:`Concatenate` 運算符。它們分別採用“Callable[ParamSpecVariable, "
"ReturnType]”和“Callable[Concatenate[Arg1Type, Arg2Type, ..., "
"ParamSpecVariable], ReturnType]”的形式。"

#: ../../library/typing.rst:256 ../../library/typing.rst:862
#, fuzzy
msgid ""
"``Callable`` now supports :class:`ParamSpec` and :data:`Concatenate`. See :"
"pep:`612` for more details."
msgstr ""
"``Callable`` 現在支援 :class:`ParamSpec` "
"和 :data:`Concatenate`。有關更多詳細資訊，請參閱 :pep:`612`。"

#: ../../library/typing.rst:261
#, fuzzy
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provides "
"examples of usage in ``Callable``."
msgstr ":class:`ParamSpec` 和 :class:`Concatenate` 的文檔提供了``Callable`` "
"中的用法示例。"

#: ../../library/typing.rst:267
#, fuzzy
msgid "Generics"
msgstr "泛型"

#: ../../library/typing.rst:269
#, fuzzy
msgid ""
"Since type information about objects kept in containers cannot be statically "
"inferred in a generic way, abstract base classes have been extended to "
"support subscription to denote expected types for container elements."
msgstr "由於無法以通用方式靜態推斷有關保存在容器中的物件的型別資訊，因此擴充了抽象基"
"底類別以支援訂閱以表示容器元素的預期型別。"

#: ../../library/typing.rst:280
#, fuzzy
msgid ""
"Generics can be parameterized by using a factory available in typing called :"
"class:`TypeVar`."
msgstr "泛型可以通過使用名為 :class:`TypeVar` 的工廠來參數化。"

#: ../../library/typing.rst:296
#, fuzzy
msgid "User-defined generic types"
msgstr "使用者定義的通用型別"

#: ../../library/typing.rst:298
#, fuzzy
msgid "A user-defined class can be defined as a generic class."
msgstr "使用者定義的類可以定義為泛型類。"

#: ../../library/typing.rst:324
#, fuzzy
msgid ""
"``Generic[T]`` as a base class defines that the class ``LoggedVar`` takes a "
"single type parameter ``T`` . This also makes ``T`` valid as a type within "
"the class body."
msgstr ""
"``Generic[T]`` 作為基底類別定義類 ``LoggedVar`` 採用單個型別參數 ``T`` "
"。這也使得 ``T``作為類主體中的型別有效。"

#: ../../library/typing.rst:328
#, fuzzy
msgid ""
"The :class:`Generic` base class defines :meth:`~object.__class_getitem__` so "
"that ``LoggedVar[T]`` is valid as a type::"
msgstr ""
":class:`Generic` 基底類別定義 :meth:`~object.__class_getitem__` 以便 "
"``LoggedVar[T]`` 作為型別有效::"

#: ../../library/typing.rst:337
#, fuzzy
msgid ""
"A generic type can have any number of type variables. All varieties of :"
"class:`TypeVar` are permissible as parameters for a generic type::"
msgstr "泛型型別可以有任意數量的型別變數。 :class:`TypeVar` "
"的所有變體都可以作為泛型型別的參數::"

#: ../../library/typing.rst:349
#, fuzzy
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ":class:`Generic` 的每個型別變數參數必須不同。因此這是無效的::"

#: ../../library/typing.rst:360
#, fuzzy
msgid "You can use multiple inheritance with :class:`Generic`::"
msgstr "您可以將多重繼承與 :class:`Generic`:: 一起使用"

#: ../../library/typing.rst:370
#, fuzzy
msgid ""
"When inheriting from generic classes, some type variables could be fixed::"
msgstr "從泛型類繼承時，可以修復一些型別變數::"

#: ../../library/typing.rst:380
#, fuzzy
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr "在這種情況下，``MyDict`` 有一個參數，``T``。"

#: ../../library/typing.rst:382
#, fuzzy
msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any` "
"for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``::"
msgstr ""
"在不指定型別參數的情況下使用泛型類假定每個位置都是 "
":data:`Any`。在下面的示例中，``MyIterable`` "
"不是通用的，而是隱式繼承自``Iterable[Any]``::"

#: ../../library/typing.rst:390
#, fuzzy
msgid "User defined generic type aliases are also supported. Examples::"
msgstr "還支援使用者定義的通用型別別名。例子：："

#: ../../library/typing.rst:407
#, fuzzy
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ":class:`Generic` 不再有自定義元類。"

#: ../../library/typing.rst:410
#, fuzzy
msgid ""
"User-defined generics for parameter expressions are also supported via "
"parameter specification variables in the form ``Generic[P]``.  The behavior "
"is consistent with type variables' described above as parameter "
"specification variables are treated by the typing module as a specialized "
"type variable.  The one exception to this is that a list of types can be "
"used to substitute a :class:`ParamSpec`::"
msgstr ""
"參數表達式的使用者定義泛型也通過 Generic[P] 形式的參數規範變數得到支援。該行"
"為與上述型別變數一致，因為參數規範變數被型別化模組視為專門的型別變數。"
"一個例外是型別列表可用於替換 ParamSpec::"

#: ../../library/typing.rst:427
#, fuzzy
msgid ""
"Furthermore, a generic with only one parameter specification variable will "
"accept parameter lists in the forms ``X[[Type1, Type2, ...]]`` and also "
"``X[Type1, Type2, ...]`` for aesthetic reasons.  Internally, the latter is "
"converted to the former, so the following are equivalent::"
msgstr ""
"此外，只有一個參數規範變數的泛型將接受形式為“X[[Type1, Type2, ...]]”和“X["
"Type1, Type2, "
"...]”形式的參數列表審美原因。在內部，後者被轉換為前者，所以下面是等價的："

#: ../../library/typing.rst:439
#, fuzzy
msgid ""
"Do note that generics with :class:`ParamSpec` may not have correct "
"``__parameters__`` after substitution in some cases because they are "
"intended primarily for static type checking."
msgstr ""
"請注意，在某些情況下，帶有 :class:`ParamSpec` "
"的泛型在替換後可能沒有正確的`__parameters__``，因為它們主要用於靜態型別檢查。"

#: ../../library/typing.rst:443
#, fuzzy
msgid ""
":class:`Generic` can now be parameterized over parameter expressions. See :"
"class:`ParamSpec` and :pep:`612` for more details."
msgstr ""
":class:`Generic` 現在可以通過參數表達式進行參數化。有關更多詳細資訊，請參閱："
"class：`ParamSpec` 和 :pep:`612`。"

#: ../../library/typing.rst:447
#, fuzzy
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the typing module are :"
"term:`hashable` and comparable for equality."
msgstr ""
"使用者定義的泛型類可以將 ABC "
"作為基底類別，而不會發生元類衝突。不支援通用元類。參數化泛型的結果被快取，"
"並且型別模組中的大多數型別是 :term:`hashable` 並且具有可比性。"

#: ../../library/typing.rst:454
msgid "The :data:`Any` type"
msgstr ":data:`Any` 型別"

#: ../../library/typing.rst:456
#, fuzzy
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""
"一種特殊的型別是 :data:`Any`。靜態型別檢查器會將每種型別視為與 :data:`Any` "
"相容，並將 :data:`Any` 視為與每種型別相容。"

#: ../../library/typing.rst:460
#, fuzzy
msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type :data:`Any` and assign it to any variable::"
msgstr "這意味著可以對 :data:`Any` "
"型別的值執行任何操作或方法呼叫並將其分配給任何變數::"

#: ../../library/typing.rst:478
#, fuzzy
msgid ""
"Notice that no type checking is performed when assigning a value of type :"
"data:`Any` to a more precise type. For example, the static type checker did "
"not report an error when assigning ``a`` to ``s`` even though ``s`` was "
"declared to be of type :class:`str` and receives an :class:`int` value at "
"runtime!"
msgstr ""
"請注意，將 :data:`Any` 型別的值分配給更精確的型別時，不會執行型別檢查。例如，"
"靜態型別檢查器在將 ``a`` 分配給 ``s`` 時沒有報告錯誤，即使 ``s`` 被聲明為 "
":class:`str` 型別並接收到 :class:運行時的 `int` 值！"

#: ../../library/typing.rst:484
#, fuzzy
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr "此外，所有沒有回傳型別或參數型別的函式都將隱式預設使用 Any::"

#: ../../library/typing.rst:497
#, fuzzy
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr "當您需要混合動態和靜態型別的程式碼時，此行為允許 :data:`Any` 用作 *escape "
"hatch*。"

#: ../../library/typing.rst:500
#, fuzzy
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However, "
"unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""
"將 :data:`Any` 的行為與 :class:`object` 的行為進行對比。與 :data:`Any` 類似，"
"每種型別都是 :class:`object` 的子型別。然而，與 :data:`Any` "
"不同的是，反之則不然：:class:`object` *不是*所有其他型別的子型別。"

#: ../../library/typing.rst:505
#, fuzzy
msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using "
"it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""
"這意味著當一個值的型別是 :class:`object` 時，型別檢查器將拒絕對其進行的幾乎所"
"有操作，並將其分配給更特殊型別的變數（或將其用作回傳值）是一種型別錯誤。例如"
"：："

#: ../../library/typing.rst:527
#, fuzzy
msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe "
"manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr "使用 :class:`object` 以型別安全的方式指示值可以是任何型別。使用 :data:`Any` "
"表示值是動態型別的。"

#: ../../library/typing.rst:532
#, fuzzy
msgid "Nominal vs structural subtyping"
msgstr "標稱與結構子型別"

#: ../../library/typing.rst:534
#, fuzzy
msgid ""
"Initially :pep:`484` defined the Python static type system as using *nominal "
"subtyping*. This means that a class ``A`` is allowed where a class ``B`` is "
"expected if and only if ``A`` is a subclass of ``B``."
msgstr ""
"最初 :pep:`484` 將 Python 靜態型別系統定義為使用*名義子型別化*。這意味著當且"
"僅當 ``A``是 ``B``的子類別時，類 ``A``是允許的，而類 ``B``是預期的。"

#: ../../library/typing.rst:538
#, fuzzy
msgid ""
"This requirement previously also applied to abstract base classes, such as :"
"class:`~collections.abc.Iterable`. The problem with this approach is that a "
"class had to be explicitly marked to support them, which is unpythonic and "
"unlike what one would normally do in idiomatic dynamically typed Python "
"code. For example, this conforms to :pep:`484`::"
msgstr ""
"此要求以前也適用於抽象基底類別，例如 :class:`~collections.abc."
"Iterable`。這種方法的問題是必須顯式標記一個類以支援它們，這是非 Python 的，"
"不像通常在慣用的動態型別 Python 程式碼中所做的那樣。例如，這符合 :pep:`484`::"

#: ../../library/typing.rst:551
#, fuzzy
msgid ""
":pep:`544` allows to solve this problem by allowing users to write the above "
"code without explicit base classes in the class definition, allowing "
"``Bucket`` to be implicitly considered a subtype of both ``Sized`` and "
"``Iterable[int]`` by static type checkers. This is known as *structural "
"subtyping* (or static duck-typing)::"
msgstr ""
":pep:`544` 通過允許使用者在類定義中沒有顯式基底類別的情況下編寫上述程式碼來解"
"決這個問題，允許將``Bucket`` 隱式地視為``Sized`` 和`` "
"的子型別靜態型別檢查器的 "
"Iterable[int]``。這被稱為*結構子型別化*（或靜態鴨子型別化）::"

#: ../../library/typing.rst:567
#, fuzzy
msgid ""
"Moreover, by subclassing a special class :class:`Protocol`, a user can "
"define new custom protocols to fully enjoy structural subtyping (see "
"examples below)."
msgstr "此外，通過子類別化一個特殊的類 :class:`Protocol`，使用者可以定義新的自定義協"
"議以充分享受結構子型別化（參見下面的示例）。"

#: ../../library/typing.rst:572
msgid "Module contents"
msgstr "模組內容"

#: ../../library/typing.rst:574
#, fuzzy
msgid "The module defines the following classes, functions and decorators."
msgstr "該模組定義了以下類、函式和裝飾器。"

#: ../../library/typing.rst:578
#, fuzzy
msgid ""
"This module defines several types that are subclasses of pre-existing "
"standard library classes which also extend :class:`Generic` to support type "
"variables inside ``[]``. These types became redundant in Python 3.9 when the "
"corresponding pre-existing classes were enhanced to support ``[]``."
msgstr ""
"該模組定義了幾種型別，它們是預先存在的標準庫類的子類別，這些類還擴充了 "
":class:`Generic` 以支援 ``[]`` "
"中的型別變數。當相應的預先存在的類得到增強以支援“[]”時，這些型別在 Python "
"3.9 中變得多餘。"

#: ../../library/typing.rst:584
#, fuzzy
msgid ""
"The redundant types are deprecated as of Python 3.9 but no deprecation "
"warnings will be issued by the interpreter. It is expected that type "
"checkers will flag the deprecated types when the checked program targets "
"Python 3.9 or newer."
msgstr ""
"從 Python 3.9 開始，冗餘型別已被棄用，但直譯器不會發出棄用警告。"
"當檢查的程式以 Python 3.9 "
"或更新版本為目標時，預計型別檢查器將標記已棄用的型別。"

#: ../../library/typing.rst:589
#, fuzzy
msgid ""
"The deprecated types will be removed from the :mod:`typing` module in the "
"first Python version released 5 years after the release of Python 3.9.0. See "
"details in :pep:`585`—*Type Hinting Generics In Standard Collections*."
msgstr ""
"在 Python 3.9.0 發布 5 年後發布的第一個 Python 版本中，將從 :mod:`typing` "
"模組中刪除不推薦使用的型別。請參閱 :pep:`585`—*標準集合中的型別提示泛型*。"

#: ../../library/typing.rst:595
#, fuzzy
msgid "Special typing primitives"
msgstr "特殊型別原語"

#: ../../library/typing.rst:598
#, fuzzy
msgid "Special types"
msgstr "特殊型別"

#: ../../library/typing.rst:600
#, fuzzy
msgid "These can be used as types in annotations and do not support ``[]``."
msgstr "這些可以用作註釋中的型別，不支援“[]”。"

#: ../../library/typing.rst:604
#, fuzzy
msgid "Special type indicating an unconstrained type."
msgstr "表示無約束型別的特殊型別。"

#: ../../library/typing.rst:606
#, fuzzy
msgid "Every type is compatible with :data:`Any`."
msgstr "每種型別都與 :data:`Any` 相容。"

#: ../../library/typing.rst:607
#, fuzzy
msgid ":data:`Any` is compatible with every type."
msgstr ":data:`Any` 與所有型別相容。"

#: ../../library/typing.rst:609
#, fuzzy
msgid ""
":data:`Any` can now be used as a base class. This can be useful for avoiding "
"type checker errors with classes that can duck type anywhere or are highly "
"dynamic."
msgstr ":data:`Any` 現在可以用作基底類別。這對於避免型別檢查器錯誤很有用，類可以在任"
"何地方隱藏型別或高度動態。"

#: ../../library/typing.rst:616
#, fuzzy
msgid ""
"Special type that includes only literal strings. A string literal is "
"compatible with ``LiteralString``, as is another ``LiteralString``, but an "
"object typed as just ``str`` is not. A string created by composing "
"``LiteralString``-typed objects is also acceptable as a ``LiteralString``."
msgstr ""
"僅包含文字字串的特殊型別。字串文字與 ``LiteralString`` 相容，另一個“LiteralString"
"”也是如此，但型別為 ``str``的物件則不然。通過組合 ``LiteralString`` 型別的物件建立的"
"字串也可以作為 ``LiteralString`` 接受。"

#: ../../library/typing.rst:622 ../../library/typing.rst:2466
msgid "Example::"
msgstr ""
"舉例來說：\n"
"\n"
"::"

#: ../../library/typing.rst:636
#, fuzzy
msgid ""
"This is useful for sensitive APIs where arbitrary user-generated strings "
"could generate problems. For example, the two cases above that generate type "
"checker errors could be vulnerable to an SQL injection attack."
msgstr "這對於敏感的 API 很有用，其中任意使用者生成的字串可能會產生問題。例如，"
"上面兩種生成型別檢查器錯誤的情況可能容易受到 SQL 注入攻擊。"

#: ../../library/typing.rst:641
msgid "See :pep:`675` for more details."
msgstr "更多細節請見 :pep:`675`。"

#: ../../library/typing.rst:647
#, fuzzy
msgid ""
"The `bottom type <https://en.wikipedia.org/wiki/Bottom_type>`_, a type that "
"has no members."
msgstr "`底部型別 <https://en.wikipedia.org/wiki/Bottom_type>`_，一種沒有成員的型別。"

#: ../../library/typing.rst:650
#, fuzzy
msgid ""
"This can be used to define a function that should never be called, or a "
"function that never returns::"
msgstr "這可以用來定義一個永遠不會被呼叫的函式，或者一個永遠不會回傳的函式::"

#: ../../library/typing.rst:670
#, fuzzy
msgid ""
"On older Python versions, :data:`NoReturn` may be used to express the same "
"concept. ``Never`` was added to make the intended meaning more explicit."
msgstr "在較舊的 Python 版本中，:data:`NoReturn` "
"可用於表達相同的概念。新增``從不``是為了使預期的含義更加明確。"

#: ../../library/typing.rst:675
#, fuzzy
msgid "Special type indicating that a function never returns. For example::"
msgstr "指示函式永不回傳的特殊型別。例如：："

#: ../../library/typing.rst:683
#, fuzzy
msgid ""
"``NoReturn`` can also be used as a `bottom type <https://en.wikipedia.org/"
"wiki/Bottom_type>`_, a type that has no values. Starting in Python 3.11, "
"the :data:`Never` type should be used for this concept instead. Type "
"checkers should treat the two equivalently."
msgstr ""
"``NoReturn`` 也可以用作 `bottom 型別 <https://en.wikipedia.org/wiki/"
"Bottom_type>`_，一種沒有值的型別。從 Python 3.11 開始，應該使用 :data:`Never`"
" 型別來代替這個概念。型別檢查器應該同等對待這兩者。"

#: ../../library/typing.rst:694
#, fuzzy
msgid "Special type to represent the current enclosed class. For example::"
msgstr "表示當前封閉類的特殊型別。例如：："

#: ../../library/typing.rst:705
#, fuzzy
msgid ""
"This annotation is semantically equivalent to the following, albeit in a "
"more succinct fashion::"
msgstr "此註釋在語義上等同於以下內容，儘管以更簡潔的方式："

#: ../../library/typing.rst:717
#, fuzzy
msgid "In general if something currently follows the pattern of::"
msgstr "一般來說，如果某些東西當前遵循以下模式："

#: ../../library/typing.rst:724
#, fuzzy
msgid ""
"You should use :data:`Self` as calls to ``SubclassOfFoo.return_self`` would "
"have ``Foo`` as the return type and not ``SubclassOfFoo``."
msgstr ""
"您應該使用 :data:`Self` 作為對 ``SubclassOfFoo.return_self`` 的呼叫會將 "
"``Foo`` 作為回傳型別而不是 ``SubclassOfFoo``。"

#: ../../library/typing.rst:727
#, fuzzy
msgid "Other common use cases include:"
msgstr "其他常見用例包括："

#: ../../library/typing.rst:729
#, fuzzy
msgid ""
":class:`classmethod`\\s that are used as alternative constructors and return "
"instances of the ``cls`` parameter."
msgstr ":class:`classmethod`\\s 用作替代構造函式並回傳 ``cls`` 參數的實例。"

#: ../../library/typing.rst:731
#, fuzzy
msgid "Annotating an :meth:`~object.__enter__` method which returns self."
msgstr "註釋 :meth:`~object.__enter__` 回傳自身的方法。"

#: ../../library/typing.rst:733
msgid "See :pep:`673` for more details."
msgstr "更多細節請見 :pep:`673`。"

#: ../../library/typing.rst:739
#, fuzzy
msgid ""
"Special annotation for explicitly declaring a :ref:`type alias <type-"
"aliases>`. For example::"
msgstr "用於顯式聲明 :ref:`type alias <type-aliases>` 的特殊註釋。例如：："

#: ../../library/typing.rst:746
#, fuzzy
msgid "See :pep:`613` for more details about explicit type aliases."
msgstr "有關顯式型別別名的更多詳細資訊，請參閱 :pep:`613`。"

#: ../../library/typing.rst:751
#, fuzzy
msgid "Special forms"
msgstr "特殊表格"

#: ../../library/typing.rst:753
#, fuzzy
msgid ""
"These can be used as types in annotations using ``[]``, each having a unique "
"syntax."
msgstr "這些可以用作使用“[]”的註釋中的型別，每個都有獨特的語法。"

#: ../../library/typing.rst:757
#, fuzzy
msgid ""
"Tuple type; ``Tuple[X, Y]`` is the type of a tuple of two items with the "
"first item of type X and the second of type Y. The type of the empty tuple "
"can be written as ``Tuple[()]``."
msgstr ""
"元組型別； ``Tuple[X, Y]`` 是一個包含兩項的元組型別，第一項是 X 型別，"
"第二項是 Y 型別。空元組的型別可以寫成 ``Tuple[()] ``。"

#: ../../library/typing.rst:761
#, fuzzy
msgid ""
"Example: ``Tuple[T1, T2]`` is a tuple of two elements corresponding to type "
"variables T1 and T2.  ``Tuple[int, float, str]`` is a tuple of an int, a "
"float and a string."
msgstr ""
"示例：``Tuple[T1, T2]`` 是對應於型別變數 T1 和 T2 的兩個元素的元組。 ``Tuple["
"int, float, str]`` 是一個 int、float 和 string 的元組。"

#: ../../library/typing.rst:765
#, fuzzy
msgid ""
"To specify a variable-length tuple of homogeneous type, use literal "
"ellipsis, e.g. ``Tuple[int, ...]``. A plain :data:`Tuple` is equivalent to "
"``Tuple[Any, ...]``, and in turn to :class:`tuple`."
msgstr ""
"要指定同類型別的可變長度元組，請使用文字省略號，例如``元組 [int，...]``。"
"一個普通的 :data:`Tuple` 等價於 ``Tuple[Any, ...]``，然後又等價於 "
":class:`tuple`。"

#: ../../library/typing.rst:769
#, fuzzy
msgid ""
":class:`builtins.tuple <tuple>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.tuple <tuple>` 現在支援下標 (``[]``)。參見 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:775
#, fuzzy
msgid ""
"Union type; ``Union[X, Y]`` is equivalent to ``X | Y`` and means either X or "
"Y."
msgstr "聯盟型別； ``Union[X, Y]`` 等同於 ``X | Y`` 表示 X 或 Y。"

#: ../../library/typing.rst:777
#, fuzzy
msgid ""
"To define a union, use e.g. ``Union[int, str]`` or the shorthand ``int | "
"str``. Using that shorthand is recommended. Details:"
msgstr "要定義聯合，請使用例如``Union[int, str]`` 或簡寫 ``int "
"|海峽``。建議使用該速記。細節："

#: ../../library/typing.rst:779
#, fuzzy
msgid "The arguments must be types and there must be at least one."
msgstr "參數必須是型別並且必須至少有一個。"

#: ../../library/typing.rst:781
#, fuzzy
msgid "Unions of unions are flattened, e.g.::"
msgstr "工會的工會被扁平化，例如::"

#: ../../library/typing.rst:785
#, fuzzy
msgid "Unions of a single argument vanish, e.g.::"
msgstr "單個參數的並集消失了，例如：："

#: ../../library/typing.rst:789
#, fuzzy
msgid "Redundant arguments are skipped, e.g.::"
msgstr "跳過冗餘參數，例如：："

#: ../../library/typing.rst:793
#, fuzzy
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr "比較聯合時，忽略參數順序，例如：："

#: ../../library/typing.rst:797
#, fuzzy
msgid "You cannot subclass or instantiate a ``Union``."
msgstr "您不能子類別化或實例化 ``Union``。"

#: ../../library/typing.rst:799
msgid "You cannot write ``Union[X][Y]``."
msgstr "你不能寫成 ``Union[X][Y]``。"

#: ../../library/typing.rst:801
#, fuzzy
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr "不要在運行時從聯合中刪除顯式子類別。"

#: ../../library/typing.rst:804
#, fuzzy
msgid ""
"Unions can now be written as ``X | Y``. See :ref:`union type "
"expressions<types-union>`."
msgstr "聯合現在可以寫成``X | Y``。參見 :ref:`聯合型別表達式<types-union>`。"

#: ../../library/typing.rst:810
#, fuzzy
msgid "Optional type."
msgstr "可選型別。"

#: ../../library/typing.rst:812
#, fuzzy
msgid "``Optional[X]`` is equivalent to ``X | None`` (or ``Union[X, None]``)."
msgstr "``Optional[X]`` 等同於 ``X |無（或 ``Union[X, None]``）。"

#: ../../library/typing.rst:814
#, fuzzy
msgid ""
"Note that this is not the same concept as an optional argument, which is one "
"that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""
"請注意，這與可選參數的概念不同，可選參數具有預設值。"
"具有預設值的可選參數不需要在其型別註釋上使用 ``Optional`` "
"限定符，因為它是可選的。例如：："

#: ../../library/typing.rst:822
#, fuzzy
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr "另一方面，如果允許顯式值為 ``None``，則使用 ``Optional`` 是合適的，無論參數是否可選"
"。例如：："

#: ../../library/typing.rst:829
#, fuzzy
msgid ""
"Optional can now be written as ``X | None``. See :ref:`union type "
"expressions<types-union>`."
msgstr "可選現在可以寫成``X |沒有``。參見 :ref:`聯合型別表達式<types-union>`。"

#: ../../library/typing.rst:835
#, fuzzy
msgid "Callable type; ``Callable[[int], str]`` is a function of (int) -> str."
msgstr "可呼叫型別； ``Callable[[int], str]`` 是 (int) -> str 的函式。"

#: ../../library/typing.rst:837
#, fuzzy
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types or an ellipsis; the return type must be a single type."
msgstr "訂閱語法必須始終與兩個值一起使用：參數列表和回傳型別。參數列表必須是型別列表"
"或省略號；回傳型別必須是單一型別。"

#: ../../library/typing.rst:842
#, fuzzy
msgid ""
"There is no syntax to indicate optional or keyword arguments; such function "
"types are rarely used as callback types. ``Callable[..., ReturnType]`` "
"(literal ellipsis) can be used to type hint a callable taking any number of "
"arguments and returning ``ReturnType``.  A plain :data:`Callable` is "
"equivalent to ``Callable[..., Any]``, and in turn to :class:`collections.abc."
"Callable`."
msgstr ""
"沒有語法來指示可選參數或關鍵字參數；這種函式型別很少用作回呼型別。 "
"``Callable[..., ReturnType]``（文字省略號）"
"可用於型別提示一個接受任意數量參數並回傳 ``ReturnType`` 的可呼叫物件。"
"一個普通的 :data:`Callable` 等同於 ``Callable[..., Any]``，進而相當於 "
":class:`collections.abc.Callable`。"

#: ../../library/typing.rst:858
#, fuzzy
msgid ""
":class:`collections.abc.Callable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Callable` 現在支援下標 (``[]``)。參見 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:867
#, fuzzy
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provide "
"examples of usage with ``Callable``."
msgstr ":class:`ParamSpec` 和 :class:`Concatenate` 的文檔提供了使用 ``Callable`` "
"的示例。"

#: ../../library/typing.rst:872
#, fuzzy
msgid ""
"Used with :data:`Callable` and :class:`ParamSpec` to type annotate a higher "
"order callable which adds, removes, or transforms parameters of another "
"callable.  Usage is in the form ``Concatenate[Arg1Type, Arg2Type, ..., "
"ParamSpecVariable]``. ``Concatenate`` is currently only valid when used as "
"the first argument to a :data:`Callable`. The last parameter to "
"``Concatenate`` must be a :class:`ParamSpec` or ellipsis (``...``)."
msgstr ""
"與 :data:`Callable` 和 :class:`ParamSpec` 一起使用來型別註釋高階可呼叫物件，"
"它新增、刪除或轉換另一個可呼叫物件的參數。用法的形式為“Concatenate[Arg1Type, "
"Arg2Type, ..., ParamSpecVariable]”。 ``Concatenate`` 目前僅在用作 "
":data:`Callable` 的第一個參數時有效。 ``Concatenate`` "
"的最後一個參數必須是 :class:`ParamSpec` 或省略號（``...``）。"

#: ../../library/typing.rst:880
#, fuzzy
msgid ""
"For example, to annotate a decorator ``with_lock`` which provides a :class:"
"`threading.Lock` to the decorated function,  ``Concatenate`` can be used to "
"indicate that ``with_lock`` expects a callable which takes in a ``Lock`` as "
"the first argument, and returns a callable with a different type signature.  "
"In this case, the :class:`ParamSpec` indicates that the returned callable's "
"parameter types are dependent on the parameter types of the callable being "
"passed in::"
msgstr ""
"例如，要註釋裝飾器 ``with_lock`` 為裝飾函式提供 :class:`threading."
"Lock`，``Concatenate`` 可用於指示 ``with_lock`` 需要一個可呼叫物件``Lock`` "
"作為第一個參數，並回傳具有不同型別簽名的可呼叫物件。在這種情況下，ParamSpec "
"表示回傳的可呼叫物件的參數型別取決於傳入的可呼叫物件的參數型別："

#: ../../library/typing.rst:919 ../../library/typing.rst:1507
#, fuzzy
msgid ""
":pep:`612` -- Parameter Specification Variables (the PEP which introduced "
"``ParamSpec`` and ``Concatenate``)."
msgstr ":pep:`612` -- 參數規範變數（引入 ``ParamSpec`` 和 ``Concatenate`` 的 PEP）。"

#: ../../library/typing.rst:921
msgid ":class:`ParamSpec` and :class:`Callable`."
msgstr ":class:`ParamSpec` 和 :class:`Callable`\\ 。"

#: ../../library/typing.rst:926
#, fuzzy
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``Type[C]`` may accept values that are "
"classes themselves -- specifically, it will accept the *class object* of "
"``C``. For example::"
msgstr ""
"用 ``C``註釋的變數可以接受 ``C``型別的值。相反，用 ``Type[C]`` "
"註釋的變數可以接受本身是類的值——具體來說，它將接受 ``C`` 的*類物件*。例如：："

#: ../../library/typing.rst:935
#, fuzzy
msgid "Note that ``Type[C]`` is covariant::"
msgstr "請注意，``Type[C]`` 是協變的："

#: ../../library/typing.rst:947
#, fuzzy
msgid ""
"The fact that ``Type[C]`` is covariant implies that all subclasses of ``C`` "
"should implement the same constructor signature and class method signatures "
"as ``C``. The type checker should flag violations of this, but should also "
"allow constructor calls in subclasses that match the constructor calls in "
"the indicated base class. How the type checker is required to handle this "
"particular case may change in future revisions of :pep:`484`."
msgstr ""
"``Type[C]`` 是協變的事實意味著 ``C`` 的所有子類別都應該實作與 ``C`` 相同的構"
"造函式簽名和類方法簽名。型別檢查器應該標記違反這一點的行為，但也應該允許子類"
"別中的構造函式呼叫與指定基底類別中的構造函式呼叫相匹配。"
"型別檢查器如何處理這種特殊情況可能會在 :pep:`484` 的未來修訂版中發生變化。"

#: ../../library/typing.rst:955
#, fuzzy
msgid ""
"The only legal parameters for :class:`Type` are classes, :data:`Any`, :ref:"
"`type variables <generics>`, and unions of any of these types. For example::"
msgstr ""
":class:`Type` 的唯一合法參數是類、:data:`Any`、:ref:`型別變數 <generics>` "
"以及任何這些型別的聯合。例如：："

#: ../../library/typing.rst:961
#, fuzzy
msgid ""
"``Type[Any]`` is equivalent to ``Type`` which in turn is equivalent to "
"``type``, which is the root of Python's metaclass hierarchy."
msgstr "``Type[Any]`` 等價於 ``Type``，後者又等價於 ``type``，後者是 Python "
"元類層次結構的根。"

#: ../../library/typing.rst:966
#, fuzzy
msgid ""
":class:`builtins.type <type>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.type <type>` 現在支援下標 (``[]``)。參見 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:972
#, fuzzy
msgid ""
"A type that can be used to indicate to type checkers that the corresponding "
"variable or function parameter has a value equivalent to the provided "
"literal (or one of several literals). For example::"
msgstr "一種型別，可用於向型別檢查器指示相應的變數或函式參數具有與提供的文字（或多個"
"文字之一）等效的值。例如：："

#: ../../library/typing.rst:986
#, fuzzy
msgid ""
"``Literal[...]`` cannot be subclassed. At runtime, an arbitrary value is "
"allowed as type argument to ``Literal[...]``, but type checkers may impose "
"restrictions. See :pep:`586` for more details about literal types."
msgstr ""
"``Literal[...]`` 不能被子類別化。在運行時，允許將任意值作為“Literal[...]”的型"
"別參數，但型別檢查器可能會施加限制。有關文字型別的更多詳細資訊，請參閱 "
":pep:`586`。"

#: ../../library/typing.rst:992
#, fuzzy
msgid ""
"``Literal`` now de-duplicates parameters.  Equality comparisons of "
"``Literal`` objects are no longer order dependent. ``Literal`` objects will "
"now raise a :exc:`TypeError` exception during equality comparisons if one of "
"their parameters are not :term:`hashable`."
msgstr ""
"``Literal`` 現在刪除重複參數。 ``Literal`` 物件的相等比較不再依賴於順序。 "
"``Literal`` 物件現在將在相等比較期間引發 :exc:`TypeError` 例外，"
"如果它們的參數之一不是 :term:`hashable`。"

#: ../../library/typing.rst:1000
#, fuzzy
msgid "Special type construct to mark class variables."
msgstr "用於標記類變數的特殊型別構造。"

#: ../../library/typing.rst:1002
#, fuzzy
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr "正如 :pep:`526` 中所介紹的，包裹在 ClassVar "
"中的變數註釋表示給定的屬性旨在用作類變數，不應在該類的實例上設定。用法：："

#: ../../library/typing.rst:1010
#, fuzzy
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ":data:`ClassVar` 只接受型別，不能進一步訂閱。"

#: ../../library/typing.rst:1012
#, fuzzy
msgid ""
":data:`ClassVar` is not a class itself, and should not be used with :func:"
"`isinstance` or :func:`issubclass`. :data:`ClassVar` does not change Python "
"runtime behavior, but it can be used by third-party type checkers. For "
"example, a type checker might flag the following code as an error::"
msgstr ""
":data:`ClassVar` 本身不是類，不應與 :func:`isinstance` 或 :func:`issubclass` "
"一起使用。 :data:`ClassVar` 不會改變 Python 運行時行為，但它可以被第三方型別"
"檢查器使用。例如，型別檢查器可能會將以下程式碼標記為錯誤："

#: ../../library/typing.rst:1026
#, fuzzy
msgid ""
"A special typing construct to indicate to type checkers that a name cannot "
"be re-assigned or overridden in a subclass. For example::"
msgstr "一種特殊的型別構造，用於向型別檢查器指示不能在子類別中重新分配或覆蓋名稱。例"
"如：："

#: ../../library/typing.rst:1038 ../../library/typing.rst:2707
#, fuzzy
msgid ""
"There is no runtime checking of these properties. See :pep:`591` for more "
"details."
msgstr "這些屬性沒有運行時檢查。有關更多詳細資訊，請參見 :pep:`591`。"

#: ../../library/typing.rst:1047
#, fuzzy
msgid ""
"Special typing constructs that mark individual keys of a :class:`TypedDict` "
"as either required or non-required respectively."
msgstr "將 TypedDict 的各個鍵分別標記為必需或非必需的特殊型別構造。"

#: ../../library/typing.rst:1050
msgid "See :class:`TypedDict` and :pep:`655` for more details."
msgstr "更多細節請見 :class:`TypedDict` 與 :pep:`655`。"

#: ../../library/typing.rst:1056
#, fuzzy
msgid ""
"A type, introduced in :pep:`593` (``Flexible function and variable "
"annotations``), to decorate existing types with context-specific metadata "
"(possibly multiple pieces of it, as ``Annotated`` is variadic). "
"Specifically, a type ``T`` can be annotated with metadata ``x`` via the "
"typehint ``Annotated[T, x]``. This metadata can be used for either static "
"analysis or at runtime. If a library (or tool) encounters a typehint "
"``Annotated[T, x]`` and has no special logic for metadata ``x``, it should "
"ignore it and simply treat the type as ``T``. Unlike the ``no_type_check`` "
"functionality that currently exists in the ``typing`` module which "
"completely disables typechecking annotations on a function or a class, the "
"``Annotated`` type allows for both static typechecking of ``T`` (which can "
"safely ignore ``x``) together with runtime access to ``x`` within a specific "
"application."
msgstr ""
"一種型別，在 :pep:`593`（``靈活的函式和變數註釋``）中引入，用於使用特定於上下"
"文的元資料（可能是多個元資料，因為 ``Annotated`` "
"是可變的）裝飾現有型別。具體來說，型別 ``T``可以通過型別提示“Annotated[T, x]”用"
"元資料 ``x``進行註釋。此元資料可用於靜態分析或運行時。如果庫（或工具）遇到型別提"
"示“Annotated[T, "
"x]”並且沒有元資料 ``x``的特殊邏輯，它應該忽略它並簡單地將型別視為 ``T``。與 "
"``typing`` 模組中當前存在的 ``no_type_check`` "
"功能完全禁用函式或類上的型別檢查註釋不同，``Annotated`` 型別允許 ``T`` "
"的靜態型別檢查（它可以安全地忽略 ``x``) 以及在特定應用程式中對 ``x`` "
"的運行時訪問。"

#: ../../library/typing.rst:1070
#, fuzzy
msgid ""
"Ultimately, the responsibility of how to interpret the annotations (if at "
"all) is the responsibility of the tool or library encountering the "
"``Annotated`` type. A tool or library encountering an ``Annotated`` type can "
"scan through the annotations to determine if they are of interest (e.g., "
"using ``isinstance()``)."
msgstr ""
"最終，如何解釋註釋（如果有的話）的責任是遇到 ``Annotated`` "
"型別的工具或庫的責任。遇到 ``Annotated`` "
"型別的工具或庫可以掃描註釋以確定它們是否感興趣（例如，使用 "
"``isinstance()``）。"

#: ../../library/typing.rst:1076
#, fuzzy
msgid ""
"When a tool or a library does not support annotations or encounters an "
"unknown annotation it should just ignore it and treat annotated type as the "
"underlying type."
msgstr "當工具或庫不支援註釋或遇到未知註釋時，它應該忽略它並將註釋型別視為基礎型別。"

#: ../../library/typing.rst:1080
#, fuzzy
msgid ""
"It's up to the tool consuming the annotations to decide whether the client "
"is allowed to have several annotations on one type and how to merge those "
"annotations."
msgstr "由使用註釋的工具來決定是否允許客戶端在一種型別上有多個註釋以及如何合併這些註"
"釋。"

#: ../../library/typing.rst:1084
#, fuzzy
msgid ""
"Since the ``Annotated`` type allows you to put several annotations of the "
"same (or different) type(s) on any node, the tools or libraries consuming "
"those annotations are in charge of dealing with potential duplicates. For "
"example, if you are doing value range analysis you might allow this::"
msgstr ""
"由於 ``Annotated`` 型別允許您在任何節點上放置多個相同（或不同）型別的註釋，因"
"此使用這些註釋的工具或庫負責處理潛在的重複項。例如，如果您正在進行值範圍分析"
"，您可能會允許這樣做："

#: ../../library/typing.rst:1093
#, fuzzy
msgid ""
"Passing ``include_extras=True`` to :func:`get_type_hints` lets one access "
"the extra annotations at runtime."
msgstr "將 ``include_extras=True`` 傳遞給 :func:`get_type_hints` "
"允許在運行時訪問額外的註釋。"

#: ../../library/typing.rst:1096
#, fuzzy
msgid "The details of the syntax:"
msgstr "語法細節："

#: ../../library/typing.rst:1098
#, fuzzy
msgid "The first argument to ``Annotated`` must be a valid type"
msgstr "``Annotated`` 的第一個參數必須是有效型別"

#: ../../library/typing.rst:1100
#, fuzzy
msgid ""
"Multiple type annotations are supported (``Annotated`` supports variadic "
"arguments)::"
msgstr "支援多種型別註釋（``Annotated`` 支援可變參數）::"

#: ../../library/typing.rst:1105
#, fuzzy
msgid ""
"``Annotated`` must be called with at least two arguments "
"( ``Annotated[int]`` is not valid)"
msgstr "``Annotated`` 必須使用至少兩個參數呼叫（``Annotated[int]`` 無效）"

#: ../../library/typing.rst:1108
#, fuzzy
msgid ""
"The order of the annotations is preserved and matters for equality checks::"
msgstr "註釋的順序被保留並且對等式檢查很重要::"

#: ../../library/typing.rst:1115
#, fuzzy
msgid ""
"Nested ``Annotated`` types are flattened, with metadata ordered starting "
"with the innermost annotation::"
msgstr "嵌套的“註釋”型別被展平，元資料從最裡面的註釋開始排序："

#: ../../library/typing.rst:1122
#, fuzzy
msgid "Duplicated annotations are not removed::"
msgstr "不刪除重複的註釋::"

#: ../../library/typing.rst:1128
#, fuzzy
msgid "``Annotated`` can be used with nested and generic aliases::"
msgstr "``Annotated`` 可以與嵌套和通用別名一起使用::"

#: ../../library/typing.rst:1141
#, fuzzy
msgid ""
"Special typing form used to annotate the return type of a user-defined type "
"guard function.  ``TypeGuard`` only accepts a single type argument. At "
"runtime, functions marked this way should return a boolean."
msgstr ""
"用於註釋使用者定義型別保護函式的回傳型別的特殊型別形式。 ``TypeGuard`` "
"只接受一個型別參數。在運行時，以這種方式標記的函式應該回傳一個布爾值。"

#: ../../library/typing.rst:1145
#, fuzzy
msgid ""
"``TypeGuard`` aims to benefit *type narrowing* -- a technique used by static "
"type checkers to determine a more precise type of an expression within a "
"program's code flow.  Usually type narrowing is done by analyzing "
"conditional code flow and applying the narrowing to a block of code.  The "
"conditional expression here is sometimes referred to as a \"type guard\"::"
msgstr ""
"``TypeGuard`` 旨在使 *type narrowing* 受益——一種靜態型別檢查器用來確定程式程"
"式碼流中更精確的表達式型別的技術。通常型別縮小是通過分析條件程式碼流並將縮小"
"應用於程式碼塊來完成的。這裡的條件表達式有時被稱為“型別保護”::"

#: ../../library/typing.rst:1160
#, fuzzy
msgid ""
"Sometimes it would be convenient to use a user-defined boolean function as a "
"type guard.  Such a function should use ``TypeGuard[...]`` as its return "
"type to alert static type checkers to this intention."
msgstr ""
"有時使用使用者定義的布爾函式作為型別保護會很方便。這樣的函式應該使用 "
"``TypeGuard[...]`` 作為它的回傳型別來警告靜態型別檢查器這個意圖。"

#: ../../library/typing.rst:1164
#, fuzzy
msgid ""
"Using  ``-> TypeGuard`` tells the static type checker that for a given "
"function:"
msgstr "使用 ``-> TypeGuard`` 告訴靜態型別檢查器對於給定的函式："

#: ../../library/typing.rst:1167
#, fuzzy
msgid "The return value is a boolean."
msgstr "回傳值是一個布爾值。"

#: ../../library/typing.rst:1168
#, fuzzy
msgid ""
"If the return value is ``True``, the type of its argument is the type inside "
"``TypeGuard``."
msgstr "如果回傳值為 ``True``，則其參數型別為 ``TypeGuard`` 中的型別。"

#: ../../library/typing.rst:1185
#, fuzzy
msgid ""
"If ``is_str_list`` is a class or instance method, then the type in "
"``TypeGuard`` maps to the type of the second parameter after ``cls`` or "
"``self``."
msgstr "如果 is_str_list 是類或實例方法，則 TypeGuard 中的型別映射到 cls 或 self "
"之後的第二個參數的型別。"

#: ../../library/typing.rst:1189
#, fuzzy
msgid ""
"In short, the form ``def foo(arg: TypeA) -> TypeGuard[TypeB]: ...``, means "
"that if ``foo(arg)`` returns ``True``, then ``arg`` narrows from ``TypeA`` "
"to ``TypeB``."
msgstr ""
"簡而言之，``def foo(arg: Type) -> Type Guard[Type B]: ...`` 的形式意味著如果 "
"``foo(arg)`` 回傳 ``True``，則 `` arg`` 從 ``TypeA`` 縮小到 ``TypeB``。"

#: ../../library/typing.rst:1195
#, fuzzy
msgid ""
"``TypeB`` need not be a narrower form of ``TypeA`` -- it can even be a wider "
"form. The main reason is to allow for things like narrowing ``list[object]`` "
"to ``list[str]`` even though the latter is not a subtype of the former, "
"since ``list`` is invariant. The responsibility of writing type-safe type "
"guards is left to the user."
msgstr ""
"``TypeB`` 不必是 ``TypeA`` 的更窄形式——它甚至可以是更寬的形式。"
"主要原因是允許將 ``list[object]`` 縮小為 "
"``list[str]``，即使後者不是前者的子型別，因為 ``list`` "
"是不變的。編寫型別安全型別保護的責任留給了使用者。"

#: ../../library/typing.rst:1201
#, fuzzy
msgid ""
"``TypeGuard`` also works with type variables.  See :pep:`647` for more "
"details."
msgstr "``TypeGuard`` 也適用於型別變數。有關更多詳細資訊，請參閱 :pep:`647`。"

#: ../../library/typing.rst:1207
#, fuzzy
msgid "Building generic types"
msgstr "構建通用型別"

#: ../../library/typing.rst:1209
#, fuzzy
msgid ""
"These are not used in annotations. They are building blocks for creating "
"generic types."
msgstr "這些不用於註釋。它們是建立通用型別的構建塊。"

#: ../../library/typing.rst:1213
#, fuzzy
msgid "Abstract base class for generic types."
msgstr "泛型型別的抽象基底類別。"

#: ../../library/typing.rst:1215
#, fuzzy
msgid ""
"A generic type is typically declared by inheriting from an instantiation of "
"this class with one or more type variables. For example, a generic mapping "
"type might be defined as::"
msgstr "泛型型別通常通過從具有一個或多個型別變數的此類的實例化繼承來聲明。例如，通用"
"映射型別可能定義為："

#: ../../library/typing.rst:1224
#, fuzzy
msgid "This class can then be used as follows::"
msgstr "然後可以按如下方式使用此類："

#: ../../library/typing.rst:1237
#, fuzzy
msgid "Type variable."
msgstr "型別變數。"

#: ../../library/typing.rst:1239 ../../library/typing.rst:1436
#: ../../library/typing.rst:1629
msgid "Usage::"
msgstr ""
"用法：\n"
"\n"
"::"

#: ../../library/typing.rst:1245
#, fuzzy
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function definitions.  See :class:`Generic` for more information on generic "
"types.  Generic functions work as follows::"
msgstr ""
"型別變數的存在主要是為了靜態型別檢查器的好處。它們充當泛型型別和泛型函式定義"
"的參數。有關泛型型別的更多資訊，請參見 :class:`Generic`。通用函式的工作方式如"
"下："

#: ../../library/typing.rst:1265
#, fuzzy
msgid ""
"Note that type variables can be *bound*, *constrained*, or neither, but "
"cannot be both bound *and* constrained."
msgstr "請注意，型別變數可以是*綁定*、*約束*或兩者都不是，但不能同時被綁定*和*約束。"

#: ../../library/typing.rst:1268
#, fuzzy
msgid ""
"Bound type variables and constrained type variables have different semantics "
"in several important ways. Using a *bound* type variable means that the "
"``TypeVar`` will be solved using the most specific type possible::"
msgstr ""
"綁定型別變數和約束型別變數在幾個重要方面具有不同的語義。使用 *bound* "
"型別變數意味著 ``TypeVar`` 將使用盡可能具體的型別來解決::"

#: ../../library/typing.rst:1283
#, fuzzy
msgid ""
"Type variables can be bound to concrete types, abstract types (ABCs or "
"protocols), and even unions of types::"
msgstr "型別變數可以綁定到具體型別、抽像型別（ABC 或協定），甚至型別的聯合::"

#: ../../library/typing.rst:1289
#, fuzzy
msgid ""
"Using a *constrained* type variable, however, means that the ``TypeVar`` can "
"only ever be solved as being exactly one of the constraints given::"
msgstr "但是，使用 *constrained* 型別變數意味著 ``TypeVar`` "
"只能作為給定的約束之一來解決："

#: ../../library/typing.rst:1300
#, fuzzy
msgid ""
"At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`.  In general, :"
"func:`isinstance` and :func:`issubclass` should not be used with types."
msgstr ""
"在運行時，``isinstance(x, T)`` 會引發 :exec:`TypeError`。一般來說， "
":func:`isinstance` 和 :func:`issubclass` 不應與型別一起使用。"

#: ../../library/typing.rst:1303
#, fuzzy
msgid ""
"Type variables may be marked covariant or contravariant by passing "
"``covariant=True`` or ``contravariant=True``.  See :pep:`484` for more "
"details.  By default, type variables are invariant."
msgstr ""
"型別變數可以通過傳遞“covariant=True”或“contravariant=True”來標記為協變或逆變"
"。有關更多詳細資訊，請參見 :pep:`484`。預設情況下，型別變數是不變的。"

#: ../../library/typing.rst:1309
#, fuzzy
msgid ""
"Type variable tuple. A specialized form of :class:`type variable <TypeVar>` "
"that enables *variadic* generics."
msgstr "型別變數元組。一種特殊形式的 :class:`type variable <TypeVar>` 啟用 *variadic*"
" 泛型。"

#: ../../library/typing.rst:1312
#, fuzzy
msgid ""
"A normal type variable enables parameterization with a single type. A type "
"variable tuple, in contrast, allows parameterization with an *arbitrary* "
"number of types by acting like an *arbitrary* number of type variables "
"wrapped in a tuple. For example::"
msgstr ""
"普通型別變數啟用單一型別的參數化。相比之下，型別變數元組允許使用*任意*數量的"
"型別進行參數化，就像包裝在元組中的*任意*數量的型別變數一樣。例如：："

#: ../../library/typing.rst:1340
#, fuzzy
msgid ""
"Note the use of the unpacking operator ``*`` in ``tuple[T, *Ts]``. "
"Conceptually, you can think of ``Ts`` as a tuple of type variables ``(T1, "
"T2, ...)``. ``tuple[T, *Ts]`` would then become ``tuple[T, *(T1, "
"T2, ...)]``, which is equivalent to ``tuple[T, T1, T2, ...]``. (Note that in "
"older versions of Python, you might see this written using :data:`Unpack "
"<Unpack>` instead, as ``Unpack[Ts]``.)"
msgstr ""
"注意在 ``tuple[T, *Ts]`` 中使用解包運算符 "
"``*``。從概念上講，您可以將 ``Ts``視為型別變數“(T1, T2, ...)”的元組。 ``tuple["
"T, *Ts]`` 將變為 ``tuple[T, *(T1, T2, ...)]``，相當於 ``tuple[T, T1, T2, .. "
".]``。 （請注意，在舊版本的 Python 中，您可能會看到使用 :data:`Unpack "
"<Unpack>` 編寫的，作為 ``Unpack[Ts]``。）"

#: ../../library/typing.rst:1348
#, fuzzy
msgid ""
"Type variable tuples must *always* be unpacked. This helps distinguish type "
"variable tuples from normal type variables::"
msgstr "型別變數元組必須*總是*被解包。這有助於區分型別變數元組和普通型別變數::"

#: ../../library/typing.rst:1355
#, fuzzy
msgid ""
"Type variable tuples can be used in the same contexts as normal type "
"variables. For example, in class definitions, arguments, and return types::"
msgstr "型別變數元組可以在與普通型別變數相同的上下文中使用。例如，在類定義、參數和回"
"傳型別中："

#: ../../library/typing.rst:1364
#, fuzzy
msgid ""
"Type variable tuples can be happily combined with normal type variables::"
msgstr "型別變數元組可以愉快地與普通型別變數組合::"

#: ../../library/typing.rst:1377
#, fuzzy
msgid ""
"However, note that at most one type variable tuple may appear in a single "
"list of type arguments or type parameters::"
msgstr "但是，請注意，最多一個型別變數元組可能出現在單個型別參數或型別參數列表中："

#: ../../library/typing.rst:1384
#, fuzzy
msgid ""
"Finally, an unpacked type variable tuple can be used as the type annotation "
"of ``*args``::"
msgstr "最後，一個解包的型別變數元組可以用作 ``*args`` 的型別註釋::"

#: ../../library/typing.rst:1394
#, fuzzy
msgid ""
"In contrast to non-unpacked annotations of ``*args`` - e.g. ``*args: int``, "
"which would specify that *all* arguments are ``int`` - ``*args: *Ts`` "
"enables reference to the types of the *individual* arguments in ``*args``. "
"Here, this allows us to ensure the types of the ``*args`` passed to "
"``call_soon`` match the types of the (positional) arguments of ``callback``."
msgstr ""
"與 ``*args`` 的非解壓註釋相比——例如``*args: int``，這將指定 *所有* 參數都是 "
"``int`` - ``*args: *Ts`` 啟用對 ``*args` 中*個別*參數型別的引用`。在這裡，這"
"使我們能夠確保傳遞給“call_soon”的“*args”型別與 ``callback`` 的（位置）參數型別相"
"匹配。"

#: ../../library/typing.rst:1401
#, fuzzy
msgid "See :pep:`646` for more details on type variable tuples."
msgstr "有關型別變數元組的更多詳細資訊，請參閱 :pep:`646`。"

#: ../../library/typing.rst:1407
#, fuzzy
msgid ""
"A typing operator that conceptually marks an object as having been unpacked. "
"For example, using the unpack operator ``*`` on a :class:`type variable "
"tuple <TypeVarTuple>` is equivalent to using ``Unpack`` to mark the type "
"variable tuple as having been unpacked::"
msgstr ""
"一種型別運算符，在概念上將物件標記為已解包。例如，在型別變數元組 "
"<TypeVarTuple> "
"上使用解包運算符 ``*``等同於使用 ``Unpack``將型別變數元組標記為已解包::"

#: ../../library/typing.rst:1417
#, fuzzy
msgid ""
"In fact, ``Unpack`` can be used interchangeably with ``*`` in the context of "
"types. You might see ``Unpack`` being used explicitly in older versions of "
"Python, where ``*`` couldn't be used in certain places::"
msgstr ""
"事實上，``Unpack`` 在型別上下文中可以與``*`` 互換使用。您可能會看到 "
"``Unpack`` 在舊版本的 Python 中被顯式使用，其中 ``*`` 不能在某些地方使用::"

#: ../../library/typing.rst:1433
#, fuzzy
msgid ""
"Parameter specification variable.  A specialized version of :class:`type "
"variables <TypeVar>`."
msgstr "參數規範變數。 :class:`type variables <TypeVar>` 的特殊版本。"

#: ../../library/typing.rst:1440
#, fuzzy
msgid ""
"Parameter specification variables exist primarily for the benefit of static "
"type checkers.  They are used to forward the parameter types of one callable "
"to another callable -- a pattern commonly found in higher order functions "
"and decorators.  They are only valid when used in ``Concatenate``, or as the "
"first argument to ``Callable``, or as parameters for user-defined Generics.  "
"See :class:`Generic` for more information on generic types."
msgstr ""
"參數規範變數的存在主要是為了靜態型別檢查器的好處。它們用於將一個可呼叫物件的"
"參數型別轉發到另一個可呼叫物件——一種常見於高階函式和裝飾器中的模式。它們僅在"
"用於 ``Concatenate`` ，或作為 ``Callable`` 的第一個參數，或作為使用者定義泛型的參數時"
"有效。有關泛型型別的更多資訊，請參見 :class:`Generic`。"

#: ../../library/typing.rst:1447
#, fuzzy
msgid ""
"For example, to add basic logging to a function, one can create a decorator "
"``add_logging`` to log function calls.  The parameter specification variable "
"tells the type checker that the callable passed into the decorator and the "
"new callable returned by it have inter-dependent type parameters::"
msgstr ""
"例如，要向函式新增基本日誌記錄，可以建立裝飾器“add_logging”來記錄函式呼叫。參"
"數規範變數告訴型別檢查器，傳遞給裝飾器的可呼叫物件和它回傳的新可呼叫物件具有"
"相互依賴的型別參數::"

#: ../../library/typing.rst:1471
#, fuzzy
msgid ""
"Without ``ParamSpec``, the simplest way to annotate this previously was to "
"use a :class:`TypeVar` with bound ``Callable[..., Any]``.  However this "
"causes two problems:"
msgstr ""
"如果沒有 ``ParamSpec``，以前對此進行註釋的最簡單方法是使用綁定了 ``Callable["
"..., Any]`` 的 :class:`TypeVar`。然而這會導致兩個問題："

#: ../../library/typing.rst:1475
#, fuzzy
msgid ""
"The type checker can't type check the ``inner`` function because ``*args`` "
"and ``**kwargs`` have to be typed :data:`Any`."
msgstr ""
"型別檢查器無法對 ``inner`` 函式進行型別檢查，因為必須鍵入 ``*args`` 和 "
"``**kwargs`` :data:`Any`。"

#: ../../library/typing.rst:1477
#, fuzzy
msgid ""
":func:`~cast` may be required in the body of the ``add_logging`` decorator "
"when returning the ``inner`` function, or the static type checker must be "
"told to ignore the ``return inner``."
msgstr ""
":func:`~cast` 在回傳 ``inner`` 函式時可能需要在 ``add_logging`` "
"裝飾器的主體中，或者必須告訴靜態型別檢查器忽略 ``return inner``。"

#: ../../library/typing.rst:1484
#, fuzzy
msgid ""
"Since ``ParamSpec`` captures both positional and keyword parameters, ``P."
"args`` and ``P.kwargs`` can be used to split a ``ParamSpec`` into its "
"components.  ``P.args`` represents the tuple of positional parameters in a "
"given call and should only be used to annotate ``*args``.  ``P.kwargs`` "
"represents the mapping of keyword parameters to their values in a given "
"call, and should be only be used to annotate ``**kwargs``.  Both attributes "
"require the annotated parameter to be in scope. At runtime, ``P.args`` and "
"``P.kwargs`` are instances respectively of :class:`ParamSpecArgs` and :class:"
"`ParamSpecKwargs`."
msgstr ""
"由於 ``ParamSpec`` 捕獲位置參數和關鍵字參數，``P.args`` 和 ``P.kwargs`` "
"可用於將 ``ParamSpec`` 拆分為其組件。 ``P.args`` "
"表示給定呼叫中位置參數的元組，應該只用於註釋 ``*args``。 ``P.kwargs`` "
"表示在給定呼叫中關鍵字參數到它們的值的映射，並且應該只用於註釋 "
"``**kwargs``。這兩個屬性都要求帶註釋的參數在範圍內。在運行時，``P.args`` "
"和``P.kwargs`` 分別是ParamSpecArgs 和ParamSpecKwargs 的實例。"

#: ../../library/typing.rst:1494
#, fuzzy
msgid ""
"Parameter specification variables created with ``covariant=True`` or "
"``contravariant=True`` can be used to declare covariant or contravariant "
"generic types.  The ``bound`` argument is also accepted, similar to :class:"
"`TypeVar`.  However the actual semantics of these keywords are yet to be "
"decided."
msgstr ""
"使用“covariant=True”或“contravariant=True”建立的參數規範變數可用於聲明協變或"
"逆變泛型型別。 ``bound`` 參數也被接受，類似於 "
":class:`TypeVar`。然而，這些關鍵字的實際語義尚未確定。"

#: ../../library/typing.rst:1503
#, fuzzy
msgid ""
"Only parameter specification variables defined in global scope can be "
"pickled."
msgstr "只有在全局範圍內定義的參數規範變數可以被醃製。"

#: ../../library/typing.rst:1509
msgid ":class:`Callable` and :class:`Concatenate`."
msgstr ":class:`Callable` 和 :class:`Concatenate`\\ 。"

#: ../../library/typing.rst:1514
#, fuzzy
msgid ""
"Arguments and keyword arguments attributes of a :class:`ParamSpec`. The ``P."
"args`` attribute of a ``ParamSpec`` is an instance of ``ParamSpecArgs``, and "
"``P.kwargs`` is an instance of ``ParamSpecKwargs``. They are intended for "
"runtime introspection and have no special meaning to static type checkers."
msgstr ""
":class:`ParamSpec` 的參數和關鍵字參數屬性。 ``ParamSpec`` 的``P.args`` "
"屬性是``ParamSpecArgs`` 的一個實例，``P.kwargs`` 是``ParamSpecKwargs`` "
"的一個實例。它們用於運行時自省，對靜態型別檢查器沒有特殊意義。"

#: ../../library/typing.rst:1519
#, fuzzy
msgid ""
"Calling :func:`get_origin` on either of these objects will return the "
"original ``ParamSpec``::"
msgstr "在這些對像中的任何一個上呼叫 :func:`get_origin` 將回傳原始的 ``ParamSpec``::"

#: ../../library/typing.rst:1531
#, fuzzy
msgid ""
"``AnyStr`` is a :class:`constrained type variable <TypeVar>` defined as "
"``AnyStr = TypeVar('AnyStr', str, bytes)``."
msgstr ""
"``AnyStr`` 是一個 :class:`約束型別變數 <TypeVar>` 定義為 ``AnyStr = TypeVar("
"'AnyStr', str, bytes)``。"

#: ../../library/typing.rst:1534
#, fuzzy
msgid ""
"It is meant to be used for functions that may accept any kind of string "
"without allowing different kinds of strings to mix. For example::"
msgstr "它旨在用於可以接受任何型別的字串而不允許混合不同型別的字串的函式。例如：："

#: ../../library/typing.rst:1546
#, fuzzy
msgid ""
"Base class for protocol classes. Protocol classes are defined like this::"
msgstr "協定類的基底類別。協定類定義如下："

#: ../../library/typing.rst:1552
#, fuzzy
msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr "這些類主要與識別結構子型別（靜態鴨子型別）的靜態型別檢查器一起使用，例如："

#: ../../library/typing.rst:1564
#, fuzzy
msgid ""
"See :pep:`544` for more details. Protocol classes decorated with :func:"
"`runtime_checkable` (described later) act as simple-minded runtime protocols "
"that check only the presence of given attributes, ignoring their type "
"signatures."
msgstr ""
"有關更多詳細資訊，請參見 :pep:`544`。用 :func:`runtime_checkable` "
"裝飾的協定類（稍後描述"
"）充當頭腦簡單的運行時協定，只檢查給定屬性的存在，忽略它們的型別簽名。"

#: ../../library/typing.rst:1569
#, fuzzy
msgid "Protocol classes can be generic, for example::"
msgstr "協定類可以是通用的，例如："

#: ../../library/typing.rst:1579
#, fuzzy
msgid "Mark a protocol class as a runtime protocol."
msgstr "將協定類標記為運行時協定。"

#: ../../library/typing.rst:1581
#, fuzzy
msgid ""
"Such a protocol can be used with :func:`isinstance` and :func:`issubclass`. "
"This raises :exc:`TypeError` when applied to a non-protocol class.  This "
"allows a simple-minded structural check, very similar to \"one trick "
"ponies\" in :mod:`collections.abc` such as :class:`~collections.abc."
"Iterable`.  For example::"
msgstr ""
"這樣的協定可以與 :func:`isinstance` 和 :func:`issubclass` "
"一起使用。當應用於非協定類時，這會引發 "
":exc:`TypeError`。這允許進行簡單的結構檢查，非常類似於 :mod:`collections.abc`"
" 中的“one trick ponies”，例如 :class:`~collections.abc.Iterable`。例如：："

#: ../../library/typing.rst:1601
#, fuzzy
msgid ""
":func:`!runtime_checkable` will check only the presence of the required "
"methods or attributes, not their type signatures or types. For example, :"
"class:`ssl.SSLObject` is a class, therefore it passes an :func:`issubclass` "
"check against :data:`Callable`.  However, the ``ssl.SSLObject.__init__`` "
"method exists only to raise a :exc:`TypeError` with a more informative "
"message, therefore making it impossible to call (instantiate) :class:`ssl."
"SSLObject`."
msgstr ""
":func:`!runtime_checkable` "
"將只檢查所需方法或屬性的存在，而不是它們的型別簽名或型別。例如，:class:`ssl."
"SSLObject` 是一個類，因此它通過了針對 :data:`Callable` 的 :func:`issubclass` "
"檢查。但是，``ssl.SSLObject.__init__`` 方法的存在只是為了引發 "
":exc:`TypeError` 並提供更多資訊，因此無法呼叫（實例化） :class:`ssl."
"SSLObject`。"

#: ../../library/typing.rst:1612
#, fuzzy
msgid ""
"An :func:`isinstance` check against a runtime-checkable protocol can be "
"surprisingly slow compared to an ``isinstance()`` check against a non-"
"protocol class. Consider using alternative idioms such as :func:`hasattr` "
"calls for structural checks in performance-sensitive code."
msgstr ""
"與針對非協定類的 ``isinstance()`` 檢查相比，針對運行時可檢查協定的 "
"isinstance 檢查可能出奇地慢。考慮使用替代習慣用法，例如 :func:`hasattr` "
"呼叫對性能敏感的程式碼進行結構檢查。"

#: ../../library/typing.rst:1621
#, fuzzy
msgid "Other special directives"
msgstr "其他特殊指令"

#: ../../library/typing.rst:1623
#, fuzzy
msgid ""
"These are not used in annotations. They are building blocks for declaring "
"types."
msgstr "這些不用於註釋。它們是聲明型別的構建塊。"

#: ../../library/typing.rst:1627
#, fuzzy
msgid "Typed version of :func:`collections.namedtuple`."
msgstr ":func:`collections.namedtuple` 的型別化版本。"

#: ../../library/typing.rst:1635
msgid "This is equivalent to::"
msgstr ""
"這等價於：\n"
"\n"
"::"

#: ../../library/typing.rst:1639
#, fuzzy
msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr "要給一個欄位一個預設值，你可以在類主體中分配給它::"

#: ../../library/typing.rst:1648
#, fuzzy
msgid ""
"Fields with a default value must come after any fields without a default."
msgstr "具有預設值的欄位必須位於任何沒有預設值的欄位之後。"

#: ../../library/typing.rst:1650
#, fuzzy
msgid ""
"The resulting class has an extra attribute ``__annotations__`` giving a dict "
"that maps the field names to the field types.  (The field names are in the "
"``_fields`` attribute and the default values are in the ``_field_defaults`` "
"attribute, both of which are part of the :func:`~collections.namedtuple` "
"API.)"
msgstr ""
"結果類有一個額外的屬性 ``__annotations__`` "
"給出了一個將欄位名稱映射到欄位型別的字典。 （欄位名稱在 _fields 屬性中，"
"預設值在 _field_defaults 屬性中，兩者都是 :func:`~collections.namedtuple` "
"API 的一部分。）"

#: ../../library/typing.rst:1656
#, fuzzy
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr "``NamedTuple`` 子類別也可以有文檔字串和方法::"

#: ../../library/typing.rst:1666
#, fuzzy
msgid "``NamedTuple`` subclasses can be generic::"
msgstr "``NamedTuple`` 子類別可以是通用的::"

#: ../../library/typing.rst:1672
#, fuzzy
msgid "Backward-compatible usage::"
msgstr "向後相容的用法::"

#: ../../library/typing.rst:1676
#, fuzzy
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr "新增了對 :pep:`526` 變數註釋語法的支援。"

#: ../../library/typing.rst:1679
#, fuzzy
msgid "Added support for default values, methods, and docstrings."
msgstr "新增了對預設值、方法和文檔字串的支援。"

#: ../../library/typing.rst:1682
#, fuzzy
msgid ""
"The ``_field_types`` and ``__annotations__`` attributes are now regular "
"dictionaries instead of instances of ``OrderedDict``."
msgstr ""
"``_field_types`` 和 ``__annotations__`` 屬性現在是常規字典，而不是 "
"``OrderedDict`` 的實例。"

#: ../../library/typing.rst:1686
#, fuzzy
msgid ""
"Removed the ``_field_types`` attribute in favor of the more standard "
"``__annotations__`` attribute which has the same information."
msgstr "刪除了 ``_field_types`` 屬性以支援具有相同資訊的更標準的 ``__annotations__`` "
"屬性。"

#: ../../library/typing.rst:1690
#, fuzzy
msgid "Added support for generic namedtuples."
msgstr "新增了對通用命名元組的支援。"

#: ../../library/typing.rst:1695
#, fuzzy
msgid ""
"A helper class to indicate a distinct type to a typechecker, see :ref:"
"`distinct`. At runtime it returns an object that returns its argument when "
"called. Usage::"
msgstr "一個輔助類，用於向型別檢查器指示不同的型別，請參閱 :ref:`distinct`。在運行時"
"，它回傳一個物件，該對像在呼叫時回傳其參數。用法：："

#: ../../library/typing.rst:1705
#, fuzzy
msgid "``NewType`` is now a class rather than a function."
msgstr "``NewType`` 現在是一個類而不是一個函式。"

#: ../../library/typing.rst:1710
#, fuzzy
msgid ""
"Special construct to add type hints to a dictionary. At runtime it is a "
"plain :class:`dict`."
msgstr "向字典新增型別提示的特殊構造。在運行時它是一個普通的 :class:`dict`。"

#: ../../library/typing.rst:1713
#, fuzzy
msgid ""
"``TypedDict`` declares a dictionary type that expects all of its instances "
"to have a certain set of keys, where each key is associated with a value of "
"a consistent type. This expectation is not checked at runtime but is only "
"enforced by type checkers. Usage::"
msgstr ""
"``TypedDict`` 聲明了一個字典型別，它期望它的所有實例都有一組特定的鍵，其中每"
"個鍵都與一個一致型別的值相關聯。這種期望不會在運行時檢查，而只會由型別檢查器"
"強制執行。用法：："

#: ../../library/typing.rst:1729
#, fuzzy
msgid ""
"To allow using this feature with older versions of Python that do not "
"support :pep:`526`, ``TypedDict`` supports two additional equivalent "
"syntactic forms:"
msgstr "為了允許在不支援 :pep:`526` 的舊版本 Python 中使用此功能，``TypedDict`` "
"支援另外兩種等效語法形式："

#: ../../library/typing.rst:1733
#, fuzzy
msgid "Using a literal :class:`dict` as the second argument::"
msgstr "使用文字 :class:`dict` 作為第二個參數::"

#: ../../library/typing.rst:1737
#, fuzzy
msgid "Using keyword arguments::"
msgstr "使用關鍵字參數::"

#: ../../library/typing.rst:1744
#, fuzzy
msgid ""
"The keyword-argument syntax is deprecated in 3.11 and will be removed in "
"3.13. It may also be unsupported by static type checkers."
msgstr "關鍵字參數語法在 3.11 中已棄用，並將在 3.13 "
"中刪除。靜態型別檢查器也可能不支援它。"

#: ../../library/typing.rst:1745
#, fuzzy
msgid ""
"The functional syntax should also be used when any of the keys are not "
"valid :ref:`identifiers <identifiers>`, for example because they are "
"keywords or contain hyphens. Example::"
msgstr "當任何鍵無效時也應使用函式式語法 :ref:`identifiers "
"<identifiers>`，例如因為它們是關鍵字或包含連字元。例子：："

#: ../../library/typing.rst:1757
#, fuzzy
msgid ""
"By default, all keys must be present in a ``TypedDict``. It is possible to "
"mark individual keys as non-required using :data:`NotRequired`::"
msgstr "預設情況下，所有鍵都必須存在於 ``TypedDict`` 中。可以使用 "
":data:`NotRequired`:: 將單個鍵標記為不需要"

#: ../../library/typing.rst:1768
#, fuzzy
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have the ``label`` key "
"omitted."
msgstr "這意味著 ``Point2D`` ``TypedDict`` 可以省略 ``label`` 鍵。"

#: ../../library/typing.rst:1771
#, fuzzy
msgid ""
"It is also possible to mark all keys as non-required by default by "
"specifying a totality of ``False``::"
msgstr "也可以將所有鍵標記為預設情況下不需要的，方法是指定總數為 ``False``::"

#: ../../library/typing.rst:1781
#, fuzzy
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have any of the keys "
"omitted. A type checker is only expected to support a literal ``False`` or "
"``True`` as the value of the ``total`` argument. ``True`` is the default, "
"and makes all items defined in the class body required."
msgstr ""
"這意味著 ``Point2D`` ``TypedDict`` "
"可以省略任何鍵。型別檢查器只應支援文字 ``False``或 ``True``作為 ``total``參數的值。 "
"``True`` 是預設值，並使類主體中定義的所有項目都成為必需項。"

#: ../../library/typing.rst:1786
#, fuzzy
msgid ""
"Individual keys of a ``total=False`` ``TypedDict`` can be marked as required "
"using :data:`Required`::"
msgstr "``total=False`` ``TypedDict`` 的各個鍵可以使用 :data:`Required`::"

#: ../../library/typing.rst:1801
#, fuzzy
msgid ""
"It is possible for a ``TypedDict`` type to inherit from one or more other "
"``TypedDict`` types using the class-based syntax. Usage::"
msgstr "使用基於類的語法， ``TypedDict`` 型別可以從一個或多個其他 ``TypedDict`` 型別繼承。用"
"法：："

#: ../../library/typing.rst:1808
#, fuzzy
msgid ""
"``Point3D`` has three items: ``x``, ``y`` and ``z``. It is equivalent to "
"this definition::"
msgstr "``Point3D`` 具有三個項目：``x``、``y`` 和``z``。它等同於這個定義::"

#: ../../library/typing.rst:1816
#, fuzzy
msgid ""
"A ``TypedDict`` cannot inherit from a non-\\ ``TypedDict`` class, except "
"for :class:`Generic`. For example::"
msgstr "``TypedDict`` 不能從非 ``TypedDict`` 類繼承，除了 :class:`Generic`。例如：："

#: ../../library/typing.rst:1834
#, fuzzy
msgid "A ``TypedDict`` can be generic::"
msgstr "``TypedDict`` 可以是通用的："

#: ../../library/typing.rst:1840
#, fuzzy
msgid ""
"A ``TypedDict`` can be introspected via annotations dicts (see :ref:"
"`annotations-howto` for more information on annotations best practices), :"
"attr:`__total__`, :attr:`__required_keys__`, and :attr:`__optional_keys__`."
msgstr ""
"``TypedDict`` "
"可以通過註釋字典進行自省（有關註釋最佳實踐的更多資訊，請參閱：ref"
"：`annotations-howto`）， :attr:`__total__`， :attr:`__required_keys__` "
"和 :attr:` __optional_keys__`。"

#: ../../library/typing.rst:1846
#, fuzzy
msgid ""
"``Point2D.__total__`` gives the value of the ``total`` argument. Example::"
msgstr "``Point2D.__total__`` 給出了``total`` 參數的值。例子：："

#: ../../library/typing.rst:1866
#, fuzzy
msgid ""
"``Point2D.__required_keys__`` and ``Point2D.__optional_keys__`` return :"
"class:`frozenset` objects containing required and non-required keys, "
"respectively."
msgstr ""
"``Point2D.__required_keys__`` 和 ``Point2D.__optional_keys__`` "
"分別回傳包含必需和非必需鍵的 frozenset 物件。"

#: ../../library/typing.rst:1869
#, fuzzy
msgid ""
"Keys marked with :data:`Required` will always appear in "
"``__required_keys__`` and keys marked with :data:`NotRequired` will always "
"appear in ``__optional_keys__``."
msgstr ""
"標有 :data:`Required` 的鍵將始終出現在 ``__required_keys__`` 中，標有 "
":data:`NotRequired` 的鍵將始終出現在 ``__optional_keys__`` 中。"

#: ../../library/typing.rst:1872
#, fuzzy
msgid ""
"For backwards compatibility with Python 3.10 and below, it is also possible "
"to use inheritance to declare both required and non-required keys in the "
"same ``TypedDict`` . This is done by declaring a ``TypedDict`` with one "
"value for the ``total`` argument and then inheriting from it in another "
"``TypedDict`` with a different value for ``total``::"
msgstr ""
"為了向後相容 Python 3.10 及以下版本，還可以使用繼承在同一個 ``TypedDict`` "
"中聲明必需和非必需的鍵。這是通過為 ``total`` 參數聲明一個具有一個值的 "
"``TypedDict`` 來完成的，然後在另一個具有不同的 ``total`` 值的 ``TypedDict`` "
"中繼承它::"

#: ../../library/typing.rst:1893
#, fuzzy
msgid ""
"See :pep:`589` for more examples and detailed rules of using ``TypedDict``."
msgstr "有關使用 ``TypedDict`` 的更多示例和詳細規則，請參閱 :pep:`589`。"

#: ../../library/typing.rst:1897
#, fuzzy
msgid ""
"Added support for marking individual keys as :data:`Required` or :data:"
"`NotRequired`. See :pep:`655`."
msgstr "新增了對將單個鍵標記為 :data:`Required` 或 :data:`NotRequired` "
"的支援。請參閱 :pep:`655`。"

#: ../../library/typing.rst:1901
#, fuzzy
msgid "Added support for generic ``TypedDict``\\ s."
msgstr "新增了對通用 ``TypedDict``\\ 的支援。"

#: ../../library/typing.rst:1905
#, fuzzy
msgid "Generic concrete collections"
msgstr "通用具體集合"

#: ../../library/typing.rst:1908
#, fuzzy
msgid "Corresponding to built-in types"
msgstr "對應內建型別"

#: ../../library/typing.rst:1912
#, fuzzy
msgid ""
"A generic version of :class:`dict`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Mapping`."
msgstr ":class:`dict` "
"的通用版本。用於註釋回傳型別。要註釋參數，最好使用抽象集合型別，例如 "
":class:`Mapping`。"

#: ../../library/typing.rst:1916
#, fuzzy
msgid "This type can be used as follows::"
msgstr "這種型別可以按如下方式使用："

#: ../../library/typing.rst:1921
#, fuzzy
msgid ""
":class:`builtins.dict <dict>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.dict <dict>` 現在支援下標 (``[]``)。參見 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:1927
#, fuzzy
msgid ""
"Generic version of :class:`list`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Sequence` or :class:`Iterable`."
msgstr ":class:`list` "
"的通用版本。用於註釋回傳型別。要註釋參數，最好使用抽象集合型別，例如 "
"Sequence 或 Iterable。"

#: ../../library/typing.rst:1932
#, fuzzy
msgid "This type may be used as follows::"
msgstr "這種型別可以按如下方式使用："

#: ../../library/typing.rst:1942
#, fuzzy
msgid ""
":class:`builtins.list <list>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.list <list>` 現在支援下標 (``[]``)。參見 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:1948
#, fuzzy
msgid ""
"A generic version of :class:`builtins.set <set>`. Useful for annotating "
"return types. To annotate arguments it is preferred to use an abstract "
"collection type such as :class:`AbstractSet`."
msgstr ""
":class:`builtins.set <set>` "
"的通用版本。用於註釋回傳型別。要註釋參數，最好使用抽象集合型別，例如 "
":class:`AbstractSet`。"

#: ../../library/typing.rst:1952
#, fuzzy
msgid ""
":class:`builtins.set <set>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.set <set>` 現在支援下標 (``[]``)。參見 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:1958
#, fuzzy
msgid "A generic version of :class:`builtins.frozenset <frozenset>`."
msgstr ":class:`builtins.frozenset <frozenset>` 的通用版本。"

#: ../../library/typing.rst:1960
#, fuzzy
msgid ""
":class:`builtins.frozenset <frozenset>` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.frozenset <frozenset>` 現在支援下標 (``[]``)。參見 "
":pep:`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:1965
#, fuzzy
msgid ":data:`Tuple` is a special form."
msgstr ":data:`Tuple` 是一種特殊形式。"

#: ../../library/typing.rst:1968
#, fuzzy
msgid "Corresponding to types in :mod:`collections`"
msgstr "對應於 :mod:`collections` 中的型別"

#: ../../library/typing.rst:1972
#, fuzzy
msgid "A generic version of :class:`collections.defaultdict`."
msgstr ":class:`collections.defaultdict` 的通用版本。"

#: ../../library/typing.rst:1976
#, fuzzy
msgid ""
":class:`collections.defaultdict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.defaultdict` 現在支援下標 (``[]``)。參見 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:1982
#, fuzzy
msgid "A generic version of :class:`collections.OrderedDict`."
msgstr ":class:`collections.OrderedDict` 的通用版本。"

#: ../../library/typing.rst:1986
#, fuzzy
msgid ""
":class:`collections.OrderedDict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.OrderedDict` 現在支援下標 (``[]``)。參見 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:1992
#, fuzzy
msgid "A generic version of :class:`collections.ChainMap`."
msgstr ":class:`collections.ChainMap` 的通用版本。"

#: ../../library/typing.rst:1997
#, fuzzy
msgid ""
":class:`collections.ChainMap` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.ChainMap` 現在支援下標 (``[]``)。參見 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2003
#, fuzzy
msgid "A generic version of :class:`collections.Counter`."
msgstr ":class:`collections.Counter` 的通用版本。"

#: ../../library/typing.rst:2008
#, fuzzy
msgid ""
":class:`collections.Counter` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.Counter` 現在支援下標 (``[]``)。參見 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2014
#, fuzzy
msgid "A generic version of :class:`collections.deque`."
msgstr ":class:`collections.deque` 的通用版本。"

#: ../../library/typing.rst:2019
#, fuzzy
msgid ""
":class:`collections.deque` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.deque` 現在支援下標 (``[]``)。參見 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2024
#, fuzzy
msgid "Other concrete types"
msgstr "其他混凝土型別"

#: ../../library/typing.rst:2030
#, fuzzy
msgid ""
"Generic type ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`."
msgstr ""
"通用型別 ``IO[AnyStr]`` 及其子類別 ``TextIO(IO[str])`` 和 "
"``BinaryIO(IO[bytes])`` 表示 I/O 流的型別，例如 :func 回傳的型別：`打開`。"

#: ../../library/typing.rst:2037
#, fuzzy
msgid ""
"The ``typing.io`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr "``typing.io`` 命名空間已棄用並將被刪除。這些型別應該直接從 ``typing`` 導入。"

#: ../../library/typing.rst:2042
#, fuzzy
msgid ""
"These type aliases correspond to the return types from :func:`re.compile` "
"and :func:`re.match`.  These types (and the corresponding functions) are "
"generic in ``AnyStr`` and can be made specific by writing ``Pattern[str]``, "
"``Pattern[bytes]``, ``Match[str]``, or ``Match[bytes]``."
msgstr ""
"這些型別別名對應於 :func:`re.compile` 和 :func:`re.match` "
"的回傳型別。這些型別（和相應的函式）在``AnyStr`` 中是通用的，可以通過編寫``Pa"
"ttern[str]``、``Pattern[bytes]``、``Match[str]``、或``匹配[位元組]``。"

#: ../../library/typing.rst:2052
#, fuzzy
msgid ""
"The ``typing.re`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr "``typing.re`` 命名空間已棄用並將被刪除。這些型別應該直接從 ``typing`` 導入。"

#: ../../library/typing.rst:2053
#, fuzzy
msgid ""
"Classes ``Pattern`` and ``Match`` from :mod:`re` now support ``[]``. See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
"來自 :mod:`re` 的類 ``Pattern`` 和 ``Match`` 現在支援 ``[]``。參見 :pep:`585`"
" 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2059
#, fuzzy
msgid ""
"``Text`` is an alias for ``str``. It is provided to supply a forward "
"compatible path for Python 2 code: in Python 2, ``Text`` is an alias for "
"``unicode``."
msgstr ""
"``Text`` 是 ``str`` 的別名。提供它是為了為 Python 2 "
"程式碼提供向前相容的路徑：在 Python 2 中，``Text`` 是``unicode`` 的別名。"

#: ../../library/typing.rst:2063
#, fuzzy
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr "使用 ``Text`` 指示值必須以與 Python 2 和 Python 3 相容的方式包含 unicode "
"字串::"

#: ../../library/typing.rst:2071
#, fuzzy
msgid ""
"Python 2 is no longer supported, and most type checkers also no longer "
"support type checking Python 2 code. Removal of the alias is not currently "
"planned, but users are encouraged to use :class:`str` instead of ``Text`` "
"wherever possible."
msgstr ""
"Python 2 不再受支援，大多數型別檢查器也不再支援型別檢查 Python 2 "
"程式碼。目前未計劃刪除別名，但鼓勵使用者盡可能使用 :class:`str` 而不是 "
"``Text``。"

#: ../../library/typing.rst:2078
#, fuzzy
msgid "Abstract Base Classes"
msgstr "抽象基底類別"

#: ../../library/typing.rst:2081
#, fuzzy
msgid "Corresponding to collections in :mod:`collections.abc`"
msgstr "對應於 :mod:`collections.abc`中的集合"

#: ../../library/typing.rst:2085
#, fuzzy
msgid "A generic version of :class:`collections.abc.Set`."
msgstr ":class:`collections.abc.Set` 的通用版本。"

#: ../../library/typing.rst:2087
#, fuzzy
msgid ""
":class:`collections.abc.Set` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Set` 現在支援下標 (``[]``)。參見 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2093
#, fuzzy
msgid "A generic version of :class:`collections.abc.ByteString`."
msgstr ":class:`collections.abc.ByteString` 的通用版本。"

#: ../../library/typing.rst:2095
#, fuzzy
msgid ""
"This type represents the types :class:`bytes`, :class:`bytearray`, and :"
"class:`memoryview` of byte sequences."
msgstr "此型別表示位元組序列的型別 :class:`bytes`、:class:`bytearray` "
"和 :class:`memoryview`。"

#: ../../library/typing.rst:2098
#, fuzzy
msgid ""
"As a shorthand for this type, :class:`bytes` can be used to annotate "
"arguments of any of the types mentioned above."
msgstr "作為這種型別的簡寫，:class:`bytes` 可用於註釋上述任何型別的參數。"

#: ../../library/typing.rst:2101
#, fuzzy
msgid ""
":class:`collections.abc.ByteString` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ByteString` 現在支援下標 (``[]``)。參見 :pep:`585` "
"和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2107
#, fuzzy
msgid "A generic version of :class:`collections.abc.Collection`"
msgstr ":class:`collections.abc.Collection` 的通用版本"

#: ../../library/typing.rst:2111
#, fuzzy
msgid ""
":class:`collections.abc.Collection` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Collection` 現在支援下標 (``[]``)。參見 :pep:`585` "
"和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2117
#, fuzzy
msgid "A generic version of :class:`collections.abc.Container`."
msgstr ":class:`collections.abc.Container` 的通用版本。"

#: ../../library/typing.rst:2119
#, fuzzy
msgid ""
":class:`collections.abc.Container` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Container` 現在支援下標 (``[]``)。參見 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:2125
#, fuzzy
msgid "A generic version of :class:`collections.abc.ItemsView`."
msgstr ":class:`collections.abc.ItemsView` 的通用版本。"

#: ../../library/typing.rst:2127
#, fuzzy
msgid ""
":class:`collections.abc.ItemsView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ItemsView` 現在支援下標 (``[]``)。參見 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:2133
#, fuzzy
msgid "A generic version of :class:`collections.abc.KeysView`."
msgstr ":class:`collections.abc.KeysView` 的通用版本。"

#: ../../library/typing.rst:2135
#, fuzzy
msgid ""
":class:`collections.abc.KeysView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.KeysView` 現在支援下標 (``[]``)。參見 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:2141
#, fuzzy
msgid ""
"A generic version of :class:`collections.abc.Mapping`. This type can be used "
"as follows::"
msgstr ":class:`collections.abc.Mapping` 的通用版本。這種型別可以按如下方式使用："

#: ../../library/typing.rst:2147
#, fuzzy
msgid ""
":class:`collections.abc.Mapping` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Mapping` 現在支援下標 (``[]``)。參見 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:2153
#, fuzzy
msgid "A generic version of :class:`collections.abc.MappingView`."
msgstr ":class:`collections.abc.MappingView` 的通用版本。"

#: ../../library/typing.rst:2155
#, fuzzy
msgid ""
":class:`collections.abc.MappingView` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MappingView` 現在支援下標 (``[]``)。參見 :pep:`585` "
"和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2161
#, fuzzy
msgid "A generic version of :class:`collections.abc.MutableMapping`."
msgstr ":class:`collections.abc.MutableMapping` 的通用版本。"

#: ../../library/typing.rst:2163
#, fuzzy
msgid ""
":class:`collections.abc.MutableMapping` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableMapping` 現在支援下標 (``[]``)。參見 "
":pep:`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2170
#, fuzzy
msgid "A generic version of :class:`collections.abc.MutableSequence`."
msgstr ":class:`collections.abc.MutableSequence` 的通用版本。"

#: ../../library/typing.rst:2172
#, fuzzy
msgid ""
":class:`collections.abc.MutableSequence` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSequence` 現在支援下標 (``[]``)。參見 "
":pep:`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2179
#, fuzzy
msgid "A generic version of :class:`collections.abc.MutableSet`."
msgstr ":class:`collections.abc.MutableSet` 的通用版本。"

#: ../../library/typing.rst:2181
#, fuzzy
msgid ""
":class:`collections.abc.MutableSet` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSet` 現在支援下標 (``[]``)。參見 :pep:`585` "
"和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2187
#, fuzzy
msgid "A generic version of :class:`collections.abc.Sequence`."
msgstr ":class:`collections.abc.Sequence` 的通用版本。"

#: ../../library/typing.rst:2189
#, fuzzy
msgid ""
":class:`collections.abc.Sequence` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Sequence` 現在支援下標 (``[]``)。參見 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:2195
#, fuzzy
msgid "A generic version of :class:`collections.abc.ValuesView`."
msgstr ":class:`collections.abc.ValuesView` 的通用版本。"

#: ../../library/typing.rst:2197
#, fuzzy
msgid ""
":class:`collections.abc.ValuesView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ValuesView` 現在支援下標 (``[]``)。參見 :pep:`585` "
"和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2202
#, fuzzy
msgid "Corresponding to other types in :mod:`collections.abc`"
msgstr "對應 :mod:`collections.abc`中的其他型別"

#: ../../library/typing.rst:2206
#, fuzzy
msgid "A generic version of :class:`collections.abc.Iterable`."
msgstr ":class:`collections.abc.Iterable` 的通用版本。"

#: ../../library/typing.rst:2208
#, fuzzy
msgid ""
":class:`collections.abc.Iterable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterable` 現在支援下標 (``[]``)。參見 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:2214
#, fuzzy
msgid "A generic version of :class:`collections.abc.Iterator`."
msgstr ":class:`collections.abc.Iterator` 的通用版本。"

#: ../../library/typing.rst:2216
#, fuzzy
msgid ""
":class:`collections.abc.Iterator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterator` 現在支援下標 (``[]``)。參見 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:2222
#, fuzzy
msgid ""
"A generator can be annotated by the generic type ``Generator[YieldType, "
"SendType, ReturnType]``. For example::"
msgstr "生成器可以用通用型別 ``Generator[YieldType, SendType, ReturnType]`` "
"註釋。例如：："

#: ../../library/typing.rst:2231
#, fuzzy
msgid ""
"Note that unlike many other generics in the typing module, the ``SendType`` "
"of :class:`Generator` behaves contravariantly, not covariantly or "
"invariantly."
msgstr "請注意，與 typing 模組中的許多其他泛型不同，Generator 的 ``SendType`` "
"行為是逆變的，而不是協變的或不變的。"

#: ../../library/typing.rst:2235
#, fuzzy
msgid ""
"If your generator will only yield values, set the ``SendType`` and "
"``ReturnType`` to ``None``::"
msgstr "如果您的生成器只會產生值，請將 ``SendType`` 和 ``ReturnType`` 設定為 "
"``None``::"

#: ../../library/typing.rst:2243
#, fuzzy
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``Iterable[YieldType]`` or ``Iterator[YieldType]``::"
msgstr "或者，將生成器註釋為回傳型別為 ``Iterable[YieldType]`` 或 "
"``Iterator[YieldType]``::"

#: ../../library/typing.rst:2251
#, fuzzy
msgid ""
":class:`collections.abc.Generator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Generator` 現在支援下標 (``[]``)。參見 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:2257
#, fuzzy
msgid "An alias to :class:`collections.abc.Hashable`."
msgstr ":class:`collections.abc.Hashable` 的別名。"

#: ../../library/typing.rst:2261
#, fuzzy
msgid "A generic version of :class:`collections.abc.Reversible`."
msgstr ":class:`collections.abc.Reversible` 的通用版本。"

#: ../../library/typing.rst:2263
#, fuzzy
msgid ""
":class:`collections.abc.Reversible` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Reversible` 現在支援下標 (``[]``)。參見 :pep:`585` "
"和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2269
#, fuzzy
msgid "An alias to :class:`collections.abc.Sized`."
msgstr ":class:`collections.abc.Sized` 的別名。"

#: ../../library/typing.rst:2272
#, fuzzy
msgid "Asynchronous programming"
msgstr "非同步編程"

#: ../../library/typing.rst:2276
#, fuzzy
msgid ""
"A generic version of :class:`collections.abc.Coroutine`. The variance and "
"order of type variables correspond to those of :class:`Generator`, for "
"example::"
msgstr ""
":class:`collections.abc.Coroutine` "
"的通用版本。型別變數的方差和順序對應於 :class:`Generator`，例如："

#: ../../library/typing.rst:2288
#, fuzzy
msgid ""
":class:`collections.abc.Coroutine` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Coroutine` 現在支援下標 (``[]``)。參見 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:2294
#, fuzzy
msgid ""
"An async generator can be annotated by the generic type "
"``AsyncGenerator[YieldType, SendType]``. For example::"
msgstr "非同步生成器可以用通用型別“AsyncGenerator[YieldType, "
"SendType]”進行註釋。例如：："

#: ../../library/typing.rst:2303
#, fuzzy
msgid ""
"Unlike normal generators, async generators cannot return a value, so there "
"is no ``ReturnType`` type parameter. As with :class:`Generator`, the "
"``SendType`` behaves contravariantly."
msgstr ""
"與普通生成器不同，非同步生成器不能回傳值，因此沒有 ``ReturnType``型別參數。與 "
":class:`Generator` 一樣，``SendType`` 的行為是逆變的。"

#: ../../library/typing.rst:2307
#, fuzzy
msgid ""
"If your generator will only yield values, set the ``SendType`` to ``None``::"
msgstr "如果您的生成器只會產生值，請將 ``SendType`` 設定為 ``None``::"

#: ../../library/typing.rst:2315
#, fuzzy
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``AsyncIterable[YieldType]`` or ``AsyncIterator[YieldType]``::"
msgstr ""
"或者，將生成器註釋為回傳型別為 ``AsyncIterable[YieldType]`` 或 "
"``AsyncIterator[YieldType]``::"

#: ../../library/typing.rst:2325
#, fuzzy
msgid ""
":class:`collections.abc.AsyncGenerator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncGenerator` 現在支援下標 (``[]``)。參見 "
":pep:`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2332
#, fuzzy
msgid "A generic version of :class:`collections.abc.AsyncIterable`."
msgstr ":class:`collections.abc.AsyncIterable` 的通用版本。"

#: ../../library/typing.rst:2336
#, fuzzy
msgid ""
":class:`collections.abc.AsyncIterable` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterable` 現在支援下標 (``[]``)。參見 :pep:`585`"
" 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2342
#, fuzzy
msgid "A generic version of :class:`collections.abc.AsyncIterator`."
msgstr ":class:`collections.abc.AsyncIterator` 的通用版本。"

#: ../../library/typing.rst:2346
#, fuzzy
msgid ""
":class:`collections.abc.AsyncIterator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterator` 現在支援下標 (``[]``)。參見 :pep:`585`"
" 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2352
#, fuzzy
msgid "A generic version of :class:`collections.abc.Awaitable`."
msgstr ":class:`collections.abc.Awaitable` 的通用版本。"

#: ../../library/typing.rst:2356
#, fuzzy
msgid ""
":class:`collections.abc.Awaitable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Awaitable` 現在支援下標 (``[]``)。參見 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:2362
#, fuzzy
msgid "Context manager types"
msgstr "上下文管理器型別"

#: ../../library/typing.rst:2366
#, fuzzy
msgid "A generic version of :class:`contextlib.AbstractContextManager`."
msgstr ":class:`contextlib.AbstractContextManager` 的通用版本。"

#: ../../library/typing.rst:2371
#, fuzzy
msgid ""
":class:`contextlib.AbstractContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractContextManager` 現在支援下標 (``[]``)。參見 "
":pep:`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2378
#, fuzzy
msgid "A generic version of :class:`contextlib.AbstractAsyncContextManager`."
msgstr ":class:`contextlib.AbstractAsyncContextManager` 的通用版本。"

#: ../../library/typing.rst:2383
#, fuzzy
msgid ""
":class:`contextlib.AbstractAsyncContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractAsyncContextManager` 現在支援下標 (``[]``)。參見 "
":pep:`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2389
msgid "Protocols"
msgstr "協定"

#: ../../library/typing.rst:2391
#, fuzzy
msgid "These protocols are decorated with :func:`runtime_checkable`."
msgstr "這些協定用 :func:`runtime_checkable` 修飾。"

#: ../../library/typing.rst:2395
#, fuzzy
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr "具有一個抽象方法 ``__abs__`` 的 ABC，其回傳型別是協變的。"

#: ../../library/typing.rst:2400
msgid "An ABC with one abstract method ``__bytes__``."
msgstr "一個有抽象方法 ``__bytes__`` 的 ABC。"

#: ../../library/typing.rst:2404
msgid "An ABC with one abstract method ``__complex__``."
msgstr "一個有抽象方法 ``__complex__`` 的 ABC。"

#: ../../library/typing.rst:2408
msgid "An ABC with one abstract method ``__float__``."
msgstr "一個有抽象方法 ``__float__`` 的 ABC。"

#: ../../library/typing.rst:2412
msgid "An ABC with one abstract method ``__index__``."
msgstr "一個有抽象方法 ``__index__`` 的 ABC。"

#: ../../library/typing.rst:2418
msgid "An ABC with one abstract method ``__int__``."
msgstr "一個有抽象方法 ``__int__`` 的 ABC。"

#: ../../library/typing.rst:2422
#, fuzzy
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr "具有一個抽象方法 ``__round__`` 的 ABC，其回傳型別是協變的。"

#: ../../library/typing.rst:2426
msgid "Functions and decorators"
msgstr "函式與裝飾器"

#: ../../library/typing.rst:2430
#, fuzzy
msgid "Cast a value to a type."
msgstr "將值轉換為型別。"

#: ../../library/typing.rst:2432
#, fuzzy
msgid ""
"This returns the value unchanged.  To the type checker this signals that the "
"return value has the designated type, but at runtime we intentionally don't "
"check anything (we want this to be as fast as possible)."
msgstr "這將回傳值不變。對於型別檢查器來說，這表明回傳值具有指定的型別，但在運行時我"
"們故意不檢查任何東西（我們希望它盡可能快）。"

#: ../../library/typing.rst:2439
#, fuzzy
msgid ""
"Ask a static type checker to confirm that *val* has an inferred type of "
"*typ*."
msgstr "請靜態型別檢查器確認 *val* 具有 *typ* 的推斷型別。"

#: ../../library/typing.rst:2441
#, fuzzy
msgid ""
"When the type checker encounters a call to ``assert_type()``, it emits an "
"error if the value is not of the specified type::"
msgstr "當型別檢查器遇到對 ``assert_type()`` "
"的呼叫時，如果值不是指定型別，它會發出錯誤::"

#: ../../library/typing.rst:2448
#, fuzzy
msgid ""
"At runtime this returns the first argument unchanged with no side effects."
msgstr "在運行時，這將回傳第一個參數不變，沒有副作用。"

#: ../../library/typing.rst:2450
#, fuzzy
msgid ""
"This function is useful for ensuring the type checker's understanding of a "
"script is in line with the developer's intentions::"
msgstr "此函式有助於確保型別檢查器對腳本的理解符合開發人員的意圖::"

#: ../../library/typing.rst:2464
#, fuzzy
msgid ""
"Ask a static type checker to confirm that a line of code is unreachable."
msgstr "請靜態型別檢查器確認某行程式碼不可訪問。"

#: ../../library/typing.rst:2477
#, fuzzy
msgid ""
"Here, the annotations allow the type checker to infer that the last case can "
"never execute, because ``arg`` is either an :class:`int` or a :class:`str`, "
"and both options are covered by earlier cases. If a type checker finds that "
"a call to ``assert_never()`` is reachable, it will emit an error. For "
"example, if the type annotation for ``arg`` was instead ``int | str | "
"float``, the type checker would emit an error pointing out that "
"``unreachable`` is of type :class:`float`. For a call to ``assert_never`` to "
"pass type checking, the inferred type of the argument passed in must be the "
"bottom type, :data:`Never`, and nothing else."
msgstr ""
"在這裡，註釋允許型別檢查器推斷最後一個案例永遠不會執行，因為 ``arg`` 是一個 "
":class:`int` 或一個 :class:`str`，"
"並且這兩個選項都包含在前面的案例中.如果型別檢查器發現對 assert_never() "
"的呼叫是可達的，它將發出錯誤。例如，如果 ``arg`` 的型別註解改為 ``int |海峽 |"
" float``，型別檢查器會發出一個錯誤，指出 ``unreachable`` 是 :class:`float` "
"型別。要呼叫 ``assert_never`` 以通過型別檢查，傳入參數的推斷型別必須是底部型"
"別 :data:`Never`，除此之外別無其他。"

#: ../../library/typing.rst:2489
#, fuzzy
msgid "At runtime, this throws an exception when called."
msgstr "在運行時，這會在呼叫時拋出例外。"

#: ../../library/typing.rst:2492
#, fuzzy
msgid ""
"`Unreachable Code and Exhaustiveness Checking <https://typing.readthedocs.io/"
"en/latest/source/unreachable.html>`__ has more information about "
"exhaustiveness checking with static typing."
msgstr ""
"`無法訪問的程式碼和詳盡檢查 <https://typing.readthedocs.io/en/latest/source/"
"unreachable.html>`__ 有更多關於使用靜態型別進行詳盡檢查的資訊。"

#: ../../library/typing.rst:2500
#, fuzzy
msgid "Reveal the inferred static type of an expression."
msgstr "揭示表達式的推斷靜態型別。"

#: ../../library/typing.rst:2502
#, fuzzy
msgid ""
"When a static type checker encounters a call to this function, it emits a "
"diagnostic with the type of the argument. For example::"
msgstr "當靜態型別檢查器遇到對此函式的呼叫時，它會發出帶有參數型別的診斷資訊。例如："
"："

#: ../../library/typing.rst:2508
#, fuzzy
msgid ""
"This can be useful when you want to debug how your type checker handles a "
"particular piece of code."
msgstr "當你想除錯你的型別檢查器如何處理一段特定的程式碼時，這會很有用。"

#: ../../library/typing.rst:2511
#, fuzzy
msgid ""
"The function returns its argument unchanged, which allows using it within an "
"expression::"
msgstr "該函式回傳其參數不變，這允許在表達式中使用它::"

#: ../../library/typing.rst:2516
#, fuzzy
msgid ""
"Most type checkers support ``reveal_type()`` anywhere, even if the name is "
"not imported from ``typing``. Importing the name from ``typing`` allows your "
"code to run without runtime errors and communicates intent more clearly."
msgstr ""
"大多數型別檢查器在任何地方都支援 ``reveal_type()``，即使名稱不是從 ``typing``"
" 導入的。從 ``typing`` 中導入名稱可以讓您的程式碼在沒有運行時錯誤的情況下運行"
"，並且可以更清楚地傳達意圖。"

#: ../../library/typing.rst:2521
#, fuzzy
msgid ""
"At runtime, this function prints the runtime type of its argument to stderr "
"and returns it unchanged::"
msgstr "在運行時，此函式將其參數的運行時型別印出到 stderr 並原樣回傳："

#: ../../library/typing.rst:2531
#, fuzzy
msgid ""
":data:`~typing.dataclass_transform` may be used to decorate a class, "
"metaclass, or a function that is itself a decorator. The presence of "
"``@dataclass_transform()`` tells a static type checker that the decorated "
"object performs runtime \"magic\" that transforms a class, giving it :func:"
"`dataclasses.dataclass`-like behaviors."
msgstr ""
":data:`~typing.dataclass_transform` "
"可用於裝飾類、元類或本身就是裝飾器的函式。 ``@dataclass_transform()`` "
"的存在告訴靜態型別檢查器，裝飾物件執行運行時“魔法”，轉換類，賦予它類似 "
":func:`dataclasses.dataclass` 的行為。"

#: ../../library/typing.rst:2537
#, fuzzy
msgid "Example usage with a decorator function::"
msgstr "裝飾函式的示例用法::"

#: ../../library/typing.rst:2551
#, fuzzy
msgid "On a base class::"
msgstr "在基底類別上::"

#: ../../library/typing.rst:2560
#, fuzzy
msgid "On a metaclass::"
msgstr "在元類上::"

#: ../../library/typing.rst:2571
#, fuzzy
msgid ""
"The ``CustomerModel`` classes defined above will be treated by type checkers "
"similarly to classes created with :func:`@dataclasses.dataclass <dataclasses."
"dataclass>`. For example, type checkers will assume these classes have "
"``__init__`` methods that accept ``id`` and ``name``."
msgstr ""
"上面定義的 ``CustomerModel`` 類將被型別檢查器處理為類似於使用 :func:`@"
"dataclasses.dataclass <dataclasses.dataclass>` "
"建立的類。例如，型別檢查器將假定這些類具有接受 ``id``和 ``name``的“__init__”方法。"

#: ../../library/typing.rst:2577
#, fuzzy
msgid ""
"The decorated class, metaclass, or function may accept the following bool "
"arguments which type checkers will assume have the same effect as they would "
"have on the :func:`@dataclasses.dataclass<dataclasses.dataclass>` decorator: "
"``init``, ``eq``, ``order``, ``unsafe_hash``, ``frozen``, ``match_args``, "
"``kw_only``, and ``slots``. It must be possible for the value of these "
"arguments (``True`` or ``False``) to be statically evaluated."
msgstr ""
"裝飾類、元類或函式可以接受以下 bool 參數，型別檢查器將假定這些參數與它們在 "
":func:`@dataclasses.dataclass<dataclasses.dataclass>` "
"裝飾器上具有相同的效果：``init`` "
"、``eq``、``order``、``unsafe_hash``、``frozen``、``match_args``、``kw_only``"
" 和 ``slots``。這些參數的值（``True`` 或``False``）必須能夠被靜態評估。"

#: ../../library/typing.rst:2585
#, fuzzy
msgid ""
"The arguments to the ``dataclass_transform`` decorator can be used to "
"customize the default behaviors of the decorated class, metaclass, or "
"function:"
msgstr "``dataclass_transform`` "
"裝飾器的參數可用於自定義裝飾類、元類或函式的預設行為："

#: ../../library/typing.rst:2589
#, fuzzy
msgid ""
"``eq_default`` indicates whether the ``eq`` parameter is assumed to be "
"``True`` or ``False`` if it is omitted by the caller."
msgstr "``eq_default`` 表示如果呼叫者省略參數 ``eq`` 參數是否假定為 ``True`` 或 "
"``False``。"

#: ../../library/typing.rst:2591
#, fuzzy
msgid ""
"``order_default`` indicates whether the ``order`` parameter is assumed to be "
"True or False if it is omitted by the caller."
msgstr "``order_default`` 指示如果呼叫者省略 ``order`` 參數是否假定為 True 或 False。"

#: ../../library/typing.rst:2593
#, fuzzy
msgid ""
"``kw_only_default`` indicates whether the ``kw_only`` parameter is assumed "
"to be True or False if it is omitted by the caller."
msgstr "``kw_only_default`` 表示如果呼叫者省略了 ``kw_only`` 參數，"
"則該參數是否假定為 True 或 False。"

#: ../../library/typing.rst:2595
#, fuzzy
msgid ""
"``field_specifiers`` specifies a static list of supported classes or "
"functions that describe fields, similar to ``dataclasses.field()``."
msgstr "``field_specifiers`` 指定描述欄位的受支援類或函式的靜態列表，類似於 "
"``dataclasses.field()``。"

#: ../../library/typing.rst:2597
#, fuzzy
msgid ""
"Arbitrary other keyword arguments are accepted in order to allow for "
"possible future extensions."
msgstr "接受任意其他關鍵字參數以允許將來可能的擴充。"

#: ../../library/typing.rst:2600
#, fuzzy
msgid ""
"Type checkers recognize the following optional arguments on field specifiers:"
msgstr "型別檢查器識別欄位說明符上的以下可選參數："

#: ../../library/typing.rst:2603
#, fuzzy
msgid ""
"``init`` indicates whether the field should be included in the synthesized "
"``__init__`` method. If unspecified, ``init`` defaults to ``True``."
msgstr "``init`` 指示該欄位是否應包含在合成的``__init__`` "
"方法中。如果未指定，``init`` 預設為 ``True``。"

#: ../../library/typing.rst:2606
#, fuzzy
msgid "``default`` provides the default value for the field."
msgstr "``default`` 提供欄位的預設值。"

#: ../../library/typing.rst:2607
#, fuzzy
msgid ""
"``default_factory`` provides a runtime callback that returns the default "
"value for the field. If neither ``default`` nor ``default_factory`` are "
"specified, the field is assumed to have no default value and must be "
"provided a value when the class is instantiated."
msgstr ""
"``default_factory`` 提供了一個回傳欄位預設值的運行時回呼。如果 ``default`` "
"和 ``default_factory`` "
"均未指定，則假定該欄位沒有預設值，並且必須在實例化類時提供一個值。"

#: ../../library/typing.rst:2612
#, fuzzy
msgid "``factory`` is an alias for ``default_factory``."
msgstr "``factory`` 是``default_factory`` 的別名。"

#: ../../library/typing.rst:2613
#, fuzzy
msgid ""
"``kw_only`` indicates whether the field should be marked as keyword-only. If "
"``True``, the field will be keyword-only. If ``False``, it will not be "
"keyword-only. If unspecified, the value of the ``kw_only`` parameter on the "
"object decorated with ``dataclass_transform`` will be used, or if that is "
"unspecified, the value of ``kw_only_default`` on ``dataclass_transform`` "
"will be used."
msgstr ""
"``kw_only`` "
"指示該欄位是否應標記為僅限關鍵字。如果為 ``True``，該欄位將僅限關鍵字。如果為 ``"
"False``，它將不是僅限關鍵字。如果未指定，將使用裝飾有“dataclass_transform”的"
"對像上的“kw_only”參數的值，或者如果未指定，將使用“dataclass_transform”上的“kw"
"_only_default”的值."

#: ../../library/typing.rst:2619
#, fuzzy
msgid ""
"``alias`` provides an alternative name for the field. This alternative name "
"is used in the synthesized ``__init__`` method."
msgstr "``alias`` 為欄位提供了一個替代名稱。這個替代名稱用於合成的 ``__init__`` "
"方法中。"

#: ../../library/typing.rst:2622
#, fuzzy
msgid ""
"At runtime, this decorator records its arguments in the "
"``__dataclass_transform__`` attribute on the decorated object. It has no "
"other runtime effect."
msgstr "在運行時，這個裝飾器將其參數記錄在裝飾物件的 ``__dataclass_transform__`` "
"屬性中。它沒有其他運行時效果。"

#: ../../library/typing.rst:2626
msgid "See :pep:`681` for more details."
msgstr "更多細節請見 :pep:`681`。"

#: ../../library/typing.rst:2632
#, fuzzy
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one non-"
"``@overload``-decorated definition (for the same function/method). The "
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition, while the latter is used at runtime but should be ignored by a "
"type checker.  At runtime, calling a ``@overload``-decorated function "
"directly will raise :exc:`NotImplementedError`. An example of overload that "
"gives a more precise type than can be expressed using a union or a type "
"variable::"
msgstr ""
"``@overload`` 裝飾器允許描述支援多種不同參數型別組合的函式和方法。一系列 "
"``@overload`` 修飾的定義必須緊跟一個非``@overload`` "
"修飾的定義（對於相同的函式/方法）。 ``@overload`` "
"修飾的定義只是為了型別檢查器的好處，因為它們將被非``@overload`` "
"修飾的定義覆蓋，而後者在運行時使用但應該被忽略通過型別檢查器。在運行時，"
"直接呼叫 ``@overload`` 修飾的函式將引發 :exc:`NotImplementedError`。一個重載的"
"例子，它給出了比使用聯合或型別變數更精確的型別："

#: ../../library/typing.rst:2656
#, fuzzy
msgid ""
"See :pep:`484` for more details and comparison with other typing semantics."
msgstr "有關更多詳細資訊以及與其他型別語義的比較，請參閱 :pep:`484`。"

#: ../../library/typing.rst:2658
#, fuzzy
msgid ""
"Overloaded functions can now be introspected at runtime using :func:"
"`get_overloads`."
msgstr "現在可以使用 :func:`get_overloads` 在運行時檢查重載函式。"

#: ../../library/typing.rst:2665
#, fuzzy
msgid ""
"Return a sequence of :func:`@overload <overload>`-decorated definitions for "
"*func*. *func* is the function object for the implementation of the "
"overloaded function. For example, given the definition of ``process`` in the "
"documentation for :func:`@overload <overload>`, ``get_overloads(process)`` "
"will return a sequence of three function objects for the three defined "
"overloads. If called on a function with no overloads, ``get_overloads()`` "
"returns an empty sequence."
msgstr ""
"回傳 *func* 的一系列 :func:`@overload <overload>` 裝飾定義。 *func* "
"是實作重載函式的函式物件。例如，在 :func:`@overload <overload>` 的文檔中給定 "
"``process`` 的定義，``get_overloads(process)`` 將為三個定義的重載回傳三個函式"
"物件的序列。如果在沒有重載的函式上呼叫，``get_overloads()`` 回傳一個空序列。"

#: ../../library/typing.rst:2673
#, fuzzy
msgid ""
"``get_overloads()`` can be used for introspecting an overloaded function at "
"runtime."
msgstr "``get_overloads()`` 可用於在運行時內省重載函式。"

#: ../../library/typing.rst:2681
#, fuzzy
msgid ""
"Clear all registered overloads in the internal registry. This can be used to "
"reclaim the memory used by the registry."
msgstr "清除內部註冊表中所有已註冊的重載。這可用於回收註冊表使用的記憶體。"

#: ../../library/typing.rst:2689
#, fuzzy
msgid ""
"A decorator to indicate to type checkers that the decorated method cannot be "
"overridden, and the decorated class cannot be subclassed. For example::"
msgstr "一個裝飾器，用於向型別檢查器指示不能重寫被裝飾的方法，並且不能子類別化被裝飾"
"的類。例如：："

#: ../../library/typing.rst:2712
#, fuzzy
msgid ""
"The decorator will now set the ``__final__`` attribute to ``True`` on the "
"decorated object. Thus, a check like ``if getattr(obj, \"__final__\", "
"False)`` can be used at runtime to determine whether an object ``obj`` has "
"been marked as final. If the decorated object does not support setting "
"attributes, the decorator returns the object unchanged without raising an "
"exception."
msgstr ""
"裝飾器現在將在裝飾對像上將 ``__final__`` 屬性設定為 ``True``。因此，"
"可以在運行時使用諸如 if getattr(obj, \"__final__\", False) "
"之類的檢查來確定物件 obj 是否已標記為最終物件。如果被裝飾的對像不支援設定屬性"
"，裝飾器會在不引發例外的情況下回傳未更改的物件。"

#: ../../library/typing.rst:2723
#, fuzzy
msgid "Decorator to indicate that annotations are not type hints."
msgstr "指示註釋不是型別提示的裝飾器。"

#: ../../library/typing.rst:2725
#, fuzzy
msgid ""
"This works as class or function :term:`decorator`.  With a class, it applies "
"recursively to all methods and classes defined in that class (but not to "
"methods defined in its superclasses or subclasses)."
msgstr ""
"這作為類或函式 :term:`decorator` 工作。對於一個類，它遞迴地應用於該類中定義的"
"所有方法和類（但不適用於其超類或子類別中定義的方法）。"

#: ../../library/typing.rst:2729
#, fuzzy
msgid "This mutates the function(s) in place."
msgstr "這會改變函式的位置。"

#: ../../library/typing.rst:2733
#, fuzzy
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr "裝飾器給另一個裝飾器 :func:`no_type_check` 效果。"

#: ../../library/typing.rst:2735
#, fuzzy
msgid ""
"This wraps the decorator with something that wraps the decorated function "
"in :func:`no_type_check`."
msgstr "這用 no_type_check 中包裝裝飾函式的東西包裝了裝飾器。"

#: ../../library/typing.rst:2740
#, fuzzy
msgid "Decorator to mark a class or function to be unavailable at runtime."
msgstr "將類或函式標記為在運行時不可用的裝飾器。"

#: ../../library/typing.rst:2742
#, fuzzy
msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr "這個裝飾器本身在運行時不可用。如果實作回傳私有類的實例，它主要用於標記在型別"
"存根文件中定義的類："

#: ../../library/typing.rst:2753
#, fuzzy
msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr "請注意，不建議回傳私有類的實例。通常最好將此類公開。"

#: ../../library/typing.rst:2757
#, fuzzy
msgid "Introspection helpers"
msgstr "自省助手"

#: ../../library/typing.rst:2761
#, fuzzy
msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr "回傳包含函式、方法、模組或類物件的型別提示的字典。"

#: ../../library/typing.rst:2764
#, fuzzy
msgid ""
"This is often the same as ``obj.__annotations__``. In addition, forward "
"references encoded as string literals are handled by evaluating them in "
"``globals`` and ``locals`` namespaces. For a class ``C``, return a "
"dictionary constructed by merging all the ``__annotations__`` along ``C."
"__mro__`` in reverse order."
msgstr ""
"這通常與 ``obj.__annotations__`` 相同。此外，編碼為字串文字的前向引用通過在“g"
"lobals”和 ``locals``命名空間中評估它們來處理。對於類 ``C``，回傳一個字典，該字典通"
"過將所有“__annotations__”沿“C.__mro__”以相反順序合併而構造。"

#: ../../library/typing.rst:2770
#, fuzzy
msgid ""
"The function recursively replaces all ``Annotated[T, ...]`` with ``T``, "
"unless ``include_extras`` is set to ``True`` (see :class:`Annotated` for "
"more information). For example::"
msgstr ""
"該函式遞迴地用 ``T`` 替換所有 ``Annotated[T, ...]`` ，除非 ``include_extras``"
" 被設定為 ``True``（更多資訊參見 :class:`Annotated`） .例如：："

#: ../../library/typing.rst:2785
#, fuzzy
msgid ""
":func:`get_type_hints` does not work with imported :ref:`type aliases <type-"
"aliases>` that include forward references. Enabling postponed evaluation of "
"annotations (:pep:`563`) may remove the need for most forward references."
msgstr ""
":func:`get_type_hints` 不適用於導入的 :ref:`type aliases <type-aliases>` "
"包括前向引用。啟用註釋的延遲評估 (:pep:`563`) "
"可能會消除對大多數前向引用的需求。"

#: ../../library/typing.rst:2790
msgid "Added ``include_extras`` parameter as part of :pep:`593`."
msgstr "新增 ``include_extras`` 參數（如 :pep:`593` 中所述）。"

#: ../../library/typing.rst:2793
#, fuzzy
msgid ""
"Previously, ``Optional[t]`` was added for function and method annotations if "
"a default value equal to ``None`` was set. Now the annotation is returned "
"unchanged."
msgstr "以前，如果設定了等於 ``None`` 的預設值，則為函式和方法註釋新增 "
"``Optional[t]``。現在註釋被原封不動地回傳。"

#: ../../library/typing.rst:2801
#, fuzzy
msgid "Provide basic introspection for generic types and special typing forms."
msgstr "為泛型型別和特殊型別形式提供基本的內省。"

#: ../../library/typing.rst:2803
#, fuzzy
msgid ""
"For a typing object of the form ``X[Y, Z, ...]`` these functions return "
"``X`` and ``(Y, Z, ...)``. If ``X`` is a generic alias for a builtin or :mod:"
"`collections` class, it gets normalized to the original class. If ``X`` is a "
"union or :class:`Literal` contained in another generic type, the order of "
"``(Y, Z, ...)`` may be different from the order of the original arguments "
"``[Y, Z, ...]`` due to type caching. For unsupported objects return ``None`` "
"and ``()`` correspondingly. Examples::"
msgstr ""
"對於形式為“X[Y, Z, ...]”的打字物件，這些函式回傳 ``X``和“(Y, Z, ...)”。如果 "
"``X`` 是內建類或 :mod:`collections` "
"類的通用別名，它將被規範化為原始類。如果``X`` "
"是聯合或包含在另一個泛型型別中的 :class:`Literal`，則``(Y, Z, ...)`` "
"的順序可能與原始參數的順序不同`` [Y, Z, ...]`` "
"由於型別快取。對於不受支援的物件，相應地回傳 ``None``和“()”。例子：："

#: ../../library/typing.rst:2822
#, fuzzy
msgid "Check if a type is a :class:`TypedDict`."
msgstr "檢查型別是否為 :class:`TypedDict`。"

#: ../../library/typing.rst:2837
#, fuzzy
msgid ""
"A class used for internal typing representation of string forward "
"references. For example, ``List[\"SomeClass\"]`` is implicitly transformed "
"into ``List[ForwardRef(\"SomeClass\")]``.  This class should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""
"用於字串前向引用的內部型別表示的類。例如，``List[\"SomeClass\"]`` "
"被隱式轉換為 ``List[ForwardRef(\"SomeClass\""
")]``。此類不應由使用者實例化，但可由內省工具使用。"

#: ../../library/typing.rst:2843
#, fuzzy
msgid ""
":pep:`585` generic types such as ``list[\"SomeClass\"]`` will not be "
"implicitly transformed into ``list[ForwardRef(\"SomeClass\")]`` and thus "
"will not automatically resolve to ``list[SomeClass]``."
msgstr ""
":pep:`585` 泛型型別，如 ``list[\"SomeClass\"]`` 不會被隱式轉換為 "
"``list[ForwardRef(\"SomeClass\")]`` 因此不會自動解析為 ``list[某些類]``。"

#: ../../library/typing.rst:2850
msgid "Constant"
msgstr "常數"

#: ../../library/typing.rst:2854
#, fuzzy
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It is ``False`` at runtime. Usage::"
msgstr "一個特殊常數，被第 3 方靜態型別檢查器假定為 "
"``True``。它在運行時為 ``False``。用法：："

#: ../../library/typing.rst:2863
#, fuzzy
msgid ""
"The first type annotation must be enclosed in quotes, making it a \"forward "
"reference\", to hide the ``expensive_mod`` reference from the interpreter "
"runtime.  Type annotations for local variables are not evaluated, so the "
"second annotation does not need to be enclosed in quotes."
msgstr ""
"第一個型別註釋必須用引號括起來，使其成為“前向引用”，以隱藏直譯器運行時的 "
"``expensive_mod`` "
"引用。不評估局部變數的型別註釋，因此不需要將第二個註釋括在引號中。"

#: ../../library/typing.rst:2870
#, fuzzy
msgid ""
"If ``from __future__ import annotations`` is used, annotations are not "
"evaluated at function definition time. Instead, they are stored as strings "
"in ``__annotations__``. This makes it unnecessary to use quotes around the "
"annotation (see :pep:`563`)."
msgstr ""
"如果使用``from __future__ import "
"annotations``，則不會在函式定義時評估註釋。相反，它們作為字串儲存在 "
"``__annotations__`` 中。這使得無需在註釋周圍使用引號（參見 :pep:`563`）。"

#: ../../library/typing.rst:2879
#, fuzzy
msgid "Deprecation Timeline of Major Features"
msgstr "主要功能的棄用時間表"

#: ../../library/typing.rst:2881
#, fuzzy
msgid ""
"Certain features in ``typing`` are deprecated and may be removed in a future "
"version of Python. The following table summarizes major deprecations for "
"your convenience. This is subject to change, and not all deprecations are "
"listed."
msgstr ""
"``typing`` 中的某些功能已棄用，可能會在未來的 Python 版本中刪除。為了您的方便"
"，下表總結了主要的棄用。這可能會發生變化，並且並未列出所有棄用。"

#: ../../library/typing.rst:2886
#, fuzzy
msgid "Feature"
msgstr "特徵"

#: ../../library/typing.rst:2886
msgid "Deprecated in"
msgstr "棄用於"

#: ../../library/typing.rst:2886
#, fuzzy
msgid "Projected removal"
msgstr "預計移除"

#: ../../library/typing.rst:2886
#, fuzzy
msgid "PEP/issue"
msgstr "PEP/問題"

#: ../../library/typing.rst:2888
#, fuzzy
msgid "``typing.io`` and ``typing.re`` submodules"
msgstr "``typing.io`` 和 ``typing.re`` 子模組"

#: ../../library/typing.rst:2888
msgid "3.8"
msgstr "3.8"

#: ../../library/typing.rst:2888
msgid "3.13"
msgstr "3.13"

#: ../../library/typing.rst:2888
msgid ":issue:`38291`"
msgstr ":issue:`38291`"

#: ../../library/typing.rst:2891
#, fuzzy
msgid "``typing`` versions of standard collections"
msgstr "``typing`` 標準集合的版本"

#: ../../library/typing.rst:2891
msgid "3.9"
msgstr "3.9"

#: ../../library/typing.rst:2891 ../../library/typing.rst:2894
#, fuzzy
msgid "Undecided"
msgstr "未定"

#: ../../library/typing.rst:2891
msgid ":pep:`585`"
msgstr ":pep:`585`"

#: ../../library/typing.rst:2894
msgid "``typing.Text``"
msgstr "``typing.Text``"

#: ../../library/typing.rst:2894
msgid "3.11"
msgstr "3.11"

#: ../../library/typing.rst:2894
msgid ":gh:`92332`"
msgstr ":gh:`92332`"
