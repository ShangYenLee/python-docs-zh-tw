# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-15 20:43+0000\n"
"PO-Revision-Date: 2018-05-23 16:05+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/math.rst:2
msgid ":mod:`math` --- Mathematical functions"
msgstr ":mod:`math` --- 數學函式"

#: ../../library/math.rst:13
#, fuzzy
msgid ""
"This module provides access to the mathematical functions defined by the C "
"standard."
msgstr "該模組提供對 C 標准定義的數學函式的訪問。"

#: ../../library/math.rst:16
#, fuzzy
msgid ""
"These functions cannot be used with complex numbers; use the functions of "
"the same name from the :mod:`cmath` module if you require support for "
"complex numbers.  The distinction between functions which support complex "
"numbers and those which don't is made since most users do not want to learn "
"quite as much mathematics as required to understand complex numbers.  "
"Receiving an exception instead of a complex result allows earlier detection "
"of the unexpected complex number used as a parameter, so that the programmer "
"can determine how and why it was generated in the first place."
msgstr ""
"這些函式不能用於復數；如果您需要支援複數，請使用 :mod:`cmath` 模組中的同名函"
"式。區分支援複數和不支援複數的函式是因為大多數使用者不想學習理解複數所需的那"
"麼多數學。接收例外而不是複數結果允許更早地檢測用作參數的意外複數，以便程式員"
"可以確定它是如何以及為什麼首先生成的。"

#: ../../library/math.rst:25
#, fuzzy
msgid ""
"The following functions are provided by this module.  Except when explicitly "
"noted otherwise, all return values are floats."
msgstr "該模組提供以下功能。除非另有明確說明，否則所有回傳值都是浮點數。"

#: ../../library/math.rst:30
#, fuzzy
msgid "Number-theoretic and representation functions"
msgstr "數論和表示函式"

#: ../../library/math.rst:34
#, fuzzy
msgid ""
"Return the ceiling of *x*, the smallest integer greater than or equal to "
"*x*. If *x* is not a float, delegates to :meth:`x.__ceil__ <object."
"__ceil__>`, which should return an :class:`~numbers.Integral` value."
msgstr ""
"回傳 *x* 的上限，即大於或等於 *x* 的最小整數。如果 *x* "
"不是浮點數，則委託給 :meth:`x.__ceil__ <object."
"__ceil__>`，它應該回傳一個 :class:`~numbers.Integral` 值。"

#: ../../library/math.rst:41
#, fuzzy
msgid ""
"Return the number of ways to choose *k* items from *n* items without "
"repetition and without order."
msgstr "回傳從 *n* 項中無重複無順序地選擇 *k* 項的方法數。"

#: ../../library/math.rst:44
#, fuzzy
msgid ""
"Evaluates to ``n! / (k! * (n - k)!)`` when ``k <= n`` and evaluates to zero "
"when ``k > n``."
msgstr "評估為``n！ / (k! * (n - k)!)`` 當 ``k <= n`` 時，當 ``k > n`` "
"時計算結果為零。"

#: ../../library/math.rst:47
#, fuzzy
msgid ""
"Also called the binomial coefficient because it is equivalent to the "
"coefficient of k-th term in polynomial expansion of ``(1 + x)ⁿ``."
msgstr "也稱為二項式係數，因為它相當於``(1 + x)ⁿ``的多項式展開中第k項的係數。"

#: ../../library/math.rst:51 ../../library/math.rst:260
#, fuzzy
msgid ""
"Raises :exc:`TypeError` if either of the arguments are not integers. Raises :"
"exc:`ValueError` if either of the arguments are negative."
msgstr "如果任一參數不是整數，則引發 :exc:`TypeError`。如果任一參數為負，則引發 "
":exc:`ValueError`。"

#: ../../library/math.rst:59
#, fuzzy
msgid ""
"Return a float with the magnitude (absolute value) of *x* but the sign of "
"*y*.  On platforms that support signed zeros, ``copysign(1.0, -0.0)`` "
"returns *-1.0*."
msgstr ""
"回傳一個大小（絕對值）為 *x* 但符號為 *y* "
"的浮點數。在支援帶符號零的平台上，``copysign(1.0, -0.0)`` 回傳 *-1.0*。"

#: ../../library/math.rst:66
#, fuzzy
msgid "Return the absolute value of *x*."
msgstr "回傳 *x* 的絕對值。"

#: ../../library/math.rst:71
#, fuzzy
msgid ""
"Return *n* factorial as an integer.  Raises :exc:`ValueError` if *n* is not "
"integral or is negative."
msgstr "將 *n* 階乘作為整數回傳。如果 *n* 不是整數或負數，則引發 :exc:`ValueError`。"

#: ../../library/math.rst:74
#, fuzzy
msgid "Accepting floats with integral values (like ``5.0``) is deprecated."
msgstr "接受具有整數值的浮點數（如 ``5.0``）已被棄用。"

#: ../../library/math.rst:80
#, fuzzy
msgid ""
"Return the floor of *x*, the largest integer less than or equal to *x*.  If "
"*x* is not a float, delegates to :meth:`x.__floor__ <object.__floor__>`, "
"which should return an :class:`~numbers.Integral` value."
msgstr ""
"回傳 *x* 的底數，即小於或等於 *x* 的最大整數。如果 *x* "
"不是浮點數，委託給 :meth:`x.__floor__ <object."
"__floor__>`，它應該回傳一個 :class:`~numbers.Integral` 值。"

#: ../../library/math.rst:87
#, fuzzy
msgid ""
"Return ``fmod(x, y)``, as defined by the platform C library. Note that the "
"Python expression ``x % y`` may not return the same result.  The intent of "
"the C standard is that ``fmod(x, y)`` be exactly (mathematically; to "
"infinite precision) equal to ``x - n*y`` for some integer *n* such that the "
"result has the same sign as *x* and magnitude less than ``abs(y)``.  "
"Python's ``x % y`` returns a result with the sign of *y* instead, and may "
"not be exactly computable for float arguments. For example, ``fmod(-1e-100, "
"1e100)`` is ``-1e-100``, but the result of Python's ``-1e-100 % 1e100`` is "
"``1e100-1e-100``, which cannot be represented exactly as a float, and rounds "
"to the surprising ``1e100``.  For this reason, function :func:`fmod` is "
"generally preferred when working with floats, while Python's ``x % y`` is "
"preferred when working with integers."
msgstr ""
"回傳 ``fmod(x, y)``，由平台 C 庫定義。請注意，Python 表達式“x % "
"y”可能不會回傳相同的結果。 C 標準的目的是對於某個整數 *n* ``fmod(x, y)`` "
"精確地（數學上；無限精度）等於 ``x - n*y`` 使得結果具有與 *x* 符號相同，"
"幅度小於 ``abs(y)``。 Python 的 ``x % y`` 回傳帶有 *y* "
"符號的結果，並且對於浮點參數可能無法精確計算。例如``fmod(-1e-100, "
"1e100)``是``-1e-100``，但是Python的``-1e-100 % 1e100``的結果是``1e100-1e-100`"
" `，它不能完全表示為浮點數，並四捨五入到令人驚訝的 ``1e100``。因此，"
"在處理浮點數時通常首選函式 :func:`fmod`，而在處理整數時首選 Python 的 ``x % "
"y``。"

#: ../../library/math.rst:102
#, fuzzy
msgid ""
"Return the mantissa and exponent of *x* as the pair ``(m, e)``.  *m* is a "
"float and *e* is an integer such that ``x == m * 2**e`` exactly. If *x* is "
"zero, returns ``(0.0, 0)``, otherwise ``0.5 <= abs(m) < 1``.  This is used "
"to \"pick apart\" the internal representation of a float in a portable way."
msgstr ""
"回傳 *x* 的尾數和指數作為對 ``(m, e)``。 *m* 是一個浮點數，*e* 是一個整數，"
"使得 ``x == m * 2**e`` 正好。如果 *x* 為零，則回傳 ``(0.0, 0)``，否則回傳 ``"
"0.5 <= abs(m) < 1``。這用於以可移植的方式“分離”浮點數的內部表示。"

#: ../../library/math.rst:110
#, fuzzy
msgid ""
"Return an accurate floating point sum of values in the iterable.  Avoids "
"loss of precision by tracking multiple intermediate partial sums::"
msgstr "回傳可疊代對像中精確的浮點值總和。通過跟踪多個中間部分和避免精度損失::"

#: ../../library/math.rst:118
#, fuzzy
msgid ""
"The algorithm's accuracy depends on IEEE-754 arithmetic guarantees and the "
"typical case where the rounding mode is half-even.  On some non-Windows "
"builds, the underlying C library uses extended precision addition and may "
"occasionally double-round an intermediate sum causing it to be off in its "
"least significant bit."
msgstr ""
"該演算法的準確性取決於 IEEE-754 算術保證和舍入模式為半偶數的典型情況。"
"在某些非 Windows 版本中，底層 C 庫使用擴充精度加法，並且可能偶爾會對中間和進"
"行雙舍入，導致它的最低有效位被關閉。"

#: ../../library/math.rst:124
#, fuzzy
msgid ""
"For further discussion and two alternative approaches, see the `ASPN "
"cookbook recipes for accurate floating point summation <https://code."
"activestate.com/recipes/393090/>`_\\."
msgstr ""
"有關進一步的討論和兩種替代方法，請參閱`ASPN 食譜食譜以進行精確的浮點求和 "
"<https://code.activestate.com/recipes/393090/>`_\\。"

#: ../../library/math.rst:131
#, fuzzy
msgid ""
"Return the greatest common divisor of the specified integer arguments. If "
"any of the arguments is nonzero, then the returned value is the largest "
"positive integer that is a divisor of all arguments.  If all arguments are "
"zero, then the returned value is ``0``.  ``gcd()`` without arguments returns "
"``0``."
msgstr ""
"回傳指定整數參數的最大公約數。如果任何參數不為零，則回傳值是作為所有參數的除"
"數的最大正整數。如果所有參數均為零，則回傳值為 ``0``。沒有參數的 ``gcd()`` 回傳 "
"``0``。"

#: ../../library/math.rst:139
#, fuzzy
msgid ""
"Added support for an arbitrary number of arguments. Formerly, only two "
"arguments were supported."
msgstr "新增了對任意數量參數的支援。以前，僅支援兩個參數。"

#: ../../library/math.rst:146
#, fuzzy
msgid ""
"Return ``True`` if the values *a* and *b* are close to each other and "
"``False`` otherwise."
msgstr "如果值 *a* 和 *b* 彼此接近，則回傳 ``True``，否則回傳 ``False``。"

#: ../../library/math.rst:149
#, fuzzy
msgid ""
"Whether or not two values are considered close is determined according to "
"given absolute and relative tolerances."
msgstr "兩個值是否接近取決於給定的絕對和相對公差。"

#: ../../library/math.rst:152
#, fuzzy
msgid ""
"*rel_tol* is the relative tolerance -- it is the maximum allowed difference "
"between *a* and *b*, relative to the larger absolute value of *a* or *b*. "
"For example, to set a tolerance of 5%, pass ``rel_tol=0.05``.  The default "
"tolerance is ``1e-09``, which assures that the two values are the same "
"within about 9 decimal digits.  *rel_tol* must be greater than zero."
msgstr ""
"*rel_tol* 是相對公差——它是 *a* 和 *b* 之間的最大允許差異，相對於 *a* 或 *b* "
"的較大絕對值。例如，要設定 5% 的公差，請傳遞 ``rel_tol=0.05``。預設公差為 "
"``1e-09``，它確保兩個值在大約 9 個小數位內相同。 *rel_tol* 必須大於零。"

#: ../../library/math.rst:158
#, fuzzy
msgid ""
"*abs_tol* is the minimum absolute tolerance -- useful for comparisons near "
"zero. *abs_tol* must be at least zero."
msgstr "*abs_tol* 是最小絕對公差——對接近零的比較很有用。 *abs_tol* 必須至少為零。"

#: ../../library/math.rst:161
#, fuzzy
msgid ""
"If no errors occur, the result will be: ``abs(a-b) <= max(rel_tol * "
"max(abs(a), abs(b)), abs_tol)``."
msgstr ""
"如果沒有錯誤發生，結果將是：``abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), "
"abs_tol)``。"

#: ../../library/math.rst:164
#, fuzzy
msgid ""
"The IEEE 754 special values of ``NaN``, ``inf``, and ``-inf`` will be "
"handled according to IEEE rules.  Specifically, ``NaN`` is not considered "
"close to any other value, including ``NaN``.  ``inf`` and ``-inf`` are only "
"considered close to themselves."
msgstr ""
"``NaN``、``inf`` 和 ``-inf`` 的 IEEE 754 特殊值將根據 IEEE "
"規則進行處理。具體來說，``NaN`` 不被認為接近任何其他值，包括 ``NaN``。 "
"``inf`` 和 ``-inf`` 只被認為接近它們自己。"

#: ../../library/math.rst:173
#, fuzzy
msgid ":pep:`485` -- A function for testing approximate equality"
msgstr ":pep:`485` -- 測試近似相等的函式"

#: ../../library/math.rst:178
#, fuzzy
msgid ""
"Return ``True`` if *x* is neither an infinity nor a NaN, and ``False`` "
"otherwise.  (Note that ``0.0`` *is* considered finite.)"
msgstr "如果 *x* 既不是無窮大也不是 NaN，則回傳 ``True``，否則回傳 ``False``。 "
"（請注意，``0.0`` *被*視為有限的。）"

#: ../../library/math.rst:186
#, fuzzy
msgid ""
"Return ``True`` if *x* is a positive or negative infinity, and ``False`` "
"otherwise."
msgstr "如果 *x* 是正無窮大或負無窮大，則回傳 ``True``，否則回傳 ``False``。"

#: ../../library/math.rst:192
#, fuzzy
msgid ""
"Return ``True`` if *x* is a NaN (not a number), and ``False`` otherwise."
msgstr "如果 *x* 是 NaN（不是數字），則回傳 ``True``，否則回傳 ``False``。"

#: ../../library/math.rst:197
#, fuzzy
msgid ""
"Return the integer square root of the nonnegative integer *n*. This is the "
"floor of the exact square root of *n*, or equivalently the greatest integer "
"*a* such that *a*\\ ² |nbsp| ≤ |nbsp| *n*."
msgstr ""
"回傳非負整數 *n* 的整數平方根。這是 *n* 的精確平方根的底，或者等價於最大整數 "
"*a* 使得 *a*\\ ² |nbsp| ≤ |nbsp| *n*。"

#: ../../library/math.rst:201
#, fuzzy
msgid ""
"For some applications, it may be more convenient to have the least integer "
"*a* such that *n* |nbsp| ≤ |nbsp| *a*\\ ², or in other words the ceiling of "
"the exact square root of *n*. For positive *n*, this can be computed using "
"``a = 1 + isqrt(n - 1)``."
msgstr ""
"對於某些應用程式，使用滿足 *n* |nbsp| 的最小整數 *a* 可能更方便≤ |nbsp| *a*\\"
" ²，或者換句話說，*n* 的精確平方根的上限。對於正 *n*，這可以使用 ``a = 1 + "
"isqrt(n - 1)`` 計算。"

#: ../../library/math.rst:211
#, fuzzy
msgid ""
"Return the least common multiple of the specified integer arguments. If all "
"arguments are nonzero, then the returned value is the smallest positive "
"integer that is a multiple of all arguments.  If any of the arguments is "
"zero, then the returned value is ``0``.  ``lcm()`` without arguments returns "
"``1``."
msgstr ""
"回傳指定整數參數的最小公倍數。如果所有參數都非零，則回傳值是所有參數的倍數的"
"最小正整數。如果任何參數為零，則回傳值為 ``0``。沒有參數的 ``lcm()`` 回傳 "
"``1``。"

#: ../../library/math.rst:222
#, fuzzy
msgid ""
"Return ``x * (2**i)``.  This is essentially the inverse of function :func:"
"`frexp`."
msgstr "回傳``x * (2**i)``。這本質上是函式 :func:`frexp` 的反函式。"

#: ../../library/math.rst:228
#, fuzzy
msgid ""
"Return the fractional and integer parts of *x*.  Both results carry the sign "
"of *x* and are floats."
msgstr "回傳 *x* 的小數部分和整數部分。兩個結果都帶有 *x* 符號並且是浮點數。"

#: ../../library/math.rst:234
#, fuzzy
msgid "Return the next floating-point value after *x* towards *y*."
msgstr "將 *x* 之後的下一個浮點值回傳到 *y*。"

#: ../../library/math.rst:236
#, fuzzy
msgid "If *x* is equal to *y*, return *y*."
msgstr "如果 *x* 等於 *y*，則回傳 *y*。"

#: ../../library/math.rst:238
msgid "Examples:"
msgstr "範例："

#: ../../library/math.rst:240
#, fuzzy
msgid "``math.nextafter(x, math.inf)`` goes up: towards positive infinity."
msgstr "``math.nextafter(x, math.inf)`` 上升：朝向正無窮大。"

#: ../../library/math.rst:241
#, fuzzy
msgid "``math.nextafter(x, -math.inf)`` goes down: towards minus infinity."
msgstr "``math.nextafter(x, -math.inf)`` 下降：朝向負無窮大。"

#: ../../library/math.rst:242
#, fuzzy
msgid "``math.nextafter(x, 0.0)`` goes towards zero."
msgstr "``math.nextafter(x, 0.0)`` 趨向於零。"

#: ../../library/math.rst:243
#, fuzzy
msgid "``math.nextafter(x, math.copysign(math.inf, x))`` goes away from zero."
msgstr "``math.nextafter(x, math.copysign(math.inf, x))`` 從零開始。"

#: ../../library/math.rst:245
msgid "See also :func:`math.ulp`."
msgstr "另請參閱 :func:`math.ulp`\\ 。"

#: ../../library/math.rst:251
#, fuzzy
msgid ""
"Return the number of ways to choose *k* items from *n* items without "
"repetition and with order."
msgstr "回傳從 *n* 項中無重複且有順序地選擇 *k* 項的方法數。"

#: ../../library/math.rst:254
#, fuzzy
msgid ""
"Evaluates to ``n! / (n - k)!`` when ``k <= n`` and evaluates to zero when "
"``k > n``."
msgstr "評估為``n！ / (n - k)!`` 當 ``k <= n`` 時，當 ``k > n`` 時計算結果為零。"

#: ../../library/math.rst:257
#, fuzzy
msgid ""
"If *k* is not specified or is None, then *k* defaults to *n* and the "
"function returns ``n!``."
msgstr "如果 *k* 未指定或為 None，則 *k* 預設為 *n* 並且函式回傳 ``n!``。"

#: ../../library/math.rst:268
#, fuzzy
msgid ""
"Calculate the product of all the elements in the input *iterable*. The "
"default *start* value for the product is ``1``."
msgstr "計算輸入 *iterable* 中所有元素的乘積。產品的預設 *start* 值為 ``1``。"

#: ../../library/math.rst:271
#, fuzzy
msgid ""
"When the iterable is empty, return the start value.  This function is "
"intended specifically for use with numeric values and may reject non-numeric "
"types."
msgstr "當可疊代物件為空時，回傳起始值。此函式專門用於數值，可能會拒絕非數字型別。"

#: ../../library/math.rst:280
#, fuzzy
msgid ""
"Return the IEEE 754-style remainder of *x* with respect to *y*.  For finite "
"*x* and finite nonzero *y*, this is the difference ``x - n*y``, where ``n`` "
"is the closest integer to the exact value of the quotient ``x / y``.  If "
"``x / y`` is exactly halfway between two consecutive integers, the nearest "
"*even* integer is used for ``n``.  The remainder ``r = remainder(x, y)`` "
"thus always satisfies ``abs(r) <= 0.5 * abs(y)``."
msgstr ""
"回傳關於 *y* 的 *x* 的 IEEE 754 式餘數。對於有限 *x* 和有限非零值 *y*，這是“"
"x - n*y”之差，其中 ``n``是最接近商“x / y”精確值的整數.如果 ``x / y`` "
"恰好在兩個連續整數的中間，則最近的 *even* 整數用於 ``n``。餘數 ``r = "
"remainder(x, y)`` 因此總是滿足 ``abs(r) <= 0.5 * abs(y)``。"

#: ../../library/math.rst:287
#, fuzzy
msgid ""
"Special cases follow IEEE 754: in particular, ``remainder(x, math.inf)`` is "
"*x* for any finite *x*, and ``remainder(x, 0)`` and ``remainder(math.inf, "
"x)`` raise :exc:`ValueError` for any non-NaN *x*. If the result of the "
"remainder operation is zero, that zero will have the same sign as *x*."
msgstr ""
"特殊情況遵循 IEEE 754：特別是，``remainder(x, math.inf)`` 是 *x* "
"對於任何有限的 *x*，以及 ``remainder(x, 0)`` 和 ``remainder(math. inf, x)`` "
"為任何非 NaN *x* 引發 :exc:`ValueError`。如果餘數運算的結果為零，"
"則該零將具有與 *x* 相同的符號。"

#: ../../library/math.rst:293
#, fuzzy
msgid ""
"On platforms using IEEE 754 binary floating-point, the result of this "
"operation is always exactly representable: no rounding error is introduced."
msgstr "在使用 IEEE 754 "
"二進位浮點數的平台上，此操作的結果始終可以精確表示：不會引入舍入誤差。"

#: ../../library/math.rst:301
#, fuzzy
msgid ""
"Return *x* with the fractional part removed, leaving the integer part.  This "
"rounds toward 0: ``trunc()`` is equivalent to :func:`floor` for positive "
"*x*, and equivalent to :func:`ceil` for negative *x*. If *x* is not a float, "
"delegates to :meth:`x.__trunc__ <object.__trunc__>`, which should return an :"
"class:`~numbers.Integral` value."
msgstr ""
"回傳刪除小數部分的 *x*，保留整數部分。這向 0 舍入：``trunc()`` 相當於正 *x* "
"的 :func:`floor`，以及負 *x* 的 :func:`ceil`。如果 *x* "
"不是浮點數，委託給 :meth:`x.__trunc__ <object."
"__trunc__>`，它應該回傳一個 :class:`~numbers.Integral` 值。"

#: ../../library/math.rst:309
#, fuzzy
msgid "Return the value of the least significant bit of the float *x*:"
msgstr "回傳浮點數 *x* 的最低有效位的值："

#: ../../library/math.rst:311
#, fuzzy
msgid "If *x* is a NaN (not a number), return *x*."
msgstr "如果 *x* 是 NaN（不是數字），則回傳 *x*。"

#: ../../library/math.rst:312
#, fuzzy
msgid "If *x* is negative, return ``ulp(-x)``."
msgstr "如果 *x* 是負數，回傳 ``ulp(-x)``。"

#: ../../library/math.rst:313
#, fuzzy
msgid "If *x* is a positive infinity, return *x*."
msgstr "如果 *x* 是正無窮大，則回傳 *x*。"

#: ../../library/math.rst:314
#, fuzzy
msgid ""
"If *x* is equal to zero, return the smallest positive *denormalized* "
"representable float (smaller than the minimum positive *normalized* float, :"
"data:`sys.float_info.min <sys.float_info>`)."
msgstr ""
"如果 *x* 等於零，則回傳最小正 *denormalized* 可表示浮點數（小於最小正 "
"*normalized* 浮點數，:data:`sys.float_info.min <sys.float_info>`）。"

#: ../../library/math.rst:317
#, fuzzy
msgid ""
"If *x* is equal to the largest positive representable float, return the "
"value of the least significant bit of *x*, such that the first float smaller "
"than *x* is ``x - ulp(x)``."
msgstr "如果 *x* 等於可表示的最大正浮點數，則回傳 *x* 的最低有效位的值，使得小於 *x* "
"的第一個浮點數為 ``x - ulp(x)``。"

#: ../../library/math.rst:320
#, fuzzy
msgid ""
"Otherwise (*x* is a positive finite number), return the value of the least "
"significant bit of *x*, such that the first float bigger than *x* is ``x + "
"ulp(x)``."
msgstr "否則（*x* 是一個正有限數），回傳 *x* 的最低有效位的值，這樣第一個大於 *x* "
"的浮點數是 ``x + ulp(x)``。"

#: ../../library/math.rst:324
#, fuzzy
msgid "ULP stands for \"Unit in the Last Place\"."
msgstr "ULP 代表“最後位置的單元”。"

#: ../../library/math.rst:326
#, fuzzy
msgid ""
"See also :func:`math.nextafter` and :data:`sys.float_info.epsilon <sys."
"float_info>`."
msgstr ""
"另見 :func:`math.nextafter` 和 :data:`sys.float_info.epsilon <sys."
"float_info>`。"

#: ../../library/math.rst:332
#, fuzzy
msgid ""
"Note that :func:`frexp` and :func:`modf` have a different call/return "
"pattern than their C equivalents: they take a single argument and return a "
"pair of values, rather than returning their second return value through an "
"'output parameter' (there is no such thing in Python)."
msgstr ""
"請注意 :func:`frexp` 和 :func:`modf` 與它們的 C 等效項具有不同的呼叫/回傳模式"
"：它們採用單個參數並回傳一對值，而不是通過“輸出”回傳它們的第二個回傳值paramet"
"er'（Python 中沒有這樣的東西）。"

#: ../../library/math.rst:337
#, fuzzy
msgid ""
"For the :func:`ceil`, :func:`floor`, and :func:`modf` functions, note that "
"*all* floating-point numbers of sufficiently large magnitude are exact "
"integers. Python floats typically carry no more than 53 bits of precision "
"(the same as the platform C double type), in which case any float *x* with "
"``abs(x) >= 2**52`` necessarily has no fractional bits."
msgstr ""
"對於 :func:`ceil`、:func:`floor` 和 :func:`modf` "
"函式，請注意*所有*足夠大的浮點數都是精確整數。 Python 浮點數通常攜帶不超過 "
"53 位的精度（與平台 C double 型別相同），在這種情況下，任何具有 ``abs(x) >= "
"2**52`` 的浮點數 *x* 必然沒有小數位."

#: ../../library/math.rst:345
#, fuzzy
msgid "Power and logarithmic functions"
msgstr "冪函式和對數函式"

#: ../../library/math.rst:349
#, fuzzy
msgid "Return the cube root of *x*."
msgstr "回傳 *x* 的立方根。"

#: ../../library/math.rst:356
#, fuzzy
msgid ""
"Return *e* raised to the power *x*, where *e* = 2.718281... is the base of "
"natural logarithms.  This is usually more accurate than ``math.e ** x`` or "
"``pow(math.e, x)``."
msgstr ""
"回傳 *e* 的 *x* 次方，其中 *e* = 2.718281... 是自然對數的底。這通常比 ``"
"math.e ** x`` 或 ``pow(math.e, x)`` 更準確。"

#: ../../library/math.rst:363
#, fuzzy
msgid "Return *2* raised to the power *x*."
msgstr "回傳 *2* 的 *x* 次方。"

#: ../../library/math.rst:370
#, fuzzy
msgid ""
"Return *e* raised to the power *x*, minus 1.  Here *e* is the base of "
"natural logarithms.  For small floats *x*, the subtraction in ``exp(x) - 1`` "
"can result in a `significant loss of precision <https://en.wikipedia.org/"
"wiki/Loss_of_significance>`_\\; the :func:`expm1` function provides a way to "
"compute this quantity to full precision::"
msgstr ""
"回傳 *e* 的 *x* 次方減 1。這裡 *e* 是自然對數的底。對於小浮點數 *x*，``exp(x)"
" - 1`` 中的減法會導致`顯著的精度損失 <https://en.wikipedia.org/wiki/"
"Loss_of_significance>`_\\; :func:`expm1` "
"函式提供了一種完全精確地計算此數量的方法::"

#: ../../library/math.rst:387
#, fuzzy
msgid "With one argument, return the natural logarithm of *x* (to base *e*)."
msgstr "使用一個參數，回傳 *x* 的自然對數（以 *e* 為底）。"

#: ../../library/math.rst:389
#, fuzzy
msgid ""
"With two arguments, return the logarithm of *x* to the given *base*, "
"calculated as ``log(x)/log(base)``."
msgstr "使用兩個參數，將 *x* 的對數回傳到給定的 *base*，計算為 ``log(x)/log(base)``。"

#: ../../library/math.rst:395
#, fuzzy
msgid ""
"Return the natural logarithm of *1+x* (base *e*). The result is calculated "
"in a way which is accurate for *x* near zero."
msgstr "回傳 *1+x* 的自然對數（以 *e* 為底）。結果的計算方式對於 *x* 接近零是準確的。"

#: ../../library/math.rst:401
#, fuzzy
msgid ""
"Return the base-2 logarithm of *x*. This is usually more accurate than "
"``log(x, 2)``."
msgstr "回傳 *x* 的以 2 為底的對數。這通常比 log(x, 2) 更準確。"

#: ../../library/math.rst:408
#, fuzzy
msgid ""
":meth:`int.bit_length` returns the number of bits necessary to represent an "
"integer in binary, excluding the sign and leading zeros."
msgstr ":meth:`int.bit_length` 回傳表示二進位整數所需的位數，不包括符號和前導零。"

#: ../../library/math.rst:414
#, fuzzy
msgid ""
"Return the base-10 logarithm of *x*.  This is usually more accurate than "
"``log(x, 10)``."
msgstr "回傳 *x* 的以 10 為底的對數。這通常比 log(x, 10) 更準確。"

#: ../../library/math.rst:420
#, fuzzy
msgid ""
"Return ``x`` raised to the power ``y``.  Exceptional cases follow the IEEE "
"754 standard as far as possible.  In particular, ``pow(1.0, x)`` and "
"``pow(x, 0.0)`` always return ``1.0``, even when ``x`` is a zero or a NaN.  "
"If both ``x`` and ``y`` are finite, ``x`` is negative, and ``y`` is not an "
"integer then ``pow(x, y)`` is undefined, and raises :exc:`ValueError`."
msgstr ""
"回傳 ``x`` 的 ``y`` 次方。例外情況盡可能遵循 IEEE 754 標準。特別是，``pow("
"1.0, x)`` 和 ``pow(x, 0.0)`` 總是回傳 ``1.0``，即使 ``x`` 是零或 NaN。如果 "
"``x`` 和 ``y`` 都是有限的，``x`` 為負數，而 ``y`` 不是整數，則 ``pow(x, y)`` "
"未定義，並引發 :exc:`ValueError`。"

#: ../../library/math.rst:427
#, fuzzy
msgid ""
"Unlike the built-in ``**`` operator, :func:`math.pow` converts both its "
"arguments to type :class:`float`.  Use ``**`` or the built-in :func:`pow` "
"function for computing exact integer powers."
msgstr ""
"與內建的 ``**`` 運算符不同，:func:`math.pow` 將其兩個參數都轉換為 "
":class:`float` 型別。使用 ``**`` 或內建的 :func:`pow` "
"函式來計算精確的整數冪。"

#: ../../library/math.rst:431
#, fuzzy
msgid ""
"The special cases ``pow(0.0, -inf)`` and ``pow(-0.0, -inf)`` were changed to "
"return ``inf`` instead of raising :exc:`ValueError`, for consistency with "
"IEEE 754."
msgstr ""
"特殊情況 ``pow(0.0, -inf)`` 和 ``pow(-0.0, -inf)`` 被更改為回傳 ``inf`` "
"而不是引發 :exc:`ValueError`，以與 IEEE 保持一致754."

#: ../../library/math.rst:439
#, fuzzy
msgid "Return the square root of *x*."
msgstr "回傳 *x* 的平方根。"

#: ../../library/math.rst:443
#, fuzzy
msgid "Trigonometric functions"
msgstr "三角函式"

#: ../../library/math.rst:447
#, fuzzy
msgid ""
"Return the arc cosine of *x*, in radians. The result is between ``0`` and "
"``pi``."
msgstr "以弧度回傳 *x* 的反餘弦值。結果在 ``0`` 和 ``pi`` 之間。"

#: ../../library/math.rst:453
#, fuzzy
msgid ""
"Return the arc sine of *x*, in radians. The result is between ``-pi/2`` and "
"``pi/2``."
msgstr "以弧度回傳 *x* 的反正弦值。結果介於 ``-pi/2`` 和 ``pi/2`` 之間。"

#: ../../library/math.rst:459
#, fuzzy
msgid ""
"Return the arc tangent of *x*, in radians. The result is between ``-pi/2`` "
"and ``pi/2``."
msgstr "以弧度回傳 *x* 的反正切。結果介於 ``-pi/2`` 和 ``pi/2`` 之間。"

#: ../../library/math.rst:465
#, fuzzy
msgid ""
"Return ``atan(y / x)``, in radians. The result is between ``-pi`` and "
"``pi``. The vector in the plane from the origin to point ``(x, y)`` makes "
"this angle with the positive X axis. The point of :func:`atan2` is that the "
"signs of both inputs are known to it, so it can compute the correct quadrant "
"for the angle. For example, ``atan(1)`` and ``atan2(1, 1)`` are both "
"``pi/4``, but ``atan2(-1, -1)`` is ``-3*pi/4``."
msgstr ""
"回傳 ``atan(y / x)``，以弧度為單位。結果介於 ``-pi``和 ``pi``之間。從原點到點 ``("
"x, y)`` 的平面矢量與正 X 軸成這個角度。 :func:`atan2` "
"的要點是它知道兩個輸入的符號，因此它可以計算角度的正確象限。例如，``atan(1)``"
" 和 ``atan2(1, 1)`` 都是 ``pi/4``，但是 ``atan2(-1, -1)`` 是 ``-3 "
"*圓周率/4``。"

#: ../../library/math.rst:475
#, fuzzy
msgid "Return the cosine of *x* radians."
msgstr "回傳 *x* 弧度的餘弦值。"

#: ../../library/math.rst:480
#, fuzzy
msgid ""
"Return the Euclidean distance between two points *p* and *q*, each given as "
"a sequence (or iterable) of coordinates.  The two points must have the same "
"dimension."
msgstr "回傳兩點 *p* 和 *q* 之間的歐氏距離，每個點都作為坐標序列（或可疊代的）給出。"
"這兩個點必須具有相同的維度。"

#: ../../library/math.rst:484
#, fuzzy
msgid "Roughly equivalent to::"
msgstr "大致相當於::"

#: ../../library/math.rst:493
#, fuzzy
msgid ""
"Return the Euclidean norm, ``sqrt(sum(x**2 for x in coordinates))``. This is "
"the length of the vector from the origin to the point given by the "
"coordinates."
msgstr "回傳歐幾里德範數，``sqrt(sum(x**2 for x in "
"coordinates))``。這是從原點到坐標給定點的矢量長度。"

#: ../../library/math.rst:497
#, fuzzy
msgid ""
"For a two dimensional point ``(x, y)``, this is equivalent to computing the "
"hypotenuse of a right triangle using the Pythagorean theorem, ``sqrt(x*x + "
"y*y)``."
msgstr "對於二維點“(x, y)”，這相當於使用勾股定理“sqrt(x*x + "
"y*y)”計算直角三角形的斜邊。"

#: ../../library/math.rst:501
#, fuzzy
msgid ""
"Added support for n-dimensional points. Formerly, only the two dimensional "
"case was supported."
msgstr "新增了對 n 維點的支援。以前，僅支援二維情況。"

#: ../../library/math.rst:505
#, fuzzy
msgid ""
"Improved the algorithm's accuracy so that the maximum error is under 1 ulp "
"(unit in the last place).  More typically, the result is almost always "
"correctly rounded to within 1/2 ulp."
msgstr "提高了演算法的準確性，使最大誤差低於 1 ulp（單位在最後一位）。更典型的是，"
"結果幾乎總是正確四捨五入到 1/2 ulp 以內。"

#: ../../library/math.rst:513
#, fuzzy
msgid "Return the sine of *x* radians."
msgstr "回傳 *x* 弧度的正弦值。"

#: ../../library/math.rst:518
#, fuzzy
msgid "Return the tangent of *x* radians."
msgstr "回傳 *x* 弧度的正切值。"

#: ../../library/math.rst:522
#, fuzzy
msgid "Angular conversion"
msgstr "角度轉換"

#: ../../library/math.rst:526
#, fuzzy
msgid "Convert angle *x* from radians to degrees."
msgstr "將角度 *x* 從弧度轉換為度數。"

#: ../../library/math.rst:531
#, fuzzy
msgid "Convert angle *x* from degrees to radians."
msgstr "將角度 *x* 從度數轉換為弧度。"

#: ../../library/math.rst:535
#, fuzzy
msgid "Hyperbolic functions"
msgstr "雙曲函式"

#: ../../library/math.rst:537
#, fuzzy
msgid ""
"`Hyperbolic functions <https://en.wikipedia.org/wiki/Hyperbolic_function>`_ "
"are analogs of trigonometric functions that are based on hyperbolas instead "
"of circles."
msgstr ""
"`雙曲函式 <https://en.wikipedia.org/wiki/Hyperbolic_function>`_ "
"是基於雙曲線而不是圓的三角函式的類比。"

#: ../../library/math.rst:543
#, fuzzy
msgid "Return the inverse hyperbolic cosine of *x*."
msgstr "回傳 *x* 的反雙曲餘弦值。"

#: ../../library/math.rst:548
#, fuzzy
msgid "Return the inverse hyperbolic sine of *x*."
msgstr "回傳 *x* 的反雙曲正弦值。"

#: ../../library/math.rst:553
#, fuzzy
msgid "Return the inverse hyperbolic tangent of *x*."
msgstr "回傳 *x* 的反雙曲正切值。"

#: ../../library/math.rst:558
#, fuzzy
msgid "Return the hyperbolic cosine of *x*."
msgstr "回傳 *x* 的雙曲餘弦值。"

#: ../../library/math.rst:563
#, fuzzy
msgid "Return the hyperbolic sine of *x*."
msgstr "回傳 *x* 的雙曲正弦值。"

#: ../../library/math.rst:568
#, fuzzy
msgid "Return the hyperbolic tangent of *x*."
msgstr "回傳 *x* 的雙曲正切值。"

#: ../../library/math.rst:572
#, fuzzy
msgid "Special functions"
msgstr "特殊功能"

#: ../../library/math.rst:576
#, fuzzy
msgid ""
"Return the `error function <https://en.wikipedia.org/wiki/Error_function>`_ "
"at *x*."
msgstr "在 *x* 處回傳`錯誤函式 <https://en.wikipedia.org/wiki/Error_function>`_。"

#: ../../library/math.rst:579
#, fuzzy
msgid ""
"The :func:`erf` function can be used to compute traditional statistical "
"functions such as the `cumulative standard normal distribution <https://en."
"wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_functions>`_::"
msgstr ""
":func:`erf` 函式可用於計算傳統統計函式，例如`累積標準正態分佈 <https://en."
"wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_functions>`_::"

#: ../../library/math.rst:592
#, fuzzy
msgid ""
"Return the complementary error function at *x*.  The `complementary error "
"function <https://en.wikipedia.org/wiki/Error_function>`_ is defined as "
"``1.0 - erf(x)``.  It is used for large values of *x* where a subtraction "
"from one would cause a `loss of significance <https://en.wikipedia.org/wiki/"
"Loss_of_significance>`_\\."
msgstr ""
"回傳 *x* 處的互補誤差函式。 `互補誤差函式 <https://en.wikipedia.org/wiki/"
"Error_function>`_ 被定義為 ``1.0 - erf(x)``。它用於較大的 *x* 值，其中從 1 "
"減去會導致“失去重要性 <https://en.wikipedia.org/wiki/Loss_of_significance>”`"
"_\\。"

#: ../../library/math.rst:603
#, fuzzy
msgid ""
"Return the `Gamma function <https://en.wikipedia.org/wiki/Gamma_function>`_ "
"at *x*."
msgstr "在 *x* 處回傳 `Gamma 函式 <https://en.wikipedia.org/wiki/Gamma_function>`_。"

#: ../../library/math.rst:611
#, fuzzy
msgid ""
"Return the natural logarithm of the absolute value of the Gamma function at "
"*x*."
msgstr "回傳 *x* 處 Gamma 函式絕對值的自然對數。"

#: ../../library/math.rst:618
msgid "Constants"
msgstr "常數"

#: ../../library/math.rst:622
#, fuzzy
msgid "The mathematical constant *π* = 3.141592..., to available precision."
msgstr "數學常數 *π* = 3.141592...，達到可用精度。"

#: ../../library/math.rst:627
#, fuzzy
msgid "The mathematical constant *e* = 2.718281..., to available precision."
msgstr "數學常數 *e* = 2.718281...，達到可用精度。"

#: ../../library/math.rst:632
#, fuzzy
msgid ""
"The mathematical constant *τ* = 6.283185..., to available precision. Tau is "
"a circle constant equal to 2\\ *π*, the ratio of a circle's circumference to "
"its radius. To learn more about Tau, check out Vi Hart's video `Pi is "
"(still) Wrong <https://www.youtube.com/watch?v=jG7vhMMXagQ>`_, and start "
"celebrating `Tau day <https://tauday.com/>`_ by eating twice as much pie!"
msgstr ""
"數學常數 *τ* = 6.283185...，達到可用精度。 Tau 是一個圓常數，等於 2\\ "
"*π*，即圓的周長與其半徑的比值。要了解有關 Tau 的更多資訊，請查看 Vi Hart "
"的視頻“Pi is (still) Wrong <https://www.youtube.com/"
"watch?v=jG7vhMMXagQ>`_，並開始慶祝“Tau 日”<https://tauday .com/>`_ "
"吃兩倍的餡餅！"

#: ../../library/math.rst:643
#, fuzzy
msgid ""
"A floating-point positive infinity.  (For negative infinity, use ``-math."
"inf``.)  Equivalent to the output of ``float('inf')``."
msgstr "浮點正無窮大。 （對於負無窮大，使用 ``-math.inf``。）相當於 ``float('inf')`` "
"的輸出。"

#: ../../library/math.rst:651
#, fuzzy
msgid ""
"A floating-point \"not a number\" (NaN) value. Equivalent to the output of "
"``float('nan')``. Due to the requirements of the `IEEE-754 standard <https://"
"en.wikipedia.org/wiki/IEEE_754>`_, ``math.nan`` and ``float('nan')`` are not "
"considered to equal to any other numeric value, including themselves. To "
"check whether a number is a NaN, use the :func:`isnan` function to test for "
"NaNs instead of ``is`` or ``==``. Example::"
msgstr ""
"浮點“非數字”(NaN) 值。相當於 ``float('nan')`` 的輸出。由於 `IEEE-754 標準 "
"<https://en.wikipedia.org/wiki/IEEE_754>`_ 的要求，``math.nan`` 和 "
"``float('nan')`` 不被考慮等於任何其他數值，包括它們自己。"
"要檢查一個數字是否為 NaN，請使用 :func:`isnan` 函式來測試 NaN，而不是 ``is`` "
"或 ``==``。例子：："

#: ../../library/math.rst:669
#, fuzzy
msgid "It is now always available."
msgstr "它現在始終可用。"

#: ../../library/math.rst:677
#, fuzzy
msgid ""
"The :mod:`math` module consists mostly of thin wrappers around the platform "
"C math library functions.  Behavior in exceptional cases follows Annex F of "
"the C99 standard where appropriate.  The current implementation will raise :"
"exc:`ValueError` for invalid operations like ``sqrt(-1.0)`` or ``log(0.0)`` "
"(where C99 Annex F recommends signaling invalid operation or divide-by-"
"zero), and :exc:`OverflowError` for results that overflow (for example, "
"``exp(1000.0)``).  A NaN will not be returned from any of the functions "
"above unless one or more of the input arguments was a NaN; in that case, "
"most functions will return a NaN, but (again following C99 Annex F) there "
"are some exceptions to this rule, for example ``pow(float('nan'), 0.0)`` or "
"``hypot(float('nan'), float('inf'))``."
msgstr ""
":mod:`math` 模組主要由圍繞平台 C 數學庫函式的薄包裝器組成。"
"例外情況下的行為會酌情遵循 C99 標準的附件 F。當前的實作將引發 "
":exc:`ValueError` 用於無效操作，如 ``sqrt(-1.0)`` 或 ``log(0.0)``（其中 C99 "
"附件 F 建議發出無效操作或被零除），和 :exc:`OverflowError` "
"表示溢出的結果（例如，``exp(1000.0)``）。除非一個或多個輸入參數是 NaN，"
"否則上述任何函式都不會回傳 NaN；在那種情況下，大多數函式將回傳 NaN，但是（"
"再次遵循 C99 附錄 F）此規則有一些例外，例如 ``pow(float('nan'), 0.0)`` 或 "
"``hypot(float （'nan'），浮動（'inf'））``。"

#: ../../library/math.rst:689
#, fuzzy
msgid ""
"Note that Python makes no effort to distinguish signaling NaNs from quiet "
"NaNs, and behavior for signaling NaNs remains unspecified. Typical behavior "
"is to treat all NaNs as though they were quiet."
msgstr "請注意，Python 不會努力區分信號 NaN 和安靜 NaN，並且信號 NaN 的行為仍未指定。"
"典型的行為是將所有 NaN 視為安靜。"

#: ../../library/math.rst:696
msgid "Module :mod:`cmath`"
msgstr ":mod:`cmath` 模組"

#: ../../library/math.rst:697
#, fuzzy
msgid "Complex number versions of many of these functions."
msgstr "其中許多函式的複數版本。"
