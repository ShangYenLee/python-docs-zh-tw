# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-15 00:17+0000\n"
"PO-Revision-Date: 2016-01-31 07:18+0000\n"
"Last-Translator: Liang-Bo Wang <me@liang2.tw>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/fractions.rst:2
msgid ":mod:`fractions` --- Rational numbers"
msgstr ":mod:`fractions` --- 有理數"

#: ../../library/fractions.rst:10
msgid "**Source code:** :source:`Lib/fractions.py`"
msgstr "**原始碼：**\\ :source:`Lib/fractions.py`"

#: ../../library/fractions.rst:14
#, fuzzy
msgid ""
"The :mod:`fractions` module provides support for rational number arithmetic."
msgstr ":mod:`fractions` 模組提供對有理數算術的支援。"

#: ../../library/fractions.rst:17
#, fuzzy
msgid ""
"A Fraction instance can be constructed from a pair of integers, from another "
"rational number, or from a string."
msgstr "Fraction 實例可以從一對整數、另一個有理數或字串構造。"

#: ../../library/fractions.rst:26
#, fuzzy
msgid ""
"The first version requires that *numerator* and *denominator* are instances "
"of :class:`numbers.Rational` and returns a new :class:`Fraction` instance "
"with value ``numerator/denominator``. If *denominator* is :const:`0`, it "
"raises a :exc:`ZeroDivisionError`. The second version requires that "
"*other_fraction* is an instance of :class:`numbers.Rational` and returns a :"
"class:`Fraction` instance with the same value.  The next two versions accept "
"either a :class:`float` or a :class:`decimal.Decimal` instance, and return "
"a :class:`Fraction` instance with exactly the same value.  Note that due to "
"the usual issues with binary floating-point (see :ref:`tut-fp-issues`), the "
"argument to ``Fraction(1.1)`` is not exactly equal to 11/10, and so "
"``Fraction(1.1)`` does *not* return ``Fraction(11, 10)`` as one might "
"expect. (But see the documentation for the :meth:`limit_denominator` method "
"below.) The last version of the constructor expects a string or unicode "
"instance. The usual form for this instance is::"
msgstr ""
"第一個版本要求 *numerator* 和 *denominator* 是 numbers.Rational 的實例，"
"並回傳一個新的 Fraction 實例，值為“numerator/denominator”。如果 *denominator*"
" 是 :const:`0`，它會引發 :exc:`ZeroDivisionError`。第二個版本要求 "
"*other_fraction* 是 numbers.Rational 的一個實例，並回傳一個具有相同值的 "
"Fraction 實例。接下來的兩個版本接受 :class:`float` 或 :class:`decimal."
"Decimal` 實例，並回傳具有完全相同值的 :class:`Fraction` "
"實例。請注意，由於二進位浮點數的常見問題（參見 :ref:`tut-fp-"
"issues`），``Fraction(1.1)`` 的參數並不完全等於 11/10，因此 `` Fraction(1."
"1)`` *不會*像人們預期的那樣回傳 ``Fraction(11, 10)``。 （但請參閱下面的 "
":meth:`limit_denominator` 方法的文檔。）構造函式的最後一個版本需要一個字串或 "
"unicode 實例。此實例的常用形式是："

#: ../../library/fractions.rst:43
#, fuzzy
msgid ""
"where the optional ``sign`` may be either '+' or '-' and ``numerator`` and "
"``denominator`` (if present) are strings of decimal digits (underscores may "
"be used to delimit digits as with integral literals in code).  In addition, "
"any string that represents a finite value and is accepted by the :class:"
"`float` constructor is also accepted by the :class:`Fraction` constructor.  "
"In either form the input string may also have leading and/or trailing "
"whitespace. Here are some examples::"
msgstr ""
"其中可選的“符號”可以是 ``+``或 ``-``，“分子”和“分母”（如果存在）是十進位數字的字串"
"（底線可用於分隔數字，如整數程式碼中的文字）。此外，任何表示有限值並被 "
"float 構造函式接受的字串也被 Fraction 構造函式接受。在任何一種形式中，輸入字"
"串也可能有前導和/或尾隨空格。這裡有些例子：："

#: ../../library/fractions.rst:78
#, fuzzy
msgid ""
"The :class:`Fraction` class inherits from the abstract base class :class:"
"`numbers.Rational`, and implements all of the methods and operations from "
"that class.  :class:`Fraction` instances are :term:`hashable`, and should be "
"treated as immutable.  In addition, :class:`Fraction` has the following "
"properties and methods:"
msgstr ""
":class:`Fraction` 類繼承自抽象基底類別 :class:`numbers."
"Rational`，並實作該類的所有方法和操作。 :class:`Fraction` "
"實例是 :term:`hashable`，應該被視為不可變的。此外，:class:`Fraction` "
"具有以下屬性和方法："

#: ../../library/fractions.rst:84
#, fuzzy
msgid ""
"The :class:`Fraction` constructor now accepts :class:`float` and :class:"
"`decimal.Decimal` instances."
msgstr ""
":class:`Fraction` 構造函式現在接受 :class:`float` 和 :class:`decimal.Decimal`"
" 實例。"

#: ../../library/fractions.rst:88
#, fuzzy
msgid ""
"The :func:`math.gcd` function is now used to normalize the *numerator* and "
"*denominator*. :func:`math.gcd` always return a :class:`int` type. "
"Previously, the GCD type depended on *numerator* and *denominator*."
msgstr ""
":func:`math.gcd` 函式現在用於規範化 *numerator* 和 *denominator*。 "
":func:`math.gcd` 總是回傳一個 :class:`int` 型別。以前，GCD 型別取決於 "
"*numerator* 和 *denominator*。"

#: ../../library/fractions.rst:93
#, fuzzy
msgid ""
"Underscores are now permitted when creating a :class:`Fraction` instance "
"from a string, following :PEP:`515` rules."
msgstr "根據 :PEP:`515` 規則，從字串建立 :class:`Fraction` 實例時現在允許使用底線。"

#: ../../library/fractions.rst:97
#, fuzzy
msgid ""
":class:`Fraction` implements ``__int__`` now to satisfy ``typing."
"SupportsInt`` instance checks."
msgstr ":class:`Fraction` 現在實作 `__int__`` 以滿足 ``typing.SupportsInt`` "
"實例檢查。"

#: ../../library/fractions.rst:103
#, fuzzy
msgid "Numerator of the Fraction in lowest term."
msgstr "分數最低項的分子。"

#: ../../library/fractions.rst:107
#, fuzzy
msgid "Denominator of the Fraction in lowest term."
msgstr "最低項分數的分母。"

#: ../../library/fractions.rst:112
#, fuzzy
msgid ""
"Return a tuple of two integers, whose ratio is equal to the Fraction and "
"with a positive denominator."
msgstr "回傳兩個整數的元組，其比率等於 Fraction 並且具有正分母。"

#: ../../library/fractions.rst:119
#, fuzzy
msgid ""
"Alternative constructor which only accepts instances of :class:`float` or :"
"class:`numbers.Integral`. Beware that ``Fraction.from_float(0.3)`` is not "
"the same value as ``Fraction(3, 10)``."
msgstr ""
"僅接受 float 或 numbers.Integral 實例的替代構造函式。請注意，``Fraction."
"from_float(0.3)`` 與``Fraction(3, 10)`` 的值不同。"

#: ../../library/fractions.rst:125
#, fuzzy
msgid ""
"From Python 3.2 onwards, you can also construct a :class:`Fraction` instance "
"directly from a :class:`float`."
msgstr "從 Python 3.2 開始，您還可以直接從 :class:`float` 構造一個 :class:`Fraction` "
"實例。"

#: ../../library/fractions.rst:131
#, fuzzy
msgid ""
"Alternative constructor which only accepts instances of :class:`decimal."
"Decimal` or :class:`numbers.Integral`."
msgstr "僅接受 decimal.Decimal 或 numbers.Integral 實例的替代構造函式。"

#: ../../library/fractions.rst:136
#, fuzzy
msgid ""
"From Python 3.2 onwards, you can also construct a :class:`Fraction` instance "
"directly from a :class:`decimal.Decimal` instance."
msgstr ""
"從 Python 3.2 開始，您還可以直接從 :class:`decimal.Decimal` 實例構造一個 "
":class:`Fraction` 實例。"

#: ../../library/fractions.rst:143
#, fuzzy
msgid ""
"Finds and returns the closest :class:`Fraction` to ``self`` that has "
"denominator at most max_denominator.  This method is useful for finding "
"rational approximations to a given floating-point number:"
msgstr ""
"查找並回傳最接近分母最多為 max_denominator 的 ``self`` "
"的 :class:`Fraction`。此方法對於查找給定浮點數的有理近似值很有用："

#: ../../library/fractions.rst:151
#, fuzzy
msgid "or for recovering a rational number that's represented as a float:"
msgstr "或者用於恢復表示為浮點數的有理數："

#: ../../library/fractions.rst:164
#, fuzzy
msgid ""
"Returns the greatest :class:`int` ``<= self``.  This method can also be "
"accessed through the :func:`math.floor` function:"
msgstr "回傳最大的 :class:`int` ``<= self``。這個方法也可以通過 math.floor 函式訪問："

#: ../../library/fractions.rst:174
#, fuzzy
msgid ""
"Returns the least :class:`int` ``>= self``.  This method can also be "
"accessed through the :func:`math.ceil` function."
msgstr "回傳最少的 :class:`int` ``>= self``。也可以通過 math.ceil 函式訪問此方法。"

#: ../../library/fractions.rst:181
#, fuzzy
msgid ""
"The first version returns the nearest :class:`int` to ``self``, rounding "
"half to even. The second version rounds ``self`` to the nearest multiple of "
"``Fraction(1, 10**ndigits)`` (logically, if ``ndigits`` is negative), again "
"rounding half toward even.  This method can also be accessed through the :"
"func:`round` function."
msgstr ""
"第一個版本回傳最接近的 :class:`int` 到 ``self``，四捨五入為偶數。"
"第二個版本將 ``self`` 舍入到最接近的 ``Fraction(1, 10**ndigits)`` "
"的倍數（邏輯上，如果 ``ndigits`` 為負數），再次向偶數舍入一半。也可以通過 "
":func:`round` 函式訪問此方法。"

#: ../../library/fractions.rst:190
msgid "Module :mod:`numbers`"
msgstr ":mod:`numbers` 模組"

#: ../../library/fractions.rst:191
#, fuzzy
msgid "The abstract base classes making up the numeric tower."
msgstr "組成數字塔的抽象基底類別。"
