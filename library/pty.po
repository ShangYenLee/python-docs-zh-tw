# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-24 00:16+0000\n"
"PO-Revision-Date: 2016-11-19 00:33+0000\n"
"Last-Translator: Liang-Bo Wang <me@liang2.tw>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pty.rst:2
msgid ":mod:`pty` --- Pseudo-terminal utilities"
msgstr ":mod:`pty` --- 偽終端工具程式"

#: ../../library/pty.rst:11
msgid "**Source code:** :source:`Lib/pty.py`"
msgstr "**原始碼：**\\ :source:`Lib/pty.py`"

#: ../../library/pty.rst:15
#, fuzzy
msgid ""
"The :mod:`pty` module defines operations for handling the pseudo-terminal "
"concept: starting another process and being able to write to and read from "
"its controlling terminal programmatically."
msgstr ":mod:`pty` 模組定義了用於處理偽終端概念的操作：啟動另一個行程並能夠以編程方式"
"寫入和讀取其控制終端。"

#: ../../library/pty.rst:19
#, fuzzy
msgid ""
"Pseudo-terminal handling is highly platform dependent. This code is mainly "
"tested on Linux, FreeBSD, and macOS (it is supposed to work on other POSIX "
"platforms but it's not been thoroughly tested)."
msgstr ""
"偽終端處理高度依賴於平台。此程式碼主要在 Linux、FreeBSD 和 macOS "
"上進行了測試（它應該可以在其他 POSIX 平台上運行，但尚未經過全面測試）。"

#: ../../library/pty.rst:23
#, fuzzy
msgid "The :mod:`pty` module defines the following functions:"
msgstr ":mod:`pty` 模組定義了以下函式："

#: ../../library/pty.rst:28
#, fuzzy
msgid ""
"Fork. Connect the child's controlling terminal to a pseudo-terminal. Return "
"value is ``(pid, fd)``. Note that the child  gets *pid* 0, and the *fd* is "
"*invalid*. The parent's return value is the *pid* of the child, and *fd* is "
"a file descriptor connected to the child's controlling terminal (and also to "
"the child's standard input and output)."
msgstr ""
"叉。將孩子的控制終端連接到偽終端。回傳值為``(pid, fd)``。請注意，孩子得到 "
"*pid* 0，*fd* 是 *invalid*。父行程的回傳值是子行程的 *pid*，*fd* "
"是一個文件描述器，連接到子行程的控制終端（也連接到子行程的標準輸入和輸出）。"

#: ../../library/pty.rst:37
#, fuzzy
msgid ""
"Open a new pseudo-terminal pair, using :func:`os.openpty` if possible, or "
"emulation code for generic Unix systems. Return a pair of file descriptors "
"``(master, slave)``, for the master and the slave end, respectively."
msgstr ""
"打開一個新的偽終端對，如果可能，使用 os.openpty 或通用 Unix "
"系統的仿真程式碼。回傳一對文件描述器``(master, slave)``，分別用於主從端。"

#: ../../library/pty.rst:44
#, fuzzy
msgid ""
"Spawn a process, and connect its controlling terminal with the current "
"process's standard io. This is often used to baffle programs which insist on "
"reading from the controlling terminal. It is expected that the process "
"spawned behind the pty will eventually terminate, and when it does *spawn* "
"will return."
msgstr ""
"生成一個行程，並將其控制終端連接到當前行程的標準 io."
"這通常用於阻止堅持從控制終端讀取的程式。預計在 pty 後面生成的行程最終將終止，"
"並且當它終止時 *spawn* 將回傳。"

#: ../../library/pty.rst:50
#, fuzzy
msgid ""
"A loop copies STDIN of the current process to the child and data received "
"from the child to STDOUT of the current process. It is not signaled to the "
"child if STDIN of the current process closes down."
msgstr ""
"循環將當前行程的 STDIN 複製到子行程，"
"並將從子行程接收到的資料複製到當前行程的 STDOUT。如果當前行程的 STDIN "
"關閉，則不會向子行程發出信號。"

#: ../../library/pty.rst:54
#, fuzzy
msgid ""
"The functions *master_read* and *stdin_read* are passed a file descriptor "
"which they should read from, and they should always return a byte string. In "
"order to force spawn to return before the child process exits an empty byte "
"array should be returned to signal end of file."
msgstr ""
"函式 *master_read* 和 *stdin_read* "
"被傳遞一個文件描述器，它們應該從中讀取，並且它們應該總是回傳一個位元組字串。"
"為了強制 spawn 在子行程退出之前回傳，應該回傳一個空位元組數組來表示文件結束。"

#: ../../library/pty.rst:59
#, fuzzy
msgid ""
"The default implementation for both functions will read and return up to "
"1024 bytes each time the function is called. The *master_read* callback is "
"passed the pseudoterminal’s master file descriptor to read output from the "
"child process, and *stdin_read* is passed file descriptor 0, to read from "
"the parent process's standard input."
msgstr ""
"每次呼叫函式時，這兩個函式的預設實作將讀取並回傳最多 1024 個位元組。 "
"*master_read* 回呼傳遞偽終端的主文件描述器以從子行程讀取輸出，*stdin_read* "
"傳遞文件描述器 0，以從父行程的標準輸入讀取。"

#: ../../library/pty.rst:65
#, fuzzy
msgid ""
"Returning an empty byte string from either callback is interpreted as an end-"
"of-file (EOF) condition, and that callback will not be called after that. If "
"*stdin_read* signals EOF the controlling terminal can no longer communicate "
"with the parent process OR the child process. Unless the child process will "
"quit without any input, *spawn* will then loop forever. If *master_read* "
"signals EOF the same behavior results (on linux at least)."
msgstr ""
"從任一回呼回傳空位元組字串都被解釋為文件結束 (EOF) 條件，之後不會呼叫該回呼。"
"如果 *stdin_read* 發出 EOF 信號，則控制終端無法再與父行程或子行程通信。除非子"
"行程在沒有任何輸入的情況下退出，否則 *spawn* 將永遠循環。如果 *master_read* "
"發出 EOF 信號，則結果相同（至少在 Linux 上）。"

#: ../../library/pty.rst:72
#, fuzzy
msgid ""
"Return the exit status value from :func:`os.waitpid` on the child process."
msgstr "從子行程的 :func:`os.waitpid` 回傳退出狀態值。"

#: ../../library/pty.rst:74
#, fuzzy
msgid ""
":func:`waitstatus_to_exitcode` can be used to convert the exit status into "
"an exit code."
msgstr ":func:`waitstatus_to_exitcode` 可用於將退出狀態轉換為退出程式碼。"

#: ../../library/pty.rst:77
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pty.spawn`` with argument "
"``argv``."
msgstr ""
"引發一個附帶引數 ``argv`` 的\\ :ref:`稽核事件 <auditing>` ``pty.spawn``。"

#: ../../library/pty.rst:79
#, fuzzy
msgid ""
":func:`spawn` now returns the status value from :func:`os.waitpid` on the "
"child process."
msgstr ":func:`spawn` 現在在子行程上回傳來自 :func:`os.waitpid` 的狀態值。"

#: ../../library/pty.rst:84
msgid "Example"
msgstr "範例"

#: ../../library/pty.rst:88
#, fuzzy
msgid ""
"The following program acts like the Unix command :manpage:`script(1)`, using "
"a pseudo-terminal to record all input and output of a terminal session in a "
"\"typescript\". ::"
msgstr "以下程式的行為類似於 Unix 命令 "
":manpage:`script(1)`，使用偽終端將終端會話的所有輸入和輸出記錄在“打字稿”中。 "
"::"
