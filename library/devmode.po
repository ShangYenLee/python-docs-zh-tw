# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-26 16:47+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/devmode.rst:4
msgid "Python Development Mode"
msgstr "Python 開發模式"

#: ../../library/devmode.rst:8
#, fuzzy
msgid ""
"The Python Development Mode introduces additional runtime checks that are "
"too expensive to be enabled by default. It should not be more verbose than "
"the default if the code is correct; new warnings are only emitted when an "
"issue is detected."
msgstr ""
"Python 開發模式引入了額外的運行時檢查，這些檢查過於昂貴而無法預設啟用。如果程"
"式碼正確，它不應該比預設值更冗長；只有在檢測到問題時才會發出新警告。"

#: ../../library/devmode.rst:13
#, fuzzy
msgid ""
"It can be enabled using the :option:`-X dev <-X>` command line option or by "
"setting the :envvar:`PYTHONDEVMODE` environment variable to ``1``."
msgstr ""
"可以使用 :option:`-X dev <-X>` 命令列選項或通過將 :envvar:`PYTHONDEVMODE` "
"環境變數設定為 ``1`` 來啟用它。"

#: ../../library/devmode.rst:16
#, fuzzy
msgid "See also :ref:`Python debug build <debug-build>`."
msgstr "另見 :ref:`Python 除錯構建 <debug-build>`。"

#: ../../library/devmode.rst:19
#, fuzzy
msgid "Effects of the Python Development Mode"
msgstr "Python 開發模式的影響"

#: ../../library/devmode.rst:21
#, fuzzy
msgid ""
"Enabling the Python Development Mode is similar to the following command, "
"but with additional effects described below::"
msgstr "啟用 Python 開發模式類似於以下命令，但具有如下所述的其他效果："

#: ../../library/devmode.rst:26
msgid "Effects of the Python Development Mode:"
msgstr "Python 開發模式的影響："

#: ../../library/devmode.rst:28
#, fuzzy
msgid ""
"Add ``default`` :ref:`warning filter <describing-warning-filters>`. The "
"following warnings are shown:"
msgstr "新增``預設``:ref:`警告過濾器<describing-warning-filters>`。顯示以下警告："

#: ../../library/devmode.rst:31
msgid ":exc:`DeprecationWarning`"
msgstr ":exc:`DeprecationWarning`"

#: ../../library/devmode.rst:32
msgid ":exc:`ImportWarning`"
msgstr ":exc:`ImportWarning`"

#: ../../library/devmode.rst:33
msgid ":exc:`PendingDeprecationWarning`"
msgstr ":exc:`PendingDeprecationWarning`"

#: ../../library/devmode.rst:34
msgid ":exc:`ResourceWarning`"
msgstr ":exc:`ResourceWarning`"

#: ../../library/devmode.rst:36
#, fuzzy
msgid ""
"Normally, the above warnings are filtered by the default :ref:`warning "
"filters <describing-warning-filters>`."
msgstr "通常，上述警告由預設的 :ref:`warning filters <describing-warning-filters>` "
"過濾。"

#: ../../library/devmode.rst:39
#, fuzzy
msgid ""
"It behaves as if the :option:`-W default <-W>` command line option is used."
msgstr "它的行為就像使用了 :option:`-W default <-W>` 命令列選項一樣。"

#: ../../library/devmode.rst:41
#, fuzzy
msgid ""
"Use the :option:`-W error <-W>` command line option or set the :envvar:"
"`PYTHONWARNINGS` environment variable to ``error`` to treat warnings as "
"errors."
msgstr ""
"使用 :option:`-W error <-W>` 命令列選項或將 :envvar:`PYTHONWARNINGS` "
"環境變數設定為 ``error`` 以將警告視為錯誤。"

#: ../../library/devmode.rst:45
#, fuzzy
msgid "Install debug hooks on memory allocators to check for:"
msgstr "在記憶體分配器上安裝除錯掛鉤以檢查："

#: ../../library/devmode.rst:47
#, fuzzy
msgid "Buffer underflow"
msgstr "緩衝區下溢"

#: ../../library/devmode.rst:48
#, fuzzy
msgid "Buffer overflow"
msgstr "緩衝區溢出"

#: ../../library/devmode.rst:49
#, fuzzy
msgid "Memory allocator API violation"
msgstr "記憶體分配器 API 違規"

#: ../../library/devmode.rst:50
#, fuzzy
msgid "Unsafe usage of the GIL"
msgstr "GIL 的不安全使用"

#: ../../library/devmode.rst:52
#, fuzzy
msgid "See the :c:func:`PyMem_SetupDebugHooks` C function."
msgstr "請參閱:c:func:`PyMem_SetupDebugHooks` C 函式。"

#: ../../library/devmode.rst:54
#, fuzzy
msgid ""
"It behaves as if the :envvar:`PYTHONMALLOC` environment variable is set to "
"``debug``."
msgstr "它的行為就像 :envvar:`PYTHONMALLOC` 環境變數設定為``debug``。"

#: ../../library/devmode.rst:57
#, fuzzy
msgid ""
"To enable the Python Development Mode without installing debug hooks on "
"memory allocators, set the :envvar:`PYTHONMALLOC` environment variable to "
"``default``."
msgstr "要在不在記憶體分配器上安裝除錯掛鉤的情況下啟用 Python 開發模式，請將 "
"PYTHONMALLOC 環境變數設定為 default。"

#: ../../library/devmode.rst:61
#, fuzzy
msgid ""
"Call :func:`faulthandler.enable` at Python startup to install handlers for "
"the :const:`SIGSEGV`, :const:`SIGFPE`, :const:`SIGABRT`, :const:`SIGBUS` "
"and :const:`SIGILL` signals to dump the Python traceback on a crash."
msgstr ""
"在 Python 啟動時呼叫 faulthandler.enable 為 SIGSEGV、SIGFPE、SIGABRT、SIGBUS "
"和 SIGILL 安裝處理程式` 在崩潰時轉儲 Python 回溯的信號。"

#: ../../library/devmode.rst:65
#, fuzzy
msgid ""
"It behaves as if the :option:`-X faulthandler <-X>` command line option is "
"used or if the :envvar:`PYTHONFAULTHANDLER` environment variable is set to "
"``1``."
msgstr ""
"它的行為就像使用了 :option:`-X faulthandler <-X>` 命令列選項或者 "
":envvar:`PYTHONFAULTHANDLER` 環境變數設定為 ``1``。"

#: ../../library/devmode.rst:69
#, fuzzy
msgid ""
"Enable :ref:`asyncio debug mode <asyncio-debug-mode>`. For example, :mod:"
"`asyncio` checks for coroutines that were not awaited and logs them."
msgstr ""
"啟用 :ref:`asyncio 除錯模式 <asyncio-debug-mode>`。例如，:mod:`asyncio` "
"檢查未等待的協程並記錄它們。"

#: ../../library/devmode.rst:72
#, fuzzy
msgid ""
"It behaves as if the :envvar:`PYTHONASYNCIODEBUG` environment variable is "
"set to ``1``."
msgstr "它的行為就好像 :envvar:`PYTHONASYNCIODEBUG` 環境變數設定為 ``1``。"

#: ../../library/devmode.rst:75
#, fuzzy
msgid ""
"Check the *encoding* and *errors* arguments for string encoding and decoding "
"operations. Examples: :func:`open`, :meth:`str.encode` and :meth:`bytes."
"decode`."
msgstr ""
"檢查字串編碼和解碼操作的 *encoding* 和 *errors* "
"參數。示例：:func:`open`、:meth:`str.encode` 和 :meth:`bytes.decode`。"

#: ../../library/devmode.rst:79
#, fuzzy
msgid ""
"By default, for best performance, the *errors* argument is only checked at "
"the first encoding/decoding error and the *encoding* argument is sometimes "
"ignored for empty strings."
msgstr "預設情況下，為了獲得最佳性能，僅在第一個編碼/解碼錯誤時檢查 *errors* 參數，"
"並且有時會忽略空字串的 *encoding* 參數。"

#: ../../library/devmode.rst:83
#, fuzzy
msgid "The :class:`io.IOBase` destructor logs ``close()`` exceptions."
msgstr ":class:`io.IOBase` 析構函式記錄 ``close()`` 例外。"

#: ../../library/devmode.rst:84
#, fuzzy
msgid ""
"Set the :attr:`~sys.flags.dev_mode` attribute of :attr:`sys.flags` to "
"``True``."
msgstr "將 sys.flags 的 :attr:`~sys.flags.dev_mode 屬性設定為 True。"

#: ../../library/devmode.rst:87
#, fuzzy
msgid ""
"The Python Development Mode does not enable the :mod:`tracemalloc` module by "
"default, because the overhead cost (to performance and memory) would be too "
"large. Enabling the :mod:`tracemalloc` module provides additional "
"information on the origin of some errors. For example, :exc:"
"`ResourceWarning` logs the traceback where the resource was allocated, and a "
"buffer overflow error logs the traceback where the memory block was "
"allocated."
msgstr ""
"Python 開發模式預設不啟用 :mod:`tracemalloc` "
"模組，因為開銷成本（性能和記憶體）太大。啟用 :mod:`tracemalloc` "
"模組可提供有關某些錯誤來源的附加資訊。例如，:exc:`ResourceWarning` "
"記錄分配資源的回溯，緩衝區溢出錯誤記錄分配記憶體塊的回溯。"

#: ../../library/devmode.rst:94
#, fuzzy
msgid ""
"The Python Development Mode does not prevent the :option:`-O` command line "
"option from removing :keyword:`assert` statements nor from setting :const:"
"`__debug__` to ``False``."
msgstr ""
"Python 開發模式不會阻止 :option:`-O` 命令列選項刪除 :keyword:`assert` "
"語句，也不會阻止將 :const:`__debug__` 設定為``False``。"

#: ../../library/devmode.rst:98
#, fuzzy
msgid ""
"The Python Development Mode can only be enabled at the Python startup. Its "
"value can be read from :data:`sys.flags.dev_mode <sys.flags>`."
msgstr ""
"Python 開發模式只能在 Python 啟動時啟用。它的值可以從 :data:`"
"sys.flags.dev_mode <sys.flags>` 讀取。"

#: ../../library/devmode.rst:101
#, fuzzy
msgid "The :class:`io.IOBase` destructor now logs ``close()`` exceptions."
msgstr ":class:`io.IOBase` 析構函式現在記錄 ``close()`` 例外。"

#: ../../library/devmode.rst:104
#, fuzzy
msgid ""
"The *encoding* and *errors* arguments are now checked for string encoding "
"and decoding operations."
msgstr "現在檢查 *encoding* 和 *errors* 參數以進行字串編碼和解碼操作。"

#: ../../library/devmode.rst:110
msgid "ResourceWarning Example"
msgstr "ResourceWarning 範例"

#: ../../library/devmode.rst:112
#, fuzzy
msgid ""
"Example of a script counting the number of lines of the text file specified "
"in the command line::"
msgstr "計算命令列中指定文本文件行數的腳本示例："

#: ../../library/devmode.rst:126
#, fuzzy
msgid ""
"The script does not close the file explicitly. By default, Python does not "
"emit any warning. Example using README.txt, which has 269 lines:"
msgstr "該腳本不會明確關閉文件。預設情況下，Python 不會發出任何警告。使用 README.txt "
"的示例，它有 269 行："

#: ../../library/devmode.rst:134
#, fuzzy
msgid ""
"Enabling the Python Development Mode displays a :exc:`ResourceWarning` "
"warning:"
msgstr "啟用 Python 開發模式會顯示一個 ResourceWarning 警告："

#: ../../library/devmode.rst:144
#, fuzzy
msgid ""
"In addition, enabling :mod:`tracemalloc` shows the line where the file was "
"opened:"
msgstr "此外，啟用 :mod:`tracemalloc` 會顯示打開文件的行："

#: ../../library/devmode.rst:159
#, fuzzy
msgid ""
"The fix is to close explicitly the file. Example using a context manager::"
msgstr "解決方法是明確關閉該文件。使用上下文管理器的示例::"

#: ../../library/devmode.rst:167
#, fuzzy
msgid ""
"Not closing a resource explicitly can leave a resource open for way longer "
"than expected; it can cause severe issues upon exiting Python. It is bad in "
"CPython, but it is even worse in PyPy. Closing resources explicitly makes an "
"application more deterministic and more reliable."
msgstr ""
"不明確關閉資源會使資源打開的時間比預期的長；退出 Python "
"時可能會導致嚴重問題。這在 CPython 中很糟糕，但在 PyPy "
"中更糟。顯式關閉資源可使應用程式更具確定性和可靠性。"

#: ../../library/devmode.rst:174
#, fuzzy
msgid "Bad file descriptor error example"
msgstr "錯誤的文件描述器錯誤示例"

#: ../../library/devmode.rst:176
#, fuzzy
msgid "Script displaying the first line of itself::"
msgstr "顯示自身第一行的腳本::"

#: ../../library/devmode.rst:189
#, fuzzy
msgid "By default, Python does not emit any warning:"
msgstr "預設情況下，Python 不會發出任何警告："

#: ../../library/devmode.rst:196
#, fuzzy
msgid ""
"The Python Development Mode shows a :exc:`ResourceWarning` and logs a \"Bad "
"file descriptor\" error when finalizing the file object:"
msgstr "Python 開發模式在完成文件物件時顯示 :exec:`ResourceWarning` 並記錄“Bad file "
"descriptor”錯誤："

#: ../../library/devmode.rst:212
#, fuzzy
msgid ""
"``os.close(fp.fileno())`` closes the file descriptor. When the file object "
"finalizer tries to close the file descriptor again, it fails with the ``Bad "
"file descriptor`` error. A file descriptor must be closed only once. In the "
"worst case scenario, closing it twice can lead to a crash (see :issue:"
"`18748` for an example)."
msgstr ""
"``os.close(fp.fileno())`` 關閉文件描述器。當文件物件終結器再次嘗試關閉文件描"
"述器時，它會因“文件描述器錯誤”錯誤而失敗。文件描述器只能關閉一次。在最壞的情"
"況下，將其關閉兩次可能會導致崩潰（有關示例，請參見 :issue:`18748`）。"

#: ../../library/devmode.rst:218
#, fuzzy
msgid ""
"The fix is to remove the ``os.close(fp.fileno())`` line, or open the file "
"with ``closefd=False``."
msgstr "修復方法是刪除 ``os.close(fp.fileno())`` 行，或使用 ``closefd=False`` "
"打開文件。"
