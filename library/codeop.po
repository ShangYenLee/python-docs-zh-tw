# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-31 00:16+0000\n"
"PO-Revision-Date: 2016-11-19 00:28+0000\n"
"Last-Translator: Liang-Bo Wang <me@liang2.tw>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/codeop.rst:2
#, fuzzy
msgid ":mod:`codeop` --- Compile Python code"
msgstr ":mod:`codeop` --- 編譯 Python 程式碼"

#: ../../library/codeop.rst:10
msgid "**Source code:** :source:`Lib/codeop.py`"
msgstr "**原始碼：**\\ :source:`Lib/codeop.py`"

#: ../../library/codeop.rst:14
#, fuzzy
msgid ""
"The :mod:`codeop` module provides utilities upon which the Python read-eval-"
"print loop can be emulated, as is done in the :mod:`code` module.  As a "
"result, you probably don't want to use the module directly; if you want to "
"include such a loop in your program you probably want to use the :mod:`code` "
"module instead."
msgstr ""
":mod:`codeop` 模組提供實用程式，可以在這些實用程式上模擬 Python read-eval-"
"print 循環，就像在 :mod:`code` 模組中所做的那樣。因此，您可能不想直接使用該模"
"組；如果你想在你的程式中包含這樣一個循環，你可能想使用 :mod:`code` 模組。"

#: ../../library/codeop.rst:20
#, fuzzy
msgid "There are two parts to this job:"
msgstr "這項工作有兩個部分："

#: ../../library/codeop.rst:22
#, fuzzy
msgid ""
"Being able to tell if a line of input completes a Python statement: in "
"short, telling whether to print '``>>>``' or '``...``' next."
msgstr "能夠判斷一行輸入是否完成了 Python 語句：簡而言之，判斷接下來是印出 '``>>>``' "
"還是 '``...``'。"

#: ../../library/codeop.rst:25
#, fuzzy
msgid ""
"Remembering which future statements the user has entered, so subsequent "
"input can be compiled with these in effect."
msgstr "記住使用者輸入了哪些未來語句，因此後續輸入可以用這些有效進行編譯。"

#: ../../library/codeop.rst:28
#, fuzzy
msgid ""
"The :mod:`codeop` module provides a way of doing each of these things, and a "
"way of doing them both."
msgstr ":mod:`codeop` "
"模組提供了一種做這些事情的方法，以及一種同時做這兩種事情的方法。"

#: ../../library/codeop.rst:31
#, fuzzy
msgid "To do just the former:"
msgstr "只做前者："

#: ../../library/codeop.rst:35
#, fuzzy
msgid ""
"Tries to compile *source*, which should be a string of Python code and "
"return a code object if *source* is valid Python code.  In that case, the "
"filename attribute of the code object will be *filename*, which defaults to "
"``'<input>'``.  Returns ``None`` if *source* is *not* valid Python code, but "
"is a prefix of valid Python code."
msgstr ""
"嘗試編譯 *source*，它應該是一個 Python 程式碼字串，如果 *source* 是有效的 "
"Python 程式碼，則回傳一個程式碼物件。在這種情況下，"
"程式碼物件的文件名屬性將為 *filename*，預設為 ``'<input>'``。如果 *source* "
"不是*有效的 Python 程式碼，而是有效 Python 程式碼的前綴，則回傳 ``None``。"

#: ../../library/codeop.rst:41
#, fuzzy
msgid ""
"If there is a problem with *source*, an exception will be raised. :exc:"
"`SyntaxError` is raised if there is invalid Python syntax, and :exc:"
"`OverflowError` or :exc:`ValueError` if there is an invalid literal."
msgstr ""
"如果 *source* 有問題，將引發例外。如果存在無效的 Python 語法，則引發 :exec:`Sy"
"ntaxError`，如果存在無效的文字，則引發 :exec:`OverflowError` "
"或 :exec:`ValueError`。"

#: ../../library/codeop.rst:45
#, fuzzy
msgid ""
"The *symbol* argument determines whether *source* is compiled as a statement "
"(``'single'``, the default), as a sequence of :term:`statement` (``'exec'``) "
"or as an :term:`expression` (``'eval'``).  Any other value will cause :exc:"
"`ValueError` to be raised."
msgstr ""
"*symbol* 參數確定 *source* 是否被編譯為語句（``'single'``，預設值），作為 "
":term:`statement` 的序列（``'exec'``）或作為一個 :term:`expression` "
"(``'eval'``)。任何其他值都會導致 :exc:`ValueError` 被引發。"

#: ../../library/codeop.rst:52
#, fuzzy
msgid ""
"It is possible (but not likely) that the parser stops parsing with a "
"successful outcome before reaching the end of the source; in this case, "
"trailing symbols may be ignored instead of causing an error.  For example, a "
"backslash followed by two newlines may be followed by arbitrary garbage. "
"This will be fixed once the API for the parser is better."
msgstr ""
"解析器有可能（但不太可能）在到達源程式碼末尾之前停止解析並獲得成功的結果；在"
"這種情況下，尾隨符號可能會被忽略而不是導致錯誤。例如，一個反斜杠後跟兩個換行"
"符可能會跟任意垃圾。一旦解析器的 API 更好，這將得到修復。"

#: ../../library/codeop.rst:61
#, fuzzy
msgid ""
"Instances of this class have :meth:`__call__` methods identical in signature "
"to the built-in function :func:`compile`, but with the difference that if "
"the instance compiles program text containing a :mod:`__future__` statement, "
"the instance 'remembers' and compiles all subsequent program texts with the "
"statement in force."
msgstr ""
"此類的實例具有與內建函式 :func:`compile` 簽名相同的 :meth:`__call__` "
"方法，但不同之處在於，如果實例編譯包含 :mod:`__future__` "
"語句的程式文本，則實例“記住”並使用有效的語句編譯所有後續程式文本。"

#: ../../library/codeop.rst:70
#, fuzzy
msgid ""
"Instances of this class have :meth:`__call__` methods identical in signature "
"to :func:`compile_command`; the difference is that if the instance compiles "
"program text containing a :mod:`__future__` statement, the instance "
"'remembers' and compiles all subsequent program texts with the statement in "
"force."
msgstr ""
"此類的實例具有 :meth:`__call__` 方法，其簽名與 :func:`compile_command` "
"相同；不同之處在於，如果實例編譯包含 :mod:`__future__` "
"語句的程式文本，則實例“記住”並使用有效的語句編譯所有後續程式文本。"
