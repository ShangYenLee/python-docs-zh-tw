# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-20 18:08+0800\n"
"PO-Revision-Date: 2018-05-23 14:44+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/email.encoders.rst:2
msgid ":mod:`email.encoders`: Encoders"
msgstr ":mod:`email.encoders`: 編碼器"

#: ../../library/email.encoders.rst:7
msgid "**Source code:** :source:`Lib/email/encoders.py`"
msgstr "**原始碼：**\\ :source:`Lib/email/encoders.py`"

#: ../../library/email.encoders.rst:11
#, fuzzy
msgid ""
"This module is part of the legacy (``Compat32``) email API.  In the new API "
"the functionality is provided by the *cte* parameter of the :meth:`~email."
"message.EmailMessage.set_content` method."
msgstr ""
"此模組是舊版 (``Compat32``) 電子郵件 API 的一部分。在新的 API 中，該功能由 "
":meth:`~email.message.EmailMessage.set_content` 方法的 *cte* 參數提供。"

#: ../../library/email.encoders.rst:15
#, fuzzy
msgid ""
"This module is deprecated in Python 3.  The functions provided here should "
"not be called explicitly since the :class:`~email.mime.text.MIMEText` class "
"sets the content type and CTE header using the *_subtype* and *_charset* "
"values passed during the instantiation of that class."
msgstr ""
"此模組在 Python 3 中已棄用。不應顯式呼叫此處提供的函式，因為 :class:`~email."
"mime.text.MIMEText` 類使用 *_subtype* 和 *_charset* 值設定內容型別和 CTE "
"標頭在該類的實例化期間傳遞。"

#: ../../library/email.encoders.rst:20
#, fuzzy
msgid ""
"The remaining text in this section is the original documentation of the "
"module."
msgstr "本節中的其余文本是模組的原始文檔。"

#: ../../library/email.encoders.rst:22
#, fuzzy
msgid ""
"When creating :class:`~email.message.Message` objects from scratch, you "
"often need to encode the payloads for transport through compliant mail "
"servers. This is especially true for :mimetype:`image/\\*` and :mimetype:"
"`text/\\*` type messages containing binary data."
msgstr ""
"從頭開始建立 :class:`~email.message.Message` "
"物件時，您通常需要對有效負載進行編碼，以便通過相容的郵件伺服器進行傳輸。"
"對於包含二進位資料的 :mimetype:`image/\\*` 和 :mimetype:`text/\\*` "
"型別消息尤其如此。"

#: ../../library/email.encoders.rst:27
#, fuzzy
msgid ""
"The :mod:`email` package provides some convenient encoders in its :mod:"
"`encoders` module.  These encoders are actually used by the :class:`~email."
"mime.audio.MIMEAudio` and :class:`~email.mime.image.MIMEImage` class "
"constructors to provide default encodings.  All encoder functions take "
"exactly one argument, the message object to encode.  They usually extract "
"the payload, encode it, and reset the payload to this newly encoded value.  "
"They should also set the :mailheader:`Content-Transfer-Encoding` header as "
"appropriate."
msgstr ""
":mod:`email` 包在其 :mod:`encoders` 模組中提供了一些方便的編碼器。"
"這些編碼器實際上被 :class:`~email.mime.audio.MIMEAudio` 和 :class:`~email."
"mime.image.MIMEImage` 類構造函式用來提供預設編碼。所有編碼器函式都只接受一個"
"參數，即要編碼的消息物件。他們通常提取有效載荷，對其進行編碼，然後將有效載荷"
"重置為這個新編碼的值。他們還應該適當地設定 :mailheader:`Content-Transfer-"
"Encoding` 標頭。"

#: ../../library/email.encoders.rst:35
#, fuzzy
msgid ""
"Note that these functions are not meaningful for a multipart message.  They "
"must be applied to individual subparts instead, and will raise a :exc:"
"`TypeError` if passed a message whose type is multipart."
msgstr "請注意，這些函式對於多部分消息沒有意義。它們必須應用於各個子部分，如果傳遞的"
"消息型別為多部分，則會引發 :exc:`TypeError`。"

#: ../../library/email.encoders.rst:39
#, fuzzy
msgid "Here are the encoding functions provided:"
msgstr "以下是提供的編碼函式："

#: ../../library/email.encoders.rst:44
#, fuzzy
msgid ""
"Encodes the payload into quoted-printable form and sets the :mailheader:"
"`Content-Transfer-Encoding` header to ``quoted-printable`` [#]_. This is a "
"good encoding to use when most of your payload is normal printable data, but "
"contains a few unprintable characters."
msgstr ""
"將有效負載編碼為可引用印出形式，並將 :mailheader:`Content-Transfer-Encoding` "
"標頭設定為 ``quoted-printable`` [#]_。當您的大部分有效負載是正常的可印出資料"
"但包含一些不可印出的字元時，這是一種很好的編碼。"

#: ../../library/email.encoders.rst:52
#, fuzzy
msgid ""
"Encodes the payload into base64 form and sets the :mailheader:`Content-"
"Transfer-Encoding` header to ``base64``.  This is a good encoding to use "
"when most of your payload is unprintable data since it is a more compact "
"form than quoted-printable.  The drawback of base64 encoding is that it "
"renders the text non-human readable."
msgstr ""
"將有效負載編碼為 base64 格式並將 Content-Transfer-Encoding 標頭設定為 "
"base64。當您的大部分有效負載是不可印出資料時，這是一種很好的編碼，"
"因為它是一種比 quoted-printable 更緊湊的形式。 base64 "
"編碼的缺點是它使文本變得非人類可讀。"

#: ../../library/email.encoders.rst:61
#, fuzzy
msgid ""
"This doesn't actually modify the message's payload, but it does set the :"
"mailheader:`Content-Transfer-Encoding` header to either ``7bit`` or ``8bit`` "
"as appropriate, based on the payload data."
msgstr ""
"這實際上並沒有修改消息的有效負載，但它確實根據有效負載資料將:mailheader"
":`Content-Transfer-Encoding` 標頭設定為適當的``7bit`` 或``8bit``。"

#: ../../library/email.encoders.rst:68
#, fuzzy
msgid ""
"This does nothing; it doesn't even set the :mailheader:`Content-Transfer-"
"Encoding` header."
msgstr "這什麼都不做；它甚至沒有設定 :mailheader:`Content-Transfer-Encoding` 標頭。"

#: ../../library/email.encoders.rst:72
msgid "Footnotes"
msgstr "註解"

#: ../../library/email.encoders.rst:73
#, fuzzy
msgid ""
"Note that encoding with :meth:`encode_quopri` also encodes all tabs and "
"space characters in the data."
msgstr "請注意，使用 :meth:`encode_quopri` "
"編碼還會對資料中的所有製表符和空格字元進行編碼。"
