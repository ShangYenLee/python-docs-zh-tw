# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-06 00:23+0000\n"
"PO-Revision-Date: 2018-05-23 16:19+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/2.4.rst:3
msgid "What's New in Python 2.4"
msgstr "Python 2.4 有什麼新功能"

#: ../../whatsnew/2.4.rst:0
msgid "Author"
msgstr "作者"

#: ../../whatsnew/2.4.rst:5
msgid "A.M. Kuchling"
msgstr "A.M. Kuchling"

#: ../../whatsnew/2.4.rst:14
#, fuzzy
msgid ""
"This article explains the new features in Python 2.4.1, released on March "
"30, 2005."
msgstr "本文介紹 2005 年 3 月 30 日發布的 Python 2.4.1 中的新功能。"

#: ../../whatsnew/2.4.rst:17
#, fuzzy
msgid ""
"Python 2.4 is a medium-sized release.  It doesn't introduce as many changes "
"as the radical Python 2.2, but introduces more features than the "
"conservative 2.3 release.  The most significant new language features are "
"function decorators and generator expressions; most other changes are to the "
"standard library."
msgstr ""
"Python 2.4 是一個中型版本。它沒有引入像激進的 Python 2.2 那樣多的變化，"
"但引入了比保守的 2.3 版本更多的特性。最重要的新語言特性是函式裝飾器和生成器表"
"達式；大多數其他更改是針對標準庫的。"

#: ../../whatsnew/2.4.rst:22
#, fuzzy
msgid ""
"According to the CVS change logs, there were 481 patches applied and 502 "
"bugs fixed between Python 2.3 and 2.4.  Both figures are likely to be "
"underestimates."
msgstr "根據 CVS 更改日誌，在 Python 2.3 和 2.4 之間應用了 481 個補丁並修復了 502 "
"個錯誤。這兩個數字都可能被低估。"

#: ../../whatsnew/2.4.rst:25
#, fuzzy
msgid ""
"This article doesn't attempt to provide a complete specification of every "
"single new feature, but instead provides a brief introduction to each "
"feature.  For full details, you should refer to the documentation for Python "
"2.4, such as the Python Library Reference and the Python Reference Manual.  "
"Often you will be referred to the PEP for a particular new feature for "
"explanations of the implementation and design rationale."
msgstr ""
"本文並不試圖提供每個新功能的完整規範，而是對每個功能進行簡要介紹。有關完整詳"
"細資訊，您應該參考 Python 2.4 的文檔，例如 Python 庫參考和 Python "
"參考手冊。通常，您會被轉介到 PEP 以獲得特定的新功能，以解釋實作和設計原理。"

#: ../../whatsnew/2.4.rst:36
#, fuzzy
msgid "PEP 218: Built-In Set Objects"
msgstr "PEP 218：內建集合物件"

#: ../../whatsnew/2.4.rst:38
#, fuzzy
msgid ""
"Python 2.3 introduced the :mod:`sets` module.  C implementations of set data "
"types have now been added to the Python core as two new built-in types, "
"``set(iterable)`` and ``frozenset(iterable)``.  They provide high speed "
"operations for membership testing, for eliminating duplicates from "
"sequences, and for mathematical operations like unions, intersections, "
"differences, and symmetric differences. ::"
msgstr ""
"Python 2.3 引入了 :mod:`sets` 模組。集合資料型別的 C "
"實作現在已作為兩種新的內建型別新增到 Python 核心，``set(iterable)`` 和 ``froz"
"enset(iterable)``。它們為成員測試、消除序列中的重複項以及並集、交集、差異和對"
"稱差異等數學運算提供高速操作。 ::"

#: ../../whatsnew/2.4.rst:71
#, fuzzy
msgid ""
"The :func:`frozenset` type is an immutable version of :func:`set`. Since it "
"is immutable and hashable, it may be used as a dictionary key or as a member "
"of another set."
msgstr ""
":func:`frozenset` 型別是 :func:`set` 的不可變版本。因為它是不可變的和可散列的"
"，所以它可以用作字典鍵或另一個集合的成員。"

#: ../../whatsnew/2.4.rst:75
#, fuzzy
msgid ""
"The :mod:`sets` module remains in the standard library, and may be useful if "
"you wish to subclass the :class:`Set` or :class:`ImmutableSet` classes.  "
"There are currently no plans to deprecate the module."
msgstr ""
":mod:`sets` 模組保留在標準庫中，如果您希望繼承 :class:`Set` 或 "
":class:`ImmutableSet` 類，它可能很有用。目前沒有棄用該模組的計劃。"

#: ../../whatsnew/2.4.rst:83
#, fuzzy
msgid ":pep:`218` - Adding a Built-In Set Object Type"
msgstr ":pep:`218` - 新增內建的集合對像型別"

#: ../../whatsnew/2.4.rst:83
#, fuzzy
msgid ""
"Originally proposed by Greg Wilson and ultimately implemented by Raymond "
"Hettinger."
msgstr "最初由 Greg Wilson 提出，最終由 Raymond Hettinger 實施。"

#: ../../whatsnew/2.4.rst:90
#, fuzzy
msgid "PEP 237: Unifying Long Integers and Integers"
msgstr "PEP 237：統一長整數和整數"

#: ../../whatsnew/2.4.rst:92
#, fuzzy
msgid ""
"The lengthy transition process for this PEP, begun in Python 2.2, takes "
"another step forward in Python 2.4.  In 2.3, certain integer operations that "
"would behave differently after int/long unification triggered :exc:"
"`FutureWarning` warnings and returned values limited to 32 or 64 bits "
"(depending on your platform).  In 2.4, these expressions no longer produce a "
"warning and instead produce a different result that's usually a long integer."
msgstr ""
"這個 PEP 的漫長過渡過程始於 Python 2.2，在 Python 2.4 中又向前邁進了一步。在 "
"2.3 中，某些在 int/long 統一後行為不同的整數運算會觸發 :exc:`FutureWarning` "
"警告並將回傳值限制為 32 或 64 位（取決於您的平台）。在 2.4 "
"中，這些表達式不再產生警告，而是產生一個不同的結果，通常是一個長整數。"

#: ../../whatsnew/2.4.rst:99
#, fuzzy
msgid ""
"The problematic expressions are primarily left shifts and lengthy "
"hexadecimal and octal constants.  For example, ``2 << 32`` results in a "
"warning in 2.3, evaluating to 0 on 32-bit platforms.  In Python 2.4, this "
"expression now returns the correct answer, 8589934592."
msgstr ""
"有問題的表達式主要是左移和冗長的十六進位和八進位常數。例如，``2 << 32`` 在 "
"2.3 中產生警告，在 32 位平台上計算為 0。在 Python 2.4 中，"
"此表達式現在回傳正確答案 8589934592。"

#: ../../whatsnew/2.4.rst:108
#, fuzzy
msgid ":pep:`237` - Unifying Long Integers and Integers"
msgstr ":pep:`237` - 統一長整數和整數"

#: ../../whatsnew/2.4.rst:108
#, fuzzy
msgid ""
"Original PEP written by Moshe Zadka and GvR.  The changes for 2.4 were "
"implemented by  Kalle Svensson."
msgstr "由 Moshe Zadka 和 GvR 編寫的原始 PEP。 2.4 的更改由 Kalle Svensson 實施。"

#: ../../whatsnew/2.4.rst:115
#, fuzzy
msgid "PEP 289: Generator Expressions"
msgstr "PEP 289：生成器表達式"

#: ../../whatsnew/2.4.rst:117
#, fuzzy
msgid ""
"The iterator feature introduced in Python 2.2 and the :mod:`itertools` "
"module make it easier to write programs that loop through large data sets "
"without having the entire data set in memory at one time.  List "
"comprehensions don't fit into this picture very well because they produce a "
"Python list object containing all of the items.  This unavoidably pulls all "
"of the objects into memory, which can be a problem if your data set is very "
"large.  When trying to write a functionally styled program, it would be "
"natural to write something like::"
msgstr ""
"Python 2.2 中引入的疊代器功能和 :mod:`itertools` 模組使編寫循環遍歷大型資料集"
"的程式變得更加容易，而無需一次將整個資料集儲存在記憶體中。列表推導式不太適合"
"這張圖片，因為它們會生成一個包含所有項目的 Python 列表物件。這不可避免地會將"
"所有物件拉入記憶體，如果您的資料集非常大，這可能會成為問題。當嘗試編寫函式式"
"風格的程式時，很自然地會編寫如下內容："

#: ../../whatsnew/2.4.rst:129
#, fuzzy
msgid "instead of  ::"
msgstr "代替  ：："

#: ../../whatsnew/2.4.rst:136
#, fuzzy
msgid ""
"The first form is more concise and perhaps more readable, but if you're "
"dealing with a large number of link objects you'd have to write the second "
"form to avoid having all link objects in memory at the same time."
msgstr "第一種形式更簡潔，也許更易讀，但如果您要處理大量鏈接物件，則必須編寫第二種形"
"式以避免記憶體中同時存在所有鏈接物件。"

#: ../../whatsnew/2.4.rst:140
#, fuzzy
msgid ""
"Generator expressions work similarly to list comprehensions but don't "
"materialize the entire list; instead they create a generator that will "
"return elements one by one.  The above example could be written as::"
msgstr "生成器表達式的工作方式類似於列表理解，但不會具體化整個列表；相反，他們建立了"
"一個生成器，它將一個一個地回傳元素。上面的例子可以寫成："

#: ../../whatsnew/2.4.rst:148
#, fuzzy
msgid ""
"Generator expressions always have to be written inside parentheses, as in "
"the above example.  The parentheses signalling a function call also count, "
"so if you want to create an iterator that will be immediately passed to a "
"function you could write::"
msgstr "生成器表達式始終必須寫在括號內，如上例所示。表示函式呼叫的括號也很重要，所以"
"如果你想建立一個將立即傳遞給函式的疊代器，你可以這樣寫："

#: ../../whatsnew/2.4.rst:155
#, fuzzy
msgid ""
"Generator expressions differ from list comprehensions in various small ways. "
"Most notably, the loop variable (*obj* in the above example) is not "
"accessible outside of the generator expression.  List comprehensions leave "
"the variable assigned to its last value; future versions of Python will "
"change this, making list comprehensions match generator expressions in this "
"respect."
msgstr ""
"生成器表達式在許多小方面不同於列表理解。最值得注意的是，循環變數（上例中的 "
"*obj*）在生成器表達式之外是不可訪問的。列表理解將變數分配給它的最後一個值；"
"未來的 Python 版本將改變這一點，使列表理解在這方面與生成器表達式匹配。"

#: ../../whatsnew/2.4.rst:165
#, fuzzy
msgid ":pep:`289` - Generator Expressions"
msgstr ":pep:`289` - 生成器表達式"

#: ../../whatsnew/2.4.rst:165
#, fuzzy
msgid ""
"Proposed by Raymond Hettinger and implemented by Jiwon Seo with early "
"efforts steered by Hye-Shik Chang."
msgstr "由 Raymond Hettinger 提出，由 Jiwon Seo 實施，早期由 Hye-Shik Chang 指導。"

#: ../../whatsnew/2.4.rst:172
#, fuzzy
msgid "PEP 292: Simpler String Substitutions"
msgstr "PEP 292：更簡單的字串替換"

#: ../../whatsnew/2.4.rst:174
#, fuzzy
msgid ""
"Some new classes in the standard library provide an alternative mechanism "
"for substituting variables into strings; this style of substitution may be "
"better for applications where untrained users need to edit templates."
msgstr "標準庫中的一些新類提供了一種將變數替換為字串的替代機制；這種替換方式可能更適"
"合未經培訓的使用者需要編輯模板的應用程式。"

#: ../../whatsnew/2.4.rst:178
#, fuzzy
msgid "The usual way of substituting variables by name is the ``%`` operator::"
msgstr "按名稱替換變數的常用方法是 ``%`` 運算符::"

#: ../../whatsnew/2.4.rst:183
#, fuzzy
msgid ""
"When writing the template string, it can be easy to forget the ``i`` or "
"``s`` after the closing parenthesis.  This isn't a big problem if the "
"template is in a Python module, because you run the code, get an "
"\"Unsupported format character\" :exc:`ValueError`, and fix the problem.  "
"However, consider an application such as Mailman where template strings or "
"translations are being edited by users who aren't aware of the Python "
"language.  The format string's syntax is complicated to explain to such "
"users, and if they make a mistake, it's difficult to provide helpful "
"feedback to them."
msgstr ""
"在編寫模板字串時，很容易忘記右括號後的 ``i`` 或 ``s``。如果模板在 Python 模組"
"中，這不是一個大問題，因為您運行程式碼，得到一個“不支援的格式字元” :exc:`Value"
"Error`，並解決問題。但是，請考慮一個應用程式，例如 Mailman，"
"其中模板字串或翻譯由不了解 Python 語言的使用者編輯。格式字串的語法很難向此類"
"使用者解釋，如果他們犯了錯誤，也很難向他們提供有用的反饋。"

#: ../../whatsnew/2.4.rst:192
#, fuzzy
msgid ""
"PEP 292 adds a :class:`Template` class to the :mod:`string` module that uses "
"``$`` to indicate a substitution::"
msgstr "PEP 292 將一個 :class:`Template` 類新增到 :mod:`string` 模組，該模組使用 "
"``$`` 來指示替換::"

#: ../../whatsnew/2.4.rst:200
#, fuzzy
msgid ""
"If a key is missing from the dictionary, the :meth:`substitute` method will "
"raise a :exc:`KeyError`.  There's also a :meth:`safe_substitute` method that "
"ignores missing keys::"
msgstr ""
"如果字典中缺少一個鍵，:meth:`substitute` 方法將引發一個 :exc:`KeyError`。"
"還有一個 :meth:`safe_substitute` 方法可以忽略丟失的鍵::"

#: ../../whatsnew/2.4.rst:211
#, fuzzy
msgid ":pep:`292` - Simpler String Substitutions"
msgstr ":pep:`292` - 更簡單的字串替換"

#: ../../whatsnew/2.4.rst:212
#, fuzzy
msgid "Written and implemented  by Barry Warsaw."
msgstr "由 Barry Warsaw 編寫和實施。"

#: ../../whatsnew/2.4.rst:218
#, fuzzy
msgid "PEP 318: Decorators for Functions and Methods"
msgstr "PEP 318：函式和方法的裝飾器"

#: ../../whatsnew/2.4.rst:220
#, fuzzy
msgid ""
"Python 2.2 extended Python's object model by adding static methods and class "
"methods, but it didn't extend Python's syntax to provide any new way of "
"defining static or class methods.  Instead, you had to write a :keyword:"
"`def` statement in the usual way, and pass the resulting method to a :func:"
"`staticmethod` or :func:`classmethod` function that would wrap up the "
"function as a method of the new type. Your code would look like this::"
msgstr ""
"Python 2.2 通過添加靜態方法和類方法擴充了 Python 的對像模型，"
"但它沒有擴充 Python 的語法來提供任何定義靜態或類方法的新方法。相反，"
"您必須以通常的方式編寫 def 語句，並將生成的方法傳遞給 staticmethod 或 "
"classmethod 函式，將函式包裝為方法新型別。你的程式碼看起來像這樣::"

#: ../../whatsnew/2.4.rst:233
#, fuzzy
msgid ""
"If the method was very long, it would be easy to miss or forget the :func:"
"`classmethod` invocation after the function body."
msgstr "如果方法很長，很容易錯過或忘記函式體之後的 :func:`classmethod` 呼叫。"

#: ../../whatsnew/2.4.rst:236
#, fuzzy
msgid ""
"The intention was always to add some syntax to make such definitions more "
"readable, but at the time of 2.2's release a good syntax was not obvious.  "
"Today a good syntax *still* isn't obvious but users are asking for easier "
"access to the feature; a new syntactic feature has been added to meet this "
"need."
msgstr ""
"目的始終是新增一些語法以使此類定義更具可讀性，但在 2.2 發佈時，良好的語法並不"
"明顯。今天，一個好的語法*仍然*不明顯，但使用者要求更容易訪問該功能；已新增新"
"的句法功能以滿足此需求。"

#: ../../whatsnew/2.4.rst:241
#, fuzzy
msgid ""
"The new feature is called \"function decorators\".  The name comes from the "
"idea that :func:`classmethod`, :func:`staticmethod`, and friends are storing "
"additional information on a function object; they're *decorating* functions "
"with more details."
msgstr ""
"新功能稱為“功能裝飾器”。這個名字來自於 :func:`classmethod`, "
":func:`staticmethod` 和 friends "
"在函式對像上儲存附加資訊的想法；他們正在*裝飾*功能，提供更多細節。"

#: ../../whatsnew/2.4.rst:246
#, fuzzy
msgid ""
"The notation borrows from Java and uses the ``'@'`` character as an "
"indicator. Using the new syntax, the example above would be written::"
msgstr "該表示法從 Java "
"中藉用並使用 ``'@'``字元作為指示符。使用新的語法，上面的例子將寫成："

#: ../../whatsnew/2.4.rst:256
#, fuzzy
msgid ""
"The ``@classmethod`` is shorthand for the ``meth=classmethod(meth)`` "
"assignment. More generally, if you have the following::"
msgstr "``@classmethod`` 是``meth=classmethod(meth)`` "
"賦值的簡寫。更一般地說，如果您有以下內容："

#: ../../whatsnew/2.4.rst:265
#, fuzzy
msgid "It's equivalent to the following pre-decorator code::"
msgstr "它等效於以下預裝飾器程式碼::"

#: ../../whatsnew/2.4.rst:270
#, fuzzy
msgid ""
"Decorators must come on the line before a function definition, one decorator "
"per line, and can't be on the same line as the def statement, meaning that "
"``@A def f(): ...`` is illegal.  You can only decorate function definitions, "
"either at the module level or inside a class; you can't decorate class "
"definitions."
msgstr ""
"裝飾器必須出現在函式定義之前，每行一個裝飾器，並且不能與 def 語句在同一行，"
"這意味著 ``@A def f(): ...`` "
"是非法的。您只能在模組級別或類內部裝飾函式定義；你不能修飾類定義。"

#: ../../whatsnew/2.4.rst:275
#, fuzzy
msgid ""
"A decorator is just a function that takes the function to be decorated as an "
"argument and returns either the same function or some new object.  The "
"return value of the decorator need not be callable (though it typically is), "
"unless further decorators will be applied to the result.  It's easy to write "
"your own decorators.  The following simple example just sets an attribute on "
"the function object::"
msgstr ""
"裝飾器只是一個函式，它將要裝飾的函式作為參數並回傳相同的函式或一些新物件。裝"
"飾器的回傳值不需要是可呼叫的（儘管它通常是可呼叫的），除非將進一步的裝飾器應"
"用於結果。編寫自己的裝飾器很容易。下面的簡單示例只是在函式對像上設定了一個屬"
"性："

#: ../../whatsnew/2.4.rst:295
#, fuzzy
msgid ""
"As a slightly more realistic example, the following decorator checks that "
"the supplied argument is an integer::"
msgstr "作為一個稍微更現實的例子，下面的裝飾器檢查提供的參數是否是一個整數::"

#: ../../whatsnew/2.4.rst:313
#, fuzzy
msgid ""
"An example in :pep:`318` contains a fancier version of this idea that lets "
"you both specify the required type and check the returned type."
msgstr ":pep:`318` "
"中的示例包含此想法的更高階版本，可讓您指定所需的型別並檢查回傳的型別。"

#: ../../whatsnew/2.4.rst:316
#, fuzzy
msgid ""
"Decorator functions can take arguments.  If arguments are supplied, your "
"decorator function is called with only those arguments and must return a new "
"decorator function; this function must take a single function and return a "
"function, as previously described.  In other words, ``@A @B @C(args)`` "
"becomes::"
msgstr ""
"裝飾函式可以接受參數。如果提供了參數，你的裝飾器函式將只用這些參數呼叫，並且"
"必須回傳一個新的裝飾器函式；如前所述，此函式必須採用單個函式並回傳一個函式。"
"換句話說，``@A @B @C(args)`` 變成："

#: ../../whatsnew/2.4.rst:325
#, fuzzy
msgid ""
"Getting this right can be slightly brain-bending, but it's not too difficult."
msgstr "做到這一點可能有點費腦筋，但這並不難。"

#: ../../whatsnew/2.4.rst:327
#, fuzzy
msgid ""
"A small related change makes the :attr:`func_name` attribute of functions "
"writable.  This attribute is used to display function names in tracebacks, "
"so decorators should change the name of any new function that's constructed "
"and returned."
msgstr ""
"一個小的相關更改使函式的 :attr:`func_name` 屬性可寫。此屬性用於在回溯中顯示函"
"式名稱，因此裝飾器應更改構造和回傳的任何新函式的名稱。"

#: ../../whatsnew/2.4.rst:338
#, fuzzy
msgid ":pep:`318` - Decorators for Functions, Methods and Classes"
msgstr ":pep:`318` - 函式、方法和類的裝飾器"

#: ../../whatsnew/2.4.rst:336
#, fuzzy
msgid ""
"Written  by Kevin D. Smith, Jim Jewett, and Skip Montanaro.  Several people "
"wrote patches implementing function decorators, but the one that was "
"actually checked in was patch #979728, written by Mark Russell."
msgstr ""
"由 Kevin D. Smith、Jim Jewett 和 Skip Montanaro "
"撰寫。有幾個人編寫了實作函式裝飾器的補丁，但實際簽入的是補丁 #979728，由 "
"Mark Russell 編寫。"

#: ../../whatsnew/2.4.rst:340
msgid "https://wiki.python.org/moin/PythonDecoratorLibrary"
msgstr "https://wiki.python.org/moin/PythonDecoratorLibrary"

#: ../../whatsnew/2.4.rst:341
#, fuzzy
msgid "This Wiki page contains several examples of decorators."
msgstr "此 Wiki 頁麵包含幾個裝飾器示例。"

#: ../../whatsnew/2.4.rst:347
#, fuzzy
msgid "PEP 322: Reverse Iteration"
msgstr "PEP 322：反向疊代"

#: ../../whatsnew/2.4.rst:349
#, fuzzy
msgid ""
"A new built-in function, ``reversed(seq)``, takes a sequence and returns an "
"iterator that loops over the elements of the sequence  in reverse order.   ::"
msgstr "一個新的內建函式“reversed(seq)”接受一個序列並回傳一個疊代器，該疊代器以相反的"
"順序遍歷序列的元素。 ::"

#: ../../whatsnew/2.4.rst:359
#, fuzzy
msgid ""
"Compared to extended slicing, such as ``range(1,4)[::-1]``, :func:`reversed` "
"is easier to read, runs faster, and uses substantially less memory."
msgstr ""
"與擴充切片（如 ``range(1,4)[::-1]`` 相比，:func:`reversed` "
"更易於閱讀，運行速度更快，並且使用的記憶體更少。"

#: ../../whatsnew/2.4.rst:362
#, fuzzy
msgid ""
"Note that :func:`reversed` only accepts sequences, not arbitrary iterators.  "
"If you want to reverse an iterator, first convert it to  a list with :func:"
"`list`. ::"
msgstr ""
"注意 :func:`reversed` 只接受序列，不接受任意疊代器。如果你想反轉一個疊代器，"
"首先用 :func:`list` 將它轉換成一個列表。 ::"

#: ../../whatsnew/2.4.rst:376
#, fuzzy
msgid ":pep:`322` - Reverse Iteration"
msgstr ":pep:`322` - 反向疊代"

#: ../../whatsnew/2.4.rst:377
#, fuzzy
msgid "Written and implemented by Raymond Hettinger."
msgstr "由 Raymond Hettinger 編寫和實施。"

#: ../../whatsnew/2.4.rst:383
#, fuzzy
msgid "PEP 324: New subprocess Module"
msgstr "PEP 324：新的子流程模組"

#: ../../whatsnew/2.4.rst:385
#, fuzzy
msgid ""
"The standard library provides a number of ways to execute a subprocess, "
"offering different features and different levels of complexity. ``os."
"system(command)`` is easy to use, but slow (it runs a shell process which "
"executes the command) and dangerous (you have to be careful about escaping "
"the shell's metacharacters).  The :mod:`popen2` module offers classes that "
"can capture standard output and standard error from the subprocess, but the "
"naming is confusing.  The :mod:`subprocess` module cleans  this up, "
"providing a unified interface that offers all the features you might need."
msgstr ""
"標準庫提供了多種執行子流程的方法，提供了不同的功能和不同的複雜程度。 ``os."
"system(command)`` 易於使用，但速度慢（它運行一個執行命令的 shell "
"行程）並且危險（你必須小心轉義 shell 的元字元）。 :mod:`popen2` "
"模組提供了可以從子行程捕獲標準輸出和標準錯誤的類，但命名令人困惑。 "
":mod:`subprocess` "
"模組清理了這個，提供了一個統一的界面，提供了您可能需要的所有功能。"

#: ../../whatsnew/2.4.rst:394
#, fuzzy
msgid ""
"Instead of :mod:`popen2`'s collection of classes, :mod:`subprocess` contains "
"a single class called :class:`Popen`  whose constructor supports a number of "
"different keyword arguments. ::"
msgstr ""
"代替 :mod:`popen2` 的類集合，:mod:`subprocess` 包含一個名為 :class:`Popen` "
"的類，其構造函式支援許多不同的關鍵字參數。 ::"

#: ../../whatsnew/2.4.rst:404
#, fuzzy
msgid ""
"*args* is commonly a sequence of strings that will be the arguments to the "
"program executed as the subprocess.  (If the *shell* argument is true, "
"*args* can be a string which will then be passed on to the shell for "
"interpretation, just as :func:`os.system` does.)"
msgstr ""
"*args* 通常是一個字串序列，將作為子行程執行的程式的參數。 （如果 *shell* "
"參數為真，*args* 可以是一個字串，然後將其傳遞給 shell 進行解釋，就像 "
":func:`os.system` 一樣。）"

#: ../../whatsnew/2.4.rst:409
#, fuzzy
msgid ""
"*stdin*, *stdout*, and *stderr* specify what the subprocess's input, output, "
"and error streams will be.  You can provide a file object or a file "
"descriptor, or you can use the constant ``subprocess.PIPE`` to create a pipe "
"between the subprocess and the parent."
msgstr ""
"*stdin*、*stdout* 和 *stderr* "
"指定子行程的輸入、輸出和錯誤流是什麼。您可以提供一個文件對像或文件描述器，"
"或者您可以使用常數 ``subprocess.PIPE`` 在子行程和父行程之間建立一個管道。"

#: ../../whatsnew/2.4.rst:417
#, fuzzy
msgid "The constructor has a number of handy options:"
msgstr "構造函式有許多方便的選項："

#: ../../whatsnew/2.4.rst:419
#, fuzzy
msgid ""
"*close_fds* requests that all file descriptors be closed before running the "
"subprocess."
msgstr "*close_fds* 請求在運行子行程之前關閉所有文件描述器。"

#: ../../whatsnew/2.4.rst:422
#, fuzzy
msgid ""
"*cwd* specifies the working directory in which the subprocess will be "
"executed (defaulting to whatever the parent's working directory is)."
msgstr "*cwd* 指定子行程將在其中執行的工作目錄（預設為父行程的工作目錄）。"

#: ../../whatsnew/2.4.rst:425
#, fuzzy
msgid "*env* is a dictionary specifying environment variables."
msgstr "*env* 是指定環境變數的字典。"

#: ../../whatsnew/2.4.rst:427
#, fuzzy
msgid ""
"*preexec_fn* is a function that gets called before the child is started."
msgstr "*preexec_fn* 是一個在子行程啟動之前呼叫的函式。"

#: ../../whatsnew/2.4.rst:429
#, fuzzy
msgid ""
"*universal_newlines* opens the child's input and output using Python's :term:"
"`universal newlines` feature."
msgstr ""
"*universal_newlines* 使用 Python 的 :term:`universal newlines` "
"特性打開孩子的輸入和輸出。"

#: ../../whatsnew/2.4.rst:432
#, fuzzy
msgid ""
"Once you've created the :class:`Popen` instance,  you can call its :meth:"
"`wait` method to pause until the subprocess has exited, :meth:`poll` to "
"check if it's exited without pausing,  or ``communicate(data)`` to send the "
"string *data* to the subprocess's standard input.   ``communicate(data)``  "
"then reads any data that the subprocess has sent to its standard output  or "
"standard error, returning a tuple ``(stdout_data, stderr_data)``."
msgstr ""
"一旦你建立了 :class:`Popen` 實例，你可以呼叫它的 :meth:`wait` "
"方法來暫停直到子行程退出，:meth:`poll` "
"來檢查它是否在沒有暫停的情況下退出，或者`` communicate(data)`` 將字串 *data* "
"發送到子行程的標準輸入。 ``communicate(data)`` "
"然後讀取子行程發送到其標準輸出或標準錯誤的任何資料，回傳一個元組``("
"stdout_data, stderr_data)``。"

#: ../../whatsnew/2.4.rst:439
#, fuzzy
msgid ""
":func:`call` is a shortcut that passes its arguments along to the :class:"
"`Popen` constructor, waits for the command to complete, and returns the "
"status code of the subprocess.  It can serve as a safer analog to :func:`os."
"system`::"
msgstr ""
":func:`call` 是一種快捷方式，它將其參數傳遞給 :class:`Popen` "
"構造函式，等待命令完成，並回傳子行程的狀態程式碼。它可以作為 :func:`os."
"system`:: 的更安全模擬"

#: ../../whatsnew/2.4.rst:451
#, fuzzy
msgid ""
"The command is invoked without use of the shell.  If you really do want to  "
"use the shell, you can add ``shell=True`` as a keyword argument and provide "
"a string instead of a sequence::"
msgstr ""
"在不使用 shell 的情況下呼叫該命令。如果你真的想使用 shell，你可以新增 "
"``shell=True`` 作為關鍵字參數並提供一個字串而不是序列::"

#: ../../whatsnew/2.4.rst:457
#, fuzzy
msgid ""
"The PEP takes various examples of shell and Python code and shows how they'd "
"be translated into Python code that uses :mod:`subprocess`.  Reading this "
"section of the PEP is highly recommended."
msgstr ""
"PEP 採用各種 shell 和 Python 程式碼示例，並展示如何將它們轉換為使用 "
":mod:`subprocess` 的 Python 程式碼。強烈建議閱讀 PEP 的這一部分。"

#: ../../whatsnew/2.4.rst:465
#, fuzzy
msgid ":pep:`324` - subprocess - New process module"
msgstr ":pep:`324` - subprocess - 新流程模組"

#: ../../whatsnew/2.4.rst:465
#, fuzzy
msgid ""
"Written and implemented by Peter Åstrand, with assistance from Fredrik Lundh "
"and others."
msgstr "由 Peter Åstrand 在 Fredrik Lundh 和其他人的協助下編寫和實施。"

#: ../../whatsnew/2.4.rst:472
#, fuzzy
msgid "PEP 327: Decimal Data Type"
msgstr "PEP 327：十進位資料型別"

#: ../../whatsnew/2.4.rst:474
#, fuzzy
msgid ""
"Python has always supported floating-point (FP) numbers, based on the "
"underlying C :c:expr:`double` type, as a data type.  However, while most "
"programming languages provide a floating-point type, many people (even "
"programmers) are unaware that floating-point numbers don't represent certain "
"decimal fractions accurately.  The new :class:`Decimal` type can represent "
"these fractions accurately, up to a user-specified precision limit."
msgstr ""
"Python 始終支援基於底層 C :c:expr:`double` 型別的浮點 (FP) 數作為資料型別。然"
"而，雖然大多數編程語言都提供浮點型別，但許多人（甚至程式員）並不知道浮點數並"
"不能準確地表示某些小數。新的 Decimal "
"型別可以準確地表示這些分數，達到使用者指定的精度限制。"

#: ../../whatsnew/2.4.rst:483
#, fuzzy
msgid "Why is Decimal needed?"
msgstr "為什麼需要十進位？"

#: ../../whatsnew/2.4.rst:485
#, fuzzy
msgid ""
"The limitations arise from the representation used for floating-point "
"numbers. FP numbers are made up of three components:"
msgstr "限制來自用於浮點數的表示。 FP 編號由三個部分組成："

#: ../../whatsnew/2.4.rst:488
#, fuzzy
msgid "The sign, which is positive or negative."
msgstr "正負號。"

#: ../../whatsnew/2.4.rst:490
#, fuzzy
msgid ""
"The mantissa, which is a single-digit binary number   followed by a "
"fractional part.  For example, ``1.01`` in base-2 notation is ``1 + 0/2 + "
"1/4``, or 1.25 in decimal notation."
msgstr ""
"尾數，它是一位二進位數，後跟小數部分。例如，“1.01”在 base-2 表示法中是“1 + 0/"
"2 + 1/4”，或者在十進位表示法中是 1.25。"

#: ../../whatsnew/2.4.rst:494
#, fuzzy
msgid ""
"The exponent, which tells where the decimal point is located in the number "
"represented."
msgstr "指數，它告訴小數點在所表示的數字中的位置。"

#: ../../whatsnew/2.4.rst:497
#, fuzzy
msgid ""
"For example, the number 1.25 has positive sign, a mantissa value of 1.01 (in "
"binary), and an exponent of 0 (the decimal point doesn't need to be "
"shifted). The number 5 has the same sign and mantissa, but the exponent is 2 "
"because the mantissa is multiplied by 4 (2 to the power of the exponent 2); "
"1.25 \\* 4 equals 5."
msgstr ""
"例如，數字 1.25 為正號，尾數為 1.01（二進位），指數為 0（小數點不移）。數字 "
"5 的符號和尾數相同，但指數為 2，因為尾數乘以 4（2 的指數 2 次方）； 1.25 \\* "
"4 等於 5。"

#: ../../whatsnew/2.4.rst:503
#, fuzzy
msgid ""
"Modern systems usually provide floating-point support that conforms to a "
"standard called IEEE 754.  C's :c:expr:`double` type is usually implemented "
"as a 64-bit IEEE 754 number, which uses 52 bits of space for the mantissa.  "
"This means that numbers can only be specified to 52 bits of precision.  If "
"you're trying to represent numbers whose expansion repeats endlessly, the "
"expansion is cut off after 52 bits. Unfortunately, most software needs to "
"produce output in base 10, and common fractions in base 10 are often "
"repeating decimals in binary. For example, 1.1 decimal is binary "
"``1.0001100110011 ...``; .1 = 1/16 + 1/32 + 1/256 plus an infinite number of "
"additional terms.  IEEE 754 has to chop off that infinitely repeated decimal "
"after 52 digits, so the representation is slightly inaccurate."
msgstr ""
"現代系統通常提供符合 IEEE 754 標準的浮點支援。C 的 :c:expr:`double` "
"型別通常實作為 64 位 IEEE 754 數字，它使用 52 位空間作為尾數。"
"這意味著只能將數字指定為 52 位精度。如果您試圖表示無限重複擴充的數字，"
"則擴充會在 52 位後被切斷。不幸的是，大多數軟件需要以 10 為基數生成輸出，而以 "
"10 為基數的常見分數通常是二進位的重複小數。比如1.1十進位就是二進位``"
"1.0001100110011 ...``； .1 = 1/16 + 1/32 + 1/256 加上無限多的附加項。 IEEE "
"754 必須在 52 位數字後砍掉無限重複的小數點，因此表示略有不准確。"

#: ../../whatsnew/2.4.rst:515
#, fuzzy
msgid "Sometimes you can see this inaccuracy when the number is printed::"
msgstr "有時您會在印出數字時看到這種不准確::"

#: ../../whatsnew/2.4.rst:520
#, fuzzy
msgid ""
"The inaccuracy isn't always visible when you print the number because the FP-"
"to-decimal-string conversion is provided by the C library, and most C "
"libraries try to produce sensible output.  Even if it's not displayed, "
"however, the inaccuracy is still there and subsequent operations can magnify "
"the error."
msgstr ""
"當您印出數字時，不准確並不總是可見的，因為 C 庫提供了 FP 到十進位字串的轉換，"
"並且大多數 C "
"庫都試圖生成合理的輸出。但是，即使不顯示，誤差仍然存在，後續操作會放大誤差。"

#: ../../whatsnew/2.4.rst:525
#, fuzzy
msgid ""
"For many applications this doesn't matter.  If I'm plotting points and "
"displaying them on my monitor, the difference between 1.1 and "
"1.1000000000000001 is too small to be visible.  Reports often limit output "
"to a certain number of decimal places, and if you round the number to two or "
"three or even eight decimal places, the error is never apparent.  However, "
"for applications where it does matter,  it's a lot of work to implement your "
"own custom arithmetic routines."
msgstr ""
"對於許多應用程式，這無關緊要。如果我正在繪製點並將它們顯示在我的顯示器上，"
"1.1 和 1.1000000000000001 之間的差異太小以至於看不到。報告通常將輸出限制在特"
"定的小數位，如果將數字四捨五入到小數點後兩位或三位甚至八位，錯誤永遠不會出現"
"。然而，對於它確實重要的應用程式，實作您自己的自定義算術例程需要大量工作。"

#: ../../whatsnew/2.4.rst:533
#, fuzzy
msgid "Hence, the :class:`Decimal` type was created."
msgstr "因此，建立了 Decimal 型別。"

#: ../../whatsnew/2.4.rst:537
msgid "The :class:`Decimal` type"
msgstr ":class:`Decimal` 型別"

#: ../../whatsnew/2.4.rst:539
#, fuzzy
msgid ""
"A new module, :mod:`decimal`, was added to Python's standard library.  It "
"contains two classes, :class:`Decimal` and :class:`Context`.  :class:"
"`Decimal` instances represent numbers, and :class:`Context` instances are "
"used to wrap up various settings such as the precision and default rounding "
"mode."
msgstr ""
"Python 的標準庫中新增了一個新模組 :mod:`decimal`。它包含兩個類：Decimal 和 "
"Context。 :class:`Decimal` 實例表示數字，:class:`Context` "
"實例用於包裝各種設定，例如精度和預設舍入模式。"

#: ../../whatsnew/2.4.rst:544
#, fuzzy
msgid ""
":class:`Decimal` instances are immutable, like regular Python integers and "
"FP numbers; once it's been created, you can't change the value an instance "
"represents.  :class:`Decimal` instances can be created from integers or "
"strings::"
msgstr ""
":class:`Decimal` 實例是不可變的，就像常規的 Python 整數和 FP "
"數字一樣；一旦建立，您就無法更改實例所代表的值。 :class:`Decimal` "
"實例可以從整數或字串建立::"

#: ../../whatsnew/2.4.rst:555
#, fuzzy
msgid ""
"You can also provide tuples containing the sign, the mantissa represented  "
"as a tuple of decimal digits, and the exponent::"
msgstr "您還可以提供包含符號的元組、表示為十進位數字元組的尾數和指數："

#: ../../whatsnew/2.4.rst:561
#, fuzzy
msgid ""
"Cautionary note: the sign bit is a Boolean value, so 0 is positive and 1 is "
"negative."
msgstr "注意事項：符號位是一個布爾值，所以0為正，1為負。"

#: ../../whatsnew/2.4.rst:564
#, fuzzy
msgid ""
"Converting from floating-point numbers poses a bit of a problem: should the "
"FP number representing 1.1 turn into the decimal number for exactly 1.1, or "
"for 1.1 plus whatever inaccuracies are introduced? The decision was to dodge "
"the issue and leave such a conversion out of the API.  Instead, you should "
"convert the floating-point number into a string using the desired precision "
"and pass the string to the :class:`Decimal` constructor::"
msgstr ""
"從浮點數轉換會帶來一些問題：表示 1.1 的 FP 數應該轉換為恰好 1.1 的十進位數，"
"還是 1.1 加上引入的任何不准確性？決定是迴避這個問題並將這種轉換留在 API "
"之外。相反，您應該使用所需的精度將浮點數轉換為字串，並將該字串傳遞給 Decimal "
"構造函式::"

#: ../../whatsnew/2.4.rst:577
#, fuzzy
msgid ""
"Once you have :class:`Decimal` instances, you can perform the usual "
"mathematical operations on them.  One limitation: exponentiation requires an "
"integer exponent::"
msgstr "一旦你有了 Decimal "
"實例，你就可以對它們執行通常的數學運算。一個限制：求冪需要一個整數指數::"

#: ../../whatsnew/2.4.rst:598
#, fuzzy
msgid ""
"You can combine :class:`Decimal` instances with integers, but not with "
"floating-point numbers::"
msgstr "您可以將 :class:`Decimal` 實例與整數組合，但不能與浮點數組合::"

#: ../../whatsnew/2.4.rst:609
#, fuzzy
msgid ""
":class:`Decimal` numbers can be used with the :mod:`math` and :mod:`cmath` "
"modules, but note that they'll be immediately converted to  floating-point "
"numbers before the operation is performed, resulting in a possible loss of "
"precision and accuracy.  You'll also get back a regular floating-point "
"number and not a :class:`Decimal`.   ::"
msgstr ""
":class:`Decimal` 數字可以與 :mod:`math` 和 :mod:`cmath` 模組一起使用，但請注"
"意，在執行操作之前，它們會立即轉換為浮點數，從而產生精度和準確性的可能損失。"
"您還會得到一個常規的浮點數，而不是 Decimal。 ::"

#: ../../whatsnew/2.4.rst:622
#, fuzzy
msgid ""
":class:`Decimal` instances have a :meth:`sqrt` method that returns a :class:"
"`Decimal`, but if you need other things such as trigonometric functions "
"you'll have to implement them. ::"
msgstr ""
":class:`Decimal` 實例有一個 :meth:`sqrt` 方法回傳一個 "
":class:`Decimal`，但如果你需要其他東西，比如三角函式，你必須實作它們。 ::"

#: ../../whatsnew/2.4.rst:631
msgid "The :class:`Context` type"
msgstr ":class:`Context` 型別"

#: ../../whatsnew/2.4.rst:633
#, fuzzy
msgid ""
"Instances of the :class:`Context` class encapsulate several settings for "
"decimal operations:"
msgstr ":class:`Context` 類的實例封裝了十進位操作的幾個設定："

#: ../../whatsnew/2.4.rst:636
#, fuzzy
msgid ":attr:`prec` is the precision, the number of decimal places."
msgstr ":attr:`prec` 是精度，小數位數。"

#: ../../whatsnew/2.4.rst:638
#, fuzzy
msgid ""
":attr:`rounding` specifies the rounding mode.  The :mod:`decimal` module has "
"constants for the various possibilities: :const:`ROUND_DOWN`, :const:"
"`ROUND_CEILING`,  :const:`ROUND_HALF_EVEN`, and various others."
msgstr ""
":attr:`rounding` 指定舍入模式。 :mod:`decimal` 模組具有用於各種可能性的常數："
":const:`ROUND_DOWN`、:const:`ROUND_CEILING`、:const:`ROUND_HALF_EVEN` "
"以及其他各種。"

#: ../../whatsnew/2.4.rst:642
#, fuzzy
msgid ""
":attr:`traps` is a dictionary specifying what happens on encountering "
"certain error conditions: either  an exception is raised or  a value is "
"returned.  Some examples of error conditions are division by zero, loss of "
"precision, and overflow."
msgstr ":attr:`traps` 是一個字典，指定在遇到某些錯誤情況時會發生什麼：引發例外或回傳"
"值。錯誤條件的一些示例是被零除、精度損失和溢出。"

#: ../../whatsnew/2.4.rst:647
#, fuzzy
msgid ""
"There's a thread-local default context available by calling :func:"
"`getcontext`; you can change the properties of this context to alter the "
"default precision, rounding, or trap handling.  The following example shows "
"the effect of changing the precision of the default context::"
msgstr ""
"通過呼叫 :func:`getcontext` 可以獲得一個執行緒本地預設上下文；您可以更改此上"
"下文的屬性以更改預設精度、舍入或陷阱處理。以下示例顯示了更改預設上下文的精度"
"的影響："

#: ../../whatsnew/2.4.rst:660
#, fuzzy
msgid ""
"The default action for error conditions is selectable; the module can either "
"return a special value such as infinity or not-a-number, or exceptions can "
"be raised::"
msgstr "錯誤條件的預設操作是可選的；該模組可以回傳一個特殊值，例如無窮大或非數字，或"
"者可以引發例外::"

#: ../../whatsnew/2.4.rst:673
#, fuzzy
msgid ""
"The :class:`Context` instance also has various methods for formatting  "
"numbers such as :meth:`to_eng_string` and :meth:`to_sci_string`."
msgstr ""
":class:`Context` 實例還有各種格式化數字的方法，例如 :meth:`to_eng_string` "
"和 :meth:`to_sci_string`。"

#: ../../whatsnew/2.4.rst:676
#, fuzzy
msgid ""
"For more information, see the documentation for the :mod:`decimal` module, "
"which includes a quick-start tutorial and a reference."
msgstr "有關詳細資訊，請參閱 :mod:`decimal` 模組的文檔，其中包括快速入門教程和參考。"

#: ../../whatsnew/2.4.rst:684
#, fuzzy
msgid ":pep:`327` - Decimal Data Type"
msgstr ":pep:`327` - 十進位資料型別"

#: ../../whatsnew/2.4.rst:683
#, fuzzy
msgid ""
"Written by Facundo Batista and implemented by Facundo Batista, Eric Price, "
"Raymond Hettinger, Aahz, and Tim Peters."
msgstr ""
"由 Facundo Batista 編寫，由 Facundo Batista、Eric Price、Raymond Hettinger、"
"Aahz 和 Tim Peters 實施。"

#: ../../whatsnew/2.4.rst:688
msgid "http://www.lahey.com/float.htm"
msgstr "http://www.lahey.com/float.htm"

#: ../../whatsnew/2.4.rst:687
#, fuzzy
msgid ""
"The article uses Fortran code to illustrate many of the problems that "
"floating-point inaccuracy can cause."
msgstr "本文使用 Fortran 程式碼來說明浮點不准確可能導致的許多問題。"

#: ../../whatsnew/2.4.rst:692
msgid "http://speleotrove.com/decimal/"
msgstr "http://speleotrove.com/decimal/"

#: ../../whatsnew/2.4.rst:691
#, fuzzy
msgid ""
"A description of a decimal-based representation.  This representation is "
"being proposed as a standard, and underlies the new Python decimal type.  "
"Much of this material was written by Mike Cowlishaw, designer of the Rexx "
"language."
msgstr ""
"基於十進位表示的描述。這種表示被提議作為標準，並成為新的 Python "
"十進位型別的基礎。這些材料的大部分內容都是由 Rexx 語言的設計者 Mike "
"Cowlishaw 編寫的。"

#: ../../whatsnew/2.4.rst:699
#, fuzzy
msgid "PEP 328: Multi-line Imports"
msgstr "PEP 328：多行匯入"

#: ../../whatsnew/2.4.rst:701
#, fuzzy
msgid ""
"One language change is a small syntactic tweak aimed at making it easier to "
"import many names from a module.  In a ``from module import names`` "
"statement, *names* is a sequence of names separated by commas.  If the "
"sequence is  very long, you can either write multiple imports from the same "
"module, or you can use backslashes to escape the line endings like this::"
msgstr ""
"一種語言更改是一種小的語法調整，旨在使從模組中匯入多個名稱變得更加容易。在``"
"from module import names`` 語句中，*names* 是由逗號分隔的一系列名稱。如果序列"
"很長，您可以從同一個模組編寫多個匯入，或者您可以使用反斜杠來轉義行尾，如下所"
"示："

#: ../../whatsnew/2.4.rst:712
#, fuzzy
msgid ""
"The syntactic change in Python 2.4 simply allows putting the names within "
"parentheses.  Python ignores newlines within a parenthesized expression, so "
"the backslashes are no longer needed::"
msgstr "Python 2.4 中的語法更改僅允許將名稱放在括號內。 Python "
"會忽略帶括號的表達式中的換行符，因此不再需要反斜杠::"

#: ../../whatsnew/2.4.rst:721
#, fuzzy
msgid ""
"The PEP also proposes that all :keyword:`import` statements be absolute "
"imports, with a leading ``.`` character to indicate a relative import.  This "
"part of the PEP was not implemented for Python 2.4, but was completed for "
"Python 2.5."
msgstr ""
"PEP 還建議所有 :keyword:`import` 語句都是絕對匯入，前導字元 ``.`` "
"表示相對匯入。 PEP 的這一部分未針對 Python 2.4 實作，但已針對 Python 2.5 "
"完成。"

#: ../../whatsnew/2.4.rst:728
#, fuzzy
msgid ":pep:`328` - Imports: Multi-Line and Absolute/Relative"
msgstr ":pep:`328` - 匯入：多行和絕對/相對"

#: ../../whatsnew/2.4.rst:729
#, fuzzy
msgid "Written by Aahz.  Multi-line imports were implemented by Dima Dorfman."
msgstr "阿茲寫的。多行匯入由 Dima Dorfman 實施。"

#: ../../whatsnew/2.4.rst:735
#, fuzzy
msgid "PEP 331: Locale-Independent Float/String Conversions"
msgstr "PEP 331：與語言環境無關的浮點數/字串轉換"

#: ../../whatsnew/2.4.rst:737
#, fuzzy
msgid ""
"The :mod:`locale` modules lets Python software select various conversions "
"and display conventions that are localized to a particular country or "
"language. However, the module was careful to not change the numeric locale "
"because various functions in Python's implementation required that the "
"numeric locale remain set to the ``'C'`` locale.  Often this was because the "
"code was using the C library's :c:func:`atof` function."
msgstr ""
":mod:`locale` 模組讓 Python 軟件選擇各種轉換並顯示本地化到特定國家或語言的約"
"定。但是，該模組小心翼翼地不更改數字區域設定，因為 Python "
"實作中的各種函式要求數字區域設定保持設定為 ``'C'`` 區域設定。"
"這通常是因為程式碼使用了 C 庫的 :c:func:`atof` 函式。"

#: ../../whatsnew/2.4.rst:744
#, fuzzy
msgid ""
"Not setting the numeric locale caused trouble for extensions that used third-"
"party C libraries, however, because they wouldn't have the correct locale "
"set. The motivating example was GTK+, whose user interface widgets weren't "
"displaying numbers in the current locale."
msgstr ""
"但是，不設定數字區域設定會給使用第三方 C "
"庫的擴充帶來麻煩，因為它們沒有正確的區域設定。激勵人心的例子是 "
"GTK+，它的使用者界面小部件沒有在當前語言環境中顯示數字。"

#: ../../whatsnew/2.4.rst:749
#, fuzzy
msgid ""
"The solution described in the PEP is to add three new functions to the "
"Python API that perform ASCII-only conversions, ignoring the locale setting:"
msgstr "PEP 中描述的解決方案是向 Python API 新增三個新函式來執行僅 ASCII "
"轉換，忽略語言環境設定："

#: ../../whatsnew/2.4.rst:752
#, fuzzy
msgid ""
"``PyOS_ascii_strtod(str, ptr)``  and ``PyOS_ascii_atof(str, ptr)`` both "
"convert a string to a C :c:expr:`double`."
msgstr ""
"``PyOS_ascii_strtod(str, ptr)`` 和 ``PyOS_ascii_atof(str, ptr)`` "
"都將字串轉換為 C:c:expr:`double`。"

#: ../../whatsnew/2.4.rst:755
#, fuzzy
msgid ""
"``PyOS_ascii_formatd(buffer, buf_len, format, d)`` converts a :c:expr:"
"`double` to an ASCII string."
msgstr ""
"``PyOS_ascii_formatd(buffer, buf_len, format, d)`` 將 :c:expr:`double` "
"轉換為 ASCII 字串。"

#: ../../whatsnew/2.4.rst:758
#, fuzzy
msgid ""
"The code for these functions came from the GLib library (https://developer."
"gnome.org/glib/stable/), whose developers kindly relicensed the relevant "
"functions and donated them to the Python Software Foundation.  The :mod:"
"`locale` module  can now change the numeric locale, letting extensions such "
"as GTK+  produce the correct results."
msgstr ""
"這些函式的程式碼來自 GLib 庫 (https://developer.gnome.org/glib/stable/)，"
"其開發者友好地重新許可了相關函式並將它們捐贈給了 Python 軟件基金會。 "
":mod:`locale` 模組現在可以更改數字區域設定，讓 GTK+ 等擴充產生正確的結果。"

#: ../../whatsnew/2.4.rst:767
#, fuzzy
msgid ":pep:`331` - Locale-Independent Float/String Conversions"
msgstr ":pep:`331` - 與語言環境無關的浮點數/字串轉換"

#: ../../whatsnew/2.4.rst:768
#, fuzzy
msgid "Written by Christian R. Reis, and implemented by Gustavo Carneiro."
msgstr "由 Christian R. Reis 編寫，由 Gustavo Carneiro 實施。"

#: ../../whatsnew/2.4.rst:774
#, fuzzy
msgid "Other Language Changes"
msgstr "其他語言變化"

#: ../../whatsnew/2.4.rst:776
#, fuzzy
msgid ""
"Here are all of the changes that Python 2.4 makes to the core Python "
"language."
msgstr "以下是 Python 2.4 對核心 Python 語言所做的所有更改。"

#: ../../whatsnew/2.4.rst:778
#, fuzzy
msgid "Decorators for functions and methods were added (:pep:`318`)."
msgstr "新增了函式和方法的裝飾器 (:pep:`318`)。"

#: ../../whatsnew/2.4.rst:780
#, fuzzy
msgid ""
"Built-in :func:`set` and :func:`frozenset` types were  added (:pep:`218`). "
"Other new built-ins include the ``reversed(seq)`` function (:pep:`322`)."
msgstr ""
"新增了內建的 :func:`set` 和 :func:`frozenset` 型別 (:pep:`218`)。"
"其他新的內建函式包括 ``reversed(seq)`` 函式 (:pep:`322`)。"

#: ../../whatsnew/2.4.rst:783
#, fuzzy
msgid "Generator expressions were added (:pep:`289`)."
msgstr "新增了生成器表達式 (:pep:`289`)。"

#: ../../whatsnew/2.4.rst:785
#, fuzzy
msgid ""
"Certain numeric expressions no longer return values restricted to 32 or 64 "
"bits (:pep:`237`)."
msgstr "某些數值表達式不再回傳限制為 32 位或 64 位的值 (:pep:`237`)。"

#: ../../whatsnew/2.4.rst:788
#, fuzzy
msgid ""
"You can now put parentheses around the list of names in a ``from module "
"import names`` statement (:pep:`328`)."
msgstr "您現在可以在 ``from module import names`` 語句 (:pep:`328`) "
"中將名稱列表括起來。"

#: ../../whatsnew/2.4.rst:791
#, fuzzy
msgid ""
"The :meth:`dict.update` method now accepts the same argument forms as the :"
"class:`dict` constructor.  This includes any mapping, any iterable of key/"
"value pairs, and keyword arguments. (Contributed by Raymond Hettinger.)"
msgstr ""
":meth:`dict.update` 方法現在接受與 :class:`dict` "
"構造函式相同的參數形式。這包括任何映射、任何可疊代的鍵/值對和關鍵字參數。 "
"（雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.4.rst:795
#, fuzzy
msgid ""
"The string methods :meth:`ljust`, :meth:`rjust`, and :meth:`center` now take "
"an optional argument for specifying a fill character other than a space. "
"(Contributed by Raymond Hettinger.)"
msgstr ""
"字串方法 :meth:`ljust`、:meth:`rjust` 和 :meth:`center` "
"現在採用可選參數來指定空格以外的填充字元。 （雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.4.rst:799
#, fuzzy
msgid ""
"Strings also gained an :meth:`rsplit` method that works like the :meth:"
"`split` method but splits from the end of the string.   (Contributed by Sean "
"Reifschneider.) ::"
msgstr ""
"字串還獲得了一個 :meth:`rsplit` 方法，其工作方式類似於 :meth:`split` "
"方法，但從字串的末尾拆分。 （由 Sean Reifschneider 提供。）::"

#: ../../whatsnew/2.4.rst:808
#, fuzzy
msgid ""
"Three keyword parameters, *cmp*, *key*, and *reverse*, were added to the :"
"meth:`sort` method of lists. These parameters make some common usages of :"
"meth:`sort` simpler. All of these parameters are optional."
msgstr ""
"三個關鍵字參數 *cmp*、*key* 和 *reverse* 被新增到列表的 :meth:`sort` 方法中。"
"這些參數使 :meth:`sort` 的一些常見用法變得更簡單。所有這些參數都是可選的。"

#: ../../whatsnew/2.4.rst:812
#, fuzzy
msgid ""
"For the *cmp* parameter, the value should be a comparison function that "
"takes two parameters and returns -1, 0, or +1 depending on how the "
"parameters compare. This function will then be used to sort the list.  "
"Previously this was the only parameter that could be provided to :meth:"
"`sort`."
msgstr ""
"對於 *cmp* 參數，該值應該是一個比較函式，"
"它採用兩個參數並根據參數的比較方式回傳 -1、0 或 "
"+1。然後將使用此函式對列表進行排序。以前這是唯一可以提供給 :meth:`sort` "
"的參數。"

#: ../../whatsnew/2.4.rst:817
#, fuzzy
msgid ""
"*key* should be a single-parameter function that takes a list element and "
"returns a comparison key for the element.  The list is then sorted using the "
"comparison keys.  The following example sorts a list case-insensitively::"
msgstr ""
"*key* 應該是一個單參數函式，它接受一個列表元素並回傳該元素的比較鍵。然後使用"
"比較鍵對該列表進行排序。以下示例不區分大小寫地對列表進行排序："

#: ../../whatsnew/2.4.rst:834
#, fuzzy
msgid ""
"The last example, which uses the *cmp* parameter, is the old way to perform "
"a case-insensitive sort.  It works but is slower than using a *key* "
"parameter. Using *key* calls :meth:`lower` method once for each element in "
"the list while using *cmp* will call it twice for each comparison, so using "
"*key* saves on invocations of the :meth:`lower` method."
msgstr ""
"最後一個示例使用 *cmp* 參數，是執行不區分大小寫排序的舊方法。它可以工作，"
"但比使用 *key* 參數慢。使用 *key* 為列表中的每個元素呼叫 :meth:`lower` "
"方法一次，而使用 *cmp* 將為每次比較呼叫它兩次，因此使用 *key* 可以節省對 "
":meth:`lower` 方法的呼叫。"

#: ../../whatsnew/2.4.rst:840
#, fuzzy
msgid ""
"For simple key functions and comparison functions, it is often possible to "
"avoid a :keyword:`lambda` expression by using an unbound method instead.  "
"For example, the above case-insensitive sort is best written as::"
msgstr ""
"對於簡單的鍵函式和比較函式，通常可以通過使用未綁定的方法來避免 "
":keyword:`lambda` 表達式。比如上面的不區分大小寫的排序最好寫成::"

#: ../../whatsnew/2.4.rst:848
#, fuzzy
msgid ""
"Finally, the *reverse* parameter takes a Boolean value.  If the value is "
"true, the list will be sorted into reverse order. Instead of ``L.sort(); L."
"reverse()``, you can now write ``L.sort(reverse=True)``."
msgstr ""
"最後，*reverse* 參數採用布爾值。如果該值為真，列表將按相反順序排序。而不是``L"
".sort(); L.reverse()``，你現在可以寫 ``L.sort(reverse=True)``。"

#: ../../whatsnew/2.4.rst:852
#, fuzzy
msgid ""
"The results of sorting are now guaranteed to be stable.  This means that two "
"entries with equal keys will be returned in the same order as they were "
"input. For example, you can sort a list of people by name, and then sort the "
"list by age, resulting in a list sorted by age where people with the same "
"age are in name-sorted order."
msgstr ""
"現在保證排序的結果是穩定的。這意味著具有相同鍵的兩個條目將以與輸入時相同的順"
"序回傳。例如，您可以按姓名對列表進行排序，然後按年齡對列表進行排序，從而得到"
"按年齡排序的列表，其中年齡相同的人按姓名排序。"

#: ../../whatsnew/2.4.rst:858
#, fuzzy
msgid "(All changes to :meth:`sort` contributed by Raymond Hettinger.)"
msgstr "（對 :meth:`sort` 的所有更改均由 Raymond Hettinger 貢獻。）"

#: ../../whatsnew/2.4.rst:860
#, fuzzy
msgid ""
"There is a new built-in function ``sorted(iterable)`` that works like the in-"
"place :meth:`list.sort` method but can be used in expressions.  The "
"differences are:"
msgstr ""
"有一個新的內建函式 ``sorted(iterable)`` 的工作方式類似於就地 :meth:`list."
"sort` 方法，但可以在表達式中使用。不同之處在於："

#: ../../whatsnew/2.4.rst:864
#, fuzzy
msgid "the input may be any iterable;"
msgstr "輸入可以是任何可疊代的；"

#: ../../whatsnew/2.4.rst:866
#, fuzzy
msgid "a newly formed copy is sorted, leaving the original intact; and"
msgstr "對新形成的副本進行排序，保持原件完好無損；和"

#: ../../whatsnew/2.4.rst:868
#, fuzzy
msgid "the expression returns the new sorted copy"
msgstr "該表達式回傳新的排序副本"

#: ../../whatsnew/2.4.rst:891 ../../whatsnew/2.4.rst:919
#: ../../whatsnew/2.4.rst:1212
#, fuzzy
msgid "(Contributed by Raymond Hettinger.)"
msgstr "（雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.4.rst:893 ../../whatsnew/2.4.rst:1519
#, fuzzy
msgid ""
"Integer operations will no longer trigger an :exc:`OverflowWarning`. The :"
"exc:`OverflowWarning` warning will disappear in Python 2.5."
msgstr ""
"整數運算將不再觸發 :exc:`OverflowWarning`。 :exc:`OverflowWarning` 警告將在 "
"Python 2.5 中消失。"

#: ../../whatsnew/2.4.rst:896
#, fuzzy
msgid ""
"The interpreter gained a new switch, :option:`-m`, that takes a name, "
"searches for the corresponding  module on ``sys.path``, and runs the module "
"as a script. For example,  you can now run the Python profiler with ``python "
"-m profile``. (Contributed by Nick Coghlan.)"
msgstr ""
"直譯器獲得了一個新的開關，:option:`-m`，它接受一個名字，在 ``sys.path`` "
"上搜索相應的模組，並將模組作為腳本運行。例如，您現在可以使用 ``python -m "
"profile`` 運行 Python 分析器。 （由尼克·科格蘭提供。）"

#: ../../whatsnew/2.4.rst:901
#, fuzzy
msgid ""
"The ``eval(expr, globals, locals)`` and ``execfile(filename, globals, "
"locals)`` functions and the ``exec`` statement now accept any mapping type "
"for the *locals* parameter.  Previously this had to be a regular Python "
"dictionary.  (Contributed by Raymond Hettinger.)"
msgstr ""
"``eval(expr, globals, locals)`` 和 ``execfile(filename, globals, locals)`` "
"函式和 ``exec`` 語句現在接受 *locals* 參數的任何映射型別。"
"以前這必須是一個普通的 Python 字典。 （雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.4.rst:906
#, fuzzy
msgid ""
"The :func:`zip` built-in function and :func:`itertools.izip` now return an "
"empty list if called with no arguments. Previously they raised a :exc:"
"`TypeError` exception.  This makes them more suitable for use with variable "
"length argument lists::"
msgstr ""
":func:`zip` 內建函式和 :func:`itertools.izip` "
"現在如果不帶參數呼叫則回傳一個空列表。之前他們提出了一個 :exc:`TypeError` "
"例外。這使它們更適合與可變長度參數列表一起使用::"

#: ../../whatsnew/2.4.rst:921
#, fuzzy
msgid ""
"Encountering a failure while importing a module no longer leaves a partially "
"initialized module object in ``sys.modules``.  The incomplete module object "
"left behind would fool further imports of the same module into succeeding, "
"leading to confusing errors.   (Fixed by Tim Peters.)"
msgstr ""
"匯入模組時遇到失敗不再在 sys.modules 中留下部分初始化的模組物件。遺留下來的不"
"完整模組物件會欺騙相同模組的進一步匯入，從而導致混淆錯誤。 "
"（由蒂姆·彼得斯修復。）"

#: ../../whatsnew/2.4.rst:926
#, fuzzy
msgid ""
":const:`None` is now a constant; code that binds a new value to  the name "
"``None`` is now a syntax error. (Contributed by Raymond Hettinger.)"
msgstr ":const:`None` 現在是常數；將新值綁定到名稱 ``None``的程式碼現在是語法錯誤。 "
"（雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.4.rst:933
#, fuzzy
msgid "Optimizations"
msgstr "最佳化"

#: ../../whatsnew/2.4.rst:935
#, fuzzy
msgid ""
"The inner loops for list and tuple slicing were optimized and now run about "
"one-third faster.  The inner loops for dictionaries were also optimized, "
"resulting in performance boosts for :meth:`keys`, :meth:`values`, :meth:"
"`items`, :meth:`iterkeys`, :meth:`itervalues`, and :meth:`iteritems`. "
"(Contributed by Raymond Hettinger.)"
msgstr ""
"最佳化了列表和元組切片的內部循環，現在運行速度提高了大約三分之一。字典的內部"
"循環也得到了最佳化，從而提高了 :meth:`keys`、:meth:`values`、:meth:`items`、:"
"meth:`iterkeys`、:meth:`itervalues` 和 :meth:`iteritems`。 "
"（雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.4.rst:941
#, fuzzy
msgid ""
"The machinery for growing and shrinking lists was optimized for speed and "
"for space efficiency.  Appending and popping from lists now runs faster due "
"to more efficient code paths and less frequent use of the underlying system :"
"c:func:`realloc`.  List comprehensions also benefit.   :meth:`list.extend` "
"was also optimized and no longer converts its argument into a temporary list "
"before extending the base list.  (Contributed by Raymond Hettinger.)"
msgstr ""
"用於增長和收縮列表的機製針對速度和空間效率進行了最佳化。"
"由於更高效的程式碼路徑和底層系統 :c:func:`realloc` "
"的使用頻率降低，現在從列表中追加和彈出運行速度更快。列表理解也有好處。 "
":meth:`list.extend` "
"也進行了最佳化，在擴充基本列表之前不再將其參數轉換為臨時列表。 "
"（雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.4.rst:948
#, fuzzy
msgid ""
":func:`list`, :func:`tuple`, :func:`map`, :func:`filter`, and :func:`zip` "
"now run several times faster with non-sequence arguments that supply a :meth:"
"`__len__` method.  (Contributed by Raymond Hettinger.)"
msgstr ""
":func:`list`、:func:`tuple`、:func:`map`、:func:`filter` 和 :func:`zip` "
"現在使用提供 :meth 的非序列參數運行速度快幾倍:`__len__` 方法。 "
"（雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.4.rst:952
#, fuzzy
msgid ""
"The methods :meth:`list.__getitem__`, :meth:`dict.__getitem__`, and :meth:"
"`dict.__contains__` are now implemented as :class:`method_descriptor` "
"objects rather than :class:`wrapper_descriptor` objects.  This form of  "
"access doubles their performance and makes them more suitable for use as "
"arguments to functionals: ``map(mydict.__getitem__, keylist)``. (Contributed "
"by Raymond Hettinger.)"
msgstr ""
"方法 :meth:`list.__getitem__`、:meth:`dict.__getitem__` 和 :meth:`dict."
"__contains__` 現在被實作為 :class:`method_descriptor` "
"物件而不是 :class:`wrapper_descriptor` "
"物件。這種訪問形式使它們的性能加倍，並使它們更適合用作函式的參數：``map("
"mydict.__getitem__, keylist)``。 （雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.4.rst:959
#, fuzzy
msgid ""
"Added a new opcode, ``LIST_APPEND``, that simplifies the generated bytecode "
"for list comprehensions and speeds them up by about a third.  (Contributed "
"by Raymond Hettinger.)"
msgstr ""
"新增了一個新的操作碼，``LIST_APPEND``，它簡化了為列表推導生成的位元組碼，並將"
"它們的速度提高了大約三分之一。 （雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.4.rst:963
#, fuzzy
msgid ""
"The peephole bytecode optimizer has been improved to  produce shorter, "
"faster bytecode; remarkably, the resulting bytecode is  more readable.  "
"(Enhanced by Raymond Hettinger.)"
msgstr ""
"窺孔位元組碼最佳化器得到改進，可以生成更短、更快的位元組碼；值得注意的是，生"
"成的位元組碼更具可讀性。 （由 Raymond Hettinger 增強。）"

#: ../../whatsnew/2.4.rst:967
#, fuzzy
msgid ""
"String concatenations in statements of the form ``s = s + \"abc\"`` and ``s "
"+= \"abc\"`` are now performed more efficiently in certain circumstances.  "
"This optimization won't be present in other Python implementations such as "
"Jython, so you shouldn't rely on it; using the :meth:`join` method of "
"strings is still recommended when you want to efficiently glue a large "
"number of strings together. (Contributed by Armin Rigo.)"
msgstr ""
"在某些情況下，``s = s + \"abc\"`` 和 ``s += \"abc\"`` "
"形式的語句中的字串連接現在可以更有效地執行。這種最佳化不會出現在其他 Python "
"實作中，例如 "
"Jython，因此您不應該依賴它；當您想要有效地將大量字串粘合在一起時，"
"仍然建議使用字串的 :meth:`join` 方法。 （由 Armin Rigo 提供。）"

#: ../../whatsnew/2.4.rst:974
#, fuzzy
msgid ""
"The net result of the 2.4 optimizations is that Python 2.4 runs the pystone "
"benchmark around 5% faster than Python 2.3 and 35% faster than Python 2.2. "
"(pystone is not a particularly good benchmark, but it's the most commonly "
"used measurement of Python's performance.  Your own applications may show "
"greater or smaller benefits from Python 2.4.)"
msgstr ""
"2.4 最佳化的最終結果是 Python 2.4 運行 pystone 基準測試的速度比 Python 2.3 "
"快 5%，比 Python 2.2 快 35%。 （pystone 不是特別好的基準，但它是最常用的 "
"Python 性能度量。您自己的應用程式可能會從 Python 2.4 中獲得或多或少的好處。）"

#: ../../whatsnew/2.4.rst:990
#, fuzzy
msgid "New, Improved, and Deprecated Modules"
msgstr "新的、改進的和棄用的模組"

#: ../../whatsnew/2.4.rst:992
#, fuzzy
msgid ""
"As usual, Python's standard library received a number of enhancements and "
"bug fixes.  Here's a partial list of the most notable changes, sorted "
"alphabetically by module name. Consult the :file:`Misc/NEWS` file in the "
"source tree for a more complete list of changes, or look through the CVS "
"logs for all the details."
msgstr ""
"像往常一樣，Python 的標準庫得到了一些增強和錯誤修復。這是最顯著更改的部分列表"
"，按模組名稱的字母順序排序。請查閱源程式碼樹中的 :file:`Misc/NEWS` "
"文件以獲取更完整的更改列表，或查看 CVS 日誌以獲取所有詳細資訊。"

#: ../../whatsnew/2.4.rst:997
#, fuzzy
msgid ""
"The :mod:`asyncore` module's :func:`loop` function now has a *count* "
"parameter that lets you perform a limited number of passes through the "
"polling loop.  The default is still to loop forever."
msgstr ""
":mod:`asyncore` 模組的 :func:`loop` 函式現在有一個 *count* "
"參數，可讓您執行有限次數的輪詢循環。預設仍然是永遠循環。"

#: ../../whatsnew/2.4.rst:1001
#, fuzzy
msgid ""
"The :mod:`base64` module now has more complete :rfc:`3548` support for "
"Base64, Base32, and Base16 encoding and decoding, including optional case "
"folding and optional alternative alphabets. (Contributed by Barry Warsaw.)"
msgstr ""
":mod:`base64` 模組現在具有更完整的 :rfc:`3548` 對 Base64、Base32 和 Base16 "
"編碼和解碼的支援，包括可選的大小寫折疊和可選的替代字母表。 （由 Barry Warsaw "
"提供。）"

#: ../../whatsnew/2.4.rst:1005
#, fuzzy
msgid ""
"The :mod:`bisect` module now has an underlying C implementation for improved "
"performance. (Contributed by Dmitry Vasiliev.)"
msgstr ":mod:`bisect` 模組現在有一個底層 C 實作以提高性能。 "
"（由德米特里·瓦西里耶夫提供。）"

#: ../../whatsnew/2.4.rst:1008
#, fuzzy
msgid ""
"The CJKCodecs collections of East Asian codecs, maintained by Hye-Shik "
"Chang, was integrated into 2.4.   The new encodings are:"
msgstr "由 Hye-Shik Chang 維護的東亞編解碼器 CJKCodecs 集合已集成到 2.4 "
"中。新的編碼是："

#: ../../whatsnew/2.4.rst:1011
#, fuzzy
msgid "Chinese (PRC): gb2312, gbk, gb18030, big5hkscs, hz"
msgstr "中文（中國）：gb2312、gbk、gb18030、big5hkscs、hz"

#: ../../whatsnew/2.4.rst:1013
#, fuzzy
msgid "Chinese (ROC): big5, cp950"
msgstr "中文 (ROC)：big5、cp950"

#: ../../whatsnew/2.4.rst:1017
#, fuzzy
msgid "Japanese: cp932, euc-jis-2004, euc-jp, euc-jisx0213, iso-2022-jp,"
msgstr "日語：cp932、euc-jis-2004、euc-jp、euc-jisx0213、iso-2022-jp、"

#: ../../whatsnew/2.4.rst:1016
#, fuzzy
msgid ""
"iso-2022-jp-1, iso-2022-jp-2, iso-2022-jp-3, iso-2022-jp-ext, iso-2022-"
"jp-2004, shift-jis, shift-jisx0213, shift-jis-2004"
msgstr ""
"iso-2022-jp-1、iso-2022-jp-2、iso-2022-jp-3、iso-2022-jp-"
"ext、iso-2022-jp-2004、shift-jis、shift-jisx0213、shift- JIS-2004"

#: ../../whatsnew/2.4.rst:1019
#, fuzzy
msgid "Korean: cp949, euc-kr, johab, iso-2022-kr"
msgstr "韓語：cp949、euc-kr、johab、iso-2022-kr"

#: ../../whatsnew/2.4.rst:1021
#, fuzzy
msgid ""
"Some other new encodings were added: HP Roman8,  ISO_8859-11, ISO_8859-16, "
"PCTP-154, and TIS-620."
msgstr "新增了一些其他新編碼：HP Roman8、ISO_8859-11、ISO_8859-16、PCTP-154 和 "
"TIS-620。"

#: ../../whatsnew/2.4.rst:1024
#, fuzzy
msgid ""
"The UTF-8 and UTF-16 codecs now cope better with receiving partial input. "
"Previously the :class:`StreamReader` class would try to read more data, "
"making it impossible to resume decoding from the stream.  The :meth:`read` "
"method will now return as much data as it can and future calls will resume "
"decoding where previous ones left off.  (Implemented by Walter Dörwald.)"
msgstr ""
"UTF-8 和 UTF-16 "
"編解碼器現在可以更好地處理接收部分輸入。以前 :class:`StreamReader` "
"類會嘗試讀取更多資料，從而無法從流中恢復解碼。 :meth:`read` "
"方法現在將回傳盡可能多的資料，未來的呼叫將在之前中斷的地方繼續解碼。 （由 "
"Walter Dörwald 實施。）"

#: ../../whatsnew/2.4.rst:1030
#, fuzzy
msgid ""
"There is a new :mod:`collections` module for  various specialized collection "
"datatypes.  Currently it contains just one type, :class:`deque`, a double-"
"ended queue that supports efficiently adding and removing elements from "
"either end::"
msgstr ""
"有一個新的 :mod:`collections` 模組用於各種專門的集合資料型別。目前它只包含一"
"種型別，:class:`deque`，一種雙端隊列，支援從任一端高效地新增和刪除元素::"

#: ../../whatsnew/2.4.rst:1050
#, fuzzy
msgid ""
"Several modules, such as the :mod:`Queue` and :mod:`threading` modules, now "
"take advantage of :class:`collections.deque` for improved performance.  "
"(Contributed by Raymond Hettinger.)"
msgstr ""
"幾個模組，例如 :mod:`Queue` 和 :mod:`threading` 模組，現在利用 "
":class:`collections.deque` 來提高性能。 （雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.4.rst:1054
#, fuzzy
msgid ""
"The :mod:`ConfigParser` classes have been enhanced slightly. The :meth:"
"`read` method now returns a list of the files that were successfully parsed, "
"and the :meth:`set` method raises :exc:`TypeError` if passed a *value* "
"argument that isn't a string.   (Contributed by John Belmonte and David "
"Goodger.)"
msgstr ""
":mod:`ConfigParser` 類已略有增強。 :meth:`read` 方法現在回傳已成"
"功解析的文件列表，而 :meth:`set` 方法如果傳遞的 *value* 參數不是字串，"
"則會引發 :exc:`TypeError`。 （由 John Belmonte 和 David Goodger 提供。）"

#: ../../whatsnew/2.4.rst:1059
#, fuzzy
msgid ""
"The :mod:`curses` module now supports the ncurses extension :func:"
"`use_default_colors`.  On platforms where the terminal supports "
"transparency, this makes it possible to use a transparent background. "
"(Contributed by Jörg Lehmann.)"
msgstr ""
":mod:`curses` 模組現在支援 ncurses 擴充 :func:`use_default_colors`。在終端支"
"援透明的平台上，這使得使用透明背景成為可能。 （由 Jörg Lehmann 提供。）"

#: ../../whatsnew/2.4.rst:1064
#, fuzzy
msgid ""
"The :mod:`difflib` module now includes an :class:`HtmlDiff` class that "
"creates an HTML table showing a side by side comparison of two versions of a "
"text. (Contributed by Dan Gass.)"
msgstr ""
":mod:`difflib` 模組現在包括一個 :class:`HtmlDiff` 類，它建立一個 HTML "
"表格，顯示文本的兩個版本的並排比較。 （由丹·加斯提供。）"

#: ../../whatsnew/2.4.rst:1068
#, fuzzy
msgid ""
"The :mod:`email` package was updated to version 3.0,  which dropped various "
"deprecated APIs and removes support for Python versions earlier than 2.3.  "
"The 3.0 version of the package uses a new incremental parser for MIME "
"messages, available in the :mod:`email.FeedParser` module.  The new parser "
"doesn't require reading the entire message into memory, and doesn't raise "
"exceptions if a message is malformed; instead it records any problems in "
"the  :attr:`defect` attribute of the message.  (Developed by Anthony Baxter, "
"Barry Warsaw, Thomas Wouters, and others.)"
msgstr ""
":mod:`email` 包已更新到 3.0 版，刪除了各種已棄用的 API，並刪除了對 2.3 "
"之前的 Python 版本的支援。該包的 3.0 版本使用新的增量解析器來處理 MIME 消息，"
"在 email.FeedParser 模組中可用。新的解析器不需要將整個消息讀入記憶體，如果消"
"息格式不正確也不會引發例外；相反，它會在消息的 :attr:`defect` "
"屬性中記錄任何問題。 （由 Anthony Baxter、Barry Warsaw、Thomas Wouters "
"等開發。）"

#: ../../whatsnew/2.4.rst:1077
#, fuzzy
msgid ""
"The :mod:`heapq` module has been converted to C.  The resulting tenfold "
"improvement in speed makes the module suitable for handling high volumes of "
"data.  In addition, the module has two new functions :func:`nlargest` and :"
"func:`nsmallest` that use heaps to find the N largest or smallest values in "
"a dataset without the expense of a full sort.  (Contributed by Raymond "
"Hettinger.)"
msgstr ""
":mod:`heapq` 模組已轉換為 C。由此產生的速度提高了十倍，使該模組適合處理大量資"
"料。此外，該模組還有兩個新函式 :func:`nlargest` 和 :func:`nsmallest`，"
"它們使用堆來查找資料集中的 N 個最大值或最小值，而無需進行完全排序。 "
"（雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.4.rst:1083
#, fuzzy
msgid ""
"The :mod:`httplib` module now contains constants for HTTP status codes "
"defined in various HTTP-related RFC documents.  Constants have names such "
"as :const:`OK`, :const:`CREATED`, :const:`CONTINUE`, and :const:"
"`MOVED_PERMANENTLY`; use pydoc to get a full list.  (Contributed by Andrew "
"Eland.)"
msgstr ""
":mod:`httplib` 模組現在包含在各種與 HTTP 相關的 RFC 文檔中定義的 HTTP "
"狀態程式碼的常數。常數具有諸如 "
":const:`OK`、:const:`CREATED`、:const:`CONTINUE` 和 "
":const:`MOVED_PERMANENTLY` 之類的名稱；使用 pydoc 獲取完整列表。 "
"（由安德魯·伊蘭提供。）"

#: ../../whatsnew/2.4.rst:1089
#, fuzzy
msgid ""
"The :mod:`imaplib` module now supports IMAP's THREAD command (contributed by "
"Yves Dionne) and new :meth:`deleteacl` and :meth:`myrights` methods "
"(contributed by Arnaud Mazin)."
msgstr ""
":mod:`imaplib` 模組現在支援 IMAP 的 THREAD 命令（由 Yves Dionne 貢獻）和新的 "
":meth:`deleteacl` 和 :meth:`myrights` 方法（由 Arnaud Mazin 貢獻）。"

#: ../../whatsnew/2.4.rst:1093
#, fuzzy
msgid ""
"The :mod:`itertools` module gained a ``groupby(iterable[, *func*])`` "
"function. *iterable* is something that can be iterated over to return a "
"stream of elements, and the optional *func* parameter is a function that "
"takes an element and returns a key value; if omitted, the key is simply the "
"element itself.  :func:`groupby` then groups the elements into subsequences "
"which have matching values of the key, and returns a series of 2-tuples "
"containing the key value and an iterator over the subsequence."
msgstr ""
":mod:`itertools` 模組獲得了一個 ``groupby(iterable[, *func*])`` 函式。 "
"*iterable* 是可以疊代以回傳元素流的東西，可選的 *func* "
"參數是一個接受元素並回傳鍵值的函式；如果省略，鍵就是元素本身。 "
":func:`groupby` 然後將元素分組為具有鍵匹配值的子序列，並回傳一系列包含鍵值的"
"二元組和子序列上的疊代器。"

#: ../../whatsnew/2.4.rst:1101
#, fuzzy
msgid ""
"Here's an example to make this clearer.  The *key* function simply returns "
"whether a number is even or odd, so the result of :func:`groupby` is to "
"return consecutive runs of odd or even numbers. ::"
msgstr ""
"這是一個使這一點更清楚的示例。 *key* 函式只回傳一個數是偶數還是奇數，因此 "
":func:`groupby` 的結果是回傳連續運行的奇數或偶數。 ::"

#: ../../whatsnew/2.4.rst:1117
#, fuzzy
msgid ""
":func:`groupby` is typically used with sorted input.  The logic for :func:"
"`groupby` is similar to the Unix ``uniq`` filter which makes it handy for "
"eliminating, counting, or identifying duplicate elements::"
msgstr ""
":func:`groupby` 通常與排序輸入一起使用。 :func:`groupby` 的邏輯類似於 Unix "
"``uniq`` 過濾器，這使得它可以方便地消除、計數或識別重複元素::"

#: ../../whatsnew/2.4.rst:1140
#, fuzzy
msgid "(Contributed by Hye-Shik Chang.)"
msgstr "（由 Hye-Shik Chang 提供。）"

#: ../../whatsnew/2.4.rst:1142
#, fuzzy
msgid ""
":mod:`itertools` also gained a function named ``tee(iterator, N)`` that "
"returns *N* independent iterators that replicate *iterator*.  If *N* is "
"omitted, the default is 2. ::"
msgstr ""
":mod:`itertools` 還獲得了一個名為 ``tee(iterator, N)`` 的函式，它回傳 *N* "
"個複制 *iterator* 的獨立疊代器。如果省略 *N*，則預設值為 2。::"

#: ../../whatsnew/2.4.rst:1155
#, fuzzy
msgid ""
"Note that :func:`tee` has to keep copies of the values returned  by the "
"iterator; in the worst case, it may need to keep all of them.   This should "
"therefore be used carefully if the leading iterator can run far ahead of the "
"trailing iterator in a long stream of inputs. If the separation is large, "
"then you might as well use  :func:`list` instead.  When the iterators track "
"closely with one another, :func:`tee` is ideal.  Possible applications "
"include bookmarking, windowing, or lookahead iterators. (Contributed by "
"Raymond Hettinger.)"
msgstr ""
"請注意 :func:`tee` 必須保留疊代器回傳值的副本；在最壞的情況下，它可能需要保留"
"所有這些。因此，如果在長輸入流中前導疊代器可以遠遠領先於尾隨疊代器運行，則應"
"謹慎使用。如果分隔很大，那麼您不妨改用 "
":func:`list`。當疊代器彼此緊密跟踪時，:func:`tee` "
"是理想的。可能的應用包括書籤、窗口或先行疊代器。 （雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.4.rst:1164
#, fuzzy
msgid ""
"A number of functions were added to the :mod:`locale`  module, such as :func:"
"`bind_textdomain_codeset` to specify a particular encoding and a family of :"
"func:`l\\*gettext` functions that return messages in the chosen encoding. "
"(Contributed by Gustavo Niemeyer.)"
msgstr ""
"許多函式被新增到 :mod:`locale` 模組，例如 :func:`bind_textdomain_codeset` "
"以指定特定編碼和一系列 :func:`l\\*gettext` 函式以所選編碼回傳消息. "
"（古斯塔沃·尼邁耶供稿。）"

#: ../../whatsnew/2.4.rst:1169
#, fuzzy
msgid ""
"Some keyword arguments were added to the :mod:`logging` package's :func:"
"`basicConfig` function to simplify log configuration.  The default behavior "
"is to log messages to standard error, but various keyword arguments can be "
"specified to log to a particular file, change the logging format, or set the "
"logging level. For example::"
msgstr ""
"一些關鍵字參數被新增到 :mod:`logging` 包的 :func:`basicConfig` 函式以簡化日誌"
"配置。預設行為是將消息記錄到標準錯誤，但可以指定各種關鍵字參數以記錄到特定文"
"件、更改記錄格式或設定記錄級別。例如：："

#: ../../whatsnew/2.4.rst:1180
#, fuzzy
msgid ""
"Other additions to the :mod:`logging` package include a ``log(level, msg)`` "
"convenience method, as well as a :class:`TimedRotatingFileHandler` class "
"that rotates its log files at a timed interval.  The module already had :"
"class:`RotatingFileHandler`, which rotated logs once the file exceeded a "
"certain size.  Both classes derive from a new :class:`BaseRotatingHandler` "
"class that can be used to implement other rotating handlers."
msgstr ""
":mod:`logging` 包的其他新增內容包括一個 ``log(level, msg)`` 便捷方法，"
"以及一個 :class:`TimedRotatingFileHandler` 類，它按時間間隔輪換其日誌文件。該"
"模組已經有 :class:`RotatingFileHandler`，它會在文件超過一定大小時輪換日誌。"
"這兩個類都派生自一個新的 BaseRotatingHandler "
"類，該類可用於實作其他旋轉處理程式。"

#: ../../whatsnew/2.4.rst:1187
#, fuzzy
msgid "(Changes implemented by Vinay Sajip.)"
msgstr "（由 Vinay Sajip 實施的更改。）"

#: ../../whatsnew/2.4.rst:1189
#, fuzzy
msgid ""
"The :mod:`marshal` module now shares interned strings on unpacking a  data "
"structure.  This may shrink the size of certain pickle strings, but the "
"primary effect is to make :file:`.pyc` files significantly smaller. "
"(Contributed by Martin von Löwis.)"
msgstr ""
":mod:`marshal` 模組現在在解包資料結構時共享內部字串。這可能會縮小某些 pickle "
"字串的大小，但主要效果是使 :file:`.pyc` 文件顯著變小。 （由 Martin von Löwis "
"提供。）"

#: ../../whatsnew/2.4.rst:1194
#, fuzzy
msgid ""
"The :mod:`nntplib` module's :class:`NNTP` class gained :meth:`description` "
"and :meth:`descriptions` methods to retrieve  newsgroup descriptions for a "
"single group or for a range of groups. (Contributed by Jürgen A. Erhard.)"
msgstr ""
":mod:`nntplib` 模組的 :class:`NNTP` 類獲得了 :meth:`description` 和 "
":meth:`descriptions` 方法來檢索單個組或一系列組的新聞組描述。 （由 Jürgen A. "
"Erhard 提供。）"

#: ../../whatsnew/2.4.rst:1198
#, fuzzy
msgid ""
"Two new functions were added to the :mod:`operator` module, "
"``attrgetter(attr)`` and ``itemgetter(index)``. Both functions return "
"callables that take a single argument and return the corresponding attribute "
"or item; these callables make excellent data extractors when used with :func:"
"`map` or :func:`sorted`.  For example::"
msgstr ""
":mod:`operator` 模組中新增了兩個新函式，``attrgetter(attr)`` 和 ``itemgetter("
"index)``。這兩個函式都回傳帶有單個參數並回傳相應屬性或項的可呼叫物件；當與 "
":func:`map` 或 :func:`sorted` "
"一起使用時，這些可呼叫函式可以成為出色的資料提取器。例如：："

#: ../../whatsnew/2.4.rst:1214
#, fuzzy
msgid ""
"The :mod:`optparse` module was updated in various ways.  The module now "
"passes its messages through :func:`gettext.gettext`, making it possible to "
"internationalize Optik's help and error messages.  Help messages for options "
"can now include the string ``'%default'``, which will be replaced by the "
"option's default value.  (Contributed by Greg Ward.)"
msgstr ""
":mod:`optparse` 模組以各種方式更新。該模組現在通過 :func:`gettext.gettext` "
"傳遞其消息，從而可以國際化 Optik 的幫助和錯誤消息。"
"選項的幫助消息現在可以包含字串 ``'%default'``，它將被選項的預設值替換。 "
"（由格雷格·沃德提供。）"

#: ../../whatsnew/2.4.rst:1220
#, fuzzy
msgid ""
"The long-term plan is to deprecate the :mod:`rfc822` module in some future "
"Python release in favor of the :mod:`email` package. To this end, the :func:"
"`email.Utils.formatdate` function has been changed to make it usable as a "
"replacement for :func:`rfc822.formatdate`.  You may want to write new e-mail "
"processing code with this in mind.  (Change implemented by Anthony Baxter.)"
msgstr ""
"長期計劃是在未來的某個 Python 版本中棄用 :mod:`rfc822` 模組以支援 "
":mod:`email` 包。為此，email.Utils.formatdate 函式已更改為可用作 "
"rfc822.formatdate "
"的替代品。考慮到這一點，您可能希望編寫新的電子郵件處理程式碼。 （更改由 "
"Anthony Baxter 實施。）"

#: ../../whatsnew/2.4.rst:1226
#, fuzzy
msgid ""
"A new ``urandom(n)`` function was added to the :mod:`os` module, returning a "
"string containing *n* bytes of random data.  This function provides access "
"to platform-specific sources of randomness such as :file:`/dev/urandom` on "
"Linux or the Windows CryptoAPI.  (Contributed by Trevor Perrin.)"
msgstr ""
"一個新的 ``urandom(n)`` 函式被新增到 :mod:`os` 模組，回傳一個包含 *n* "
"位元組隨機資料的字串。此函式提供對特定於平台的隨機源的訪問，例如 Linux 上的 "
":file:`/dev/urandom` 或 Windows CryptoAPI。 （由特雷弗·佩林提供。）"

#: ../../whatsnew/2.4.rst:1231
#, fuzzy
msgid ""
"Another new function: ``os.path.lexists(path)``  returns true if the file "
"specified by *path* exists, whether or not it's a symbolic link.  This "
"differs from the existing ``os.path.exists(path)`` function, which returns "
"false if *path* is a symlink that points to a destination that doesn't "
"exist. (Contributed by Beni Cherniavsky.)"
msgstr ""
"另一個新函式：``os.path.lexists(path)`` 如果 *path* 指定的文件存在，則回傳 "
"true，無論它是否是符號鏈接。這不同於現有的 os.path.exists(path) 函式，如果 "
"*path* 是指向不存在的目的地的符號鏈接，則回傳 false。 "
"（由貝尼切爾尼亞夫斯基提供。）"

#: ../../whatsnew/2.4.rst:1237
#, fuzzy
msgid ""
"A new :func:`getsid` function was added to the :mod:`posix` module that "
"underlies the :mod:`os` module. (Contributed by J. Raynor.)"
msgstr ""
"一個新的 :func:`getsid` 函式被新增到 :mod:`os` 模組的 :mod:`posix` 模組中。 "
"（由 J. Raynor 提供。）"

#: ../../whatsnew/2.4.rst:1240
#, fuzzy
msgid ""
"The :mod:`poplib` module now supports POP over SSL.  (Contributed by Hector "
"Urtubia.)"
msgstr ":mod:`poplib` 模組現在支援 POP over SSL。 （由 Hector Urtubia 提供。）"

#: ../../whatsnew/2.4.rst:1243
#, fuzzy
msgid ""
"The :mod:`profile` module can now profile C extension functions. "
"(Contributed by Nick Bastin.)"
msgstr ":mod:`profile` 模組現在可以分析 C 擴充函式。 （由尼克·巴斯汀提供。）"

#: ../../whatsnew/2.4.rst:1246
#, fuzzy
msgid ""
"The :mod:`random` module has a new method called ``getrandbits(N)`` that "
"returns a long integer *N* bits in length.  The existing :meth:`randrange` "
"method now uses :meth:`getrandbits` where appropriate, making generation of "
"arbitrarily large random numbers more efficient.  (Contributed by Raymond "
"Hettinger.)"
msgstr ""
":mod:`random` 模組有一個名為 ``getrandbits(N)`` 的新方法，它回傳一個長度為 "
"*N* 位的長整數。現有的 :meth:`randrange` 方法現在在適當的地方使用 "
":meth:`getrandbits`，使生成任意大的隨機數更加高效。 （雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.4.rst:1252
#, fuzzy
msgid ""
"The regular expression language accepted by the :mod:`re` module was "
"extended with simple conditional expressions, written as ``(?(group)A|B)``.  "
"*group* is either a numeric group ID or a group name defined with ``(?"
"P<group>...)`` earlier in the expression.  If the specified group matched, "
"the regular expression pattern *A* will be tested against the string; if the "
"group didn't match, the pattern *B* will be used instead. (Contributed by "
"Gustavo Niemeyer.)"
msgstr ""
":mod:`re` 模組接受的正則表達式語言擴充了簡單的條件表達式，寫為 "
"``(?(group)A|B)``。 *group* 是數字組 ID 或在表達式前面用 ``(?P<group>...)`` "
"定義的組名。如果指定的組匹配，正則表達式模式 *A* "
"將針對字串進行測試；如果組不匹配，將使用模式 *B* 代替。 "
"（古斯塔沃·尼邁耶供稿。）"

#: ../../whatsnew/2.4.rst:1259
#, fuzzy
msgid ""
"The :mod:`re` module is also no longer recursive, thanks to a massive amount "
"of work by Gustavo Niemeyer.  In a recursive regular expression engine, "
"certain patterns result in a large amount of C stack space being consumed, "
"and it was possible to overflow the stack. For example, if you matched a "
"30000-byte string of ``a`` characters against the expression ``(a|b)+``, one "
"stack frame was consumed per character.  Python 2.3 tried to check for stack "
"overflow and raise a :exc:`RuntimeError` exception, but certain patterns "
"could sidestep the checking and if you were unlucky Python could segfault. "
"Python 2.4's regular expression engine can match this pattern without "
"problems."
msgstr ""
"由於 Gustavo Niemeyer 的大量工作，:mod:`re` "
"模組也不再是遞迴的。在遞迴的正則表達式引擎中，某些模式會導致大量的 C "
"堆疊空間被消耗，並且有可能溢出堆疊。例如，如果您將一個 30000 "
"位元組的字串 ``a``與表達式“(a|b)+”進行匹配，則每個字元消耗一個堆疊幀。 Python "
"2.3 嘗試檢查堆疊溢出並引發 :exc:`RuntimeError` "
"例外，但某些模式可以避開檢查，如果你不走運，Python 可能會出現段錯誤。 Python "
"2.4 的正則表達式引擎可以毫無問題地匹配這種模式。"

#: ../../whatsnew/2.4.rst:1269
#, fuzzy
msgid ""
"The :mod:`signal` module now performs tighter error-checking on the "
"parameters to the :func:`signal.signal` function.  For example, you can't "
"set a handler on the :const:`SIGKILL` signal; previous versions of Python "
"would quietly accept this, but 2.4 will raise a :exc:`RuntimeError` "
"exception."
msgstr ""
":mod:`signal` 模組現在對 :func:`signal.signal` "
"函式的參數執行更嚴格的錯誤檢查。例如，您不能在 :const:`SIGKILL` "
"信號上設定處理程式；以前版本的 Python 會悄悄地接受這個，但是 2.4 會引發 "
":exc:`RuntimeError` 例外。"

#: ../../whatsnew/2.4.rst:1274
#, fuzzy
msgid ""
"Two new functions were added to the :mod:`socket` module. :func:`socketpair` "
"returns a pair of connected sockets and ``getservbyport(port)`` looks up the "
"service name for a given port number. (Contributed by Dave Cole and Barry "
"Warsaw.)"
msgstr ""
":mod:`socket` 模組中新增了兩個新函式。 :func:`socketpair` "
"回傳一對連接的 socket ，``getservbyport(port)`` 查找給定端口號的服務名稱。 （"
"由 Dave Cole 和 Barry Warsaw 提供。）"

#: ../../whatsnew/2.4.rst:1279
#, fuzzy
msgid ""
"The :func:`sys.exitfunc` function has been deprecated.  Code should be using "
"the existing :mod:`atexit` module, which correctly handles calling multiple "
"exit functions.  Eventually :func:`sys.exitfunc` will become a purely "
"internal interface, accessed only by :mod:`atexit`."
msgstr ""
":func:`sys.exitfunc` 函式已被棄用。程式碼應該使用現有的 :mod:`atexit` "
"模組，它可以正確處理呼叫多個退出函式。最終 :func:`sys.exitfunc` "
"將成為一個純粹的內部介面，只能通過 :mod:`atexit` 訪問。"

#: ../../whatsnew/2.4.rst:1284
#, fuzzy
msgid ""
"The :mod:`tarfile` module now generates GNU-format tar files by default. "
"(Contributed by Lars Gustäbel.)"
msgstr ":mod:`tarfile` 模組現在預設生成 GNU 格式的 tar 文件。 （由 Lars Gustäbel "
"提供。）"

#: ../../whatsnew/2.4.rst:1287
#, fuzzy
msgid ""
"The :mod:`threading` module now has an elegantly simple way to support "
"thread-local data.  The module contains a :class:`local` class whose "
"attribute values are local to different threads. ::"
msgstr ""
":mod:`threading` 模組現在有一種優雅簡單的方法來支援執行緒本地資料。"
"該模組包含一個 :class:`local` 類，其屬性值對於不同的執行緒是本地的。 ::"

#: ../../whatsnew/2.4.rst:1297
#, fuzzy
msgid ""
"Other threads can assign and retrieve their own values for the :attr:"
"`number` and :attr:`url` attributes.  You can subclass :class:`local` to "
"initialize attributes or to add methods. (Contributed by Jim Fulton.)"
msgstr ""
"其他執行緒可以為 :attr:`number` 和 :attr:`url` 屬性分配和檢索它們自己的值。"
"您可以繼承 :class:`local` 來初始化屬性或新增方法。 （由吉姆·富爾頓提供。）"

#: ../../whatsnew/2.4.rst:1301
#, fuzzy
msgid ""
"The :mod:`timeit` module now automatically disables periodic garbage "
"collection during the timing loop.  This change makes consecutive timings "
"more comparable.  (Contributed by Raymond Hettinger.)"
msgstr ":mod:`timeit` "
"模組現在會在計時循環期間自動禁用定期垃圾收集。此更改使連續計時更具可比性。 "
"（雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.4.rst:1305
#, fuzzy
msgid ""
"The :mod:`weakref` module now supports a wider variety of objects including "
"Python functions, class instances, sets, frozensets, deques, arrays, files, "
"sockets, and regular expression pattern objects. (Contributed by Raymond "
"Hettinger.)"
msgstr ""
":mod:`weakref` 模組現在支援更廣泛的物件，包括 Python 函式、類實例、集合、froz"
"ensets、雙端隊列、數組、文件、 socket 和正則表達式模式物件。 "
"（雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.4.rst:1310
#, fuzzy
msgid ""
"The :mod:`xmlrpclib` module now supports a multi-call extension for "
"transmitting multiple XML-RPC calls in a single HTTP operation. (Contributed "
"by Brian Quinlan.)"
msgstr ""
":mod:`xmlrpclib` 模組現在支援多呼叫擴充，用於在單個 HTTP 操作中傳輸多個 XML-"
"RPC 呼叫。 （由布賴恩·昆蘭提供。）"

#: ../../whatsnew/2.4.rst:1314
#, fuzzy
msgid ""
"The :mod:`mpz`, :mod:`rotor`, and :mod:`xreadlines` modules have  been "
"removed."
msgstr ":mod:`mpz`、:mod:`rotor` 和 :mod:`xreadlines` 模組已被刪除。"

#: ../../whatsnew/2.4.rst:1323
msgid "cookielib"
msgstr "cookielib"

#: ../../whatsnew/2.4.rst:1325
#, fuzzy
msgid ""
"The :mod:`cookielib` library supports client-side handling for HTTP cookies, "
"mirroring the :mod:`Cookie` module's server-side cookie support. Cookies are "
"stored in cookie jars; the library transparently stores cookies offered by "
"the web server in the cookie jar, and fetches the cookie from the jar when "
"connecting to the server. As in web browsers, policy objects control whether "
"cookies are accepted or not."
msgstr ""
":mod:`cookielib` 庫支援 HTTP cookie 的客戶端處理，鏡像 :mod:`Cookie` "
"模組的伺服器端 cookie 支援。餅乾儲存在餅乾罐中；該庫透明地將 Web "
"伺服器提供的 cookie 儲存在 cookie jar 中，並在連接到伺服器時從 jar 中獲取 "
"cookie。與在 Web 瀏覽器中一樣，策略物件控制是否接受 cookie。"

#: ../../whatsnew/2.4.rst:1332
#, fuzzy
msgid ""
"In order to store cookies across sessions, two implementations of cookie "
"jars are provided: one that stores cookies in the Netscape format so "
"applications can use the Mozilla or Lynx cookie files, and one that stores "
"cookies in the same format as the Perl libwww library."
msgstr ""
"為了跨會話儲存 cookie，提供了兩種 cookie jar 實作：一種以 Netscape 格式儲存 "
"cookie，以便應用程式可以使用 Mozilla 或 Lynx cookie 文件，另一種以與 Perl "
"libwww 庫相同的格式儲存 cookie。"

#: ../../whatsnew/2.4.rst:1337
#, fuzzy
msgid ""
":mod:`urllib2` has been changed to interact with :mod:`cookielib`: :class:"
"`HTTPCookieProcessor` manages a cookie jar that is used when accessing URLs."
msgstr ""
":mod:`urllib2` 已更改為與 :mod:`cookielib` 交互：:class:`HTTPCookieProcessor`"
" 管理訪問 URL 時使用的 cookie jar。"

#: ../../whatsnew/2.4.rst:1341
#, fuzzy
msgid "This module was contributed by John J. Lee."
msgstr "該模組由 John J. Lee 貢獻。"

#: ../../whatsnew/2.4.rst:1347
msgid "doctest"
msgstr "doctest"

#: ../../whatsnew/2.4.rst:1349
#, fuzzy
msgid ""
"The :mod:`doctest` module underwent considerable refactoring thanks to "
"Edward Loper and Tim Peters.  Testing can still be as simple as running :"
"func:`doctest.testmod`, but the refactorings allow customizing the module's "
"operation in various ways"
msgstr ""
"感謝 Edward Loper 和 Tim Peters，:mod:`doctest` 模組進行了大量重構。"
"測試仍然可以像運行 :func:`doctest.testmod` "
"一樣簡單，但是重構允許以各種方式自定義模組的操作"

#: ../../whatsnew/2.4.rst:1354
#, fuzzy
msgid ""
"The new :class:`DocTestFinder` class extracts the tests from a given  "
"object's docstrings::"
msgstr "新的 DocTestFinder 類從給定物件的文檔字串中提取測試："

#: ../../whatsnew/2.4.rst:1370
#, fuzzy
msgid ""
"The new :class:`DocTestRunner` class then runs individual tests and can "
"produce a summary of the results::"
msgstr "新的 :class:`DocTestRunner` 類然後運行單獨的測試並可以生成結果摘要::"

#: ../../whatsnew/2.4.rst:1379
#, fuzzy
msgid "The above example produces the following output::"
msgstr "上面的示例產生以下輸出："

#: ../../whatsnew/2.4.rst:1387
#, fuzzy
msgid ""
":class:`DocTestRunner` uses an instance of the :class:`OutputChecker` class "
"to compare the expected output with the actual output.  This class takes a "
"number of different flags that customize its behaviour; ambitious users can "
"also write a completely new subclass of :class:`OutputChecker`."
msgstr ""
":class:`DocTestRunner` 使用 :class:`OutputChecker` "
"類的實例將預期輸出與實際輸出進行比較。此類採用許多不同的旗標來自定義其行為；"
"雄心勃勃的使用者還可以編寫一個全新的 OutputChecker 子類別。"

#: ../../whatsnew/2.4.rst:1392
#, fuzzy
msgid ""
"The default output checker provides a number of handy features. For example, "
"with the :const:`doctest.ELLIPSIS` option flag, an ellipsis (``...``) in the "
"expected output matches any substring,  making it easier to accommodate "
"outputs that vary in minor ways::"
msgstr ""
"預設的輸出檢查器提供了許多方便的功能。例如，使用 :const:`doctest.ELLIPSIS` "
"選項旗標，預期輸出中的省略號 (``...``) "
"匹配任何子字串，從而更容易適應以細微方式變化的輸出::"

#: ../../whatsnew/2.4.rst:1403
#, fuzzy
msgid "Another special string, ``<BLANKLINE>``, matches a blank line::"
msgstr "另一個特殊的字串，``<BLANKLINE>``，匹配一個空行::"

#: ../../whatsnew/2.4.rst:1411
#, fuzzy
msgid ""
"Another new capability is producing a diff-style display of the output by "
"specifying the :const:`doctest.REPORT_UDIFF` (unified diffs), :const:"
"`doctest.REPORT_CDIFF` (context diffs), or :const:`doctest.REPORT_NDIFF` "
"(delta-style) option flags.  For example::"
msgstr ""
"另一個新功能是通過指定 doctest.REPORT_UDIFF（統一差異）、doctest."
"REPORT_CDIFF（上下文差異）或 doctest.REPORT_NDIFF "
"來生成差異樣式的輸出顯示`（增量樣式）選項旗標。例如：："

#: ../../whatsnew/2.4.rst:1427
#, fuzzy
msgid ""
"Running the above function's tests with :const:`doctest.REPORT_UDIFF` "
"specified, you get the following output:"
msgstr "使用指定的 :const:`doctest.REPORT_UDIFF` "
"運行上述函式的測試，您將獲得以下輸出："

#: ../../whatsnew/2.4.rst:1448
#, fuzzy
msgid "Build and C API Changes"
msgstr "構建和 C API 更改"

#: ../../whatsnew/2.4.rst:1450
#, fuzzy
msgid "Some of the changes to Python's build process and to the C API are:"
msgstr "Python 的構建過程和 C API 的一些變化是："

#: ../../whatsnew/2.4.rst:1452
#, fuzzy
msgid ""
"Three new convenience macros were added for common return values from "
"extension functions: :c:macro:`Py_RETURN_NONE`, :c:macro:`Py_RETURN_TRUE`, "
"and :c:macro:`Py_RETURN_FALSE`. (Contributed by Brett Cannon.)"
msgstr ""
"為擴充函式的常見回傳值新增了三個新的便利巨集：:c:macro:`Py_RETURN_NONE`、:c:m"
"acro:`Py_RETURN_TRUE` 和:c:macro:`Py_RETURN_FALSE`。 （由 Brett Cannon "
"提供。）"

#: ../../whatsnew/2.4.rst:1456
#, fuzzy
msgid ""
"Another new macro, :c:macro:`Py_CLEAR`,  decreases the reference count of "
"*obj* and sets *obj* to the null pointer.  (Contributed by Jim Fulton.)"
msgstr "另一個新巨集 :c:macro:`Py_CLEAR` 減少了 *obj* 的引用計數並將 *obj* "
"設定為空指標。 （由吉姆·富爾頓提供。）"

#: ../../whatsnew/2.4.rst:1459
#, fuzzy
msgid ""
"A new function, ``PyTuple_Pack(N, obj1, obj2, ..., objN)``, constructs "
"tuples from a variable length argument list of Python objects.  (Contributed "
"by Raymond Hettinger.)"
msgstr ""
"一個新函式，``PyTuple_Pack(N, obj1, obj2, ..., objN)``，從 Python "
"物件的可變長度參數列表構造元組。 （雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.4.rst:1463
#, fuzzy
msgid ""
"A new function, ``PyDict_Contains(d, k)``, implements fast dictionary "
"lookups without masking exceptions raised during the look-up process. "
"(Contributed by Raymond Hettinger.)"
msgstr "一個新函式，``PyDict_Contains(d, "
"k)``，實作了快速字典查找，而不屏蔽查找過程中引發的例外。 "
"（雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.4.rst:1467
#, fuzzy
msgid ""
"The :c:expr:`Py_IS_NAN(X)` macro returns 1 if  its float or double argument "
"*X* is a NaN.   (Contributed by Tim Peters.)"
msgstr "如果 :c:expr:`Py_IS_NAN(X)` 巨集的浮點數或雙精度參數 *X* 是 NaN，則巨集回傳 "
"1。 （由蒂姆·彼得斯提供。）"

#: ../../whatsnew/2.4.rst:1470
#, fuzzy
msgid ""
"C code can avoid unnecessary locking by using the new :c:func:"
"`PyEval_ThreadsInitialized` function to tell  if any thread operations have "
"been performed.  If this function  returns false, no lock operations are "
"needed. (Contributed by Nick Coghlan.)"
msgstr ""
"C 程式碼可以通過使用新的:c:func:`PyEval_ThreadsInitialized` "
"函式來判斷是否執行了任何執行緒操作，從而避免不必要的鎖定。如果此函式回傳 "
"false，則不需要鎖定操作。 （由尼克·科格蘭提供。）"

#: ../../whatsnew/2.4.rst:1475
#, fuzzy
msgid ""
"A new function, :c:func:`PyArg_VaParseTupleAndKeywords`, is the same as :c:"
"func:`PyArg_ParseTupleAndKeywords` but takes a  :c:type:`va_list` instead of "
"a number of arguments. (Contributed by Greg Chapman.)"
msgstr ""
"新函式 PyArg_VaParseTupleAndKeywords 與 PyArg_ParseTupleAndKeywords 相同，"
"但採用 va_list 而不是多個參數。 （由格雷格·查普曼提供。）"

#: ../../whatsnew/2.4.rst:1479
#, fuzzy
msgid ""
"A new method flag, :const:`METH_COEXISTS`, allows a function defined in "
"slots to co-exist with a :c:type:`PyCFunction` having the same name.  This "
"can halve the access time for a method such as :meth:`set.__contains__`.  "
"(Contributed by Raymond Hettinger.)"
msgstr ""
"新方法旗標 :const:`METH_COEXISTS` 允許在槽中定義的函式與具有相同名稱的 "
":c:type:`PyCFunction` 共存。這可以將諸如 set.__contains__ "
"之類的方法的訪問時間減半。 （雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.4.rst:1484
#, fuzzy
msgid ""
"Python can now be built with additional profiling for the interpreter "
"itself, intended as an aid to people developing the Python core.  Providing :"
"option:`!--enable-profiling` to the :program:`configure` script will let you "
"profile the interpreter with :program:`gprof`, and providing the :option:`!--"
"with-tsc` switch enables profiling using the Pentium's Time-Stamp-Counter "
"register.  Note that the :option:`!--with-tsc` switch is slightly misnamed, "
"because the profiling feature also works on the PowerPC platform, though "
"that processor architecture doesn't call that register \"the TSC register"
"\".  (Contributed by Jeremy Hylton.)"
msgstr ""
"Python 現在可以通過對直譯器本身的額外分析來構建，旨在幫助人們開發 Python "
"核心。為 :program:`configure` 腳本提供 :option:`!--enable-profiling` "
"將使您可以使用 :program:`gprof` 分析直譯器，並提供 :option:`!--with-tsc` "
"開關使用奔騰的時間戳計數器寄存器啟用分析。請注意，:option:`!--with-tsc` "
"開關的名稱略有誤，因為分析功能也適用於 PowerPC "
"平台，儘管該處理器架構不稱該寄存器為“TSC 寄存器”。 （由傑里米·希爾頓提供。）"

#: ../../whatsnew/2.4.rst:1494
#, fuzzy
msgid ""
"The :c:type:`tracebackobject` type has been renamed to :c:type:"
"`PyTracebackObject`."
msgstr ":c:type:`tracebackobject` 型別已重命名為 :c:type:`PyTracebackObject`。"

#: ../../whatsnew/2.4.rst:1501
#, fuzzy
msgid "Port-Specific Changes"
msgstr "特定於端口的更改"

#: ../../whatsnew/2.4.rst:1503
#, fuzzy
msgid ""
"The Windows port now builds under MSVC++ 7.1 as well as version 6. "
"(Contributed by Martin von Löwis.)"
msgstr "Windows 端口現在在 MSVC++ 7.1 和版本 6 下構建。（由 Martin von Löwis 提供。）"

#: ../../whatsnew/2.4.rst:1510
#, fuzzy
msgid "Porting to Python 2.4"
msgstr "移植到 Python 2.4"

#: ../../whatsnew/2.4.rst:1512
#, fuzzy
msgid ""
"This section lists previously described changes that may require changes to "
"your code:"
msgstr "本部分列出了之前描述的可能需要更改程式碼的更改："

#: ../../whatsnew/2.4.rst:1515
#, fuzzy
msgid ""
"Left shifts and hexadecimal/octal constants that are too  large no longer "
"trigger a :exc:`FutureWarning` and return  a value limited to 32 or 64 bits; "
"instead they return a long integer."
msgstr "太大的左移和十六進位/八進位常數不再觸發 FutureWarning 並回傳限制為 32 或 64 "
"位的值；相反，他們回傳一個長整數。"

#: ../../whatsnew/2.4.rst:1522
#, fuzzy
msgid ""
"The :func:`zip` built-in function and :func:`itertools.izip` now return  an "
"empty list instead of raising a :exc:`TypeError` exception if called with no "
"arguments."
msgstr ""
":func:`zip` 內建函式和 :func:`itertools.izip` 現在回傳一個空列表，"
"而不是在不帶參數呼叫時引發 :exc:`TypeError` 例外。"

#: ../../whatsnew/2.4.rst:1526
#, fuzzy
msgid ""
"You can no longer compare the :class:`date` and :class:`~datetime.datetime` "
"instances provided by the :mod:`datetime` module.  Two  instances of "
"different classes will now always be unequal, and  relative comparisons "
"(``<``, ``>``) will raise a :exc:`TypeError`."
msgstr ""
"您不能再比較 datetime 模組提供的 :class:`date` 和 :class:`~datetime.datetime`"
" 實例。不同類的兩個實例現在將始終不相等，並且相對比較（``<``、``>``）將引發 "
":exc:`TypeError`。"

#: ../../whatsnew/2.4.rst:1531
#, fuzzy
msgid ""
":func:`dircache.listdir` now passes exceptions to the caller instead of "
"returning empty lists."
msgstr ":func:`dircache.listdir` 現在將例外傳遞給呼叫者，而不是回傳空列表。"

#: ../../whatsnew/2.4.rst:1534
#, fuzzy
msgid ""
":func:`LexicalHandler.startDTD` used to receive the public and system IDs in "
"the wrong order.  This has been corrected; applications relying on the wrong "
"order need to be fixed."
msgstr ""
":func:`LexicalHandler.startDTD` 用於以錯誤的順序接收公開 ID 和系統 "
"ID。這已得到糾正；依賴錯誤順序的應用程式需要修復。"

#: ../../whatsnew/2.4.rst:1538
#, fuzzy
msgid ""
":func:`fcntl.ioctl` now warns if the *mutate*  argument is omitted and "
"relevant."
msgstr ":func:`fcntl.ioctl` 現在會在 *mutate* 參數被省略和相關時發出警告。"

#: ../../whatsnew/2.4.rst:1541
#, fuzzy
msgid ""
"The :mod:`tarfile` module now generates GNU-format tar files by default."
msgstr ":mod:`tarfile` 模組現在預設生成 GNU 格式的 tar 文件。"

#: ../../whatsnew/2.4.rst:1543
#, fuzzy
msgid ""
"Encountering a failure while importing a module no longer leaves a partially "
"initialized module object in ``sys.modules``."
msgstr "匯入模組時遇到失敗不再在 sys.modules 中留下部分初始化的模組物件。"

#: ../../whatsnew/2.4.rst:1546
#, fuzzy
msgid ""
":const:`None` is now a constant; code that binds a new value to  the name "
"``None`` is now a syntax error."
msgstr ":const:`None` 現在是常數；將新值綁定到名稱 ``None``的程式碼現在是語法錯誤。"

#: ../../whatsnew/2.4.rst:1549
#, fuzzy
msgid ""
"The :func:`signals.signal` function now raises a :exc:`RuntimeError` "
"exception for certain illegal values; previously these errors would pass "
"silently.  For example, you can no longer set a handler on the :const:"
"`SIGKILL` signal."
msgstr ""
":func:`signals.signal` 函式現在針對某些非法值引發 :exc:`RuntimeError` "
"例外；以前這些錯誤會悄無聲息地過去。例如，您不能再在 :const:`SIGKILL` "
"信號上設定處理程式。"

#: ../../whatsnew/2.4.rst:1559
msgid "Acknowledgements"
msgstr "致謝"

#: ../../whatsnew/2.4.rst:1561
#, fuzzy
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this article: "
"Koray Can, Hye-Shik Chang, Michael Dyck, Raymond Hettinger, Brian Hurt, "
"Hamish Lawson, Fredrik Lundh, Sean Reifschneider, Sadruddin Rejeb."
msgstr ""
"作者要感謝以下人員對本文的各種草稿提出的建議、更正和幫助：Koray Can、Hye-"
"Shik Chang、Michael Dyck、Raymond Hettinger、Brian Hurt、Hamish Lawson、"
"Fredrik Lundh、Sean Reifschneider、Sadruddin拒絕。"
