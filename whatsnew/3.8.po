# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-31 08:13+0000\n"
"PO-Revision-Date: 2023-05-02 16:26+0800\n"
"Last-Translator: Matt Wang <mattwang44@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.2.2\n"

#: ../../whatsnew/3.8.rst:3
msgid "What's New In Python 3.8"
msgstr "Python 3.8 有什麼新功能"

#: ../../whatsnew/3.8.rst:0
msgid "Editor"
msgstr "編輯者"

#: ../../whatsnew/3.8.rst:45
msgid "Raymond Hettinger"
msgstr "Raymond Hettinger"

#: ../../whatsnew/3.8.rst:47
#, fuzzy
msgid ""
"This article explains the new features in Python 3.8, compared to 3.7. "
"Python 3.8 was released on October 14, 2019. For full details, see the :ref:"
"`changelog <changelog>`."
msgstr ""
"本文介紹了 Python 3.8 與 3.7 相比的新功能。 Python 3.8 於 2019 年 10 月 14 日"
"發布。有關完整詳細資訊，請參閱 :ref:`changelog <changelog>`。"

#: ../../whatsnew/3.8.rst:61
#, fuzzy
msgid "Summary -- Release highlights"
msgstr "總結——發布亮點"

#: ../../whatsnew/3.8.rst:72
#, fuzzy
msgid "New Features"
msgstr "新功能"

#: ../../whatsnew/3.8.rst:75
#, fuzzy
msgid "Assignment expressions"
msgstr "賦值表達式"

#: ../../whatsnew/3.8.rst:77
#, fuzzy
msgid ""
"There is new syntax ``:=`` that assigns values to variables as part of a "
"larger expression. It is affectionately known as \"the walrus operator\" due "
"to its resemblance to `the eyes and tusks of a walrus <https://en.wikipedia."
"org/wiki/Walrus#/media/File:Pacific_Walrus_-_Bull_(8247646168).jpg>`_."
msgstr ""
"有一種新的語法 ``:=`` 可以將值賦給變數作為更大表達式的一部分。它被親切地稱"
"為“海像操作員”，因為它類似於海象的“眼睛和象牙” <https://en.wikipedia.org/"
"wiki/Walrus#/media/File:Pacific_Walrus_-_Bull_(8247646168)。 jpg>`_。"

#: ../../whatsnew/3.8.rst:82
#, fuzzy
msgid ""
"In this example, the assignment expression helps avoid calling :func:`len` "
"twice::"
msgstr "在此示例中，賦值表達式有助於避免兩次呼叫 :func:`len`::"

#: ../../whatsnew/3.8.rst:88
#, fuzzy
msgid ""
"A similar benefit arises during regular expression matching where match "
"objects are needed twice, once to test whether a match occurred and another "
"to extract a subgroup::"
msgstr ""
"在正則表達式匹配期間會出現類似的好處，其中兩次需要匹配物件，一次是測試是否發"
"生匹配，另一次是提取子組::"

#: ../../whatsnew/3.8.rst:96
#, fuzzy
msgid ""
"The operator is also useful with while-loops that compute a value to test "
"loop termination and then need that same value again in the body of the "
"loop::"
msgstr ""
"該運算符對於 while 循環也很有用，while 循環計算一個值來測試循環終止，然後在循"
"環體中再次需要相同的值::"

#: ../../whatsnew/3.8.rst:104
#, fuzzy
msgid ""
"Another motivating use case arises in list comprehensions where a value "
"computed in a filtering condition is also needed in the expression body::"
msgstr ""
"另一個激勵用例出現在列表理解中，其中表達式主體中也需要在過濾條件中計算的值::"

#: ../../whatsnew/3.8.rst:111
#, fuzzy
msgid ""
"Try to limit use of the walrus operator to clean cases that reduce "
"complexity and improve readability."
msgstr "嘗試限制海象運算符的使用來清理降低複雜性和提高可讀性的案例。"

#: ../../whatsnew/3.8.rst:114
msgid "See :pep:`572` for a full description."
msgstr "完整敘述請見 :pep:`572`\\ 。"

#: ../../whatsnew/3.8.rst:116
#, fuzzy
msgid "(Contributed by Emily Morehouse in :issue:`35224`.)"
msgstr "（由 Emily Morehouse 在 :issue:`35224` 中貢獻。）"

#: ../../whatsnew/3.8.rst:120
#, fuzzy
msgid "Positional-only parameters"
msgstr "僅位置參數"

#: ../../whatsnew/3.8.rst:122
#, fuzzy
msgid ""
"There is a new function parameter syntax ``/`` to indicate that some "
"function parameters must be specified positionally and cannot be used as "
"keyword arguments.  This is the same notation shown by ``help()`` for C "
"functions annotated with Larry Hastings' :ref:`Argument Clinic <howto-"
"clinic>` tool."
msgstr ""
"有一個新的函式參數語法``/`` 來指示某些函式參數必須按位置指定並且不能用作關鍵"
"字參數。對於使用 Larry Hastings :ref:`Argument Clinic <howto-clinic>` 工具註"
"釋的 C 函式，這與 ``help()`` 顯示的符號相同。"

#: ../../whatsnew/3.8.rst:128
#, fuzzy
msgid ""
"In the following example, parameters *a* and *b* are positional-only, while "
"*c* or *d* can be positional or keyword, and *e* or *f* are required to be "
"keywords::"
msgstr ""
"在下面的示例中，參數 *a* 和 *b* 是僅位置參數，而 *c* 或 *d* 可以是位置參數或"
"關鍵字，而 *e* 或 *f* 必須是關鍵字："

#: ../../whatsnew/3.8.rst:135
#, fuzzy
msgid "The following is a valid call::"
msgstr "以下是有效呼叫::"

#: ../../whatsnew/3.8.rst:139
#, fuzzy
msgid "However, these are invalid calls::"
msgstr "但是，這些是無效呼叫::"

#: ../../whatsnew/3.8.rst:144
#, fuzzy
msgid ""
"One use case for this notation is that it allows pure Python functions to "
"fully emulate behaviors of existing C coded functions.  For example, the "
"built-in :func:`divmod` function does not accept keyword arguments::"
msgstr ""
"這種表示法的一個用例是它允許純 Python 函式完全模擬現有 C 編碼函式的行為。例"
"如，內建的 :func:`divmod` 函式不接受關鍵字參數::"

#: ../../whatsnew/3.8.rst:152
#, fuzzy
msgid ""
"Another use case is to preclude keyword arguments when the parameter name is "
"not helpful.  For example, the builtin :func:`len` function has the "
"signature ``len(obj, /)``.  This precludes awkward calls such as::"
msgstr ""
"另一個用例是在參數名稱沒有幫助時排除關鍵字參數。例如，內建的 :func:`len` 函式"
"具有簽名 ``len(obj, /)``。這排除了尷尬的呼叫，例如："

#: ../../whatsnew/3.8.rst:158
#, fuzzy
msgid ""
"A further benefit of marking a parameter as positional-only is that it "
"allows the parameter name to be changed in the future without risk of "
"breaking client code.  For example, in the :mod:`statistics` module, the "
"parameter name *dist* may be changed in the future.  This was made possible "
"with the following function specification::"
msgstr ""
"將參數標記為僅位置參數的另一個好處是，它允許在將來更改參數名稱而不會有破壞客"
"戶端程式碼的風險。例如，在 :mod:`statistics` 模組中，參數名稱 *dist* 將來可能"
"會更改。這是通過以下功能規範實作的："

#: ../../whatsnew/3.8.rst:167
#, fuzzy
msgid ""
"Since the parameters to the left of ``/`` are not exposed as possible "
"keywords, the parameters names remain available for use in ``**kwargs``::"
msgstr ""
"由於 ``/`` 左側的參數未作為可能的關鍵字公開，因此參數名稱仍可用於 "
"``**kwargs``::"

#: ../../whatsnew/3.8.rst:176
#, fuzzy
msgid ""
"This greatly simplifies the implementation of functions and methods that "
"need to accept arbitrary keyword arguments.  For example, here is an excerpt "
"from code in the :mod:`collections` module::"
msgstr ""
"這大大簡化了需要接受任意關鍵字參數的函式和方法的實作。例如，這裡是 :mod:"
"`collections` 模組中程式碼的摘錄："

#: ../../whatsnew/3.8.rst:185
msgid "See :pep:`570` for a full description."
msgstr "完整敘述請見 :pep:`570`\\ 。"

#: ../../whatsnew/3.8.rst:187
#, fuzzy
msgid "(Contributed by Pablo Galindo in :issue:`36540`.)"
msgstr "（由 Pablo Galindo 在 :issue:`36540` 中貢獻。）"

#: ../../whatsnew/3.8.rst:193
#, fuzzy
msgid "Parallel filesystem cache for compiled bytecode files"
msgstr "編譯位元組碼文件的並行文件系統快取"

#: ../../whatsnew/3.8.rst:195
#, fuzzy
msgid ""
"The new :envvar:`PYTHONPYCACHEPREFIX` setting (also available as :option:`-"
"X` ``pycache_prefix``) configures the implicit bytecode cache to use a "
"separate parallel filesystem tree, rather than the default ``__pycache__`` "
"subdirectories within each source directory."
msgstr ""
"新的 :envvar:`PYTHONPYCACHEPREFIX` 設定（也可用作 :option:`-X` "
"``pycache_prefix``）將隱式位元組碼快取配置為使用單獨的並行文件系統樹，而不是"
"預設的 ``__pycache__`` 子目錄每個源目錄。"

#: ../../whatsnew/3.8.rst:201
#, fuzzy
msgid ""
"The location of the cache is reported in :data:`sys.pycache_prefix` (:const:"
"`None` indicates the default location in ``__pycache__`` subdirectories)."
msgstr ""
"快取的位置在 :data:`sys.pycache_prefix` 中報告（:const:`None` 表示在 "
"``__pycache__`` 子目錄中的預設位置）。"

#: ../../whatsnew/3.8.rst:205
#, fuzzy
msgid "(Contributed by Carl Meyer in :issue:`33499`.)"
msgstr "（由 Carl Meyer 在 :issue:`33499` 中貢獻。）"

#: ../../whatsnew/3.8.rst:209
#, fuzzy
msgid "Debug build uses the same ABI as release build"
msgstr "除錯構建使用與發布構建相同的 ABI"

#: ../../whatsnew/3.8.rst:211
#, fuzzy
msgid ""
"Python now uses the same ABI whether it's built in release or debug mode. On "
"Unix, when Python is built in debug mode, it is now possible to load C "
"extensions built in release mode and C extensions built using the stable ABI."
msgstr ""
"Python 現在使用相同的 ABI，無論它是在發布模式還是除錯模式下構建的。在 Unix "
"上，當 Python 在除錯模式下構建時，現在可以加載在發布模式下構建的 C 擴充和使用"
"穩定 ABI 構建的 C 擴充。"

#: ../../whatsnew/3.8.rst:215
#, fuzzy
msgid ""
"Release builds and :ref:`debug builds <debug-build>` are now ABI compatible: "
"defining the ``Py_DEBUG`` macro no longer implies the ``Py_TRACE_REFS`` "
"macro, which introduces the only ABI incompatibility. The ``Py_TRACE_REFS`` "
"macro, which adds the :func:`sys.getobjects` function and the :envvar:"
"`PYTHONDUMPREFS` environment variable, can be set using the new :option:`./"
"configure --with-trace-refs <--with-trace-refs>` build option. (Contributed "
"by Victor Stinner in :issue:`36465`.)"
msgstr ""
"發布版本和 :ref:`除錯版本 <debug-build>` 現在是 ABI 相容的：定義 "
"``Py_DEBUG`` 巨集不再暗示 ``Py_TRACE_REFS`` 巨集，它引入了唯一的 ABI 不相容"
"性。 ``Py_TRACE_REFS`` 巨集新增了 sys.getobjects 函式和 :envvar:"
"`PYTHONDUMPREFS` 環境變數，可以使用新的 :option:`./configure --with-trace- 進"
"行設定refs <--with-trace-refs>` 構建選項。 （由 Victor Stinner 在 :issue:"
"`36465` 中貢獻。）"

#: ../../whatsnew/3.8.rst:223
#, fuzzy
msgid ""
"On Unix, C extensions are no longer linked to libpython except on Android "
"and Cygwin. It is now possible for a statically linked Python to load a C "
"extension built using a shared library Python. (Contributed by Victor "
"Stinner in :issue:`21536`.)"
msgstr ""
"在 Unix 上，C 擴充不再鏈接到 libpython，但在 Android 和 Cygwin 上除外。現在，"
"靜態鏈接的 Python 可以加載使用共享庫 Python 構建的 C 擴充。 （由 Victor "
"Stinner 在 :issue:`21536` 中貢獻。）"

#: ../../whatsnew/3.8.rst:230
#, fuzzy
msgid ""
"On Unix, when Python is built in debug mode, import now also looks for C "
"extensions compiled in release mode and for C extensions compiled with the "
"stable ABI. (Contributed by Victor Stinner in :issue:`36722`.)"
msgstr ""
"在 Unix 上，當 Python 在除錯模式下構建時，import 現在還會查找在發布模式下編譯"
"的 C 擴充以及使用穩定 ABI 編譯的 C 擴充。 （由 Victor Stinner 在 :issue:"
"`36722` 中貢獻。）"

#: ../../whatsnew/3.8.rst:235
#, fuzzy
msgid ""
"To embed Python into an application, a new ``--embed`` option must be passed "
"to ``python3-config --libs --embed`` to get ``-lpython3.8`` (link the "
"application to libpython). To support both 3.8 and older, try ``python3-"
"config --libs --embed`` first and fallback to ``python3-config --libs`` "
"(without ``--embed``) if the previous command fails."
msgstr ""
"要將 Python 嵌入到應用程式中，必須將新的 ``--embed`` 選項傳遞給“python3-"
"config --libs --embed”以獲取“-lpython3.8”（將應用程式鏈接到 libpython ).要同"
"時支援 3.8 和更早版本，請先嘗試 ``python3-config --libs --embed``，如果前一個"
"命令失敗，則回退到 ``python3-config --libs``（沒有 ``--embed``） ."

#: ../../whatsnew/3.8.rst:241
#, fuzzy
msgid ""
"Add a pkg-config ``python-3.8-embed`` module to embed Python into an "
"application: ``pkg-config python-3.8-embed --libs`` includes ``-"
"lpython3.8``. To support both 3.8 and older, try ``pkg-config python-X.Y-"
"embed --libs`` first and fallback to ``pkg-config python-X.Y --libs`` "
"(without ``--embed``) if the previous command fails (replace ``X.Y`` with "
"the Python version)."
msgstr ""
"新增 pkg-config ``python-3.8-embed`` 模組以將 Python 嵌入到應用程式中：``pkg-"
"config python-3.8-embed --libs`` 包括 ``-lpython3.8``。要同時支援 3.8 和更早"
"版本，請先嘗試 ``pkg-config python-X.Y-embed --libs``，然後回退到 ``pkg-"
"config python-X.Y --libs``（沒有 ``--embed``）如果之前的命令失敗（將 ``X.Y`` "
"替換為 Python 版本）。"

#: ../../whatsnew/3.8.rst:247
#, fuzzy
msgid ""
"On the other hand, ``pkg-config python3.8 --libs`` no longer contains ``-"
"lpython3.8``. C extensions must not be linked to libpython (except on "
"Android and Cygwin, whose cases are handled by the script); this change is "
"backward incompatible on purpose. (Contributed by Victor Stinner in :issue:"
"`36721`.)"
msgstr ""
"另一方面，``pkg-config python3.8 --libs`` 不再包含``-lpython3.8``。 C 擴充不"
"得鏈接到 libpython（Android 和 Cygwin 除外，它們的情況由腳本處理）；此更改是"
"故意向後不相容的。 （由 Victor Stinner 在 :issue:`36721` 中貢獻。）"

#: ../../whatsnew/3.8.rst:256
#, fuzzy
msgid "f-strings support ``=`` for self-documenting expressions and debugging"
msgstr "f-strings 支援 ``=`` 用於自記錄表達式和除錯"

#: ../../whatsnew/3.8.rst:258
#, fuzzy
msgid ""
"Added an ``=`` specifier to :term:`f-string`\\s. An f-string such as "
"``f'{expr=}'`` will expand to the text of the expression, an equal sign, "
"then the representation of the evaluated expression.  For example:"
msgstr ""
"為 :term:`f-string`\\s 新增了一個 ``=`` 說明符。諸如``f'{expr=}'`` 的 f-"
"string 將擴充為表達式的文本、等號，然後是計算表達式的表示。例如："

#: ../../whatsnew/3.8.rst:267
#, fuzzy
msgid ""
"The usual :ref:`f-string format specifiers <f-strings>` allow more control "
"over how the result of the expression is displayed::"
msgstr ""
"通常的 :ref:`f-string 格式說明符 <f-strings>` 允許更多地控制表達式結果的顯示"
"方式::"

#: ../../whatsnew/3.8.rst:274
#, fuzzy
msgid ""
"The ``=`` specifier will display the whole expression so that calculations "
"can be shown::"
msgstr "``=`` 說明符將顯示整個表達式，以便顯示計算結果::"

#: ../../whatsnew/3.8.rst:280
#, fuzzy
msgid "(Contributed by Eric V. Smith and Larry Hastings in :issue:`36817`.)"
msgstr "（由 Eric V. Smith 和 Larry Hastings 在 :issue:`36817` 中貢獻。）"

#: ../../whatsnew/3.8.rst:284
#, fuzzy
msgid "PEP 578: Python Runtime Audit Hooks"
msgstr "PEP 578：Python 運行時審計掛鉤"

#: ../../whatsnew/3.8.rst:286
#, fuzzy
msgid ""
"The PEP adds an Audit Hook and Verified Open Hook. Both are available from "
"Python and native code, allowing applications and frameworks written in pure "
"Python code to take advantage of extra notifications, while also allowing "
"embedders or system administrators to deploy builds of Python where auditing "
"is always enabled."
msgstr ""
"PEP 新增了一個 Audit Hook 和 Verified Open Hook。兩者都可以從 Python 和本機程"
"式碼獲得，允許用純 Python 程式碼編寫的應用程式和框架利用額外的通知，同時還允"
"許嵌入者或系統管理員部署始終啟用審計的 Python 版本。"

#: ../../whatsnew/3.8.rst:292
msgid "See :pep:`578` for full details."
msgstr "完整細節請見 :pep:`578`\\ 。"

#: ../../whatsnew/3.8.rst:296
#, fuzzy
msgid "PEP 587: Python Initialization Configuration"
msgstr "PEP 587：Python 初始化配置"

#: ../../whatsnew/3.8.rst:298
#, fuzzy
msgid ""
"The :pep:`587` adds a new C API to configure the Python Initialization "
"providing finer control on the whole configuration and better error "
"reporting."
msgstr ""
":pep:`587` 新增了一個新的 C API 來配置 Python 初始化，從而更好地控制整個配置"
"和更好的錯誤報告。"

#: ../../whatsnew/3.8.rst:301
#, fuzzy
msgid "New structures:"
msgstr "新結構："

#: ../../whatsnew/3.8.rst:303
msgid ":c:type:`PyConfig`"
msgstr ":c:type:`PyConfig`"

#: ../../whatsnew/3.8.rst:304
msgid ":c:type:`PyPreConfig`"
msgstr ":c:type:`PyPreConfig`"

#: ../../whatsnew/3.8.rst:305
msgid ":c:type:`PyStatus`"
msgstr ":c:type:`PyStatus`"

#: ../../whatsnew/3.8.rst:306
msgid ":c:type:`PyWideStringList`"
msgstr ":c:type:`PyWideStringList`"

#: ../../whatsnew/3.8.rst:308
#, fuzzy
msgid "New functions:"
msgstr "新功能："

#: ../../whatsnew/3.8.rst:310
msgid ":c:func:`PyConfig_Clear`"
msgstr ":c:func:`PyConfig_Clear`"

#: ../../whatsnew/3.8.rst:311
msgid ":c:func:`PyConfig_InitIsolatedConfig`"
msgstr ":c:func:`PyConfig_InitIsolatedConfig`"

#: ../../whatsnew/3.8.rst:312
msgid ":c:func:`PyConfig_InitPythonConfig`"
msgstr ":c:func:`PyConfig_InitPythonConfig`"

#: ../../whatsnew/3.8.rst:313
msgid ":c:func:`PyConfig_Read`"
msgstr ":c:func:`PyConfig_Read`"

#: ../../whatsnew/3.8.rst:314
msgid ":c:func:`PyConfig_SetArgv`"
msgstr ":c:func:`PyConfig_SetArgv`"

#: ../../whatsnew/3.8.rst:315
msgid ":c:func:`PyConfig_SetBytesArgv`"
msgstr ":c:func:`PyConfig_SetBytesArgv`"

#: ../../whatsnew/3.8.rst:316
msgid ":c:func:`PyConfig_SetBytesString`"
msgstr ":c:func:`PyConfig_SetBytesString`"

#: ../../whatsnew/3.8.rst:317
msgid ":c:func:`PyConfig_SetString`"
msgstr ":c:func:`PyConfig_SetString`"

#: ../../whatsnew/3.8.rst:318
msgid ":c:func:`PyPreConfig_InitIsolatedConfig`"
msgstr ":c:func:`PyPreConfig_InitIsolatedConfig`"

#: ../../whatsnew/3.8.rst:319
msgid ":c:func:`PyPreConfig_InitPythonConfig`"
msgstr ":c:func:`PyPreConfig_InitPythonConfig`"

#: ../../whatsnew/3.8.rst:320
msgid ":c:func:`PyStatus_Error`"
msgstr ":c:func:`PyStatus_Error`"

#: ../../whatsnew/3.8.rst:321
msgid ":c:func:`PyStatus_Exception`"
msgstr ":c:func:`PyStatus_Exception`"

#: ../../whatsnew/3.8.rst:322
msgid ":c:func:`PyStatus_Exit`"
msgstr ":c:func:`PyStatus_Exit`"

#: ../../whatsnew/3.8.rst:323
msgid ":c:func:`PyStatus_IsError`"
msgstr ":c:func:`PyStatus_IsError`"

#: ../../whatsnew/3.8.rst:324
msgid ":c:func:`PyStatus_IsExit`"
msgstr ":c:func:`PyStatus_IsExit`"

#: ../../whatsnew/3.8.rst:325
msgid ":c:func:`PyStatus_NoMemory`"
msgstr ":c:func:`PyStatus_NoMemory`"

#: ../../whatsnew/3.8.rst:326
msgid ":c:func:`PyStatus_Ok`"
msgstr ":c:func:`PyStatus_Ok`"

#: ../../whatsnew/3.8.rst:327
msgid ":c:func:`PyWideStringList_Append`"
msgstr ":c:func:`PyWideStringList_Append`"

#: ../../whatsnew/3.8.rst:328
msgid ":c:func:`PyWideStringList_Insert`"
msgstr ":c:func:`PyWideStringList_Insert`"

#: ../../whatsnew/3.8.rst:329
msgid ":c:func:`Py_BytesMain`"
msgstr ":c:func:`Py_BytesMain`"

#: ../../whatsnew/3.8.rst:330
msgid ":c:func:`Py_ExitStatusException`"
msgstr ":c:func:`Py_ExitStatusException`"

#: ../../whatsnew/3.8.rst:331
msgid ":c:func:`Py_InitializeFromConfig`"
msgstr ":c:func:`Py_InitializeFromConfig`"

#: ../../whatsnew/3.8.rst:332
msgid ":c:func:`Py_PreInitialize`"
msgstr ":c:func:`Py_PreInitialize`"

#: ../../whatsnew/3.8.rst:333
msgid ":c:func:`Py_PreInitializeFromArgs`"
msgstr ":c:func:`Py_PreInitializeFromArgs`"

#: ../../whatsnew/3.8.rst:334
msgid ":c:func:`Py_PreInitializeFromBytesArgs`"
msgstr ":c:func:`Py_PreInitializeFromBytesArgs`"

#: ../../whatsnew/3.8.rst:335
msgid ":c:func:`Py_RunMain`"
msgstr ":c:func:`Py_RunMain`"

#: ../../whatsnew/3.8.rst:337
#, fuzzy
msgid ""
"This PEP also adds ``_PyRuntimeState.preconfig`` (:c:type:`PyPreConfig` "
"type) and ``PyInterpreterState.config`` (:c:type:`PyConfig` type) fields to "
"these internal structures. ``PyInterpreterState.config`` becomes the new "
"reference configuration, replacing global configuration variables and other "
"private variables."
msgstr ""
"此 PEP 還將 ``_PyRuntimeState.preconfig``（:c:type:`PyPreConfig` 型別）和 "
"``PyInterpreterState.config``（:c:type:`PyConfig` 型別）欄位新增到這些內部結"
"構。 ``PyInterpreterState.config`` 成為新的參考配置，取代了全局配置變數和其他"
"私有變數。"

#: ../../whatsnew/3.8.rst:343
#, fuzzy
msgid ""
"See :ref:`Python Initialization Configuration <init-config>` for the "
"documentation."
msgstr "有關文檔，請參閱 :ref:`Python 初始化配置 <init-config>`。"

#: ../../whatsnew/3.8.rst:346
msgid "See :pep:`587` for a full description."
msgstr "完整敘述請見 :pep:`587`\\ 。"

#: ../../whatsnew/3.8.rst:348
#, fuzzy
msgid "(Contributed by Victor Stinner in :issue:`36763`.)"
msgstr "（由 Victor Stinner 在 :issue:`36763` 中貢獻。）"

#: ../../whatsnew/3.8.rst:352
#, fuzzy
msgid "PEP 590: Vectorcall: a fast calling protocol for CPython"
msgstr "PEP 590：Vectorcall：CPython 的快速呼叫協定"

#: ../../whatsnew/3.8.rst:354
#, fuzzy
msgid ""
":ref:`vectorcall` is added to the Python/C API. It is meant to formalize "
"existing optimizations which were already done for various classes. Any :ref:"
"`static type <static-types>` implementing a callable can use this protocol."
msgstr ""
":ref:`vectorcall` 新增到 Python/C API。它旨在形式化已經為各種類完成的現有最佳"
"化。任何實作可呼叫物件的靜態型別 <static-types> 都可以使用此協定。"

#: ../../whatsnew/3.8.rst:360
#, fuzzy
msgid ""
"This is currently provisional. The aim is to make it fully public in Python "
"3.9."
msgstr "目前這是臨時的。目的是使其在 Python 3.9 中完全公開。"

#: ../../whatsnew/3.8.rst:363
msgid "See :pep:`590` for a full description."
msgstr "完整敘述請見 :pep:`590`\\ 。"

#: ../../whatsnew/3.8.rst:365
#, fuzzy
msgid ""
"(Contributed by Jeroen Demeyer, Mark Shannon and Petr Viktorin in :issue:"
"`36974`.)"
msgstr ""
"（由 Jeroen Demeyer、Mark Shannon 和 Petr Viktorin 在 :issue:`36974` 中貢"
"獻。）"

#: ../../whatsnew/3.8.rst:369
#, fuzzy
msgid "Pickle protocol 5 with out-of-band data buffers"
msgstr "帶有帶外資料緩衝區的 Pickle 協定 5"

#: ../../whatsnew/3.8.rst:371
#, fuzzy
msgid ""
"When :mod:`pickle` is used to transfer large data between Python processes "
"in order to take advantage of multi-core or multi-machine processing, it is "
"important to optimize the transfer by reducing memory copies, and possibly "
"by applying custom techniques such as data-dependent compression."
msgstr ""
"當 pickle 用於在 Python 行程之間傳輸大資料以利用多核或多機處理時，重要的是通"
"過減少記憶體副本來最佳化傳輸，並且可能通過應用自定義技術，例如作為資料相關的"
"壓縮。"

#: ../../whatsnew/3.8.rst:376
#, fuzzy
msgid ""
"The :mod:`pickle` protocol 5 introduces support for out-of-band buffers "
"where :pep:`3118`-compatible data can be transmitted separately from the "
"main pickle stream, at the discretion of the communication layer."
msgstr ""
":mod:`pickle` 協定 5 引入了對帶外緩衝區的支援，其中 :pep:`3118` 相容資料可以"
"從主 pickle 流中單獨傳輸，由通信層自行決定。"

#: ../../whatsnew/3.8.rst:380
msgid "See :pep:`574` for a full description."
msgstr "完整敘述請見 :pep:`574`\\ 。"

#: ../../whatsnew/3.8.rst:382
#, fuzzy
msgid "(Contributed by Antoine Pitrou in :issue:`36785`.)"
msgstr "（由 Antoine Pitrou 在 :issue:`36785` 中貢獻。）"

#: ../../whatsnew/3.8.rst:386
#, fuzzy
msgid "Other Language Changes"
msgstr "其他語言變化"

#: ../../whatsnew/3.8.rst:388
#, fuzzy
msgid ""
"A :keyword:`continue` statement was illegal in the :keyword:`finally` clause "
"due to a problem with the implementation.  In Python 3.8 this restriction "
"was lifted. (Contributed by Serhiy Storchaka in :issue:`32489`.)"
msgstr ""
":keyword:`continue` 語句在 :keyword:`finally` 子句中是非法的，因為實作存在問"
"題。在 Python 3.8 中，這個限制被取消了。 （由 Serhiy Storchaka 在 :issue:"
"`32489` 中貢獻。）"

#: ../../whatsnew/3.8.rst:393
#, fuzzy
msgid ""
"The :class:`bool`, :class:`int`, and :class:`fractions.Fraction` types now "
"have an :meth:`~int.as_integer_ratio` method like that found in :class:"
"`float` and :class:`decimal.Decimal`.  This minor API extension makes it "
"possible to write ``numerator, denominator = x.as_integer_ratio()`` and have "
"it work across multiple numeric types. (Contributed by Lisa Roach in :issue:"
"`33073` and Raymond Hettinger in :issue:`37819`.)"
msgstr ""
":class:`bool`、:class:`int` 和 :class:`fractions.Fraction` 型別現在有一個 :"
"meth:`~int.as_integer_ratio` 方法，就像在 :class:`float` 中找到的方法和 :"
"class:`decimal.Decimal`。這個次要的 API 擴充使得編寫 ``numerator, "
"denominator = x.as_integer_ratio()`` 並讓它在多種數字型別中工作成為可能。 "
"（由 Lisa Roach 在 :issue:`33073` 和 Raymond Hettinger 在 :issue:`37819` 中貢"
"獻。）"

#: ../../whatsnew/3.8.rst:401
#, fuzzy
msgid ""
"Constructors of :class:`int`, :class:`float` and :class:`complex` will now "
"use the :meth:`~object.__index__` special method, if available and the "
"corresponding method :meth:`~object.__int__`, :meth:`~object.__float__` or :"
"meth:`~object.__complex__` is not available. (Contributed by Serhiy "
"Storchaka in :issue:`20092`.)"
msgstr ""
":class:`int`、:class:`float` 和 :class:`complex` 的構造函式現在將使用 :meth:"
"`~object.__index__` 特殊方法（如果可用）和相應的方法 :meth:`~object ."
"__int__`、:meth:`~object.__float__` 或 :meth:`~object.__complex__` 不可用。 "
"（由 Serhiy Storchaka 在 :issue:`20092` 中貢獻。）"

#: ../../whatsnew/3.8.rst:407
#, fuzzy
msgid ""
"Added support of ``\\N{name}`` escapes in :mod:`regular expressions <re>`::"
msgstr "新增了對 ``\\N{name}`` 轉義的支援 :mod:`正則表達式 <re>`::"

#: ../../whatsnew/3.8.rst:414
#, fuzzy
msgid ""
"(Contributed by Jonathan Eunice and Serhiy Storchaka in :issue:`30688`.)"
msgstr "（由 Jonathan Eunice 和 Serhiy Storchaka 在 :issue:`30688` 中貢獻。）"

#: ../../whatsnew/3.8.rst:416
#, fuzzy
msgid ""
"Dict and dictviews are now iterable in reversed insertion order using :func:"
"`reversed`. (Contributed by Rémi Lapeyre in :issue:`33462`.)"
msgstr ""
"Dict 和 dictviews 現在可以使用 :func:`reversed` 以相反的插入順序進行疊代。 "
"（由 Rémi Lapeyre 在 :issue:`33462` 中貢獻。）"

#: ../../whatsnew/3.8.rst:419
#, fuzzy
msgid ""
"The syntax allowed for keyword names in function calls was further "
"restricted. In particular, ``f((keyword)=arg)`` is no longer allowed. It was "
"never intended to permit more than a bare name on the left-hand side of a "
"keyword argument assignment term. (Contributed by Benjamin Peterson in :"
"issue:`34641`.)"
msgstr ""
"函式呼叫中關鍵字名稱所允許的語法受到進一步限制。特別是，``f((keyword)=arg)`` "
"不再被允許。從來沒有打算在關鍵字參數賦值項的左側允許多於一個裸名。 （由 "
"Benjamin Peterson 在 :issue:`34641` 中貢獻。）"

#: ../../whatsnew/3.8.rst:425
#, fuzzy
msgid ""
"Generalized iterable unpacking in :keyword:`yield` and :keyword:`return` "
"statements no longer requires enclosing parentheses. This brings the *yield* "
"and *return* syntax into better agreement with normal assignment syntax::"
msgstr ""
":keyword:`yield` 和 :keyword:`return` 語句中的廣義可疊代拆包不再需要括號。這"
"使 *yield* 和 *return* 語法與普通賦值語法更好地一致::"

#: ../../whatsnew/3.8.rst:437
#, fuzzy
msgid "(Contributed by David Cuthbert and Jordan Chapman in :issue:`32117`.)"
msgstr "（由 David Cuthbert 和 Jordan Chapman 在 :issue:`32117` 中貢獻。）"

#: ../../whatsnew/3.8.rst:439
#, fuzzy
msgid ""
"When a comma is missed in code such as ``[(10, 20) (30, 40)]``, the compiler "
"displays a :exc:`SyntaxWarning` with a helpful suggestion. This improves on "
"just having a :exc:`TypeError` indicating that the first tuple was not "
"callable.  (Contributed by Serhiy Storchaka in :issue:`15248`.)"
msgstr ""
"當諸如“[(10, 20) (30, 40)]”之類的程式碼中缺少逗號時，編譯器會顯示一個帶有有用"
"建議的 SyntaxWarning。這改進了僅具有 :exc:`TypeError` 指示第一個元組不可呼"
"叫。 （由 Serhiy Storchaka 在 :issue:`15248` 中貢獻。）"

#: ../../whatsnew/3.8.rst:445
#, fuzzy
msgid ""
"Arithmetic operations between subclasses of :class:`datetime.date` or :class:"
"`datetime.datetime` and :class:`datetime.timedelta` objects now return an "
"instance of the subclass, rather than the base class. This also affects the "
"return type of operations whose implementation (directly or indirectly) "
"uses :class:`datetime.timedelta` arithmetic, such as :meth:`~datetime."
"datetime.astimezone`. (Contributed by Paul Ganssle in :issue:`32417`.)"
msgstr ""
"datetime.date 或 datetime.datetime 和 datetime.timedelta 物件的子類別之間的算"
"術運算現在回傳子類別的實例，而不是基底類別。這也會影響其實作（直接或間接）使"
"用 datetime.timedelta 演算法的操作的回傳型別，例如 :meth:`~datetime.datetime."
"astimezone`。 （由 Paul Ganssle 在 :issue:`32417` 中貢獻。）"

#: ../../whatsnew/3.8.rst:453
#, fuzzy
msgid ""
"When the Python interpreter is interrupted by Ctrl-C (SIGINT) and the "
"resulting :exc:`KeyboardInterrupt` exception is not caught, the Python "
"process now exits via a SIGINT signal or with the correct exit code such "
"that the calling process can detect that it died due to a Ctrl-C.  Shells on "
"POSIX and Windows use this to properly terminate scripts in interactive "
"sessions. (Contributed by Google via Gregory P. Smith in :issue:`1054041`.)"
msgstr ""
"當 Python 直譯器被 Ctrl-C (SIGINT) 中斷並且導致的 :exc:`KeyboardInterrupt` 例"
"外未被捕獲時，Python 行程現在通過 SIGINT 信號或使用正確的退出程式碼退出，以便"
"呼叫行程可以檢測到它死於 Ctrl-C。 POSIX 和 Windows 上的 Shell 使用它來正確終"
"止交互式會話中的腳本。 （由 Google 通過 Gregory P. Smith 在 :issue:`1054041` "
"中貢獻。）"

#: ../../whatsnew/3.8.rst:460
#, fuzzy
msgid ""
"Some advanced styles of programming require updating the :class:`types."
"CodeType` object for an existing function.  Since code objects are "
"immutable, a new code object needs to be created, one that is modeled on the "
"existing code object.  With 19 parameters, this was somewhat tedious.  Now, "
"the new ``replace()`` method makes it possible to create a clone with a few "
"altered parameters."
msgstr ""
"一些高階編程風格需要為現有函式更新 :class:`types.CodeType` 物件。由於程式碼對"
"像是不可變的，因此需要建立一個新的程式碼物件，一個以現有程式碼物件為模型的程"
"式碼物件。有 19 個參數，這有點乏味。現在，新的 ``replace()`` 方法可以建立具有"
"一些更改參數的克隆。"

#: ../../whatsnew/3.8.rst:467
#, fuzzy
msgid ""
"Here's an example that alters the :func:`statistics.mean` function to "
"prevent the *data* parameter from being used as a keyword argument::"
msgstr ""
"下面是一個改變 :func:`statistics.mean` 函式以防止 *data* 參數被用作關鍵字參數"
"的示例："

#: ../../whatsnew/3.8.rst:479
#, fuzzy
msgid "(Contributed by Victor Stinner in :issue:`37032`.)"
msgstr "（由 Victor Stinner 在 :issue:`37032` 中貢獻。）"

#: ../../whatsnew/3.8.rst:481
#, fuzzy
msgid ""
"For integers, the three-argument form of the :func:`pow` function now "
"permits the exponent to be negative in the case where the base is relatively "
"prime to the modulus. It then computes a modular inverse to the base when "
"the exponent is ``-1``, and a suitable power of that inverse for other "
"negative exponents.  For example, to compute the `modular multiplicative "
"inverse <https://en.wikipedia.org/wiki/Modular_multiplicative_inverse>`_ of "
"38 modulo 137, write::"
msgstr ""
"對於整數，:func:`pow` 函式的三參數形式現在允許在底數與模數互質的情況下指數為"
"負。然後，當指數為 ``-1``時，它會計算基數的模逆，並為其他負指數計算該逆的合適"
"冪。例如，要計算 38 模 137 的`模乘逆 <https://en.wikipedia.org/wiki/"
"Modular_multiplicative_inverse>`_，寫："

#: ../../whatsnew/3.8.rst:495
#, fuzzy
msgid ""
"Modular inverses arise in the solution of `linear Diophantine equations "
"<https://en.wikipedia.org/wiki/Diophantine_equation>`_. For example, to find "
"integer solutions for ``4258𝑥 + 147𝑦 = 369``, first rewrite as ``4258𝑥 ≡ 369 "
"(mod 147)`` then solve:"
msgstr ""
"模逆出現在“線性丟番圖方程<https://en.wikipedia.org/wiki/"
"Diophantine_equation>”的解中。例如，要找到 ``4258𝑥 + 147𝑦 = 369`` 的整數解，"
"首先重寫為 ``4258𝑥 ≡ 369 (mod 147)`` 然後求解："

#: ../../whatsnew/3.8.rst:505
#, fuzzy
msgid "(Contributed by Mark Dickinson in :issue:`36027`.)"
msgstr "（由 Mark Dickinson 在 :issue:`36027` 中貢獻。）"

#: ../../whatsnew/3.8.rst:507
#, fuzzy
msgid ""
"Dict comprehensions have been synced-up with dict literals so that the key "
"is computed first and the value second::"
msgstr "字典理解已與字典文字同步，因此首先計算鍵，然後計算值::"

#: ../../whatsnew/3.8.rst:522
#, fuzzy
msgid ""
"The guaranteed execution order is helpful with assignment expressions "
"because variables assigned in the key expression will be available in the "
"value expression::"
msgstr ""
"保證執行順序對賦值表達式很有幫助，因為在鍵表達式中賦值的變數將在值表達式中可"
"用::"

#: ../../whatsnew/3.8.rst:532
#, fuzzy
msgid "(Contributed by Jörn Heissler in :issue:`35224`.)"
msgstr "（由 Jörn Heissler 在 :issue:`35224` 中貢獻。）"

#: ../../whatsnew/3.8.rst:534
#, fuzzy
msgid ""
"The :meth:`object.__reduce__` method can now return a tuple from two to six "
"elements long. Formerly, five was the limit.  The new, optional sixth "
"element is a callable with a ``(obj, state)`` signature.  This allows the "
"direct control over the state-updating behavior of a specific object.  If "
"not *None*, this callable will have priority over the object's :meth:"
"`~__setstate__` method. (Contributed by Pierre Glaser and Olivier Grisel in :"
"issue:`35900`.)"
msgstr ""
":meth:`object.__reduce__` 方法現在可以回傳一個長度為 2 到 6 個元素的元組。以"
"前，五是極限。新的、可選的第六個元素是一個帶有“(obj, state)”簽名的可呼叫元"
"素。這允許直接控制特定物件的狀態更新行為。如果不是 *None*，此可呼叫物件將優先"
"於物件的 :meth:`~__setstate__` 方法。 （由 Pierre Glaser 和 Olivier Grisel "
"在 :issue:`35900` 中貢獻。）"

#: ../../whatsnew/3.8.rst:543
#, fuzzy
msgid "New Modules"
msgstr "新模組"

#: ../../whatsnew/3.8.rst:545
#, fuzzy
msgid ""
"The new :mod:`importlib.metadata` module provides (provisional) support for "
"reading metadata from third-party packages.  For example, it can extract an "
"installed package's version number, list of entry points, and more::"
msgstr ""
"新的 :mod:`importlib.metadata` 模組為從第三方包中讀取元資料提供（臨時）支援。"
"例如，它可以提取已安裝包的版本號、入口點列表等："

#: ../../whatsnew/3.8.rst:564
#, fuzzy
msgid "(Contributed by Barry Warsaw and Jason R. Coombs in :issue:`34632`.)"
msgstr "（由 Barry Warsaw 和 Jason R. Coombs 在 :issue:`34632` 中貢獻。）"

#: ../../whatsnew/3.8.rst:568
#, fuzzy
msgid "Improved Modules"
msgstr "改進模組"

#: ../../whatsnew/3.8.rst:571
msgid "ast"
msgstr "ast"

#: ../../whatsnew/3.8.rst:573
#, fuzzy
msgid ""
"AST nodes now have ``end_lineno`` and ``end_col_offset`` attributes, which "
"give the precise location of the end of the node.  (This only applies to "
"nodes that have ``lineno`` and ``col_offset`` attributes.)"
msgstr ""
"AST 節點現在具有 ``end_lineno`` 和 ``end_col_offset`` 屬性，它們給出了節點末"
"端的精確位置。 （這僅適用於具有 ``lineno`` 和 ``col_offset`` 屬性的節點。）"

#: ../../whatsnew/3.8.rst:577
#, fuzzy
msgid ""
"New function :func:`ast.get_source_segment` returns the source code for a "
"specific AST node."
msgstr "新函式 :func:`ast.get_source_segment` 回傳特定 AST 節點的源程式碼。"

#: ../../whatsnew/3.8.rst:580
#, fuzzy
msgid "(Contributed by Ivan Levkivskyi in :issue:`33416`.)"
msgstr "（由 Ivan Levkivskyi 在 :issue:`33416` 中貢獻。）"

#: ../../whatsnew/3.8.rst:582
#, fuzzy
msgid "The :func:`ast.parse` function has some new flags:"
msgstr ":func:`ast.parse` 函式有一些新旗標："

#: ../../whatsnew/3.8.rst:584
#, fuzzy
msgid ""
"``type_comments=True`` causes it to return the text of :pep:`484` and :pep:"
"`526` type comments associated with certain AST nodes;"
msgstr ""
"``type_comments=True`` 使它回傳與某些 AST 節點關聯的 :pep:`484` 和 :pep:"
"`526` 型別註釋的文本；"

#: ../../whatsnew/3.8.rst:587
#, fuzzy
msgid ""
"``mode='func_type'`` can be used to parse :pep:`484` \"signature type "
"comments\" (returned for function definition AST nodes);"
msgstr ""
"``mode='func_type'`` 可用於解析 :pep:`484` “簽名型別註釋”（為函式定義 AST 節"
"點回傳）；"

#: ../../whatsnew/3.8.rst:590
#, fuzzy
msgid ""
"``feature_version=(3, N)`` allows specifying an earlier Python 3 version.  "
"For example, ``feature_version=(3, 4)`` will treat :keyword:`async` and :"
"keyword:`await` as non-reserved words."
msgstr ""
"``feature_version=(3, N)`` 允許指定較早的 Python 3 版本。例如，"
"``feature_version=(3, 4)`` 會將 :keyword:`async` 和 :keyword:`await` 視為非保"
"留字。"

#: ../../whatsnew/3.8.rst:594
#, fuzzy
msgid "(Contributed by Guido van Rossum in :issue:`35766`.)"
msgstr "（由 Guido van Rossum 在 :issue:`35766` 中貢獻。）"

#: ../../whatsnew/3.8.rst:598
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.8.rst:600
#, fuzzy
msgid ""
":func:`asyncio.run` has graduated from the provisional to stable API. This "
"function can be used to execute a :term:`coroutine` and return the result "
"while automatically managing the event loop. For example::"
msgstr ""
":func:`asyncio.run` 已經從臨時 API 升級到穩定 API。此函式可用於執行 :term:"
"`coroutine` 並回傳結果，同時自動管理事件循環。例如：："

#: ../../whatsnew/3.8.rst:612
msgid "This is *roughly* equivalent to::"
msgstr ""
"這\\ *大致*\\ 等價於：\n"
"\n"
"::"

#: ../../whatsnew/3.8.rst:629
#, fuzzy
msgid ""
"The actual implementation is significantly more complex. Thus, :func:"
"`asyncio.run` should be the preferred way of running asyncio programs."
msgstr ""
"實際實施要復雜得多。因此，:func:`asyncio.run` 應該是運行 asyncio 程式的首選方"
"式。"

#: ../../whatsnew/3.8.rst:632
#, fuzzy
msgid "(Contributed by Yury Selivanov in :issue:`32314`.)"
msgstr "（由 Yury Selivanov 在 :issue:`32314` 中貢獻。）"

#: ../../whatsnew/3.8.rst:634
#, fuzzy
msgid ""
"Running ``python -m asyncio`` launches a natively async REPL.  This allows "
"rapid experimentation with code that has a top-level :keyword:`await`.  "
"There is no longer a need to directly call ``asyncio.run()`` which would "
"spawn a new event loop on every invocation:"
msgstr ""
"運行 ``python -m asyncio`` 會啟動一個原生的非同步 REPL。這允許對具有頂級 :"
"keyword:`await` 的程式碼進行快速試驗。不再需要直接呼叫 asyncio.run() 每次呼叫"
"都會產生一個新的事件循環："

#: ../../whatsnew/3.8.rst:649
#, fuzzy
msgid "(Contributed by Yury Selivanov in :issue:`37028`.)"
msgstr "（由 Yury Selivanov 在 :issue:`37028` 中貢獻。）"

#: ../../whatsnew/3.8.rst:651 ../../whatsnew/3.8.rst:1967
#, fuzzy
msgid ""
"The exception :class:`asyncio.CancelledError` now inherits from :class:"
"`BaseException` rather than :class:`Exception` and no longer inherits from :"
"class:`concurrent.futures.CancelledError`. (Contributed by Yury Selivanov "
"in :issue:`32528`.)"
msgstr ""
"例外 :class:`asyncio.CancelledError` 現在繼承自 :class:`BaseException` 而不"
"是 :class:`Exception` 並且不再繼承自 :class:`concurrent.futures."
"CancelledError`。 （由 Yury Selivanov 在 :issue:`32528` 中貢獻。）"

#: ../../whatsnew/3.8.rst:656
#, fuzzy
msgid ""
"On Windows, the default event loop is now :class:`~asyncio."
"ProactorEventLoop`. (Contributed by Victor Stinner in :issue:`34687`.)"
msgstr ""
"在 Windows 上，預設事件循環現在是 :class:`~asyncio.ProactorEventLoop`。 （由 "
"Victor Stinner 在 :issue:`34687` 中貢獻。）"

#: ../../whatsnew/3.8.rst:659
msgid ""
":class:`~asyncio.ProactorEventLoop` now also supports UDP. (Contributed by "
"Adam Meily and Andrew Svetlov in :issue:`29883`.)"
msgstr ""
":class:`~asyncio.ProactorEventLoop` 現在也支援 UDP。 （由 Adam "
"Meily 和 Andrew Svetlov 在 :issue:`29883` 中貢獻。）"

#: ../../whatsnew/3.8.rst:662
msgid ""
":class:`~asyncio.ProactorEventLoop` can now be interrupted by :exc:"
"`KeyboardInterrupt` (\"CTRL+C\"). (Contributed by Vladimir Matveev in :issue:"
"`23057`.)"
msgstr ""
":class:`~asyncio.ProactorEventLoop` 現在可以被 :exc:`KeyboardInterrupt` "
"(\"CTRL+C\") 中斷。（由 Vladimir Matveev 在 :issue:`23057` 中貢獻。）"

#: ../../whatsnew/3.8.rst:666
#, fuzzy
msgid ""
"Added :meth:`asyncio.Task.get_coro` for getting the wrapped coroutine within "
"an :class:`asyncio.Task`. (Contributed by Alex Grönholm in :issue:`36999`.)"
msgstr ""
"新增 :meth:`asyncio.Task.get_coro` 以獲取 :class:`asyncio.Task` 中的包裝協"
"程。 （由 Alex Grönholm 在 :issue:`36999` 中貢獻。）"

#: ../../whatsnew/3.8.rst:670
#, fuzzy
msgid ""
"Asyncio tasks can now be named, either by passing the ``name`` keyword "
"argument to :func:`asyncio.create_task` or the :meth:`~asyncio.loop."
"create_task` event loop method, or by calling the :meth:`~asyncio.Task."
"set_name` method on the task object. The task name is visible in the "
"``repr()`` output of :class:`asyncio.Task` and can also be retrieved using "
"the :meth:`~asyncio.Task.get_name` method. (Contributed by Alex Grönholm in :"
"issue:`34270`.)"
msgstr ""
"現在可以命名 Asyncio 任務，方法是將 ``name`` 關鍵字參數傳遞給 :func:`asyncio."
"create_task` 或 :meth:`~asyncio.loop.create_task` 事件循環方法，或通過呼叫 :"
"meth :`~asyncio.Task.set_name` 任務對像上的方法。任務名稱在 asyncio.Task 的 "
"repr() 輸出中可見，也可以使用 ~asyncio.Task.get_name 方法檢索。 （由 Alex "
"Grönholm 在 :issue:`34270` 中貢獻。）"

#: ../../whatsnew/3.8.rst:678
#, fuzzy
msgid ""
"Added support for `Happy Eyeballs <https://en.wikipedia.org/wiki/"
"Happy_Eyeballs>`_ to :func:`asyncio.loop.create_connection`. To specify the "
"behavior, two new parameters have been added: *happy_eyeballs_delay* and "
"*interleave*. The Happy Eyeballs algorithm improves responsiveness in "
"applications that support IPv4 and IPv6 by attempting to simultaneously "
"connect using both. (Contributed by twisteroid ambassador in :issue:`33530`.)"
msgstr ""
"為 `Happy Eyeballs <https://en.wikipedia.org/wiki/Happy_Eyeballs>`_ 新增了"
"對 :func:`asyncio.loop.create_connection` 的支援。為了指定行為，新增了兩個新"
"參數：*happy_eyeballs_delay* 和 *interleave*。 Happy Eyeballs 演算法通過嘗試"
"使用同時連接來提高支援 IPv4 和 IPv6 的應用程式的響應能力。 （由 twisteroid 大"
"使在 :issue:`33530` 中貢獻。）"

#: ../../whatsnew/3.8.rst:688
msgid "builtins"
msgstr "builtins"

#: ../../whatsnew/3.8.rst:690
#, fuzzy
msgid ""
"The :func:`compile` built-in has been improved to accept the ``ast."
"PyCF_ALLOW_TOP_LEVEL_AWAIT`` flag. With this new flag passed, :func:"
"`compile` will allow top-level ``await``, ``async for`` and ``async with`` "
"constructs that are usually considered invalid syntax. Asynchronous code "
"object marked with the ``CO_COROUTINE`` flag may then be returned. "
"(Contributed by Matthias Bussonnier in :issue:`34616`)"
msgstr ""
"內建的 :func:`compile` 已得到改進，可以接受 `ast."
"PyCF_ALLOW_TOP_LEVEL_AWAIT`` 旗標。傳遞這個新旗標後，:func:`compile` 將允許通"
"常被認為是無效語法的頂級 ``await``、``async for`` 和 ``async with`` 構造。然"
"後可以回傳標有 ``CO_COROUTINE`` 旗標的非同步程式碼物件。 （由 Matthias "
"Bussonnier 在 :issue:`34616` 中貢獻）"

#: ../../whatsnew/3.8.rst:699
msgid "collections"
msgstr "collections"

#: ../../whatsnew/3.8.rst:701
#, fuzzy
msgid ""
"The :meth:`~collections.somenamedtuple._asdict` method for :func:"
"`collections.namedtuple` now returns a :class:`dict` instead of a :class:"
"`collections.OrderedDict`. This works because regular dicts have guaranteed "
"ordering since Python 3.7. If the extra features of :class:`OrderedDict` are "
"required, the suggested remediation is to cast the result to the desired "
"type: ``OrderedDict(nt._asdict())``. (Contributed by Raymond Hettinger in :"
"issue:`35864`.)"
msgstr ""
"collections.namedtuple 的 :meth:`~collections.somenamedtuple._asdict 方法現在"
"回傳一個 :class:`dict` 而不是 :class:`collections.OrderedDict`。這是有效的，"
"因為自 Python 3.7 以來，常規字典已經保證排序。如果需要 :class:`OrderedDict` "
"的額外功能，建議的補救措施是將結果轉換為所需的型別：``OrderedDict(nt."
"_asdict())``。 （由 Raymond Hettinger 在 :issue:`35864` 中貢獻。）"

#: ../../whatsnew/3.8.rst:711
msgid "cProfile"
msgstr "cProfile"

#: ../../whatsnew/3.8.rst:713
#, fuzzy
msgid ""
"The :class:`cProfile.Profile <profile.Profile>` class can now be used as a "
"context manager. Profile a block of code by running::"
msgstr ""
":class:`cProfile.Profile <profile.Profile>` 類現在可以用作上下文管理器。通過"
"運行分析一段程式碼："

#: ../../whatsnew/3.8.rst:722
msgid "(Contributed by Scott Sanderson in :issue:`29235`.)"
msgstr "（由 Scott Sanderson 在 :issue:`29235` 中貢獻。）"

#: ../../whatsnew/3.8.rst:726
msgid "csv"
msgstr "csv"

#: ../../whatsnew/3.8.rst:728
#, fuzzy
msgid ""
"The :class:`csv.DictReader` now returns instances of :class:`dict` instead "
"of a :class:`collections.OrderedDict`.  The tool is now faster and uses less "
"memory while still preserving the field order. (Contributed by Michael Selik "
"in :issue:`34003`.)"
msgstr ""
":class:`csv.DictReader` 現在回傳 :class:`dict` 的實例，而不是 :class:"
"`collections.OrderedDict`。該工具現在速度更快，使用的記憶體更少，同時仍保留欄"
"位順序。 （由 Michael Selik 在 :issue:`34003` 中貢獻。）"

#: ../../whatsnew/3.8.rst:735
msgid "curses"
msgstr "curses"

#: ../../whatsnew/3.8.rst:737
#, fuzzy
msgid ""
"Added a new variable holding structured version information for the "
"underlying ncurses library: :data:`~curses.ncurses_version`. (Contributed by "
"Serhiy Storchaka in :issue:`31680`.)"
msgstr ""
"為底層 ncurses 庫新增了一個新變數，用於保存結構化版本資訊：:data:`~curses."
"ncurses_version`。 （由 Serhiy Storchaka 在 :issue:`31680` 中貢獻。）"

#: ../../whatsnew/3.8.rst:743
msgid "ctypes"
msgstr "ctypes"

#: ../../whatsnew/3.8.rst:745
#, fuzzy
msgid ""
"On Windows, :class:`~ctypes.CDLL` and subclasses now accept a *winmode* "
"parameter to specify flags for the underlying ``LoadLibraryEx`` call. The "
"default flags are set to only load DLL dependencies from trusted locations, "
"including the path where the DLL is stored (if a full or partial path is "
"used to load the initial DLL) and paths added by :func:`~os."
"add_dll_directory`. (Contributed by Steve Dower in :issue:`36085`.)"
msgstr ""
"在 Windows 上，:class:`~ctypes.CDLL` 和子類別現在接受 *winmode* 參數來為底層"
"的``LoadLibraryEx`` 呼叫指定旗標。預設旗標設定為僅從受信任的位置加載 DLL 依賴"
"項，包括儲存 DLL 的路徑（如果使用完整或部分路徑加載初始 DLL）和由 :func:`~os."
"add_dll_directory` 新增的路徑. （由 Steve Dower 在 :issue:`36085` 中貢獻。）"

#: ../../whatsnew/3.8.rst:754
msgid "datetime"
msgstr "datetime"

#: ../../whatsnew/3.8.rst:756
#, fuzzy
msgid ""
"Added new alternate constructors :meth:`datetime.date.fromisocalendar` and :"
"meth:`datetime.datetime.fromisocalendar`, which construct :class:`date` and :"
"class:`datetime` objects respectively from ISO year, week number, and "
"weekday; these are the inverse of each class's ``isocalendar`` method. "
"(Contributed by Paul Ganssle in :issue:`36004`.)"
msgstr ""
"新增了新的備用構造函式 :meth:`datetime.date.fromisocalendar` 和 :meth:"
"`datetime.datetime.fromisocalendar`，它們分別從 ISO 年、週數構造 :class:"
"`date` 和 :class:`datetime` 物件，和工作日；這些是每個類的 ``isocalendar`` 方"
"法的逆過程。 （由 Paul Ganssle 在 :issue:`36004` 中貢獻。）"

#: ../../whatsnew/3.8.rst:764
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.8.rst:766
#, fuzzy
msgid ""
":func:`functools.lru_cache` can now be used as a straight decorator rather "
"than as a function returning a decorator.  So both of these are now "
"supported::"
msgstr ""
":func:`functools.lru_cache` 現在可以用作直接裝飾器，而不是用作回傳裝飾器的函"
"式。所以現在支援這兩個::"

#: ../../whatsnew/3.8.rst:777
msgid "(Contributed by Raymond Hettinger in :issue:`36772`.)"
msgstr "（由 Raymond Hettinger 在 :issue:`36772` 中貢獻。）"

#: ../../whatsnew/3.8.rst:779
#, fuzzy
msgid ""
"Added a new :func:`functools.cached_property` decorator, for computed "
"properties cached for the life of the instance. ::"
msgstr ""
"新增了一個新的 :func:`functools.cached_property` 裝飾器，用於在實例生命週期內"
"快取的計算屬性。 ::"

#: ../../whatsnew/3.8.rst:793
msgid "(Contributed by Carl Meyer in :issue:`21145`)"
msgstr "（由 Carl Meyer 在 :issue:`21145` 中貢獻）"

#: ../../whatsnew/3.8.rst:796
#, fuzzy
msgid ""
"Added a new :func:`functools.singledispatchmethod` decorator that converts "
"methods into :term:`generic functions <generic function>` using :term:"
"`single dispatch`::"
msgstr ""
"新增了一個新的 :func:`functools.singledispatchmethod` 裝飾器，使用 :term:"
"`single dispatch`:: 將方法轉換為 :term:`generic functions <generic "
"function>`::"

#: ../../whatsnew/3.8.rst:818
msgid "(Contributed by Ethan Smith in :issue:`32380`)"
msgstr "（由 Ethan Smith 在 :issue:`32380` 中貢獻）"

#: ../../whatsnew/3.8.rst:821
msgid "gc"
msgstr "gc"

#: ../../whatsnew/3.8.rst:823
#, fuzzy
msgid ""
":func:`~gc.get_objects` can now receive an optional *generation* parameter "
"indicating a generation to get objects from. (Contributed by Pablo Galindo "
"in :issue:`36016`.)"
msgstr ""
":func:`~gc.get_objects` 現在可以接收一個可選的 *generation* 參數，指示從中獲"
"取物件的世代。 （由 Pablo Galindo 在 :issue:`36016` 中貢獻。）"

#: ../../whatsnew/3.8.rst:829
msgid "gettext"
msgstr "gettext"

#: ../../whatsnew/3.8.rst:831
msgid ""
"Added :func:`~gettext.pgettext` and its variants. (Contributed by Franz "
"Glasner, Éric Araujo, and Cheryl Sabella in :issue:`2504`.)"
msgstr ""
"新增了 :func:`~gettext.pgettext` 及其變體。 （由 Franz Glasner、Éric Araujo "
"和 Cheryl Sabella 在 :issue:`2504` 中貢獻。）"

#: ../../whatsnew/3.8.rst:836
msgid "gzip"
msgstr "gzip"

#: ../../whatsnew/3.8.rst:838
#, fuzzy
msgid ""
"Added the *mtime* parameter to :func:`gzip.compress` for reproducible "
"output. (Contributed by Guo Ci Teo in :issue:`34898`.)"
msgstr ""
"將 *mtime* 參數新增到 :func:`gzip.compress` 以獲得可重現的輸出。 （由 Guo Ci "
"Teo 在 :issue:`34898` 中貢獻。）"

#: ../../whatsnew/3.8.rst:841
#, fuzzy
msgid ""
"A :exc:`~gzip.BadGzipFile` exception is now raised instead of :exc:`OSError` "
"for certain types of invalid or corrupt gzip files. (Contributed by Filip "
"Gruszczyński, Michele Orrù, and Zackery Spytz in :issue:`6584`.)"
msgstr ""
"對於某些型別的無效或損壞的 gzip 文件，現在會引發 :exc:`~gzip.BadGzipFile` 例"
"外，而不是 :exc:`OSError`。 （由 Filip Gruszczyński、Michele Orrù 和 Zackery "
"Spytz 在 :issue:`6584` 中貢獻。）"

#: ../../whatsnew/3.8.rst:848
msgid "IDLE and idlelib"
msgstr "IDLE 和 idlelib"

#: ../../whatsnew/3.8.rst:850
#, fuzzy
msgid ""
"Output over N lines (50 by default) is squeezed down to a button. N can be "
"changed in the PyShell section of the General page of the Settings dialog.  "
"Fewer, but possibly extra long, lines can be squeezed by right clicking on "
"the output.  Squeezed output can be expanded in place by double-clicking the "
"button or into the clipboard or a separate window by right-clicking the "
"button.  (Contributed by Tal Einat in :issue:`1529353`.)"
msgstr ""
"N 行（預設為 50 行）的輸出被壓縮到一個按鈕。 N 可以在設定對話框的常規頁面的 "
"PyShell 部分中更改。通過右鍵單擊輸出可以壓縮更少但可能更長的行。壓縮的輸出可"
"以通過雙擊按鈕或右鍵單擊按鈕擴充到剪貼板或單獨的窗口中。 （由 Tal Einat 在 :"
"issue:`1529353` 中貢獻。）"

#: ../../whatsnew/3.8.rst:857
#, fuzzy
msgid ""
"Add \"Run Customized\" to the Run menu to run a module with customized "
"settings. Any command line arguments entered are added to sys.argv. They "
"also re-appear in the box for the next customized run.  One can also "
"suppress the normal Shell main module restart.  (Contributed by Cheryl "
"Sabella, Terry Jan Reedy, and others in :issue:`5680` and :issue:`37627`.)"
msgstr ""
"將“運行自定義”新增到“運行”菜單以運行具有自定義設定的模組。輸入的任何命令列參"
"數都會新增到 sys.argv。它們還會重新出現在下一次自定義運行的框中。也可以抑制正"
"常的 Shell 主模組重啟。 （由 Cheryl Sabella、Terry Jan Reedy 和其他人在 :"
"issue:`5680` 和 :issue:`37627` 中貢獻。）"

#: ../../whatsnew/3.8.rst:863
#, fuzzy
msgid ""
"Added optional line numbers for IDLE editor windows. Windows open without "
"line numbers unless set otherwise in the General tab of the configuration "
"dialog.  Line numbers for an existing window are shown and hidden in the "
"Options menu. (Contributed by Tal Einat and Saimadhav Heblikar in :issue:"
"`17535`.)"
msgstr ""
"為 IDLE 編輯器窗口新增了可選的行號。 Windows 打開時沒有行號，除非在配置對話框"
"的常規選項卡中另有設定。現有窗口的行號在“選項”菜單中顯示和隱藏。 （由 Tal "
"Einat 和 Saimadhav Heblikar 在 :issue:`17535` 中貢獻。）"

#: ../../whatsnew/3.8.rst:869
#, fuzzy
msgid ""
"OS native encoding is now used for converting between Python strings and Tcl "
"objects. This allows IDLE to work with emoji and other non-BMP characters. "
"These characters can be displayed or copied and pasted to or from the "
"clipboard.  Converting strings from Tcl to Python and back now never fails. "
"(Many people worked on this for eight years but the problem was finally "
"solved by Serhiy Storchaka in :issue:`13153`.)"
msgstr ""
"操作系統本機編碼現在用於 Python 字串和 Tcl 物件之間的轉換。這允許 IDLE 使用表"
"情符號和其他非 BMP 字元。這些字元可以顯示或複制並粘貼到剪貼板或從剪貼板粘貼。"
"將字串從 Tcl 轉換為 Python 並回傳現在永遠不會失敗。 （很多人為此工作了八年，"
"但這個問題最終被 Serhiy Storchaka 在 :issue:`13153` 中解決了。）"

#: ../../whatsnew/3.8.rst:876
msgid "New in 3.8.1:"
msgstr "3.8.1 中的新功能："

#: ../../whatsnew/3.8.rst:878
#, fuzzy
msgid ""
"Add option to toggle cursor blink off.  (Contributed by Zackery Spytz in :"
"issue:`4603`.)"
msgstr ""
"新增選項以關閉光標閃爍。 （由 Zackery Spytz 在 :issue:`4603` 中貢獻。）"

#: ../../whatsnew/3.8.rst:881
#, fuzzy
msgid ""
"Escape key now closes IDLE completion windows.  (Contributed by Johnny "
"Najera in :issue:`38944`.)"
msgstr ""
"Escape 鍵現在關閉 IDLE 完成窗口。 （由 Johnny Najera 在 :issue:`38944` 中貢"
"獻。）"

#: ../../whatsnew/3.8.rst:884
#, fuzzy
msgid "The changes above have been backported to 3.7 maintenance releases."
msgstr "上述更改已反向移植到 3.7 維護版本。"

#: ../../whatsnew/3.8.rst:886
#, fuzzy
msgid ""
"Add keywords to module name completion list.  (Contributed by Terry J. Reedy "
"in :issue:`37765`.)"
msgstr ""
"將關鍵字新增到模組名稱完成列表。 （由 Terry J. Reedy 在 :issue:`37765` 中貢"
"獻。）"

#: ../../whatsnew/3.8.rst:890
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.8.rst:892
#, fuzzy
msgid ""
"The :func:`inspect.getdoc` function can now find docstrings for "
"``__slots__`` if that attribute is a :class:`dict` where the values are "
"docstrings. This provides documentation options similar to what we already "
"have for :func:`property`, :func:`classmethod`, and :func:`staticmethod`::"
msgstr ""
":func:`inspect.getdoc` 函式現在可以找到 ``__slots__`` 的文檔字串，前提是該屬"
"性是一個 :class:`dict`，其中的值是文檔字串。這提供的文檔選項類似於我們已有"
"的 :func:`property`、:func:`classmethod` 和 :func:`staticmethod`::"

#: ../../whatsnew/3.8.rst:904
msgid "(Contributed by Raymond Hettinger in :issue:`36326`.)"
msgstr "（由 Raymond Hettinger 在 :issue:`36326` 中貢獻。）"

#: ../../whatsnew/3.8.rst:908
msgid "io"
msgstr "io"

#: ../../whatsnew/3.8.rst:910
#, fuzzy
msgid ""
"In development mode (:option:`-X` ``env``) and in :ref:`debug build <debug-"
"build>`, the :class:`io.IOBase` finalizer now logs the exception if the "
"``close()`` method fails. The exception is ignored silently by default in "
"release build. (Contributed by Victor Stinner in :issue:`18748`.)"
msgstr ""
"在開發模式 (:option:`-X` ``env``) 和 :ref:`debug build <debug-build>` 中，如"
"果`` close()`` 方法失敗。預設情況下，在發布版本中忽略例外。 （由 Victor "
"Stinner 在 :issue:`18748` 中貢獻。）"

#: ../../whatsnew/3.8.rst:917
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.8.rst:919
#, fuzzy
msgid ""
"The :func:`itertools.accumulate` function added an option *initial* keyword "
"argument to specify an initial value::"
msgstr ""
":func:`itertools.accumulate` 函式新增了一個選項 *initial* 關鍵字參數來指定初"
"始值::"

#: ../../whatsnew/3.8.rst:926
msgid "(Contributed by Lisa Roach in :issue:`34659`.)"
msgstr "（由 Lisa Roach 在 :issue:`34659` 中貢獻。）"

#: ../../whatsnew/3.8.rst:930
msgid "json.tool"
msgstr "json.tool"

#: ../../whatsnew/3.8.rst:932
#, fuzzy
msgid ""
"Add option ``--json-lines`` to parse every input line as a separate JSON "
"object. (Contributed by Weipeng Hong in :issue:`31553`.)"
msgstr ""
"新增選項 ``--json-lines`` 將每個輸入行解析為單獨的 JSON 物件。 （由 Weipeng "
"Hong 在 :issue:`31553` 中貢獻。）"

#: ../../whatsnew/3.8.rst:937
msgid "logging"
msgstr "logging"

#: ../../whatsnew/3.8.rst:939
#, fuzzy
msgid ""
"Added a *force* keyword argument to :func:`logging.basicConfig()` When set "
"to true, any existing handlers attached to the root logger are removed and "
"closed before carrying out the configuration specified by the other "
"arguments."
msgstr ""
"在 :func:`logging.basicConfig()` 中新增了一個 *force* 關鍵字參數 當設定為 "
"true 時，在執行其他參數指定的配置之前，將刪除並關閉附加到根記錄器的任何現有處"
"理程式。"

#: ../../whatsnew/3.8.rst:944
#, fuzzy
msgid ""
"This solves a long-standing problem.  Once a logger or *basicConfig()* had "
"been called, subsequent calls to *basicConfig()* were silently ignored. This "
"made it difficult to update, experiment with, or teach the various logging "
"configuration options using the interactive prompt or a Jupyter notebook."
msgstr ""
"這解決了一個長期存在的問題。一旦記錄器或 *basicConfig()* 被呼叫，隨後對 "
"*basicConfig()* 的呼叫將被靜默忽略。這使得使用交互式提示或 Jupyter 筆記本更"
"新、試驗或教授各種日誌記錄配置選項變得困難。"

#: ../../whatsnew/3.8.rst:950
msgid ""
"(Suggested by Raymond Hettinger, implemented by Dong-hee Na, and reviewed by "
"Vinay Sajip in :issue:`33897`.)"
msgstr ""
"（由 Raymond Hettinger 建議、由 Dong-hee Na 實作、並由 Vinay Sajip 在 :issue:"
"`33897` 中審閱。）"

#: ../../whatsnew/3.8.rst:955
msgid "math"
msgstr "math"

#: ../../whatsnew/3.8.rst:957
#, fuzzy
msgid ""
"Added new function :func:`math.dist` for computing Euclidean distance "
"between two points.  (Contributed by Raymond Hettinger in :issue:`33089`.)"
msgstr ""
"新增了新函式 :func:`math.dist` 用於計算兩點之間的歐氏距離。 （由 Raymond "
"Hettinger 在 :issue:`33089` 中貢獻。）"

#: ../../whatsnew/3.8.rst:960
#, fuzzy
msgid ""
"Expanded the :func:`math.hypot` function to handle multiple dimensions. "
"Formerly, it only supported the 2-D case. (Contributed by Raymond Hettinger "
"in :issue:`33089`.)"
msgstr ""
"擴充了 :func:`math.hypot` 函式以處理多個維度。以前，它只支援二維情況。 （由 "
"Raymond Hettinger 在 :issue:`33089` 中貢獻。）"

#: ../../whatsnew/3.8.rst:964
#, fuzzy
msgid ""
"Added new function, :func:`math.prod`, as analogous function to :func:`sum` "
"that returns the product of a 'start' value (default: 1) times an iterable "
"of numbers::"
msgstr ""
"新增了新函式 :func:`math.prod`，作為 :func:`sum` 的類似函式，回傳“起始”值（預"
"設值：1）乘以可疊代數字的乘積::"

#: ../../whatsnew/3.8.rst:973
msgid "(Contributed by Pablo Galindo in :issue:`35606`.)"
msgstr "（由 Pablo Galindo 在 :issue:`35606` 中貢獻。）"

#: ../../whatsnew/3.8.rst:975
#, fuzzy
msgid ""
"Added two new combinatoric functions :func:`math.perm` and :func:`math."
"comb`::"
msgstr "新增了兩個新的組合函式 :func:`math.perm` 和 :func:`math.comb`::"

#: ../../whatsnew/3.8.rst:982
msgid ""
"(Contributed by Yash Aggarwal, Keller Fuchs, Serhiy Storchaka, and Raymond "
"Hettinger in :issue:`37128`, :issue:`37178`, and :issue:`35431`.)"
msgstr ""
"（由 Yash Aggarwal、Keller Fuchs、Serhiy Storchaka 和 Raymond Hettinger 在 :"
"issue:`37128`、:issue:`37178` 和 :issue:`35431` 中貢獻。）"

#: ../../whatsnew/3.8.rst:985
#, fuzzy
msgid ""
"Added a new function :func:`math.isqrt` for computing accurate integer "
"square roots without conversion to floating point.  The new function "
"supports arbitrarily large integers.  It is faster than ``floor(sqrt(n))`` "
"but slower than :func:`math.sqrt`::"
msgstr ""
"新增了一個新函式 :func:`math.isqrt` 用於在不轉換為浮點數的情況下計算準確的整"
"數平方根。新函式支援任意大的整數。它比 ``floor(sqrt(n))`` 快，但比 :func:"
"`math.sqrt`:: 慢"

#: ../../whatsnew/3.8.rst:997
msgid "(Contributed by Mark Dickinson in :issue:`36887`.)"
msgstr "（由 Mark Dickinson 在 :issue:`36887` 中貢獻。）"

#: ../../whatsnew/3.8.rst:999
#, fuzzy
msgid ""
"The function :func:`math.factorial` no longer accepts arguments that are not "
"int-like. (Contributed by Pablo Galindo in :issue:`33083`.)"
msgstr ""
"函式 :func:`math.factorial` 不再接受非整數型別的參數。 （由 Pablo Galindo "
"在 :issue:`33083` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1004
msgid "mmap"
msgstr "mmap"

#: ../../whatsnew/3.8.rst:1006
#, fuzzy
msgid ""
"The :class:`mmap.mmap` class now has an :meth:`~mmap.mmap.madvise` method to "
"access the ``madvise()`` system call. (Contributed by Zackery Spytz in :"
"issue:`32941`.)"
msgstr ""
"mmap.mmap 類現在有一個方法來訪問 madvise() 系統呼叫。 （由 Zackery Spytz 在 :"
"issue:`32941` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1012
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.8.rst:1014
msgid ""
"Added new :mod:`multiprocessing.shared_memory` module. (Contributed by Davin "
"Potts in :issue:`35813`.)"
msgstr ""
"新增 :mod:`multiprocessing.shared_memory` 模組。（由 Davin Potts 在 :issue:"
"`35813` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1017
#, fuzzy
msgid ""
"On macOS, the *spawn* start method is now used by default. (Contributed by "
"Victor Stinner in :issue:`33725`.)"
msgstr ""
"在 macOS 上，現在預設使用 *spawn* 啟動方法。 （由 Victor Stinner 在 :issue:"
"`33725` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1022
msgid "os"
msgstr "os"

#: ../../whatsnew/3.8.rst:1024
#, fuzzy
msgid ""
"Added new function :func:`~os.add_dll_directory` on Windows for providing "
"additional search paths for native dependencies when importing extension "
"modules or loading DLLs using :mod:`ctypes`. (Contributed by Steve Dower in :"
"issue:`36085`.)"
msgstr ""
"在 Windows 上新增了新函式 :func:`~os.add_dll_directory` 以在導入擴充模組或使"
"用 :mod:`ctypes` 加載 DLL 時為本機依賴項提供額外的搜索路徑。 （由 Steve "
"Dower 在 :issue:`36085` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1029
#, fuzzy
msgid ""
"A new :func:`os.memfd_create` function was added to wrap the "
"``memfd_create()`` syscall. (Contributed by Zackery Spytz and Christian "
"Heimes in :issue:`26836`.)"
msgstr ""
"新增了一個新的 :func:`os.memfd_create` 函式來包裝 ``memfd_create()`` 系統呼"
"叫。 （由 Zackery Spytz 和 Christian Heimes 在 :issue:`26836` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1033
#, fuzzy
msgid ""
"On Windows, much of the manual logic for handling reparse points (including "
"symlinks and directory junctions) has been delegated to the operating "
"system. Specifically, :func:`os.stat` will now traverse anything supported "
"by the operating system, while :func:`os.lstat` will only open reparse "
"points that identify as \"name surrogates\" while others are opened as for :"
"func:`os.stat`. In all cases, :attr:`stat_result.st_mode` will only have "
"``S_IFLNK`` set for symbolic links and not other kinds of reparse points. To "
"identify other kinds of reparse point, check the new :attr:`stat_result."
"st_reparse_tag` attribute."
msgstr ""
"在 Windows 上，許多用於處理重分析點（包括符號鏈接和目錄連接）的手動邏輯已委託"
"給操作系統。具體來說，:func:`os.stat` 現在將遍歷操作系統支援的任何內容，而 :"
"func:`os.lstat` 將只打開標識為“名稱代理”的重分析點，而其他的則像 :func 一樣打"
"開： `os.stat`。在所有情況下，:attr:`stat_result.st_mode` 只會為符號鏈接設定 "
"``S_IFLNK`` 而不是其他型別的重解析點。要識別其他型別的重分析點，請檢查新的 :"
"attr:`stat_result.st_reparse_tag` 屬性。"

#: ../../whatsnew/3.8.rst:1042
#, fuzzy
msgid ""
"On Windows, :func:`os.readlink` is now able to read directory junctions. "
"Note that :func:`~os.path.islink` will return ``False`` for directory "
"junctions, and so code that checks ``islink`` first will continue to treat "
"junctions as directories, while code that handles errors from :func:`os."
"readlink` may now treat junctions as links."
msgstr ""
"在 Windows 上，:func:`os.readlink` 現在可以讀取目錄連接。請注意 :func:`~os."
"path.islink` 將為目錄連接回傳``False``，因此首先檢查``islink`` 的程式碼將繼續"
"將連接視為目錄，而處理以下錯誤的程式碼： func:`os.readlink` 現在可以將路口視"
"為鏈接。"

#: ../../whatsnew/3.8.rst:1048 ../../whatsnew/3.8.rst:1073
msgid "(Contributed by Steve Dower in :issue:`37834`.)"
msgstr "（由 Steve Dower 在 :issue:`37834` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1052
msgid "os.path"
msgstr "os.path"

#: ../../whatsnew/3.8.rst:1054
#, fuzzy
msgid ""
":mod:`os.path` functions that return a boolean result like :func:`~os.path."
"exists`, :func:`~os.path.lexists`, :func:`~os.path.isdir`, :func:`~os.path."
"isfile`, :func:`~os.path.islink`, and :func:`~os.path.ismount` now return "
"``False`` instead of raising :exc:`ValueError` or its subclasses :exc:"
"`UnicodeEncodeError` and :exc:`UnicodeDecodeError` for paths that contain "
"characters or bytes unrepresentable at the OS level. (Contributed by Serhiy "
"Storchaka in :issue:`33721`.)"
msgstr ""
":mod:`os.path` 回傳布爾結果的函式，如 :func:`~os.path.exists`, :func:`~os."
"path.lexists`, :func:`~os.path.isdir` , :func:`~os.path.isfile`, :func:`~os."
"path.islink` 和 :func:`~os.path.ismount` 現在回傳 ``False`` 而不是提高 :exc: "
"`ValueError` 或其子類別 :exc:`UnicodeEncodeError` 和 :exc:"
"`UnicodeDecodeError` 用於包含操作系統級別無法表示的字元或位元組的路徑。 （由 "
"Serhiy Storchaka 在 :issue:`33721` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1062 ../../whatsnew/3.8.rst:1962
#, fuzzy
msgid ""
":func:`~os.path.expanduser` on Windows now prefers the :envvar:`USERPROFILE` "
"environment variable and does not use :envvar:`HOME`, which is not normally "
"set for regular user accounts. (Contributed by Anthony Sottile in :issue:"
"`36264`.)"
msgstr ""
"Windows 上的 :func:`~os.path.expanduser` 現在更喜歡 :envvar:`USERPROFILE` 環"
"境變數並且不使用 :envvar:`HOME`，這通常不會為普通使用者帳戶設定。 （由 "
"Anthony Sottile 在 :issue:`36264` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1067
#, fuzzy
msgid ""
":func:`~os.path.isdir` on Windows no longer returns ``True`` for a link to a "
"non-existent directory."
msgstr ""
"Windows 上的 :func:`~os.path.isdir` 不再為指向不存在的目錄的鏈接回傳 "
"``True``。"

#: ../../whatsnew/3.8.rst:1070
#, fuzzy
msgid ""
":func:`~os.path.realpath` on Windows now resolves reparse points, including "
"symlinks and directory junctions."
msgstr ""
"Windows 上的 :func:`~os.path.realpath` 現在解析重新分析點，包括符號鏈接和目錄"
"連接。"

#: ../../whatsnew/3.8.rst:1077
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.8.rst:1079
#, fuzzy
msgid ""
":mod:`pathlib.Path` methods that return a boolean result like :meth:"
"`~pathlib.Path.exists()`, :meth:`~pathlib.Path.is_dir()`, :meth:`~pathlib."
"Path.is_file()`, :meth:`~pathlib.Path.is_mount()`, :meth:`~pathlib.Path."
"is_symlink()`, :meth:`~pathlib.Path.is_block_device()`, :meth:`~pathlib.Path."
"is_char_device()`, :meth:`~pathlib.Path.is_fifo()`, :meth:`~pathlib.Path."
"is_socket()` now return ``False`` instead of raising :exc:`ValueError` or "
"its subclass :exc:`UnicodeEncodeError` for paths that contain characters "
"unrepresentable at the OS level. (Contributed by Serhiy Storchaka in :issue:"
"`33721`.)"
msgstr ""
"回傳布爾結果的 :mod:`pathlib.Path` 方法，如 :meth:`~pathlib.Path.exists()`、:"
"meth:`~pathlib.Path.is_dir()`、:meth:`~pathlib。 Path.is_file()`, :meth:"
"`~pathlib.Path.is_mount()`, :meth:`~pathlib.Path.is_symlink()`, :meth:"
"`~pathlib.Path.is_block_device()`, : meth:`~pathlib.Path.is_char_device()`, :"
"meth:`~pathlib.Path.is_fifo()`, :meth:`~pathlib.Path.is_socket()` 現在回傳 "
"``False`` 而不是提高 :exc:`ValueError` 或其子類別 :exc:`UnicodeEncodeError` "
"用於包含在操作系統級別無法表示的字元的路徑。 （由 Serhiy Storchaka 在 :issue:"
"`33721` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1089
#, fuzzy
msgid ""
"Added :meth:`pathlib.Path.link_to()` which creates a hard link pointing to a "
"path. (Contributed by Joannah Nanjekye in :issue:`26978`)"
msgstr ""
"新增 :meth:`pathlib.Path.link_to()` 建立指向路徑的硬鏈接。 （由 Joannah "
"Nanjekye 在 :issue:`26978` 中貢獻）"

#: ../../whatsnew/3.8.rst:1095
msgid "pickle"
msgstr "pickle"

#: ../../whatsnew/3.8.rst:1097
#, fuzzy
msgid ""
":mod:`pickle` extensions subclassing the C-optimized :class:`~pickle."
"Pickler` can now override the pickling logic of functions and classes by "
"defining the special :meth:`~pickle.Pickler.reducer_override` method. "
"(Contributed by Pierre Glaser and Olivier Grisel in :issue:`35900`.)"
msgstr ""
":mod:`pickle` 擴充子類別化 C-optimized :class:`~pickle.Pickler` 現在可以通過"
"定義特殊的 :meth:`~pickle.Pickler.reducer_override` 方法來覆蓋函式和類的酸洗"
"邏輯。 （由 Pierre Glaser 和 Olivier Grisel 在 :issue:`35900` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1104
msgid "plistlib"
msgstr "plistlib"

#: ../../whatsnew/3.8.rst:1106
#, fuzzy
msgid ""
"Added new :class:`plistlib.UID` and enabled support for reading and writing "
"NSKeyedArchiver-encoded binary plists. (Contributed by Jon Janzen in :issue:"
"`26707`.)"
msgstr ""
"新增了新的 :class:`plistlib.UID` 並啟用了對讀取和寫入 NSKeyedArchiver 編碼的"
"二進位 plists 的支援。 （由 Jon Janzen 在 :issue:`26707` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1112
msgid "pprint"
msgstr "pprint"

#: ../../whatsnew/3.8.rst:1114
#, fuzzy
msgid ""
"The :mod:`pprint` module added a *sort_dicts* parameter to several "
"functions. By default, those functions continue to sort dictionaries before "
"rendering or printing.  However, if *sort_dicts* is set to false, the "
"dictionaries retain the order that keys were inserted.  This can be useful "
"for comparison to JSON inputs during debugging."
msgstr ""
":mod:`pprint` 模組向多個函式新增了 *sort_dicts* 參數。預設情況下，這些函式會"
"在呈現或印出之前繼續對字典進行排序。但是，如果 *sort_dicts* 設定為 false，字"
"典將保留鍵插入的順序。這對於在除錯期間與 JSON 輸入進行比較很有用。"

#: ../../whatsnew/3.8.rst:1120
#, fuzzy
msgid ""
"In addition, there is a convenience new function, :func:`pprint.pp` that is "
"like :func:`pprint.pprint` but with *sort_dicts* defaulting to ``False``::"
msgstr ""
"此外，還有一個方便的新函式 :func:`pprint.pp` 類似於 :func:`pprint.pprint` 但 "
"*sort_dicts* 預設為 ``False``::"

#: ../../whatsnew/3.8.rst:1134
msgid "(Contributed by Rémi Lapeyre in :issue:`30670`.)"
msgstr "（由 Rémi Lapeyre 在 :issue:`30670` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1138
msgid "py_compile"
msgstr "py_compile"

#: ../../whatsnew/3.8.rst:1140
#, fuzzy
msgid ""
":func:`py_compile.compile` now supports silent mode. (Contributed by Joannah "
"Nanjekye in :issue:`22640`.)"
msgstr ""
":func:`py_compile.compile` 現在支援靜默模式。 （由 Joannah Nanjekye 在 :"
"issue:`22640` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1145
msgid "shlex"
msgstr "shlex"

#: ../../whatsnew/3.8.rst:1147
msgid ""
"The new :func:`shlex.join` function acts as the inverse of :func:`shlex."
"split`. (Contributed by Bo Bayles in :issue:`32102`.)"
msgstr ""
"新的 :func:`shlex.join` 函式為 :func:`shlex.split` 的逆向函式。 （由 Bo "
"Bayles 在 :issue:`32102` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1152
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.8.rst:1154
msgid ""
":func:`shutil.copytree` now accepts a new ``dirs_exist_ok`` keyword "
"argument. (Contributed by Josh Bronson in :issue:`20849`.)"
msgstr ""
":func:`shutil.copytree` 現在接受一個新的 ``dirs_exist_ok`` 關鍵字引數。（由 "
"Josh Bronson 在 :issue:`20849` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1157
#, fuzzy
msgid ""
":func:`shutil.make_archive` now defaults to the modern pax (POSIX.1-2001) "
"format for new archives to improve portability and standards conformance, "
"inherited from the corresponding change to the :mod:`tarfile` module. "
"(Contributed by C.A.M. Gerlach in :issue:`30661`.)"
msgstr ""
":func:`shutil.make_archive` 現在預設為新檔案的現代 pax (POSIX.1-2001) 格式，"
"以提高可移植性和標準一致性，繼承自 :mod:`tarfile` 模組的相應更改。 （由 C.A."
"M. Gerlach 在 :issue:`30661` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1162
#, fuzzy
msgid ""
":func:`shutil.rmtree` on Windows now removes directory junctions without "
"recursively removing their contents first. (Contributed by Steve Dower in :"
"issue:`37834`.)"
msgstr ""
"Windows 上的 :func:`shutil.rmtree` 現在可以刪除目錄連接，而無需首先遞迴地刪除"
"它們的內容。 （由 Steve Dower 在 :issue:`37834` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1168
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.8.rst:1170
#, fuzzy
msgid ""
"Added :meth:`~socket.create_server()` and :meth:`~socket."
"has_dualstack_ipv6()` convenience functions to automate the necessary tasks "
"usually involved when creating a server socket, including accepting both "
"IPv4 and IPv6 connections on the same socket.  (Contributed by Giampaolo "
"Rodolà in :issue:`17561`.)"
msgstr ""
"新增 :meth:`~socket.create_server()` 和 :meth:`~socket.has_dualstack_ipv6()` "
"便利函式來自動執行建立伺服器 socket 時通常涉及的必要任務，包括在同一 socket "
"上接受 IPv4 和 IPv6 連接. （由 Giampaolo Rodolà 在 :issue:`17561` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1175
msgid ""
"The :func:`socket.if_nameindex()`, :func:`socket.if_nametoindex()`, and :"
"func:`socket.if_indextoname()` functions have been implemented on Windows. "
"(Contributed by Zackery Spytz in :issue:`37007`.)"
msgstr ""
":func:`socket.if_nameindex()`、:func:`socket.if_nametoindex()` 和 :func:"
"`socket.if_indextoname()` 函式已在 Windows 上實作。 （由 Zackery Spytz 在 :"
"issue:`37007` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1181
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.8.rst:1183
#, fuzzy
msgid ""
"Added :attr:`~ssl.SSLContext.post_handshake_auth` to enable and :meth:`~ssl."
"SSLSocket.verify_client_post_handshake` to initiate TLS 1.3 post-handshake "
"authentication. (Contributed by Christian Heimes in :issue:`34670`.)"
msgstr ""
"新增 :attr:`~ssl.SSLContext.post_handshake_auth` 以啟用和 :meth:`~ssl."
"SSLSocket.verify_client_post_handshake` 以啟動 TLS 1.3 握手後身份驗證。 （由 "
"Christian Heimes 在 :issue:`34670` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1190
msgid "statistics"
msgstr "statistics"

#: ../../whatsnew/3.8.rst:1192
#, fuzzy
msgid ""
"Added :func:`statistics.fmean` as a faster, floating point variant of :func:"
"`statistics.mean()`.  (Contributed by Raymond Hettinger and Steven D'Aprano "
"in :issue:`35904`.)"
msgstr ""
"新增 :func:`statistics.fmean` 作為 :func:`statistics.mean()` 的更快的浮點變"
"體。 （由 Raymond Hettinger 和 Steven D'Aprano 在 :issue:`35904` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1196
msgid ""
"Added :func:`statistics.geometric_mean()` (Contributed by Raymond Hettinger "
"in :issue:`27181`.)"
msgstr ""
"新增 :func:`statistics.geometric_mean()`（由 Raymond Hettinger 在 :issue:"
"`27181` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1199
#, fuzzy
msgid ""
"Added :func:`statistics.multimode` that returns a list of the most common "
"values. (Contributed by Raymond Hettinger in :issue:`35892`.)"
msgstr ""
"新增 :func:`statistics.multimode` 回傳最常見值的列表。 （由 Raymond "
"Hettinger 在 :issue:`35892` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1202
#, fuzzy
msgid ""
"Added :func:`statistics.quantiles` that divides data or a distribution in to "
"equiprobable intervals (e.g. quartiles, deciles, or percentiles). "
"(Contributed by Raymond Hettinger in :issue:`36546`.)"
msgstr ""
"新增 :func:`statistics.quantiles` 將資料或分佈劃分為等概率區間（例如四分位"
"數、十分位數或百分位數）。 （由 Raymond Hettinger 在 :issue:`36546` 中貢"
"獻。）"

#: ../../whatsnew/3.8.rst:1206
#, fuzzy
msgid ""
"Added :class:`statistics.NormalDist`, a tool for creating and manipulating "
"normal distributions of a random variable. (Contributed by Raymond Hettinger "
"in :issue:`36018`.)"
msgstr ""
"新增了 :class:`statistics.NormalDist`，這是一種用於建立和操縱隨機變數正態分佈"
"的工具。 （由 Raymond Hettinger 在 :issue:`36018` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1236
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.8.rst:1238
#, fuzzy
msgid ""
"Add new :func:`sys.unraisablehook` function which can be overridden to "
"control how \"unraisable exceptions\" are handled. It is called when an "
"exception has occurred but there is no way for Python to handle it. For "
"example, when a destructor raises an exception or during garbage collection "
"(:func:`gc.collect`). (Contributed by Victor Stinner in :issue:`36829`.)"
msgstr ""
"新增新的 :func:`sys.unraisablehook` 函式，該函式可以被覆蓋以控制如何處理“無法"
"引發的例外”。當例外發生但 Python 無法處理時呼叫它。例如，當析構函式引發例外時"
"或在垃圾回收期間 (:func:`gc.collect`)。 （由 Victor Stinner 在 :issue:"
"`36829` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1247
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.8.rst:1249
#, fuzzy
msgid ""
"The :mod:`tarfile` module now defaults to the modern pax (POSIX.1-2001) "
"format for new archives, instead of the previous GNU-specific one. This "
"improves cross-platform portability with a consistent encoding (UTF-8) in a "
"standardized and extensible format, and offers several other benefits. "
"(Contributed by C.A.M. Gerlach in :issue:`36268`.)"
msgstr ""
":mod:`tarfile` 模組現在預設為新檔案的現代 pax (POSIX.1-2001) 格式，而不是以前"
"的 GNU 特定格式。這通過標準化和可擴充格式的一致編碼 (UTF-8) 提高了跨平台可移"
"植性，並提供了其他一些好處。 （由 C.A.M. Gerlach 在 :issue:`36268` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1257
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.8.rst:1259
#, fuzzy
msgid ""
"Add a new :func:`threading.excepthook` function which handles uncaught :meth:"
"`threading.Thread.run` exception. It can be overridden to control how "
"uncaught :meth:`threading.Thread.run` exceptions are handled. (Contributed "
"by Victor Stinner in :issue:`1230540`.)"
msgstr ""
"新增一個新的 :func:`threading.excepthook` 函式來處理未捕獲的 :meth:"
"`threading.Thread.run` 例外。它可以被覆蓋以控制如何處理未捕獲的 threading."
"Thread.run 例外。 （由 Victor Stinner 在 :issue:`1230540` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1264
#, fuzzy
msgid ""
"Add a new :func:`threading.get_native_id` function and a :data:`~threading."
"Thread.native_id` attribute to the :class:`threading.Thread` class. These "
"return the native integral Thread ID of the current thread assigned by the "
"kernel. This feature is only available on certain platforms, see :func:"
"`get_native_id <threading.get_native_id>` for more information. (Contributed "
"by Jake Tesler in :issue:`36084`.)"
msgstr ""
"新增一個新的 :func:`threading.get_native_id` 函式和一個 :data:`~threading."
"Thread.native_id` 屬性到 :class:`threading.Thread` 類。這些回傳由內核分配的當"
"前執行緒的本機整數執行緒 ID。此功能僅在某些平台上可用，請參閱 :func:"
"`get_native_id <threading.get_native_id>` 了解更多資訊。 （由 Jake Tesler "
"在 :issue:`36084` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1274
msgid "tokenize"
msgstr "tokenize"

#: ../../whatsnew/3.8.rst:1276
#, fuzzy
msgid ""
"The :mod:`tokenize` module now implicitly emits a ``NEWLINE`` token when "
"provided with input that does not have a trailing new line.  This behavior "
"now matches what the C tokenizer does internally. (Contributed by Ammar "
"Askar in :issue:`33899`.)"
msgstr ""
":mod:`tokenize` 模組現在在提供沒有尾隨換行符的輸入時隱式發出一個 ``NEWLINE`` "
"標記。此行為現在與 C 分詞器在內部執行的操作相匹配。 （由 Ammar Askar 在 :"
"issue:`33899` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1283
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.8.rst:1285
#, fuzzy
msgid ""
"Added methods :meth:`~tkinter.Spinbox.selection_from`, :meth:`~tkinter."
"Spinbox.selection_present`, :meth:`~tkinter.Spinbox.selection_range` and :"
"meth:`~tkinter.Spinbox.selection_to` in the :class:`tkinter.Spinbox` class. "
"(Contributed by Juliette Monsel in :issue:`34829`.)"
msgstr ""
"新增方法 :meth:`~tkinter.Spinbox.selection_from`, :meth:`~tkinter.Spinbox."
"selection_present`, :meth:`~tkinter.Spinbox.selection_range` 和 :meth:"
"`~tkinter.Spinbox.selection_to` :class:`tkinter.Spinbox` 類。 （由 Juliette "
"Monsel 在 :issue:`34829` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1292
#, fuzzy
msgid ""
"Added method :meth:`~tkinter.Canvas.moveto` in the :class:`tkinter.Canvas` "
"class. (Contributed by Juliette Monsel in :issue:`23831`.)"
msgstr ""
"在 :class:`tkinter.Canvas` 類別中新增方法 :meth:`~tkinter.Canvas.moveto`。 "
"（由 Juliette Monsel 在 :issue:`23831` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1296
#, fuzzy
msgid ""
"The :class:`tkinter.PhotoImage` class now has :meth:`~tkinter.PhotoImage."
"transparency_get` and :meth:`~tkinter.PhotoImage.transparency_set` methods.  "
"(Contributed by Zackery Spytz in :issue:`25451`.)"
msgstr ""
":class:`tkinter.PhotoImage` 類現在有 :meth:`~tkinter.PhotoImage."
"transparency_get` 和 :meth:`~tkinter.PhotoImage.transparency_set` 方法。 "
"（由 Zackery Spytz 在 :issue:`25451` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1303
msgid "time"
msgstr "time"

#: ../../whatsnew/3.8.rst:1305
#, fuzzy
msgid ""
"Added new clock :data:`~time.CLOCK_UPTIME_RAW` for macOS 10.12. (Contributed "
"by Joannah Nanjekye in :issue:`35702`.)"
msgstr ""
"為 macOS 10.12 新增了新時鐘 :data:`~time.CLOCK_UPTIME_RAW`。 （由 Joannah "
"Nanjekye 在 :issue:`35702` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1310
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.8.rst:1312
msgid "The :mod:`typing` module incorporates several new features:"
msgstr ":mod:`typing` 模組包含幾個新功能："

#: ../../whatsnew/3.8.rst:1314
#, fuzzy
msgid ""
"A dictionary type with per-key types.  See :pep:`589` and :class:`typing."
"TypedDict`. TypedDict uses only string keys.  By default, every key is "
"required to be present. Specify \"total=False\" to allow keys to be "
"optional::"
msgstr ""
"具有每個鍵型別的字典型別。請參閱 :pep:`589` 和 :class:`typing.TypedDict`。 "
"TypedDict 僅使用字串鍵。預設情況下，每個密鑰都需要存在。指定“total=False”以允"
"許鍵是可選的::"

#: ../../whatsnew/3.8.rst:1324
#, fuzzy
msgid ""
"Literal types.  See :pep:`586` and :class:`typing.Literal`. Literal types "
"indicate that a parameter or return value is constrained to one or more "
"specific literal values::"
msgstr ""
"文字型別。請參閱 :pep:`586` 和 :class:`typing.Literal`。文字型別表示參數或回"
"傳值被限制為一個或多個特定的文字值::"

#: ../../whatsnew/3.8.rst:1331
#, fuzzy
msgid ""
"\"Final\" variables, functions, methods and classes.  See :pep:`591`, :class:"
"`typing.Final` and :func:`typing.final`. The final qualifier instructs a "
"static type checker to restrict subclassing, overriding, or reassignment::"
msgstr ""
"“最終”變數、函式、方法和類。請參見 :pep:`591`、:class:`typing.Final` 和 :"
"func:`typing.final`。 final 限定符指示靜態型別檢查器限制子類別化、覆蓋或重新"
"分配："

#: ../../whatsnew/3.8.rst:1338
#, fuzzy
msgid ""
"Protocol definitions.  See :pep:`544`, :class:`typing.Protocol` and :func:"
"`typing.runtime_checkable`.  Simple ABCs like :class:`typing.SupportsInt` "
"are now ``Protocol`` subclasses."
msgstr ""
"協定定義。請參見 :pep:`544`、:class:`typing.Protocol` 和 :func:`typing."
"runtime_checkable`。像 :class:`typing.SupportsInt` 這樣的簡單 ABC 現在是 "
"``Protocol`` 的子類別。"

#: ../../whatsnew/3.8.rst:1342
msgid "New protocol class :class:`typing.SupportsIndex`."
msgstr "新協定類別 :class:`typing.SupportsIndex`。"

#: ../../whatsnew/3.8.rst:1344
#, fuzzy
msgid "New functions :func:`typing.get_origin` and :func:`typing.get_args`."
msgstr "新函式 :func:`typing.get_origin` 和 :func:`typing.get_args`。"

#: ../../whatsnew/3.8.rst:1348
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.8.rst:1350
#, fuzzy
msgid ""
"The :mod:`unicodedata` module has been upgraded to use the `Unicode 12.1.0 "
"<https://blog.unicode.org/2019/05/unicode-12-1-en.html>`_ release."
msgstr ""
":mod:`unicodedata` 模組已升級為使用 `Unicode 12.1.0 <https://blog.unicode."
"org/2019/05/unicode-12-1-en.html>`_ 版本。"

#: ../../whatsnew/3.8.rst:1353
#, fuzzy
msgid ""
"New function :func:`~unicodedata.is_normalized` can be used to verify a "
"string is in a specific normal form, often much faster than by actually "
"normalizing the string.  (Contributed by Max Belanger, David Euresti, and "
"Greg Price in :issue:`32285` and :issue:`37966`)."
msgstr ""
"新函式 :func:`~unicodedata.is_normalized` 可用於驗證字串是否為特定範式，通常"
"比實際規範化字串快得多。 （由 Max Belanger、David Euresti 和 Greg Price 在 :"
"issue:`32285` 和 :issue:`37966` 中貢獻）。"

#: ../../whatsnew/3.8.rst:1360
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.8.rst:1362
#, fuzzy
msgid ""
"Added :class:`~unittest.mock.AsyncMock` to support an asynchronous version "
"of :class:`~unittest.mock.Mock`.  Appropriate new assert functions for "
"testing have been added as well. (Contributed by Lisa Roach in :issue:"
"`26467`)."
msgstr ""
"新增 :class:`~unittest.mock.AsyncMock` 以支援 :class:`~unittest.mock.Mock` 的"
"非同步版本。還新增了用於測試的適當的新斷言函式。 （由 Lisa Roach 在 :issue:"
"`26467` 中貢獻）。"

#: ../../whatsnew/3.8.rst:1367
#, fuzzy
msgid ""
"Added :func:`~unittest.addModuleCleanup()` and :meth:`~unittest.TestCase."
"addClassCleanup()` to unittest to support cleanups for :func:`~unittest."
"setUpModule()` and :meth:`~unittest.TestCase.setUpClass()`. (Contributed by "
"Lisa Roach in :issue:`24412`.)"
msgstr ""
"新增 :func:`~unittest.addModuleCleanup()` 和 :meth:`~unittest.TestCase."
"addClassCleanup()` 到單元測試以支援 :func:`~unittest.setUpModule()` 和 :meth:"
"`~unittest 的清理.TestCase.setUpClass()`。 （由 Lisa Roach 在 :issue:`24412` "
"中貢獻。）"

#: ../../whatsnew/3.8.rst:1373
#, fuzzy
msgid ""
"Several mock assert functions now also print a list of actual calls upon "
"failure. (Contributed by Petter Strandmark in :issue:`35047`.)"
msgstr ""
"幾個模擬斷言函式現在還會在失敗時印出實際呼叫列表。 （由 Petter Strandmark "
"在 :issue:`35047` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1376
#, fuzzy
msgid ""
":mod:`unittest` module gained support for coroutines to be used as test "
"cases with :class:`unittest.IsolatedAsyncioTestCase`. (Contributed by Andrew "
"Svetlov in :issue:`32972`.)"
msgstr ""
":mod:`unittest` 模組獲得了對協程的支援，可用作 :class:`unittest."
"IsolatedAsyncioTestCase` 的測試用例。 （由 Andrew Svetlov 在 :issue:`32972` "
"中貢獻。）"

#: ../../whatsnew/3.8.rst:1380
msgid "Example::"
msgstr ""
"範例：\n"
"\n"
"::"

#: ../../whatsnew/3.8.rst:1403
msgid "venv"
msgstr "venv"

#: ../../whatsnew/3.8.rst:1405
#, fuzzy
msgid ""
":mod:`venv` now includes an ``Activate.ps1`` script on all platforms for "
"activating virtual environments under PowerShell Core 6.1. (Contributed by "
"Brett Cannon in :issue:`32718`.)"
msgstr ""
":mod:`venv` 現在在所有平台上都包含一個 ``Activate.ps1`` 腳本，用於在 "
"PowerShell Core 6.1 下激活虛擬環境。 （由 Brett Cannon 在 :issue:`32718` 中貢"
"獻。）"

#: ../../whatsnew/3.8.rst:1411
msgid "weakref"
msgstr "weakref"

#: ../../whatsnew/3.8.rst:1413
#, fuzzy
msgid ""
"The proxy objects returned by :func:`weakref.proxy` now support the matrix "
"multiplication operators ``@`` and ``@=`` in addition to the other numeric "
"operators. (Contributed by Mark Dickinson in :issue:`36669`.)"
msgstr ""
":func:`weakref.proxy` 回傳的代理物件現在支援矩陣乘法運算符``@`` 和``@=`` 除了"
"其他數字運算符。 （由 Mark Dickinson 在 :issue:`36669` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1419
msgid "xml"
msgstr "xml"

#: ../../whatsnew/3.8.rst:1421
#, fuzzy
msgid ""
"As mitigation against DTD and external entity retrieval, the :mod:`xml.dom."
"minidom` and :mod:`xml.sax` modules no longer process external entities by "
"default. (Contributed by Christian Heimes in :issue:`17239`.)"
msgstr ""
"作為對 DTD 和外部實體檢索的緩解措施，:mod:`xml.dom.minidom` 和 :mod:`xml."
"sax` 模組預設不再處理外部實體。 （由 Christian Heimes 在 :issue:`17239` 中貢"
"獻。）"

#: ../../whatsnew/3.8.rst:1426
#, fuzzy
msgid ""
"The ``.find*()`` methods in the :mod:`xml.etree.ElementTree` module support "
"wildcard searches like ``{*}tag`` which ignores the namespace and "
"``{namespace}*`` which returns all tags in the given namespace. (Contributed "
"by Stefan Behnel in :issue:`28238`.)"
msgstr ""
":mod:`xml.etree.ElementTree` 模組中的``.find*()`` 方法支援通配符搜索，例如忽"
"略命名空間的``{*}tag`` 和``{namespace}*``回傳給定命名空間中的所有標籤。 （由 "
"Stefan Behnel 在 :issue:`28238` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1431
#, fuzzy
msgid ""
"The :mod:`xml.etree.ElementTree` module provides a new function :func:`–xml."
"etree.ElementTree.canonicalize()` that implements C14N 2.0. (Contributed by "
"Stefan Behnel in :issue:`13611`.)"
msgstr ""
":mod:`xml.etree.ElementTree` 模組提供了一個實作 C14N 2.0 的新函式 :func:`–"
"xml.etree.ElementTree.canonicalize()`。 （由 Stefan Behnel 在 :issue:`13611` "
"中貢獻。）"

#: ../../whatsnew/3.8.rst:1435
#, fuzzy
msgid ""
"The target object of :class:`xml.etree.ElementTree.XMLParser` can receive "
"namespace declaration events through the new callback methods ``start_ns()`` "
"and ``end_ns()``.  Additionally, the :class:`xml.etree.ElementTree."
"TreeBuilder` target can be configured to process events about comments and "
"processing instructions to include them in the generated tree. (Contributed "
"by Stefan Behnel in :issue:`36676` and :issue:`36673`.)"
msgstr ""
":class:`xml.etree.ElementTree.XMLParser` 的目標物件可以通過新的回呼方法"
"``start_ns()`` 和``end_ns()`` 接收命名空間聲明事件。此外，:class:`xml.etree."
"ElementTree.TreeBuilder` 目標可以配置為處理有關評論和處理指令的事件，以將它們"
"包含在生成的樹中。 （由 Stefan Behnel 在 :issue:`36676` 和 :issue:`36673` 中"
"貢獻。）"

#: ../../whatsnew/3.8.rst:1445
msgid "xmlrpc"
msgstr "xmlrpc"

#: ../../whatsnew/3.8.rst:1447
#, fuzzy
msgid ""
":class:`xmlrpc.client.ServerProxy` now supports an optional *headers* "
"keyword argument for a sequence of HTTP headers to be sent with each "
"request.  Among other things, this makes it possible to upgrade from default "
"basic authentication to faster session authentication. (Contributed by "
"Cédric Krier in :issue:`35153`.)"
msgstr ""
":class:`xmlrpc.client.ServerProxy` 現在支援可選的 *headers* 關鍵字參數，用於"
"隨每個請求一起發送的一系列 HTTP 標頭。除其他外，這使得從預設基本身份驗證升級"
"到更快的會話身份驗證成為可能。 （由 Cédric Krier 在 :issue:`35153` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1455
msgid "Optimizations"
msgstr "最佳化"

#: ../../whatsnew/3.8.rst:1457
#, fuzzy
msgid ""
"The :mod:`subprocess` module can now use the :func:`os.posix_spawn` function "
"in some cases for better performance. Currently, it is only used on macOS "
"and Linux (using glibc 2.24 or newer) if all these conditions are met:"
msgstr ""
":mod:`subprocess` 模組現在可以在某些情況下使用 :func:`os.posix_spawn` 函式以"
"獲得更好的性能。目前，如果滿足所有這些條件，它僅用於 macOS 和 Linux（使用 "
"glibc 2.24 或更新版本）："

#: ../../whatsnew/3.8.rst:1461
#, fuzzy
msgid "*close_fds* is false;"
msgstr "*close_fds* 為假；"

#: ../../whatsnew/3.8.rst:1462
#, fuzzy
msgid ""
"*preexec_fn*, *pass_fds*, *cwd* and *start_new_session* parameters are not "
"set;"
msgstr "*preexec_fn*、*pass_fds*、*cwd* 和 *start_new_session* 參數未設定；"

#: ../../whatsnew/3.8.rst:1464
msgid "the *executable* path contains a directory."
msgstr "*executable* 路徑包含一個目錄。"

#: ../../whatsnew/3.8.rst:1466
#, fuzzy
msgid "(Contributed by Joannah Nanjekye and Victor Stinner in :issue:`35537`.)"
msgstr "（由 Joannah Nanjekye 和 Victor Stinner 在 :issue:`35537` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1468
#, fuzzy
msgid ""
":func:`shutil.copyfile`, :func:`shutil.copy`, :func:`shutil.copy2`, :func:"
"`shutil.copytree` and :func:`shutil.move` use platform-specific \"fast-"
"copy\" syscalls on Linux and macOS in order to copy the file more "
"efficiently. \"fast-copy\" means that the copying operation occurs within "
"the kernel, avoiding the use of userspace buffers in Python as in \"``outfd."
"write(infd.read())``\". On Windows :func:`shutil.copyfile` uses a bigger "
"default buffer size (1 MiB instead of 16 KiB) and a :func:`memoryview`-based "
"variant of :func:`shutil.copyfileobj` is used. The speedup for copying a 512 "
"MiB file within the same partition is about +26% on Linux, +50% on macOS and "
"+40% on Windows. Also, much less CPU cycles are consumed. See :ref:`shutil-"
"platform-dependent-efficient-copy-operations` section. (Contributed by "
"Giampaolo Rodolà in :issue:`33671`.)"
msgstr ""
":func:`shutil.copyfile`, :func:`shutil.copy`, :func:`shutil.copy2`, :func:"
"`shutil.copytree` 和 :func:`shutil.move` 使用平台特定的“快速-copy\" 系統呼叫"
"在 Linux 和 macOS 上，以便更有效地複製文件。 “快速復制”意味著複製操作發生在內"
"核中，避免在 Python 中使用使用者空間緩衝區，如“``outfd.write(infd."
"read())``”。在 Windows 上 :func:`shutil.copyfile` 使用更大的預設緩衝區大小"
"（1 MiB 而不是 16 KiB），並使用基於 :func:`memoryview` 的 :func:`shutil."
"copyfileobj` 變體。在同一分區內復制 512 MiB 文件的加速在 Linux 上約為 +26%，"
"在 macOS 上約為 +50%，在 Windows 上約為 +40%。此外，消耗的 CPU 週期也少得多。"
"請參閱 :ref:`shutil-platform-dependent-efficient-copy-operations` 部分。 "
"（由 Giampaolo Rodolà 在 :issue:`33671` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1484
#, fuzzy
msgid ""
":func:`shutil.copytree` uses :func:`os.scandir` function and all copy "
"functions depending from it use cached :func:`os.stat` values. The speedup "
"for copying a directory with 8000 files is around +9% on Linux, +20% on "
"Windows and +30% on a Windows SMB share. Also the number of :func:`os.stat` "
"syscalls is reduced by 38% making :func:`shutil.copytree` especially faster "
"on network filesystems. (Contributed by Giampaolo Rodolà in :issue:`33695`.)"
msgstr ""
":func:`shutil.copytree` 使用 :func:`os.scandir` 函式，所有依賴它的複制函式都"
"使用快取的 :func:`os.stat` 值。複製包含 8000 個文件的目錄的加速在 Linux 上約"
"為 +9%，在 Windows 上約為 +20%，在 Windows SMB 共享上約為 +30%。 :func:`os."
"stat` 系統呼叫的數量也減少了 38%，使得 :func:`shutil.copytree` 在網絡文件系統"
"上特別快。 （由 Giampaolo Rodolà 在 :issue:`33695` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1491
#, fuzzy
msgid ""
"The default protocol in the :mod:`pickle` module is now Protocol 4, first "
"introduced in Python 3.4.  It offers better performance and smaller size "
"compared to Protocol 3 available since Python 3.0."
msgstr ""
":mod:`pickle` 模組中的預設協定現在是 Protocol 4，首次在 Python 3.4 中引入。與"
"自 Python 3.0 以來可用的協定 3 相比，它提供了更好的性能和更小的尺寸。"

#: ../../whatsnew/3.8.rst:1495
#, fuzzy
msgid ""
"Removed one :c:type:`Py_ssize_t` member from ``PyGC_Head``.  All GC tracked "
"objects (e.g. tuple, list, dict) size is reduced 4 or 8 bytes. (Contributed "
"by Inada Naoki in :issue:`33597`.)"
msgstr ""
"從 ``PyGC_Head`` 中刪除了一個 :c:type:`Py_ssize_t` 成員。所有 GC 跟踪物件（例"
"如元組、列表、字典）的大小都減少了 4 或 8 個位元組。 （由 Inada Naoki 在 :"
"issue:`33597` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1499
#, fuzzy
msgid ""
":class:`uuid.UUID` now uses ``__slots__`` to reduce its memory footprint. "
"(Contributed by Wouter Bolsterlee and Tal Einat in :issue:`30977`)"
msgstr ""
":class:`uuid.UUID` 現在使用 ``__slots__`` 來減少其記憶體佔用。 （由 Wouter "
"Bolsterlee 和 Tal Einat 在 :issue:`30977` 中貢獻）"

#: ../../whatsnew/3.8.rst:1502
#, fuzzy
msgid ""
"Improved performance of :func:`operator.itemgetter` by 33%.  Optimized "
"argument handling and added a fast path for the common case of a single non-"
"negative integer index into a tuple (which is the typical use case in the "
"standard library).  (Contributed by Raymond Hettinger in :issue:`35664`.)"
msgstr ""
":func:`operator.itemgetter` 的性能提高了 33%。最佳化參數處理並為單個非負整數"
"索引的常見情況新增到元組的快速路徑（這是標準庫中的典型用例）。 （由 Raymond "
"Hettinger 在 :issue:`35664` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1508
#, fuzzy
msgid ""
"Sped-up field lookups in :func:`collections.namedtuple`.  They are now more "
"than two times faster, making them the fastest form of instance variable "
"lookup in Python. (Contributed by Raymond Hettinger, Pablo Galindo, and Joe "
"Jevnik, Serhiy Storchaka in :issue:`32492`.)"
msgstr ""
"在 :func:`collections.namedtuple` 中加速欄位查找。它們現在快兩倍以上，使它們"
"成為 Python 中最快的實例變數查找形式。 （由 Raymond Hettinger、Pablo Galindo "
"和 Joe Jevnik、Serhiy Storchaka 在 :issue:`32492` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1513
#, fuzzy
msgid ""
"The :class:`list` constructor does not overallocate the internal item buffer "
"if the input iterable has a known length (the input implements ``__len__``). "
"This makes the created list 12% smaller on average. (Contributed by Raymond "
"Hettinger and Pablo Galindo in :issue:`33234`.)"
msgstr ""
"如果輸入可疊代物件的長度已知（輸入實作了 __len__ ），list 構造函式不會過度分"
"配內部項緩衝區。這使得建立的列表平均縮小 12%。 （由 Raymond Hettinger 和 "
"Pablo Galindo 在 :issue:`33234` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1518
#, fuzzy
msgid ""
"Doubled the speed of class variable writes.  When a non-dunder attribute was "
"updated, there was an unnecessary call to update slots. (Contributed by "
"Stefan Behnel, Pablo Galindo Salgado, Raymond Hettinger, Neil Schemenauer, "
"and Serhiy Storchaka in :issue:`36012`.)"
msgstr ""
"類變數寫入速度加倍。更新非 dunder 屬性時，會不必要地呼叫更新槽。 （由 Stefan "
"Behnel、Pablo Galindo Salgado、Raymond Hettinger、Neil Schenmauer 和 Serhiy "
"Storchaka 在 :issue:`36012` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1523
#, fuzzy
msgid ""
"Reduced an overhead of converting arguments passed to many builtin functions "
"and methods.  This sped up calling some simple builtin functions and methods "
"up to 20--50%.  (Contributed by Serhiy Storchaka in :issue:`23867`, :issue:"
"`35582` and :issue:`36127`.)"
msgstr ""
"減少了轉換傳遞給許多內建函式和方法的參數的開銷。這將呼叫一些簡單的內建函式和"
"方法的速度提高了 20--50%。 （由 Serhiy Storchaka 在 :issue:`23867`、:issue:"
"`35582` 和 :issue:`36127` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1528
#, fuzzy
msgid ""
"``LOAD_GLOBAL`` instruction now uses new \"per opcode cache\" mechanism. It "
"is about 40% faster now.  (Contributed by Yury Selivanov and Inada Naoki in :"
"issue:`26219`.)"
msgstr ""
"``LOAD_GLOBAL`` 指令現在使用新的“每個操作碼快取”機制。現在快了大約 40%。 "
"（由 Yury Selivanov 和 Inada Naoki 在 :issue:`26219` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1534
msgid "Build and C API Changes"
msgstr "建置和 C API 更改"

#: ../../whatsnew/3.8.rst:1536
#, fuzzy
msgid ""
"Default :data:`sys.abiflags` became an empty string: the ``m`` flag for "
"pymalloc became useless (builds with and without pymalloc are ABI "
"compatible) and so has been removed. (Contributed by Victor Stinner in :"
"issue:`36707`.)"
msgstr ""
"預設 :data:`sys.abiflags` 變成空字串：pymalloc 的 ``m`` 旗標變得無用（使用和"
"不使用 pymalloc 的構建都是 ABI 相容的）因此已被刪除。 （由 Victor Stinner "
"在 :issue:`36707` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1540
#, fuzzy
msgid "Example of changes:"
msgstr "變更示例："

#: ../../whatsnew/3.8.rst:1542
#, fuzzy
msgid ""
"Only ``python3.8`` program is installed, ``python3.8m`` program is gone."
msgstr "只安裝了 ``python3.8`` 程式，``python3.8m`` 程式沒有了。"

#: ../../whatsnew/3.8.rst:1543
#, fuzzy
msgid ""
"Only ``python3.8-config`` script is installed, ``python3.8m-config`` script "
"is gone."
msgstr "只安裝了 ``python3.8-config`` 腳本，``python3.8m-config`` 腳本不見了。"

#: ../../whatsnew/3.8.rst:1545
#, fuzzy
msgid ""
"The ``m`` flag has been removed from the suffix of dynamic library "
"filenames: extension modules in the standard library as well as those "
"produced and installed by third-party packages, like those downloaded from "
"PyPI. On Linux, for example, the Python 3.7 suffix ``.cpython-37m-x86_64-"
"linux-gnu.so`` became ``.cpython-38-x86_64-linux-gnu.so`` in Python 3.8."
msgstr ""
"``m`` 旗標已從動態庫文件名的後綴中刪除：標準庫中的擴充模組以及由第三方包生成"
"和安裝的模組，例如從 PyPI 下載的模組。例如，在 Linux 上，Python 3.7 後綴“."
"cpython-37m-x86_64-linux-gnu.so”在 Python 3.8 中變成了“.cpython-38-x86_64-"
"linux-gnu.so”。"

#: ../../whatsnew/3.8.rst:1552
#, fuzzy
msgid ""
"The header files have been reorganized to better separate the different "
"kinds of APIs:"
msgstr "標頭檔已重新組織以更好地分離不同型別的 API："

#: ../../whatsnew/3.8.rst:1555
#, fuzzy
msgid "``Include/*.h`` should be the portable public stable C API."
msgstr "``Include/*.h`` 應該是可移植的公開穩定 C API。"

#: ../../whatsnew/3.8.rst:1556
#, fuzzy
msgid ""
"``Include/cpython/*.h`` should be the unstable C API specific to CPython; "
"public API, with some private API prefixed by ``_Py`` or ``_PY``."
msgstr ""
"``include/cpython/*.h``應該是CPython特有的不穩定的C API；公開 API，一些私有 "
"API 以 ``_Py`` 或 ``_PY`` 為前綴。"

#: ../../whatsnew/3.8.rst:1558
#, fuzzy
msgid ""
"``Include/internal/*.h`` is the private internal C API very specific to "
"CPython. This API comes with no backward compatibility warranty and should "
"not be used outside CPython. It is only exposed for very specific needs like "
"debuggers and profiles which has to access to CPython internals without "
"calling functions. This API is now installed by ``make install``."
msgstr ""
"``Include/internal/*.h`` 是非常特定於 CPython 的私有內部 C API。此 API 不提供"
"向後相容性保證，不應在 CPython 之外使用。它僅針對非常特定的需求公開，例如除錯"
"器和配置文件，它們必須訪問 CPython 內部而不呼叫函式。此 API 現在由“make "
"install”安裝。"

#: ../../whatsnew/3.8.rst:1564
#, fuzzy
msgid ""
"(Contributed by Victor Stinner in :issue:`35134` and :issue:`35081`, work "
"initiated by Eric Snow in Python 3.7.)"
msgstr ""
"（由 Victor Stinner 在 :issue:`35134` 和 :issue:`35081` 中貢獻，Eric Snow 在 "
"Python 3.7 中發起的工作。）"

#: ../../whatsnew/3.8.rst:1567
#, fuzzy
msgid ""
"Some macros have been converted to static inline functions: parameter types "
"and return type are well defined, they don't have issues specific to macros, "
"variables have a local scopes. Examples:"
msgstr ""
"一些巨集已轉換為靜態內聯函式：參數型別和回傳型別定義明確，它們沒有巨集特有的"
"問題，變數具有局部作用域。例子："

#: ../../whatsnew/3.8.rst:1571
msgid ":c:func:`Py_INCREF`, :c:func:`Py_DECREF`"
msgstr ":c:func:`Py_INCREF`, :c:func:`Py_DECREF`"

#: ../../whatsnew/3.8.rst:1572
msgid ":c:func:`Py_XINCREF`, :c:func:`Py_XDECREF`"
msgstr ":c:func:`Py_XINCREF`, :c:func:`Py_XDECREF`"

#: ../../whatsnew/3.8.rst:1573
msgid ":c:func:`PyObject_INIT`, :c:func:`PyObject_INIT_VAR`"
msgstr ":c:func:`PyObject_INIT`, :c:func:`PyObject_INIT_VAR`"

#: ../../whatsnew/3.8.rst:1574
#, fuzzy
msgid ""
"Private functions: :c:func:`_PyObject_GC_TRACK`, :c:func:"
"`_PyObject_GC_UNTRACK`, :c:func:`_Py_Dealloc`"
msgstr ""
"私有函式：:c:func:`_PyObject_GC_TRACK`, :c:func:`_PyObject_GC_UNTRACK`, :c:"
"func:`_Py_Dealloc`"

#: ../../whatsnew/3.8.rst:1577
msgid "(Contributed by Victor Stinner in :issue:`35059`.)"
msgstr "（由 Victor Stinner 在 :issue:`35059` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1579
#, fuzzy
msgid ""
"The :c:func:`PyByteArray_Init` and :c:func:`PyByteArray_Fini` functions have "
"been removed. They did nothing since Python 2.7.4 and Python 3.2.0, were "
"excluded from the limited API (stable ABI), and were not documented. "
"(Contributed by Victor Stinner in :issue:`35713`.)"
msgstr ""
":c:func:`PyByteArray_Init` 和 :c:func:`PyByteArray_Fini` 函式已被刪除。自 "
"Python 2.7.4 和 Python 3.2.0 以來，它們什麼也沒做，被排除在有限的 API（穩定"
"的 ABI）之外，並且沒有記錄。 （由 Victor Stinner 在 :issue:`35713` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1584
#, fuzzy
msgid ""
"The result of :c:func:`PyExceptionClass_Name` is now of type ``const char "
"*`` rather of ``char *``. (Contributed by Serhiy Storchaka in :issue:"
"`33818`.)"
msgstr ""
":c:func:`PyExceptionClass_Name` 的結果現在是 ``const char *`` 而不是 ``char "
"*`` 型別。 （由 Serhiy Storchaka 在 :issue:`33818` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1588
#, fuzzy
msgid ""
"The duality of ``Modules/Setup.dist`` and ``Modules/Setup`` has been "
"removed.  Previously, when updating the CPython source tree, one had to "
"manually copy ``Modules/Setup.dist`` (inside the source tree) to ``Modules/"
"Setup`` (inside the build tree) in order to reflect any changes upstream.  "
"This was of a small benefit to packagers at the expense of a frequent "
"annoyance to developers following CPython development, as forgetting to copy "
"the file could produce build failures."
msgstr ""
"``Modules/Setup.dist`` 和 ``Modules/Setup`` 的雙重性已被移除。以前，在更新 "
"CPython 源程式碼樹時，必須手動將 ``Modules/Setup.dist``（在源程式碼樹內）複製"
"到 ``Modules/Setup``（在構建樹內）以反映上游的任何更改.這對打包者來說是一個小"
"小的好處，但代價是經常讓遵循 CPython 開發的開發人員感到煩惱，因為忘記複製文件"
"可能會導致構建失敗。"

#: ../../whatsnew/3.8.rst:1596
#, fuzzy
msgid ""
"Now the build system always reads from ``Modules/Setup`` inside the source "
"tree.  People who want to customize that file are encouraged to maintain "
"their changes in a git fork of CPython or as patch files, as they would do "
"for any other change to the source tree."
msgstr ""
"現在構建系統總是從源程式碼樹中的``Modules/Setup``讀取。鼓勵想要自定義該文件的"
"人在 CPython 的 git 分支或補丁文件中維護他們的更改，就像他們對源程式碼樹的任"
"何其他更改所做的那樣。"

#: ../../whatsnew/3.8.rst:1601
msgid "(Contributed by Antoine Pitrou in :issue:`32430`.)"
msgstr "（由 Antoine Pitrou 在 :issue:`32430` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1603
#, fuzzy
msgid ""
"Functions that convert Python number to C integer like :c:func:"
"`PyLong_AsLong` and argument parsing functions like :c:func:"
"`PyArg_ParseTuple` with integer converting format units like ``'i'`` will "
"now use the :meth:`~object.__index__` special method instead of :meth:"
"`~object.__int__`, if available.  The deprecation warning will be emitted "
"for objects with the ``__int__()`` method but without the ``__index__()`` "
"method (like :class:`~decimal.Decimal` and :class:`~fractions.Fraction`).  :"
"c:func:`PyNumber_Check` will now return ``1`` for objects implementing "
"``__index__()``. :c:func:`PyNumber_Long`, :c:func:`PyNumber_Float` and :c:"
"func:`PyFloat_AsDouble` also now use the ``__index__()`` method if "
"available. (Contributed by Serhiy Storchaka in :issue:`36048` and :issue:"
"`20092`.)"
msgstr ""
"將 Python 數字轉換為 C 整數的函式，如 :c:func:`PyLong_AsLong` 和參數解析函"
"式，如 :c:func:`PyArg_ParseTuple` 以及整數轉換格式單元，如 ``'i'`` 現在將使"
"用 :meth: `~object.__index__` 特殊方法而不是 :meth:`~object.__int__`，如果可"
"用的話。對於具有 `__int__()`` 方法但沒有 `__index__()`` 方法的物件（如 :"
"class:`~decimal.Decimal` 和 :class:`~fractions.Fraction` 將發出棄用警告). :c:"
"func:`PyNumber_Check` 現在將為實作 ``__index__()`` 的物件回傳 ``1``。 :c:"
"func:`PyNumber_Long`、:c:func:`PyNumber_Float` 和 :c:func:`PyFloat_AsDouble` "
"現在也使用 ``__index__()`` 方法（如果可用）。 （由 Serhiy Storchaka 在 :"
"issue:`36048` 和 :issue:`20092` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1617
#, fuzzy
msgid ""
"Heap-allocated type objects will now increase their reference count in :c:"
"func:`PyObject_Init` (and its parallel macro ``PyObject_INIT``) instead of "
"in :c:func:`PyType_GenericAlloc`. Types that modify instance allocation or "
"deallocation may need to be adjusted. (Contributed by Eddie Elizondo in :"
"issue:`35810`.)"
msgstr ""
"堆分配的型別物件現在將在 :c:func:`PyObject_Init`（及其並行巨集 "
"``PyObject_INIT``）中增加它們的引用計數，而不是在 :c:func:"
"`PyType_GenericAlloc` 中。可能需要調整修改實例分配或釋放的型別。 （由 Eddie "
"Elizondo 在 :issue:`35810` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1623
#, fuzzy
msgid ""
"The new function :c:func:`PyCode_NewWithPosOnlyArgs` allows to create code "
"objects like :c:func:`PyCode_New`, but with an extra *posonlyargcount* "
"parameter for indicating the number of positional-only arguments. "
"(Contributed by Pablo Galindo in :issue:`37221`.)"
msgstr ""
"新函式 :c:func:`PyCode_NewWithPosOnlyArgs` 允許建立類似 :c:func:`PyCode_New` "
"的程式碼物件，但有一個額外的 *posonlyargcount* 參數用於指示僅位置參數的數"
"量。 （由 Pablo Galindo 在 :issue:`37221` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1628
#, fuzzy
msgid ""
":c:func:`Py_SetPath` now sets :data:`sys.executable` to the program full "
"path (:c:func:`Py_GetProgramFullPath`) rather than to the program name (:c:"
"func:`Py_GetProgramName`). (Contributed by Victor Stinner in :issue:`38234`.)"
msgstr ""
":c:func:`Py_SetPath` 現在將 :data:`sys.executable` 設定為程式完整路徑 (:c:"
"func:`Py_GetProgramFullPath`) 而不是程式名稱 (:c:func:`Py_GetProgramName`)。 "
"（由 Victor Stinner 在 :issue:`38234` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1635
msgid "Deprecated"
msgstr "棄用"

#: ../../whatsnew/3.8.rst:1637
#, fuzzy
msgid ""
"The distutils ``bdist_wininst`` command is now deprecated, use "
"``bdist_wheel`` (wheel packages) instead. (Contributed by Victor Stinner in :"
"issue:`37481`.)"
msgstr ""
"distutils ``bdist_wininst`` 命令現已棄用，請改用 ``bdist_wheel``（輪包）。 "
"（由 Victor Stinner 在 :issue:`37481` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1641
#, fuzzy
msgid ""
"Deprecated methods ``getchildren()`` and ``getiterator()`` in the :mod:`~xml."
"etree.ElementTree` module now emit a :exc:`DeprecationWarning` instead of :"
"exc:`PendingDeprecationWarning`. They will be removed in Python 3.9. "
"(Contributed by Serhiy Storchaka in :issue:`29209`.)"
msgstr ""
":mod:`~xml.etree.ElementTree` 模組中棄用的方法 ``getchildren()`` 和 "
"``getiterator()`` 現在會發出 :exc:`DeprecationWarning` 而不是 :exc:"
"`PendingDeprecationWarning`。它們將在 Python 3.9 中被刪除。 （由 Serhiy "
"Storchaka 在 :issue:`29209` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1647
#, fuzzy
msgid ""
"Passing an object that is not an instance of :class:`concurrent.futures."
"ThreadPoolExecutor` to :meth:`loop.set_default_executor() <asyncio.loop."
"set_default_executor>` is deprecated and will be prohibited in Python 3.9. "
"(Contributed by Elvis Pranskevichus in :issue:`34075`.)"
msgstr ""
"將不是 concurrent.futures.ThreadPoolExecutor 實例的對像傳遞給 loop."
"set_default_executor() <asyncio.loop.set_default_executor> 已被棄用，並將在 "
"Python 3.9 中被禁止。 （由 Elvis Pranskevichus 在 :issue:`34075` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1653
#, fuzzy
msgid ""
"The :meth:`__getitem__` methods of :class:`xml.dom.pulldom.DOMEventStream`, :"
"class:`wsgiref.util.FileWrapper` and :class:`fileinput.FileInput` have been "
"deprecated."
msgstr ""
":class:`xml.dom.pulldom.DOMEventStream`、:class:`wsgiref.util.FileWrapper` "
"和 :class:`fileinput.FileInput` 的 :meth:`__getitem__` 方法已被棄用。"

#: ../../whatsnew/3.8.rst:1657
#, fuzzy
msgid ""
"Implementations of these methods have been ignoring their *index* parameter, "
"and returning the next item instead. (Contributed by Berker Peksag in :issue:"
"`9372`.)"
msgstr ""
"這些方法的實作忽略了它們的 *index* 參數，而是回傳下一項。 （由 Berker Peksag "
"在 :issue:`9372` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1661
#, fuzzy
msgid ""
"The :class:`typing.NamedTuple` class has deprecated the ``_field_types`` "
"attribute in favor of the ``__annotations__`` attribute which has the same "
"information. (Contributed by Raymond Hettinger in :issue:`36320`.)"
msgstr ""
":class:`typing.NamedTuple` 類棄用了``_field_types`` 屬性，取而代之的是具有相"
"同資訊的``__annotations__`` 屬性。 （由 Raymond Hettinger 在 :issue:`36320` "
"中貢獻。）"

#: ../../whatsnew/3.8.rst:1665
#, fuzzy
msgid ""
":mod:`ast` classes ``Num``, ``Str``, ``Bytes``, ``NameConstant`` and "
"``Ellipsis`` are considered deprecated and will be removed in future Python "
"versions. :class:`~ast.Constant` should be used instead. (Contributed by "
"Serhiy Storchaka in :issue:`32892`.)"
msgstr ""
":mod:`ast` 類 ``Num``、``Str``、``Bytes``、``NameConstant`` 和 ``Ellipsis`` "
"被認為已棄用，將在未來的 Python 版本中刪除。 :class:`~ast.Constant` 應該改"
"用。 （由 Serhiy Storchaka 在 :issue:`32892` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1670
#, fuzzy
msgid ""
":class:`ast.NodeVisitor` methods ``visit_Num()``, ``visit_Str()``, "
"``visit_Bytes()``, ``visit_NameConstant()`` and ``visit_Ellipsis()`` are "
"deprecated now and will not be called in future Python versions. Add the :"
"meth:`~ast.NodeVisitor.visit_Constant` method to handle all constant nodes. "
"(Contributed by Serhiy Storchaka in :issue:`36917`.)"
msgstr ""
":class:`ast.NodeVisitor` 方法 ``visit_Num()``、``visit_Str()``、"
"``visit_Bytes()``、``visit_NameConstant()`` 和 ``visit_Ellipsis()`` 已棄用現"
"在並且不會在未來的 Python 版本中呼叫。新增 :meth:`~ast.NodeVisitor."
"visit_Constant` 方法來處理所有常數節點。 （由 Serhiy Storchaka 在 :issue:"
"`36917` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1677
#, fuzzy
msgid ""
"The :func:`asyncio.coroutine` :term:`decorator` is deprecated and will be "
"removed in version 3.10.  Instead of ``@asyncio.coroutine``, use :keyword:"
"`async def` instead. (Contributed by Andrew Svetlov in :issue:`36921`.)"
msgstr ""
":func:`asyncio.coroutine` :term:`decorator` 已棄用，將在 3.10 版中刪除。而不"
"是``@asyncio.coroutine``，而是使用 :keyword:`async def`。 （由 Andrew "
"Svetlov 在 :issue:`36921` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1682
#, fuzzy
msgid ""
"In :mod:`asyncio`, the explicit passing of a *loop* argument has been "
"deprecated and will be removed in version 3.10 for the following: :func:"
"`asyncio.sleep`, :func:`asyncio.gather`, :func:`asyncio.shield`, :func:"
"`asyncio.wait_for`, :func:`asyncio.wait`, :func:`asyncio.as_completed`, :"
"class:`asyncio.Task`, :class:`asyncio.Lock`, :class:`asyncio.Event`, :class:"
"`asyncio.Condition`, :class:`asyncio.Semaphore`, :class:`asyncio."
"BoundedSemaphore`, :class:`asyncio.Queue`, :func:`asyncio."
"create_subprocess_exec`, and :func:`asyncio.create_subprocess_shell`."
msgstr ""
"在 :mod:`asyncio` 中，*loop* 參數的顯式傳遞已被棄用，並將在 3.10 版中刪除以下"
"內容：:func:`asyncio.sleep`, :func:`asyncio.gather`, : func:`asyncio."
"shield`, :func:`asyncio.wait_for`, :func:`asyncio.wait`, :func:`asyncio."
"as_completed`, :class:`asyncio.Task`, :class:`asyncio. Lock`, :class:"
"`asyncio.Event`, :class:`asyncio.Condition`, :class:`asyncio.Semaphore`, :"
"class:`asyncio.BoundedSemaphore`, :class:`asyncio.Queue`, :func :`asyncio."
"create_subprocess_exec` 和 :func:`asyncio.create_subprocess_shell`。"

#: ../../whatsnew/3.8.rst:1692
#, fuzzy
msgid ""
"The explicit passing of coroutine objects to :func:`asyncio.wait` has been "
"deprecated and will be removed in version 3.11. (Contributed by Yury "
"Selivanov in :issue:`34790`.)"
msgstr ""
"將協程物件顯式傳遞給 :func:`asyncio.wait` 已被棄用，並將在 3.11 版中刪除。 "
"（由 Yury Selivanov 在 :issue:`34790` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1696
#, fuzzy
msgid ""
"The following functions and methods are deprecated in the :mod:`gettext` "
"module: :func:`~gettext.lgettext`, :func:`~gettext.ldgettext`, :func:"
"`~gettext.lngettext` and :func:`~gettext.ldngettext`. They return encoded "
"bytes, and it's possible that you will get unexpected Unicode-related "
"exceptions if there are encoding problems with the translated strings. It's "
"much better to use alternatives which return Unicode strings in Python 3. "
"These functions have been broken for a long time."
msgstr ""
"以下函式和方法在 :mod:`gettext` 模組中已棄用：:func:`~gettext.lgettext`、:"
"func:`~gettext.ldgettext`、:func:`~gettext.lngettext` 和 :func: `~gettext."
"ldngettext`。它們回傳編碼位元組，如果翻譯後的字串存在編碼問題，您可能會遇到"
"與 Unicode 相關的意外例外。在 Python 3 中使用回傳 Unicode 字串的替代方法要好"
"得多。這些函式已經被破壞了很長時間。"

#: ../../whatsnew/3.8.rst:1704
#, fuzzy
msgid ""
"Function :func:`~gettext.bind_textdomain_codeset`, methods :meth:`~gettext."
"NullTranslations.output_charset` and :meth:`~gettext.NullTranslations."
"set_output_charset`, and the *codeset* parameter of functions :func:"
"`~gettext.translation` and :func:`~gettext.install` are also deprecated, "
"since they are only used for the ``l*gettext()`` functions. (Contributed by "
"Serhiy Storchaka in :issue:`33710`.)"
msgstr ""
"函式 :func:`~gettext.bind_textdomain_codeset`，方法 :meth:`~gettext."
"NullTranslations.output_charset` 和 :meth:`~gettext.NullTranslations."
"set_output_charset`，以及函式的 *codeset* 參數 :func:`~gettext .translation` "
"和 :func:`~gettext.install` 也已棄用，因為它們僅用於 ``l*gettext()`` 函式。 "
"（由 Serhiy Storchaka 在 :issue:`33710` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1712
msgid ""
"The :meth:`~threading.Thread.isAlive()` method of :class:`threading.Thread` "
"has been deprecated. (Contributed by Dong-hee Na in :issue:`35283`.)"
msgstr ""
":class:`threading.Thread` 的 :meth:`~threading.Thread.isAlive()` 方法已被棄"
"用。（由 Dong-hee Na 在 :issue:`35283` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1716
#, fuzzy
msgid ""
"Many builtin and extension functions that take integer arguments will now "
"emit a deprecation warning for :class:`~decimal.Decimal`\\ s, :class:"
"`~fractions.Fraction`\\ s and any other objects that can be converted to "
"integers only with a loss (e.g. that have the :meth:`~object.__int__` method "
"but do not have the :meth:`~object.__index__` method).  In future version "
"they will be errors. (Contributed by Serhiy Storchaka in :issue:`36048`.)"
msgstr ""
"許多采用整數參數的內建函式和擴充函式現在將為 :class:`~decimal.Decimal`\\ s、:"
"class:`~fractions.Fraction`\\ s 和任何其他只能轉換為整數的物件發出棄用警告有"
"損失（例如，有 :meth:`~object.__int__` 方法但沒有 :meth:`~object.__index__` "
"方法）。在未來的版本中，它們將是錯誤的。 （由 Serhiy Storchaka 在 :issue:"
"`36048` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1724
#, fuzzy
msgid "Deprecated passing the following arguments as keyword arguments:"
msgstr "棄用將以下參數作為關鍵字參數傳遞："

#: ../../whatsnew/3.8.rst:1726
#, fuzzy
msgid ""
"*func* in :func:`functools.partialmethod`, :func:`weakref.finalize`, :meth:"
"`profile.Profile.runcall`, :meth:`cProfile.Profile.runcall`, :meth:`bdb.Bdb."
"runcall`, :meth:`trace.Trace.runfunc` and :func:`curses.wrapper`."
msgstr ""
"*func* 在 :func:`functools.partialmethod`， :func:`weakref.finalize`， :meth:"
"`profile.Profile.runcall`， :meth:`cProfile.Profile.runcall`， :meth:`bdb。 "
"Bdb.runcall`、:meth:`trace.Trace.runfunc` 和 :func:`curses.wrapper`。"

#: ../../whatsnew/3.8.rst:1730
msgid "*function* in :meth:`unittest.TestCase.addCleanup`."
msgstr ":meth:`unittest.TestCase.addCleanup` 中的 *function*。"

#: ../../whatsnew/3.8.rst:1731
#, fuzzy
msgid ""
"*fn* in the :meth:`~concurrent.futures.Executor.submit` method of :class:"
"`concurrent.futures.ThreadPoolExecutor` and :class:`concurrent.futures."
"ProcessPoolExecutor`."
msgstr ""
"*fn* 在 concurrent.futures.ThreadPoolExecutor 和 concurrent.futures."
"ProcessPoolExecutor 的 :meth:`~concurrent.futures.Executor.submit` 方法中。"

#: ../../whatsnew/3.8.rst:1734
#, fuzzy
msgid ""
"*callback* in :meth:`contextlib.ExitStack.callback`, :meth:`contextlib."
"AsyncExitStack.callback` and :meth:`contextlib.AsyncExitStack."
"push_async_callback`."
msgstr ""
"*回呼*在 :meth:`contextlib.ExitStack.callback`、:meth:`contextlib."
"AsyncExitStack.callback` 和 :meth:`contextlib.AsyncExitStack."
"push_async_callback`。"

#: ../../whatsnew/3.8.rst:1737
#, fuzzy
msgid ""
"*c* and *typeid* in the :meth:`~multiprocessing.managers.Server.create` "
"method of :class:`multiprocessing.managers.Server` and :class:"
"`multiprocessing.managers.SharedMemoryServer`."
msgstr ""
"multiprocessing.managers.Server 和 multiprocessing.managers."
"SharedMemoryServer 的 :meth:`~multiprocessing.managers.Server.create` 方法中"
"的 *c* 和 *typeid*。"

#: ../../whatsnew/3.8.rst:1740
msgid "*obj* in :func:`weakref.finalize`."
msgstr "*obj* 在 :func:`weakref.finalize` 中。"

#: ../../whatsnew/3.8.rst:1742
#, fuzzy
msgid ""
"In future releases of Python, they will be :ref:`positional-only <positional-"
"only_parameter>`. (Contributed by Serhiy Storchaka in :issue:`36492`.)"
msgstr ""
"在 Python 的未來版本中，它們將是 :ref:`positional-only <positional-"
"only_parameter>`。 （由 Serhiy Storchaka 在 :issue:`36492` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1748
msgid "API and Feature Removals"
msgstr "API 和功能刪除"

#: ../../whatsnew/3.8.rst:1750
msgid "The following features and APIs have been removed from Python 3.8:"
msgstr "以下功能和 API 已從 Python 3.8 中刪除："

#: ../../whatsnew/3.8.rst:1752
#, fuzzy
msgid ""
"Starting with Python 3.3, importing ABCs from :mod:`collections` was "
"deprecated, and importing should be done from :mod:`collections.abc`. Being "
"able to import from collections was marked for removal in 3.8, but has been "
"delayed to 3.9. (See :issue:`36952`.)"
msgstr ""
"從 Python 3.3 開始，不推薦從 :mod:`collections` 引入 ABC，應該從 :mod:"
"`collections.abc` 引入。能夠從集合中引入在 3.8 中標記為刪除，但已延遲到 "
"3.9。 （參見 :issue:`36952`。）"

#: ../../whatsnew/3.8.rst:1757
msgid ""
"The :mod:`macpath` module, deprecated in Python 3.7, has been removed. "
"(Contributed by Victor Stinner in :issue:`35471`.)"
msgstr ""
"在 Python 3.7 中棄用的 :mod:`macpath` 模組已被刪除。 （由 Victor Stinner 在 :"
"issue:`35471` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1760 ../../whatsnew/3.8.rst:1879
msgid ""
"The function :func:`platform.popen` has been removed, after having been "
"deprecated since Python 3.3: use :func:`os.popen` instead. (Contributed by "
"Victor Stinner in :issue:`35345`.)"
msgstr ""
"自 Python 3.3 以來已被棄用的函式 :func:`platform.popen` 已被刪除：請改為使"
"用 :func:`os.popen`。（由 Victor Stinner 在 :issue:`35345` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1764
#, fuzzy
msgid ""
"The function :func:`time.clock` has been removed, after having been "
"deprecated since Python 3.3: use :func:`time.perf_counter` or :func:`time."
"process_time` instead, depending on your requirements, to have well-defined "
"behavior. (Contributed by Matthias Bussonnier in :issue:`36895`.)"
msgstr ""
"函式 :func:`time.clock` 已被刪除，自 Python 3.3 以來已被棄用：使用 :func:"
"`time.perf_counter` 或 :func:`time.process_time` 代替，具體取決於您的要求，以"
"獲得良好的-定義的行為。 （由 Matthias Bussonnier 在 :issue:`36895` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1770
#, fuzzy
msgid ""
"The ``pyvenv`` script has been removed in favor of ``python3.8 -m venv`` to "
"help eliminate confusion as to what Python interpreter the ``pyvenv`` script "
"is tied to. (Contributed by Brett Cannon in :issue:`25427`.)"
msgstr ""
"``pyvenv`` 腳本已被刪除，取而代之的是``python3.8 -m venv``，以幫助消除關於"
"``pyvenv`` 腳本綁定到哪個 Python 直譯器的混淆。 （由 Brett Cannon 在 :issue:"
"`25427` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1774
#, fuzzy
msgid ""
"``parse_qs``, ``parse_qsl``, and ``escape`` are removed from the :mod:`cgi` "
"module.  They are deprecated in Python 3.2 or older. They should be imported "
"from the ``urllib.parse`` and ``html`` modules instead."
msgstr ""
"``parse_qs``、``parse_qsl`` 和 ``escape`` 已從 :mod:`cgi` 模組中刪除。它們在 "
"Python 3.2 或更早版本中已棄用。它們應該從 ``urllib.parse`` 和 ``html`` 模組導"
"入。"

#: ../../whatsnew/3.8.rst:1778
#, fuzzy
msgid ""
"``filemode`` function is removed from the :mod:`tarfile` module. It is not "
"documented and deprecated since Python 3.3."
msgstr ""
"``filemode`` 函式已從 :mod:`tarfile` 模組中刪除。自 Python 3.3 以來，它沒有記"
"錄和棄用。"

#: ../../whatsnew/3.8.rst:1781
#, fuzzy
msgid ""
"The :class:`~xml.etree.ElementTree.XMLParser` constructor no longer accepts "
"the *html* argument.  It never had an effect and was deprecated in Python "
"3.4. All other parameters are now :ref:`keyword-only <keyword-"
"only_parameter>`. (Contributed by Serhiy Storchaka in :issue:`29209`.)"
msgstr ""
":class:`~xml.etree.ElementTree.XMLParser` 構造函式不再接受 *html* 參數。它從"
"未產生過效果，並在 Python 3.4 中被棄用。所有其他參數現在都是 :ref:`keyword-"
"only <keyword-only_parameter>`。 （由 Serhiy Storchaka 在 :issue:`29209` 中貢"
"獻。）"

#: ../../whatsnew/3.8.rst:1786
#, fuzzy
msgid ""
"Removed the ``doctype()`` method of :class:`~xml.etree.ElementTree."
"XMLParser`. (Contributed by Serhiy Storchaka in :issue:`29209`.)"
msgstr ""
"刪除了 :class:`~xml.etree.ElementTree.XMLParser` 的 ``doctype()`` 方法。 "
"（由 Serhiy Storchaka 在 :issue:`29209` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1789
msgid ""
"\"unicode_internal\" codec is removed. (Contributed by Inada Naoki in :issue:"
"`36297`.)"
msgstr ""
"\"unicode_internal\"  編解碼器已被刪除。（由 Inada Naoki 在 :issue:`36297` 中"
"貢獻。）"

#: ../../whatsnew/3.8.rst:1792
#, fuzzy
msgid ""
"The ``Cache`` and ``Statement`` objects of the :mod:`sqlite3` module are not "
"exposed to the user. (Contributed by Aviv Palivoda in :issue:`30262`.)"
msgstr ""
":mod:`sqlite3` 模組的``Cache`` 和``Statement`` 對像不會暴露給使用者。 （由 "
"Aviv Palivoda 在 :issue:`30262` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1796
#, fuzzy
msgid ""
"The ``bufsize`` keyword argument of :func:`fileinput.input` and :func:"
"`fileinput.FileInput` which was ignored and deprecated since Python 3.6 has "
"been removed. :issue:`36952` (Contributed by Matthias Bussonnier.)"
msgstr ""
":func:`fileinput.input` 和 :func:`fileinput.FileInput` 的 ``bufsize`` 關鍵字"
"參數自 Python 3.6 以來被忽略和棄用，已被刪除。 :issue:`36952`（由 Matthias "
"Bussonnier 提供。）"

#: ../../whatsnew/3.8.rst:1800
#, fuzzy
msgid ""
"The functions :func:`sys.set_coroutine_wrapper` and :func:`sys."
"get_coroutine_wrapper` deprecated in Python 3.7 have been removed; :issue:"
"`36933` (Contributed by Matthias Bussonnier.)"
msgstr ""
"Python 3.7 中棄用的函式 :func:`sys.set_coroutine_wrapper` 和 :func:`sys."
"get_coroutine_wrapper` 已被刪除； :issue:`36933`（由 Matthias Bussonnier 提"
"供。）"

#: ../../whatsnew/3.8.rst:1806
msgid "Porting to Python 3.8"
msgstr "移植到 Python 3.8"

#: ../../whatsnew/3.8.rst:1808
#, fuzzy
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr "本節列出了先前描述的更改和其他可能需要更改程式碼的錯誤修復。"

#: ../../whatsnew/3.8.rst:1813
msgid "Changes in Python behavior"
msgstr "Python 行為的改變"

#: ../../whatsnew/3.8.rst:1815
#, fuzzy
msgid ""
"Yield expressions (both ``yield`` and ``yield from`` clauses) are now "
"disallowed in comprehensions and generator expressions (aside from the "
"iterable expression in the leftmost :keyword:`!for` clause). (Contributed by "
"Serhiy Storchaka in :issue:`10544`.)"
msgstr ""
"Yield 表達式（``yield`` 和 ``yield from`` 子句）現在在理解和生成器表達式中是"
"不允許的（除了最左邊的可疊代表達式 :keyword:`!for` 子句）。 （由 Serhiy "
"Storchaka 在 :issue:`10544` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1820
#, fuzzy
msgid ""
"The compiler now produces a :exc:`SyntaxWarning` when identity checks "
"(``is`` and ``is not``) are used with certain types of literals (e.g. "
"strings, numbers).  These can often work by accident in CPython, but are not "
"guaranteed by the language spec.  The warning advises users to use equality "
"tests (``==`` and ``!=``) instead. (Contributed by Serhiy Storchaka in :"
"issue:`34850`.)"
msgstr ""
"當身份檢查（``is`` 和 ``is not``）與某些型別的文字（例如字串、數字）一起使用"
"時，編譯器現在會生成一個 :exc:`SyntaxWarning`。這些在 CPython 中經常會意外工"
"作，但語言規範不保證。該警告建議使用者改用相等性測試（``==`` 和 ``!=``）。 "
"（由 Serhiy Storchaka 在 :issue:`34850` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1827
#, fuzzy
msgid ""
"The CPython interpreter can swallow exceptions in some circumstances. In "
"Python 3.8 this happens in fewer cases.  In particular, exceptions raised "
"when getting the attribute from the type dictionary are no longer ignored. "
"(Contributed by Serhiy Storchaka in :issue:`35459`.)"
msgstr ""
"CPython 直譯器在某些情況下可以吞下例外。在 Python 3.8 中，這種情況很少發生。"
"特別是，不再忽略從型別字典獲取屬性時引發的例外。 （由 Serhiy Storchaka 在 :"
"issue:`35459` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1832
#, fuzzy
msgid ""
"Removed ``__str__`` implementations from builtin types :class:`bool`, :class:"
"`int`, :class:`float`, :class:`complex` and few classes from the standard "
"library.  They now inherit ``__str__()`` from :class:`object`. As result, "
"defining the ``__repr__()`` method in the subclass of these classes will "
"affect their string representation. (Contributed by Serhiy Storchaka in :"
"issue:`36793`.)"
msgstr ""
"從內建型別 :class:`bool`、:class:`int`、:class:`float`、:class:`complex` 和標"
"準庫中的幾個類中刪除了``__str__`` 實作。他們現在從 :class:`object` 繼承了"
"``__str__()``。因此，在這些類的子類別中定義 ``__repr__()`` 方法將影響它們的字"
"串表示。 （由 Serhiy Storchaka 在 :issue:`36793` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1839
#, fuzzy
msgid ""
"On AIX, :attr:`sys.platform` doesn't contain the major version anymore. It "
"is always ``'aix'``, instead of ``'aix3'`` .. ``'aix7'``.  Since older "
"Python versions include the version number, so it is recommended to always "
"use ``sys.platform.startswith('aix')``. (Contributed by M. Felt in :issue:"
"`36588`.)"
msgstr ""
"在 AIX 上，:attr:`sys.platform` 不再包含主要版本。它始終是 ``'aix'``，而不是 "
"``'aix3'`` .. ``'aix7'``。由於較早的 Python 版本包含版本號，因此建議始終使用 "
"``sys.platform.startswith('aix')``。 （由 M. Felt 在 :issue:`36588` 中貢"
"獻。）"

#: ../../whatsnew/3.8.rst:1845
#, fuzzy
msgid ""
":c:func:`PyEval_AcquireLock` and :c:func:`PyEval_AcquireThread` now "
"terminate the current thread if called while the interpreter is finalizing, "
"making them consistent with :c:func:`PyEval_RestoreThread`, :c:func:"
"`Py_END_ALLOW_THREADS`, and :c:func:`PyGILState_Ensure`. If this behavior is "
"not desired, guard the call by checking :c:func:`_Py_IsFinalizing` or :c:"
"func:`sys.is_finalizing`. (Contributed by Joannah Nanjekye in :issue:"
"`36475`.)"
msgstr ""
":c:func:`PyEval_AcquireLock` 和 :c:func:`PyEval_AcquireThread` 現在在直譯器完"
"成時呼叫時終止當前執行緒，使它們與 :c:func:`PyEval_RestoreThread`、:c:func:"
"`Py_END_ALLOW_THREADS 一致`, 和 :c:func:`PyGILState_Ensure`。如果不需要此行"
"為，請通過檢查 :c:func:`_Py_IsFinalizing` 或 :c:func:`sys.is_finalizing` 來保"
"護呼叫。 （由 Joannah Nanjekye 在 :issue:`36475` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1855
msgid "Changes in the Python API"
msgstr "Python API 的改變"

#: ../../whatsnew/3.8.rst:1857
#, fuzzy
msgid ""
"The :func:`os.getcwdb` function now uses the UTF-8 encoding on Windows, "
"rather than the ANSI code page: see :pep:`529` for the rationale. The "
"function is no longer deprecated on Windows. (Contributed by Victor Stinner "
"in :issue:`37412`.)"
msgstr ""
":func:`os.getcwdb` 函式現在在 Windows 上使用 UTF-8 編碼，而不是 ANSI 程式碼"
"頁：請參閱 :pep:`529` 了解基本原理。該函式在 Windows 上不再被棄用。 （由 "
"Victor Stinner 在 :issue:`37412` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1862
#, fuzzy
msgid ""
":class:`subprocess.Popen` can now use :func:`os.posix_spawn` in some cases "
"for better performance. On Windows Subsystem for Linux and QEMU User "
"Emulation, the :class:`Popen` constructor using :func:`os.posix_spawn` no "
"longer raises an exception on errors like \"missing program\".  Instead the "
"child process fails with a non-zero :attr:`~Popen.returncode`. (Contributed "
"by Joannah Nanjekye and Victor Stinner in :issue:`35537`.)"
msgstr ""
":class:`subprocess.Popen` 現在可以在某些情況下使用 :func:`os.posix_spawn` 以"
"獲得更好的性能。在適用於 Linux 和 QEMU 使用者仿真的 Windows 子系統上，使用 "
"os.posix_spawn 的 :class:`Popen` 構造函式不再引發“缺少程式”等錯誤的例外。相"
"反，子行程失敗並回傳非零 :attr:`~Popen.returncode`。 （由 Joannah Nanjekye "
"和 Victor Stinner 在 :issue:`35537` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1869
#, fuzzy
msgid ""
"The *preexec_fn* argument of * :class:`subprocess.Popen` is no longer "
"compatible with subinterpreters. The use of the parameter in a "
"subinterpreter now raises :exc:`RuntimeError`. (Contributed by Eric Snow in :"
"issue:`34651`, modified by Christian Heimes in :issue:`37951`.)"
msgstr ""
"* :class:`subprocess.Popen` 的 *preexec_fn* 參數不再與子直譯器相容。現在在子"
"直譯器中使用參數會引發 :exc:`RuntimeError`。 （由 Eric Snow 在 :issue:"
"`34651` 中貢獻，由 Christian Heimes 在 :issue:`37951` 中修改。）"

#: ../../whatsnew/3.8.rst:1875
#, fuzzy
msgid ""
"The :meth:`imap.IMAP4.logout` method no longer silently ignores arbitrary "
"exceptions. (Contributed by Victor Stinner in :issue:`36348`.)"
msgstr ""
":meth:`imap.IMAP4.logout` 方法不再默默地忽略任意例外。 （由 Victor Stinner "
"在 :issue:`36348` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1883
#, fuzzy
msgid ""
"The :func:`statistics.mode` function no longer raises an exception when "
"given multimodal data.  Instead, it returns the first mode encountered in "
"the input data.  (Contributed by Raymond Hettinger in :issue:`35892`.)"
msgstr ""
":func:`statistics.mode` 函式在給定多模式資料時不再引發例外。相反，它回傳輸入"
"資料中遇到的第一個模式。 （由 Raymond Hettinger 在 :issue:`35892` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1888
#, fuzzy
msgid ""
"The :meth:`~tkinter.ttk.Treeview.selection` method of the :class:`tkinter."
"ttk.Treeview` class no longer takes arguments.  Using it with arguments for "
"changing the selection was deprecated in Python 3.6.  Use specialized "
"methods like :meth:`~tkinter.ttk.Treeview.selection_set` for changing the "
"selection.  (Contributed by Serhiy Storchaka in :issue:`31508`.)"
msgstr ""
":class:`tkinter.ttk.Treeview` 類的 :meth:`~tkinter.ttk.Treeview.selection` 方"
"法不再接受參數。在 Python 3.6 中不推薦使用它和參數來更改選擇。使用像 :meth:"
"`~tkinter.ttk.Treeview.selection_set` 這樣的專門方法來更改選擇。 （由 Serhiy "
"Storchaka 在 :issue:`31508` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1894
#, fuzzy
msgid ""
"The :meth:`writexml`, :meth:`toxml` and :meth:`toprettyxml` methods of :mod:"
"`xml.dom.minidom`, and the :meth:`write` method of :mod:`xml.etree`, now "
"preserve the attribute order specified by the user. (Contributed by Diego "
"Rojas and Raymond Hettinger in :issue:`34160`.)"
msgstr ""
":meth:`writexml`、:meth:`toxml` 和:meth:`toprettyxml` 方法 :"
"mod:`xml.dom.minidom` 和 :meth:`write` 方法 :mod:`xml。 etree`，現在保留使用"
"者指定的屬性順序。 （由 Diego Rojas 和 Raymond Hettinger 在 :issue:`34160` 中"
"貢獻。）"

#: ../../whatsnew/3.8.rst:1899
#, fuzzy
msgid ""
"A :mod:`dbm.dumb` database opened with flags ``'r'`` is now read-only. :func:"
"`dbm.dumb.open` with flags ``'r'`` and ``'w'`` no longer creates a database "
"if it does not exist. (Contributed by Serhiy Storchaka in :issue:`32749`.)"
msgstr ""
"使用旗標 ``'r'`` 打開的 :mod:`dbm.dumb` 資料庫現在是只讀的。帶有旗標 ``'r'`` "
"和 ``'w'`` 的 :func:`dbm.dumb.open` 不再建立不存在的資料庫。 （由 Serhiy "
"Storchaka 在 :issue:`32749` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1904
#, fuzzy
msgid ""
"The ``doctype()`` method defined in a subclass of :class:`~xml.etree."
"ElementTree.XMLParser` will no longer be called and will emit a :exc:"
"`RuntimeWarning` instead of a :exc:`DeprecationWarning`. Define the :meth:"
"`doctype() <xml.etree.ElementTree.TreeBuilder.doctype>` method on a target "
"for handling an XML doctype declaration. (Contributed by Serhiy Storchaka "
"in :issue:`29209`.)"
msgstr ""
"在 :class:`~xml.etree.ElementTree.XMLParser` 的子類別中定義的 ``doctype()`` "
"方法將不再被呼叫，並將發出 :exc:`RuntimeWarning` 而不是 :exc:"
"`DeprecationWarning `。在處理 XML 文檔型別聲明的目標上定義 :meth:`doctype() "
"<xml.etree.ElementTree.TreeBuilder.doctype>` 方法。 （由 Serhiy Storchaka "
"在 :issue:`29209` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1911
#, fuzzy
msgid ""
"A :exc:`RuntimeError` is now raised when the custom metaclass doesn't "
"provide the ``__classcell__`` entry in the namespace passed to ``type."
"__new__``.  A :exc:`DeprecationWarning` was emitted in Python 3.6--3.7.  "
"(Contributed by Serhiy Storchaka in :issue:`23722`.)"
msgstr ""
"當自定義元類未在傳遞給 type.__new__ 的命名空間中提供 __classcell__ 條目時，現"
"在會引發 :exc:`RuntimeError`。 :exc:`DeprecationWarning` 在 Python 3.6--3.7 "
"中發出。 （由 Serhiy Storchaka 在 :issue:`23722` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1916
msgid ""
"The :class:`cProfile.Profile` class can now be used as a context manager. "
"(Contributed by Scott Sanderson in :issue:`29235`.)"
msgstr ""
":class:`cProfile.Profile` 類別現在可以用作情境管理器。（由 Scott Sanderson "
"在 :issue:`29235` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1919
#, fuzzy
msgid ""
":func:`shutil.copyfile`, :func:`shutil.copy`, :func:`shutil.copy2`, :func:"
"`shutil.copytree` and :func:`shutil.move` use platform-specific \"fast-"
"copy\" syscalls (see :ref:`shutil-platform-dependent-efficient-copy-"
"operations` section)."
msgstr ""
":func:`shutil.copyfile`, :func:`shutil.copy`, :func:`shutil.copy2`, :func:"
"`shutil.copytree` 和 :func:`shutil.move` 使用平台特定的“快速-copy”系統呼叫"
"（參見 shutil-platform-dependent-efficient-copy-operations 部分）。"

#: ../../whatsnew/3.8.rst:1924
msgid ""
":func:`shutil.copyfile` default buffer size on Windows was changed from 16 "
"KiB to 1 MiB."
msgstr ""
":func:`shutil.copyfile` 在 Windows 上的預設緩衝區大小從 16 KiB 更改為 1 MiB。"

#: ../../whatsnew/3.8.rst:1927
msgid ""
"The ``PyGC_Head`` struct has changed completely.  All code that touched the "
"struct member should be rewritten.  (See :issue:`33597`.)"
msgstr ""
"``PyGC_Head`` 結構已完全改變。所有涉及結構成員的程式碼都應該重寫。 （參見 :"
"issue:`33597`。）"

#: ../../whatsnew/3.8.rst:1930
#, fuzzy
msgid ""
"The :c:type:`PyInterpreterState` struct has been moved into the \"internal\" "
"header files (specifically Include/internal/pycore_pystate.h).  An opaque "
"``PyInterpreterState`` is still available as part of the public API (and "
"stable ABI).  The docs indicate that none of the struct's fields are public, "
"so we hope no one has been using them.  However, if you do rely on one or "
"more of those private fields and have no alternative then please open a BPO "
"issue.  We'll work on helping you adjust (possibly including adding accessor "
"functions to the public API).  (See :issue:`35886`.)"
msgstr ""
":c:type:`PyInterpreterState` 結構已移至“內部”標頭檔（特別是 Include/internal/"
"pycore_pystate.h）。作為公開 API（和穩定的 ABI）的一部分，不透明"
"的“PyInterpreterState”仍然可用。文檔表明該結構的欄位都不是公開的，因此我們希"
"望沒有人使用過它們。但是，如果您確實依賴一個或多個這些私有欄位並且別無選擇，"
"那麼請打開一個 BPO 問題。我們將努力幫助您進行調整（可能包括向公開 API 新增訪"
"問器函式）。 （參見 :issue:`35886`。）"

#: ../../whatsnew/3.8.rst:1940
#, fuzzy
msgid ""
"The :meth:`mmap.flush() <mmap.mmap.flush>` method now returns ``None`` on "
"success and raises an exception on error under all platforms.  Previously, "
"its behavior was platform-dependent: a nonzero value was returned on "
"success; zero was returned on error under Windows.  A zero value was "
"returned on success; an exception was raised on error under Unix. "
"(Contributed by Berker Peksag in :issue:`2122`.)"
msgstr ""
":meth:`mmap.flush() <mmap.mmap.flush>` 方法現在在成功時回傳 ``None`` 並在所有"
"平台下引發錯誤例外。以前，它的行為是依賴於平台的：成功時回傳一個非零值；在 "
"Windows 下錯誤回傳零。成功回傳零值；在 Unix 下錯誤引發例外。 （由 Berker "
"Peksag 在 :issue:`2122` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1947
msgid ""
":mod:`xml.dom.minidom` and :mod:`xml.sax` modules no longer process external "
"entities by default. (Contributed by Christian Heimes in :issue:`17239`.)"
msgstr ""
":mod:`xml.dom.minidom` 和 :mod:`xml.sax` 模組預設不再處理外部實體。 （由 "
"Christian Heimes 在 :issue:`17239` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1951
#, fuzzy
msgid ""
"Deleting a key from a read-only :mod:`dbm` database (:mod:`dbm.dumb`, :mod:"
"`dbm.gnu` or :mod:`dbm.ndbm`) raises :attr:`error` (:exc:`dbm.dumb.error`, :"
"exc:`dbm.gnu.error` or :exc:`dbm.ndbm.error`) instead of :exc:`KeyError`. "
"(Contributed by Xiang Zhang in :issue:`33106`.)"
msgstr ""
"從只讀 :mod:`dbm` 資料庫（:mod:`dbm.dumb`、:mod:`dbm.gnu` 或 :mod:`dbm."
"ndbm`）中刪除密鑰會引發 :attr:`error` (:exc:`dbm.dumb.error`, :exc:`dbm.gnu."
"error` 或 :exc:`dbm.ndbm.error`) 而不是 :exc:`KeyError`。 （由 Xiang Zhang "
"在 :issue:`33106` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1956
#, fuzzy
msgid ""
"Simplified AST for literals.  All constants will be represented as :class:"
"`ast.Constant` instances.  Instantiating old classes ``Num``, ``Str``, "
"``Bytes``, ``NameConstant`` and ``Ellipsis`` will return an instance of "
"``Constant``. (Contributed by Serhiy Storchaka in :issue:`32892`.)"
msgstr ""
"文字的簡化 AST。所有常數都將表示為 ast.Constant 實例。實例化舊類 ``Num``、 "
"``Str``、 ``Bytes``、 ``NameConstant`` 和 ``Ellipsis`` 將回傳 ``Constant`` 的"
"實例。 （由 Serhiy Storchaka 在 :issue:`32892` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1972
#, fuzzy
msgid ""
"The function :func:`asyncio.wait_for` now correctly waits for cancellation "
"when using an instance of :class:`asyncio.Task`. Previously, upon reaching "
"*timeout*, it was cancelled and immediately returned. (Contributed by Elvis "
"Pranskevichus in :issue:`32751`.)"
msgstr ""
"函式 :func:`asyncio.wait_for` 現在可以在使用 :class:`asyncio.Task` 的實例時正"
"確等待取消。以前，在達到 *timeout* 時，它會被取消並立即回傳。 （由 Elvis "
"Pranskevichus 在 :issue:`32751` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1977
#, fuzzy
msgid ""
"The function :func:`asyncio.BaseTransport.get_extra_info` now returns a safe "
"to use socket object when 'socket' is passed to the *name* parameter. "
"(Contributed by Yury Selivanov in :issue:`37027`.)"
msgstr ""
"當“ socket ”傳遞給 *name* 參數時，函式 :func:`asyncio.BaseTransport."
"get_extra_info` 現在回傳一個可以安全使用的 socket 物件。 （由 Yury Selivanov "
"在 :issue:`37027` 中貢獻。）"

#: ../../whatsnew/3.8.rst:1981
#, fuzzy
msgid ":class:`asyncio.BufferedProtocol` has graduated to the stable API."
msgstr ":class:`asyncio.BufferedProtocol` 已經升級為穩定的 API。"

#: ../../whatsnew/3.8.rst:1985
#, fuzzy
msgid ""
"DLL dependencies for extension modules and DLLs loaded with :mod:`ctypes` on "
"Windows are now resolved more securely. Only the system paths, the directory "
"containing the DLL or PYD file, and directories added with :func:`~os."
"add_dll_directory` are searched for load-time dependencies. Specifically, :"
"envvar:`PATH` and the current working directory are no longer used, and "
"modifications to these will no longer have any effect on normal DLL "
"resolution. If your application relies on these mechanisms, you should check "
"for :func:`~os.add_dll_directory` and if it exists, use it to add your DLLs "
"directory while loading your library. Note that Windows 7 users will need to "
"ensure that Windows Update KB2533623 has been installed (this is also "
"verified by the installer). (Contributed by Steve Dower in :issue:`36085`.)"
msgstr ""
"擴充模組的 DLL 依賴項和在 Windows 上加載的 DLL 現在可以更安全地解析。只有系統"
"路徑、包含 DLL 或 PYD 文件的目錄以及新增了 :func:`~os.add_dll_directory` 的目"
"錄才會被搜索加載時依賴項。具體來說，不再使用 :envvar:`PATH` 和當前工作目錄，"
"對它們的修改將不再對正常的 DLL 解析產生任何影響。如果您的應用程式依賴於這些機"
"制，您應該檢查 :func:`~os.add_dll_directory`，如果它存在，請在加載您的庫時使"
"用它來新增您的 DLL 目錄。請注意，Windows 7 使用者需要確保已安裝 Windows "
"Update KB2533623（這也由安裝程式驗證）。 （由 Steve Dower 在 :issue:`36085` "
"中貢獻。）"

#: ../../whatsnew/3.8.rst:1998
#, fuzzy
msgid ""
"The header files and functions related to pgen have been removed after its "
"replacement by a pure Python implementation. (Contributed by Pablo Galindo "
"in :issue:`36623`.)"
msgstr ""
"與 pgen 相關的標頭檔和函式在被純 Python 實作替換後已被刪除。 （由 Pablo "
"Galindo 在 :issue:`36623` 中貢獻。）"

#: ../../whatsnew/3.8.rst:2002
#, fuzzy
msgid ""
":class:`types.CodeType` has a new parameter in the second position of the "
"constructor (*posonlyargcount*) to support positional-only arguments defined "
"in :pep:`570`. The first argument (*argcount*) now represents the total "
"number of positional arguments (including positional-only arguments). The "
"new ``replace()`` method of :class:`types.CodeType` can be used to make the "
"code future-proof."
msgstr ""
":class:`types.CodeType` 在構造函式的第二個位置有一個新參數 "
"(*posonlyargcount*) 以支援 :pep:`570` 中定義的僅位置參數。第一個參數 "
"(*argcount*) 現在表示位置參數的總數（包括僅位置參數）。 types.CodeType 的新 "
"``replace()`` 方法可用於使程式碼面向未來。"

#: ../../whatsnew/3.8.rst:2009
#, fuzzy
msgid ""
"The parameter ``digestmod`` for :func:`hmac.new` no longer uses the MD5 "
"digest by default."
msgstr "預設情況下，:func:`hmac.new` 的參數 ``digestmod`` 不再使用 MD5 摘要。"

#: ../../whatsnew/3.8.rst:2013
msgid "Changes in the C API"
msgstr "C API 中的改動"

#: ../../whatsnew/3.8.rst:2015
#, fuzzy
msgid ""
"The :c:struct:`PyCompilerFlags` structure got a new *cf_feature_version* "
"field. It should be initialized to ``PY_MINOR_VERSION``. The field is "
"ignored by default, and is used if and only if ``PyCF_ONLY_AST`` flag is set "
"in *cf_flags*. (Contributed by Guido van Rossum in :issue:`35766`.)"
msgstr ""
":c:struct:`PyCompilerFlags` 結構有一個新的 *cf_feature_version* 欄位。它應該"
"被初始化為``PY_MINOR_VERSION``。預設情況下該欄位被忽略，當且僅當在 "
"*cf_flags* 中設定了``PyCF_ONLY_AST`` 旗標時才使用該欄位。 （由 Guido van "
"Rossum 在 :issue:`35766` 中貢獻。）"

#: ../../whatsnew/3.8.rst:2021
#, fuzzy
msgid ""
"The :c:func:`PyEval_ReInitThreads` function has been removed from the C API. "
"It should not be called explicitly: use :c:func:`PyOS_AfterFork_Child` "
"instead. (Contributed by Victor Stinner in :issue:`36728`.)"
msgstr ""
":c:func:`PyEval_ReInitThreads` 函式已從 C API 中刪除。不應顯式呼叫它：改為使"
"用 PyOS_AfterFork_Child。 （由 Victor Stinner 在 :issue:`36728` 中貢獻。）"

#: ../../whatsnew/3.8.rst:2026
#, fuzzy
msgid ""
"On Unix, C extensions are no longer linked to libpython except on Android "
"and Cygwin. When Python is embedded, ``libpython`` must not be loaded with "
"``RTLD_LOCAL``, but ``RTLD_GLOBAL`` instead. Previously, using "
"``RTLD_LOCAL``, it was already not possible to load C extensions which were "
"not linked to ``libpython``, like C extensions of the standard library built "
"by the ``*shared*`` section of ``Modules/Setup``. (Contributed by Victor "
"Stinner in :issue:`21536`.)"
msgstr ""
"在 Unix 上，C 擴充不再鏈接到 libpython，但在 Android 和 Cygwin 上除外。當嵌"
"入 Python 時，``libpython`` 不能加載``RTLD_LOCAL``，而是``RTLD_GLOBAL``。以"
"前，使用 ``RTLD_LOCAL``，已經無法加載未鏈接到 ``libpython`` 的 C 擴充，例如 "
"``*shared*`` 部分構建的標準庫的 C 擴充模組/設定``。 （由 Victor Stinner 在 :"
"issue:`21536` 中貢獻。）"

#: ../../whatsnew/3.8.rst:2034
#, fuzzy
msgid ""
"Use of ``#`` variants of formats in parsing or building value (e.g. :c:func:"
"`PyArg_ParseTuple`, :c:func:`Py_BuildValue`, :c:func:"
"`PyObject_CallFunction`, etc.) without ``PY_SSIZE_T_CLEAN`` defined raises "
"``DeprecationWarning`` now. It will be removed in 3.10 or 4.0.  Read :ref:"
"`arg-parsing` for detail. (Contributed by Inada Naoki in :issue:`36381`.)"
msgstr ""
"在解析或構建值時使用 ``#`` 格式變體（例如 :c:func:`PyArg_ParseTuple`、:c:"
"func:`Py_BuildValue`、:c:func:`PyObject_CallFunction` 等）而不使用 `` "
"PY_SSIZE_T_CLEAN`` 定義現在引發``DeprecationWarning``。它將在 3.10 或 4.0 中"
"被刪除。閱讀 :ref:`arg-parsing` 了解詳細資訊。 （由 Inada Naoki 在 :issue:"
"`36381` 中貢獻。）"

#: ../../whatsnew/3.8.rst:2040
#, fuzzy
msgid ""
"Instances of heap-allocated types (such as those created with :c:func:"
"`PyType_FromSpec`) hold a reference to their type object. Increasing the "
"reference count of these type objects has been moved from :c:func:"
"`PyType_GenericAlloc` to the more low-level functions, :c:func:"
"`PyObject_Init` and :c:func:`PyObject_INIT`. This makes types created "
"through :c:func:`PyType_FromSpec` behave like other classes in managed code."
msgstr ""
"堆分配型別的實例（例如使用 PyType_FromSpec 建立的實例）持有對其型別物件的引"
"用。增加這些型別物件的引用計數已從 :c:func:`PyType_GenericAlloc` 轉移到更底層"
"的函式：:c:func:`PyObject_Init` 和 :c:func:`PyObject_INIT`。這使得通過 :c:"
"func:`PyType_FromSpec` 建立的型別的行為與託管程式碼中的其他類一樣。"

#: ../../whatsnew/3.8.rst:2048
#, fuzzy
msgid ":ref:`Statically allocated types <static-types>` are not affected."
msgstr ":ref:`靜態分配的型別 <static-types>` 不受影響。"

#: ../../whatsnew/3.8.rst:2050
#, fuzzy
msgid ""
"For the vast majority of cases, there should be no side effect. However, "
"types that manually increase the reference count after allocating an "
"instance (perhaps to work around the bug) may now become immortal. To avoid "
"this, these classes need to call Py_DECREF on the type object during "
"instance deallocation."
msgstr ""
"對於絕大多數情況，應該沒有副作用。然而，在分配一個實例後手動增加引用計數的型"
"別（可能是為了解決這個錯誤）現在可能會變得不朽。為避免這種情況，這些類需要在"
"實例釋放期間對型別物件呼叫 Py_DECREF。"

#: ../../whatsnew/3.8.rst:2056
#, fuzzy
msgid ""
"To correctly port these types into 3.8, please apply the following changes:"
msgstr "要將這些型別正確移植到 3.8，請應用以下更改："

#: ../../whatsnew/3.8.rst:2059
#, fuzzy
msgid ""
"Remove :c:macro:`Py_INCREF` on the type object after allocating an instance "
"- if any. This may happen after calling :c:func:`PyObject_New`, :c:func:"
"`PyObject_NewVar`, :c:func:`PyObject_GC_New`, :c:func:`PyObject_GC_NewVar`, "
"or any other custom allocator that uses :c:func:`PyObject_Init` or :c:func:"
"`PyObject_INIT`."
msgstr ""
"分配實例後刪除型別對像上的 :c:macro:`Py_INCREF` - 如果有的話。這可能發生在呼"
"叫 PyObject_New、PyObject_NewVar、PyObject_GC_New、PyObject_GC_NewVar 或任何"
"其他使用 :c 的自定義分配器之後 :func:`PyObject_Init` 或 :c:func:"
"`PyObject_INIT`。"

#: ../../whatsnew/3.8.rst:2066 ../../whatsnew/3.8.rst:2085
#: ../../whatsnew/3.8.rst:2104
msgid "Example:"
msgstr "範例："

#: ../../whatsnew/3.8.rst:2082
#, fuzzy
msgid ""
"Ensure that all custom ``tp_dealloc`` functions of heap-allocated types "
"decrease the type's reference count."
msgstr "確保堆分配型別的所有自定義“tp_dealloc”函式減少型別的引用計數。"

#: ../../whatsnew/3.8.rst:2099
msgid "(Contributed by Eddie Elizondo in :issue:`35810`.)"
msgstr "（由 Eddie Elizondo 在 :issue:`35810` 中貢獻。）"

#: ../../whatsnew/3.8.rst:2101
#, fuzzy
msgid ""
"The :c:macro:`Py_DEPRECATED()` macro has been implemented for MSVC. The "
"macro now must be placed before the symbol name."
msgstr ""
":c:macro:`Py_DEPRECATED()` 巨集已為 MSVC 實作。巨集現在必須放在符號名稱之前。"

#: ../../whatsnew/3.8.rst:2110
msgid "(Contributed by Zackery Spytz in :issue:`33407`.)"
msgstr "（由 Zackery Spytz 在 :issue:`33407` 中貢獻。）"

#: ../../whatsnew/3.8.rst:2112
#, fuzzy
msgid ""
"The interpreter does not pretend to support binary compatibility of "
"extension types across feature releases, anymore.  A :c:type:`PyTypeObject` "
"exported by a third-party extension module is supposed to have all the slots "
"expected in the current Python version, including :c:member:`~PyTypeObject."
"tp_finalize` (:const:`Py_TPFLAGS_HAVE_FINALIZE` is not checked anymore "
"before reading :c:member:`~PyTypeObject.tp_finalize`)."
msgstr ""
"直譯器不再假裝支援跨功能版本的擴充型別的二進位相容性。第三方擴充模組導出的 "
"PyTypeObject 應該具有當前 Python 版本中預期的所有插槽，包括 :c:member:"
"`~PyTypeObject.tp_finalize` (:const:`Py_TPFLAGS_HAVE_FINALIZE`在閱讀之前不再"
"檢查 :c:member:`~PyTypeObject.tp_finalize`)。"

#: ../../whatsnew/3.8.rst:2119
msgid "(Contributed by Antoine Pitrou in :issue:`32388`.)"
msgstr "（由 Antoine Pitrou 在 :issue:`32388` 中貢獻。）"

#: ../../whatsnew/3.8.rst:2121
msgid ""
"The functions :c:func:`PyNode_AddChild` and :c:func:`PyParser_AddToken` now "
"accept two additional ``int`` arguments *end_lineno* and *end_col_offset*."
msgstr ""
"函式 :c:func:`PyNode_AddChild` 和 :c:func:`PyParser_AddToken` 現在接受兩個額"
"外的 ``int`` 引數 *end_lineno* 和 *end_col_offset*。"

#: ../../whatsnew/3.8.rst:2124
#, fuzzy
msgid ""
"The :file:`libpython38.a` file to allow MinGW tools to link directly "
"against :file:`python38.dll` is no longer included in the regular Windows "
"distribution. If you require this file, it may be generated with the "
"``gendef`` and ``dlltool`` tools, which are part of the MinGW binutils "
"package:"
msgstr ""
":file:`libpython38.a` 文件允許 MinGW 工具直接鏈接到 :file:`python38.dll` 不再"
"包含在常規 Windows 發行版中。如果你需要這個文件，它可以用 ``gendef`` 和 "
"``dlltool`` 工俱生成，它們是 MinGW binutils 包的一部分："

#: ../../whatsnew/3.8.rst:2134
#, fuzzy
msgid ""
"The location of an installed :file:`pythonXY.dll` will depend on the "
"installation options and the version and language of Windows. See :ref:"
"`using-on-windows` for more information. The resulting library should be "
"placed in the same directory as :file:`pythonXY.lib`, which is generally "
"the :file:`libs` directory under your Python installation."
msgstr ""
"安裝的 :file:`pythonXY.dll` 的位置將取決於安裝選項以及 Windows 的版本和語言。"
"有關更多資訊，請參閱 :ref:`using-on-windows`。生成的庫應放在與 :file:"
"`pythonXY.lib` 相同的目錄中，通常是 Python 安裝目錄下的 :file:`libs` 目錄。"

#: ../../whatsnew/3.8.rst:2140
msgid "(Contributed by Steve Dower in :issue:`37351`.)"
msgstr "（由 Steve Dower 在 :issue:`37351` 中貢獻。）"

#: ../../whatsnew/3.8.rst:2144
#, fuzzy
msgid "CPython bytecode changes"
msgstr "CPython 位元組碼更改"

#: ../../whatsnew/3.8.rst:2146
#, fuzzy
msgid ""
"The interpreter loop  has been simplified by moving the logic of unrolling "
"the stack of blocks into the compiler.  The compiler emits now explicit "
"instructions for adjusting the stack of values and calling the cleaning-up "
"code for :keyword:`break`, :keyword:`continue` and :keyword:`return`."
msgstr ""
"通過將展開塊堆疊的邏輯移動到編譯器中，簡化了直譯器循環。編譯器現在發出明確的"
"指令，用於調整值堆疊並呼叫 :keyword:`break`、:keyword:`continue` 和 :keyword:"
"`return` 的清理程式碼。"

#: ../../whatsnew/3.8.rst:2152
#, fuzzy
msgid ""
"Removed opcodes :opcode:`BREAK_LOOP`, :opcode:`CONTINUE_LOOP`, :opcode:"
"`SETUP_LOOP` and :opcode:`SETUP_EXCEPT`.  Added new opcodes :opcode:"
"`ROT_FOUR`, :opcode:`BEGIN_FINALLY`, :opcode:`CALL_FINALLY` and :opcode:"
"`POP_FINALLY`.  Changed the behavior of :opcode:`END_FINALLY` and :opcode:"
"`WITH_CLEANUP_START`."
msgstr ""
"刪除了操作碼 :opcode:`BREAK_LOOP`、 :opcode:`CONTINUE_LOOP`、 :opcode:"
"`SETUP_LOOP` 和 :opcode:`SETUP_EXCEPT`。新增了新的操作碼 :opcode:"
"`ROT_FOUR`、：操作碼：`BEGIN_FINALLY`、 :opcode:`CALL_FINALLY` 和 :opcode:"
"`POP_FINALLY`。更改了 :opcode:`END_FINALLY` 和 :opcode:`WITH_CLEANUP_START` "
"的行為。"

#: ../../whatsnew/3.8.rst:2158
msgid ""
"(Contributed by Mark Shannon, Antoine Pitrou and Serhiy Storchaka in :issue:"
"`17611`.)"
msgstr ""
"（由 Mark Shannon、Antoine Pitrou 和 Serhiy Storchaka 在 :issue:`17611` 中貢"
"獻。）"

#: ../../whatsnew/3.8.rst:2161
#, fuzzy
msgid ""
"Added new opcode :opcode:`END_ASYNC_FOR` for handling exceptions raised when "
"awaiting a next item in an :keyword:`async for` loop. (Contributed by Serhiy "
"Storchaka in :issue:`33041`.)"
msgstr ""
"新增了新的操作碼 :opcode:`END_ASYNC_FOR` 用於處理在 :keyword:`async for` 循環"
"中等待下一項時引發的例外。 （由 Serhiy Storchaka 在 :issue:`33041` 中貢獻。）"

#: ../../whatsnew/3.8.rst:2165
#, fuzzy
msgid ""
"The :opcode:`MAP_ADD` now expects the value as the first element in the "
"stack and the key as the second element. This change was made so the key is "
"always evaluated before the value in dictionary comprehensions, as proposed "
"by :pep:`572`. (Contributed by Jörn Heissler in :issue:`35224`.)"
msgstr ""
":opcode:`MAP_ADD` 現在期望值作為堆疊中的第一個元素，鍵作為第二個元素。正如 :"
"pep:`572` 所建議的那樣，進行此更改是為了在字典推導中始終先對鍵求值。 （由 "
"Jörn Heissler 在 :issue:`35224` 中貢獻。）"

#: ../../whatsnew/3.8.rst:2172
#, fuzzy
msgid "Demos and Tools"
msgstr "演示和工具"

#: ../../whatsnew/3.8.rst:2174
#, fuzzy
msgid ""
"Added a benchmark script for timing various ways to access variables: "
"``Tools/scripts/var_access_benchmark.py``. (Contributed by Raymond Hettinger "
"in :issue:`35884`.)"
msgstr ""
"新增了一個基準腳本，用於對訪問變數的各種方式進行計時：``Tools/scripts/"
"var_access_benchmark.py``。 （由 Raymond Hettinger 在 :issue:`35884` 中貢"
"獻。）"

#: ../../whatsnew/3.8.rst:2178
#, fuzzy
msgid "Here's a summary of performance improvements since Python 3.3:"
msgstr "以下是自 Python 3.3 以來性能改進的總結："

#: ../../whatsnew/3.8.rst:2225
#, fuzzy
msgid ""
"The benchmarks were measured on an `Intel® Core™ i7-4960HQ processor "
"<https://ark.intel.com/content/www/us/en/ark/products/76088/intel-core-"
"i7-4960hq-processor-6m-cache-up-to-3-80-ghz.html>`_ running the macOS 64-bit "
"builds found at `python.org <https://www.python.org/downloads/mac-osx/>`_. "
"The benchmark script displays timings in nanoseconds."
msgstr ""
"基準測試是在英特爾® 酷睿™ i7-4960HQ 處理器 <https://ark.intel.com/content/"
"www/us/en/ark/products/76088/intel-core-i7-4960hq-processor- 6m-cache-up-"
"to-3-80-ghz.html>`_ 運行在 `python.org <https://www.python.org/downloads/mac-"
"osx/>` 中找到的 macOS 64 位構建_。基準腳本以納秒為單位顯示計時。"

#: ../../whatsnew/3.8.rst:2234
#, fuzzy
msgid "Notable changes in Python 3.8.1"
msgstr "Python 3.8.1 中的顯著變化"

#: ../../whatsnew/3.8.rst:2236
#, fuzzy
msgid ""
"Due to significant security concerns, the *reuse_address* parameter of :meth:"
"`asyncio.loop.create_datagram_endpoint` is no longer supported. This is "
"because of the behavior of the socket option ``SO_REUSEADDR`` in UDP. For "
"more details, see the documentation for ``loop.create_datagram_endpoint()``. "
"(Contributed by Kyle Stanley, Antoine Pitrou, and Yury Selivanov in :issue:"
"`37228`.)"
msgstr ""
"由於重大安全問題，不再支援 asyncio.loop.create_datagram_endpoint 的 "
"*reuse_address* 參數。這是因為 UDP 中 socket 選項 ``SO_REUSEADDR`` 的行為。有"
"關詳細資訊，請參閱 ``loop.create_datagram_endpoint()`` 的文檔。 （由 Kyle "
"Stanley、Antoine Pitrou 和 Yury Selivanov 在 :issue:`37228` 中貢獻。）"

#: ../../whatsnew/3.8.rst:2244
#, fuzzy
msgid "Notable changes in Python 3.8.8"
msgstr "Python 3.8.8 中的顯著變化"

#: ../../whatsnew/3.8.rst:2246
#, fuzzy
msgid ""
"Earlier Python versions allowed using both ``;`` and ``&`` as query "
"parameter separators in :func:`urllib.parse.parse_qs` and :func:`urllib."
"parse.parse_qsl`.  Due to security concerns, and to conform with newer W3C "
"recommendations, this has been changed to allow only a single separator key, "
"with ``&`` as the default.  This change also affects :func:`cgi.parse` and :"
"func:`cgi.parse_multipart` as they use the affected functions internally. "
"For more details, please see their respective documentation. (Contributed by "
"Adam Goldschmidt, Senthil Kumaran and Ken Jin in :issue:`42967`.)"
msgstr ""
"早期的 Python 版本允許在 :func:`urllib.parse.parse_qs` 和 :func:`urllib."
"parse.parse_qsl` 中同時使用 ``;`` 和 ``&`` 作為查詢參數分隔符。出於安全考慮，"
"並為了符合更新的 W3C 建議，這已更改為僅允許單個分隔鍵，預設為 ``&``。此更改還"
"會影響 :func:`cgi.parse` 和 :func:`cgi.parse_multipart`，因為它們在內部使用受"
"影響的函式。有關詳細資訊，請參閱各自的文檔。 （由 Adam Goldschmidt、Senthil "
"Kumaran 和 Ken Jin 在 :issue:`42967` 中貢獻。）"

#: ../../whatsnew/3.8.rst:2257
#, fuzzy
msgid "Notable changes in Python 3.8.12"
msgstr "Python 3.8.12 中的顯著變化"

#: ../../whatsnew/3.8.rst:2259
#, fuzzy
msgid ""
"Starting with Python 3.8.12 the :mod:`ipaddress` module no longer accepts "
"any leading zeros in IPv4 address strings. Leading zeros are ambiguous and "
"interpreted as octal notation by some libraries. For example the legacy "
"function :func:`socket.inet_aton` treats leading zeros as octal notation. "
"glibc implementation of modern :func:`~socket.inet_pton` does not accept any "
"leading zeros."
msgstr ""
"從 Python 3.8.12 開始，:mod:`ipaddress` 模組不再接受 IPv4 地址字串中的任何前"
"導零。前導零是不明確的，並被某些庫解釋為八進位表示法。例如，遺留函式 :func:"
"`socket.inet_aton` 將前導零視為八進位表示法。現代 :func:`~socket.inet_pton` "
"的 glibc 實作不接受任何前導零。"

#: ../../whatsnew/3.8.rst:2266
msgid ""
"(Originally contributed by Christian Heimes in :issue:`36384`, and "
"backported to 3.8 by Achraf Merzouki.)"
msgstr ""
"（最初由 Christian Heimes 在 :issue:`36384` 中貢獻，並由 Achraf Merzouki 反向"
"移植到 3.8。）"
