# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-31 08:13+0000\n"
"PO-Revision-Date: 2023-05-02 13:28+0800\n"
"Last-Translator: Matt Wang <mattwang44@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.2.2\n"

#: ../../whatsnew/3.3.rst:3
msgid "What's New In Python 3.3"
msgstr "Python 3.3 有什麼新功能"

#: ../../whatsnew/3.3.rst:45
#, fuzzy
msgid ""
"This article explains the new features in Python 3.3, compared to 3.2. "
"Python 3.3 was released on September 29, 2012.  For full details, see the "
"`changelog <https://docs.python.org/3.3/whatsnew/changelog.html>`_."
msgstr ""
"本文介紹了 Python 3.3 與 3.2 相比的新功能。 Python 3.3 於 2012 年 9 月 29 日"
"發布。有關完整詳細資訊，請參閱`變更日誌 <https://docs.python.org/3.3/"
"whatsnew/changelog.html>`_。"

#: ../../whatsnew/3.3.rst:51
#, fuzzy
msgid ":pep:`398` - Python 3.3 Release Schedule"
msgstr ":pep:`398` - Python 3.3 發佈時間表"

#: ../../whatsnew/3.3.rst:55
#, fuzzy
msgid "Summary -- Release highlights"
msgstr "總結——發布亮點"

#: ../../whatsnew/3.3.rst:60
#, fuzzy
msgid "New syntax features:"
msgstr "新的語法特性："

#: ../../whatsnew/3.3.rst:62
#, fuzzy
msgid ""
"New ``yield from`` expression for :ref:`generator delegation <pep-380>`."
msgstr ":ref:`generator delegation <pep-380>` 的新``yield from`` 表達式。"

#: ../../whatsnew/3.3.rst:63
#, fuzzy
msgid "The ``u'unicode'`` syntax is accepted again for :class:`str` objects."
msgstr "``u'unicode'`` 語法再次被 :class:`str` 物件接受。"

#: ../../whatsnew/3.3.rst:65
#, fuzzy
msgid "New library modules:"
msgstr "新的庫模組："

#: ../../whatsnew/3.3.rst:67
#, fuzzy
msgid ":mod:`faulthandler` (helps debugging low-level crashes)"
msgstr ":mod:`faulthandler`（幫助除錯低階崩潰）"

#: ../../whatsnew/3.3.rst:68
#, fuzzy
msgid ""
":mod:`ipaddress` (high-level objects representing IP addresses and masks)"
msgstr ":mod:`ipaddress`（表示 IP 地址和掩碼的高階物件）"

#: ../../whatsnew/3.3.rst:69
#, fuzzy
msgid ":mod:`lzma` (compress data using the XZ / LZMA algorithm)"
msgstr ":mod:`lzma`（使用 XZ / LZMA 演算法壓縮資料）"

#: ../../whatsnew/3.3.rst:70
#, fuzzy
msgid ""
":mod:`unittest.mock` (replace parts of your system under test with mock "
"objects)"
msgstr ":mod:`unittest.mock`（用模擬物件替換被測系統的一部分）"

#: ../../whatsnew/3.3.rst:71
#, fuzzy
msgid ""
":mod:`venv` (Python :ref:`virtual environments <pep-405>`, as in the popular "
"``virtualenv`` package)"
msgstr ""
":mod:`venv`（Python :ref:`virtual environments <pep-405>`，如流行的 "
"``virtualenv`` 包）"

#: ../../whatsnew/3.3.rst:74
#, fuzzy
msgid "New built-in features:"
msgstr "新的內建功能："

#: ../../whatsnew/3.3.rst:76
#, fuzzy
msgid "Reworked :ref:`I/O exception hierarchy <pep-3151>`."
msgstr "修改了 :ref:`I/O 例外層次結構 <pep-3151>`。"

#: ../../whatsnew/3.3.rst:78
#, fuzzy
msgid "Implementation improvements:"
msgstr "實施改進："

#: ../../whatsnew/3.3.rst:80
#, fuzzy
msgid ""
"Rewritten :ref:`import machinery <importlib>` based on :mod:`importlib`."
msgstr "基於 :ref:`importlib` 重寫了 :ref:`import machinery <importlib>`。"

#: ../../whatsnew/3.3.rst:81
#, fuzzy
msgid "More compact :ref:`unicode strings <pep-393>`."
msgstr "更緊湊 :ref:`unicode strings <pep-393>`。"

#: ../../whatsnew/3.3.rst:82
#, fuzzy
msgid "More compact :ref:`attribute dictionaries <pep-412>`."
msgstr "更緊湊 :ref:`屬性字典 <pep-412>`。"

#: ../../whatsnew/3.3.rst:84
#, fuzzy
msgid "Significantly Improved Library Modules:"
msgstr "顯著改進的庫模組："

#: ../../whatsnew/3.3.rst:86
#, fuzzy
msgid "C Accelerator for the :ref:`decimal <new-decimal>` module."
msgstr ":ref:`decimal <new-decimal>` 模組的 C 加速器。"

#: ../../whatsnew/3.3.rst:87
#, fuzzy
msgid ""
"Better unicode handling in the :ref:`email <new-email>` module (:term:"
"`provisional <provisional package>`)."
msgstr ""
":ref:`email <new-email>` 模組（:term:`provisional <provisional package>`）中"
"更好的 unicode 處理。"

#: ../../whatsnew/3.3.rst:90
#, fuzzy
msgid "Security improvements:"
msgstr "安全改進："

#: ../../whatsnew/3.3.rst:92
#, fuzzy
msgid "Hash randomization is switched on by default."
msgstr "預設情況下，雜湊隨機化是打開的。"

#: ../../whatsnew/3.3.rst:94
#, fuzzy
msgid "Please read on for a comprehensive list of user-facing changes."
msgstr "請繼續閱讀以獲取面向使用者的更改的完整列表。"

#: ../../whatsnew/3.3.rst:100
#, fuzzy
msgid "PEP 405: Virtual Environments"
msgstr "PEP 405：虛擬環境"

#: ../../whatsnew/3.3.rst:102
#, fuzzy
msgid ""
"Virtual environments help create separate Python setups while sharing a "
"system-wide base install, for ease of maintenance.  Virtual environments "
"have their own set of private site packages (i.e. locally installed "
"libraries), and are optionally segregated from the system-wide site "
"packages.  Their concept and implementation are inspired by the popular "
"``virtualenv`` third-party package, but benefit from tighter integration "
"with the interpreter core."
msgstr ""
"虛擬環境有助於建立單獨的 Python 設定，同時共享系統範圍的基本安裝，以便於維"
"護。虛擬環境有自己的一組私有站點包（即本地安裝的庫），並且可以選擇與系統範圍"
"的站點包隔離。它們的概念和實作受到流行的 ``virtualenv``第三方包的啟發，但受益"
"於與直譯器核心的更緊密集成。"

#: ../../whatsnew/3.3.rst:110
#, fuzzy
msgid ""
"This PEP adds the :mod:`venv` module for programmatic access, and the "
"``pyvenv`` script for command-line access and administration.  The Python "
"interpreter checks for a ``pyvenv.cfg``, file whose existence signals the "
"base of a virtual environment's directory tree."
msgstr ""
"此 PEP 新增了用於編程訪問的 :mod:`venv` 模組，以及用於命令列訪問和管理的 "
"``pyvenv`` 腳本。 Python 直譯器檢查 ``pyvenv.cfg``，該文件的存在旗標著虛擬環"
"境目錄樹的基礎。"

#: ../../whatsnew/3.3.rst:118
#, fuzzy
msgid ":pep:`405` - Python Virtual Environments"
msgstr ":pep:`405` - Python 虛擬環境"

#: ../../whatsnew/3.3.rst:119
msgid "PEP written by Carl Meyer; implementation by Carl Meyer and Vinay Sajip"
msgstr "由 Carl Meyer 撰寫 PEP；由 Carl Meyer 與 Vinay Sajip 實作"

#: ../../whatsnew/3.3.rst:123
#, fuzzy
msgid "PEP 420: Implicit Namespace Packages"
msgstr "PEP 420：隱式命名空間包"

#: ../../whatsnew/3.3.rst:125
#, fuzzy
msgid ""
"Native support for package directories that don't require ``__init__.py`` "
"marker files and can automatically span multiple path segments (inspired by "
"various third party approaches to namespace packages, as described in :pep:"
"`420`)"
msgstr ""
"對不需要 ``__init__.py`` 標記文件並且可以自動跨越多個路徑段的包目錄的本機支援"
"（受命名空間包的各種第三方方法的啟發，如 :pep:`420` 中所述）"

#: ../../whatsnew/3.3.rst:133
#, fuzzy
msgid ":pep:`420` - Implicit Namespace Packages"
msgstr ":pep:`420` - 隱式命名空間包"

#: ../../whatsnew/3.3.rst:133
#, fuzzy
msgid ""
"PEP written by Eric V. Smith; implementation by Eric V. Smith and Barry "
"Warsaw"
msgstr "Eric V. Smith 編寫的 PEP；由 Eric V. Smith 和 Barry Warsaw 實施"

#: ../../whatsnew/3.3.rst:140
#, fuzzy
msgid ""
"PEP 3118: New memoryview implementation and buffer protocol documentation"
msgstr "PEP 3118：新的記憶體視圖實作和緩衝協定文檔"

#: ../../whatsnew/3.3.rst:142
#, fuzzy
msgid "The implementation of :pep:`3118` has been significantly improved."
msgstr ":pep:`3118` 的實作得到了顯著改進。"

#: ../../whatsnew/3.3.rst:144
#, fuzzy
msgid ""
"The new memoryview implementation comprehensively fixes all ownership and "
"lifetime issues of dynamically allocated fields in the Py_buffer struct that "
"led to multiple crash reports. Additionally, several functions that crashed "
"or returned incorrect results for non-contiguous or multi-dimensional input "
"have been fixed."
msgstr ""
"新的 memoryview 實作全面修復了導致多個崩潰報告的 Py_buffer 結構中動態分配欄位"
"的所有所有權和生命週期問題。此外，修復了幾個因非連續或多維輸入而崩潰或回傳錯"
"誤結果的函式。"

#: ../../whatsnew/3.3.rst:150
#, fuzzy
msgid ""
"The memoryview object now has a PEP-3118 compliant getbufferproc() that "
"checks the consumer's request type. Many new features have been added, most "
"of them work in full generality for non-contiguous arrays and arrays with "
"suboffsets."
msgstr ""
"memoryview 物件現在有一個符合 PEP-3118 的 getbufferproc() 來檢查消費者的請求"
"型別。新增了許多新功能，其中大多數功能完全適用於非連續數組和具有子偏移量的數"
"組。"

#: ../../whatsnew/3.3.rst:155
#, fuzzy
msgid ""
"The documentation has been updated, clearly spelling out responsibilities "
"for both exporters and consumers. Buffer request flags are grouped into "
"basic and compound flags. The memory layout of non-contiguous and multi-"
"dimensional NumPy-style arrays is explained."
msgstr ""
"文件已更新，明確規定了出口商和消費者的責任。緩衝區請求旗標分為基本旗標和復合"
"旗標。解釋了非連續和多維 NumPy 樣式數組的記憶體佈局。"

#: ../../whatsnew/3.3.rst:161 ../../whatsnew/3.3.rst:1122
#, fuzzy
msgid "Features"
msgstr "特徵"

#: ../../whatsnew/3.3.rst:163
#, fuzzy
msgid ""
"All native single character format specifiers in struct module syntax "
"(optionally prefixed with '@') are now supported."
msgstr ""
"現在支援結構模組語法中的所有本機單字元格式說明符（可選地以 ``@``為前綴）。"

#: ../../whatsnew/3.3.rst:166
#, fuzzy
msgid ""
"With some restrictions, the cast() method allows changing of format and "
"shape of C-contiguous arrays."
msgstr "在某些限制下，cast() 方法允許更改 C 連續數組的格式和形狀。"

#: ../../whatsnew/3.3.rst:169
#, fuzzy
msgid ""
"Multi-dimensional list representations are supported for any array type."
msgstr "任何數組型別都支援多維列表表示。"

#: ../../whatsnew/3.3.rst:171
#, fuzzy
msgid "Multi-dimensional comparisons are supported for any array type."
msgstr "任何數組型別都支援多維比較。"

#: ../../whatsnew/3.3.rst:173
#, fuzzy
msgid ""
"One-dimensional memoryviews of hashable (read-only) types with formats B, b "
"or c are now hashable.  (Contributed by Antoine Pitrou in :issue:`13411`.)"
msgstr ""
"具有格式 B、b 或 c 的可散列（只讀）型別的一維記憶體視圖現在是可散列的。 （由 "
"Antoine Pitrou 在 :issue:`13411` 中貢獻。）"

#: ../../whatsnew/3.3.rst:176
#, fuzzy
msgid ""
"Arbitrary slicing of any 1-D arrays type is supported. For example, it is "
"now possible to reverse a memoryview in O(1) by using a negative step."
msgstr ""
"支援任意一維數組型別的切片。例如，現在可以通過使用負步在 O(1) 中反轉記憶體視"
"圖。"

#: ../../whatsnew/3.3.rst:180 ../../whatsnew/3.3.rst:1132
#, fuzzy
msgid "API changes"
msgstr "API 變更"

#: ../../whatsnew/3.3.rst:182
#, fuzzy
msgid "The maximum number of dimensions is officially limited to 64."
msgstr "最大維數官方限制為 64。"

#: ../../whatsnew/3.3.rst:184
#, fuzzy
msgid ""
"The representation of empty shape, strides and suboffsets is now an empty "
"tuple instead of ``None``."
msgstr "空形狀、步幅和子偏移量的表示現在是一個空元組，而不是 ``None`` 。"

#: ../../whatsnew/3.3.rst:187
#, fuzzy
msgid ""
"Accessing a memoryview element with format 'B' (unsigned bytes) now returns "
"an integer (in accordance with the struct module syntax). For returning a "
"bytes object the view must be cast to 'c' first."
msgstr ""
"訪問格式為 ``B``（無符號位元組）的 memoryview 元素現在回傳一個整數（根據結構"
"模組語法）。要回傳位元組物件，必須先將視圖轉換為 ``c``。"

#: ../../whatsnew/3.3.rst:191
#, fuzzy
msgid ""
"memoryview comparisons now use the logical structure of the operands and "
"compare all array elements by value. All format strings in struct module "
"syntax are supported. Views with unrecognised format strings are still "
"permitted, but will always compare as unequal, regardless of view contents."
msgstr ""
"記憶體視圖比較現在使用操作數的邏輯結構並按值比較所有數組元素。支援結構模組語"
"法中的所有格式字串。仍然允許使用無法識別的格式字串的視圖，但無論視圖內容如"
"何，都將始終比較為不相等。"

#: ../../whatsnew/3.3.rst:197
#, fuzzy
msgid ""
"For further changes see `Build and C API Changes`_ and `Porting C code`_."
msgstr "有關進一步的更改，請參閱“構建和 C API 更改”和“移植 C 程式碼”。"

#: ../../whatsnew/3.3.rst:199
#, fuzzy
msgid "(Contributed by Stefan Krah in :issue:`10181`.)"
msgstr "（由 Stefan Krah 在 :issue:`10181` 中貢獻。）"

#: ../../whatsnew/3.3.rst:203
msgid ":pep:`3118` - Revising the Buffer Protocol"
msgstr ":pep:`3118` - 修訂緩衝協定"

#: ../../whatsnew/3.3.rst:209
#, fuzzy
msgid "PEP 393: Flexible String Representation"
msgstr "PEP 393：靈活的字串表示"

#: ../../whatsnew/3.3.rst:211
#, fuzzy
msgid ""
"The Unicode string type is changed to support multiple internal "
"representations, depending on the character with the largest Unicode ordinal "
"(1, 2, or 4 bytes) in the represented string.  This allows a space-efficient "
"representation in common cases, but gives access to full UCS-4 on all "
"systems.  For compatibility with existing APIs, several representations may "
"exist in parallel; over time, this compatibility should be phased out."
msgstr ""
"Unicode 字串型別更改為支援多種內部表示，具體取決於所表示字串中具有最大 "
"Unicode 序號（1、2 或 4 位元組）的字元。這允許在常見情況下使用節省空間的表"
"示，但可以在所有系統上訪問完整的 UCS-4。為了與現有 API 相容，可以並行存在多種"
"表示；隨著時間的推移，這種相容性應該被逐步淘汰。"

#: ../../whatsnew/3.3.rst:218
#, fuzzy
msgid "On the Python side, there should be no downside to this change."
msgstr "在 Python 方面，此更改應該沒有任何缺點。"

#: ../../whatsnew/3.3.rst:220
#, fuzzy
msgid ""
"On the C API side, :pep:`393` is fully backward compatible.  The legacy API "
"should remain available at least five years.  Applications using the legacy "
"API will not fully benefit of the memory reduction, or - worse - may use a "
"bit more memory, because Python may have to maintain two versions of each "
"string (in the legacy format and in the new efficient storage)."
msgstr ""
"在 C API 方面，:pep:`393` 是完全向後相容的。遺留 API 應至少保留五年。使用遺"
"留 API 的應用程式不會完全受益於記憶體減少，或者 - 更糟 - 可能會使用更多記憶"
"體，因為 Python 可能必須維護每個字串的兩個版本（在遺留格式和新的高效儲存"
"中）。"

#: ../../whatsnew/3.3.rst:227
#, fuzzy
msgid "Functionality"
msgstr "功能性"

#: ../../whatsnew/3.3.rst:229
#, fuzzy
msgid "Changes introduced by :pep:`393` are the following:"
msgstr ":pep:`393` 引入的更改如下："

#: ../../whatsnew/3.3.rst:231
#, fuzzy
msgid ""
"Python now always supports the full range of Unicode code points, including "
"non-BMP ones (i.e. from ``U+0000`` to ``U+10FFFF``).  The distinction "
"between narrow and wide builds no longer exists and Python now behaves like "
"a wide build, even under Windows."
msgstr ""
"Python 現在始終支援所有 Unicode 程式碼點，包括非 BMP 程式碼點（即從 "
"``U+0000``到 ``U+10FFFF`` ）。窄構建和寬構建之間的區別不再存在，Python 現在表"
"現得像寬構建，即使在 Windows 下也是如此。"

#: ../../whatsnew/3.3.rst:236
#, fuzzy
msgid ""
"With the death of narrow builds, the problems specific to narrow builds have "
"also been fixed, for example:"
msgstr "隨著窄構建的消亡，特定於窄構建的問題也已得到修復，例如："

#: ../../whatsnew/3.3.rst:239
#, fuzzy
msgid ""
":func:`len` now always returns 1 for non-BMP characters, so "
"``len('\\U0010FFFF') == 1``;"
msgstr ""
":func:`len` 現在總是為非 BMP 字元回傳 1，所以 ``len('\\U0010FFFF') == 1``;"

#: ../../whatsnew/3.3.rst:242
#, fuzzy
msgid ""
"surrogate pairs are not recombined in string literals, so "
"``'\\uDBFF\\uDFFF' != '\\U0010FFFF'``;"
msgstr ""
"代理項對不會在字串文字中重新組合，因此 ``'\\uDBFF\\uDFFF' != '\\U0010FFFF'``;"

#: ../../whatsnew/3.3.rst:245
#, fuzzy
msgid ""
"indexing or slicing non-BMP characters returns the expected value, so "
"``'\\U0010FFFF'[0]`` now returns ``'\\U0010FFFF'`` and not ``'\\uDBFF'``;"
msgstr ""
"索引或切片非 BMP 字元回傳預期值，因此 ``'\\U0010FFFF'[0]`` 現在回傳 "
"``'\\U0010FFFF'`` 而不是 ``'\\uDBFF'``；"

#: ../../whatsnew/3.3.rst:248
#, fuzzy
msgid ""
"all other functions in the standard library now correctly handle non-BMP "
"code points."
msgstr "標準庫中的所有其他函式現在可以正確處理非 BMP 程式碼點。"

#: ../../whatsnew/3.3.rst:251
#, fuzzy
msgid ""
"The value of :data:`sys.maxunicode` is now always ``1114111`` (``0x10FFFF`` "
"in hexadecimal).  The :c:func:`PyUnicode_GetMax` function still returns "
"either ``0xFFFF`` or ``0x10FFFF`` for backward compatibility, and it should "
"not be used with the new Unicode API (see :issue:`13054`)."
msgstr ""
":data:`sys.maxunicode` 的值現在總是 ``1114111``（十六進位的 "
"``0x10FFFF``）。 :c:func:`PyUnicode_GetMax` 函式仍然回傳 ``0xFFFF`` 或 "
"``0x10FFFF`` 以實作向後相容性，它不應該與新的 Unicode API 一起使用（參見 :"
"issue:`13054`）。"

#: ../../whatsnew/3.3.rst:256
#, fuzzy
msgid "The :file:`./configure` flag ``--with-wide-unicode`` has been removed."
msgstr ":file:`./configure` 旗標``--with-wide-unicode`` 已被刪除。"

#: ../../whatsnew/3.3.rst:259
#, fuzzy
msgid "Performance and resource usage"
msgstr "性能和資源使用"

#: ../../whatsnew/3.3.rst:261
#, fuzzy
msgid ""
"The storage of Unicode strings now depends on the highest code point in the "
"string:"
msgstr "Unicode 字串的儲存現在取決於字串中的最高程式碼點："

#: ../../whatsnew/3.3.rst:263
#, fuzzy
msgid ""
"pure ASCII and Latin1 strings (``U+0000-U+00FF``) use 1 byte per code point;"
msgstr ""
"純 ASCII 和 Latin1 字串（``U+0000-U+00FF``）每個程式碼點使用 1 個位元組；"

#: ../../whatsnew/3.3.rst:265
#, fuzzy
msgid "BMP strings (``U+0000-U+FFFF``) use 2 bytes per code point;"
msgstr "BMP 字串（``U+0000-U+FFFF``）每個程式碼點使用 2 個位元組；"

#: ../../whatsnew/3.3.rst:267
#, fuzzy
msgid "non-BMP strings (``U+10000-U+10FFFF``) use 4 bytes per code point."
msgstr "非 BMP 字串（``U+10000-U+10FFFF``）每個程式碼點使用 4 個位元組。"

#: ../../whatsnew/3.3.rst:269
#, fuzzy
msgid ""
"The net effect is that for most applications, memory usage of string storage "
"should decrease significantly - especially compared to former wide unicode "
"builds - as, in many cases, strings will be pure ASCII even in international "
"contexts (because many strings store non-human language data, such as XML "
"fragments, HTTP headers, JSON-encoded data, etc.).  We also hope that it "
"will, for the same reasons, increase CPU cache efficiency on non-trivial "
"applications. The memory usage of Python 3.3 is two to three times smaller "
"than Python 3.2, and a little bit better than Python 2.7, on a Django "
"benchmark (see the PEP for details)."
msgstr ""
"最終結果是，對於大多數應用程式，字串儲存的記憶體使用量應該顯著減少——尤其是與"
"以前的寬 unicode 構建相比——因為在許多情況下，即使在國際上下文中，字串也將是"
"純 ASCII（因為許多字串儲存非人類語言資料，例如 XML 片段、HTTP 標頭、JSON 編碼"
"資料等）。出於同樣的原因，我們也希望它能提高非平凡應用程式的 CPU 快取效率。"
"在 Django 基準測試中，Python 3.3 的記憶體使用量比 Python 3.2 小兩到三倍，比 "
"Python 2.7 好一點點（詳見 PEP）。"

#: ../../whatsnew/3.3.rst:283
#, fuzzy
msgid ":pep:`393` - Flexible String Representation"
msgstr ":pep:`393` - 靈活的字串表示"

#: ../../whatsnew/3.3.rst:283
#, fuzzy
msgid ""
"PEP written by Martin von Löwis; implementation by Torsten Becker and Martin "
"von Löwis."
msgstr ""
"PEP 由 Martin von Löwis 撰寫；由 Torsten Becker 和 Martin von Löwis 實施。"

#: ../../whatsnew/3.3.rst:290
#, fuzzy
msgid "PEP 397: Python Launcher for Windows"
msgstr "PEP 397：適用於 Windows 的 Python 啟動器"

#: ../../whatsnew/3.3.rst:292
#, fuzzy
msgid ""
"The Python 3.3 Windows installer now includes a ``py`` launcher application "
"that can be used to launch Python applications in a version independent "
"fashion."
msgstr ""
"Python 3.3 Windows 安裝程式現在包含一個 ``py`` 啟動器應用程式，可用於以獨立於"
"版本的方式啟動 Python 應用程式。"

#: ../../whatsnew/3.3.rst:296
#, fuzzy
msgid ""
"This launcher is invoked implicitly when double-clicking ``*.py`` files. If "
"only a single Python version is installed on the system, that version will "
"be used to run the file. If multiple versions are installed, the most recent "
"version is used by default, but this can be overridden by including a Unix-"
"style \"shebang line\" in the Python script."
msgstr ""
"雙擊“*.py”文件時會隱式呼叫此啟動器。如果系統上只安裝了一個 Python 版本，則該"
"版本將用於運行該文件。如果安裝了多個版本，則預設使用最新版本，但這可以通過在 "
"Python 腳本中包含 Unix 風格的“shebang 行”來覆蓋。"

#: ../../whatsnew/3.3.rst:302
#, fuzzy
msgid ""
"The launcher can also be used explicitly from the command line as the ``py`` "
"application. Running ``py`` follows the same version selection rules as "
"implicitly launching scripts, but a more specific version can be selected by "
"passing appropriate arguments (such as ``-3`` to request Python 3 when "
"Python 2 is also installed, or ``-2.6`` to specifically request an earlier "
"Python version when a more recent version is installed)."
msgstr ""
"啟動器也可以作為 ``py`` 應用程式從命令列顯式使用。運行 ``py`` 遵循與隱式啟動"
"腳本相同的版本選擇規則，但可以通過傳遞適當的參數來選擇更具體的版本（例如 "
"``-3`` 在還安裝了 Python 2 時請求 Python 3，或者``-2.6`` 在安裝較新版本時專門"
"請求較早的 Python 版本）。"

#: ../../whatsnew/3.3.rst:309
#, fuzzy
msgid ""
"In addition to the launcher, the Windows installer now includes an option to "
"add the newly installed Python to the system PATH.  (Contributed by Brian "
"Curtin in :issue:`3561`.)"
msgstr ""
"除了啟動器之外，Windows 安裝程式現在還包括一個選項，用於將新安裝的 Python 新"
"增到系統 PATH 中。 （由 Brian Curtin 在 :issue:`3561` 中貢獻。）"

#: ../../whatsnew/3.3.rst:317
#, fuzzy
msgid ":pep:`397` - Python Launcher for Windows"
msgstr ":pep:`397` - 適用於 Windows 的 Python 啟動器"

#: ../../whatsnew/3.3.rst:316
#, fuzzy
msgid ""
"PEP written by Mark Hammond and Martin v. Löwis; implementation by Vinay "
"Sajip."
msgstr "PEP 由 Mark Hammond 和 Martin v. Löwis 撰寫；由 Vinay Sajip 實施。"

#: ../../whatsnew/3.3.rst:319
#, fuzzy
msgid "Launcher documentation: :ref:`launcher`"
msgstr "啟動器文檔：:ref:`launcher`"

#: ../../whatsnew/3.3.rst:321
#, fuzzy
msgid "Installer PATH modification: :ref:`windows-path-mod`"
msgstr "安裝程式 PATH 修改：:ref:`windows-path-mod`"

#: ../../whatsnew/3.3.rst:327
#, fuzzy
msgid "PEP 3151: Reworking the OS and IO exception hierarchy"
msgstr "PEP 3151：重新設計操作系統和 IO 例外層次結構"

#: ../../whatsnew/3.3.rst:329
#, fuzzy
msgid ""
"The hierarchy of exceptions raised by operating system errors is now both "
"simplified and finer-grained."
msgstr "操作系統錯誤引發的例外層次結構現在得到了簡化和細化。"

#: ../../whatsnew/3.3.rst:332
#, fuzzy
msgid ""
"You don't have to worry anymore about choosing the appropriate exception "
"type between :exc:`OSError`, :exc:`IOError`, :exc:`EnvironmentError`, :exc:"
"`WindowsError`, :exc:`mmap.error`, :exc:`socket.error` or :exc:`select."
"error`.  All these exception types are now only one: :exc:`OSError`.  The "
"other names are kept as aliases for compatibility reasons."
msgstr ""
"您不必再擔心在 :exc:`OSError`、:exc:`IOError`、:exc:`EnvironmentError`、:exc:"
"`WindowsError`、:exc:`mmap.error 之間選擇合適的例外型別`, :exc:`socket."
"error` 或 :exc:`select.error`。所有這些例外型別現在只有一個：:exc:`OSError`。"
"出於相容性原因，其他名稱保留為別名。"

#: ../../whatsnew/3.3.rst:339
#, fuzzy
msgid ""
"Also, it is now easier to catch a specific error condition.  Instead of "
"inspecting the ``errno`` attribute (or ``args[0]``) for a particular "
"constant from the :mod:`errno` module, you can catch the adequate :exc:"
"`OSError` subclass.  The available subclasses are the following:"
msgstr ""
"此外，現在更容易捕獲特定的錯誤情況。您可以捕捉適當的 OSError 子類別，而不是檢"
"查來自 :mod:`errno` 模組的特定常數的 ``errno`` 屬性（或 ``args[0]``）。可用的"
"子類別如下："

#: ../../whatsnew/3.3.rst:344
msgid ":exc:`BlockingIOError`"
msgstr ":exc:`BlockingIOError`"

#: ../../whatsnew/3.3.rst:345
msgid ":exc:`ChildProcessError`"
msgstr ":exc:`ChildProcessError`"

#: ../../whatsnew/3.3.rst:346
msgid ":exc:`ConnectionError`"
msgstr ":exc:`ConnectionError`"

#: ../../whatsnew/3.3.rst:347
msgid ":exc:`FileExistsError`"
msgstr ":exc:`FileExistsError`"

#: ../../whatsnew/3.3.rst:348
msgid ":exc:`FileNotFoundError`"
msgstr ":exc:`FileNotFoundError`"

#: ../../whatsnew/3.3.rst:349
msgid ":exc:`InterruptedError`"
msgstr ":exc:`InterruptedError`"

#: ../../whatsnew/3.3.rst:350
msgid ":exc:`IsADirectoryError`"
msgstr ":exc:`IsADirectoryError`"

#: ../../whatsnew/3.3.rst:351
msgid ":exc:`NotADirectoryError`"
msgstr ":exc:`NotADirectoryError`"

#: ../../whatsnew/3.3.rst:352
msgid ":exc:`PermissionError`"
msgstr ":exc:`PermissionError`"

#: ../../whatsnew/3.3.rst:353
msgid ":exc:`ProcessLookupError`"
msgstr ":exc:`ProcessLookupError`"

#: ../../whatsnew/3.3.rst:354
msgid ":exc:`TimeoutError`"
msgstr ":exc:`TimeoutError`"

#: ../../whatsnew/3.3.rst:356
#, fuzzy
msgid "And the :exc:`ConnectionError` itself has finer-grained subclasses:"
msgstr ":exc:`ConnectionError` 本身有更細粒度的子類別："

#: ../../whatsnew/3.3.rst:358
msgid ":exc:`BrokenPipeError`"
msgstr ":exc:`BrokenPipeError`"

#: ../../whatsnew/3.3.rst:359
msgid ":exc:`ConnectionAbortedError`"
msgstr ":exc:`ConnectionAbortedError`"

#: ../../whatsnew/3.3.rst:360
msgid ":exc:`ConnectionRefusedError`"
msgstr ":exc:`ConnectionRefusedError`"

#: ../../whatsnew/3.3.rst:361
msgid ":exc:`ConnectionResetError`"
msgstr ":exc:`ConnectionResetError`"

#: ../../whatsnew/3.3.rst:363
#, fuzzy
msgid ""
"Thanks to the new exceptions, common usages of the :mod:`errno` can now be "
"avoided.  For example, the following code written for Python 3.2::"
msgstr ""
"由於新的例外，現在可以避免 :mod:`errno` 的常見用法。例如，為 Python 3.2:: 編"
"寫的以下程式碼："

#: ../../whatsnew/3.3.rst:379
#, fuzzy
msgid ""
"can now be written without the :mod:`errno` import and without manual "
"inspection of exception attributes::"
msgstr "現在可以在沒有 :mod:`errno` 導入和手動檢查例外屬性的情況下編寫::"

#: ../../whatsnew/3.3.rst:392
#, fuzzy
msgid ":pep:`3151` - Reworking the OS and IO Exception Hierarchy"
msgstr ":pep:`3151` - 重新設計操作系統和 IO 例外層次結構"

#: ../../whatsnew/3.3.rst:393
msgid "PEP written and implemented by Antoine Pitrou"
msgstr "由 Antoine Pitrou 撰寫 PEP 與實作"

#: ../../whatsnew/3.3.rst:402
#, fuzzy
msgid "PEP 380: Syntax for Delegating to a Subgenerator"
msgstr "PEP 380：委託給子生成器的語法"

#: ../../whatsnew/3.3.rst:404
#, fuzzy
msgid ""
"PEP 380 adds the ``yield from`` expression, allowing a :term:`generator` to "
"delegate part of its operations to another generator. This allows a section "
"of code containing :keyword:`yield` to be factored out and placed in another "
"generator. Additionally, the subgenerator is allowed to return with a value, "
"and the value is made available to the delegating generator."
msgstr ""
"PEP 380 新增了 ``yield from`` 表達式，允許 :term:`generator` 將其部分操作委託"
"給另一個生成器。這允許將包含 :keyword:`yield` 的一段程式碼分解出來並放置在另"
"一個生成器中。此外，允許子生成器回傳一個值，並且該值可供委託生成器使用。"

#: ../../whatsnew/3.3.rst:411
#, fuzzy
msgid ""
"While designed primarily for use in delegating to a subgenerator, the "
"``yield from`` expression actually allows delegation to arbitrary "
"subiterators."
msgstr ""
"雖然主要設計用於委託給子生成器，但“yield from”表達式實際上允許委託給任意子疊"
"代器。"

#: ../../whatsnew/3.3.rst:414
#, fuzzy
msgid ""
"For simple iterators, ``yield from iterable`` is essentially just a "
"shortened form of ``for item in iterable: yield item``::"
msgstr ""
"對於簡單的疊代器，``yield from iterable`` 本質上只是``for item in iterable: "
"yield item`` 的縮寫形式::"

#: ../../whatsnew/3.3.rst:424
#, fuzzy
msgid ""
"However, unlike an ordinary loop, ``yield from`` allows subgenerators to "
"receive sent and thrown values directly from the calling scope, and return a "
"final value to the outer generator::"
msgstr ""
"然而，與普通循環不同的是，``yield from`` 允許子生成器直接從呼叫範圍接收發送和"
"拋出的值，並將最終值回傳給外部生成器::"

#: ../../whatsnew/3.3.rst:455
#, fuzzy
msgid ""
"The main principle driving this change is to allow even generators that are "
"designed to be used with the ``send`` and ``throw`` methods to be split into "
"multiple subgenerators as easily as a single large function can be split "
"into multiple subfunctions."
msgstr ""
"推動這一變化的主要原則是，即使是設計用於 ``send`` 和 ``throw`` 方法的生成器也"
"可以拆分為多個子生成器，就像單個大函式可以拆分為多個子函式一樣容易."

#: ../../whatsnew/3.3.rst:464
#, fuzzy
msgid ":pep:`380` - Syntax for Delegating to a Subgenerator"
msgstr ":pep:`380` - 委託給子生成器的語法"

#: ../../whatsnew/3.3.rst:463
#, fuzzy
msgid ""
"PEP written by Greg Ewing; implementation by Greg Ewing, integrated into 3.3 "
"by Renaud Blanch, Ryan Kelly and Nick Coghlan; documentation by Zbigniew "
"Jędrzejewski-Szmek and Nick Coghlan"
msgstr ""
"PEP 由 Greg Ewing 撰寫；由 Greg Ewing 實施，由 Renaud Blanch、Ryan Kelly 和 "
"Nick Coghlan 集成到 3.3； Zbigniew Jędrzejewski-Szmek 和 Nick Coghlan 的文檔"

#: ../../whatsnew/3.3.rst:469
#, fuzzy
msgid "PEP 409: Suppressing exception context"
msgstr "PEP 409：抑制例外上下文"

#: ../../whatsnew/3.3.rst:471
#, fuzzy
msgid ""
"PEP 409 introduces new syntax that allows the display of the chained "
"exception context to be disabled. This allows cleaner error messages in "
"applications that convert between exception types::"
msgstr ""
"PEP 409 引入了新語法，允許禁用鍊式例外上下文的顯示。這允許在例外型別之間轉換"
"的應用程式中出現更清晰的錯誤消息::"

#: ../../whatsnew/3.3.rst:490
#, fuzzy
msgid ""
"Without the ``from None`` suffix to suppress the cause, the original "
"exception would be displayed by default::"
msgstr "如果沒有 ``from None`` 後綴來抑制原因，預設情況下將顯示原始例外::"

#: ../../whatsnew/3.3.rst:514
#, fuzzy
msgid ""
"No debugging capability is lost, as the original exception context remains "
"available if needed (for example, if an intervening library has incorrectly "
"suppressed valuable underlying details)::"
msgstr ""
"沒有除錯功能丟失，因為原始例外上下文在需要時仍然可用（例如，如果乾預庫錯誤地"
"抑制了有價值的底層細節）：："

#: ../../whatsnew/3.3.rst:528
#, fuzzy
msgid ":pep:`409` - Suppressing exception context"
msgstr ":pep:`409` - 抑制例外上下文"

#: ../../whatsnew/3.3.rst:528
#, fuzzy
msgid ""
"PEP written by Ethan Furman; implemented by Ethan Furman and Nick Coghlan."
msgstr "Ethan Furman 編寫的 PEP；由 Ethan Furman 和 Nick Coghlan 實施。"

#: ../../whatsnew/3.3.rst:533
#, fuzzy
msgid "PEP 414: Explicit Unicode literals"
msgstr "PEP 414：顯式 Unicode 文字"

#: ../../whatsnew/3.3.rst:535
#, fuzzy
msgid ""
"To ease the transition from Python 2 for Unicode aware Python applications "
"that make heavy use of Unicode literals, Python 3.3 once again supports the "
"\"``u``\" prefix for string literals. This prefix has no semantic "
"significance in Python 3, it is provided solely to reduce the number of "
"purely mechanical changes in migrating to Python 3, making it easier for "
"developers to focus on the more significant semantic changes (such as the "
"stricter default separation of binary and text data)."
msgstr ""
"為了簡化從 Python 2 到大量使用 Unicode 文字的 Unicode 感知 Python 應用程式的"
"過渡，Python 3.3 再次支援字串文字的“``u``”前綴。此前綴在 Python 3 中沒有語義"
"意義，提供它只是為了減少遷移到 Python 3 的純機械更改的數量，使開發人員更容易"
"專注於更重要的語義更改（例如更嚴格的二進位預設分離和文本資料）。"

#: ../../whatsnew/3.3.rst:545
#, fuzzy
msgid ":pep:`414` - Explicit Unicode literals"
msgstr ":pep:`414` - 顯式 Unicode 文字"

#: ../../whatsnew/3.3.rst:546
msgid "PEP written by Armin Ronacher."
msgstr "由 Armin Ronacher 撰寫 PEP。"

#: ../../whatsnew/3.3.rst:550
#, fuzzy
msgid "PEP 3155: Qualified name for classes and functions"
msgstr "PEP 3155：類和函式的限定名稱"

#: ../../whatsnew/3.3.rst:552
#, fuzzy
msgid ""
"Functions and class objects have a new ``__qualname__`` attribute "
"representing the \"path\" from the module top-level to their definition.  "
"For global functions and classes, this is the same as ``__name__``.  For "
"other functions and classes, it provides better information about where they "
"were actually defined, and how they might be accessible from the global "
"scope."
msgstr ""
"函式和類對像有一個新的 ``__qualname__`` 屬性，表示從模組頂層到它們定義的“路"
"徑”。對於全局函式和類，這與 __name__ 相同。對於其他函式和類，它提供了有關它們"
"的實際定義位置以及如何從全局範圍訪問它們的更好資訊。"

#: ../../whatsnew/3.3.rst:558
#, fuzzy
msgid "Example with (non-bound) methods::"
msgstr "使用（非綁定）方法的示例::"

#: ../../whatsnew/3.3.rst:568
msgid "Example with nested classes::"
msgstr ""
"巢狀類別範例：\n"
"\n"
"::"

#: ../../whatsnew/3.3.rst:584
msgid "Example with nested functions::"
msgstr ""
"巢狀函式範例：\n"
"\n"
"::"

#: ../../whatsnew/3.3.rst:596
#, fuzzy
msgid ""
"The string representation of those objects is also changed to include the "
"new, more precise information::"
msgstr "這些物件的字串表示也被更改為包括新的、更精確的資訊::"

#: ../../whatsnew/3.3.rst:606
#, fuzzy
msgid ":pep:`3155` - Qualified name for classes and functions"
msgstr ":pep:`3155` - 類和函式的限定名稱"

#: ../../whatsnew/3.3.rst:607
msgid "PEP written and implemented by Antoine Pitrou."
msgstr "由 Antoine Pitrou 撰寫 PEP 與實作。"

#: ../../whatsnew/3.3.rst:613
#, fuzzy
msgid "PEP 412: Key-Sharing Dictionary"
msgstr "PEP 412：密鑰共享字典"

#: ../../whatsnew/3.3.rst:615
#, fuzzy
msgid ""
"Dictionaries used for the storage of objects' attributes are now able to "
"share part of their internal storage between each other (namely, the part "
"which stores the keys and their respective hashes).  This reduces the memory "
"consumption of programs creating many instances of non-builtin types."
msgstr ""
"用於儲存物件屬性的字典現在能夠在彼此之間共享其內部儲存的一部分（即儲存鍵及其"
"各自雜湊的部分）。這減少了建立許多非內建型別實例的程式的記憶體消耗。"

#: ../../whatsnew/3.3.rst:622
#, fuzzy
msgid ":pep:`412` - Key-Sharing Dictionary"
msgstr ":pep:`412` - 密鑰共享字典"

#: ../../whatsnew/3.3.rst:623
msgid "PEP written and implemented by Mark Shannon."
msgstr "由 Mark Shannon 撰寫 PEP 與實作。"

#: ../../whatsnew/3.3.rst:627
#, fuzzy
msgid "PEP 362: Function Signature Object"
msgstr "PEP 362：函式簽名物件"

#: ../../whatsnew/3.3.rst:629
#, fuzzy
msgid ""
"A new function :func:`inspect.signature` makes introspection of python "
"callables easy and straightforward.  A broad range of callables is "
"supported: python functions, decorated or not, classes, and :func:`functools."
"partial` objects.  New classes :class:`inspect.Signature`, :class:`inspect."
"Parameter` and :class:`inspect.BoundArguments` hold information about the "
"call signatures, such as, annotations, default values, parameters kinds, and "
"bound arguments, which considerably simplifies writing decorators and any "
"code that validates or amends calling signatures or arguments."
msgstr ""
"新函式 :func:`inspect.signature` 使 python 可呼叫物件的自省變得簡單直接。支援"
"範圍廣泛的可呼叫物件：python 函式、修飾與否、類和 :func:`functools.partial` "
"物件。新類 :class:`inspect.Signature`、:class:`inspect.Parameter` 和 :class:"
"`inspect.BoundArguments` 包含有關呼叫簽名的資訊，例如註釋、預設值、參數型別和"
"綁定參數，這大大簡化了編寫裝飾器和任何驗證或修改呼叫簽名或參數的程式碼。"

#: ../../whatsnew/3.3.rst:641
#, fuzzy
msgid ":pep:`362`: -  Function Signature Object"
msgstr ":pep:`362`: - 函式簽名物件"

#: ../../whatsnew/3.3.rst:641
#, fuzzy
msgid ""
"PEP written by Brett Cannon, Yury Selivanov, Larry Hastings, Jiwon Seo; "
"implemented by Yury Selivanov."
msgstr ""
"PEP 由 Brett Cannon、Yury Selivanov、Larry Hastings、Jiwon Seo 撰寫；由 Yury "
"Selivanov 實施。"

#: ../../whatsnew/3.3.rst:646
#, fuzzy
msgid "PEP 421: Adding sys.implementation"
msgstr "PEP 421：新增 sys.implementation"

#: ../../whatsnew/3.3.rst:648
#, fuzzy
msgid ""
"A new attribute on the :mod:`sys` module exposes details specific to the "
"implementation of the currently running interpreter.  The initial set of "
"attributes on :attr:`sys.implementation` are ``name``, ``version``, "
"``hexversion``, and ``cache_tag``."
msgstr ""
":mod:`sys` 模組上的一個新屬性公開了特定於當前運行的直譯器的實作的詳細資訊。 :"
"attr:`sys.implementation` 的初始屬性集是 ``name``、``version``、"
"``hexversion`` 和 ``cache_tag``。"

#: ../../whatsnew/3.3.rst:653
#, fuzzy
msgid ""
"The intention of ``sys.implementation`` is to consolidate into one namespace "
"the implementation-specific data used by the standard library.  This allows "
"different Python implementations to share a single standard library code "
"base much more easily.  In its initial state, ``sys.implementation`` holds "
"only a small portion of the implementation-specific data.  Over time that "
"ratio will shift in order to make the standard library more portable."
msgstr ""
"``sys.implementation`` 的目的是將標準庫使用的特定於實作的資料合併到一個命名空"
"間中。這允許不同的 Python 實作更容易地共享一個標準庫程式碼庫。在其初始狀態"
"下，“sys.implementation”僅包含一小部分特定於實作的資料。隨著時間的推移，該比"
"例將發生變化，以使標準庫更具可移植性。"

#: ../../whatsnew/3.3.rst:660
#, fuzzy
msgid ""
"One example of improved standard library portability is ``cache_tag``.  As "
"of Python 3.3, ``sys.implementation.cache_tag`` is used by :mod:`importlib` "
"to support :pep:`3147` compliance.  Any Python implementation that uses "
"``importlib`` for its built-in import system may use ``cache_tag`` to "
"control the caching behavior for modules."
msgstr ""
"改進標準庫可移植性的一個例子是 ``cache_tag``。從 Python 3.3 開始，importlib "
"使用 sys.implementation.cache_tag 來支援 3147 合規性。任何使用 ``importlib`` "
"作為其內建導入系統的 Python 實作都可以使用“cache_tag”來控制模組的快取行為。"

#: ../../whatsnew/3.3.rst:667
msgid "SimpleNamespace"
msgstr "SimpleNamespace"

#: ../../whatsnew/3.3.rst:669
#, fuzzy
msgid ""
"The implementation of ``sys.implementation`` also introduces a new type to "
"Python: :class:`types.SimpleNamespace`.  In contrast to a mapping-based "
"namespace, like :class:`dict`, ``SimpleNamespace`` is attribute-based, like :"
"class:`object`.  However, unlike ``object``, ``SimpleNamespace`` instances "
"are writable.  This means that you can add, remove, and modify the namespace "
"through normal attribute access."
msgstr ""
"``sys.implementation`` 的實作還向 Python 引入了一種新型別：:class:`types."
"SimpleNamespace`。與基於映射的命名空間（如 :class:`dict`）相比，"
"``SimpleNamespace`` 是基於屬性的，如 :class:`object`。然而，與 ``object`` 不"
"同的是，``SimpleNamespace`` 實例是可寫的。這意味著您可以通過正常的屬性訪問來"
"新增、刪除和修改名稱空間。"

#: ../../whatsnew/3.3.rst:678
#, fuzzy
msgid ":pep:`421` - Adding sys.implementation"
msgstr ":pep:`421` - 新增 sys.implementation"

#: ../../whatsnew/3.3.rst:679
msgid "PEP written and implemented by Eric Snow."
msgstr "由 Eric Snow 撰寫 PEP 與實作。"

#: ../../whatsnew/3.3.rst:685
#, fuzzy
msgid "Using importlib as the Implementation of Import"
msgstr "使用 importlib 作為 Import 的實作"

#: ../../whatsnew/3.3.rst:686
#, fuzzy
msgid ""
":issue:`2377` - Replace __import__ w/ importlib.__import__ :issue:`13959` - "
"Re-implement parts of :mod:`imp` in pure Python :issue:`14605` - Make import "
"machinery explicit :issue:`14646` - Require loaders set __loader__ and "
"__package__"
msgstr ""
":issue:`2377` - 將 __import__ 替換為 importlib.__import__ :issue:`13959` - 在"
"純 Python 中重新實作部分 :mod:`imp` :issue:`14605` - 使導入機制顯式 :issue:` "
"14646` - 要求裝載機設定 __loader__ 和 __package__"

#: ../../whatsnew/3.3.rst:691
#, fuzzy
msgid ""
"The :func:`__import__` function is now powered by :func:`importlib."
"__import__`. This work leads to the completion of \"phase 2\" of :pep:`302`. "
"There are multiple benefits to this change. First, it has allowed for more "
"of the machinery powering import to be exposed instead of being implicit and "
"hidden within the C code. It also provides a single implementation for all "
"Python VMs supporting Python 3.3 to use, helping to end any VM-specific "
"deviations in import semantics. And finally it eases the maintenance of "
"import, allowing for future growth to occur."
msgstr ""
":func:`__import__` 函式現在由 :func:`importlib.__import__` 提供支援。這項工作"
"導致 :pep:`302` 的“第二階段”完成。這種變化有很多好處。首先，它允許公開更多支"
"援導入的機制，而不是隱式和隱藏在 C 程式碼中。它還為所有支援 Python 3.3 的 "
"Python VM 提供了一個單一的實作，有助於結束導入語義中任何特定於 VM 的偏差。最"
"後，它簡化了進口的維護，允許未來的增長發生。"

#: ../../whatsnew/3.3.rst:700
#, fuzzy
msgid ""
"For the common user, there should be no visible change in semantics.  For "
"those whose code currently manipulates import or calls import "
"programmatically, the code changes that might possibly be required are "
"covered in the `Porting Python code`_ section of this document."
msgstr ""
"對於普通使用者來說，語義上應該沒有明顯的變化。對於程式碼當前以編程方式操作 "
"import 或呼叫 import 的那些人，可能需要的程式碼更改包含在本文檔的“移植 "
"Python 程式碼”部分中。"

#: ../../whatsnew/3.3.rst:706
#, fuzzy
msgid "New APIs"
msgstr "新 API"

#: ../../whatsnew/3.3.rst:707
#, fuzzy
msgid ""
"One of the large benefits of this work is the exposure of what goes into "
"making the import statement work. That means the various importers that were "
"once implicit are now fully exposed as part of the :mod:`importlib` package."
msgstr ""
"這項工作的一大好處是公開了使 import 語句起作用的內容。這意味著曾經隱含的各種"
"導入器現在作為 importlib 包的一部分完全公開。"

#: ../../whatsnew/3.3.rst:711
#, fuzzy
msgid ""
"The abstract base classes defined in :mod:`importlib.abc` have been expanded "
"to properly delineate between :term:`meta path finders <meta path finder>` "
"and :term:`path entry finders <path entry finder>` by introducing :class:"
"`importlib.abc.MetaPathFinder` and :class:`importlib.abc.PathEntryFinder`, "
"respectively. The old ABC of :class:`importlib.abc.Finder` is now only "
"provided for backwards-compatibility and does not enforce any method "
"requirements."
msgstr ""
"通過引入 :class:`importlib.abc.MetaPathFinder` 和 :class:`importlib.abc."
"PathEntryFinder`。 :class:`importlib.abc.Finder` 的舊 ABC 現在只是為了向後相"
"容而提供的，並不強制執行任何方法要求。"

#: ../../whatsnew/3.3.rst:719
#, fuzzy
msgid ""
"In terms of finders, :class:`importlib.machinery.FileFinder` exposes the "
"mechanism used to search for source and bytecode files of a module. "
"Previously this class was an implicit member of :attr:`sys.path_hooks`."
msgstr ""
"在查找器方面，importlib.machinery.FileFinder 公開了用於搜索模組的源文件和位元"
"組碼文件的機制。以前這個類是 :attr:`sys.path_hooks` 的隱式成員。"

#: ../../whatsnew/3.3.rst:723
#, fuzzy
msgid ""
"For loaders, the new abstract base class :class:`importlib.abc.FileLoader` "
"helps write a loader that uses the file system as the storage mechanism for "
"a module's code. The loader for source files (:class:`importlib.machinery."
"SourceFileLoader`), sourceless bytecode files (:class:`importlib.machinery."
"SourcelessFileLoader`), and extension modules (:class:`importlib.machinery."
"ExtensionFileLoader`) are now available for direct use."
msgstr ""
"對於加載器，新的抽象基底類別 importlib.abc.FileLoader 有助於編寫一個加載器，"
"該加載器使用文件系統作為模組程式碼的儲存機制。源文件 (:class:`importlib."
"machinery.SourceFileLoader`)、無源位元組碼文件 (:class:`importlib.machinery."
"SourcelessFileLoader`) 和擴充模組 (:class:`importlib.machinery."
"ExtensionFileLoader`) 的加載器是現在可以直接使用了。"

#: ../../whatsnew/3.3.rst:731
#, fuzzy
msgid ""
":exc:`ImportError` now has ``name`` and ``path`` attributes which are set "
"when there is relevant data to provide. The message for failed imports will "
"also provide the full name of the module now instead of just the tail end of "
"the module's name."
msgstr ""
":exc:`ImportError` 現在有 ``name`` 和 ``path`` 屬性，它們在有相關資料要提供時"
"設定。導入失敗的消息現在還將提供模組的全名，而不僅僅是模組名稱的末尾。"

#: ../../whatsnew/3.3.rst:736
#, fuzzy
msgid ""
"The :func:`importlib.invalidate_caches` function will now call the method "
"with the same name on all finders cached in :attr:`sys.path_importer_cache` "
"to help clean up any stored state as necessary."
msgstr ""
":func:`importlib.invalidate_caches` 函式現在將在 :attr:`sys."
"path_importer_cache` 中快取的所有查找器上呼叫具有相同名稱的方法，以幫助根據需"
"要清理任何儲存的狀態。"

#: ../../whatsnew/3.3.rst:741
#, fuzzy
msgid "Visible Changes"
msgstr "可見的變化"

#: ../../whatsnew/3.3.rst:743
#, fuzzy
msgid ""
"For potential required changes to code, see the `Porting Python code`_ "
"section."
msgstr "有關可能需要對程式碼進行的更改，請參閱“移植 Python 程式碼”部分。"

#: ../../whatsnew/3.3.rst:746
#, fuzzy
msgid ""
"Beyond the expanse of what :mod:`importlib` now exposes, there are other "
"visible changes to import. The biggest is that :attr:`sys.meta_path` and :"
"attr:`sys.path_hooks` now store all of the meta path finders and path entry "
"hooks used by import.  Previously the finders were implicit and hidden "
"within the C code of import instead of being directly exposed. This means "
"that one can now easily remove or change the order of the various finders to "
"fit one's needs."
msgstr ""
"除了 :mod:`importlib` 現在公開的範圍之外，還有其他可見的更改要導入。最大的"
"是 :attr:`sys.meta_path` 和 :attr:`sys.path_hooks` 現在儲存了導入使用的所有元"
"路徑查找器和路徑入口掛鉤。以前，查找器是隱式的並隱藏在 import 的 C 程式碼中，"
"而不是直接公開。這意味著現在可以輕鬆地刪除或更改各種查找器的順序以滿足自己的"
"需要。"

#: ../../whatsnew/3.3.rst:753
#, fuzzy
msgid ""
"Another change is that all modules have a ``__loader__`` attribute, storing "
"the loader used to create the module. :pep:`302` has been updated to make "
"this attribute mandatory for loaders to implement, so in the future once 3rd-"
"party loaders have been updated people will be able to rely on the existence "
"of the attribute. Until such time, though, import is setting the module post-"
"load."
msgstr ""
"另一個變化是所有模組都有一個 ``__loader__`` 屬性，儲存用於建立模組的加載"
"器。 :pep:`302` 已更新，使加載程式必須執行此屬性，因此將來一旦更新了第 3 方加"
"載程式，人們將能夠依賴該屬性的存在。不過，在此之前，import 正在設定模組後加"
"載。"

#: ../../whatsnew/3.3.rst:759
#, fuzzy
msgid ""
"Loaders are also now expected to set the ``__package__`` attribute from :pep:"
"`366`. Once again, import itself is already setting this on all loaders "
"from :mod:`importlib` and import itself is setting the attribute post-load."
msgstr ""
"加載程式現在還需要設定來自 :pep:`366` 的 ``__package__`` 屬性。再一次，"
"import 本身已經在來自 :mod:`importlib` 的所有加載器上設定了這個並且 import 本"
"身正在設定屬性後加載。"

#: ../../whatsnew/3.3.rst:763
#, fuzzy
msgid ""
"``None`` is now inserted into :attr:`sys.path_importer_cache` when no finder "
"can be found on :attr:`sys.path_hooks`. Since :class:`imp.NullImporter` is "
"not directly exposed on :attr:`sys.path_hooks` it could no longer be relied "
"upon to always be available to use as a value representing no finder found."
msgstr ""
"當在 sys.path_hooks 上找不到查找器時，``None`` 現在被插入到 sys."
"path_importer_cache 中。由於 :class:`imp.NullImporter` 沒有直接暴露在 :attr:"
"`sys.path_hooks` 上，因此不能再依賴它始終可用作表示未找到查找器的值。"

#: ../../whatsnew/3.3.rst:768
#, fuzzy
msgid ""
"All other changes relate to semantic changes which should be taken into "
"consideration when updating code for Python 3.3, and thus should be read "
"about in the `Porting Python code`_ section of this document."
msgstr ""
"所有其他更改都與語義更改有關，在為 Python 3.3 更新程式碼時應考慮這些更改，因"
"此應在本文檔的“移植 Python 程式碼”部分閱讀。"

#: ../../whatsnew/3.3.rst:772
#, fuzzy
msgid "(Implementation by Brett Cannon)"
msgstr "（由 Brett Cannon 實施）"

#: ../../whatsnew/3.3.rst:776
#, fuzzy
msgid "Other Language Changes"
msgstr "其他語言變化"

#: ../../whatsnew/3.3.rst:778
#, fuzzy
msgid "Some smaller changes made to the core Python language are:"
msgstr "對核心 Python 語言所做的一些較小的更改是："

#: ../../whatsnew/3.3.rst:780
#, fuzzy
msgid ""
"Added support for Unicode name aliases and named sequences. Both :func:"
"`unicodedata.lookup()` and ``'\\N{...}'`` now resolve name aliases, and :"
"func:`unicodedata.lookup()` resolves named sequences too."
msgstr ""
"新增了對 Unicode 名稱別名和命名序列的支援。 :func:`unicodedata.lookup()` 和 "
"``'\\N{...}'`` 現在解析名稱別名，並且 :func:`unicodedata.lookup()` 也解析命名"
"序列。"

#: ../../whatsnew/3.3.rst:784
msgid "(Contributed by Ezio Melotti in :issue:`12753`.)"
msgstr "（由 Ezio Melotti 在 :issue:`12753` 中貢獻。）"

#: ../../whatsnew/3.3.rst:786
#, fuzzy
msgid "Unicode database updated to UCD version 6.1.0"
msgstr "Unicode 資料庫更新至 UCD 版本 6.1.0"

#: ../../whatsnew/3.3.rst:788
#, fuzzy
msgid ""
"Equality comparisons on :func:`range` objects now return a result reflecting "
"the equality of the underlying sequences generated by those range objects. (:"
"issue:`13201`)"
msgstr ""
":func:`range` 物件的相等性比較現在回傳一個結果，反映由這些範圍對像生成的基礎"
"序列的相等性。 （ :issue:`13201`）"

#: ../../whatsnew/3.3.rst:792
#, fuzzy
msgid ""
"The ``count()``, ``find()``, ``rfind()``, ``index()`` and ``rindex()`` "
"methods of :class:`bytes` and :class:`bytearray` objects now accept an "
"integer between 0 and 255 as their first argument."
msgstr ""
"bytes 的``count()``、``find()``、``rfind()``、``index()`` 和``rindex()`` 方法"
"以及： class:`bytearray` 物件現在接受 0 到 255 之間的整數作為它們的第一個參"
"數。"

#: ../../whatsnew/3.3.rst:796
msgid "(Contributed by Petri Lehtinen in :issue:`12170`.)"
msgstr "（由 Petri Lehtinen 在 :issue:`12170` 中貢獻。）"

#: ../../whatsnew/3.3.rst:798
#, fuzzy
msgid ""
"The ``rjust()``, ``ljust()``, and ``center()`` methods of :class:`bytes` "
"and :class:`bytearray` now accept a :class:`bytearray` for the ``fill`` "
"argument.  (Contributed by Petri Lehtinen in :issue:`12380`.)"
msgstr ""
"bytes 和 bytearray 的 rjust()、ljust() 和 center() 方法現在接受 bytearray 用"
"於``fill`` 參數。 （由 Petri Lehtinen 在 :issue:`12380` 中貢獻。）"

#: ../../whatsnew/3.3.rst:802
#, fuzzy
msgid ""
"New methods have been added to :class:`list` and :class:`bytearray`: "
"``copy()`` and ``clear()`` (:issue:`10516`).  Consequently, :class:"
"`~collections.abc.MutableSequence` now also defines a :meth:`~collections."
"abc.MutableSequence.clear` method (:issue:`11388`)."
msgstr ""
"新方法已新增到 :class:`list` 和 :class:`bytearray`：``copy()`` 和 "
"``clear()`` (:issue:`10516`)。因此，:class:`~collections.abc."
"MutableSequence` 現在也定義了一個 :meth:`~collections.abc.MutableSequence."
"clear` 方法 (:issue:`11388`)。"

#: ../../whatsnew/3.3.rst:807
#, fuzzy
msgid ""
"Raw bytes literals can now be written ``rb\"...\"`` as well as ``br\"...\"``."
msgstr "原始位元組文字現在可以寫成 ``rb\"...\"`` 以及 ``br\"...\"``。"

#: ../../whatsnew/3.3.rst:809
msgid "(Contributed by Antoine Pitrou in :issue:`13748`.)"
msgstr "（由 Antoine Pitrou 在 :issue:`13748` 中貢獻。）"

#: ../../whatsnew/3.3.rst:811
#, fuzzy
msgid ""
":meth:`dict.setdefault` now does only one lookup for the given key, making "
"it atomic when used with built-in types."
msgstr ""
":meth:`dict.setdefault` 現在只對給定的鍵進行一次查找，使其在與內建型別一起使"
"用時成為原子的。"

#: ../../whatsnew/3.3.rst:814
msgid "(Contributed by Filip Gruszczyński in :issue:`13521`.)"
msgstr "（由 Filip Gruszczyński 在 :issue:`13521` 中貢獻。）"

#: ../../whatsnew/3.3.rst:816
#, fuzzy
msgid ""
"The error messages produced when a function call does not match the function "
"signature have been significantly improved."
msgstr "函式呼叫與函式簽名不匹配時產生的錯誤消息已得到顯著改進。"

#: ../../whatsnew/3.3.rst:819
msgid "(Contributed by Benjamin Peterson.)"
msgstr "（由 Benjamin Peterson 所貢獻。）"

#: ../../whatsnew/3.3.rst:823
#, fuzzy
msgid "A Finer-Grained Import Lock"
msgstr "更細粒度的導入鎖"

#: ../../whatsnew/3.3.rst:825
#, fuzzy
msgid ""
"Previous versions of CPython have always relied on a global import lock. "
"This led to unexpected annoyances, such as deadlocks when importing a module "
"would trigger code execution in a different thread as a side-effect. Clumsy "
"workarounds were sometimes employed, such as the :c:func:"
"`PyImport_ImportModuleNoBlock` C API function."
msgstr ""
"以前的 CPython 版本一直依賴於全局導入鎖。這導致了意想不到的煩惱，例如導入模組"
"時的死鎖會作為副作用觸發不同執行緒中的程式碼執行。有時會採用笨拙的解決方法，"
"例如 :c:func:`PyImport_ImportModuleNoBlock` C API 函式。"

#: ../../whatsnew/3.3.rst:831
#, fuzzy
msgid ""
"In Python 3.3, importing a module takes a per-module lock.  This correctly "
"serializes importation of a given module from multiple threads (preventing "
"the exposure of incompletely initialized modules), while eliminating the "
"aforementioned annoyances."
msgstr ""
"在 Python 3.3 中，導入模組需要每個模組的鎖。這正確地序列化了從多個執行緒導入"
"給定模組（防止暴露未完全初始化的模組），同時消除了上述煩惱。"

#: ../../whatsnew/3.3.rst:836
msgid "(Contributed by Antoine Pitrou in :issue:`9260`.)"
msgstr "（由 Antoine Pitrou 在 :issue:`9260` 中貢獻。）"

#: ../../whatsnew/3.3.rst:840
msgid "Builtin functions and types"
msgstr "內建函式和型別"

#: ../../whatsnew/3.3.rst:842
#, fuzzy
msgid ""
":func:`open` gets a new *opener* parameter: the underlying file descriptor "
"for the file object is then obtained by calling *opener* with (*file*, "
"*flags*). It can be used to use custom flags like :data:`os.O_CLOEXEC` for "
"example. The ``'x'`` mode was added: open for exclusive creation, failing if "
"the file already exists."
msgstr ""
":func:`open` 獲得一個新的 *opener* 參數：文件物件的底層文件描述器隨後通過使"
"用 (*file*, *flags*) 呼叫 *opener* 獲得。例如，它可用於使用自定義旗標，如 :"
"data:`os.O_CLOEXEC`。新增了 ``'x'`` 模式：打開獨占建立，如果文件已經存在則失"
"敗。"

#: ../../whatsnew/3.3.rst:847
#, fuzzy
msgid ""
":func:`print`: added the *flush* keyword argument. If the *flush* keyword "
"argument is true, the stream is forcibly flushed."
msgstr ""
":func:`print`: 新增了 *flush* 關鍵字參數。如果 *flush* 關鍵字參數為真，則流被"
"強制刷新。"

#: ../../whatsnew/3.3.rst:849
#, fuzzy
msgid ""
":func:`hash`: hash randomization is enabled by default, see :meth:`object."
"__hash__` and :envvar:`PYTHONHASHSEED`."
msgstr ""
":func:`hash`: 預設情況下啟用雜湊隨機化，請參閱 :meth:`object.__hash__` 和 :"
"envvar:`PYTHONHASHSEED`。"

#: ../../whatsnew/3.3.rst:851
#, fuzzy
msgid ""
"The :class:`str` type gets a new :meth:`~str.casefold` method: return a "
"casefolded copy of the string, casefolded strings may be used for caseless "
"matching. For example, ``'ß'.casefold()`` returns ``'ss'``."
msgstr ""
":class:`str` 型別獲得一個新的 :meth:`~str.casefold` 方法：回傳字串的 "
"casefolded 副本，casefolded 字串可用於無大小寫匹配。例如，``'ß'.casefold()`` "
"回傳 ``'ss'``。"

#: ../../whatsnew/3.3.rst:854
#, fuzzy
msgid ""
"The sequence documentation has been substantially rewritten to better "
"explain the binary/text sequence distinction and to provide specific "
"documentation sections for the individual builtin sequence types (:issue:"
"`4966`)."
msgstr ""
"序列文檔已被大幅重寫，以更好地解釋二進位/文本序列的區別，並為各個內建序列型別"
"提供特定的文檔部分 (:issue:`4966`)。"

#: ../../whatsnew/3.3.rst:861
msgid "New Modules"
msgstr "新模組"

#: ../../whatsnew/3.3.rst:864
msgid "faulthandler"
msgstr "faulthandler"

#: ../../whatsnew/3.3.rst:866
#, fuzzy
msgid ""
"This new debug module :mod:`faulthandler` contains functions to dump Python "
"tracebacks explicitly, on a fault (a crash like a segmentation fault), after "
"a timeout, or on a user signal. Call :func:`faulthandler.enable` to install "
"fault handlers for the :const:`SIGSEGV`, :const:`SIGFPE`, :const:`SIGABRT`, :"
"const:`SIGBUS`, and :const:`SIGILL` signals. You can also enable them at "
"startup by setting the :envvar:`PYTHONFAULTHANDLER` environment variable or "
"by using :option:`-X` ``faulthandler`` command line option."
msgstr ""
"這個新的除錯模組 :mod:`faulthandler` 包含顯式轉儲 Python tracebacks 的函式，"
"可以在出現故障（像分段錯誤這樣的崩潰）、超時後或使用者信號時轉儲。呼叫 "
"faulthandler.enable 為 SIGSEGV、SIGSEGV、SIGFPE、SIGABRT、SIGBUS 和 SIGILL 安"
"裝故障處理程式信號。您還可以通過設定 PYTHONFAULTHANDLER 環境變數或使用 :"
"option:`-X` ``faulthandler`` 命令列選項在啟動時啟用它們。"

#: ../../whatsnew/3.3.rst:874
#, fuzzy
msgid "Example of a segmentation fault on Linux:"
msgstr "Linux 上的分段錯誤示例："

#: ../../whatsnew/3.3.rst:890
msgid "ipaddress"
msgstr "ipaddress"

#: ../../whatsnew/3.3.rst:892
#, fuzzy
msgid ""
"The new :mod:`ipaddress` module provides tools for creating and manipulating "
"objects representing IPv4 and IPv6 addresses, networks and interfaces (i.e. "
"an IP address associated with a specific IP subnet)."
msgstr ""
"新的 :mod:`ipaddress` 模組提供了用於建立和操作表示 IPv4 和 IPv6 地址、網絡和"
"介面（即與特定 IP 子網關聯的 IP 地址）的物件的工具。"

#: ../../whatsnew/3.3.rst:896
#, fuzzy
msgid "(Contributed by Google and Peter Moody in :pep:`3144`.)"
msgstr "（由 Google 和 Peter Moody 在 :pep:`3144` 中貢獻。）"

#: ../../whatsnew/3.3.rst:899
msgid "lzma"
msgstr "lzma"

#: ../../whatsnew/3.3.rst:901
#, fuzzy
msgid ""
"The newly added :mod:`lzma` module provides data compression and "
"decompression using the LZMA algorithm, including support for the ``.xz`` "
"and ``.lzma`` file formats."
msgstr ""
"新新增的 :mod:`lzma` 模組使用 LZMA 演算法提供資料壓縮和解壓縮，包括對 ``."
"xz`` 和 ``.lzma`` 文件格式的支援。"

#: ../../whatsnew/3.3.rst:905
#, fuzzy
msgid "(Contributed by Nadeem Vawda and Per Øyvind Karlsen in :issue:`6715`.)"
msgstr "（由 Nadeem Vawda 和 Per Øyvind Karlsen 在 :issue:`6715` 中貢獻。）"

#: ../../whatsnew/3.3.rst:909
#, fuzzy
msgid "Improved Modules"
msgstr "改進模組"

#: ../../whatsnew/3.3.rst:912
msgid "abc"
msgstr "abc"

#: ../../whatsnew/3.3.rst:914
#, fuzzy
msgid ""
"Improved support for abstract base classes containing descriptors composed "
"with abstract methods. The recommended approach to declaring abstract "
"descriptors is now to provide :attr:`__isabstractmethod__` as a dynamically "
"updated property. The built-in descriptors have been updated accordingly."
msgstr ""
"改進了對包含由抽象方法組成的描述器的抽象基底類別的支援。聲明抽象描述器的推薦"
"方法現在是提供 :attr:`__isabstractmethod__` 作為動態更新的屬性。內建描述器已"
"相應更新。"

#: ../../whatsnew/3.3.rst:919 ../../whatsnew/3.3.rst:2245
#, fuzzy
msgid ""
":class:`abc.abstractproperty` has been deprecated, use :class:`property` "
"with :func:`abc.abstractmethod` instead."
msgstr ""
":class:`abc.abstractproperty` 已被棄用，請使用 :class:`property` 和 :func:"
"`abc.abstractmethod` 代替。"

#: ../../whatsnew/3.3.rst:921 ../../whatsnew/3.3.rst:2247
#, fuzzy
msgid ""
":class:`abc.abstractclassmethod` has been deprecated, use :class:"
"`classmethod` with :func:`abc.abstractmethod` instead."
msgstr ""
":class:`abc.abstractclassmethod` 已被棄用，請使用 :class:`classmethod` 和 :"
"func:`abc.abstractmethod` 代替。"

#: ../../whatsnew/3.3.rst:923 ../../whatsnew/3.3.rst:2249
#, fuzzy
msgid ""
":class:`abc.abstractstaticmethod` has been deprecated, use :class:"
"`staticmethod` with :func:`abc.abstractmethod` instead."
msgstr ""
":class:`abc.abstractstaticmethod` 已被棄用，請使用 :class:`staticmethod` 和 :"
"func:`abc.abstractmethod` 代替。"

#: ../../whatsnew/3.3.rst:926
msgid "(Contributed by Darren Dale in :issue:`11610`.)"
msgstr "（由 Darren Dale 在 :issue:`11610` 中貢獻。）"

#: ../../whatsnew/3.3.rst:928
#, fuzzy
msgid ""
":meth:`abc.ABCMeta.register` now returns the registered subclass, which "
"means it can now be used as a class decorator (:issue:`10868`)."
msgstr ""
":meth:`abc.ABCMeta.register` 現在回傳註冊的子類別，這意味著它現在可以用作類裝"
"飾器 (:issue:`10868`)。"

#: ../../whatsnew/3.3.rst:933
msgid "array"
msgstr "array"

#: ../../whatsnew/3.3.rst:935
#, fuzzy
msgid ""
"The :mod:`array` module supports the :c:expr:`long long` type using ``q`` "
"and ``Q`` type codes."
msgstr ""
":mod:`array` 模組支援使用 ``q`` 和 ``Q`` 型別程式碼的 :c:expr:`long long` 型"
"別。"

#: ../../whatsnew/3.3.rst:938
msgid "(Contributed by Oren Tirosh and Hirokazu Yamamoto in :issue:`1172711`.)"
msgstr "（由 Oren Tirosh 和 Hirokazu Yamamoto 在 :issue:`1172711` 中貢獻。）"

#: ../../whatsnew/3.3.rst:942
msgid "base64"
msgstr "base64"

#: ../../whatsnew/3.3.rst:944
#, fuzzy
msgid ""
"ASCII-only Unicode strings are now accepted by the decoding functions of "
"the :mod:`base64` modern interface. For example, ``base64."
"b64decode('YWJj')`` returns ``b'abc'``.  (Contributed by Catalin Iacob in :"
"issue:`13641`.)"
msgstr ""
":mod:`base64` 現代介面的解碼函式現在接受純 ASCII Unicode 字串。例如，"
"``base64.b64decode('YWJj')`` 回傳``b'abc'``。 （由 Catalin Iacob 在 :issue:"
"`13641` 中貢獻。）"

#: ../../whatsnew/3.3.rst:950
msgid "binascii"
msgstr "binascii"

#: ../../whatsnew/3.3.rst:952
#, fuzzy
msgid ""
"In addition to the binary objects they normally accept, the ``a2b_`` "
"functions now all also accept ASCII-only strings as input.  (Contributed by "
"Antoine Pitrou in :issue:`13637`.)"
msgstr ""
"除了它們通常接受的二進位物件之外，``a2b_`` 函式現在也都接受純 ASCII 字串作為"
"輸入。 （由 Antoine Pitrou 在 :issue:`13637` 中貢獻。）"

#: ../../whatsnew/3.3.rst:958
msgid "bz2"
msgstr "bz2"

#: ../../whatsnew/3.3.rst:960
msgid ""
"The :mod:`bz2` module has been rewritten from scratch. In the process, "
"several new features have been added:"
msgstr ":mod:`bz2` 模組已被從頭開始改寫過。在此過程中，新增了幾個新功能："

#: ../../whatsnew/3.3.rst:963
msgid ""
"New :func:`bz2.open` function: open a bzip2-compressed file in binary or "
"text mode."
msgstr "新的 :func:`bz2.open` 函式：以二進位或文本模式打開 bzip2 壓縮檔案。"

#: ../../whatsnew/3.3.rst:966
#, fuzzy
msgid ""
":class:`bz2.BZ2File` can now read from and write to arbitrary file-like "
"objects, by means of its constructor's *fileobj* argument."
msgstr ""
":class:`bz2.BZ2File` 現在可以通過其構造函式的 *fileobj* 參數讀取和寫入任意類"
"文件物件。"

#: ../../whatsnew/3.3.rst:969
msgid "(Contributed by Nadeem Vawda in :issue:`5863`.)"
msgstr "（由 Nadeem Vawda 在 :issue:`5863` 中貢獻。）"

#: ../../whatsnew/3.3.rst:971
#, fuzzy
msgid ""
":class:`bz2.BZ2File` and :func:`bz2.decompress` can now decompress multi-"
"stream inputs (such as those produced by the :program:`pbzip2` tool). :class:"
"`bz2.BZ2File` can now also be used to create this type of file, using the "
"``'a'`` (append) mode."
msgstr ""
":class:`bz2.BZ2File` 和 :func:`bz2.decompress` 現在可以解壓縮多流輸入（例如"
"由 :program:`pbzip2` 工俱生成的輸入）。 :class:`bz2.BZ2File` 現在也可以用來建"
"立這種型別的文件，使用 ``'a'``（追加）模式。"

#: ../../whatsnew/3.3.rst:976
msgid "(Contributed by Nir Aides in :issue:`1625`.)"
msgstr "（由 Nir Aides 在 :issue:`1625` 中貢獻。）"

#: ../../whatsnew/3.3.rst:978
#, fuzzy
msgid ""
":class:`bz2.BZ2File` now implements all of the :class:`io.BufferedIOBase` "
"API, except for the :meth:`detach` and :meth:`truncate` methods."
msgstr ""
":class:`bz2.BZ2File` 現在實作所有 :class:`io.BufferedIOBase` API，除了 :meth:"
"`detach` 和 :meth:`truncate` 方法。"

#: ../../whatsnew/3.3.rst:983
msgid "codecs"
msgstr "codecs"

#: ../../whatsnew/3.3.rst:985
#, fuzzy
msgid ""
"The :mod:`~encodings.mbcs` codec has been rewritten to handle correctly "
"``replace`` and ``ignore`` error handlers on all Windows versions.  The :mod:"
"`~encodings.mbcs` codec now supports all error handlers, instead of only "
"``replace`` to encode and ``ignore`` to decode."
msgstr ""
":mod:`~encodings.mbcs` 編解碼器已被重寫以正確處理所有 Windows 版本上的 "
"``replace`` 和 ``ignore`` 錯誤處理程式。 :mod:`~encodings.mbcs` 編解碼器現在"
"支援所有錯誤處理程式，而不是僅通過 ``replace`` 進行編碼和 ``ignore`` 進行解"
"碼。"

#: ../../whatsnew/3.3.rst:990
#, fuzzy
msgid ""
"A new Windows-only codec has been added: ``cp65001`` (:issue:`13216`). It is "
"the Windows code page 65001 (Windows UTF-8, ``CP_UTF8``).  For example, it "
"is used by ``sys.stdout`` if the console output code page is set to cp65001 "
"(e.g., using ``chcp 65001`` command)."
msgstr ""
"新增了一個新的僅限 Windows 的編解碼器：``cp65001``（ :issue:`13216`）。它是 "
"Windows 程式碼頁 65001（Windows UTF-8，“CP_UTF8”）。例如，如果控制台輸出程式"
"碼頁設定為 cp65001（例如，使用 ``chcp 65001`` 命令），``sys.stdout`` 將使用"
"它。"

#: ../../whatsnew/3.3.rst:995
#, fuzzy
msgid ""
"Multibyte CJK decoders now resynchronize faster.  They only ignore the first "
"byte of an invalid byte sequence. For example, ``b'\\xff\\n'."
"decode('gb2312', 'replace')`` now returns a ``\\n`` after the replacement "
"character."
msgstr ""
"多位元組 CJK 解碼器現在可以更快地重新同步。它們只忽略無效位元組序列的第一個位"
"元組。例如，``b'\\xff\\n'.decode('gb2312', 'replace')`` 現在在替換字元後回傳"
"一個 ``\\n``。"

#: ../../whatsnew/3.3.rst:999
msgid "(:issue:`12016`)"
msgstr "(:issue:`12016`)"

#: ../../whatsnew/3.3.rst:1001
#, fuzzy
msgid ""
"Incremental CJK codec encoders are no longer reset at each call to their "
"encode() methods. For example::"
msgstr "增量 CJK 編解碼器編碼器不再在每次呼叫其 encode() 方法時重置。例如：："

#: ../../whatsnew/3.3.rst:1009
msgid ""
"This example gives ``b'~{Np~}~{J)~}~{l6~}~{HK~}~{!#~} Bye.'`` with older "
"Python versions."
msgstr ""
"這個例子給出了帶有舊 Python 版本的 ``b'~{Np~}~{J)~}~{l6~}~{HK~}~{!#~} Bye.'`` 。"

#: ../../whatsnew/3.3.rst:1012
msgid "(:issue:`12100`)"
msgstr "(:issue:`12100`)"

#: ../../whatsnew/3.3.rst:1014
msgid "The ``unicode_internal`` codec has been deprecated."
msgstr "``unicode_internal`` 編解碼器已被棄用。"

#: ../../whatsnew/3.3.rst:1018
msgid "collections"
msgstr "collections"

#: ../../whatsnew/3.3.rst:1020
#, fuzzy
msgid ""
"Addition of a new :class:`~collections.ChainMap` class to allow treating a "
"number of mappings as a single unit.  (Written by Raymond Hettinger for :"
"issue:`11089`, made public in :issue:`11297`.)"
msgstr ""
"新增一個新的 :class:`~collections.ChainMap` 類以允許將多個映射視為一個單元。 "
"（由 Raymond Hettinger 為 :issue:`11089` 撰寫，在 :issue:`11297` 中公開。）"

#: ../../whatsnew/3.3.rst:1024
#, fuzzy
msgid ""
"The abstract base classes have been moved in a new :mod:`collections.abc` "
"module, to better differentiate between the abstract and the concrete "
"collections classes.  Aliases for ABCs are still present in the :mod:"
"`collections` module to preserve existing imports.  (:issue:`11085`)"
msgstr ""
"抽象基底類別已移至新的 :mod:`collections.abc` 模組中，以更好地區分抽象和具體"
"集合類。 ABC 的別名仍然存在於 :mod:`collections` 模組中以保留現有的導入。 "
"（ :issue:`11085`）"

#: ../../whatsnew/3.3.rst:1031
#, fuzzy
msgid ""
"The :class:`~collections.Counter` class now supports the unary ``+`` and ``-"
"`` operators, as well as the in-place operators ``+=``, ``-=``, ``|=``, and "
"``&=``.  (Contributed by Raymond Hettinger in :issue:`13121`.)"
msgstr ""
":class:`~collections.Counter` 類現在支援一元 ``+`` 和 ``-`` 運算符，以及就地"
"運算符 ``+=``、``-=``、 ``|=`` 和 ``&=``。 （由 Raymond Hettinger 在 :issue:"
"`13121` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1037
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.3.rst:1039
#, fuzzy
msgid ""
":class:`~contextlib.ExitStack` now provides a solid foundation for "
"programmatic manipulation of context managers and similar cleanup "
"functionality. Unlike the previous ``contextlib.nested`` API (which was "
"deprecated and removed), the new API is designed to work correctly "
"regardless of whether context managers acquire their resources in their "
"``__init__`` method (for example, file objects) or in their ``__enter__`` "
"method (for example, synchronisation objects from the :mod:`threading` "
"module)."
msgstr ""
":class:`~contextlib.ExitStack` 現在為上下文管理器和類似清理功能的編程操作提供"
"了堅實的基礎。與以前的 ``contextlib.nested`` API（已棄用和刪除）不同，新的 "
"API 旨在正常工作，無論上下文管理器是否在其 ``__init__`` 方法中獲取資源（例"
"如，文件物件）或者在它們的 ``__enter__`` 方法中（例如，來自 :mod:`threading` "
"模組的同步物件）。"

#: ../../whatsnew/3.3.rst:1048
msgid "(:issue:`13585`)"
msgstr "(:issue:`13585`)"

#: ../../whatsnew/3.3.rst:1052
msgid "crypt"
msgstr "crypt"

#: ../../whatsnew/3.3.rst:1054
#, fuzzy
msgid ""
"Addition of salt and modular crypt format (hashing method) and the :func:"
"`~crypt.mksalt` function to the :mod:`crypt` module."
msgstr ""
"新增 salt 和模組化 crypt 格式（雜湊方法）和 :func:`~crypt.mksalt` 函式到 :"
"mod:`crypt` 模組。"

#: ../../whatsnew/3.3.rst:1057
msgid "(:issue:`10924`)"
msgstr "(:issue:`10924`)"

#: ../../whatsnew/3.3.rst:1060
msgid "curses"
msgstr "curses"

#: ../../whatsnew/3.3.rst:1062
#, fuzzy
msgid ""
"If the :mod:`curses` module is linked to the ncursesw library, use Unicode "
"functions when Unicode strings or characters are passed (e.g. :c:func:"
"`waddwstr`), and bytes functions otherwise (e.g. :c:func:`waddstr`)."
msgstr ""
"如果 :mod:`curses` 模組鏈接到 ncursesw 庫，則在傳遞 Unicode 字串或字元時使用 "
"Unicode 函式（例如 :c:func:`waddwstr`），否則使用位元組函式（例如 :c:func:` "
"waddstr`）。"

#: ../../whatsnew/3.3.rst:1065
#, fuzzy
msgid "Use the locale encoding instead of ``utf-8`` to encode Unicode strings."
msgstr "使用區域設定編碼而不是 ``utf-8`` 來編碼 Unicode 字串。"

#: ../../whatsnew/3.3.rst:1066
msgid ""
":class:`curses.window` has a new :attr:`curses.window.encoding` attribute."
msgstr ""
":class:`curses.window` 有一個新的 :attr:`curses.window.encoding` 屬性。"

#: ../../whatsnew/3.3.rst:1067
#, fuzzy
msgid ""
"The :class:`curses.window` class has a new :meth:`~curses.window.get_wch` "
"method to get a wide character"
msgstr ""
":class:`curses.window` 類有一個新的 :meth:`~curses.window.get_wch` 方法來獲取"
"寬字元"

#: ../../whatsnew/3.3.rst:1069
#, fuzzy
msgid ""
"The :mod:`curses` module has a new :meth:`~curses.unget_wch` function to "
"push a wide character so the next :meth:`~curses.window.get_wch` will return "
"it"
msgstr ""
":mod:`curses` 模組有一個新的 :meth:`~curses.unget_wch` 函式來推送一個寬字元，"
"所以下一個 :meth:`~curses.window.get_wch` 將回傳它"

#: ../../whatsnew/3.3.rst:1073
msgid "(Contributed by Iñigo Serna in :issue:`6755`.)"
msgstr "（由 Iñigo Serna 在 :issue:`6755` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1076
msgid "datetime"
msgstr "datetime"

#: ../../whatsnew/3.3.rst:1078
#, fuzzy
msgid ""
"Equality comparisons between naive and aware :class:`~datetime.datetime` "
"instances now return :const:`False` instead of raising :exc:`TypeError` (:"
"issue:`15006`)."
msgstr ""
"天真和有意識 :class:`~datetime.datetime` 實例之間的相等比較現在回傳 :const:"
"`False` 而不是引發 :exc:`TypeError` (:issue:`15006`)。"

#: ../../whatsnew/3.3.rst:1081
#, fuzzy
msgid ""
"New :meth:`datetime.datetime.timestamp` method: Return POSIX timestamp "
"corresponding to the :class:`~datetime.datetime` instance."
msgstr ""
"新 :meth:`datetime.datetime.timestamp` 方法：回傳對應於 :class:`~datetime."
"datetime` 實例的 POSIX 時間戳。"

#: ../../whatsnew/3.3.rst:1083
msgid ""
"The :meth:`datetime.datetime.strftime` method supports formatting years "
"older than 1000."
msgstr ":meth:`datetime.datetime.strftime` 方法支援格式化早於 1000 年的年份。"

#: ../../whatsnew/3.3.rst:1085
#, fuzzy
msgid ""
"The :meth:`datetime.datetime.astimezone` method can now be called without "
"arguments to convert datetime instance to the system timezone."
msgstr ""
"現在可以在不帶參數的情況下呼叫 datetime.datetime.astimezone 方法，將 "
"datetime 實例轉換為系統時區。"

#: ../../whatsnew/3.3.rst:1093
msgid "decimal"
msgstr "decimal"

#: ../../whatsnew/3.3.rst:1096
#, fuzzy
msgid ":issue:`7652` - integrate fast native decimal arithmetic."
msgstr ":issue:`7652` - 集成快速原生十進位演算法。"

#: ../../whatsnew/3.3.rst:1096
msgid "C-module and libmpdec written by Stefan Krah."
msgstr "C 模組和 libmpdec 由 Stefan Krah 編寫。"

#: ../../whatsnew/3.3.rst:1098
#, fuzzy
msgid ""
"The new C version of the decimal module integrates the high speed libmpdec "
"library for arbitrary precision correctly rounded decimal floating point "
"arithmetic. libmpdec conforms to IBM's General Decimal Arithmetic "
"Specification."
msgstr ""
"新的 C 版本的 decimal 模組集成了高速 libmpdec 庫，用於任意精度正確四捨五入的"
"十進位浮點運算。 libmpdec 符合 IBM 的通用十進位算術規範。"

#: ../../whatsnew/3.3.rst:1102
#, fuzzy
msgid ""
"Performance gains range from 10x for database applications to 100x for "
"numerically intensive applications. These numbers are expected gains for "
"standard precisions used in decimal floating point arithmetic. Since the "
"precision is user configurable, the exact figures may vary. For example, in "
"integer bignum arithmetic the differences can be significantly higher."
msgstr ""
"性能提升從資料庫應用程式的 10 倍到數字密集型應用程式的 100 倍不等。這些數字是"
"十進位浮點運算中使用的標準精度的預期增益。由於精度是使用者可配置的，因此確切"
"的數字可能會有所不同。例如，在整數 bignum 算術中，差異可能要高得多。"

#: ../../whatsnew/3.3.rst:1108
#, fuzzy
msgid ""
"The following table is meant as an illustration. Benchmarks are available at "
"https://www.bytereef.org/mpdecimal/quickstart.html."
msgstr ""
"下表僅供參考。基準可在 https://www.bytereef.org/mpdecimal/quickstart.html 獲"
"得。"

#: ../../whatsnew/3.3.rst:1112
msgid "decimal.py"
msgstr "decimal.py"

#: ../../whatsnew/3.3.rst:1112
msgid "_decimal"
msgstr "_decimal"

#: ../../whatsnew/3.3.rst:1112
msgid "speedup"
msgstr "speedup"

#: ../../whatsnew/3.3.rst:1114
msgid "pi"
msgstr "pi"

#: ../../whatsnew/3.3.rst:1114
msgid "42.02s"
msgstr "42.02s"

#: ../../whatsnew/3.3.rst:1114
msgid "0.345s"
msgstr "0.345s"

#: ../../whatsnew/3.3.rst:1114
msgid "120x"
msgstr "120x"

#: ../../whatsnew/3.3.rst:1116
msgid "telco"
msgstr "telco"

#: ../../whatsnew/3.3.rst:1116
msgid "172.19s"
msgstr "172.19s"

#: ../../whatsnew/3.3.rst:1116
msgid "5.68s"
msgstr "5.68s"

#: ../../whatsnew/3.3.rst:1116
msgid "30x"
msgstr "30x"

#: ../../whatsnew/3.3.rst:1118
msgid "psycopg"
msgstr "psycopg"

#: ../../whatsnew/3.3.rst:1118
msgid "3.57s"
msgstr "3.57s"

#: ../../whatsnew/3.3.rst:1118
msgid "0.29s"
msgstr "0.29s"

#: ../../whatsnew/3.3.rst:1118
msgid "12x"
msgstr "12x"

#: ../../whatsnew/3.3.rst:1124
#, fuzzy
msgid ""
"The :exc:`~decimal.FloatOperation` signal optionally enables stricter "
"semantics for mixing floats and Decimals."
msgstr ""
":exc:`~decimal.FloatOperation` 信號可選地為混合浮點數和小數啟用更嚴格的語義。"

#: ../../whatsnew/3.3.rst:1127
#, fuzzy
msgid ""
"If Python is compiled without threads, the C version automatically disables "
"the expensive thread local context machinery. In this case, the variable :"
"data:`~decimal.HAVE_THREADS` is set to ``False``."
msgstr ""
"如果 Python 是在沒有執行緒的情況下編譯的，C 版本會自動禁用昂貴的執行緒本地上"
"下文機制。在這種情況下，變數 :data:`~decimal.HAVE_THREADS` 被設定為 "
"``False``。"

#: ../../whatsnew/3.3.rst:1134
#, fuzzy
msgid ""
"The C module has the following context limits, depending on the machine "
"architecture:"
msgstr "C 模組具有以下情境限制，具體取決於機器體系結構："

#: ../../whatsnew/3.3.rst:1138
msgid "32-bit"
msgstr "32-bit"

#: ../../whatsnew/3.3.rst:1138
msgid "64-bit"
msgstr "64-bit"

#: ../../whatsnew/3.3.rst:1140
msgid ":const:`MAX_PREC`"
msgstr ":const:`MAX_PREC`"

#: ../../whatsnew/3.3.rst:1140 ../../whatsnew/3.3.rst:1142
msgid ":const:`425000000`"
msgstr ":const:`425000000`"

#: ../../whatsnew/3.3.rst:1140 ../../whatsnew/3.3.rst:1142
msgid ":const:`999999999999999999`"
msgstr ":const:`999999999999999999`"

#: ../../whatsnew/3.3.rst:1142
msgid ":const:`MAX_EMAX`"
msgstr ":const:`MAX_EMAX`"

#: ../../whatsnew/3.3.rst:1144
msgid ":const:`MIN_EMIN`"
msgstr ":const:`MIN_EMIN`"

#: ../../whatsnew/3.3.rst:1144
msgid ":const:`-425000000`"
msgstr ":const:`-425000000`"

#: ../../whatsnew/3.3.rst:1144
msgid ":const:`-999999999999999999`"
msgstr ":const:`-999999999999999999`"

#: ../../whatsnew/3.3.rst:1147
#, fuzzy
msgid ""
"In the context templates (:class:`~decimal.DefaultContext`, :class:`~decimal."
"BasicContext` and :class:`~decimal.ExtendedContext`) the magnitude of :attr:"
"`~decimal.Context.Emax` and :attr:`~decimal.Context.Emin` has changed to :"
"const:`999999`."
msgstr ""
"在上下文模板中（:class:`~decimal.DefaultContext`、:class:`~decimal."
"BasicContext` 和 :class:`~decimal.ExtendedContext`） :attr:`~decimal.Context."
"Emax` 和 :attr:`~decimal.Context.Emin` 已更改為 :const:`999999`。"

#: ../../whatsnew/3.3.rst:1152
#, fuzzy
msgid ""
"The :class:`~decimal.Decimal` constructor in decimal.py does not observe the "
"context limits and converts values with arbitrary exponents or precision "
"exactly. Since the C version has internal limits, the following scheme is "
"used: If possible, values are converted exactly, otherwise :exc:`~decimal."
"InvalidOperation` is raised and the result is NaN. In the latter case it is "
"always possible to use :meth:`~decimal.Context.create_decimal` in order to "
"obtain a rounded or inexact value."
msgstr ""
"decimal.py 中的 :class:`~decimal.Decimal` 構造函式不遵守上下文限制並準確地轉"
"換具有任意指數或精度的值。由於 C 版本有內部限制，因此使用以下方案：如果可能，"
"值將被精確轉換，否則將引發 :exc:`~decimal.InvalidOperation` 並且結果為 NaN。"
"在後一種情況下，總是可以使用 :meth:`~decimal.Context.create_decimal` 來獲得四"
"捨五入或不精確的值。"

#: ../../whatsnew/3.3.rst:1161
#, fuzzy
msgid ""
"The power function in decimal.py is always correctly rounded. In the C "
"version, it is defined in terms of the correctly rounded :meth:`~decimal."
"Decimal.exp` and :meth:`~decimal.Decimal.ln` functions, but the final result "
"is only \"almost always correctly rounded\"."
msgstr ""
"decimal.py 中的冪函式總是正確四捨五入。在 C 版本中，它是根據正確舍入 :meth:"
"`~decimal.Decimal.exp` 和 :meth:`~decimal.Decimal.ln` 函式定義的，但最終結果"
"只是“幾乎總是正確舍入”。"

#: ../../whatsnew/3.3.rst:1167
#, fuzzy
msgid ""
"In the C version, the context dictionary containing the signals is a :class:"
"`~collections.abc.MutableMapping`.  For speed reasons, :attr:`~decimal."
"Context.flags` and :attr:`~decimal.Context.traps` always refer to the same :"
"class:`~collections.abc.MutableMapping` that the context was initialized "
"with. If a new signal dictionary is assigned, :attr:`~decimal.Context.flags` "
"and :attr:`~decimal.Context.traps` are updated with the new values, but they "
"do not reference the RHS dictionary."
msgstr ""
"在 C 版本中，包含信號的上下文字典是 :class:`~collections.abc."
"MutableMapping`。出於速度原因， :attr:`~decimal.Context.flags` 和 :attr:"
"`~decimal.Context.traps` 始終指的是與初始化上下文相同的 :class:`~collections."
"abc.MutableMapping`。如果分配了新的信號字典，:attr:`~decimal.Context.flags` "
"和 :attr:`~decimal.Context.traps` 會更新為新值，但它們不引用 RHS 字典。"

#: ../../whatsnew/3.3.rst:1177
#, fuzzy
msgid ""
"Pickling a :class:`~decimal.Context` produces a different output in order to "
"have a common interchange format for the Python and C versions."
msgstr ""
"醃製 :class:`~decimal.Context` 會產生不同的輸出，以便 Python 和 C 版本具有通"
"用的交換格式。"

#: ../../whatsnew/3.3.rst:1181
#, fuzzy
msgid ""
"The order of arguments in the :class:`~decimal.Context` constructor has been "
"changed to match the order displayed by :func:`repr`."
msgstr ""
":class:`~decimal.Context` 構造函式中的參數順序已更改為與 :func:`repr` 顯示的"
"順序相匹配。"

#: ../../whatsnew/3.3.rst:1185
msgid ""
"The ``watchexp`` parameter in the :meth:`~decimal.Decimal.quantize` method "
"is deprecated."
msgstr ":meth:`~decimal.Decimal.quantize` 方法中的 ``watchexp`` 參數已棄用。"

#: ../../whatsnew/3.3.rst:1192
msgid "email"
msgstr "email"

#: ../../whatsnew/3.3.rst:1195
#, fuzzy
msgid "Policy Framework"
msgstr "政策框架"

#: ../../whatsnew/3.3.rst:1197
#, fuzzy
msgid ""
"The email package now has a :mod:`~email.policy` framework.  A :class:"
"`~email.policy.Policy` is an object with several methods and properties that "
"control how the email package behaves.  The primary policy for Python 3.3 is "
"the :class:`~email.policy.Compat32` policy, which provides backward "
"compatibility with the email package in Python 3.2.  A ``policy`` can be "
"specified when an email message is parsed by a :mod:`~email.parser`, or when "
"a :class:`~email.message.Message` object is created, or when an email is "
"serialized using a :mod:`~email.generator`.  Unless overridden, a policy "
"passed to a ``parser`` is inherited by all the ``Message`` object and sub-"
"objects created by the ``parser``.  By default a ``generator`` will use the "
"policy of the ``Message`` object it is serializing.  The default policy is :"
"data:`~email.policy.compat32`."
msgstr ""
"電子郵件包現在有一個 :mod:`~email.policy` 框架。 A :class:`~email.policy."
"Policy` 是一個物件，具有多個控制電子郵件包行為方式的方法和屬性。 Python 3.3 "
"的主要策略是 :class:`~email.policy.Compat32` 策略，它提供與 Python 3.2 中電子"
"郵件包的向後相容性。當電子郵件消息被 :mod:`~email.parser` 剖析時，或者當建"
"立 :class:`~email.message.Message` 物件時，或者當電子郵件是使用 :mod:`~email."
"generator` 序列化。除非被覆蓋，否則傳遞給“剖析器”的策略將由“剖析器”建立的所"
"有“消息”物件和子物件繼承。預設情況下，``generator`` 將使用它正在序列化的"
"``Message`` 物件的策略。預設策略是 :data:`~email.policy.compat32`。"

#: ../../whatsnew/3.3.rst:1210
#, fuzzy
msgid "The minimum set of controls implemented by all ``policy`` objects are:"
msgstr "所有 ``policy`` 物件實作的最小控制集是："

#: ../../whatsnew/3.3.rst:1215
msgid "max_line_length"
msgstr "max_line_length"

#: ../../whatsnew/3.3.rst:1215
#, fuzzy
msgid ""
"The maximum length, excluding the linesep character(s), individual lines may "
"have when a ``Message`` is serialized.  Defaults to 78."
msgstr ""
"最大長度，不包括 linesep 字元，當“消息”被序列化時，單個行可能具有。預設為 "
"78。"

#: ../../whatsnew/3.3.rst:1219
msgid "linesep"
msgstr "linesep"

#: ../../whatsnew/3.3.rst:1219
#, fuzzy
msgid ""
"The character used to separate individual lines when a ``Message`` is "
"serialized.  Defaults to ``\\n``."
msgstr "序列化“消息”時用於分隔各行的字元。預設為``\\n``。"

#: ../../whatsnew/3.3.rst:1222
msgid "cte_type"
msgstr "cte_type"

#: ../../whatsnew/3.3.rst:1222
#, fuzzy
msgid ""
"``7bit`` or ``8bit``.  ``8bit`` applies only to a ``Bytes`` ``generator``, "
"and means that non-ASCII may be used where allowed by the protocol (or where "
"it exists in the original input)."
msgstr ""
"``7bit`` 或 ``8bit``。 ``8bit`` 僅適用於 ``Bytes`` ``generator``，這意味著非 "
"ASCII 可以在協定允許的地方使用（或者在原始輸入中存在的地方）。"

#: ../../whatsnew/3.3.rst:1227
msgid "raise_on_defect"
msgstr "raise_on_defect"

#: ../../whatsnew/3.3.rst:1227
#, fuzzy
msgid ""
"Causes a ``parser`` to raise error when defects are encountered instead of "
"adding them to the ``Message`` object's ``defects`` list."
msgstr ""
"導致 ``parser`` 在遇到缺陷時引發錯誤，而不是將它們新增到 ``Message`` 物件的 ``defects`` 列表"
"中。"

#: ../../whatsnew/3.3.rst:1232
#, fuzzy
msgid ""
"A new policy instance, with new settings, is created using the :meth:`~email."
"policy.Policy.clone` method of policy objects.  ``clone`` takes any of the "
"above controls as keyword arguments.  Any control not specified in the call "
"retains its default value.  Thus you can create a policy that uses "
"``\\r\\n`` linesep characters like this::"
msgstr ""
"使用策略物件的 :meth:`~email.policy.Policy.clone` 方法建立具有新設定的新策略"
"實例。 ``clone`` 將上述任何控件作為關鍵字參數。呼叫中未指定的任何控件都保留其"
"預設值。因此，您可以建立一個使用 ``\\r\\n`` linesep 字元的策略，如下所示："

#: ../../whatsnew/3.3.rst:1240
#, fuzzy
msgid ""
"Policies can be used to make the generation of messages in the format needed "
"by your application simpler.  Instead of having to remember to specify "
"``linesep='\\r\\n'`` in all the places you call a ``generator``, you can "
"specify it once, when you set the policy used by the ``parser`` or the "
"``Message``, whichever your program uses to create ``Message`` objects.  On "
"the other hand, if you need to generate messages in multiple forms, you can "
"still specify the parameters in the appropriate ``generator`` call.  Or you "
"can have custom policy instances for your different cases, and pass those in "
"when you create the ``generator``."
msgstr ""
"策略可用於簡化應用程式所需格式的消息生成。不必記住在呼叫 ``generator`` 的所有"
"地方指定 ``linesep='\\r\\n'``，您可以在設定 ``parser` 使用的策略時指定一次` "
"或 ``Message``，無論您的程式使用哪個來建立 ``Message`` 物件。另一方面，如果您"
"需要以多種形式生成消息，您仍然可以在適當的 ``generator`` 呼叫中指定參數。或者"
"你可以為你的不同情況定制策略實例，並在你建立 ``generator`` 時傳遞它們。"

#: ../../whatsnew/3.3.rst:1252
#, fuzzy
msgid "Provisional Policy with New Header API"
msgstr "具有新標頭 API 的臨時策略"

#: ../../whatsnew/3.3.rst:1254
#, fuzzy
msgid ""
"While the policy framework is worthwhile all by itself, the main motivation "
"for introducing it is to allow the creation of new policies that implement "
"new features for the email package in a way that maintains backward "
"compatibility for those who do not use the new policies.  Because the new "
"policies introduce a new API, we are releasing them in Python 3.3 as a :term:"
"`provisional policy <provisional package>`.  Backwards incompatible changes "
"(up to and including removal of the code) may occur if deemed necessary by "
"the core developers."
msgstr ""
"雖然策略框架本身是值得的，但引入它的主要動機是允許建立新策略來實作電子郵件包"
"的新功能，同時為那些不使用新策略的人保持向後相容性。因為新政策引入了新的 "
"API，我們在 Python 3.3 中將它們作為臨時政策 <臨時包> 發布。如果核心開發人員認"
"為有必要，可能會發生向後不相容的更改（直至並包括刪除程式碼）。"

#: ../../whatsnew/3.3.rst:1262
#, fuzzy
msgid ""
"The new policies are instances of :class:`~email.policy.EmailPolicy`, and "
"add the following additional controls:"
msgstr ""
"新策略是 :class:`~email.policy.EmailPolicy` 的實例，並新增以下附加控件："

#: ../../whatsnew/3.3.rst:1268
msgid "refold_source"
msgstr "refold_source"

#: ../../whatsnew/3.3.rst:1268
#, fuzzy
msgid ""
"Controls whether or not headers parsed by a :mod:`~email.parser` are "
"refolded by the :mod:`~email.generator`.  It can be ``none``, ``long``, or "
"``all``.  The default is ``long``, which means that source headers with a "
"line longer than ``max_line_length`` get refolded.  ``none`` means no line "
"get refolded, and ``all`` means that all lines get refolded."
msgstr ""
"控制由 :mod:`~email.parser` 剖析的標頭是否由 :mod:`~email.generator` 重新折"
"疊。它可以是 ``None`` 、 ``長``或“全部”。預設值為 ``long``，這意味著行長於 "
"``max_line_length`` 的源頭會被重新折疊。 ``none`` 表示沒有行被重新折疊，"
"``all`` 表示所有行都被重新折疊。"

#: ../../whatsnew/3.3.rst:1277
msgid "header_factory"
msgstr "header_factory"

#: ../../whatsnew/3.3.rst:1277
#, fuzzy
msgid ""
"A callable that take a ``name`` and ``value`` and produces a custom header "
"object."
msgstr "採用 ``name`` 和 ``value``並生成自定義標頭物件的可呼叫物件。"

#: ../../whatsnew/3.3.rst:1281
#, fuzzy
msgid ""
"The ``header_factory`` is the key to the new features provided by the new "
"policies.  When one of the new policies is used, any header retrieved from a "
"``Message`` object is an object produced by the ``header_factory``, and any "
"time you set a header on a ``Message`` it becomes an object produced by "
"``header_factory``.  All such header objects have a ``name`` attribute equal "
"to the header name.  Address and Date headers have additional attributes "
"that give you access to the parsed data of the header.  This means you can "
"now do things like this::"
msgstr ""
"``header_factory`` 是新策略提供的新功能的關鍵。當使用其中一個新策略時，從“消"
"息”物件檢索到的任何標頭都是由“header_factory”生成的物件，並且任何時候在“消"
"息”上設定標頭時，它都會成為一個物件由 ``header_factory`` 產生。所有此類標頭對"
"像都有一個等於標頭名稱的“名稱”屬性。 Address 和 Date 標頭具有附加屬性，可讓您"
"訪問標頭的已剖析資料。這意味著你現在可以做這樣的事情::"

#: ../../whatsnew/3.3.rst:1309
#, fuzzy
msgid ""
"You will note that the unicode display name is automatically encoded as "
"``utf-8`` when the message is serialized, but that when the header is "
"accessed directly, you get the unicode version.  This eliminates any need to "
"deal with the :mod:`email.header` :meth:`~email.header.decode_header` or :"
"meth:`~email.header.make_header` functions."
msgstr ""
"您會注意到，當消息被序列化時，unicode 顯示名稱會自動編碼為 ``utf-8``，但是當"
"直接訪問標頭時，您會獲得 unicode 版本。這消除了處理 :mod:`email.header` :"
"meth:`~email.header.decode_header` 或 :meth:`~email.header.make_header` 函式"
"的任何需要。"

#: ../../whatsnew/3.3.rst:1315
#, fuzzy
msgid "You can also create addresses from parts::"
msgstr "您還可以從部分建立地址："

#: ../../whatsnew/3.3.rst:1325
#, fuzzy
msgid "Decoding to unicode is done automatically::"
msgstr "解碼為 unicode 是自動完成的::"

#: ../../whatsnew/3.3.rst:1331
#, fuzzy
msgid ""
"When you parse a message, you can use the ``addresses`` and ``groups`` "
"attributes of the header objects to access the groups and individual "
"addresses::"
msgstr ""
"剖析消息時，可以使用標頭物件的 ``addresses`` 和 ``groups``屬性來訪問組和個人"
"地址："

#: ../../whatsnew/3.3.rst:1340
#, fuzzy
msgid ""
"In summary, if you use one of the new policies, header manipulation works "
"the way it ought to:  your application works with unicode strings, and the "
"email package transparently encodes and decodes the unicode to and from the "
"RFC standard Content Transfer Encodings."
msgstr ""
"總而言之，如果您使用其中一項新策略，標頭操作將按其應有的方式工作：您的應用程"
"式使用 unicode 字串，並且電子郵件包透明地編碼和解碼 unicode 與 RFC 標準內容傳"
"輸編碼。"

#: ../../whatsnew/3.3.rst:1346
msgid "Other API Changes"
msgstr "其他 API 更改"

#: ../../whatsnew/3.3.rst:1348
#, fuzzy
msgid ""
"New :class:`~email.parser.BytesHeaderParser`, added to the :mod:`~email."
"parser` module to complement :class:`~email.parser.HeaderParser` and "
"complete the Bytes API."
msgstr ""
"新 :class:`~email.parser.BytesHeaderParser`，新增到 :mod:`~email.parser` 模組"
"以補充 :class:`~email.parser.HeaderParser` 並完成 Bytes API。"

#: ../../whatsnew/3.3.rst:1352
#, fuzzy
msgid "New utility functions:"
msgstr "新工具函式："

#: ../../whatsnew/3.3.rst:1354
#, fuzzy
msgid ""
":func:`~email.utils.format_datetime`: given a :class:`~datetime.datetime`, "
"produce a string formatted for use in an email header."
msgstr ""
":func:`~email.utils.format_datetime`: 給定一個 :class:`~datetime.datetime`，"
"生成一個格式化的字串用於電子郵件標題。"

#: ../../whatsnew/3.3.rst:1357
#, fuzzy
msgid ""
":func:`~email.utils.parsedate_to_datetime`: given a date string from an "
"email header, convert it into an aware :class:`~datetime.datetime`, or a "
"naive :class:`~datetime.datetime` if the offset is ``-0000``."
msgstr ""
":func:`~email.utils.parsedate_to_datetime`: 給定一個來自電子郵件標頭的日期字"
"串，將其轉換為一個可感知的 :class:`~datetime.datetime`，或者一個簡單的 :"
"class:`~datetime.datetime` 如果偏移量是 ``-0000``。"

#: ../../whatsnew/3.3.rst:1361
#, fuzzy
msgid ""
":func:`~email.utils.localtime`: With no argument, returns the current local "
"time as an aware :class:`~datetime.datetime` using the local :class:"
"`~datetime.timezone`.  Given an aware :class:`~datetime.datetime`, converts "
"it into an aware :class:`~datetime.datetime` using the local :class:"
"`~datetime.timezone`."
msgstr ""
":func:`~email.utils.localtime`: 沒有參數，回傳當前本地時間作為感知 :class:"
"`~datetime.datetime` 使用本地 :class:`~datetime.timezone`。給定一個感知的 :"
"class:`~datetime.datetime`，使用本地 :class:`~datetime.timezone` 將它轉換成一"
"個感知的 :class:`~datetime.datetime`。"

#: ../../whatsnew/3.3.rst:1369
msgid "ftplib"
msgstr "ftplib"

#: ../../whatsnew/3.3.rst:1371
#, fuzzy
msgid ""
":class:`ftplib.FTP` now accepts a ``source_address`` keyword argument to "
"specify the ``(host, port)`` to use as the source address in the bind call "
"when creating the outgoing socket.  (Contributed by Giampaolo Rodolà in :"
"issue:`8594`.)"
msgstr ""
":class:`ftplib.FTP` 現在接受一個 ``source_address`` 關鍵字參數來指定 "
"``(host, port)`` 在建立傳出 socket 時用作綁定呼叫中的源地址。 （由 Giampaolo "
"Rodolà 在 :issue:`8594` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1376
#, fuzzy
msgid ""
"The :class:`~ftplib.FTP_TLS` class now provides a new :func:`~ftplib.FTP_TLS."
"ccc` function to revert control channel back to plaintext.  This can be "
"useful to take advantage of firewalls that know how to handle NAT with non-"
"secure FTP without opening fixed ports.  (Contributed by Giampaolo Rodolà "
"in :issue:`12139`.)"
msgstr ""
":class:`~ftplib.FTP_TLS` 類現在提供了一個新的 :func:`~ftplib.FTP_TLS.ccc` 函"
"式來將控制通道恢復為純文本。這對於利用知道如何在不打開固定端口的情況下使用非"
"安全 FTP 處理 NAT 的防火牆很有用。 （由 Giampaolo Rodolà 在 :issue:`12139` 中"
"貢獻。）"

#: ../../whatsnew/3.3.rst:1382
#, fuzzy
msgid ""
"Added :meth:`ftplib.FTP.mlsd` method which provides a parsable directory "
"listing format and deprecates :meth:`ftplib.FTP.nlst` and :meth:`ftplib.FTP."
"dir`.  (Contributed by Giampaolo Rodolà in :issue:`11072`.)"
msgstr ""
"新增 :meth:`ftplib.FTP.mlsd` 方法，該方法提供可剖析的目錄列表格式並棄用 :"
"meth:`ftplib.FTP.nlst` 和 :meth:`ftplib.FTP.dir`。 （由 Giampaolo Rodolà 在 :"
"issue:`11072` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1388
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.3.rst:1390
#, fuzzy
msgid ""
"The :func:`functools.lru_cache` decorator now accepts a ``typed`` keyword "
"argument (that defaults to ``False`` to ensure that it caches values of "
"different types that compare equal in separate cache slots.  (Contributed by "
"Raymond Hettinger in :issue:`13227`.)"
msgstr ""
":func:`functools.lru_cache` 裝飾器現在接受一個 ``typed`` 關鍵字參數（預設為 "
"``False`` 以確保它快取不同型別的值，這些值在單獨的快取槽中比較相等。（由 "
"Raymond 提供Hettinger 在 :issue:`13227` 中。）"

#: ../../whatsnew/3.3.rst:1397
msgid "gc"
msgstr "gc"

#: ../../whatsnew/3.3.rst:1399
#, fuzzy
msgid ""
"It is now possible to register callbacks invoked by the garbage collector "
"before and after collection using the new :data:`~gc.callbacks` list."
msgstr ""
"現在可以使用新的 :data:`~gc.callbacks` 列表註冊垃圾收集器在收集前後呼叫的回"
"呼。"

#: ../../whatsnew/3.3.rst:1404
msgid "hmac"
msgstr "hmac"

#: ../../whatsnew/3.3.rst:1406
#, fuzzy
msgid ""
"A new :func:`~hmac.compare_digest` function has been added to prevent side "
"channel attacks on digests through timing analysis.  (Contributed by Nick "
"Coghlan and Christian Heimes in :issue:`15061`.)"
msgstr ""
"新增了一個新的 :func:`~hmac.compare_digest` 函式以防止通過時序分析對摘要進行"
"側信道攻擊。 （由 Nick Coghlan 和 Christian Heimes 在 :issue:`15061` 中貢"
"獻。）"

#: ../../whatsnew/3.3.rst:1412
msgid "http"
msgstr "http"

#: ../../whatsnew/3.3.rst:1414
#, fuzzy
msgid ""
":class:`http.server.BaseHTTPRequestHandler` now buffers the headers and "
"writes them all at once when :meth:`~http.server.BaseHTTPRequestHandler."
"end_headers` is called.  A new method :meth:`~http.server."
"BaseHTTPRequestHandler.flush_headers` can be used to directly manage when "
"the accumulated headers are sent. (Contributed by Andrew Schaaf in :issue:"
"`3709`.)"
msgstr ""
":class:`http.server.BaseHTTPRequestHandler` 現在緩衝標頭並在 :meth:`~http."
"server.BaseHTTPRequestHandler.end_headers` 被呼叫時一次性寫入它們。一種新方"
"法 :meth:`~http.server.BaseHTTPRequestHandler.flush_headers` 可用於直接管理何"
"時發送累積的標頭。 （由 Andrew Schaaf 在 :issue:`3709` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1420
msgid ""
":class:`http.server` now produces valid ``HTML 4.01 strict`` output. "
"(Contributed by Ezio Melotti in :issue:`13295`.)"
msgstr ""
":class:`http.server` 現在生成有效的 ``HTML 4.01 strict`` 輸出。 （由 Ezio "
"Melotti 在 :issue:`13295` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1423
#, fuzzy
msgid ""
":class:`http.client.HTTPResponse` now has a :meth:`~http.client.HTTPResponse."
"readinto` method, which means it can be used as an :class:`io.RawIOBase` "
"class.  (Contributed by John Kuhn in :issue:`13464`.)"
msgstr ""
":class:`http.client.HTTPResponse` 現在有一個 :meth:`~http.client."
"HTTPResponse.readinto` 方法，這意味著它可以用作 :class:`io.RawIOBase` 類。 "
"（由 John Kuhn 在 :issue:`13464` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1430
msgid "html"
msgstr "html"

#: ../../whatsnew/3.3.rst:1432
#, fuzzy
msgid ""
":class:`html.parser.HTMLParser` is now able to parse broken markup without "
"raising errors, therefore the *strict* argument of the constructor and the :"
"exc:`~html.parser.HTMLParseError` exception are now deprecated. The ability "
"to parse broken markup is the result of a number of bug fixes that are also "
"available on the latest bug fix releases of Python 2.7/3.2. (Contributed by "
"Ezio Melotti in :issue:`15114`, and :issue:`14538`, :issue:`13993`, :issue:"
"`13960`, :issue:`13358`, :issue:`1745761`, :issue:`755670`, :issue:`13357`, :"
"issue:`12629`, :issue:`1200313`, :issue:`670664`, :issue:`13273`, :issue:"
"`12888`, :issue:`7311`.)"
msgstr ""
":class:`html.parser.HTMLParser` 現在能夠在不引發錯誤的情況下剖析損壞的標記，"
"因此構造函式的 *strict* 參數和 :exc:`~html.parser.HTMLParseError` 例外現在已"
"棄用。剖析損壞標記的能力是許多錯誤修復的結果，這些錯誤修復也可在 Python "
"2.7/3.2 的最新錯誤修復版本中使用。 （由 Ezio Melotti 在 :issue:`15114`, and :"
"issue:`14538`, :issue:`13993`, :issue:`13960`, :issue:`13358`, :issue:"
"`1745761`, :issue:`755670`, :issue:`13357`, :issue:`12629`, :issue:"
"`1200313`, :issue:`670664`, :issue:`13273`, :issue:`12888`, :issue:`7311` 中"
"貢獻。）"

#: ../../whatsnew/3.3.rst:1442
#, fuzzy
msgid ""
"A new :data:`~html.entities.html5` dictionary that maps HTML5 named "
"character references to the equivalent Unicode character(s) (e.g. "
"``html5['gt;'] == '>'``) has been added to the :mod:`html.entities` module.  "
"The dictionary is now also used by :class:`~html.parser.HTMLParser`.  "
"(Contributed by Ezio Melotti in :issue:`11113` and :issue:`15156`.)"
msgstr ""
"新增了一個新的 :data:`~html.entities.html5` 字典，將 HTML5 命名字元引用映射到"
"等效的 Unicode 字元（例如 ``html5['gt;'] == '>'``）到 :mod:`html.entities` 模"
"組。字典現在也被 :class:`~html.parser.HTMLParser` 使用。 （由 Ezio Melotti "
"在 :issue:`11113` 和 :issue:`15156` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1450
msgid "imaplib"
msgstr "imaplib"

#: ../../whatsnew/3.3.rst:1452
#, fuzzy
msgid ""
"The :class:`~imaplib.IMAP4_SSL` constructor now accepts an SSLContext "
"parameter to control parameters of the secure channel."
msgstr ""
":class:`~imaplib.IMAP4_SSL` 構造函式現在接受 SSLContext 參數來控制安全通道的"
"參數。"

#: ../../whatsnew/3.3.rst:1455
msgid "(Contributed by Sijin Joseph in :issue:`8808`.)"
msgstr "（由 Sijin Joseph 在 :issue:`8808` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1459
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.3.rst:1461
#, fuzzy
msgid ""
"A new :func:`~inspect.getclosurevars` function has been added. This function "
"reports the current binding of all names referenced from the function body "
"and where those names were resolved, making it easier to verify correct "
"internal state when testing code that relies on stateful closures."
msgstr ""
"新增了一個新的 :func:`~inspect.getclosurevars` 函式。此函式報告從函式體引用的"
"所有名稱的當前綁定以及這些名稱的解析位置，從而在測試依賴於有狀態閉包的程式碼"
"時更容易驗證正確的內部狀態。"

#: ../../whatsnew/3.3.rst:1466
msgid "(Contributed by Meador Inge and Nick Coghlan in :issue:`13062`.)"
msgstr "（由 Meador Inge 和 Nick Coghlan 在 :issue:`13062` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1468
#, fuzzy
msgid ""
"A new :func:`~inspect.getgeneratorlocals` function has been added. This "
"function reports the current binding of local variables in the generator's "
"stack frame, making it easier to verify correct internal state when testing "
"generators."
msgstr ""
"新增了一個新的 :func:`~inspect.getgeneratorlocals` 函式。此函式報告生成器棧幀"
"中局部變數的當前綁定，從而在測試生成器時更容易驗證正確的內部狀態。"

#: ../../whatsnew/3.3.rst:1473
msgid "(Contributed by Meador Inge in :issue:`15153`.)"
msgstr "（由 Meador Inge 在 :issue:`15153` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1476
msgid "io"
msgstr "io"

#: ../../whatsnew/3.3.rst:1478
#, fuzzy
msgid ""
"The :func:`~io.open` function has a new ``'x'`` mode that can be used to "
"exclusively create a new file, and raise a :exc:`FileExistsError` if the "
"file already exists. It is based on the C11 'x' mode to fopen()."
msgstr ""
":func:`~io.open` 函式有一個新的 ``'x'`` 模式，可用於專門建立新文件，並在文件"
"已存在時引發 :exc:`FileExistsError`。它基於 fopen() 的 C11 'x' 模式。"

#: ../../whatsnew/3.3.rst:1482
msgid "(Contributed by David Townshend in :issue:`12760`.)"
msgstr "（由 David Townshend 在 :issue:`12760` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1484
#, fuzzy
msgid ""
"The constructor of the :class:`~io.TextIOWrapper` class has a new "
"*write_through* optional argument. If *write_through* is ``True``, calls to :"
"meth:`~io.TextIOWrapper.write` are guaranteed not to be buffered: any data "
"written on the :class:`~io.TextIOWrapper` object is immediately handled to "
"its underlying binary buffer."
msgstr ""
":class:`~io.TextIOWrapper` 類的構造函式有一個新的 *write_through* 可選參數。"
"如果 *write_through* 為 ``True``，則保證不會緩衝對 :meth:`~io.TextIOWrapper."
"write` 的呼叫：寫入 :class:`~io.TextIOWrapper` 物件的任何資料都會立即處理到它"
"的底層二進位緩衝區。"

#: ../../whatsnew/3.3.rst:1492
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.3.rst:1494
#, fuzzy
msgid ""
":func:`~itertools.accumulate` now takes an optional ``func`` argument for "
"providing a user-supplied binary function."
msgstr ""
":func:`~itertools.accumulate` 現在採用可選的 ``func`` 參數來提供使用者提供的"
"二進位函式。"

#: ../../whatsnew/3.3.rst:1499
msgid "logging"
msgstr "logging"

#: ../../whatsnew/3.3.rst:1501
#, fuzzy
msgid ""
"The :func:`~logging.basicConfig` function now supports an optional "
"``handlers`` argument taking an iterable of handlers to be added to the root "
"logger."
msgstr ""
":func:`~logging.basicConfig` 函式現在支援一個可選的 ``handlers`` 參數，它可以"
"將可疊代的處理程式新增到根記錄器中。"

#: ../../whatsnew/3.3.rst:1504
#, fuzzy
msgid ""
"A class level attribute :attr:`~logging.handlers.SysLogHandler.append_nul` "
"has been added to :class:`~logging.handlers.SysLogHandler` to allow control "
"of the appending of the ``NUL`` (``\\000``) byte to syslog records, since "
"for some daemons it is required while for others it is passed through to the "
"log."
msgstr ""
"類級別屬性 :attr:`~logging.handlers.SysLogHandler.append_nul` 已新增到 :"
"class:`~logging.handlers.SysLogHandler` 以允許控制附加``NUL`` (``\\000 ``) 位"
"元組到 syslog 記錄，因為對於某些守護行程來說，它是必需的，而對於其他守護行"
"程，它被傳遞到日誌中。"

#: ../../whatsnew/3.3.rst:1512
msgid "math"
msgstr "math"

#: ../../whatsnew/3.3.rst:1514
#, fuzzy
msgid ""
"The :mod:`math` module has a new function, :func:`~math.log2`,  which "
"returns the base-2 logarithm of *x*."
msgstr ""
":mod:`math` 模組有一個新函式 :func:`~math.log2`，它回傳 *x* 的以 2 為底的對"
"數。"

#: ../../whatsnew/3.3.rst:1517
msgid "(Written by Mark Dickinson in :issue:`11888`.)"
msgstr "（由 Mark Dickinson 在 :issue:`11888` 中撰寫。）"

#: ../../whatsnew/3.3.rst:1521
msgid "mmap"
msgstr "mmap"

#: ../../whatsnew/3.3.rst:1523
#, fuzzy
msgid ""
"The :meth:`~mmap.mmap.read` method is now more compatible with other file-"
"like objects: if the argument is omitted or specified as ``None``, it "
"returns the bytes from the current file position to the end of the mapping.  "
"(Contributed by Petri Lehtinen in :issue:`12021`.)"
msgstr ""
":meth:`~mmap.mmap.read` 方法現在與其他類文件物件更加相容：如果參數被省略或指"
"定為 ``None``，它回傳從當前文件位置到末尾的位元組的映射。 （由 Petri "
"Lehtinen 在 :issue:`12021` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1530
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.3.rst:1532
#, fuzzy
msgid ""
"The new :func:`multiprocessing.connection.wait` function allows polling "
"multiple objects (such as connections, sockets and pipes) with a timeout. "
"(Contributed by Richard Oudkerk in :issue:`12328`.)"
msgstr ""
"新的 :func:`multiprocessing.connection.wait` 函式允許使用超時輪詢多個物件（例"
"如連接、 socket 和管道）。 （由 Richard Oudkerk 在 :issue:`12328` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1536
#, fuzzy
msgid ""
":class:`multiprocessing.Connection` objects can now be transferred over "
"multiprocessing connections. (Contributed by Richard Oudkerk in :issue:"
"`4892`.)"
msgstr ""
":class:`multiprocessing.Connection` 物件現在可以通過多處理連接傳輸。 （由 "
"Richard Oudkerk 在 :issue:`4892` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1540
#, fuzzy
msgid ""
":class:`multiprocessing.Process` now accepts a ``daemon`` keyword argument "
"to override the default behavior of inheriting the ``daemon`` flag from the "
"parent process (:issue:`6064`)."
msgstr ""
":class:`multiprocessing.Process` 現在接受一個 ``daemon`` 關鍵字參數來覆蓋從父"
"行程繼承 ``daemon`` 旗標的預設行為 (:issue:`6064`)。"

#: ../../whatsnew/3.3.rst:1544
#, fuzzy
msgid ""
"New attribute :data:`multiprocessing.Process.sentinel` allows a program to "
"wait on multiple :class:`~multiprocessing.Process` objects at one time using "
"the appropriate OS primitives (for example, :mod:`select` on posix systems)."
msgstr ""
"新屬性 :data:`multiprocessing.Process.sentinel` 允許程式使用適當的 OS 原語一"
"次等待多個 :class:`~multiprocessing.Process` 物件（例如，posix 系統上的 :mod:"
"`select` )."

#: ../../whatsnew/3.3.rst:1549
#, fuzzy
msgid ""
"New methods :meth:`multiprocessing.pool.Pool.starmap` and :meth:"
"`~multiprocessing.pool.Pool.starmap_async` provide :func:`itertools.starmap` "
"equivalents to the existing :meth:`multiprocessing.pool.Pool.map` and :meth:"
"`~multiprocessing.pool.Pool.map_async` functions.  (Contributed by Hynek "
"Schlawack in :issue:`12708`.)"
msgstr ""
"新方法 :meth:`multiprocessing.pool.Pool.starmap` 和 :meth:`~multiprocessing."
"pool.Pool.starmap_async` 提供 :func:`itertools.starmap` 等同於現有的 :meth:"
"`multiprocessing.pool.Pool .map` 和 :meth:`~multiprocessing.pool.Pool."
"map_async` 函式。 （由 Hynek Schlawack 在 :issue:`12708` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1558
msgid "nntplib"
msgstr "nntplib"

#: ../../whatsnew/3.3.rst:1560
#, fuzzy
msgid ""
"The :class:`nntplib.NNTP` class now supports the context management protocol "
"to unconditionally consume :exc:`socket.error` exceptions and to close the "
"NNTP connection when done::"
msgstr ""
":class:`nntplib.NNTP` 類現在支援上下文管理協定以無條件地使用 :exc:`socket."
"error` 例外並在完成時關閉 NNTP 連接::"

#: ../../whatsnew/3.3.rst:1571
msgid "(Contributed by Giampaolo Rodolà in :issue:`9795`.)"
msgstr "（由 Giampaolo Rodolà 在 :issue:`9795` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1575
msgid "os"
msgstr "os"

#: ../../whatsnew/3.3.rst:1577
#, fuzzy
msgid ""
"The :mod:`os` module has a new :func:`~os.pipe2` function that makes it "
"possible to create a pipe with :data:`~os.O_CLOEXEC` or :data:`~os."
"O_NONBLOCK` flags set atomically. This is especially useful to avoid race "
"conditions in multi-threaded programs."
msgstr ""
":mod:`os` 模組有一個新的 :func:`~os.pipe2` 函式，可以使用 :data:`~os."
"O_CLOEXEC` 或 :data:`~os.O_NONBLOCK` 旗標建立管道原子設定。這對於避免多執行緒"
"程式中的競爭條件特別有用。"

#: ../../whatsnew/3.3.rst:1582
#, fuzzy
msgid ""
"The :mod:`os` module has a new :func:`~os.sendfile` function which provides "
"an efficient \"zero-copy\" way for copying data from one file (or socket) "
"descriptor to another. The phrase \"zero-copy\" refers to the fact that all "
"of the copying of data between the two descriptors is done entirely by the "
"kernel, with no copying of data into userspace buffers. :func:`~os.sendfile` "
"can be used to efficiently copy data from a file on disk to a network "
"socket, e.g. for downloading a file."
msgstr ""
":mod:`os` 模組有一個新的 :func:`~os.sendfile` 函式，它提供了一種有效的“零複"
"製”方式，用於將資料從一個文件（或 socket ）描述器複製到另一個。短語“零複製”指"
"的是兩個描述器之間的所有資料複製完全由內核完成，沒有將資料複製到使用者空間緩"
"衝區中。 :func:`~os.sendfile` 可用於有效地將資料從磁盤上的文件複製到網絡 "
"socket ，例如用於下載文件。"

#: ../../whatsnew/3.3.rst:1590
msgid ""
"(Patch submitted by Ross Lagerwall and Giampaolo Rodolà in :issue:`10882`.)"
msgstr ""
"（Ross Lagerwall 和 Giampaolo Rodolà 在 :issue:`10882` 中提交修正。）"

#: ../../whatsnew/3.3.rst:1592
#, fuzzy
msgid ""
"To avoid race conditions like symlink attacks and issues with temporary "
"files and directories, it is more reliable (and also faster) to manipulate "
"file descriptors instead of file names. Python 3.3 enhances existing "
"functions and introduces new functions to work on file descriptors (:issue:"
"`4761`, :issue:`10755` and :issue:`14626`)."
msgstr ""
"為了避免像符號鏈接攻擊和臨時文件和目錄問題這樣的競爭條件，操作文件描述器而不"
"是文件名更可靠（也更快）。 Python 3.3 增強了現有函式並引入了新函式來處理文件"
"描述器（:issue:`4761`、:issue:`10755` 和 :issue:`14626`）。"

#: ../../whatsnew/3.3.rst:1598
#, fuzzy
msgid ""
"The :mod:`os` module has a new :func:`~os.fwalk` function similar to :func:"
"`~os.walk` except that it also yields file descriptors referring to the "
"directories visited. This is especially useful to avoid symlink races."
msgstr ""
":mod:`os` 模組有一個新的 :func:`~os.fwalk` 函式類似於 :func:`~os.walk` 除了它"
"還產生引用訪問目錄的文件描述器。這對於避免符號鏈接競爭特別有用。"

#: ../../whatsnew/3.3.rst:1602
#, fuzzy
msgid ""
"The following functions get new optional *dir_fd* (:ref:`paths relative to "
"directory descriptors <dir_fd>`) and/or *follow_symlinks* (:ref:`not "
"following symlinks <follow_symlinks>`): :func:`~os.access`, :func:`~os."
"chflags`, :func:`~os.chmod`, :func:`~os.chown`, :func:`~os.link`, :func:`~os."
"lstat`, :func:`~os.mkdir`, :func:`~os.mkfifo`, :func:`~os.mknod`, :func:`~os."
"open`, :func:`~os.readlink`, :func:`~os.remove`, :func:`~os.rename`, :func:"
"`~os.replace`, :func:`~os.rmdir`, :func:`~os.stat`, :func:`~os.symlink`, :"
"func:`~os.unlink`, :func:`~os.utime`.  Platform support for using these "
"parameters can be checked via the sets :data:`os.supports_dir_fd` and :data:"
"`os.supports_follows_symlinks`."
msgstr ""
"以下函式獲得新的可選 *dir_fd*（:ref:`paths relative to directory descriptors "
"<dir_fd>`）和/或 *follow_symlinks*（:ref:`not following symlinks "
"<follow_symlinks>`）：:func:`~os .access`, :func:`~os.chflags`, :func:`~os."
"chmod`, :func:`~os.chown`, :func:`~os.link`, :func:`~os .lstat`, :func:`~os."
"mkdir`, :func:`~os.mkfifo`, :func:`~os.mknod`, :func:`~os.open`, :func:`~os ."
"readlink`, :func:`~os.remove`, :func:`~os.rename`, :func:`~os.replace`, :"
"func:`~os.rmdir`, :func:`~os .stat`, :func:`~os.symlink`, :func:`~os."
"unlink`, :func:`~os.utime`。可以通過集合 os.supports_dir_fd 和 os."
"supports_follows_symlinks 檢查平台對使用這些參數的支援。"

#: ../../whatsnew/3.3.rst:1613
#, fuzzy
msgid ""
"The following functions now support a file descriptor for their path "
"argument: :func:`~os.chdir`, :func:`~os.chmod`, :func:`~os.chown`, :func:"
"`~os.execve`, :func:`~os.listdir`, :func:`~os.pathconf`, :func:`~os.path."
"exists`, :func:`~os.stat`, :func:`~os.statvfs`, :func:`~os.utime`.  Platform "
"support for this can be checked via the :data:`os.supports_fd` set."
msgstr ""
"以下函式現在支援其路徑參數的文件描述器：:func:`~os.chdir`、:func:`~os."
"chmod`、:func:`~os.chown`、:func:`~os。 execve`, :func:`~os.listdir`, :func:"
"`~os.pathconf`, :func:`~os.path.exists`, :func:`~os.stat`, :func:`~ os."
"statvfs`, :func:`~os.utime`。可以通過 os.supports_fd 集檢查對此的平台支援。"

#: ../../whatsnew/3.3.rst:1619
#, fuzzy
msgid ""
":func:`~os.access` accepts an ``effective_ids`` keyword argument to turn on "
"using the effective uid/gid rather than the real uid/gid in the access "
"check. Platform support for this can be checked via the :data:`~os."
"supports_effective_ids` set."
msgstr ""
":func:`~os.access` 接受一個 ``effective_ids`` 關鍵字參數以在訪問檢查中使用有"
"效的 uid/gid 而不是真實的 uid/gid。可以通過 :data:`~os."
"supports_effective_ids` 集檢查對此的平台支援。"

#: ../../whatsnew/3.3.rst:1624
#, fuzzy
msgid ""
"The :mod:`os` module has two new functions: :func:`~os.getpriority` and :"
"func:`~os.setpriority`. They can be used to get or set process niceness/"
"priority in a fashion similar to :func:`os.nice` but extended to all "
"processes instead of just the current one."
msgstr ""
":mod:`os` 模組有兩個新函式：:func:`~os.getpriority` 和 :func:`~os."
"setpriority`。它們可用於以類似於 :func:`os.nice` 的方式獲取或設定行程 "
"niceness/priority，但擴充到所有行程而不僅僅是當前行程。"

#: ../../whatsnew/3.3.rst:1629
msgid "(Patch submitted by Giampaolo Rodolà in :issue:`10784`.)"
msgstr "（由 Giampaolo Rodolà 在 :issue:`10784` 中提交修正。）"

#: ../../whatsnew/3.3.rst:1631
#, fuzzy
msgid ""
"The new :func:`os.replace` function allows cross-platform renaming of a file "
"with overwriting the destination.  With :func:`os.rename`, an existing "
"destination file is overwritten under POSIX, but raises an error under "
"Windows. (Contributed by Antoine Pitrou in :issue:`8828`.)"
msgstr ""
"新的 :func:`os.replace` 函式允許跨平台重命名文件並覆蓋目標。使用 :func:`os."
"rename`，現有目標文件在 POSIX 下被覆蓋，但在 Windows 下會引發錯誤。 （由 "
"Antoine Pitrou 在 :issue:`8828` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1637
#, fuzzy
msgid ""
"The stat family of functions (:func:`~os.stat`, :func:`~os.fstat`, and :func:"
"`~os.lstat`) now support reading a file's timestamps with nanosecond "
"precision.  Symmetrically, :func:`~os.utime` can now write file timestamps "
"with nanosecond precision.  (Contributed by Larry Hastings in :issue:"
"`14127`.)"
msgstr ""
"stat 系列函式（:func:`~os.stat`、:func:`~os.fstat` 和 :func:`~os.lstat`）現在"
"支援以納秒精度讀取文件的時間戳。對稱地，:func:`~os.utime` 現在可以以納秒精度"
"寫入文件時間戳。 （由 Larry Hastings 在 :issue:`14127` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1643
#, fuzzy
msgid ""
"The new :func:`os.get_terminal_size` function queries the size of the "
"terminal attached to a file descriptor. See also :func:`shutil."
"get_terminal_size`. (Contributed by Zbigniew Jędrzejewski-Szmek in :issue:"
"`13609`.)"
msgstr ""
"新的 :func:`os.get_terminal_size` 函式查詢附加到文件描述器的終端的大小。另"
"見 :func:`shutil.get_terminal_size`。 （由 Zbigniew Jędrzejewski-Szmek 在 :"
"issue:`13609` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1650
#, fuzzy
msgid ""
"New functions to support Linux extended attributes (:issue:`12720`): :func:"
"`~os.getxattr`, :func:`~os.listxattr`, :func:`~os.removexattr`, :func:`~os."
"setxattr`."
msgstr ""
"支援 Linux 擴充屬性的新函式 (:issue:`12720`)::func:`~os.getxattr`, :func:"
"`~os.listxattr`, :func:`~os.removexattr`, :func:` ~os.setxattr`。"

#: ../../whatsnew/3.3.rst:1654
#, fuzzy
msgid ""
"New interface to the scheduler. These functions control how a process is "
"allocated CPU time by the operating system. New functions: :func:`~os."
"sched_get_priority_max`, :func:`~os.sched_get_priority_min`, :func:`~os."
"sched_getaffinity`, :func:`~os.sched_getparam`, :func:`~os."
"sched_getscheduler`, :func:`~os.sched_rr_get_interval`, :func:`~os."
"sched_setaffinity`, :func:`~os.sched_setparam`, :func:`~os."
"sched_setscheduler`, :func:`~os.sched_yield`,"
msgstr ""
"調度程式的新界面。這些函式控制操作系統如何為行程分配 CPU 時間。新函式：:func:"
"`~os.sched_get_priority_max`、:func:`~os.sched_get_priority_min`、:func:`~os."
"sched_getaffinity`、:func:`~os.sched_getparam`、:func:`~os。 "
"sched_getscheduler`, :func:`~os.sched_rr_get_interval`, :func:`~os."
"sched_setaffinity`, :func:`~os.sched_setparam`, :func:`~os."
"sched_setscheduler`, :func:`~os. sched_yield`，"

#: ../../whatsnew/3.3.rst:1663
msgid "New functions to control the file system:"
msgstr "控制檔案系統的新功能："

#: ../../whatsnew/3.3.rst:1665
#, fuzzy
msgid ""
":func:`~os.posix_fadvise`: Announces an intention to access data in a "
"specific pattern thus allowing the kernel to make optimizations."
msgstr ""
":func:`~os.posix_fadvise`: 宣布以特定模式訪問資料的意圖，從而允許內核進行最佳"
"化。"

#: ../../whatsnew/3.3.rst:1667
#, fuzzy
msgid ""
":func:`~os.posix_fallocate`: Ensures that enough disk space is allocated for "
"a file."
msgstr ":func:`~os.posix_fallocate`: 確保為文件分配足夠的磁盤空間。"

#: ../../whatsnew/3.3.rst:1669
#, fuzzy
msgid ":func:`~os.sync`: Force write of everything to disk."
msgstr ":func:`~os.sync`: 強制將所有內容寫入磁盤。"

#: ../../whatsnew/3.3.rst:1671
msgid "Additional new  posix functions:"
msgstr "其他新的 posix 函式："

#: ../../whatsnew/3.3.rst:1673
#, fuzzy
msgid ""
":func:`~os.lockf`: Apply, test or remove a POSIX lock on an open file "
"descriptor."
msgstr ":func:`~os.lockf`: 在打開的文件描述器上應用、測試或刪除 POSIX 鎖。"

#: ../../whatsnew/3.3.rst:1674
#, fuzzy
msgid ""
":func:`~os.pread`: Read from a file descriptor at an offset, the file offset "
"remains unchanged."
msgstr ""
":func:`~os.pread`: 從一個文件描述器中讀取一個偏移量，文件偏移量保持不變。"

#: ../../whatsnew/3.3.rst:1676
#, fuzzy
msgid ""
":func:`~os.pwrite`: Write to a file descriptor from an offset, leaving the "
"file offset unchanged."
msgstr ":func:`~os.pwrite`: 從偏移量寫入文件描述器，保持文件偏移量不變。"

#: ../../whatsnew/3.3.rst:1678
#, fuzzy
msgid ""
":func:`~os.readv`: Read from a file descriptor into a number of writable "
"buffers."
msgstr ":func:`~os.readv`: 從一個文件描述器讀入多個可寫緩衝區。"

#: ../../whatsnew/3.3.rst:1679
#, fuzzy
msgid ""
":func:`~os.truncate`: Truncate the file corresponding to *path*, so that it "
"is at most *length* bytes in size."
msgstr ""
":func:`~os.truncate`: 截斷與 *path* 對應的文件，使其大小最多為 *length* 個位"
"元組。"

#: ../../whatsnew/3.3.rst:1681
#, fuzzy
msgid ""
":func:`~os.waitid`: Wait for the completion of one or more child processes."
msgstr ":func:`~os.waitid`: 等待一個或多個子行程完成。"

#: ../../whatsnew/3.3.rst:1682
#, fuzzy
msgid ""
":func:`~os.writev`: Write the contents of *buffers* to a file descriptor, "
"where *buffers* is an arbitrary sequence of buffers."
msgstr ""
":func:`~os.writev`: 將 *buffers* 的內容寫入文件描述器，其中 *buffers* 是緩衝"
"區的任意序列。"

#: ../../whatsnew/3.3.rst:1684
#, fuzzy
msgid ""
":func:`~os.getgrouplist` (:issue:`9344`): Return list of group ids that "
"specified user belongs to."
msgstr ""
":func:`~os.getgrouplist` (:issue:`9344`): 回傳指定使用者所屬的組 ID 列表。"

#: ../../whatsnew/3.3.rst:1687
#, fuzzy
msgid ""
":func:`~os.times` and :func:`~os.uname`: Return type changed from a tuple to "
"a tuple-like object with named attributes."
msgstr ""
":func:`~os.times` 和 :func:`~os.uname`：回傳型別從元組更改為具有命名屬性的類"
"似元組的物件。"

#: ../../whatsnew/3.3.rst:1690
#, fuzzy
msgid ""
"Some platforms now support additional constants for the :func:`~os.lseek` "
"function, such as ``os.SEEK_HOLE`` and ``os.SEEK_DATA``."
msgstr ""
"一些平台現在支援 :func:`~os.lseek` 函式的附加常數，例如 ``os.SEEK_HOLE`` 和 "
"``os.SEEK_DATA``。"

#: ../../whatsnew/3.3.rst:1693
#, fuzzy
msgid ""
"New constants :data:`~os.RTLD_LAZY`, :data:`~os.RTLD_NOW`, :data:`~os."
"RTLD_GLOBAL`, :data:`~os.RTLD_LOCAL`, :data:`~os.RTLD_NODELETE`, :data:`~os."
"RTLD_NOLOAD`, and :data:`~os.RTLD_DEEPBIND` are available on platforms that "
"support them.   These are for use with the :func:`sys.setdlopenflags` "
"function, and supersede the similar constants defined in :mod:`ctypes` and :"
"mod:`DLFCN`.  (Contributed by Victor Stinner in :issue:`13226`.)"
msgstr ""
"新常數 :data:`~os.RTLD_LAZY`, :data:`~os.RTLD_NOW`, :data:`~os."
"RTLD_GLOBAL`, :data:`~os.RTLD_LOCAL`, :data:`~os.RTLD_NODELETE `、:data:`~os."
"RTLD_NOLOAD` 和 :data:`~os.RTLD_DEEPBIND` 在支援它們的平台上可用。這些與 :"
"func:`sys.setdlopenflags` 函式一起使用，並取代 :mod:`ctypes` 和 :mod:`DLFCN` "
"中定義的類似常數。 （由 Victor Stinner 在 :issue:`13226` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1701
#, fuzzy
msgid ""
":func:`os.symlink` now accepts (and ignores) the ``target_is_directory`` "
"keyword argument on non-Windows platforms, to ease cross-platform support."
msgstr ""
":func:`os.symlink` 現在在非 Windows 平台上接受（並忽略）"
"``target_is_directory`` 關鍵字參數，以簡化跨平台支援。"

#: ../../whatsnew/3.3.rst:1706
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.3.rst:1708
#, fuzzy
msgid ""
"Tab-completion is now available not only for command names, but also their "
"arguments.  For example, for the ``break`` command, function and file names "
"are completed."
msgstr ""
"Tab 補全現在不僅可用於命令名稱，還可用於它們的參數。例如，對於 ``break`` 命"
"令，函式和文件名是完整的。"

#: ../../whatsnew/3.3.rst:1712
msgid "(Contributed by Georg Brandl in :issue:`14210`)"
msgstr "（由 Georg Brandl 在 :issue:`14210` 中貢獻）"

#: ../../whatsnew/3.3.rst:1716
msgid "pickle"
msgstr "pickle"

#: ../../whatsnew/3.3.rst:1718
#, fuzzy
msgid ""
":class:`pickle.Pickler` objects now have an optional :attr:`~pickle.Pickler."
"dispatch_table` attribute allowing per-pickler reduction functions to be set."
msgstr ""
":class:`pickle.Pickler` 物件現在有一個可選的 :attr:`~pickle.Pickler."
"dispatch_table` 屬性允許設定每個 pickler 縮減函式。"

#: ../../whatsnew/3.3.rst:1722
msgid "(Contributed by Richard Oudkerk in :issue:`14166`.)"
msgstr "（由 Richard Oudkerk 在 :issue:`14166` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1726
msgid "pydoc"
msgstr "pydoc"

#: ../../whatsnew/3.3.rst:1728
#, fuzzy
msgid ""
"The Tk GUI and the :func:`~pydoc.serve` function have been removed from the :"
"mod:`pydoc` module: ``pydoc -g`` and :func:`~pydoc.serve` have been "
"deprecated in Python 3.2."
msgstr ""
"Tk GUI 和 :func:`~pydoc.serve` 函式已從 :mod:`pydoc` 模組中刪除：``pydoc -"
"g`` 和 :func:`~pydoc.serve` 在 Python 中已被棄用3.2."

#: ../../whatsnew/3.3.rst:1734
msgid "re"
msgstr "re"

#: ../../whatsnew/3.3.rst:1736
#, fuzzy
msgid ""
":class:`str` regular expressions now support ``\\u`` and ``\\U`` escapes."
msgstr ":class:`str` 正則表達式現在支援 ``\\u`` 和 ``\\U`` 轉義。"

#: ../../whatsnew/3.3.rst:1738
msgid "(Contributed by Serhiy Storchaka in :issue:`3665`.)"
msgstr "（由 Serhiy Storchaka 在 :issue:`3665` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1742
msgid "sched"
msgstr "sched"

#: ../../whatsnew/3.3.rst:1744
#, fuzzy
msgid ""
":meth:`~sched.scheduler.run` now accepts a *blocking* parameter which when "
"set to false makes the method execute the scheduled events due to expire "
"soonest (if any) and then return immediately. This is useful in case you "
"want to use the :class:`~sched.scheduler` in non-blocking applications.  "
"(Contributed by Giampaolo Rodolà in :issue:`13449`.)"
msgstr ""
":meth:`~sched.scheduler.run` 現在接受一個 *blocking* 參數，當設定為 false "
"時，該方法會執行計劃的事件（如果有的話），然後立即回傳。如果您想在非阻塞應用"
"程序中使用 :class:`~sched.scheduler`，這很有用。 （由 Giampaolo Rodolà 在 :"
"issue:`13449` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1750
#, fuzzy
msgid ""
":class:`~sched.scheduler` class can now be safely used in multi-threaded "
"environments.  (Contributed by Josiah Carlson and Giampaolo Rodolà in :issue:"
"`8684`.)"
msgstr ""
":class:`~sched.scheduler` 類現在可以在多執行緒環境中安全使用。 （由 Josiah "
"Carlson 和 Giampaolo Rodolà 在 :issue:`8684` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1754
#, fuzzy
msgid ""
"*timefunc* and *delayfunct* parameters of :class:`~sched.scheduler` class "
"constructor are now optional and defaults to :func:`time.time` and :func:"
"`time.sleep` respectively.  (Contributed by Chris Clark in :issue:`13245`.)"
msgstr ""
":class:`~sched.scheduler` 類構造函式的 *timefunc* 和 *delayfunct* 參數現在是"
"可選的，預設分別為 :func:`time.time` 和 :func:`time.sleep`。 （由 Chris "
"Clark 在 :issue:`13245` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1759
#, fuzzy
msgid ""
":meth:`~sched.scheduler.enter` and :meth:`~sched.scheduler.enterabs` "
"*argument* parameter is now optional.  (Contributed by Chris Clark in :issue:"
"`13245`.)"
msgstr ""
":meth:`~sched.scheduler.enter` 和 :meth:`~sched.scheduler.enterabs` "
"*argument* 參數現在是可選的。 （由 Chris Clark 在 :issue:`13245` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1763
#, fuzzy
msgid ""
":meth:`~sched.scheduler.enter` and :meth:`~sched.scheduler.enterabs` now "
"accept a *kwargs* parameter.  (Contributed by Chris Clark in :issue:`13245`.)"
msgstr ""
":meth:`~sched.scheduler.enter` 和 :meth:`~sched.scheduler.enterabs` 現在接受 "
"*kwargs* 參數。 （由 Chris Clark 在 :issue:`13245` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1769
msgid "select"
msgstr "select"

#: ../../whatsnew/3.3.rst:1771
#, fuzzy
msgid ""
"Solaris and derivative platforms have a new class :class:`select.devpoll` "
"for high performance asynchronous sockets via :file:`/dev/poll`. "
"(Contributed by Jesús Cea Avión in :issue:`6397`.)"
msgstr ""
"Solaris 和衍生平台有一個新類 :class:`select.devpoll` 用於通過 :file:`/dev/"
"poll` 的高性能非同步 socket 。 （由 Jesús Cea Avión 在 :issue:`6397` 中貢"
"獻。）"

#: ../../whatsnew/3.3.rst:1777
msgid "shlex"
msgstr "shlex"

#: ../../whatsnew/3.3.rst:1779
#, fuzzy
msgid ""
"The previously undocumented helper function ``quote`` from the :mod:`pipes` "
"modules has been moved to the :mod:`shlex` module and documented.  :func:"
"`~shlex.quote` properly escapes all characters in a string that might be "
"otherwise given special meaning by the shell."
msgstr ""
":mod:`pipes` 模組中以前未記錄的輔助函式 ``quote`` 已移至 :mod:`shlex` 模組並"
"記錄在案。 :func:`~shlex.quote` 正確地轉義字串中的所有字元，這些字元可能會被 "
"shell 賦予特殊含義。"

#: ../../whatsnew/3.3.rst:1786
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.3.rst:1788
msgid "New functions:"
msgstr "新功能："

#: ../../whatsnew/3.3.rst:1790
#, fuzzy
msgid ""
":func:`~shutil.disk_usage`: provides total, used and free disk space "
"statistics.  (Contributed by Giampaolo Rodolà in :issue:`12442`.)"
msgstr ""
":func:`~shutil.disk_usage`: 提供總的、已用的和可用的磁盤空間統計資訊。 （由 "
"Giampaolo Rodolà 在 :issue:`12442` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1792
#, fuzzy
msgid ""
":func:`~shutil.chown`: allows one to change user and/or group of the given "
"path also specifying the user/group names and not only their numeric ids.  "
"(Contributed by Sandro Tosi in :issue:`12191`.)"
msgstr ""
":func:`~shutil.chown`: 允許更改給定路徑的使用者和/或組，同時指定使用者/組名"
"稱，而不僅僅是他們的數字 ID。 （由 Sandro Tosi 在 :issue:`12191` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1795
#, fuzzy
msgid ""
":func:`shutil.get_terminal_size`: returns the size of the terminal window to "
"which the interpreter is attached.  (Contributed by Zbigniew Jędrzejewski-"
"Szmek in :issue:`13609`.)"
msgstr ""
":func:`shutil.get_terminal_size`: 回傳直譯器所連接的終端窗口的大小。 （由 "
"Zbigniew Jędrzejewski-Szmek 在 :issue:`13609` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1799
#, fuzzy
msgid ""
":func:`~shutil.copy2` and :func:`~shutil.copystat` now preserve file "
"timestamps with nanosecond precision on platforms that support it. They also "
"preserve file \"extended attributes\" on Linux.  (Contributed by Larry "
"Hastings in :issue:`14127` and  :issue:`15238`.)"
msgstr ""
":func:`~shutil.copy2` 和 :func:`~shutil.copystat` 現在在支援它的平台上以納秒"
"精度保存文件時間戳。它們還在 Linux 上保留文件“擴充屬性”。 （由 Larry "
"Hastings 在 :issue:`14127` 和 :issue:`15238` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1804
#, fuzzy
msgid ""
"Several functions now take an optional ``symlinks`` argument: when that "
"parameter is true, symlinks aren't dereferenced and the operation instead "
"acts on the symlink itself (or creates one, if relevant). (Contributed by "
"Hynek Schlawack in :issue:`12715`.)"
msgstr ""
"幾個函式現在採用可選的 ``symlinks`` 參數：當該參數為真時，不會取消引用符號鏈"
"接，而是操作符號鏈接本身（或建立一個，如果相關）。 （由 Hynek Schlawack 在 :"
"issue:`12715` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1809
#, fuzzy
msgid ""
"When copying files to a different file system, :func:`~shutil.move` now "
"handles symlinks the way the posix ``mv`` command does, recreating the "
"symlink rather than copying the target file contents.  (Contributed by "
"Jonathan Niehof in :issue:`9993`.)  :func:`~shutil.move` now also returns "
"the ``dst`` argument as its result."
msgstr ""
"將文件複製到不同的文件系統時，:func:`~shutil.move` 現在以 posix ``mv`` 命令的"
"方式處理符號鏈接，重新建立符號鏈接而不是複制目標文件內容。 （由 Jonathan "
"Niehof 在 :issue:`9993` 中貢獻。） :func:`~shutil.move` 現在也回傳 ``dst`` 參"
"數作為其結果。"

#: ../../whatsnew/3.3.rst:1815
#, fuzzy
msgid ""
":func:`~shutil.rmtree` is now resistant to symlink attacks on platforms "
"which support the new ``dir_fd`` parameter in :func:`os.open` and :func:`os."
"unlink`.  (Contributed by Martin von Löwis and Hynek Schlawack in :issue:"
"`4489`.)"
msgstr ""
":func:`~shutil.rmtree` 現在可以抵抗在 :func:`os.open` 和 :func:`os.unlink` 中"
"支援新的 ``dir_fd`` 參數的平台上的符號鏈接攻擊。 （由 Martin von Löwis 和 "
"Hynek Schlawack 在 :issue:`4489` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1822
msgid "signal"
msgstr "signal"

#: ../../whatsnew/3.3.rst:1824
msgid "The :mod:`signal` module has new functions:"
msgstr ":mod:`signal` 模組有了新的函式："

#: ../../whatsnew/3.3.rst:1826
#, fuzzy
msgid ""
":func:`~signal.pthread_sigmask`: fetch and/or change the signal mask of the "
"calling thread (Contributed by Jean-Paul Calderone in :issue:`8407`);"
msgstr ""
":func:`~signal.pthread_sigmask`：獲取和/或更改呼叫執行緒的信號掩碼（由 Jean-"
"Paul Calderone 在 :issue:`8407` 中貢獻）；"

#: ../../whatsnew/3.3.rst:1828
msgid ":func:`~signal.pthread_kill`: send a signal to a thread;"
msgstr ":func:`~signal.pthread_kill`: 向執行緒發送信號；"

#: ../../whatsnew/3.3.rst:1829
#, fuzzy
msgid ":func:`~signal.sigpending`: examine pending functions;"
msgstr ":func:`~signal.sigpending`: 檢查掛起的函式；"

#: ../../whatsnew/3.3.rst:1830
msgid ":func:`~signal.sigwait`: wait a signal;"
msgstr ":func:`~signal.sigwait`: 等待信號；"

#: ../../whatsnew/3.3.rst:1831
#, fuzzy
msgid ""
":func:`~signal.sigwaitinfo`: wait for a signal, returning detailed "
"information about it;"
msgstr ":func:`~signal.sigwaitinfo`: 等待信號，回傳有關它的詳細資訊；"

#: ../../whatsnew/3.3.rst:1833
#, fuzzy
msgid ""
":func:`~signal.sigtimedwait`: like :func:`~signal.sigwaitinfo` but with a "
"timeout."
msgstr ""
":func:`~signal.sigtimedwait`: 類似 :func:`~signal.sigwaitinfo` 但有超時。"

#: ../../whatsnew/3.3.rst:1836
#, fuzzy
msgid ""
"The signal handler writes the signal number as a single byte instead of a "
"nul byte into the wakeup file descriptor. So it is possible to wait more "
"than one signal and know which signals were raised."
msgstr ""
"信號處理程式將信號編號作為單個位元組而不是空位元組寫入喚醒文件描述器。因此可"
"以等待多個信號並知道發出了哪些信號。"

#: ../../whatsnew/3.3.rst:1840
#, fuzzy
msgid ""
":func:`signal.signal` and :func:`signal.siginterrupt` raise an OSError, "
"instead of a RuntimeError: OSError has an errno attribute."
msgstr ""
":func:`signal.signal` 和 :func:`signal.siginterrupt` 引發 OSError，而不是 "
"RuntimeError：OSError 具有 errno 屬性。"

#: ../../whatsnew/3.3.rst:1845
msgid "smtpd"
msgstr "smtpd"

#: ../../whatsnew/3.3.rst:1847
#, fuzzy
msgid ""
"The :mod:`smtpd` module now supports :rfc:`5321` (extended SMTP) and :rfc:"
"`1870` (size extension).  Per the standard, these extensions are enabled if "
"and only if the client initiates the session with an ``EHLO`` command."
msgstr ""
":mod:`smtpd` 模組現在支援 :rfc:`5321`（擴充 SMTP）和 :rfc:`1870`（大小擴"
"充）。根據標準，當且僅當客戶端使用 ``EHLO``命令啟動會話時，這些擴充才會啟用。"

#: ../../whatsnew/3.3.rst:1851
#, fuzzy
msgid ""
"(Initial ``ELHO`` support by Alberto Trevino.  Size extension by Juhana "
"Jauhiainen.  Substantial additional work on the patch contributed by Michele "
"Orrù and Dan Boswell.  :issue:`8739`)"
msgstr ""
"（Alberto Trevino 最初支援 ``ELHO``。Juhana Jauhiainen 進行了尺寸擴充。"
"Michele Orrù 和 Dan Boswell 貢獻了補丁的大量額外工作。:issue:`8739`)"

#: ../../whatsnew/3.3.rst:1857
msgid "smtplib"
msgstr "smtplib"

#: ../../whatsnew/3.3.rst:1859
#, fuzzy
msgid ""
"The :class:`~smtplib.SMTP`, :class:`~smtplib.SMTP_SSL`, and :class:`~smtplib."
"LMTP` classes now accept a ``source_address`` keyword argument to specify "
"the ``(host, port)`` to use as the source address in the bind call when "
"creating the outgoing socket.  (Contributed by Paulo Scardine in :issue:"
"`11281`.)"
msgstr ""
":class:`~smtplib.SMTP`、:class:`~smtplib.SMTP_SSL` 和 :class:`~smtplib.LMTP` "
"類現在接受一個 ``source_address`` 關鍵字參數來指定 ``(host, port)`` 在建立傳"
"出 socket 時用作綁定呼叫中的源地址。 （由 Paulo Scardine 在 :issue:`11281` 中"
"貢獻。）"

#: ../../whatsnew/3.3.rst:1865
#, fuzzy
msgid ""
":class:`~smtplib.SMTP` now supports the context management protocol, "
"allowing an ``SMTP`` instance to be used in a ``with`` statement.  "
"(Contributed by Giampaolo Rodolà in :issue:`11289`.)"
msgstr ""
":class:`~smtplib.SMTP` 現在支援上下文管理協定，允許在 ``with`` 語句中使用 "
"``SMTP`` 實例。 （由 Giampaolo Rodolà 在 :issue:`11289` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1869
#, fuzzy
msgid ""
"The :class:`~smtplib.SMTP_SSL` constructor and the :meth:`~smtplib.SMTP."
"starttls` method now accept an SSLContext parameter to control parameters of "
"the secure channel.  (Contributed by Kasun Herath in :issue:`8809`.)"
msgstr ""
":class:`~smtplib.SMTP_SSL` 構造函式和 :meth:`~smtplib.SMTP.starttls` 方法現在"
"接受 SSLContext 參數來控制安全通道的參數。 （由 Kasun Herath 在 :issue:"
"`8809` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1875
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.3.rst:1877
#, fuzzy
msgid ""
"The :class:`~socket.socket` class now exposes additional methods to process "
"ancillary data when supported by the underlying platform:"
msgstr ""
":class:`~socket.socket` 類現在公開了額外的方法來在底層平台支援時處理輔助資"
"料："

#: ../../whatsnew/3.3.rst:1880
msgid ":func:`~socket.socket.sendmsg`"
msgstr ":func:`~socket.socket.sendmsg`"

#: ../../whatsnew/3.3.rst:1881
msgid ":func:`~socket.socket.recvmsg`"
msgstr ":func:`~socket.socket.recvmsg`"

#: ../../whatsnew/3.3.rst:1882
msgid ":func:`~socket.socket.recvmsg_into`"
msgstr ":func:`~socket.socket.recvmsg_into`"

#: ../../whatsnew/3.3.rst:1884
#, fuzzy
msgid ""
"(Contributed by David Watson in :issue:`6560`, based on an earlier patch by "
"Heiko Wundram)"
msgstr ""
"（由 David Watson 在 :issue:`6560` 中貢獻，基於 Heiko Wundram 的早期補丁）"

#: ../../whatsnew/3.3.rst:1887
#, fuzzy
msgid ""
"The :class:`~socket.socket` class now supports the PF_CAN protocol family "
"(https://en.wikipedia.org/wiki/Socketcan), on Linux (https://lwn.net/"
"Articles/253425)."
msgstr ""
":class:`~socket.socket` 類現在在 Linux (https://lwn.net/Articles/253425) 上支"
"援 PF_CAN 協定系列 (https://en.wikipedia.org/wiki/Socketcan)。"

#: ../../whatsnew/3.3.rst:1891
msgid ""
"(Contributed by Matthias Fuchs, updated by Tiago Gonçalves in :issue:"
"`10141`.)"
msgstr ""
"（由 Matthias Fuchs 貢獻，由 Tiago Gonçalves 在 :issue:`10141` 中更新。）"

#: ../../whatsnew/3.3.rst:1893
#, fuzzy
msgid ""
"The :class:`~socket.socket` class now supports the PF_RDS protocol family "
"(https://en.wikipedia.org/wiki/Reliable_Datagram_Sockets and https://oss."
"oracle.com/projects/rds/)."
msgstr ""
":class:`~socket.socket` 類別現在支援 PF_RDS 協定系列（https://en.wikipedia.org/"
"wiki/Reliable_Datagram_Sockets 和 https://oss.oracle.com/projects/rds/）。"

#: ../../whatsnew/3.3.rst:1897
#, fuzzy
msgid ""
"The :class:`~socket.socket` class now supports the ``PF_SYSTEM`` protocol "
"family on OS X.  (Contributed by Michael Goderbauer in :issue:`13777`.)"
msgstr ""
":class:`~socket.socket` 類別現在支援 OS X 上的 ``PF_SYSTEM`` 協定系列。（由 "
"Michael Goderbauer 在 :issue:`13777` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1900
#, fuzzy
msgid ""
"New function :func:`~socket.sethostname` allows the hostname to be set on "
"Unix systems if the calling process has sufficient privileges. (Contributed "
"by Ross Lagerwall in :issue:`10866`.)"
msgstr ""
"如果呼叫行程有足夠的權限，新函式 :func:`~socket.sethostname` 允許在 Unix 系統"
"上設定主機名。 （由 Ross Lagerwall 在 :issue:`10866` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1906
msgid "socketserver"
msgstr "socketserver"

#: ../../whatsnew/3.3.rst:1908
#, fuzzy
msgid ""
":class:`~socketserver.BaseServer` now has an overridable method :meth:"
"`~socketserver.BaseServer.service_actions` that is called by the :meth:"
"`~socketserver.BaseServer.serve_forever` method in the service loop. :class:"
"`~socketserver.ForkingMixIn` now uses this to clean up zombie child "
"processes.  (Contributed by Justin Warkentin in :issue:`11109`.)"
msgstr ""
":class:`~socketserver.BaseServer` 現在有一個可覆蓋的方法 :meth:"
"`~socketserver.BaseServer.service_actions` 由服務循環中的 :meth:"
"`~socketserver.BaseServer.serve_forever` 方法呼叫。 :class:`~socketserver."
"ForkingMixIn` 現在使用它來清理殭屍子行程。 （由 Justin Warkentin 在 :issue:"
"`11109` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1916
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.3.rst:1918
#, fuzzy
msgid ""
"New :class:`sqlite3.Connection` method :meth:`~sqlite3.Connection."
"set_trace_callback` can be used to capture a trace of all sql commands "
"processed by sqlite.  (Contributed by Torsten Landschoff in :issue:`11688`.)"
msgstr ""
"新的 :class:`sqlite3.Connection` 方法 :meth:`~sqlite3.Connection."
"set_trace_callback` 可用於捕獲 sqlite 處理的所有 sql 命令的踪跡。 （由 "
"Torsten Landschoff 在 :issue:`11688` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1925
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.3.rst:1927
msgid "The :mod:`ssl` module has two new random generation functions:"
msgstr ":mod:`ssl` 模組有兩個新的隨機生成函式："

#: ../../whatsnew/3.3.rst:1929
msgid ""
":func:`~ssl.RAND_bytes`: generate cryptographically strong pseudo-random "
"bytes."
msgstr ":func:`~ssl.RAND_bytes`: 生成加密強度高的偽隨機位元組。"

#: ../../whatsnew/3.3.rst:1931
msgid ":func:`~ssl.RAND_pseudo_bytes`: generate pseudo-random bytes."
msgstr ":func:`~ssl.RAND_pseudo_bytes`: 生成偽隨機位元組。"

#: ../../whatsnew/3.3.rst:1933
msgid "(Contributed by Victor Stinner in :issue:`12049`.)"
msgstr "（由 Victor Stinner 在 :issue:`12049` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1935
#, fuzzy
msgid ""
"The :mod:`ssl` module now exposes a finer-grained exception hierarchy in "
"order to make it easier to inspect the various kinds of errors. (Contributed "
"by Antoine Pitrou in :issue:`11183`.)"
msgstr ""
":mod:`ssl` 模組現在公開了一個更細粒度的例外層次結構，以便更容易地檢查各種錯"
"誤。 （由 Antoine Pitrou 在 :issue:`11183` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1939
#, fuzzy
msgid ""
":meth:`~ssl.SSLContext.load_cert_chain` now accepts a *password* argument to "
"be used if the private key is encrypted. (Contributed by Adam Simpkins in :"
"issue:`12803`.)"
msgstr ""
":meth:`~ssl.SSLContext.load_cert_chain` 現在接受要在私鑰加密時使用的 "
"*password* 參數。 （由 Adam Simpkins 在 :issue:`12803` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1943
#, fuzzy
msgid ""
"Diffie-Hellman key exchange, both regular and Elliptic Curve-based, is now "
"supported through the :meth:`~ssl.SSLContext.load_dh_params` and :meth:`~ssl."
"SSLContext.set_ecdh_curve` methods. (Contributed by Antoine Pitrou in :issue:"
"`13626` and :issue:`13627`.)"
msgstr ""
"現在通過 :meth:`~ssl.SSLContext.load_dh_params` 和 :meth:`~ssl.SSLContext."
"set_ecdh_curve` 方法支援常規和基於橢圓曲線的 Diffie-Hellman 密鑰交換。 （由 "
"Antoine Pitrou 在 :issue:`13626` 和 :issue:`13627` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1948
#, fuzzy
msgid ""
"SSL sockets have a new :meth:`~ssl.SSLSocket.get_channel_binding` method "
"allowing the implementation of certain authentication mechanisms such as "
"SCRAM-SHA-1-PLUS.  (Contributed by Jacek Konieczny in :issue:`12551`.)"
msgstr ""
"SSL  socket 有一個新的 :meth:`~ssl.SSLSocket.get_channel_binding` 方法允許實"
"施某些身份驗證機制，例如 SCRAM-SHA-1-PLUS。 （由 Jacek Konieczny 在 :issue:"
"`12551` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1952
#, fuzzy
msgid ""
"You can query the SSL compression algorithm used by an SSL socket, thanks to "
"its new :meth:`~ssl.SSLSocket.compression` method.  The new attribute :attr:"
"`~ssl.OP_NO_COMPRESSION` can be used to disable compression. (Contributed by "
"Antoine Pitrou in :issue:`13634`.)"
msgstr ""
"得益於其新的 :meth:`~ssl.SSLSocket.compression` 方法，您可以查詢 SSL  socket "
"使用的 SSL 壓縮演算法。新屬性 :attr:`~ssl.OP_NO_COMPRESSION` 可用於禁用壓"
"縮。 （由 Antoine Pitrou 在 :issue:`13634` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1957
#, fuzzy
msgid ""
"Support has been added for the Next Protocol Negotiation extension using "
"the :meth:`ssl.SSLContext.set_npn_protocols` method. (Contributed by Colin "
"Marc in :issue:`14204`.)"
msgstr ""
"使用 :meth:`ssl.SSLContext.set_npn_protocols` 方法新增了對 Next Protocol "
"Negotiation 擴充的支援。 （由 Colin Marc 在 :issue:`14204` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1961
#, fuzzy
msgid ""
"SSL errors can now be introspected more easily thanks to :attr:`~ssl."
"SSLError.library` and :attr:`~ssl.SSLError.reason` attributes. (Contributed "
"by Antoine Pitrou in :issue:`14837`.)"
msgstr ""
"由於 :attr:`~ssl.SSLError.library` 和 :attr:`~ssl.SSLError.reason` 屬性，現在"
"可以更輕鬆地自省 SSL 錯誤。 （由 Antoine Pitrou 在 :issue:`14837` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1965
#, fuzzy
msgid ""
"The :func:`~ssl.get_server_certificate` function now supports IPv6. "
"(Contributed by Charles-François Natali in :issue:`11811`.)"
msgstr ""
":func:`~ssl.get_server_certificate` 函式現在支援 IPv6。 （由 Charles-"
"François Natali 在 :issue:`11811` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1968
#, fuzzy
msgid ""
"New attribute :attr:`~ssl.OP_CIPHER_SERVER_PREFERENCE` allows setting SSLv3 "
"server sockets to use the server's cipher ordering preference rather than "
"the client's (:issue:`13635`)."
msgstr ""
"新屬性 :attr:`~ssl.OP_CIPHER_SERVER_PREFERENCE` 允許設定 SSLv3 伺服器 socket "
"以使用伺服器的密碼排序首選項而不是客戶端的 (:issue:`13635`)。"

#: ../../whatsnew/3.3.rst:1974
msgid "stat"
msgstr "stat"

#: ../../whatsnew/3.3.rst:1976
#, fuzzy
msgid ""
"The undocumented tarfile.filemode function has been moved to :func:`stat."
"filemode`. It can be used to convert a file's mode to a string of the form '-"
"rwxrwxrwx'."
msgstr ""
"未記錄的 tarfile.filemode 函式已移至 :func:`stat.filemode`。它可用於將文件的"
"模式轉換為 ``-rwxrwxrwx``形式的字串。"

#: ../../whatsnew/3.3.rst:1980
msgid "(Contributed by Giampaolo Rodolà in :issue:`14807`.)"
msgstr "（由 Giampaolo Rodolà 在 :issue:`14807` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1984
msgid "struct"
msgstr "struct"

#: ../../whatsnew/3.3.rst:1986
#, fuzzy
msgid ""
"The :mod:`struct` module now supports ``ssize_t`` and ``size_t`` via the new "
"codes ``n`` and ``N``, respectively.  (Contributed by Antoine Pitrou in :"
"issue:`3163`.)"
msgstr ""
":mod:`struct` 模組現在分別通過新程式碼 ``n`` 和 ``N`` 支援 ``ssize_t`` 和 "
"``size_t``。 （由 Antoine Pitrou 在 :issue:`3163` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1992
msgid "subprocess"
msgstr "subprocess"

#: ../../whatsnew/3.3.rst:1994
#, fuzzy
msgid ""
"Command strings can now be bytes objects on posix platforms.  (Contributed "
"by Victor Stinner in :issue:`8513`.)"
msgstr ""
"命令字串現在可以是 posix 平台上的位元組物件。 （由 Victor Stinner 在 :issue:"
"`8513` 中貢獻。）"

#: ../../whatsnew/3.3.rst:1997
#, fuzzy
msgid ""
"A new constant :data:`~subprocess.DEVNULL` allows suppressing output in a "
"platform-independent fashion.  (Contributed by Ross Lagerwall in :issue:"
"`5870`.)"
msgstr ""
"新常數 :data:`~subprocess.DEVNULL` 允許以獨立於平台的方式抑制輸出。 （由 "
"Ross Lagerwall 在 :issue:`5870` 中貢獻。）"

#: ../../whatsnew/3.3.rst:2003
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.3.rst:2005
#, fuzzy
msgid ""
"The :mod:`sys` module has a new :data:`~sys.thread_info` :term:`named tuple` "
"holding information about the thread implementation (:issue:`11223`)."
msgstr ""
":mod:`sys` 模組有一個新的 :data:`~sys.thread_info` :term:`named tuple` 保存有"
"關執行緒實作的資訊 (:issue:`11223`)。"

#: ../../whatsnew/3.3.rst:2011
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.3.rst:2013
#, fuzzy
msgid ""
":mod:`tarfile` now supports ``lzma`` encoding via the :mod:`lzma` module. "
"(Contributed by Lars Gustäbel in :issue:`5689`.)"
msgstr ""
":mod:`tarfile` 現在通過 :mod:`lzma` 模組支援 ``lzma`` 編碼。 （由 Lars "
"Gustäbel 在 :issue:`5689` 中貢獻。）"

#: ../../whatsnew/3.3.rst:2018
msgid "tempfile"
msgstr "tempfile"

#: ../../whatsnew/3.3.rst:2020
#, fuzzy
msgid ""
":class:`tempfile.SpooledTemporaryFile`\\'s :meth:`~tempfile."
"SpooledTemporaryFile.truncate` method now accepts a ``size`` parameter.  "
"(Contributed by Ryan Kelly in :issue:`9957`.)"
msgstr ""
":class:`tempfile.SpooledTemporaryFile`\\'s :meth:`~tempfile."
"SpooledTemporaryFile.truncate` 方法現在接受一個 ``size`` 參數。 （由 Ryan "
"Kelly 在 :issue:`9957` 中貢獻。）"

#: ../../whatsnew/3.3.rst:2026
msgid "textwrap"
msgstr "textwrap"

#: ../../whatsnew/3.3.rst:2028
#, fuzzy
msgid ""
"The :mod:`textwrap` module has a new :func:`~textwrap.indent` that makes it "
"straightforward to add a common prefix to selected lines in a block of text  "
"(:issue:`13857`)."
msgstr ""
":mod:`textwrap` 模組有一個新的 :func:`~textwrap.indent` 可以直接向文本塊中的"
"選定行新增通用前綴 (:issue:`13857`)。"

#: ../../whatsnew/3.3.rst:2034
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.3.rst:2036
#, fuzzy
msgid ""
":class:`threading.Condition`, :class:`threading.Semaphore`, :class:"
"`threading.BoundedSemaphore`, :class:`threading.Event`, and :class:"
"`threading.Timer`, all of which used to be factory functions returning a "
"class instance, are now classes and may be subclassed.  (Contributed by Éric "
"Araujo in :issue:`10968`.)"
msgstr ""
":class:`threading.Condition`, :class:`threading.Semaphore`, :class:"
"`threading.BoundedSemaphore`, :class:`threading.Event`, :class:`threading."
"Timer`, 所有這些都使用成為回傳類實例的工廠函式，現在是類並且可以被子類別化。 "
"（由 Éric Araujo 在 :issue:`10968` 中貢獻。）"

#: ../../whatsnew/3.3.rst:2042
#, fuzzy
msgid ""
"The :class:`threading.Thread` constructor now accepts a ``daemon`` keyword "
"argument to override the default behavior of inheriting the ``daemon`` flag "
"value from the parent thread (:issue:`6064`)."
msgstr ""
":class:`threading.Thread` 構造函式現在接受一個 ``daemon`` 關鍵字參數來覆蓋從"
"父執行緒繼承 ``daemon`` 旗標值的預設行為 (:issue:`6064`)。"

#: ../../whatsnew/3.3.rst:2046
#, fuzzy
msgid ""
"The formerly private function ``_thread.get_ident`` is now available as the "
"public function :func:`threading.get_ident`.  This eliminates several cases "
"of direct access to the ``_thread`` module in the stdlib.  Third party code "
"that used ``_thread.get_ident`` should likewise be changed to use the new "
"public interface."
msgstr ""
"以前的私有函式 ``_thread.get_ident`` 現在作為公開函式可用 :func:`threading."
"get_ident`。這消除了幾種直接訪問 stdlib 中的 _thread 模組的情況。使用 "
"``_thread.get_ident`` 的第三方程式碼同樣應該更改為使用新的公開介面。"

#: ../../whatsnew/3.3.rst:2054
msgid "time"
msgstr "time"

#: ../../whatsnew/3.3.rst:2056
msgid "The :pep:`418` added new functions to the :mod:`time` module:"
msgstr ":pep:`418` 向 :mod:`time` 模組增加新功能："

#: ../../whatsnew/3.3.rst:2058
#, fuzzy
msgid ":func:`~time.get_clock_info`: Get information on a clock."
msgstr ":func:`~time.get_clock_info`: 獲取時鐘資訊。"

#: ../../whatsnew/3.3.rst:2059
#, fuzzy
msgid ""
":func:`~time.monotonic`: Monotonic clock (cannot go backward), not affected "
"by system clock updates."
msgstr ""
":func:`~time.monotonic`: 單調時鐘（不能倒退），不受系統時鐘更新的影響。"

#: ../../whatsnew/3.3.rst:2061
#, fuzzy
msgid ""
":func:`~time.perf_counter`: Performance counter with the highest available "
"resolution to measure a short duration."
msgstr ""
":func:`~time.perf_counter`: 具有最高可用分辨率的性能計數器，用於測量短持續時"
"間。"

#: ../../whatsnew/3.3.rst:2063
#, fuzzy
msgid ""
":func:`~time.process_time`: Sum of the system and user CPU time of the "
"current process."
msgstr ":func:`~time.process_time`: 當前行程的系統和使用者 CPU 時間總和。"

#: ../../whatsnew/3.3.rst:2066
msgid "Other new functions:"
msgstr "其他新功能："

#: ../../whatsnew/3.3.rst:2068
#, fuzzy
msgid ""
":func:`~time.clock_getres`, :func:`~time.clock_gettime` and :func:`~time."
"clock_settime` functions with ``CLOCK_xxx`` constants. (Contributed by "
"Victor Stinner in :issue:`10278`.)"
msgstr ""
":func:`~time.clock_getres`、:func:`~time.clock_gettime` 和 :func:`~time."
"clock_settime` 函式帶有 ``CLOCK_xxx`` 常數。 （由 Victor Stinner 在 :issue:"
"`10278` 中貢獻。）"

#: ../../whatsnew/3.3.rst:2072
#, fuzzy
msgid ""
"To improve cross platform consistency, :func:`~time.sleep` now raises a :exc:"
"`ValueError` when passed a negative sleep value.  Previously this was an "
"error on posix, but produced an infinite sleep on Windows."
msgstr ""
"為了提高跨平台一致性，:func:`~time.sleep` 現在在傳遞負睡眠值時引發 :exc:"
"`ValueError`。以前這是 posix 上的錯誤，但在 Windows 上會產生無限睡眠。"

#: ../../whatsnew/3.3.rst:2078
msgid "types"
msgstr "types"

#: ../../whatsnew/3.3.rst:2080
#, fuzzy
msgid ""
"Add a new :class:`types.MappingProxyType` class: Read-only proxy of a "
"mapping. (:issue:`14386`)"
msgstr ""
"新增一個新的 types.MappingProxyType 類：映射的只讀代理。 （ :issue:`14386`）"

#: ../../whatsnew/3.3.rst:2084
#, fuzzy
msgid ""
"The new functions :func:`types.new_class` and :func:`types.prepare_class` "
"provide support for :pep:`3115` compliant dynamic type creation. (:issue:"
"`14588`)"
msgstr ""
"新函式 :func:`types.new_class` 和 :func:`types.prepare_class` 為 :pep:`3115` "
"相容的動態型別建立提供支援。 （ :issue:`14588`）"

#: ../../whatsnew/3.3.rst:2089
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.3.rst:2091
#, fuzzy
msgid ""
":meth:`.assertRaises`, :meth:`.assertRaisesRegex`, :meth:`.assertWarns`, "
"and :meth:`.assertWarnsRegex` now accept a keyword argument *msg* when used "
"as context managers.  (Contributed by Ezio Melotti and Winston Ewert in :"
"issue:`10775`.)"
msgstr ""
":meth:`.assertRaises`、:meth:`.assertRaisesRegex`、:meth:`.assertWarns` 和 :"
"meth:`.assertWarnsRegex` 現在在用作上下文管理器時接受關鍵字參數 *msg*。 （由 "
"Ezio Melotti 和 Winston Ewert 在 :issue:`10775` 中貢獻。）"

#: ../../whatsnew/3.3.rst:2096
msgid ""
":meth:`unittest.TestCase.run` now returns the :class:`~unittest.TestResult` "
"object."
msgstr ""
":meth:`unittest.TestCase.run` 現在回傳 :class:`~unittest.TestResult` 物件。"

#: ../../whatsnew/3.3.rst:2101
msgid "urllib"
msgstr "urllib"

#: ../../whatsnew/3.3.rst:2103
#, fuzzy
msgid ""
"The :class:`~urllib.request.Request` class, now accepts a *method* argument "
"used by :meth:`~urllib.request.Request.get_method` to determine what HTTP "
"method should be used.  For example, this will send a ``'HEAD'`` request::"
msgstr ""
":class:`~urllib.request.Request` 類現在接受 :meth:`~urllib.request.Request."
"get_method` 使用的 *method* 參數來確定應該使用哪種 HTTP 方法。例如，這將發送"
"一個 ``'HEAD'`` 請求::"

#: ../../whatsnew/3.3.rst:2109
msgid "(:issue:`1673007`)"
msgstr "(:issue:`1673007`)"

#: ../../whatsnew/3.3.rst:2113
msgid "webbrowser"
msgstr "webbrowser"

#: ../../whatsnew/3.3.rst:2115
#, fuzzy
msgid ""
"The :mod:`webbrowser` module supports more \"browsers\": Google Chrome "
"(named :program:`chrome`, :program:`chromium`, :program:`chrome-browser` or :"
"program:`chromium-browser` depending on the version and operating system), "
"and the generic launchers :program:`xdg-open`, from the FreeDesktop.org "
"project, and :program:`gvfs-open`, which is the default URI handler for "
"GNOME 3.  (The former contributed by Arnaud Calmettes in :issue:`13620`, the "
"latter by Matthias Klose in :issue:`14493`.)"
msgstr ""
":mod:`webbrowser` 模組支援更多的“瀏覽器”：Google Chrome（命名為 :program:"
"`chrome`、:program:`chromium`、:program:`chrome-browser` 或 :program:"
"`chromium-browser` 取決於在版本和操作系統上），以及來自 FreeDesktop.org 項目"
"的通用啟動器 :program:`xdg-open` 和 :program:`gvfs-open`，它是 GNOME 3 的預"
"設 URI 處理程式。（前者由 Arnaud Calmettes 在 :issue:`13620` 貢獻，後者由 "
"Matthias Klose 在 :issue:`14493` 貢獻。）"

#: ../../whatsnew/3.3.rst:2125
msgid "xml.etree.ElementTree"
msgstr "xml.etree.ElementTree"

#: ../../whatsnew/3.3.rst:2127
#, fuzzy
msgid ""
"The :mod:`xml.etree.ElementTree` module now imports its C accelerator by "
"default; there is no longer a need to explicitly import :mod:`xml.etree."
"cElementTree` (this module stays for backwards compatibility, but is now "
"deprecated).  In addition,  the ``iter`` family of methods of :class:`~xml."
"etree.ElementTree.Element` has been optimized (rewritten in C). The module's "
"documentation has also been greatly improved with added examples and a more "
"detailed reference."
msgstr ""
":mod:`xml.etree.ElementTree` 模組現在預設導入其 C 加速器；不再需要顯式導入 :"
"mod:`xml.etree.cElementTree`（此模組保留用於向後相容，但現在已棄用）。此外，:"
"class:`~xml.etree.ElementTree.Element` 的``iter`` 系列方法已經過最佳化（用C "
"重寫）。通過新增示例和更詳細的參考，該模組的文檔也得到了極大的改進。"

#: ../../whatsnew/3.3.rst:2137
msgid "zlib"
msgstr "zlib"

#: ../../whatsnew/3.3.rst:2139
#, fuzzy
msgid ""
"New attribute :attr:`zlib.Decompress.eof` makes it possible to distinguish "
"between a properly formed compressed stream and an incomplete or truncated "
"one. (Contributed by Nadeem Vawda in :issue:`12646`.)"
msgstr ""
"新屬性 :attr:`zlib.Decompress.eof` 可以區分格式正確的壓縮流和不完整或截斷的"
"流。 （由 Nadeem Vawda 在 :issue:`12646` 中貢獻。）"

#: ../../whatsnew/3.3.rst:2143
#, fuzzy
msgid ""
"New attribute :attr:`zlib.ZLIB_RUNTIME_VERSION` reports the version string "
"of the underlying ``zlib`` library that is loaded at runtime.  (Contributed "
"by Torsten Landschoff in :issue:`12306`.)"
msgstr ""
"新屬性 :attr:`zlib.ZLIB_RUNTIME_VERSION` 報告在運行時加載的底層 ``zlib`` 庫的"
"版本字串。 （由 Torsten Landschoff 在 :issue:`12306` 中貢獻。）"

#: ../../whatsnew/3.3.rst:2149
msgid "Optimizations"
msgstr "最佳化"

#: ../../whatsnew/3.3.rst:2151
#, fuzzy
msgid "Major performance enhancements have been added:"
msgstr "新增了主要的性能增強功能："

#: ../../whatsnew/3.3.rst:2153
#, fuzzy
msgid ""
"Thanks to :pep:`393`, some operations on Unicode strings have been optimized:"
msgstr "感謝 :pep:`393`，對 Unicode 字串的一些操作進行了最佳化："

#: ../../whatsnew/3.3.rst:2155
#, fuzzy
msgid "the memory footprint is divided by 2 to 4 depending on the text"
msgstr "記憶體佔用根據文本除以 2 到 4"

#: ../../whatsnew/3.3.rst:2156
#, fuzzy
msgid ""
"encode an ASCII string to UTF-8 doesn't need to encode characters anymore, "
"the UTF-8 representation is shared with the ASCII representation"
msgstr ""
"將 ASCII 字串編碼為 UTF-8 不再需要對字元進行編碼，UTF-8 表示與 ASCII 表示共享"

#: ../../whatsnew/3.3.rst:2158
#, fuzzy
msgid "the UTF-8 encoder has been optimized"
msgstr "UTF-8 編碼器已經過最佳化"

#: ../../whatsnew/3.3.rst:2159
#, fuzzy
msgid ""
"repeating a single ASCII letter and getting a substring of an ASCII string "
"is 4 times faster"
msgstr "重複單個 ASCII 字母並獲取 ASCII 字串的子字串快 4 倍"

#: ../../whatsnew/3.3.rst:2162
msgid "UTF-8 is now 2x to 4x faster.  UTF-16 encoding is now up to 10x faster."
msgstr "UTF-8 現在快 2 到 4 倍。 UTF-16 編碼現在最多快 10 倍。"

#: ../../whatsnew/3.3.rst:2164
msgid ""
"(Contributed by Serhiy Storchaka, :issue:`14624`, :issue:`14738` and :issue:"
"`15026`.)"
msgstr ""
"（由 Serhiy Storchaka 於 :issue:`14624`, :issue:`14738` 和 :issue:"
"`15026` 中貢獻。）"

#: ../../whatsnew/3.3.rst:2169
msgid "Build and C API Changes"
msgstr "建置和 C API 更改"

#: ../../whatsnew/3.3.rst:2171
#, fuzzy
msgid "Changes to Python's build process and to the C API include:"
msgstr "Python 構建過程和 C API 的變化包括："

#: ../../whatsnew/3.3.rst:2173
msgid "New :pep:`3118` related function:"
msgstr "新的 :pep:`3118` 相關函式："

#: ../../whatsnew/3.3.rst:2175
msgid ":c:func:`PyMemoryView_FromMemory`"
msgstr ":c:func:`PyMemoryView_FromMemory`"

#: ../../whatsnew/3.3.rst:2177
msgid ":pep:`393` added new Unicode types, macros and functions:"
msgstr ":pep:`393` 增加了新的 Unicode 型別、巨集和函式："

#: ../../whatsnew/3.3.rst:2179
msgid "High-level API:"
msgstr "高階 API："

#: ../../whatsnew/3.3.rst:2181
msgid ":c:func:`PyUnicode_CopyCharacters`"
msgstr ":c:func:`PyUnicode_CopyCharacters`"

#: ../../whatsnew/3.3.rst:2182
msgid ":c:func:`PyUnicode_FindChar`"
msgstr ":c:func:`PyUnicode_FindChar`"

#: ../../whatsnew/3.3.rst:2183
msgid ":c:func:`PyUnicode_GetLength`, :c:macro:`PyUnicode_GET_LENGTH`"
msgstr ":c:func:`PyUnicode_GetLength`, :c:macro:`PyUnicode_GET_LENGTH`"

#: ../../whatsnew/3.3.rst:2184
msgid ":c:func:`PyUnicode_New`"
msgstr ":c:func:`PyUnicode_New`"

#: ../../whatsnew/3.3.rst:2185
msgid ":c:func:`PyUnicode_Substring`"
msgstr ":c:func:`PyUnicode_Substring`"

#: ../../whatsnew/3.3.rst:2186
msgid ":c:func:`PyUnicode_ReadChar`, :c:func:`PyUnicode_WriteChar`"
msgstr ":c:func:`PyUnicode_ReadChar`, :c:func:`PyUnicode_WriteChar`"

#: ../../whatsnew/3.3.rst:2188
#, fuzzy
msgstr "低階 API："

#: ../../whatsnew/3.3.rst:2190
#, fuzzy
msgid ":c:type:`Py_UCS1`, :c:type:`Py_UCS2`, :c:type:`Py_UCS4` types"
msgstr ":c:type:`Py_UCS1`, :c:type:`Py_UCS2`, :c:type:`Py_UCS4` 型別"

#: ../../whatsnew/3.3.rst:2191
msgid ":c:type:`PyASCIIObject` and :c:type:`PyCompactUnicodeObject` structures"
msgstr ":c:type:`PyASCIIObject` 和 :c:type:`PyCompactUnicodeObject` 結構"

#: ../../whatsnew/3.3.rst:2192
msgid ":c:macro:`PyUnicode_READY`"
msgstr ":c:macro:`PyUnicode_READY`"

#: ../../whatsnew/3.3.rst:2193
msgid ":c:func:`PyUnicode_FromKindAndData`"
msgstr ":c:func:`PyUnicode_FromKindAndData`"

#: ../../whatsnew/3.3.rst:2194
msgid ":c:func:`PyUnicode_AsUCS4`, :c:func:`PyUnicode_AsUCS4Copy`"
msgstr ":c:func:`PyUnicode_AsUCS4`, :c:func:`PyUnicode_AsUCS4Copy`"

#: ../../whatsnew/3.3.rst:2195
msgid ""
":c:macro:`PyUnicode_DATA`, :c:macro:`PyUnicode_1BYTE_DATA`, :c:macro:"
"`PyUnicode_2BYTE_DATA`, :c:macro:`PyUnicode_4BYTE_DATA`"
msgstr ""
":c:macro:`PyUnicode_DATA`, :c:macro:`PyUnicode_1BYTE_DATA`, :c:macro:"
"`PyUnicode_2BYTE_DATA`, :c:macro:`PyUnicode_4BYTE_DATA`"

#: ../../whatsnew/3.3.rst:2197
msgid ""
":c:macro:`PyUnicode_KIND` with :c:type:`PyUnicode_Kind` enum: :c:data:"
"`PyUnicode_WCHAR_KIND`, :c:data:`PyUnicode_1BYTE_KIND`, :c:data:"
"`PyUnicode_2BYTE_KIND`, :c:data:`PyUnicode_4BYTE_KIND`"
msgstr ""
":c:macro:`PyUnicode_KIND` with :c:type:`PyUnicode_Kind` enum: :c:data:"
"`PyUnicode_WCHAR_KIND`, :c:data:`PyUnicode_1BYTE_KIND`, :c:data:"
"`PyUnicode_2BYTE_KIND`, :c:data:`PyUnicode_4BYTE_KIND`"

#: ../../whatsnew/3.3.rst:2200
msgid ""
":c:macro:`PyUnicode_READ`, :c:macro:`PyUnicode_READ_CHAR`, :c:macro:"
"`PyUnicode_WRITE`"
msgstr ""
":c:macro:`PyUnicode_READ`, :c:macro:`PyUnicode_READ_CHAR`, :c:macro:"
"`PyUnicode_WRITE`"

#: ../../whatsnew/3.3.rst:2201
msgid ":c:macro:`PyUnicode_MAX_CHAR_VALUE`"
msgstr ":c:macro:`PyUnicode_MAX_CHAR_VALUE`"

#: ../../whatsnew/3.3.rst:2203
#, fuzzy
msgid ""
":c:macro:`PyArg_ParseTuple` now accepts a :class:`bytearray` for the ``c`` "
"format (:issue:`12380`)."
msgstr ""
":c:macro:`PyArg_ParseTuple` 現在接受 :class:`bytearray` 用於 ``c`` 格式 (:"
"issue:`12380`)。"

#: ../../whatsnew/3.3.rst:2209
#, fuzzy
msgid "Deprecated"
msgstr "已棄用"

#: ../../whatsnew/3.3.rst:2212
msgid "Unsupported Operating Systems"
msgstr "不支援的作業系統"

#: ../../whatsnew/3.3.rst:2214
#, fuzzy
msgid "OS/2 and VMS are no longer supported due to the lack of a maintainer."
msgstr "由於缺少維護者，不再支援 OS/2 和 VMS。"

#: ../../whatsnew/3.3.rst:2216
#, fuzzy
msgid ""
"Windows 2000 and Windows platforms which set ``COMSPEC`` to ``command.com`` "
"are no longer supported due to maintenance burden."
msgstr ""
"由於維護負擔，不再支援將 ``COMSPEC`` 設定為 ``command.com`` 的 Windows 2000 "
"和 Windows 平台。"

#: ../../whatsnew/3.3.rst:2219
#, fuzzy
msgid "OSF support, which was deprecated in 3.2, has been completely removed."
msgstr "在 3.2 中棄用的 OSF 支援已完全刪除。"

#: ../../whatsnew/3.3.rst:2223
msgid "Deprecated Python modules, functions and methods"
msgstr "棄用的 Python 模組、函式和方法"

#: ../../whatsnew/3.3.rst:2225
#, fuzzy
msgid ""
"Passing a non-empty string to ``object.__format__()`` is deprecated, and "
"will produce a :exc:`TypeError` in Python 3.4 (:issue:`9856`)."
msgstr ""
"將非空字串傳遞給 ``object.__format__()`` 已被棄用，並且會在 Python 3.4 中產"
"生 :exc:`TypeError` (:issue:`9856`)。"

#: ../../whatsnew/3.3.rst:2227
#, fuzzy
msgid ""
"The ``unicode_internal`` codec has been deprecated because of the :pep:"
"`393`, use UTF-8, UTF-16 (``utf-16-le`` or ``utf-16-be``), or UTF-32 "
"(``utf-32-le`` or ``utf-32-be``)"
msgstr ""
"由於 :pep:`393`，``unicode_internal`` 編解碼器已被棄用，請使用 UTF-8、UTF-16"
"（``utf-16-le`` 或 ``utf-16-be``），或 UTF-32（``utf-32-le`` 或 ``utf-32-"
"be``）"

#: ../../whatsnew/3.3.rst:2230
msgid ""
":meth:`ftplib.FTP.nlst` and :meth:`ftplib.FTP.dir`: use :meth:`ftplib.FTP."
"mlsd`"
msgstr ""
":meth:`ftplib.FTP.nlst` 和 :meth:`ftplib.FTP.dir`: 使用 :meth:`ftplib.FTP."
"mlsd`"

#: ../../whatsnew/3.3.rst:2232
#, fuzzy
msgid ""
":func:`platform.popen`: use the :mod:`subprocess` module. Check especially "
"the :ref:`subprocess-replacements` section (:issue:`11377`)."
msgstr ""
":func:`platform.popen`: 使用 :mod:`subprocess` 模組。特別檢查 :ref:"
"`subprocess-replacements` 部分 (:issue:`11377`)。"

#: ../../whatsnew/3.3.rst:2234
#, fuzzy
msgid ""
":issue:`13374`: The Windows bytes API has been deprecated in the :mod:`os` "
"module. Use Unicode filenames, instead of bytes filenames, to not depend on "
"the ANSI code page anymore and to support any filename."
msgstr ""
":issue:`13374`: Windows 位元組 API 已在 :mod:`os` 模組中棄用。使用 Unicode 文"
"件名而不是位元組文件名，不再依賴於 ANSI 程式碼頁並支援任何文件名。"

#: ../../whatsnew/3.3.rst:2237
#, fuzzy
msgid ""
":issue:`13988`: The :mod:`xml.etree.cElementTree` module is deprecated.  The "
"accelerator is used automatically whenever available."
msgstr ""
":issue:`13988`::mod:`xml.etree.cElementTree` 模組已棄用。加速器會在可用時自動"
"使用。"

#: ../../whatsnew/3.3.rst:2239
#, fuzzy
msgid ""
"The behaviour of :func:`time.clock` depends on the platform: use the new :"
"func:`time.perf_counter` or :func:`time.process_time` function instead, "
"depending on your requirements, to have a well defined behaviour."
msgstr ""
":func:`time.clock` 的行為取決於平台：根據您的要求，使用新的 :func:`time."
"perf_counter` 或 :func:`time.process_time` 函式來獲得明確定義的行為."

#: ../../whatsnew/3.3.rst:2242
msgid "The :func:`os.stat_float_times` function is deprecated."
msgstr ":func:`os.stat_float_times` 函式已棄用。"

#: ../../whatsnew/3.3.rst:2243
msgid ":mod:`abc` module:"
msgstr ":mod:`abc` 模組："

#: ../../whatsnew/3.3.rst:2252
msgid ":mod:`importlib` package:"
msgstr ":mod:`importlib` 套件："

#: ../../whatsnew/3.3.rst:2254
#, fuzzy
msgid ""
":meth:`importlib.abc.SourceLoader.path_mtime` is now deprecated in favour "
"of :meth:`importlib.abc.SourceLoader.path_stats` as bytecode files now store "
"both the modification time and size of the source file the bytecode file was "
"compiled from."
msgstr ""
":meth:`importlib.abc.SourceLoader.path_mtime` 現在已棄用，取而代之的是 :meth:"
"`importlib.abc.SourceLoader.path_stats` 因為位元組碼文件現在儲存位元組碼文件"
"被編譯的源文件的修改時間和大小從。"

#: ../../whatsnew/3.3.rst:2264
msgid "Deprecated functions and types of the C API"
msgstr "C API 的棄用函式和型別"

#: ../../whatsnew/3.3.rst:2266
#, fuzzy
msgid ""
"The :c:type:`Py_UNICODE` has been deprecated by :pep:`393` and will be "
"removed in Python 4. All functions using this type are deprecated:"
msgstr ""
":c:type:`Py_UNICODE` 已被 :pep:`393` 棄用，並將在 Python 4 中刪除。所有使用此"
"型別的函式均已棄用："

#: ../../whatsnew/3.3.rst:2269
#, fuzzy
msgid ""
"Unicode functions and methods using :c:type:`Py_UNICODE` and :c:expr:"
"`Py_UNICODE*` types:"
msgstr ""
"使用 :c:type:`Py_UNICODE` 和 :c:expr:`Py_UNICODE*` 型別的 Unicode 函式和方"
"法："

#: ../../whatsnew/3.3.rst:2272
#, fuzzy
msgid ""
":c:macro:`PyUnicode_FromUnicode`: use :c:func:`PyUnicode_FromWideChar` or :c:"
"func:`PyUnicode_FromKindAndData`"
msgstr ""
":c:macro:`PyUnicode_FromUnicode`: 使用:c:func:`PyUnicode_FromWideChar` 或 :c:"
"func:`PyUnicode_FromKindAndData`"

#: ../../whatsnew/3.3.rst:2274
#, fuzzy
msgid ""
":c:macro:`PyUnicode_AS_UNICODE`, :c:func:`PyUnicode_AsUnicode`, :c:func:"
"`PyUnicode_AsUnicodeAndSize`: use :c:func:`PyUnicode_AsWideCharString`"
msgstr ""
":c:macro:`PyUnicode_AS_UNICODE`, :c:func:`PyUnicode_AsUnicode`, :c:func:"
"`PyUnicode_AsUnicodeAndSize`: 使用:c:func:`PyUnicode_AsWideCharString`"

#: ../../whatsnew/3.3.rst:2276
#, fuzzy
msgid ""
":c:macro:`PyUnicode_AS_DATA`: use :c:macro:`PyUnicode_DATA` with :c:macro:"
"`PyUnicode_READ` and :c:macro:`PyUnicode_WRITE`"
msgstr ""
":c:macro:`PyUnicode_AS_DATA`：使用 :c:macro:`PyUnicode_DATA` 和 :c:macro:"
"`PyUnicode_READ` 和 :c:macro:`PyUnicode_WRITE`"

#: ../../whatsnew/3.3.rst:2278
#, fuzzy
msgid ""
":c:macro:`PyUnicode_GET_SIZE`, :c:func:`PyUnicode_GetSize`: use :c:macro:"
"`PyUnicode_GET_LENGTH` or :c:func:`PyUnicode_GetLength`"
msgstr ""
":c:macro:`PyUnicode_GET_SIZE`, :c:func:`PyUnicode_GetSize`: 使用:c:macro:"
"`PyUnicode_GET_LENGTH` 或 :c:func:`PyUnicode_GetLength`"

#: ../../whatsnew/3.3.rst:2280
#, fuzzy
msgid ""
":c:macro:`PyUnicode_GET_DATA_SIZE`: use ``PyUnicode_GET_LENGTH(str) * "
"PyUnicode_KIND(str)`` (only work on ready strings)"
msgstr ""
":c:macro:`PyUnicode_GET_DATA_SIZE`：使用``PyUnicode_GET_LENGTH(str) * "
"PyUnicode_KIND(str)``（僅適用於準備好的字串）"

#: ../../whatsnew/3.3.rst:2283
#, fuzzy
msgid ""
":c:func:`PyUnicode_AsUnicodeCopy`: use :c:func:`PyUnicode_AsUCS4Copy` or :c:"
"func:`PyUnicode_AsWideCharString`"
msgstr ""
":c:func:`PyUnicode_AsUnicodeCopy`: 使用:c:func:`PyUnicode_AsUCS4Copy` 或 :c:"
"func:`PyUnicode_AsWideCharString`"

#: ../../whatsnew/3.3.rst:2285
msgid ":c:func:`PyUnicode_GetMax`"
msgstr ":c:func:`PyUnicode_GetMax`"

#: ../../whatsnew/3.3.rst:2288
#, fuzzy
msgid "Functions and macros manipulating Py_UNICODE* strings:"
msgstr "操作 Py_UNICODE* 字串的函式和巨集："

#: ../../whatsnew/3.3.rst:2290
#, fuzzy
msgid ""
":c:macro:`Py_UNICODE_strlen`: use :c:func:`PyUnicode_GetLength` or :c:macro:"
"`PyUnicode_GET_LENGTH`"
msgstr ""
":c:macro:`Py_UNICODE_strlen`: 使用:c:func:`PyUnicode_GetLength` 或 :c:macro:"
"`PyUnicode_GET_LENGTH`"

#: ../../whatsnew/3.3.rst:2292
msgid ""
":c:macro:`Py_UNICODE_strcat`: use :c:func:`PyUnicode_CopyCharacters` or :c:"
"func:`PyUnicode_FromFormat`"
msgstr ""
":c:macro:`Py_UNICODE_strcat`: 使用 :c:func:`PyUnicode_CopyCharacters` 或 :c:"
"func:`PyUnicode_FromFormat`"

#: ../../whatsnew/3.3.rst:2294
#, fuzzy
msgid ""
":c:macro:`Py_UNICODE_strcpy`, :c:macro:`Py_UNICODE_strncpy`, :c:macro:"
"`Py_UNICODE_COPY`: use :c:func:`PyUnicode_CopyCharacters` or :c:func:"
"`PyUnicode_Substring`"
msgstr ""
":c:macro:`Py_UNICODE_strcpy`, :c:macro:`Py_UNICODE_strncpy`, :c:macro:"
"`Py_UNICODE_COPY`: 使用 :c:func:`PyUnicode_CopyCharacters` 或 :c:func:"
"`PyUnicode_Substring`"

#: ../../whatsnew/3.3.rst:2297
msgid ":c:macro:`Py_UNICODE_strcmp`: use :c:func:`PyUnicode_Compare`"
msgstr ":c:macro:`Py_UNICODE_strcmp`: 使用 :c:func:`PyUnicode_Compare`"

#: ../../whatsnew/3.3.rst:2298
msgid ":c:macro:`Py_UNICODE_strncmp`: use :c:func:`PyUnicode_Tailmatch`"
msgstr ":c:macro:`Py_UNICODE_strncmp`: 使用 :c:func:`PyUnicode_Tailmatch`"

#: ../../whatsnew/3.3.rst:2299
msgid ""
":c:macro:`Py_UNICODE_strchr`, :c:macro:`Py_UNICODE_strrchr`: use :c:func:"
"`PyUnicode_FindChar`"
msgstr ""
":c:macro:`Py_UNICODE_strchr`, :c:macro:`Py_UNICODE_strrchr`: 使用 :c:func:"
"`PyUnicode_FindChar`"

#: ../../whatsnew/3.3.rst:2301
msgid ":c:macro:`Py_UNICODE_FILL`: use :c:func:`PyUnicode_Fill`"
msgstr ":c:macro:`Py_UNICODE_FILL`: 使用 :c:func:`PyUnicode_Fill`"

#: ../../whatsnew/3.3.rst:2302
msgid ":c:macro:`Py_UNICODE_MATCH`"
msgstr ":c:macro:`Py_UNICODE_MATCH`"

#: ../../whatsnew/3.3.rst:2304
msgid "Encoders:"
msgstr "編碼器："

#: ../../whatsnew/3.3.rst:2306
msgid ":c:func:`PyUnicode_Encode`: use :c:func:`PyUnicode_AsEncodedObject`"
msgstr ":c:func:`PyUnicode_Encode`: 使用 :c:func:`PyUnicode_AsEncodedObject`"

#: ../../whatsnew/3.3.rst:2307
msgid ":c:func:`PyUnicode_EncodeUTF7`"
msgstr ":c:func:`PyUnicode_EncodeUTF7`"

#: ../../whatsnew/3.3.rst:2308
msgid ""
":c:func:`PyUnicode_EncodeUTF8`: use :c:func:`PyUnicode_AsUTF8` or :c:func:"
"`PyUnicode_AsUTF8String`"
msgstr ""
":c:func:`PyUnicode_EncodeUTF8`: 使用 :c:func:`PyUnicode_AsUTF8` 或 :c:func:"
"`PyUnicode_AsUTF8String`"

#: ../../whatsnew/3.3.rst:2310
msgid ":c:func:`PyUnicode_EncodeUTF32`"
msgstr ":c:func:`PyUnicode_EncodeUTF32`"

#: ../../whatsnew/3.3.rst:2311
msgid ":c:func:`PyUnicode_EncodeUTF16`"
msgstr ":c:func:`PyUnicode_EncodeUTF16`"

#: ../../whatsnew/3.3.rst:2312
msgid ""
":c:func:`PyUnicode_EncodeUnicodeEscape` use :c:func:"
"`PyUnicode_AsUnicodeEscapeString`"
msgstr ""
":c:func:`PyUnicode_EncodeUnicodeEscape` 使用 :c:func:"
"`PyUnicode_AsUnicodeEscapeString`"

#: ../../whatsnew/3.3.rst:2314
msgid ""
":c:func:`PyUnicode_EncodeRawUnicodeEscape` use :c:func:"
"`PyUnicode_AsRawUnicodeEscapeString`"
msgstr ""
":c:func:`PyUnicode_EncodeRawUnicodeEscape` 使用 :c:func:"
"`PyUnicode_AsRawUnicodeEscapeString`"

#: ../../whatsnew/3.3.rst:2316
msgid ""
":c:func:`PyUnicode_EncodeLatin1`: use :c:func:`PyUnicode_AsLatin1String`"
msgstr ""
":c:func:`PyUnicode_EncodeLatin1`: 使用 :c:func:`PyUnicode_AsLatin1String`"

#: ../../whatsnew/3.3.rst:2317
msgid ":c:func:`PyUnicode_EncodeASCII`: use :c:func:`PyUnicode_AsASCIIString`"
msgstr ":c:func:`PyUnicode_EncodeASCII`: 使用 :c:func:`PyUnicode_AsASCIIString`"

#: ../../whatsnew/3.3.rst:2318
msgid ":c:func:`PyUnicode_EncodeCharmap`"
msgstr ":c:func:`PyUnicode_EncodeCharmap`"

#: ../../whatsnew/3.3.rst:2319
msgid ":c:func:`PyUnicode_TranslateCharmap`"
msgstr ":c:func:`PyUnicode_TranslateCharmap`"

#: ../../whatsnew/3.3.rst:2320
#, fuzzy
msgid ""
":c:func:`PyUnicode_EncodeMBCS`: use :c:func:`PyUnicode_AsMBCSString` or :c:"
"func:`PyUnicode_EncodeCodePage` (with ``CP_ACP`` code_page)"
msgstr ""
":c:func:`PyUnicode_EncodeMBCS`: 使用 :c:func:`PyUnicode_AsMBCSString` 或 :c:"
"func:`PyUnicode_EncodeCodePage` (with ``CP_ACP`` code_page)"

#: ../../whatsnew/3.3.rst:2322
msgid ""
":c:func:`PyUnicode_EncodeDecimal`, :c:func:"
"`PyUnicode_TransformDecimalToASCII`"
msgstr ""
":c:func:`PyUnicode_EncodeDecimal`, :c:func:"
"`PyUnicode_TransformDecimalToASCII`"

#: ../../whatsnew/3.3.rst:2327
msgid "Deprecated features"
msgstr "棄用的功能"

#: ../../whatsnew/3.3.rst:2329
#, fuzzy
msgid ""
"The :mod:`array` module's ``'u'`` format code is now deprecated and will be "
"removed in Python 4 together with the rest of the (:c:type:`Py_UNICODE`) API."
msgstr ""
":mod:`array` 模組的 ``'u'`` 格式程式碼現已棄用，並將在 Python 4 中與其餘 (:c:"
"type:`Py_UNICODE`) API 一起刪除。"

#: ../../whatsnew/3.3.rst:2334
#, fuzzy
msgid "Porting to Python 3.3"
msgstr "移植到 Python 3.3"

#: ../../whatsnew/3.3.rst:2336
#, fuzzy
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr "本節列出了先前描述的更改和其他可能需要更改程式碼的錯誤修復。"

#: ../../whatsnew/3.3.rst:2342
#, fuzzy
msgid "Porting Python code"
msgstr "移植 Python 程式碼"

#: ../../whatsnew/3.3.rst:2344
#, fuzzy
msgid ""
"Hash randomization is enabled by default. Set the :envvar:`PYTHONHASHSEED` "
"environment variable to ``0`` to disable hash randomization. See also the :"
"meth:`object.__hash__` method."
msgstr ""
"預設情況下啟用雜湊隨機化。將 PYTHONHASHSEED 環境變數設定為 0 以禁用雜湊隨機"
"化。另見 :meth:`object.__hash__` 方法。"

#: ../../whatsnew/3.3.rst:2348
#, fuzzy
msgid ""
":issue:`12326`: On Linux, sys.platform doesn't contain the major version "
"anymore. It is now always 'linux', instead of 'linux2' or 'linux3' depending "
"on the Linux version used to build Python. Replace sys.platform == 'linux2' "
"with sys.platform.startswith('linux'), or directly sys.platform == 'linux' "
"if you don't need to support older Python versions."
msgstr ""
":issue:`12326`: 在 Linux 上，sys.platform 不再包含主要版本。它現在始終是 "
"``linux``，而不是 ``linux2``或 ``linux3``，具體取決於用於構建 Python 的 "
"Linux 版本。將 sys.platform == 'linux2' 替換為 sys.platform."
"startswith('linux')，或者如果您不需要支援舊的 Python 版本，則直接替換 sys."
"platform == 'linux'。"

#: ../../whatsnew/3.3.rst:2354
#, fuzzy
msgid ""
":issue:`13847`, :issue:`14180`: :mod:`time` and :mod:`datetime`: :exc:"
"`OverflowError` is now raised instead of :exc:`ValueError` if a timestamp is "
"out of range. :exc:`OSError` is now raised if C functions :c:func:`gmtime` "
"or :c:func:`localtime` failed."
msgstr ""
":issue:`13847`, :issue:`14180`: :mod:`time` 和 :mod:`datetime`: :exc:"
"`OverflowError` 現在在時間戳超出時引發，而不是 :exc:`ValueError`的範圍。如果 "
"C 函式 :c:func:`gmtime` 或 :c:func:`localtime` 失敗，現在會引發 :exc:"
"`OSError`。"

#: ../../whatsnew/3.3.rst:2359
#, fuzzy
msgid ""
"The default finders used by import now utilize a cache of what is contained "
"within a specific directory. If you create a Python source file or "
"sourceless bytecode file, make sure to call :func:`importlib."
"invalidate_caches` to clear out the cache for the finders to notice the new "
"file."
msgstr ""
"import 使用的預設查找器現在利用特定目錄中包含的內容的快取。如果您建立 Python "
"源文件或無源位元組碼文件，請確保呼叫 importlib.invalidate_caches 以清除快取，"
"以便查找者註意到新文件。"

#: ../../whatsnew/3.3.rst:2364
#, fuzzy
msgid ""
":exc:`ImportError` now uses the full name of the module that was attempted "
"to be imported. Doctests that check ImportErrors' message will need to be "
"updated to use the full name of the module instead of just the tail of the "
"name."
msgstr ""
":exc:`ImportError` 現在使用嘗試導入的模組的全名。檢查 ImportErrors 消息的 "
"Doctests 將需要更新以使用模組的全名，而不僅僅是名稱的尾部。"

#: ../../whatsnew/3.3.rst:2369
#, fuzzy
msgid ""
"The *index* argument to :func:`__import__` now defaults to 0 instead of -1 "
"and no longer support negative values. It was an oversight when :pep:`328` "
"was implemented that the default value remained -1. If you need to continue "
"to perform a relative import followed by an absolute import, then perform "
"the relative import using an index of 1, followed by another import using an "
"index of 0. It is preferred, though, that you use :func:`importlib."
"import_module` rather than call :func:`__import__` directly."
msgstr ""
":func:`__import__` 的 *index* 參數現在預設為 0 而不是 -1，並且不再支援負值。"
"實施 :pep:`328` 時，預設值仍為 -1，這是一個疏忽。如果您需要繼續執行相對導入，"
"然後執行絕對導入，則使用索引 1 執行相對導入，然後使用索引 0 執行另一個導入。"
"不過，最好使用 :func:` importlib.import_module` 而不是直接呼叫 :func:"
"`__import__`。"

#: ../../whatsnew/3.3.rst:2377
#, fuzzy
msgid ""
":func:`__import__` no longer allows one to use an index value other than 0 "
"for top-level modules. E.g. ``__import__('sys', level=1)`` is now an error."
msgstr ""
":func:`__import__` 不再允許對頂級模組使用 0 以外的索引值。例如。 "
"``__import__('sys', level=1)`` 現在是一個錯誤。"

#: ../../whatsnew/3.3.rst:2380
#, fuzzy
msgid ""
"Because :attr:`sys.meta_path` and :attr:`sys.path_hooks` now have finders on "
"them by default, you will most likely want to use :meth:`list.insert` "
"instead of :meth:`list.append` to add to those lists."
msgstr ""
"因為 :attr:`sys.meta_path` 和 :attr:`sys.path_hooks` 現在預設有查找器，你很可"
"能想使用 :meth:`list.insert` 而不是 :meth:`list.append ` 新增到這些列表中。"

#: ../../whatsnew/3.3.rst:2384
#, fuzzy
msgid ""
"Because ``None`` is now inserted into :attr:`sys.path_importer_cache`, if "
"you are clearing out entries in the dictionary of paths that do not have a "
"finder, you will need to remove keys paired with values of ``None`` **and** :"
"class:`imp.NullImporter` to be backwards-compatible. This will lead to extra "
"overhead on older versions of Python that re-insert ``None`` into :attr:`sys."
"path_importer_cache` where it represents the use of implicit finders, but "
"semantically it should not change anything."
msgstr ""
"因為 ``None`` 現在被插入到 :attr:`sys.path_importer_cache` 中，如果您要清除沒"
"有查找器的路徑字典中的條目，您將需要刪除與 ``None 值配對的鍵`` **和** :class:"
"`imp.NullImporter` 向後相容。這將導致舊版本 Python 的額外開銷，這些舊版本將 "
"``None`` 重新插入到 :attr:`sys.path_importer_cache` 中，它代表隱式查找器的使"
"用，但在語義上它不應該改變任何東西。"

#: ../../whatsnew/3.3.rst:2392
#, fuzzy
msgid ""
":class:`importlib.abc.Finder` no longer specifies a ``find_module()`` "
"abstract method that must be implemented. If you were relying on subclasses "
"to implement that method, make sure to check for the method's existence "
"first. You will probably want to check for ``find_loader()`` first, though, "
"in the case of working with :term:`path entry finders <path entry finder>`."
msgstr ""
":class:`importlib.abc.Finder` 不再指定必須實作的``find_module()`` 抽象方法。"
"如果您依賴子類別來實作該方法，請確保首先檢查該方法是否存在。不過，在使用 :"
"term:`path entry finders <path entry finder>` 的情況下，您可能希望首先檢查 "
"``find_loader()``。"

#: ../../whatsnew/3.3.rst:2398
#, fuzzy
msgid ""
":mod:`pkgutil` has been converted to use :mod:`importlib` internally. This "
"eliminates many edge cases where the old behaviour of the :pep:`302` import "
"emulation failed to match the behaviour of the real import system. The "
"import emulation itself is still present, but is now deprecated. The :func:"
"`pkgutil.iter_importers` and :func:`pkgutil.walk_packages` functions special "
"case the standard import hooks so they are still supported even though they "
"do not provide the non-standard ``iter_modules()`` method."
msgstr ""
":mod:`pkgutil` 已轉換為在內部使用 :mod:`importlib`。這消除了 :pep:`302` 導入"
"仿真的舊行為與真實導入系統的行為不匹配的許多邊緣情況。導入仿真本身仍然存在，"
"但現在已棄用。 :func:`pkgutil.iter_importers` 和 :func:`pkgutil."
"walk_packages` 函式是標準導入掛鉤的特殊情況，因此即使它們不提供非標準的 "
"``iter_modules()`` 方法，它們仍然受到支援。"

#: ../../whatsnew/3.3.rst:2406
#, fuzzy
msgid ""
"A longstanding RFC-compliance bug (:issue:`1079`) in the parsing done by :"
"func:`email.header.decode_header` has been fixed.  Code that uses the "
"standard idiom to convert encoded headers into unicode "
"(``str(make_header(decode_header(h))``) will see no change, but code that "
"looks at the individual tuples returned by decode_header will see that "
"whitespace that precedes or follows ``ASCII`` sections is now included in "
"the ``ASCII`` section.  Code that builds headers using ``make_header`` "
"should also continue to work without change, since ``make_header`` continues "
"to add whitespace between ``ASCII`` and non-``ASCII`` sections if it is not "
"already present in the input strings."
msgstr ""
"由 :func:`email.header.decode_header` 完成的剖析中的一個長期存在的 RFC 合規性"
"錯誤（ :issue:`1079`）已得到修復。使用標準習語將編碼標頭轉換為 unicode "
"(``str(make_header(decode_header(h))``) 的程式碼將看不到任何變"
"化，但是查看 decode_header 回傳的各個元組的程式碼將看到前面的空格或遵循 "
"``ASCII``部分現在包含在 ``ASCII``部分中。使用“make_header”構建標頭的程式碼也"
"應該繼續工作而無需更改，因為 ``make_header`` 繼續在 ``ASCII`` 與非 ``ASCII`` "
"之間新增空格（如果輸入字串中尚未存在）。"

#: ../../whatsnew/3.3.rst:2417
#, fuzzy
msgid ""
":func:`email.utils.formataddr` now does the correct content transfer "
"encoding when passed non-``ASCII`` display names.  Any code that depended on "
"the previous buggy behavior that preserved the non-``ASCII`` unicode in the "
"formatted output string will need to be changed (:issue:`1690608`)."
msgstr ""
":func:`email.utils.formataddr` 現在在傳遞非 ``ASCII`` 顯示名稱時進行正確的內"
"容傳輸編碼。任何依賴於先前在格式化輸出字串中保留非 ``ASCII``unicode 的錯誤行"
"為的程式碼都需要更改 (:issue:`1690608`)。"

#: ../../whatsnew/3.3.rst:2422
#, fuzzy
msgid ""
":meth:`poplib.POP3.quit` may now raise protocol errors like all other "
"``poplib`` methods.  Code that assumes ``quit`` does not raise :exc:`poplib."
"error_proto` errors may need to be changed if errors on ``quit`` are "
"encountered by a particular application (:issue:`11291`)."
msgstr ""
":meth:`poplib.POP3.quit` 現在可能會像所有其他 ``poplib`` 方法一樣引發協定錯"
"誤。如果特定應用程式遇到 ``quit`` 錯誤，則假設 ``quit`` 不會引發 :exc:"
"`poplib.error_proto` 錯誤的程式碼可能需要更改（ :issue:`11291`）。"

#: ../../whatsnew/3.3.rst:2427
msgid ""
"The ``strict`` argument to :class:`email.parser.Parser`, deprecated since "
"Python 2.4, has finally been removed."
msgstr ""
":class:`email.parser.Parser` 的 ``strict`` 引數，自 Python 2.4 以來已棄用，現"
"已被刪除。"

#: ../../whatsnew/3.3.rst:2430
msgid ""
"The deprecated method ``unittest.TestCase.assertSameElements`` has been "
"removed."
msgstr "已棄用的方法 ``unittest.TestCase.assertSameElements`` 現已被刪除。"

#: ../../whatsnew/3.3.rst:2433
msgid "The deprecated variable ``time.accept2dyear`` has been removed."
msgstr "已棄用的變數 ``time.accept2dyear`` 現已被刪除。"

#: ../../whatsnew/3.3.rst:2435
#, fuzzy
msgid ""
"The deprecated ``Context._clamp`` attribute has been removed from the :mod:"
"`decimal` module.  It was previously replaced by the public attribute :attr:"
"`~decimal.Context.clamp`.  (See :issue:`8540`.)"
msgstr ""
"已棄用的 ``Context._clamp`` 屬性已從 :mod:`decimal` 模組中刪除。它以前被公開"
"屬性 :attr:`~decimal.Context.clamp` 取代。 （參見 :issue:`8540`。）"

#: ../../whatsnew/3.3.rst:2439
#, fuzzy
msgid ""
"The undocumented internal helper class ``SSLFakeFile`` has been removed "
"from :mod:`smtplib`, since its functionality has long been provided directly "
"by :meth:`socket.socket.makefile`."
msgstr ""
"未記錄的內部幫助程式類 ``SSLFakeFile`` 已從 :mod:`smtplib` 中刪除，因為它的功"
"能長期以來一直由 :meth:`socket.socket.makefile` 直接提供。"

#: ../../whatsnew/3.3.rst:2443
#, fuzzy
msgid ""
"Passing a negative value to :func:`time.sleep` on Windows now raises an "
"error instead of sleeping forever.  It has always raised an error on posix."
msgstr ""
"在 Windows 上將負值傳遞給 :func:`time.sleep` 現在會引發錯誤，而不是永遠休眠。"
"它總是在 posix 上引發錯誤。"

#: ../../whatsnew/3.3.rst:2446
#, fuzzy
msgid ""
"The ``ast.__version__`` constant has been removed.  If you need to make "
"decisions affected by the AST version, use :attr:`sys.version_info` to make "
"the decision."
msgstr ""
"``ast.__version__`` 常數已被刪除。如果您需要做出受 AST 版本影響的決定，請使"
"用 :attr:`sys.version_info` 做出決定。"

#: ../../whatsnew/3.3.rst:2450
#, fuzzy
msgid ""
"Code that used to work around the fact that the :mod:`threading` module used "
"factory functions by subclassing the private classes will need to change to "
"subclass the now-public classes."
msgstr ""
"過去通過子類別化私有類來解決 :mod:`threading` 模組使用工廠函式這一事實的程式"
"碼將需要更改為子類別化現在的公開類。"

#: ../../whatsnew/3.3.rst:2454
#, fuzzy
msgid ""
"The undocumented debugging machinery in the threading module has been "
"removed, simplifying the code.  This should have no effect on production "
"code, but is mentioned here in case any application debug frameworks were "
"interacting with it (:issue:`13550`)."
msgstr ""
"執行緒模組中未記錄的除錯機制已被刪除，簡化了程式碼。這應該對生產程式碼沒有影"
"響，但在此處提及以防任何應用程式除錯框架與其交互（:issue:`13550`）。"

#: ../../whatsnew/3.3.rst:2461
#, fuzzy
msgid "Porting C code"
msgstr "移植 C 程式碼"

#: ../../whatsnew/3.3.rst:2463
#, fuzzy
msgid ""
"In the course of changes to the buffer API the undocumented :c:member:"
"`~Py_buffer.smalltable` member of the :c:type:`Py_buffer` structure has been "
"removed and the layout of the :c:type:`PyMemoryViewObject` has changed."
msgstr ""
"在更改緩衝區 API 的過程中，Py_buffer 結構的未記錄的 :c:member:`~Py_buffer."
"smalltable` 成員已被刪除，並且 :c:type:`PyMemoryViewObject` 的佈局已被刪除已"
"經改變。"

#: ../../whatsnew/3.3.rst:2468
#, fuzzy
msgid ""
"All extensions relying on the relevant parts in ``memoryobject.h`` or "
"``object.h`` must be rebuilt."
msgstr "必須重建依賴於``memoryobject.h`` 或``object.h`` 中相關部分的所有擴充。"

#: ../../whatsnew/3.3.rst:2471
#, fuzzy
msgid ""
"Due to :ref:`PEP 393 <pep-393>`, the :c:type:`Py_UNICODE` type and all "
"functions using this type are deprecated (but will stay available for at "
"least five years).  If you were using low-level Unicode APIs to construct "
"and access unicode objects and you want to benefit of the memory footprint "
"reduction provided by :pep:`393`, you have to convert your code to the new :"
"doc:`Unicode API <../c-api/unicode>`."
msgstr ""
"由於 :ref:`PEP 393 <pep-393>`，:c:type:`Py_UNICODE` 型別和所有使用該型別的函"
"式都已棄用（但至少可使用五年）。如果您使用低階 Unicode API 來構造和訪問 "
"unicode 物件，並且您希望受益於 :pep:`393` 提供的記憶體佔用減少，則必須將您的"
"程式碼轉換為新的 :doc:`Unicode API < ../c-api/unicode>`。"

#: ../../whatsnew/3.3.rst:2478
#, fuzzy
msgid ""
"However, if you only have been using high-level functions such as :c:func:"
"`PyUnicode_Concat()`, :c:func:`PyUnicode_Join` or :c:func:"
"`PyUnicode_FromFormat()`, your code will automatically take advantage of the "
"new unicode representations."
msgstr ""
"但是，如果您只使用高階函式，例如 :c:func:`PyUnicode_Concat()`、:c:func:"
"`PyUnicode_Join` 或 :c:func:`PyUnicode_FromFormat()`，您的程式碼將自動採用利"
"用新的 unicode 表示法。"

#: ../../whatsnew/3.3.rst:2483
msgid ":c:func:`PyImport_GetMagicNumber` now returns ``-1`` upon failure."
msgstr ":c:func:`PyImport_GetMagicNumber` 現在在失敗時回傳 ``-1``。"

#: ../../whatsnew/3.3.rst:2485
#, fuzzy
msgid ""
"As a negative value for the *level* argument to :func:`__import__` is no "
"longer valid, the same now holds for :c:func:`PyImport_ImportModuleLevel`. "
"This also means that the value of *level* used by :c:func:"
"`PyImport_ImportModuleEx` is now ``0`` instead of ``-1``."
msgstr ""
"由於 :func:`__import__` 的 *level* 參數的負值不再有效，現在同樣適用於 :c:"
"func:`PyImport_ImportModuleLevel`。這也意味著 :c:func:"
"`PyImport_ImportModuleEx` 使用的 *level* 值現在是 ``0`` 而不是 ``-1``。"

#: ../../whatsnew/3.3.rst:2492
msgid "Building C extensions"
msgstr "建置 C 擴充"

#: ../../whatsnew/3.3.rst:2494
#, fuzzy
msgid ""
"The range of possible file names for C extensions has been narrowed. Very "
"rarely used spellings have been suppressed: under POSIX, files named "
"``xxxmodule.so``, ``xxxmodule.abi3.so`` and ``xxxmodule.cpython-*.so`` are "
"no longer recognized as implementing the ``xxx`` module.  If you had been "
"generating such files, you have to switch to the other spellings (i.e., "
"remove the ``module`` string from the file names)."
msgstr ""
"C 擴充名的可能文件名範圍已經縮小。很少使用的拼寫已被抑制：在 POSIX 下，名"
"為“xxxmodule.so”、“xxxmodule.abi3.so”和“xxxmodule.cpython-*.so”的文件不再被識"
"別為實作“ `xxx`` 模組。如果你一直在生成這樣的文件，你必須切換到其他拼寫（即從"
"文件名中刪除 ``module`` 字串）。"

#: ../../whatsnew/3.3.rst:2502
msgid "(implemented in :issue:`14040`.)"
msgstr "（在 :issue:`14040` 中實作。）"

#: ../../whatsnew/3.3.rst:2506
#, fuzzy
msgid "Command Line Switch Changes"
msgstr "命令列開關更改"

#: ../../whatsnew/3.3.rst:2508
#, fuzzy
msgid ""
"The -Q command-line flag and related artifacts have been removed.  Code "
"checking sys.flags.division_warning will need updating."
msgstr ""
"-Q 命令列旗標和相關工件已被刪除。程式碼檢查 sys.flags.division_warning 將需要"
"更新。"

#: ../../whatsnew/3.3.rst:2511
msgid "(:issue:`10998`, contributed by Éric Araujo.)"
msgstr "（ :issue:`10998`，由 Éric Araujo 貢獻。）"

#: ../../whatsnew/3.3.rst:2513
#, fuzzy
msgid ""
"When :program:`python` is started with :option:`-S`, ``import site`` will no "
"longer add site-specific paths to the module search paths.  In previous "
"versions, it did."
msgstr ""
"當 :program:`python` 以 :option:`-S` 啟動時，``import site`` 將不再將特定於站"
"點的路徑新增到模組搜索路徑中。在以前的版本中，它確實如此。"

#: ../../whatsnew/3.3.rst:2517
msgid ""
"(:issue:`11591`, contributed by Carl Meyer with editions by Éric Araujo.)"
msgstr "（ :issue:`11591`，由 Carl Meyer 貢獻並由 Éric Araujo 編輯。）"
