# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-31 08:13+0000\n"
"PO-Revision-Date: 2023-05-02 16:30+0800\n"
"Last-Translator: Matt Wang <mattwang44@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.2.2\n"

#: ../../whatsnew/3.6.rst:3
msgid "What's New In Python 3.6"
msgstr "Python 3.6 有什麼新功能"

#: ../../whatsnew/3.6.rst:0
msgid "Editors"
msgstr "編輯者"

#: ../../whatsnew/3.6.rst:5
msgid "Elvis Pranskevichus <elvis@magic.io>, Yury Selivanov <yury@magic.io>"
msgstr "Elvis Pranskevichus <elvis@magic.io>, Yury Selivanov <yury@magic.io>"

#: ../../whatsnew/3.6.rst:47
msgid ""
"This article explains the new features in Python 3.6, compared to 3.5. "
"Python 3.6 was released on December 23, 2016.  See the `changelog <https://"
"docs.python.org/3.6/whatsnew/changelog.html>`_ for a full list of changes."
msgstr ""

#: ../../whatsnew/3.6.rst:54
#, fuzzy
msgid ":pep:`494` - Python 3.6 Release Schedule"
msgstr ":pep:`494` - Python 3.6 發佈時間表"

#: ../../whatsnew/3.6.rst:58
#, fuzzy
msgid "Summary -- Release highlights"
msgstr "總結——發布亮點"

#: ../../whatsnew/3.6.rst:60
#, fuzzy
msgid "New syntax features:"
msgstr "新的語法特性："

#: ../../whatsnew/3.6.rst:62
#, fuzzy
msgid ":ref:`PEP 498 <whatsnew36-pep498>`, formatted string literals."
msgstr ":ref:`PEP 498 <whatsnew36-pep498>`，格式化字串文字。"

#: ../../whatsnew/3.6.rst:64
#, fuzzy
msgid ":ref:`PEP 515 <whatsnew36-pep515>`, underscores in numeric literals."
msgstr ":ref:`PEP 515 <whatsnew36-pep515>`，數字文字中的底線。"

#: ../../whatsnew/3.6.rst:66
#, fuzzy
msgid ":ref:`PEP 526 <whatsnew36-pep526>`, syntax for variable annotations."
msgstr ":ref:`PEP 526 <whatsnew36-pep526>`，變數註釋的語法。"

#: ../../whatsnew/3.6.rst:68
#, fuzzy
msgid ":ref:`PEP 525 <whatsnew36-pep525>`, asynchronous generators."
msgstr ":ref:`PEP 525 <whatsnew36-pep525>`，非同步生成器。"

#: ../../whatsnew/3.6.rst:70
#, fuzzy
msgid ":ref:`PEP 530 <whatsnew36-pep530>`: asynchronous comprehensions."
msgstr ":ref:`PEP 530 <whatsnew36-pep530>`：非同步理解。"

#: ../../whatsnew/3.6.rst:73
#, fuzzy
msgid "New library modules:"
msgstr "新的庫模組："

#: ../../whatsnew/3.6.rst:75
#, fuzzy
msgid ""
":mod:`secrets`: :ref:`PEP 506 -- Adding A Secrets Module To The Standard "
"Library <whatsnew36-pep506>`."
msgstr ""
":mod:`secrets`: :ref:`PEP 506 -- 新增一個秘密模組到標準庫 <whatsnew36-"
"pep506>`。"

#: ../../whatsnew/3.6.rst:78
#, fuzzy
msgid "CPython implementation improvements:"
msgstr "CPython 實作改進："

#: ../../whatsnew/3.6.rst:80
#, fuzzy
msgid ""
"The :ref:`dict <typesmapping>` type has been reimplemented to use a :ref:"
"`more compact representation <whatsnew36-compactdict>` based on `a proposal "
"by Raymond Hettinger <https://mail.python.org/pipermail/python-dev/2012-"
"December/123028.html>`_ and similar to the `PyPy dict implementation`_.  "
"This resulted in dictionaries using 20% to 25% less memory when compared to "
"Python 3.5."
msgstr ""
":ref:`dict <typesmapping>` 型別已被重新實作以使用 :ref:`更緊湊的表示 "
"<whatsnew36-compactdict>` 基於 Raymond Hettinger <https://mail.python.org/"
"pipermail 的提議/python-dev/2012-December/123028.html>`_ 類似於 `PyPy dict 實"
"作`_。與 Python 3.5 相比，這導致詞典使用的記憶體減少了 20% 到 25%。"

#: ../../whatsnew/3.6.rst:87
#, fuzzy
msgid ""
"Customization of class creation has been simplified with the :ref:`new "
"protocol <whatsnew36-pep487>`."
msgstr ":ref:`新協定 <whatsnew36-pep487>` 簡化了類建立的自定義。"

#: ../../whatsnew/3.6.rst:90
#, fuzzy
msgid ""
"The class attribute definition order is :ref:`now preserved  <whatsnew36-"
"pep520>`."
msgstr "類屬性定義順序是 :ref:`now preserved <whatsnew36-pep520>`。"

#: ../../whatsnew/3.6.rst:93
#, fuzzy
msgid ""
"The order of elements in ``**kwargs`` now :ref:`corresponds to the order "
"<whatsnew36-pep468>` in which keyword arguments were passed to the function."
msgstr ""
"``**kwargs`` 中的元素順序現在 :ref:` 對應於 <whatsnew36-pep468> 關鍵字參數傳"
"遞給函式的順序。"

#: ../../whatsnew/3.6.rst:97
#, fuzzy
msgid ""
"DTrace and SystemTap :ref:`probing support <whatsnew36-tracing>` has been "
"added."
msgstr "DTrace 和 SystemTap :ref:`探測支援 <whatsnew36-tracing>` 已被新增。"

#: ../../whatsnew/3.6.rst:100
#, fuzzy
msgid ""
"The new :ref:`PYTHONMALLOC <whatsnew36-pythonmalloc>` environment variable "
"can now be used to debug the interpreter memory allocation and access errors."
msgstr ""
"新的 :ref:`PYTHONMALLOC <whatsnew36-pythonmalloc>` 環境變數現在可用於除錯直譯"
"器記憶體分配和訪問錯誤。"

#: ../../whatsnew/3.6.rst:105
#, fuzzy
msgid "Significant improvements in the standard library:"
msgstr "標準庫的重大改進："

#: ../../whatsnew/3.6.rst:107
#, fuzzy
msgid ""
"The :mod:`asyncio` module has received new features, significant usability "
"and performance improvements, and a fair amount of bug fixes. Starting with "
"Python 3.6 the ``asyncio`` module is no longer provisional and its API is "
"considered stable."
msgstr ""
":mod:`asyncio` 模組獲得了新功能、顯著的可用性和性能改進以及大量錯誤修復。從 "
"Python 3.6 開始，``asyncio`` 模組不再是臨時的，它的 API 被認為是穩定的。"

#: ../../whatsnew/3.6.rst:112
#, fuzzy
msgid ""
"A new :ref:`file system path protocol <whatsnew36-pep519>` has been "
"implemented to support :term:`path-like objects <path-like object>`. All "
"standard library functions operating on paths have been updated to work with "
"the new protocol."
msgstr ""
"一個新的 :ref:`文件系統路徑協定 <whatsnew36-pep519>` 已經實作以支援 :term:`類"
"路徑物件 <類路徑物件>`。所有在路徑上運行的標準庫函式都已更新以使用新協定。"

#: ../../whatsnew/3.6.rst:117
#, fuzzy
msgid ""
"The :mod:`datetime` module has gained support for :ref:`Local Time "
"Disambiguation <whatsnew36-pep495>`."
msgstr ""
":mod:`datetime` 模組已獲得對 :ref:`Local Time Disambiguation <whatsnew36-"
"pep495>` 的支援。"

#: ../../whatsnew/3.6.rst:120
#, fuzzy
msgid ""
"The :mod:`typing` module received a number of :ref:`improvements <whatsnew36-"
"typing>`."
msgstr ":mod:`typing` 模組收到了許多 :ref:`改進 <whatsnew36-typing>`。"

#: ../../whatsnew/3.6.rst:123
#, fuzzy
msgid ""
"The :mod:`tracemalloc` module has been significantly reworked and is now "
"used to provide better output for :exc:`ResourceWarning` as well as provide "
"better diagnostics for memory allocation errors. See the :ref:`PYTHONMALLOC "
"section <whatsnew36-pythonmalloc>` for more information."
msgstr ""
":mod:`tracemalloc` 模組經過重大改造，現在用於為 :exc:`ResourceWarning` 提供更"
"好的輸出，並為記憶體分配錯誤提供更好的診斷。有關詳細資訊，請參閱 :ref:"
"`PYTHONMALLOC 部分 <whatsnew36-pythonmalloc>`。"

#: ../../whatsnew/3.6.rst:130
#, fuzzy
msgid "Security improvements:"
msgstr "安全改進："

#: ../../whatsnew/3.6.rst:132
#, fuzzy
msgid ""
"The new :mod:`secrets` module has been added to simplify the generation of "
"cryptographically strong pseudo-random numbers suitable for managing secrets "
"such as account authentication, tokens, and similar."
msgstr ""
"新增了新的 :mod:`secrets` 模組，以簡化適用於管理機密（例如帳戶身份驗證、令牌"
"等）的加密強偽隨機數的生成。"

#: ../../whatsnew/3.6.rst:136 ../../whatsnew/3.6.rst:1283
#, fuzzy
msgid ""
"On Linux, :func:`os.urandom` now blocks until the system urandom entropy "
"pool is initialized to increase the security. See the :pep:`524` for the "
"rationale."
msgstr ""
"在 Linux 上，:func:`os.urandom` 現在會阻塞，直到初始化系統 urandom 熵池以提高"
"安全性。有關基本原理，請參閱 :pep:`524`。"

#: ../../whatsnew/3.6.rst:140
#, fuzzy
msgid "The :mod:`hashlib` and :mod:`ssl` modules now support OpenSSL 1.1.0."
msgstr ":mod:`hashlib` 和 :mod:`ssl` 模組現在支援 OpenSSL 1.1.0。"

#: ../../whatsnew/3.6.rst:142
#, fuzzy
msgid ""
"The default settings and feature set of the :mod:`ssl` module have been "
"improved."
msgstr ":mod:`ssl` 模組的預設設定和功能集已得到改進。"

#: ../../whatsnew/3.6.rst:145
#, fuzzy
msgid ""
"The :mod:`hashlib` module received support for the BLAKE2, SHA-3 and SHAKE "
"hash algorithms and the :func:`~hashlib.scrypt` key derivation function."
msgstr ""
":mod:`hashlib` 模組獲得了對 BLAKE2、SHA-3 和 SHAKE 雜湊演算法以及 :func:"
"`~hashlib.scrypt` 密鑰派生函式的支援。"

#: ../../whatsnew/3.6.rst:149
#, fuzzy
msgid "Windows improvements:"
msgstr "Windows 改進："

#: ../../whatsnew/3.6.rst:151
#, fuzzy
msgid ""
":ref:`PEP 528 <whatsnew36-pep528>` and :ref:`PEP 529 <whatsnew36-pep529>`, "
"Windows filesystem and console encoding changed to UTF-8."
msgstr ""
":ref:`PEP 528 <whatsnew36-pep528>` 和 :ref:`PEP 529 <whatsnew36-pep529>`，"
"Windows 文件系統和控制台編碼更改為 UTF-8。"

#: ../../whatsnew/3.6.rst:154
#, fuzzy
msgid ""
"The ``py.exe`` launcher, when used interactively, no longer prefers Python 2 "
"over Python 3 when the user doesn't specify a version (via command line "
"arguments or a config file).  Handling of shebang lines remains unchanged - "
"\"python\" refers to Python 2 in that case."
msgstr ""
"當使用者未指定版本（通過命令列參數或配置文件）時，``py.exe`` 啟動器在交互使用"
"時不再優先選擇 Python 2 而不是 Python 3。 shebang 行的處理保持不變 - 在這種情"
"況下， ``python``指的是 Python 2。"

#: ../../whatsnew/3.6.rst:159
#, fuzzy
msgid ""
"``python.exe`` and ``pythonw.exe`` have been marked as long-path aware, "
"which means that the 260 character path limit may no longer apply. See :ref:"
"`removing the MAX_PATH limitation <max-path>` for details."
msgstr ""
"``python.exe`` 和 ``pythonw.exe`` 已被標記為可識別長路徑，這意味著 260 個字元"
"的路徑限制可能不再適用。有關詳細資訊，請參閱 :ref:`刪除 MAX_PATH 限制 <max-"
"path>`。"

#: ../../whatsnew/3.6.rst:163
#, fuzzy
msgid ""
"A ``._pth`` file can be added to force isolated mode and fully specify all "
"search paths to avoid registry and environment lookup. See :ref:`the "
"documentation <windows_finding_modules>` for more information."
msgstr ""
"可以新增 ``._pth`` 文件以強制隔離模式並完全指定所有搜索路徑以避免註冊表和環境"
"查找。有關詳細資訊，請參閱 :ref:`文檔 <windows_finding_modules>`。"

#: ../../whatsnew/3.6.rst:167
#, fuzzy
msgid ""
"A ``python36.zip`` file now works as a landmark to infer :envvar:"
"`PYTHONHOME`. See :ref:`the documentation <windows_finding_modules>` for "
"more information."
msgstr ""
"``python36.zip`` 文件現在可以作為推斷 :envvar:`PYTHONHOME` 的地標。有關詳細資"
"訊，請參閱 :ref:`文檔 <windows_finding_modules>`。"

#: ../../whatsnew/3.6.rst:176
#, fuzzy
msgid "New Features"
msgstr "新功能"

#: ../../whatsnew/3.6.rst:181
#, fuzzy
msgid "PEP 498: Formatted string literals"
msgstr "PEP 498：格式化字串文字"

#: ../../whatsnew/3.6.rst:183
#, fuzzy
msgid ""
":pep:`498` introduces a new kind of string literals: *f-strings*, or :ref:"
"`formatted string literals <f-strings>`."
msgstr ""
":pep:`498` 引入了一種新的字串文字：*f-strings*，或 :ref:`格式化字串文字 <f-"
"strings>`。"

#: ../../whatsnew/3.6.rst:186
#, fuzzy
msgid ""
"Formatted string literals are prefixed with ``'f'`` and are similar to the "
"format strings accepted by :meth:`str.format`.  They contain replacement "
"fields surrounded by curly braces.  The replacement fields are expressions, "
"which are evaluated at run time, and then formatted using the :func:`format` "
"protocol::"
msgstr ""
"格式化字串文字以 ``'f'`` 為前綴，類似於 :meth:`str.format` 接受的格式字串。它"
"們包含用花括號包圍的替換欄位。替換欄位是表達式，在運行時計算，然後使用 :func:"
"`format` 協定格式化："

#: ../../whatsnew/3.6.rst:204
#, fuzzy
msgid ":pep:`498` -- Literal String Interpolation."
msgstr ":pep:`498` -- 文字字串插值。"

#: ../../whatsnew/3.6.rst:204
msgid "PEP written and implemented by Eric V. Smith."
msgstr "由 Eric V. Smith 撰寫 PEP 與實作。"

#: ../../whatsnew/3.6.rst:206
#, fuzzy
msgid ":ref:`Feature documentation <f-strings>`."
msgstr ":ref:`功能文檔 <f-strings>`。"

#: ../../whatsnew/3.6.rst:212
#, fuzzy
msgid "PEP 526: Syntax for variable annotations"
msgstr "PEP 526：變數註釋的語法"

#: ../../whatsnew/3.6.rst:214
#, fuzzy
msgid ""
":pep:`484` introduced the standard for type annotations of function "
"parameters, a.k.a. type hints. This PEP adds syntax to Python for annotating "
"the types of variables including class variables and instance variables::"
msgstr ""
":pep:`484` 引入了函式參數型別註釋的標準，也就是型別提示。此 PEP 向 Python 新"
"增語法，用於註釋變數型別，包括類變數和實例變數："

#: ../../whatsnew/3.6.rst:225
#, fuzzy
msgid ""
"Just as for function annotations, the Python interpreter does not attach any "
"particular meaning to variable annotations and only stores them in the "
"``__annotations__`` attribute of a class or module."
msgstr ""
"與函式註解一樣，Python 直譯器不會為變數註解附加任何特定含義，只會將它們儲存在"
"類或模組的 ``__annotations__`` 屬性中。"

#: ../../whatsnew/3.6.rst:229
#, fuzzy
msgid ""
"In contrast to variable declarations in statically typed languages, the goal "
"of annotation syntax is to provide an easy way to specify structured type "
"metadata for third party tools and libraries via the abstract syntax tree "
"and the ``__annotations__`` attribute."
msgstr ""
"與靜態型別語言中的變數聲明相比，註釋語法的目標是提供一種簡單的方法來通過抽象"
"語法樹和 __annotations__ 屬性為第三方工具和庫指定結構化型別元資料。"

#: ../../whatsnew/3.6.rst:238
#, fuzzy
msgid ":pep:`526` -- Syntax for variable annotations."
msgstr ":pep:`526` -- 變數註釋的語法。"

#: ../../whatsnew/3.6.rst:237
#, fuzzy
msgid ""
"PEP written by Ryan Gonzalez, Philip House, Ivan Levkivskyi, Lisa Roach, and "
"Guido van Rossum. Implemented by Ivan Levkivskyi."
msgstr ""
"PEP 由 Ryan Gonzalez、Philip House、Ivan Levkivskyi、Lisa Roach 和 Guido van "
"Rossum 撰寫。由 Ivan Levkivskyi 實施。"

#: ../../whatsnew/3.6.rst:240
#, fuzzy
msgid ""
"Tools that use or will use the new syntax: `mypy <http://www.mypy-lang.org/"
">`_, `pytype <https://github.com/google/pytype>`_, PyCharm, etc."
msgstr ""
"使用或將使用新語法的工具：`mypy <http://www.mypy-lang.org/>`_、`pytype "
"<https://github.com/google/pytype>`_、PyCharm 等."

#: ../../whatsnew/3.6.rst:248
#, fuzzy
msgid "PEP 515: Underscores in Numeric Literals"
msgstr "PEP 515：數字文字中的底線"

#: ../../whatsnew/3.6.rst:250
#, fuzzy
msgid ""
":pep:`515` adds the ability to use underscores in numeric literals for "
"improved readability.  For example::"
msgstr ":pep:`515` 新增了在數字文字中使用底線的功能，以提高可讀性。例如：："

#: ../../whatsnew/3.6.rst:258
#, fuzzy
msgid ""
"Single underscores are allowed between digits and after any base specifier.  "
"Leading, trailing, or multiple underscores in a row are not allowed."
msgstr ""
"數字之間和任何基本說明符之後允許使用單底線。不允許在一行中使用前導、尾隨或多"
"個底線。"

#: ../../whatsnew/3.6.rst:262
#, fuzzy
msgid ""
"The :ref:`string formatting <formatspec>` language also now has support for "
"the ``'_'`` option to signal the use of an underscore for a thousands "
"separator for floating point presentation types and for integer presentation "
"type ``'d'``.  For integer presentation types ``'b'``, ``'o'``, ``'x'``, and "
"``'X'``, underscores will be inserted every 4 digits::"
msgstr ""
":ref:`string formatting <formatspec>` 語言現在也支援 ``'_'`` 選項來指示使用底"
"線作為浮點表示型別和整數表示型別的千位分隔符 ``'d'``。對於整數表示型別 "
"``'b'``、``'o'``、``'x'`` 和 ``'X'``，底線將每 4 位插入一次："

#: ../../whatsnew/3.6.rst:276
#, fuzzy
msgid ":pep:`515` -- Underscores in Numeric Literals"
msgstr ":pep:`515` -- 數字文字中的底線"

#: ../../whatsnew/3.6.rst:277
msgid "PEP written by Georg Brandl and Serhiy Storchaka."
msgstr "由 Georg Brandl 與 Serhiy Storchaka 撰寫 PEP。"

#: ../../whatsnew/3.6.rst:283
#, fuzzy
msgid "PEP 525: Asynchronous Generators"
msgstr "PEP 525：非同步生成器"

#: ../../whatsnew/3.6.rst:285
#, fuzzy
msgid ""
":pep:`492` introduced support for native coroutines and ``async`` / "
"``await`` syntax to Python 3.5.  A notable limitation of the Python 3.5 "
"implementation is that it was not possible to use ``await`` and ``yield`` in "
"the same function body.  In Python 3.6 this restriction has been lifted, "
"making it possible to define *asynchronous generators*::"
msgstr ""
":pep:`492` 在 Python 3.5 中引入了對原生協程和 ``async`` / ``await`` 語法的支"
"援。 Python 3.5 實作的一個顯著限制是無法在同一個函式體中使用 ``await`` 和 "
"``yield``。在 Python 3.6 中這個限制已經解除，使得定義 *asynchronous "
"generators*::"

#: ../../whatsnew/3.6.rst:297
#, fuzzy
msgid "The new syntax allows for faster and more concise code."
msgstr "新語法允許更快、更簡潔的程式碼。"

#: ../../whatsnew/3.6.rst:301
#, fuzzy
msgid ":pep:`525` -- Asynchronous Generators"
msgstr ":pep:`525` -- 非同步生成器"

#: ../../whatsnew/3.6.rst:302 ../../whatsnew/3.6.rst:323
msgid "PEP written and implemented by Yury Selivanov."
msgstr "由 Yury Selivanov 撰寫 PEP 與實作。"

#: ../../whatsnew/3.6.rst:308
#, fuzzy
msgid "PEP 530: Asynchronous Comprehensions"
msgstr "PEP 530：非同步理解"

#: ../../whatsnew/3.6.rst:310
#, fuzzy
msgid ""
":pep:`530` adds support for using ``async for`` in list, set, dict "
"comprehensions and generator expressions::"
msgstr ""
":pep:`530` 新增了對在列表、集合、字典理解和生成器表達式中使用 ``async for`` "
"的支援::"

#: ../../whatsnew/3.6.rst:315
#, fuzzy
msgid ""
"Additionally, ``await`` expressions are supported in all kinds of "
"comprehensions::"
msgstr "此外，各種理解都支援 ``await`` 表達式::"

#: ../../whatsnew/3.6.rst:322
#, fuzzy
msgid ":pep:`530` -- Asynchronous Comprehensions"
msgstr ":pep:`530` -- 非同步理解"

#: ../../whatsnew/3.6.rst:329
#, fuzzy
msgid "PEP 487: Simpler customization of class creation"
msgstr "PEP 487：更簡單的類建立定制"

#: ../../whatsnew/3.6.rst:331
#, fuzzy
msgid ""
"It is now possible to customize subclass creation without using a metaclass. "
"The new ``__init_subclass__`` classmethod will be called on the base class "
"whenever a new subclass is created::"
msgstr ""
"現在可以在不使用元類的情況下自定義子類別建立。每當建立新的子類別時，都會在基"
"底類別上呼叫新的 ``__init_subclass__`` 類方法::"

#: ../../whatsnew/3.6.rst:348
#, fuzzy
msgid ""
"In order to allow zero-argument :func:`super` calls to work correctly from :"
"meth:`~object.__init_subclass__` implementations, custom metaclasses must "
"ensure that the new ``__classcell__`` namespace entry is propagated to "
"``type.__new__`` (as described in :ref:`class-object-creation`)."
msgstr ""
"為了允許零參數 :func:`super` 呼叫從 :meth:`~object.__init_subclass__` 實作中"
"正常工作，自定義元類必須確保新的 ``__classcell__`` 命名空間條目傳播到 "
"``type。 __new__``（如 :ref:`class-object-creation` 中所述）。"

#: ../../whatsnew/3.6.rst:356 ../../whatsnew/3.6.rst:394
#, fuzzy
msgid ":pep:`487` -- Simpler customization of class creation"
msgstr ":pep:`487` -- 更簡單的類建立定制"

#: ../../whatsnew/3.6.rst:356 ../../whatsnew/3.6.rst:394
msgid "PEP written and implemented by Martin Teichmann."
msgstr "由 Martin Teichmann 撰寫 PEP 與實作。"

#: ../../whatsnew/3.6.rst:358
#, fuzzy
msgid ":ref:`Feature documentation <class-customization>`"
msgstr ":ref:`功能文檔<class-customization>`"

#: ../../whatsnew/3.6.rst:364
#, fuzzy
msgid "PEP 487: Descriptor Protocol Enhancements"
msgstr "PEP 487：描述器協定增強"

#: ../../whatsnew/3.6.rst:366
#, fuzzy
msgid ""
":pep:`487` extends the descriptor protocol to include the new optional :meth:"
"`~object.__set_name__` method.  Whenever a new class is defined, the new "
"method will be called on all descriptors included in the definition, "
"providing them with a reference to the class being defined and the name "
"given to the descriptor within the class namespace.  In other words, "
"instances of descriptors can now know the attribute name of the descriptor "
"in the owner class::"
msgstr ""
":pep:`487` 擴充了描述器協定以包含新的可選 :meth:`~object.__set_name__` 方法。"
"每當定義一個新類時，都會對定義中包含的所有描述器呼叫新方法，為它們提供對正在"
"定義的類的引用以及在類命名空間中為描述器指定的名稱。換句話說，描述器的實例現"
"在可以知道所有者類中描述器的屬性名稱::"

#: ../../whatsnew/3.6.rst:396
#, fuzzy
msgid ":ref:`Feature documentation <descriptors>`"
msgstr ":ref:`功能文檔<描述器>`"

#: ../../whatsnew/3.6.rst:402
#, fuzzy
msgid "PEP 519: Adding a file system path protocol"
msgstr "PEP 519：新增文件系統路徑協定"

#: ../../whatsnew/3.6.rst:404
#, fuzzy
msgid ""
"File system paths have historically been represented as :class:`str` or :"
"class:`bytes` objects. This has led to people who write code which operate "
"on file system paths to assume that such objects are only one of those two "
"types (an :class:`int` representing a file descriptor does not count as that "
"is not a file path). Unfortunately that assumption prevents alternative "
"object representations of file system paths like :mod:`pathlib` from working "
"with pre-existing code, including Python's standard library."
msgstr ""
"文件系統路徑歷來表示為 :class:`str` 或 :class:`bytes` 物件。這導致編寫對文件"
"系統路徑進行操作的程式碼的人假設此類對像只是這兩種型別中的一種（表示文件描述"
"器的 :class:`int` 不算作，因為它不是文件路徑）。不幸的是，該假設阻止了文件系"
"統路徑的替代物件表示，如 :mod:`pathlib` 與預先存在的程式碼一起工作，包括 "
"Python 的標準庫。"

#: ../../whatsnew/3.6.rst:413
#, fuzzy
msgid ""
"To fix this situation, a new interface represented by :class:`os.PathLike` "
"has been defined. By implementing the :meth:`~os.PathLike.__fspath__` "
"method, an object signals that it represents a path. An object can then "
"provide a low-level representation of a file system path as a :class:`str` "
"or :class:`bytes` object. This means an object is considered :term:`path-"
"like <path-like object>` if it implements :class:`os.PathLike` or is a :"
"class:`str` or :class:`bytes` object which represents a file system path. "
"Code can use :func:`os.fspath`, :func:`os.fsdecode`, or :func:`os.fsencode` "
"to explicitly get a :class:`str` and/or :class:`bytes` representation of a "
"path-like object."
msgstr ""
"為了解決這種情況，定義了一個由 os.PathLike 表示的新介面。通過實施 :meth:`~os."
"PathLike.__fspath__` 方法，一個物件表示它代表一條路徑。然後，物件可以將文件系"
"統路徑的低階表示形式提供為 :class:`str` 或 :class:`bytes` 物件。這意味著如果"
"一個物件實作了 os.PathLike 或者是一個 str 或 bytes 物件，則它被認為是 path-"
"like <path-like object>文件系統路徑。程式碼可以使用 :func:`os.fspath`、:func:"
"`os.fsdecode` 或 :func:`os.fsencode` 顯式獲取 :class:`str` 和/或 :class:"
"`bytes` 表示一個類似路徑的物件。"

#: ../../whatsnew/3.6.rst:426
#, fuzzy
msgid ""
"The built-in :func:`open` function has been updated to accept :class:`os."
"PathLike` objects, as have all relevant functions in the :mod:`os` and :mod:"
"`os.path` modules, and most other functions and classes in the standard "
"library.  The :class:`os.DirEntry` class and relevant classes in :mod:"
"`pathlib` have also been updated to implement :class:`os.PathLike`."
msgstr ""
"內建的 :func:`open` 函式已經更新為接受 :class:`os.PathLike` 物件，就像 :mod:"
"`os` 和 :mod:`os.path` 模組中的所有相關函式一樣，以及標準庫中的大多數其他函式"
"和類。 :class:`os.DirEntry` 類和 :mod:`pathlib` 中的相關類也已更新以實作 :"
"class:`os.PathLike`。"

#: ../../whatsnew/3.6.rst:433
#, fuzzy
msgid ""
"The hope is that updating the fundamental functions for operating on file "
"system paths will lead to third-party code to implicitly support all :term:"
"`path-like objects <path-like object>` without any code changes, or at least "
"very minimal ones (e.g. calling :func:`os.fspath` at the beginning of code "
"before operating on a path-like object)."
msgstr ""
"希望更新用於操作文件系統路徑的基本功能將導致第三方程式碼隱式支援所有 :term:"
"`path-like objects <path-like object>` 而無需任何程式碼更改，或者至少非常小一"
"個（例如，在對類路徑物件進行操作之前，在程式碼開頭呼叫 :func:`os.fspath`）。"

#: ../../whatsnew/3.6.rst:440
#, fuzzy
msgid ""
"Here are some examples of how the new interface allows for :class:`pathlib."
"Path` to be used more easily and transparently with pre-existing code::"
msgstr ""
"以下是一些示例，說明新介面如何允許 :class:`pathlib.Path` 更輕鬆、更透明地與預"
"先存在的程式碼一起使用::"

#: ../../whatsnew/3.6.rst:457
#, fuzzy
msgid ""
"(Implemented by Brett Cannon, Ethan Furman, Dusty Phillips, and Jelle "
"Zijlstra.)"
msgstr ""
"（由 Brett Cannon、Ethan Furman、Dusty Phillips 和 Jelle Zijlstra 實施。）"

#: ../../whatsnew/3.6.rst:461
#, fuzzy
msgid ":pep:`519` -- Adding a file system path protocol"
msgstr ":pep:`519` -- 新增文件系統路徑協定"

#: ../../whatsnew/3.6.rst:462
msgid "PEP written by Brett Cannon and Koos Zevenhoven."
msgstr "由 Brett Cannon 與 Koos Zevenhoven 撰寫 PEP。"

#: ../../whatsnew/3.6.rst:468
#, fuzzy
msgid "PEP 495: Local Time Disambiguation"
msgstr "PEP 495：當地時間消歧"

#: ../../whatsnew/3.6.rst:470
#, fuzzy
msgid ""
"In most world locations, there have been and will be times when local clocks "
"are moved back.  In those times, intervals are introduced in which local "
"clocks show the same time twice in the same day. In these situations, the "
"information displayed on a local clock (or stored in a Python datetime "
"instance) is insufficient to identify a particular moment in time."
msgstr ""
"在世界上大多數地方，當地時鐘已經並且將要後移。在那些時候，引入了間隔，其中本"
"地時鐘在同一天兩次顯示相同的時間。在這些情況下，本地時鐘上顯示的資訊（或儲存"
"在 Python 日期時間實例中的資訊）不足以及時識別特定時刻。"

#: ../../whatsnew/3.6.rst:476
#, fuzzy
msgid ""
":pep:`495` adds the new *fold* attribute to instances of :class:`datetime."
"datetime` and :class:`datetime.time` classes to differentiate between two "
"moments in time for which local times are the same::"
msgstr ""
":pep:`495` 將新的 *fold* 屬性新增到 :class:`datetime.datetime` 和 :class:"
"`datetime.time` 類的實例，以區分本地時間相同的兩個時刻::"

#: ../../whatsnew/3.6.rst:491
#, fuzzy
msgid ""
"The values of the :attr:`fold <datetime.datetime.fold>` attribute have the "
"value ``0`` for all instances except those that represent the second "
"(chronologically) moment in time in an ambiguous case."
msgstr ""
":attr:`fold <datetime.datetime.fold>` 屬性的值對於所有實例都具有值 ``0``，除"
"了那些在不明確的情況下表示第二個（按時間順序）時刻的實例。"

#: ../../whatsnew/3.6.rst:498
#, fuzzy
msgid ":pep:`495` -- Local Time Disambiguation"
msgstr ":pep:`495` -- 當地時間消歧"

#: ../../whatsnew/3.6.rst:498
msgid ""
"PEP written by Alexander Belopolsky and Tim Peters, implementation by "
"Alexander Belopolsky."
msgstr ""
"PEP 由 Alexander Belopolsky 和 Tim Peters 編寫，由 Alexander Belopolsky 實"
"作。"

#: ../../whatsnew/3.6.rst:505
msgid "PEP 529: Change Windows filesystem encoding to UTF-8"
msgstr "PEP 529：將 Windows 檔案系統編碼更改為 UTF-8"

#: ../../whatsnew/3.6.rst:507
#, fuzzy
msgid ""
"Representing filesystem paths is best performed with str (Unicode) rather "
"than bytes. However, there are some situations where using bytes is "
"sufficient and correct."
msgstr ""
"表示文件系統路徑最好使用 str (Unicode) 而不是位元組。但是，在某些情況下使用位"
"元組就足夠了而且是正確的。"

#: ../../whatsnew/3.6.rst:511
#, fuzzy
msgid ""
"Prior to Python 3.6, data loss could result when using bytes paths on "
"Windows. With this change, using bytes to represent paths is now supported "
"on Windows, provided those bytes are encoded with the encoding returned by :"
"func:`sys.getfilesystemencoding()`, which now defaults to ``'utf-8'``."
msgstr ""
"在 Python 3.6 之前，在 Windows 上使用位元組路徑時可能會導致資料丟失。通過此更"
"改，Windows 現在支援使用位元組表示路徑，前提是這些位元組使用 :func:`sys."
"getfilesystemencoding()` 回傳的編碼進行編碼，現在預設為 ``'utf-8'``。"

#: ../../whatsnew/3.6.rst:516
#, fuzzy
msgid ""
"Applications that do not use str to represent paths should use :func:`os."
"fsencode()` and :func:`os.fsdecode()` to ensure their bytes are correctly "
"encoded. To revert to the previous behaviour, set :envvar:"
"`PYTHONLEGACYWINDOWSFSENCODING` or call :func:`sys."
"_enablelegacywindowsfsencoding`."
msgstr ""
"不使用 str 表示路徑的應用程式應該使用 os.fsencode() 和 os.fsdecode() 來確保它"
"們的位元組被正確編碼。要恢復到以前的行為，請設定 :envvar:"
"`PYTHONLEGACYWINDOWSFSENCODING` 或呼叫 :func:`sys."
"_enablelegacywindowsfsencoding`。"

#: ../../whatsnew/3.6.rst:522
#, fuzzy
msgid ""
"See :pep:`529` for more information and discussion of code modifications "
"that may be required."
msgstr "有關可能需要的程式碼修改的更多資訊和討論，請參閱 :pep:`529`。"

#: ../../whatsnew/3.6.rst:529
#, fuzzy
msgid "PEP 528: Change Windows console encoding to UTF-8"
msgstr "PEP 528：將 Windows 控制台編碼更改為 UTF-8"

#: ../../whatsnew/3.6.rst:531
#, fuzzy
msgid ""
"The default console on Windows will now accept all Unicode characters and "
"provide correctly read str objects to Python code. ``sys.stdin``, ``sys."
"stdout`` and ``sys.stderr`` now default to utf-8 encoding."
msgstr ""
"Windows 上的預設控制台現在將接受所有 Unicode 字元並向 Python 程式碼提供正確讀"
"取的 str 物件。 ``sys.stdin``、``sys.stdout`` 和 ``sys.stderr`` 現在預設為 "
"utf-8 編碼。"

#: ../../whatsnew/3.6.rst:535
#, fuzzy
msgid ""
"This change only applies when using an interactive console, and not when "
"redirecting files or pipes. To revert to the previous behaviour for "
"interactive console use, set :envvar:`PYTHONLEGACYWINDOWSSTDIO`."
msgstr ""
"此更改僅適用於使用交互式控制台時，而不適用於重定向文件或管道時。要恢復到以前"
"的交互式控制台使用行為，請設定 :envvar:`PYTHONLEGACYWINDOWSSTDIO`。"

#: ../../whatsnew/3.6.rst:541
#, fuzzy
msgid ":pep:`528` -- Change Windows console encoding to UTF-8"
msgstr ":pep:`528` -- 將 Windows 控制台編碼更改為 UTF-8"

#: ../../whatsnew/3.6.rst:542
msgid "PEP written and implemented by Steve Dower."
msgstr "由 Steve Dower 撰寫 PEP 與實作。"

#: ../../whatsnew/3.6.rst:548
#, fuzzy
msgid "PEP 520: Preserving Class Attribute Definition Order"
msgstr "PEP 520：保留類屬性定義順序"

#: ../../whatsnew/3.6.rst:550
#, fuzzy
msgid ""
"Attributes in a class definition body have a natural ordering: the same "
"order in which the names appear in the source.  This order is now preserved "
"in the new class's :attr:`~object.__dict__` attribute."
msgstr ""
"類定義主體中的屬性具有自然順序：名稱在源程式碼中出現的順序相同。這個順序現在"
"保存在新類的 :attr:`~object.__dict__` 屬性中。"

#: ../../whatsnew/3.6.rst:554
#, fuzzy
msgid ""
"Also, the effective default class *execution* namespace (returned from :ref:"
"`type.__prepare__() <prepare>`) is now an insertion-order-preserving mapping."
msgstr ""
"此外，有效的預設類 *execution* 命名空間（從 :ref:`type.__prepare__() "
"<prepare>` 回傳）現在是一個保留插入順序的映射。"

#: ../../whatsnew/3.6.rst:560
#, fuzzy
msgid ":pep:`520` -- Preserving Class Attribute Definition Order"
msgstr ":pep:`520` -- 保留類屬性定義順序"

#: ../../whatsnew/3.6.rst:561 ../../whatsnew/3.6.rst:575
msgid "PEP written and implemented by Eric Snow."
msgstr "由 Eric Snow 撰寫 PEP 與實作。"

#: ../../whatsnew/3.6.rst:567
#, fuzzy
msgid "PEP 468: Preserving Keyword Argument Order"
msgstr "PEP 468：保留關鍵字參數順序"

#: ../../whatsnew/3.6.rst:569
#, fuzzy
msgid ""
"``**kwargs`` in a function signature is now guaranteed to be an insertion-"
"order-preserving mapping."
msgstr "函式簽名中的``**kwargs`` 現在保證是插入順序保留映射。"

#: ../../whatsnew/3.6.rst:574
#, fuzzy
msgid ":pep:`468` -- Preserving Keyword Argument Order"
msgstr ":pep:`468` -- 保留關鍵字參數順序"

#: ../../whatsnew/3.6.rst:581
#, fuzzy
msgid "New :ref:`dict <typesmapping>` implementation"
msgstr "新的 :ref:`dict <typesmapping>` 實作"

#: ../../whatsnew/3.6.rst:583
#, fuzzy
msgid ""
"The :ref:`dict <typesmapping>` type now uses a \"compact\" representation "
"based on `a proposal by Raymond Hettinger <https://mail.python.org/pipermail/"
"python-dev/2012-December/123028.html>`_ which was `first implemented by PyPy "
"<https://morepypy.blogspot.com/2015/01/faster-more-memory-efficient-and-more."
"html>`_. The memory usage of the new :func:`dict` is between 20% and 25% "
"smaller compared to Python 3.5."
msgstr ""
":ref:`dict <typesmapping>` 型別現在使用基於 Raymond Hettinger <https://mail."
"python.org/pipermail/python-dev/2012-December/123028.html 的提議的“緊湊”表示"
">`_ 這是`首先由 PyPy <https://morepypy.blogspot.com/2015/01/faster-more-"
"memory-efficient-and-more.html> 實作的`_。與 Python 3.5 相比，新的 :func:"
"`dict` 的記憶體使用量減少了 20% 到 25%。"

#: ../../whatsnew/3.6.rst:591
#, fuzzy
msgid ""
"The order-preserving aspect of this new implementation is considered an "
"implementation detail and should not be relied upon (this may change in the "
"future, but it is desired to have this new dict implementation in the "
"language for a few releases before changing the language spec to mandate "
"order-preserving semantics for all current and future Python "
"implementations; this also helps preserve backwards-compatibility with older "
"versions of the language where random iteration order is still in effect, e."
"g. Python 3.5)."
msgstr ""
"這個新實作的順序保留方面被認為是一個實作細節，不應依賴（這可能會在未來改變，"
"但在更改語言規範之前，希望在語言中使用這個新的 dict 實作幾個版本為所有當前和"
"未來的 Python 實作強制保留順序語義；這也有助於保持與舊版本語言的向後相容性，"
"其中隨機疊代順序仍然有效，例如 Python 3.5）。"

#: ../../whatsnew/3.6.rst:600
#, fuzzy
msgid ""
"(Contributed by INADA Naoki in :issue:`27350`. Idea `originally suggested by "
"Raymond Hettinger <https://mail.python.org/pipermail/python-dev/2012-"
"December/123028.html>`_.)"
msgstr ""
"（由 INADA Naoki 在 :issue:`27350` 中貢獻。最初由 Raymond Hettinger 建議的想"
"法 <https://mail.python.org/pipermail/python-dev/2012-December/123028."
"html>`_。）"

#: ../../whatsnew/3.6.rst:608
#, fuzzy
msgid "PEP 523: Adding a frame evaluation API to CPython"
msgstr "PEP 523：向 CPython 新增框架評估 API"

#: ../../whatsnew/3.6.rst:610
#, fuzzy
msgid ""
"While Python provides extensive support to customize how code executes, one "
"place it has not done so is in the evaluation of frame objects.  If you "
"wanted some way to intercept frame evaluation in Python there really wasn't "
"any way without directly manipulating function pointers for defined "
"functions."
msgstr ""
"雖然 Python 為自定義程式碼的執行方式提供了廣泛的支援，但它還沒有這樣做的一個"
"地方是對框架物件的評估。如果您想要某種方式來攔截 Python 中的幀評估，那麼如果"
"不直接操作已定義函式的函式指標，那真的沒有任何辦法。"

#: ../../whatsnew/3.6.rst:616
#, fuzzy
msgid ""
":pep:`523` changes this by providing an API to make frame evaluation "
"pluggable at the C level. This will allow for tools such as debuggers and "
"JITs to intercept frame evaluation before the execution of Python code "
"begins. This enables the use of alternative evaluation implementations for "
"Python code, tracking frame evaluation, etc."
msgstr ""
":pep:`523` 通過提供一個 API 使框架評估在 C 級別可插入來改變這一點。這將允許除"
"錯器和 JIT 等工具在 Python 程式碼開始執行之前攔截幀評估。這使得可以對 Python "
"程式碼、跟踪框架評估等使用替代評估實作。"

#: ../../whatsnew/3.6.rst:623
#, fuzzy
msgid ""
"This API is not part of the limited C API and is marked as private to signal "
"that usage of this API is expected to be limited and only applicable to very "
"select, low-level use-cases. Semantics of the API will change with Python as "
"necessary."
msgstr ""
"此 API 不是受限 C API 的一部分，並被標記為私有，表示此 API 的使用預計將受到限"
"制，並且僅適用於非常精選的低階用例。 API 的語義將根據需要隨 Python 發生變化。"

#: ../../whatsnew/3.6.rst:630
#, fuzzy
msgid ":pep:`523` -- Adding a frame evaluation API to CPython"
msgstr ":pep:`523` -- 向 CPython 新增框架評估 API"

#: ../../whatsnew/3.6.rst:631
msgid "PEP written by Brett Cannon and Dino Viehland."
msgstr "由 Brett Cannon 與 Dino Viehland 撰寫 PEP。"

#: ../../whatsnew/3.6.rst:637
#, fuzzy
msgid "PYTHONMALLOC environment variable"
msgstr "PYTHONMALLOC 環境變數"

#: ../../whatsnew/3.6.rst:639
#, fuzzy
msgid ""
"The new :envvar:`PYTHONMALLOC` environment variable allows setting the "
"Python memory allocators and installing debug hooks."
msgstr "新的 PYTHONMALLOC 環境變數允許設定 Python 記憶體分配器和安裝除錯掛鉤。"

#: ../../whatsnew/3.6.rst:642
#, fuzzy
msgid ""
"It is now possible to install debug hooks on Python memory allocators on "
"Python compiled in release mode using ``PYTHONMALLOC=debug``. Effects of "
"debug hooks:"
msgstr ""
"現在可以使用“PYTHONMALLOC=debug”在以發布模式編譯的 Python 上的 Python 記憶體"
"分配器上安裝除錯掛鉤。除錯鉤子的作用："

#: ../../whatsnew/3.6.rst:645
#, fuzzy
msgid "Newly allocated memory is filled with the byte ``0xCB``"
msgstr "新分配的記憶體用位元組 ``0xCB``填充"

#: ../../whatsnew/3.6.rst:646
#, fuzzy
msgid "Freed memory is filled with the byte ``0xDB``"
msgstr "釋放的記憶體填充位元組 ``0xDB``"

#: ../../whatsnew/3.6.rst:647
#, fuzzy
msgid ""
"Detect violations of the Python memory allocator API. For example, :c:func:"
"`PyObject_Free` called on a memory block allocated by :c:func:`PyMem_Malloc`."
msgstr ""
"檢測 Python 記憶體分配器 API 的違規行為。例如，:c:func:`PyObject_Free` 呼叫了"
"由:c:func:`PyMem_Malloc` 分配的記憶體塊。"

#: ../../whatsnew/3.6.rst:650
#, fuzzy
msgid "Detect writes before the start of a buffer (buffer underflows)"
msgstr "在緩衝區開始之前檢測寫入（緩衝區下溢）"

#: ../../whatsnew/3.6.rst:651
#, fuzzy
msgid "Detect writes after the end of a buffer (buffer overflows)"
msgstr "在緩衝區結束後檢測寫入（緩衝區溢出）"

#: ../../whatsnew/3.6.rst:652
#, fuzzy
msgid ""
"Check that the :term:`GIL <global interpreter lock>` is held when allocator "
"functions of :c:data:`PYMEM_DOMAIN_OBJ` (ex: :c:func:`PyObject_Malloc`) and :"
"c:data:`PYMEM_DOMAIN_MEM` (ex: :c:func:`PyMem_Malloc`) domains are called."
msgstr ""
"檢查 :term:`GIL <global interpreter lock>` 在 :c:data:`PYMEM_DOMAIN_OBJ` "
"(ex: :c:func:`PyObject_Malloc`) 和 :c:data:`PYMEM_DOMAIN_MEM` ( ex: :c:func:"
"`PyMem_Malloc`) 域被呼叫。"

#: ../../whatsnew/3.6.rst:656
#, fuzzy
msgid "Checking if the GIL is held is also a new feature of Python 3.6."
msgstr "檢查GIL是否被持有也是Python 3.6的一個新特性。"

#: ../../whatsnew/3.6.rst:658
#, fuzzy
msgid ""
"See the :c:func:`PyMem_SetupDebugHooks` function for debug hooks on Python "
"memory allocators."
msgstr ""
"請參閱:c:func:`PyMem_SetupDebugHooks` 函式了解 Python 記憶體分配器上的除錯掛"
"鉤。"

#: ../../whatsnew/3.6.rst:661
#, fuzzy
msgid ""
"It is now also possible to force the usage of the :c:func:`malloc` allocator "
"of the C library for all Python memory allocations using "
"``PYTHONMALLOC=malloc``. This is helpful when using external memory "
"debuggers like Valgrind on a Python compiled in release mode."
msgstr ""
"現在也可以使用 ``PYTHONMALLOC=malloc`` 強制使用 C 庫的 :c:func:`malloc` 分配"
"器進行所有 Python 記憶體分配。在以發布模式編譯的 Python 上使用 Valgrind 等外"
"部記憶體除錯器時，這很有用。"

#: ../../whatsnew/3.6.rst:666
#, fuzzy
msgid ""
"On error, the debug hooks on Python memory allocators now use the :mod:"
"`tracemalloc` module to get the traceback where a memory block was allocated."
msgstr ""
"出錯時，Python 記憶體分配器上的除錯掛鉤現在使用 :mod:`tracemalloc` 模組來獲取"
"記憶體塊分配位置的回溯。"

#: ../../whatsnew/3.6.rst:670
#, fuzzy
msgid ""
"Example of fatal error on buffer overflow using ``python3.6 -X "
"tracemalloc=5`` (store 5 frames in traces)::"
msgstr ""
"使用 ``python3.6 -X tracemalloc=5`` 的緩衝區溢出致命錯誤示例（在跟踪中儲存 5 "
"幀）::"

#: ../../whatsnew/3.6.rst:707
#, fuzzy
msgid "(Contributed by Victor Stinner in :issue:`26516` and :issue:`26564`.)"
msgstr "（由 Victor Stinner 在 :issue:`26516` 和 :issue:`26564` 中貢獻。）"

#: ../../whatsnew/3.6.rst:713
#, fuzzy
msgid "DTrace and SystemTap probing support"
msgstr "DTrace 和 SystemTap 探測支援"

#: ../../whatsnew/3.6.rst:715
#, fuzzy
msgid ""
"Python can now be built ``--with-dtrace`` which enables static markers for "
"the following events in the interpreter:"
msgstr ""
"現在可以構建 Python ``--with-dtrace`` 為直譯器中的以下事件啟用靜態標記："

#: ../../whatsnew/3.6.rst:718
#, fuzzy
msgid "function call/return"
msgstr "函式呼叫/回傳"

#: ../../whatsnew/3.6.rst:720
#, fuzzy
msgid "garbage collection started/finished"
msgstr "垃圾收集開始/完成"

#: ../../whatsnew/3.6.rst:722
#, fuzzy
msgid "line of code executed."
msgstr "執行的程式碼行。"

#: ../../whatsnew/3.6.rst:724
#, fuzzy
msgid ""
"This can be used to instrument running interpreters in production, without "
"the need to recompile specific :ref:`debug builds <debug-build>` or "
"providing application-specific profiling/debugging code."
msgstr ""
"這可用於在生產中檢測正在運行的直譯器，而無需重新編譯特定的除錯構建 <debug-"
"build> 或提供特定於應用程式的分析/除錯程式碼。"

#: ../../whatsnew/3.6.rst:728
#, fuzzy
msgid "More details in :ref:`instrumentation`."
msgstr ":ref:`instrumentation` 中的更多詳細資訊。"

#: ../../whatsnew/3.6.rst:730
#, fuzzy
msgid ""
"The current implementation is tested on Linux and macOS.  Additional markers "
"may be added in the future."
msgstr "當前的實作在 Linux 和 macOS 上進行了測試。將來可能會新增其他標記。"

#: ../../whatsnew/3.6.rst:733
#, fuzzy
msgid ""
"(Contributed by Łukasz Langa in :issue:`21590`, based on patches by Jesús "
"Cea Avión, David Malcolm, and Nikhil Benesch.)"
msgstr ""
"（由 Łukasz Langa 在 :issue:`21590` 中貢獻，基於 Jesús Cea Avión、David "
"Malcolm 和 Nikhil Benesch 的補丁。）"

#: ../../whatsnew/3.6.rst:738
#, fuzzy
msgid "Other Language Changes"
msgstr "其他語言變化"

#: ../../whatsnew/3.6.rst:740
#, fuzzy
msgid "Some smaller changes made to the core Python language are:"
msgstr "對核心 Python 語言所做的一些較小的更改是："

#: ../../whatsnew/3.6.rst:742
#, fuzzy
msgid ""
"A ``global`` or ``nonlocal`` statement must now textually appear before the "
"first use of the affected name in the same scope. Previously this was a :exc:"
"`SyntaxWarning`."
msgstr ""
"``global`` 或 ``nonlocal`` 語句現在必須以文本形式出現在同一範圍內首次使用受影"
"響的名稱之前。以前這是一個 :exc:`SyntaxWarning`。"

#: ../../whatsnew/3.6.rst:746
#, fuzzy
msgid ""
"It is now possible to set a :ref:`special method <specialnames>` to ``None`` "
"to indicate that the corresponding operation is not available. For example, "
"if a class sets :meth:`__iter__` to ``None``, the class is not iterable. "
"(Contributed by Andrew Barnert and Ivan Levkivskyi in :issue:`25958`.)"
msgstr ""
"現在可以將 :ref:`特殊方法 <specialnames>` 設定為 ``None`` 以指示相應的操作不"
"可用。例如，如果一個類將 :meth:`__iter__` 設定為 ``None``，則該類不可疊代。 "
"（由 Andrew Barnert 和 Ivan Levkivskyi 在 :issue:`25958` 中貢獻。）"

#: ../../whatsnew/3.6.rst:752
#, fuzzy
msgid ""
"Long sequences of repeated traceback lines are now abbreviated as "
"``\"[Previous line repeated {count} more times]\"`` (see :ref:`whatsnew36-"
"traceback` for an example). (Contributed by Emanuel Barry in :issue:`26823`.)"
msgstr ""
"重複回溯行的長序列現在縮寫為“[上一行重複 {count} 次]”（例如，請參見 :ref:"
"`whatsnew36-traceback`）。 （由 Emanuel Barry 在 :issue:`26823` 中貢獻。）"

#: ../../whatsnew/3.6.rst:757
#, fuzzy
msgid ""
"Import now raises the new exception :exc:`ModuleNotFoundError` (subclass of :"
"exc:`ImportError`) when it cannot find a module.  Code that currently checks "
"for ImportError (in try-except) will still work. (Contributed by Eric Snow "
"in :issue:`15767`.)"
msgstr ""
"Import 現在在找不到模組時引發新例外 :exec:`ModuleNotFoundError`（:exc:"
"`ImportError` 的子類別）。當前檢查 ImportError（在 try-except 中）的程式碼仍"
"然有效。 （由 Eric Snow 在 :issue:`15767` 中貢獻。）"

#: ../../whatsnew/3.6.rst:762
#, fuzzy
msgid ""
"Class methods relying on zero-argument ``super()`` will now work correctly "
"when called from metaclass methods during class creation. (Contributed by "
"Martin Teichmann in :issue:`23722`.)"
msgstr ""
"在類建立期間從元類方法呼叫時，依賴於零參數“super()”的類方法現在可以正常工"
"作。 （由 Martin Teichmann 在 :issue:`23722` 中貢獻。）"

#: ../../whatsnew/3.6.rst:768
msgid "New Modules"
msgstr "新模組"

#: ../../whatsnew/3.6.rst:773
msgid "secrets"
msgstr "secrets"

#: ../../whatsnew/3.6.rst:775
#, fuzzy
msgid ""
"The main purpose of the new :mod:`secrets` module is to provide an obvious "
"way to reliably generate cryptographically strong pseudo-random values "
"suitable for managing secrets, such as account authentication, tokens, and "
"similar."
msgstr ""
"新的 :mod:`secrets` 模組的主要目的是提供一種明顯的方法來可靠地生成適用於管理"
"秘密的加密強偽隨機值，例如帳戶身份驗證、令牌等。"

#: ../../whatsnew/3.6.rst:781
#, fuzzy
msgid ""
"Note that the pseudo-random generators in the :mod:`random` module should "
"*NOT* be used for security purposes.  Use :mod:`secrets` on Python 3.6+ and :"
"func:`os.urandom()` on Python 3.5 and earlier."
msgstr ""
"請注意，:mod:`random` 模組中的偽隨機生成器不應該*用於安全目的。在 Python "
"3.6+ 上使用 :mod:`secrets`，在 Python 3.5 及更早版本上使用 :func:`os."
"urandom()`。"

#: ../../whatsnew/3.6.rst:787
#, fuzzy
msgid ":pep:`506` -- Adding A Secrets Module To The Standard Library"
msgstr ":pep:`506` -- 新增一個秘密模組到標準庫"

#: ../../whatsnew/3.6.rst:788
msgid "PEP written and implemented by Steven D'Aprano."
msgstr "由 Steven D'Aprano 撰寫 PEP 與實作。"

#: ../../whatsnew/3.6.rst:792
#, fuzzy
msgid "Improved Modules"
msgstr "改進模組"

#: ../../whatsnew/3.6.rst:795
msgid "array"
msgstr "array"

#: ../../whatsnew/3.6.rst:797
#, fuzzy
msgid ""
"Exhausted iterators of :class:`array.array` will now stay exhausted even if "
"the iterated array is extended.  This is consistent with the behavior of "
"other mutable sequences."
msgstr ""
"array.array 的耗盡疊代器現在將保持耗盡，即使疊代數組被擴充。這與其他可變序列"
"的行為一致。"

#: ../../whatsnew/3.6.rst:801
#, fuzzy
msgid "Contributed by Serhiy Storchaka in :issue:`26492`."
msgstr "由 Serhiy Storchaka 在 :issue:`26492` 中貢獻。"

#: ../../whatsnew/3.6.rst:804
msgid "ast"
msgstr "ast"

#: ../../whatsnew/3.6.rst:806
#, fuzzy
msgid ""
"The new :class:`ast.Constant` AST node has been added.  It can be used by "
"external AST optimizers for the purposes of constant folding."
msgstr ""
"新增了新的 :class:`ast.Constant` AST 節點。它可以被外部 AST 最佳化器用於常數"
"折疊。"

#: ../../whatsnew/3.6.rst:809
#, fuzzy
msgid "Contributed by Victor Stinner in :issue:`26146`."
msgstr "由 Victor Stinner 在 :issue:`26146` 中貢獻。"

#: ../../whatsnew/3.6.rst:813
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.6.rst:815
#, fuzzy
msgid ""
"Starting with Python 3.6 the ``asyncio`` module is no longer provisional and "
"its API is considered stable."
msgstr ""
"從 Python 3.6 開始，``asyncio`` 模組不再是臨時的，它的 API 被認為是穩定的。"

#: ../../whatsnew/3.6.rst:818
#, fuzzy
msgid ""
"Notable changes in the :mod:`asyncio` module since Python 3.5.0 (all "
"backported to 3.5.x due to the provisional status):"
msgstr ""
"自 Python 3.5.0 以來 :mod:`asyncio` 模組的顯著變化（由於臨時狀態，所有反向移"
"植到 3.5.x）："

#: ../../whatsnew/3.6.rst:821
#, fuzzy
msgid ""
"The :func:`~asyncio.get_event_loop` function has been changed to always "
"return the currently running loop when called from coroutines and callbacks. "
"(Contributed by Yury Selivanov in :issue:`28613`.)"
msgstr ""
":func:`~asyncio.get_event_loop` 函式已更改為在從協程和回呼呼叫時始終回傳當前"
"正在運行的循環。 （由 Yury Selivanov 在 :issue:`28613` 中貢獻。）"

#: ../../whatsnew/3.6.rst:826
#, fuzzy
msgid ""
"The :func:`~asyncio.ensure_future` function and all functions that use it, "
"such as :meth:`loop.run_until_complete() <asyncio.loop.run_until_complete>`, "
"now accept all kinds of :term:`awaitable objects <awaitable>`. (Contributed "
"by Yury Selivanov.)"
msgstr ""
":func:`~asyncio.ensure_future` 函式和所有使用它的函式，例如 :meth:`loop."
"run_until_complete() <asyncio.loop.run_until_complete>`，現在接受各種 :term:"
"`awaitable 物件 <等待>`。 （由 Yury Selivanov 提供。）"

#: ../../whatsnew/3.6.rst:831
#, fuzzy
msgid ""
"New :func:`~asyncio.run_coroutine_threadsafe` function to submit coroutines "
"to event loops from other threads. (Contributed by Vincent Michel.)"
msgstr ""
"新的 :func:`~asyncio.run_coroutine_threadsafe` 函式可以將協程從其他執行緒提交"
"到事件循環。 （由文森特·米歇爾提供。）"

#: ../../whatsnew/3.6.rst:835
#, fuzzy
msgid ""
"New :meth:`Transport.is_closing() <asyncio.BaseTransport.is_closing>` method "
"to check if the transport is closing or closed. (Contributed by Yury "
"Selivanov.)"
msgstr ""
"新的 :meth:`Transport.is_closing() <asyncio.BaseTransport.is_closing>` 方法來"
"檢查傳輸是否正在關閉。 （由 Yury Selivanov 提供。）"

#: ../../whatsnew/3.6.rst:839
#, fuzzy
msgid ""
"The :meth:`loop.create_server() <asyncio.loop.create_server>` method can now "
"accept a list of hosts. (Contributed by Yann Sionneau.)"
msgstr ""
":meth:`loop.create_server() <asyncio.loop.create_server>` 方法現在可以接受主"
"機列表。 （由 Yann Sionneau 提供。）"

#: ../../whatsnew/3.6.rst:843
#, fuzzy
msgid ""
"New :meth:`loop.create_future() <asyncio.loop.create_future>` method to "
"create Future objects.  This allows alternative event loop implementations, "
"such as `uvloop <https://github.com/MagicStack/uvloop>`_, to provide a "
"faster :class:`asyncio.Future` implementation. (Contributed by Yury "
"Selivanov in :issue:`27041`.)"
msgstr ""
"新的 :meth:`loop.create_future() <asyncio.loop.create_future>` 方法來建立 "
"Future 物件。這允許替代事件循環實作，例如 `uvloop <https://github.com/"
"MagicStack/uvloop>`_，以提供更快的 asyncio.Future 實作。 （由 Yury Selivanov "
"在 :issue:`27041` 中貢獻。）"

#: ../../whatsnew/3.6.rst:850
#, fuzzy
msgid ""
"New :meth:`loop.get_exception_handler() <asyncio.loop."
"get_exception_handler>` method to get the current exception handler. "
"(Contributed by Yury Selivanov in :issue:`27040`.)"
msgstr ""
"新的 :meth:`loop.get_exception_handler() <asyncio.loop."
"get_exception_handler>` 方法來獲取當前的例外處理程式。 （由 Yury Selivanov "
"在 :issue:`27040` 中貢獻。）"

#: ../../whatsnew/3.6.rst:854
#, fuzzy
msgid ""
"New :meth:`StreamReader.readuntil() <asyncio.StreamReader.readuntil>` method "
"to read data from the stream until a separator bytes sequence appears. "
"(Contributed by Mark Korenberg.)"
msgstr ""
"新的 :meth:`StreamReader.readuntil() <asyncio.StreamReader.readuntil>` 方法從"
"流中讀取資料，直到出現分隔位元組序列。 （由馬克·科倫伯格提供。）"

#: ../../whatsnew/3.6.rst:859
#, fuzzy
msgid ""
"The performance of :meth:`StreamReader.readexactly() <asyncio.StreamReader."
"readexactly>` has been improved. (Contributed by Mark Korenberg in :issue:"
"`28370`.)"
msgstr ""
":meth:`StreamReader.readexactly() <asyncio.StreamReader.readexactly>` 的性能"
"得到了改進。 （由 Mark Korenberg 在 :issue:`28370` 中貢獻。）"

#: ../../whatsnew/3.6.rst:863
#, fuzzy
msgid ""
"The :meth:`loop.getaddrinfo() <asyncio.loop.getaddrinfo>` method is "
"optimized to avoid calling the system ``getaddrinfo`` function if the "
"address is already resolved. (Contributed by A. Jesse Jiryu Davis.)"
msgstr ""
":meth:`loop.getaddrinfo() <asyncio.loop.getaddrinfo>` 方法進行了最佳化，以避"
"免在地址已解析時呼叫系統 ``getaddrinfo`` 函式。 （由 A. Jesse Jiryu Davis 提"
"供。）"

#: ../../whatsnew/3.6.rst:868
#, fuzzy
msgid ""
"The :meth:`loop.stop() <asyncio.loop.stop>` method has been changed to stop "
"the loop immediately after the current iteration.  Any new callbacks "
"scheduled as a result of the last iteration will be discarded. (Contributed "
"by Guido van Rossum in :issue:`25593`.)"
msgstr ""
":meth:`loop.stop() <asyncio.loop.stop>` 方法已更改為在當前疊代後立即停止循"
"環。由於上次疊代而安排的任何新回呼都將被丟棄。 （由 Guido van Rossum 在 :"
"issue:`25593` 中貢獻。）"

#: ../../whatsnew/3.6.rst:874
#, fuzzy
msgid ""
":meth:`Future.set_exception <asyncio.futures.Future.set_exception>` will now "
"raise :exc:`TypeError` when passed an instance of the :exc:`StopIteration` "
"exception. (Contributed by Chris Angelico in :issue:`26221`.)"
msgstr ""
":meth:`Future.set_exception <asyncio.futures.Future.set_exception>` 現在將在"
"傳遞 :exc:`StopIteration` 例外的實例時引發 :exc:`TypeError`。 （由 Chris "
"Angelico 在 :issue:`26221` 中貢獻。）"

#: ../../whatsnew/3.6.rst:879
#, fuzzy
msgid ""
"New :meth:`loop.connect_accepted_socket() <asyncio.loop."
"connect_accepted_socket>` method to be used by servers that accept "
"connections outside of asyncio, but that use asyncio to handle them. "
"(Contributed by Jim Fulton in :issue:`27392`.)"
msgstr ""
"新的 :meth:`loop.connect_accepted_socket() <asyncio.loop."
"connect_accepted_socket>` 方法供接受 asyncio 外部連接但使用 asyncio 處理它們"
"的伺服器使用。 （由 Jim Fulton 在 :issue:`27392` 中貢獻。）"

#: ../../whatsnew/3.6.rst:884
#, fuzzy
msgid ""
"``TCP_NODELAY`` flag is now set for all TCP transports by default. "
"(Contributed by Yury Selivanov in :issue:`27456`.)"
msgstr ""
"``TCP_NODELAY`` 旗標現在預設設定為所有 TCP 傳輸。 （由 Yury Selivanov 在 :"
"issue:`27456` 中貢獻。）"

#: ../../whatsnew/3.6.rst:887
#, fuzzy
msgid ""
"New :meth:`loop.shutdown_asyncgens() <asyncio.loop.shutdown_asyncgens>` to "
"properly close pending asynchronous generators before closing the loop. "
"(Contributed by Yury Selivanov in :issue:`28003`.)"
msgstr ""
"新的 :meth:`loop.shutdown_asyncgens() <asyncio.loop.shutdown_asyncgens>` 在關"
"閉循環之前正確關閉掛起的非同步生成器。 （由 Yury Selivanov 在 :issue:`28003` "
"中貢獻。）"

#: ../../whatsnew/3.6.rst:892
#, fuzzy
msgid ""
":class:`Future <asyncio.Future>` and :class:`Task <asyncio.Task>` classes "
"now have an optimized C implementation which makes asyncio code up to 30% "
"faster. (Contributed by Yury Selivanov and INADA Naoki in :issue:`26081` "
"and :issue:`28544`.)"
msgstr ""
":class:`Future <asyncio.Future>` 和 :class:`Task <asyncio.Task>` 類現在有一個"
"最佳化的 C 實作，這使得 asyncio 程式碼的速度提高了 30%。 （由 Yury Selivanov "
"和 INADA Naoki 在 :issue:`26081` 和 :issue:`28544` 中貢獻。）"

#: ../../whatsnew/3.6.rst:900
msgid "binascii"
msgstr "binascii"

#: ../../whatsnew/3.6.rst:902
#, fuzzy
msgid ""
"The :func:`~binascii.b2a_base64` function now accepts an optional *newline* "
"keyword argument to control whether the newline character is appended to the "
"return value. (Contributed by Victor Stinner in :issue:`25357`.)"
msgstr ""
":func:`~binascii.b2a_base64` 函式現在接受可選的 *newline* 關鍵字參數來控制換"
"行符是否附加到回傳值。 （由 Victor Stinner 在 :issue:`25357` 中貢獻。）"

#: ../../whatsnew/3.6.rst:909
msgid "cmath"
msgstr "cmath"

#: ../../whatsnew/3.6.rst:911
#, fuzzy
msgid ""
"The new :const:`cmath.tau` (*τ*) constant has been added. (Contributed by "
"Lisa Roach in :issue:`12345`, see :pep:`628` for details.)"
msgstr ""
"新增了新的 :const:`cmath.tau` (*τ*) 常數。 （由 Lisa Roach 在 :issue:`12345` "
"中貢獻，詳見 :pep:`628`。）"

#: ../../whatsnew/3.6.rst:914
#, fuzzy
msgid ""
"New constants: :const:`cmath.inf` and :const:`cmath.nan` to match :const:"
"`math.inf` and :const:`math.nan`, and also :const:`cmath.infj` and :const:"
"`cmath.nanj` to match the format used by complex repr. (Contributed by Mark "
"Dickinson in :issue:`23229`.)"
msgstr ""
"新常數 :const:`cmath.inf` 和 :const:`cmath.nan` 以匹配 :const:`math.inf` 和 :"
"const:`math.nan`，以及 :const:`cmath.infj`和 :const:`cmath.nanj` 以匹配複雜 "
"repr 使用的格式。 （由 Mark Dickinson 在 :issue:`23229` 中貢獻。）"

#: ../../whatsnew/3.6.rst:921
msgid "collections"
msgstr "collections"

#: ../../whatsnew/3.6.rst:923
#, fuzzy
msgid ""
"The new :class:`~collections.abc.Collection` abstract base class has been "
"added to represent sized iterable container classes. (Contributed by Ivan "
"Levkivskyi, docs by Neil Girdhar in :issue:`27598`.)"
msgstr ""
"新增了新的 :class:`~collections.abc.Collection` 抽象基底類別來表示大小可疊代"
"的容器類。 （由 Ivan Levkivskyi 貢獻，Neil Girdhar 在 :issue:`27598` 中的文"
"檔。）"

#: ../../whatsnew/3.6.rst:927
#, fuzzy
msgid ""
"The new :class:`~collections.abc.Reversible` abstract base class represents "
"iterable classes that also provide the :meth:`__reversed__` method. "
"(Contributed by Ivan Levkivskyi in :issue:`25987`.)"
msgstr ""
"新的 :class:`~collections.abc.Reversible` 抽象基底類別表示也提供 :meth:"
"`__reversed__` 方法的可疊代類。 （由 Ivan Levkivskyi 在 :issue:`25987` 中貢"
"獻。）"

#: ../../whatsnew/3.6.rst:931
#, fuzzy
msgid ""
"The new :class:`~collections.abc.AsyncGenerator` abstract base class "
"represents asynchronous generators. (Contributed by Yury Selivanov in :issue:"
"`28720`.)"
msgstr ""
"新的 :class:`~collections.abc.AsyncGenerator` 抽象基底類別表示非同步生成器。 "
"（由 Yury Selivanov 在 :issue:`28720` 中貢獻。）"

#: ../../whatsnew/3.6.rst:935
#, fuzzy
msgid ""
"The :func:`~collections.namedtuple` function now accepts an optional keyword "
"argument *module*, which, when specified, is used for the ``__module__`` "
"attribute of the returned named tuple class. (Contributed by Raymond "
"Hettinger in :issue:`17941`.)"
msgstr ""
":func:`~collections.namedtuple` 函式現在接受一個可選的關鍵字參數 *module*，當"
"指定時，它用於回傳的命名元組類的 ``__module__`` 屬性。 （由 Raymond "
"Hettinger 在 :issue:`17941` 中貢獻。）"

#: ../../whatsnew/3.6.rst:940 ../../whatsnew/3.6.rst:2281
#, fuzzy
msgid ""
"The *verbose* and *rename* arguments for :func:`~collections.namedtuple` are "
"now keyword-only. (Contributed by Raymond Hettinger in :issue:`25628`.)"
msgstr ""
":func:`~collections.namedtuple` 的 *verbose* 和 *rename* 參數現在僅包含關鍵"
"字。 （由 Raymond Hettinger 在 :issue:`25628` 中貢獻。）"

#: ../../whatsnew/3.6.rst:944
#, fuzzy
msgid ""
"Recursive :class:`collections.deque` instances can now be pickled. "
"(Contributed by Serhiy Storchaka in :issue:`26482`.)"
msgstr ""
"遞迴 :class:`collections.deque` 實例現在可以被醃製。 （由 Serhiy Storchaka "
"在 :issue:`26482` 中貢獻。）"

#: ../../whatsnew/3.6.rst:949
msgid "concurrent.futures"
msgstr "concurrent.futures"

#: ../../whatsnew/3.6.rst:951
#, fuzzy
msgid ""
"The :class:`ThreadPoolExecutor <concurrent.futures.ThreadPoolExecutor>` "
"class constructor now accepts an optional *thread_name_prefix* argument to "
"make it possible to customize the names of the threads created by the pool. "
"(Contributed by Gregory P. Smith in :issue:`27664`.)"
msgstr ""
":class:`ThreadPoolExecutor <concurrent.futures.ThreadPoolExecutor>` 類構造函"
"式現在接受一個可選的 *thread_name_prefix* 參數，以便自定義池建立的執行緒的名"
"稱。 （由 Gregory P. Smith 在 :issue:`27664` 中貢獻。）"

#: ../../whatsnew/3.6.rst:959
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.6.rst:961
#, fuzzy
msgid ""
"The :class:`contextlib.AbstractContextManager` class has been added to "
"provide an abstract base class for context managers.  It provides a sensible "
"default implementation for ``__enter__()`` which returns ``self`` and leaves "
"``__exit__()`` an abstract method.  A matching class has been added to the :"
"mod:`typing` module as :class:`typing.ContextManager`. (Contributed by Brett "
"Cannon in :issue:`25609`.)"
msgstr ""
"新增了 :class:`contextlib.AbstractContextManager` 類以為上下文管理器提供抽象"
"基底類別。它為 ``__enter__()`` 提供了一個合理的預設實作，它回傳 ``self`` 並留"
"下 ``__exit__()`` 一個抽象方法。匹配類已新增到 :mod:`typing` 模組作為 :class:"
"`typing.ContextManager`。 （由 Brett Cannon 在 :issue:`25609` 中貢獻。）"

#: ../../whatsnew/3.6.rst:971
msgid "datetime"
msgstr "datetime"

#: ../../whatsnew/3.6.rst:973
#, fuzzy
msgid ""
"The :class:`~datetime.datetime` and :class:`~datetime.time` classes have the "
"new :attr:`~time.fold` attribute used to disambiguate local time when "
"necessary.  Many functions in the :mod:`datetime` have been updated to "
"support local time disambiguation. See :ref:`Local Time Disambiguation "
"<whatsnew36-pep495>` section for more information. (Contributed by Alexander "
"Belopolsky in :issue:`24773`.)"
msgstr ""
":class:`~datetime.datetime` 和 :class:`~datetime.time` 類具有新的 :attr:"
"`~time.fold` 屬性，用於在必要時消除當地時間歧義。 :mod:`datetime` 中的許多函"
"式已更新以支援本地時間消歧。有關詳細資訊，請參閱 :ref:`本地時間消歧 "
"<whatsnew36-pep495>` 部分。 （由 Alexander Belopolsky 在 :issue:`24773` 中貢"
"獻。）"

#: ../../whatsnew/3.6.rst:981
#, fuzzy
msgid ""
"The :meth:`datetime.strftime() <datetime.datetime.strftime>` and :meth:`date."
"strftime() <datetime.date.strftime>` methods now support ISO 8601 date "
"directives ``%G``, ``%u`` and ``%V``. (Contributed by Ashley Anderson in :"
"issue:`12006`.)"
msgstr ""
":meth:`datetime.strftime() <datetime.datetime.strftime>` 和 :meth:`date."
"strftime() <datetime.date.strftime>` 方法現在支援 ISO 8601 日期指令 ``%G``， "
"``%u`` 和 ``%V``。 （由 Ashley Anderson 在 :issue:`12006` 中貢獻。）"

#: ../../whatsnew/3.6.rst:986
#, fuzzy
msgid ""
"The :func:`datetime.isoformat() <datetime.datetime.isoformat>` function now "
"accepts an optional *timespec* argument that specifies the number of "
"additional components of the time value to include. (Contributed by "
"Alessandro Cucci and Alexander Belopolsky in :issue:`19475`.)"
msgstr ""
":func:`datetime.isoformat() <datetime.datetime.isoformat>` 函式現在接受一個可"
"選的 *timespec* 參數，該參數指定要包含的時間值的附加組件的數量。 （由 "
"Alessandro Cucci 和 Alexander Belopolsky 在 :issue:`19475` 中貢獻。）"

#: ../../whatsnew/3.6.rst:991
#, fuzzy
msgid ""
"The :meth:`datetime.combine() <datetime.datetime.combine>` now accepts an "
"optional *tzinfo* argument. (Contributed by Alexander Belopolsky in :issue:"
"`27661`.)"
msgstr ""
":meth:`datetime.combine() <datetime.datetime.combine>` 現在接受一個可選的 "
"*tzinfo* 參數。 （由 Alexander Belopolsky 在 :issue:`27661` 中貢獻。）"

#: ../../whatsnew/3.6.rst:997
msgid "decimal"
msgstr "decimal"

#: ../../whatsnew/3.6.rst:999
#, fuzzy
msgid ""
"New :meth:`Decimal.as_integer_ratio() <decimal.Decimal.as_integer_ratio>` "
"method that returns a pair ``(n, d)`` of integers that represent the given :"
"class:`~decimal.Decimal` instance as a fraction, in lowest terms and with a "
"positive denominator::"
msgstr ""
"新 :meth:`Decimal.as_integer_ratio() <decimal.Decimal.as_integer_ratio>` 方法"
"回傳一對整數表示給定的 :class:`~decimal.Decimal` 實例作為分數，用最低的術語和"
"正分母::"

#: ../../whatsnew/3.6.rst:1007
#, fuzzy
msgid "(Contributed by Stefan Krah amd Mark Dickinson in :issue:`25928`.)"
msgstr "（由 Stefan Krah 和 Mark Dickinson 在 :issue:`25928` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1012 ../../whatsnew/3.6.rst:1986
msgid "distutils"
msgstr "distutils"

#: ../../whatsnew/3.6.rst:1014
#, fuzzy
msgid ""
"The ``default_format`` attribute has been removed from :class:`distutils."
"command.sdist.sdist` and the ``formats`` attribute defaults to "
"``['gztar']``. Although not anticipated, any code relying on the presence of "
"``default_format`` may need to be adapted. See :issue:`27819` for more "
"details."
msgstr ""
"``default_format`` 屬性已從 distutils.command.sdist.sdist` 中刪除，"
"``formats`` 屬性預設為 ``['gztar']``。儘管沒有預料到，但任何依賴"
"於“default_format”存在的程式碼都可能需要進行調整。有關詳細資訊，請參閱 :"
"issue:`27819`。"

#: ../../whatsnew/3.6.rst:1022
msgid "email"
msgstr "email"

#: ../../whatsnew/3.6.rst:1024
#, fuzzy
msgid ""
"The new email API, enabled via the *policy* keyword to various constructors, "
"is no longer provisional.  The :mod:`email` documentation has been "
"reorganized and rewritten to focus on the new API, while retaining the old "
"documentation for the legacy API.  (Contributed by R. David Murray in :issue:"
"`24277`.)"
msgstr ""
"新的電子郵件 API，通過對各種構造函式的 *policy* 關鍵字啟用，不再是臨時的。 :"
"mod:`email` 文檔已經過重組和重寫，以專注於新 API，同時保留舊 API 的舊文檔。 "
"（由 R. David Murray 在 :issue:`24277` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1029
#, fuzzy
msgid ""
"The :mod:`email.mime` classes now all accept an optional *policy* keyword. "
"(Contributed by Berker Peksag in :issue:`27331`.)"
msgstr ""
":mod:`email.mime` 類現在都接受可選的 *policy* 關鍵字。 （由 Berker Peksag "
"在 :issue:`27331` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1032
#, fuzzy
msgid ""
"The :class:`~email.generator.DecodedGenerator` now supports the *policy* "
"keyword."
msgstr ":class:`~email.generator.DecodedGenerator` 現在支援 *policy* 關鍵字。"

#: ../../whatsnew/3.6.rst:1035
#, fuzzy
msgid ""
"There is a new :mod:`~email.policy` attribute, :attr:`~email.policy.Policy."
"message_factory`, that controls what class is used by default when the "
"parser creates new message objects.  For the :attr:`email.policy.compat32` "
"policy this is :class:`~email.message.Message`, for the new policies it is :"
"class:`~email.message.EmailMessage`. (Contributed by R. David Murray in :"
"issue:`20476`.)"
msgstr ""
"有一個新的 :mod:`~email.policy` 屬性 :attr:`~email.policy.Policy."
"message_factory`，它控制解析器建立新消息物件時預設使用的類。對於 :attr:"
"`email.policy.compat32` 策略，這是 :class:`~email.message.Message`，對於新策"
"略，它是 :class:`~email.message.EmailMessage`。 （由 R. David Murray 在 :"
"issue:`20476` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1044
msgid "encodings"
msgstr "encodings"

#: ../../whatsnew/3.6.rst:1046
#, fuzzy
msgid ""
"On Windows, added the ``'oem'`` encoding to use ``CP_OEMCP``, and the "
"``'ansi'`` alias for the existing ``'mbcs'`` encoding, which uses the "
"``CP_ACP`` code page. (Contributed by Steve Dower in :issue:`27959`.)"
msgstr ""
"在 Windows 上，新增了 ``'oem'``編碼以使用 ``CP_OEMCP``，以及現有 ``'mbcs'`` "
"編碼的 ``'ansi'``別名，它使用``CP_ACP`` 程式碼頁。 （由 Steve Dower 在 :"
"issue:`27959` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1052
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.6.rst:1054
#, fuzzy
msgid ""
"Two new enumeration base classes have been added to the :mod:`enum` module: :"
"class:`~enum.Flag` and :class:`~enum.IntFlags`.  Both are used to define "
"constants that can be combined using the bitwise operators. (Contributed by "
"Ethan Furman in :issue:`23591`.)"
msgstr ""
"兩個新的枚舉基底類別已新增到 :mod:`enum` 模組：:class:`~enum.Flag` 和 :class:"
"`~enum.IntFlags`。兩者都用於定義可以使用按位運算符組合的常數。 （由 Ethan "
"Furman 在 :issue:`23591` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1059
#, fuzzy
msgid ""
"Many standard library modules have been updated to use the :class:`~enum."
"IntFlags` class for their constants."
msgstr "許多標準庫模組已更新為使用 :class:`~enum.IntFlags` 類作為它們的常數。"

#: ../../whatsnew/3.6.rst:1062
#, fuzzy
msgid ""
"The new :class:`enum.auto` value can be used to assign values to enum "
"members automatically::"
msgstr "新的 :class:`enum.auto` 值可用於自動為枚舉成員賦值::"

#: ../../whatsnew/3.6.rst:1076
msgid "faulthandler"
msgstr "faulthandler"

#: ../../whatsnew/3.6.rst:1078
#, fuzzy
msgid ""
"On Windows, the :mod:`faulthandler` module now installs a handler for "
"Windows exceptions: see :func:`faulthandler.enable`. (Contributed by Victor "
"Stinner in :issue:`23848`.)"
msgstr ""
"在 Windows 上，:mod:`faulthandler` 模組現在為 Windows 例外安裝一個處理程式："
"參見 :func:`faulthandler.enable`。 （由 Victor Stinner 在 :issue:`23848` 中貢"
"獻。）"

#: ../../whatsnew/3.6.rst:1084
msgid "fileinput"
msgstr "fileinput"

#: ../../whatsnew/3.6.rst:1086
#, fuzzy
msgid ""
":func:`~fileinput.hook_encoded` now supports the *errors* argument. "
"(Contributed by Joseph Hackman in :issue:`25788`.)"
msgstr ""
":func:`~fileinput.hook_encoded` 現在支援 *errors* 參數。 （由 Joseph Hackman "
"在 :issue:`25788` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1091
msgid "hashlib"
msgstr "hashlib"

#: ../../whatsnew/3.6.rst:1093
#, fuzzy
msgid ""
":mod:`hashlib` supports OpenSSL 1.1.0.  The minimum recommend version is "
"1.0.2. (Contributed by Christian Heimes in :issue:`26470`.)"
msgstr ""
":mod:`hashlib` 支援 OpenSSL 1.1.0。最低推薦版本為 1.0.2。 （由 Christian "
"Heimes 在 :issue:`26470` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1096
#, fuzzy
msgid ""
"BLAKE2 hash functions were added to the module. :func:`~hashlib.blake2b` "
"and :func:`~hashlib.blake2s` are always available and support the full "
"feature set of BLAKE2. (Contributed by Christian Heimes in :issue:`26798` "
"based on code by Dmitry Chestnykh and Samuel Neves. Documentation written by "
"Dmitry Chestnykh.)"
msgstr ""
"BLAKE2 雜湊函式已新增到模組中。 :func:`~hashlib.blake2b` 和 :func:`~hashlib."
"blake2s` 始終可用並支援 BLAKE2 的完整功能集。 （由 Christian Heimes 在 :"
"issue:`26798` 中貢獻，基於 Dmitry Chestnykh 和 Samuel Neves 的程式碼。文檔由 "
"Dmitry Chestnykh 編寫。）"

#: ../../whatsnew/3.6.rst:1102
#, fuzzy
msgid ""
"The SHA-3 hash functions :func:`~hashlib.sha3_224`, :func:`~hashlib."
"sha3_256`, :func:`~hashlib.sha3_384`, :func:`~hashlib.sha3_512`, and SHAKE "
"hash functions :func:`~hashlib.shake_128` and :func:`~hashlib.shake_256` "
"were added. (Contributed by Christian Heimes in :issue:`16113`. Keccak Code "
"Package by Guido Bertoni, Joan Daemen, Michaël Peeters, Gilles Van Assche, "
"and Ronny Van Keer.)"
msgstr ""
"SHA-3 雜湊函式 :func:`~hashlib.sha3_224`、:func:`~hashlib.sha3_256`、:func:"
"`~hashlib.sha3_384`、:func:`~hashlib.sha3_512` 和 SHAKE 雜湊函式新增了 :func:"
"`~hashlib.shake_128` 和 :func:`~hashlib.shake_256`。 （由 Christian Heimes "
"在 :issue:`16113` 中貢獻。Guido Bertoni、Joan Daemen、Michael Peeters、"
"Gilles Van Assche 和 Ronny Van Keer 的 Keccak 程式碼包。）"

#: ../../whatsnew/3.6.rst:1109
#, fuzzy
msgid ""
"The password-based key derivation function :func:`~hashlib.scrypt` is now "
"available with OpenSSL 1.1.0 and newer. (Contributed by Christian Heimes in :"
"issue:`27928`.)"
msgstr ""
"基於密碼的密鑰派生函式 :func:`~hashlib.scrypt` 現在可用於 OpenSSL 1.1.0 及更"
"新版本。 （由 Christian Heimes 在 :issue:`27928` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1114
msgid "http.client"
msgstr "http.client"

#: ../../whatsnew/3.6.rst:1116
#, fuzzy
msgid ""
":meth:`HTTPConnection.request() <http.client.HTTPConnection.request>` and :"
"meth:`~http.client.HTTPConnection.endheaders` both now support chunked "
"encoding request bodies. (Contributed by Demian Brecht and Rolf Krahl in :"
"issue:`12319`.)"
msgstr ""
":meth:`HTTPConnection.request() <http.client.HTTPConnection.request>` 和 :"
"meth:`~http.client.HTTPConnection.endheaders` 現在都支援分塊編碼請求主體。 "
"（由 Demian Brecht 和 Rolf Krahl 在 :issue:`12319` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1123
#, fuzzy
msgid "idlelib and IDLE"
msgstr "空閒庫和空閒"

#: ../../whatsnew/3.6.rst:1125
#, fuzzy
msgid ""
"The idlelib package is being modernized and refactored to make IDLE look and "
"work better and to make the code easier to understand, test, and improve. "
"Part of making IDLE look better, especially on Linux and Mac, is using ttk "
"widgets, mostly in the dialogs.  As a result, IDLE no longer runs with tcl/"
"tk 8.4.  It now requires tcl/tk 8.5 or 8.6.  We recommend running the latest "
"release of either."
msgstr ""
"idlelib 包正在進行現代化和重構，以使 IDLE 看起來和工作得更好，並使程式碼更易"
"於理解、測試和改進。使 IDLE 看起來更好的一部分，尤其是在 Linux 和 Mac 上，是"
"使用 ttk 小部件，主要是在對話框中。因此，IDLE 不再與 tcl/tk 8.4 一起運行。它"
"現在需要 tcl/tk 8.5 或 8.6。我們建議運行其中任何一個的最新版本。"

#: ../../whatsnew/3.6.rst:1132
#, fuzzy
msgid ""
"'Modernizing' includes renaming and consolidation of idlelib modules. The "
"renaming of files with partial uppercase names is similar to the renaming "
"of, for instance, Tkinter and TkFont to tkinter and tkinter.font in 3.0.  As "
"a result, imports of idlelib files that worked in 3.5 will usually not work "
"in 3.6.  At least a module name change will be needed (see idlelib/README."
"txt), sometimes more.  (Name changes contributed by Al Swiegart and Terry "
"Reedy in :issue:`24225`.  Most idlelib patches since have been and will be "
"part of the process.)"
msgstr ""
"“現代化”包括重命名和合併 idlelib 模組。重命名部分大寫名稱的文件類似於在 3.0 "
"中將 Tkinter 和 TkFont 重命名為 tkinter 和 tkinter.font。因此，在 3.5 中有效"
"的 idlelib 文件導入通常在 3.6 中無效。至少需要更改模組名稱（請參閱 idlelib/"
"README.txt），有時甚至更多。 （名稱更改由 Al Swiegart 和 Terry Reedy 在 :"
"issue:`24225` 中貢獻。大多數 idlelib 補丁已經並將成為該過程的一部分。）"

#: ../../whatsnew/3.6.rst:1141
#, fuzzy
msgid ""
"In compensation, the eventual result with be that some idlelib classes will "
"be easier to use, with better APIs and docstrings explaining them.  "
"Additional useful information will be added to idlelib when available."
msgstr ""
"作為補償，最終的結果是一些 idlelib 類將更容易使用，更好的 API 和文檔字串解釋"
"它們。其他有用的資訊將在可用時新增到 idlelib。"

#: ../../whatsnew/3.6.rst:1145
#, fuzzy
msgid "New in 3.6.2:"
msgstr "3.6.2 中的新功能："

#: ../../whatsnew/3.6.rst:1147
#, fuzzy
msgid ""
"Multiple fixes for autocompletion. (Contributed by Louie Lu in :issue:"
"`15786`.)"
msgstr "自動完成的多項修復。 （由 Louie Lu 在 :issue:`15786` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1149
#, fuzzy
msgid "New in 3.6.3:"
msgstr "3.6.3 中的新功能："

#: ../../whatsnew/3.6.rst:1151
#, fuzzy
msgid ""
"Module Browser (on the File menu, formerly called Class Browser), now "
"displays nested functions and classes in addition to top-level functions and "
"classes. (Contributed by Guilherme Polo, Cheryl Sabella, and Terry Jan Reedy "
"in :issue:`1612262`.)"
msgstr ""
"模組瀏覽器（在文件菜單上，以前稱為類瀏覽器）現在除了頂級函式和類之外還顯示嵌"
"套函式和類。 （由 Guilherme Polo、Cheryl Sabella 和 Terry Jan Reedy 在 :"
"issue:`1612262` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1157
#, fuzzy
msgid ""
"The IDLE features formerly implemented as extensions have been reimplemented "
"as normal features.  Their settings have been moved from the Extensions tab "
"to other dialog tabs. (Contributed by Charles Wohlganger and Terry Jan Reedy "
"in :issue:`27099`.)"
msgstr ""
"以前作為擴充實作的 IDLE 功能已作為普通功能重新實作。它們的設定已從“擴充”選項"
"卡移至其他對話框選項卡。 （由 Charles Wohlganger 和 Terry Jan Reedy 在 :"
"issue:`27099` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1162
#, fuzzy
msgid ""
"The Settings dialog (Options, Configure IDLE) has been partly rewritten to "
"improve both appearance and function. (Contributed by Cheryl Sabella and "
"Terry Jan Reedy in multiple issues.)"
msgstr ""
"設定對話框（選項、配置 IDLE）已部分重寫，以改進外觀和功能。 （由 Cheryl "
"Sabella 和 Terry Jan Reedy 在多期中供稿。）"

#: ../../whatsnew/3.6.rst:1166
#, fuzzy
msgid "New in 3.6.4:"
msgstr "3.6.4 中的新功能："

#: ../../whatsnew/3.6.rst:1168
#, fuzzy
msgid ""
"The font sample now includes a selection of non-Latin characters so that "
"users can better see the effect of selecting a particular font. (Contributed "
"by Terry Jan Reedy in :issue:`13802`.) The sample can be edited to include "
"other characters. (Contributed by Serhiy Storchaka in :issue:`31860`.)"
msgstr ""
"字體示例現在包括非拉丁字元的選擇，以便使用者可以更好地查看選擇特定字體的效"
"果。 （由 Terry Jan Reedy 在 :issue:`13802` 中貢獻。）可以編輯示例以包含其他"
"字元。 （由 Serhiy Storchaka 在 :issue:`31860` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1174
#, fuzzy
msgid "New in 3.6.6:"
msgstr "3.6.6 中的新功能："

#: ../../whatsnew/3.6.rst:1176
#, fuzzy
msgid ""
"Editor code context option revised.  Box displays all context lines up to "
"maxlines.  Clicking on a context line jumps the editor to that line.  "
"Context colors for custom themes is added to Highlights tab of Settings "
"dialog. (Contributed by Cheryl Sabella and Terry Jan Reedy in :issue:"
"`33642`, :issue:`33768`, and :issue:`33679`.)"
msgstr ""
"修改了編輯器程式碼上下文選項。 Box 顯示最大行數的所有上下文行。單擊上下文行會"
"將編輯器跳轉到該行。自定義主題的上下文顏色已新增到“設定”對話框的“突出顯示”選"
"項卡中。 （由 Cheryl Sabella 和 Terry Jan Reedy 在 :issue:`33642`、:issue:"
"`33768` 和 :issue:`33679` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1182
#, fuzzy
msgid ""
"On Windows, a new API call tells Windows that tk scales for DPI. On Windows "
"8.1+ or 10, with DPI compatibility properties of the Python binary "
"unchanged, and a monitor resolution greater than 96 DPI, this should make "
"text and lines sharper.  It should otherwise have no effect. (Contributed by "
"Terry Jan Reedy in :issue:`33656`.)"
msgstr ""
"在 Windows 上，一個新的 API 呼叫告訴 Windows tk 針對 DPI 進行縮放。在 "
"Windows 8.1+ 或 10 上，Python 二進位文件的 DPI 相容性屬性不變，並且顯示器分辨"
"率大於 96 DPI，這應該會使文本和線條更清晰。否則它應該沒有效果。 （由 Terry "
"Jan Reedy 在 :issue:`33656` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1188
#, fuzzy
msgid "New in 3.6.7:"
msgstr "3.6.7 中的新功能："

#: ../../whatsnew/3.6.rst:1190
#, fuzzy
msgid ""
"Output over N lines (50 by default) is squeezed down to a button. N can be "
"changed in the PyShell section of the General page of the Settings dialog.  "
"Fewer, but possibly extra long, lines can be squeezed by right clicking on "
"the output.  Squeezed output can be expanded in place by double-clicking the "
"button or into the clipboard or a separate window by right-clicking the "
"button.  (Contributed by Tal Einat in :issue:`1529353`.)"
msgstr ""
"N 行（預設為 50 行）的輸出被壓縮到一個按鈕。 N 可以在設定對話框的常規頁面的 "
"PyShell 部分中更改。通過右鍵單擊輸出可以壓縮更少但可能更長的行。壓縮的輸出可"
"以通過雙擊按鈕或右鍵單擊按鈕擴充到剪貼板或單獨的窗口中。 （由 Tal Einat 在 :"
"issue:`1529353` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1199 ../../whatsnew/3.6.rst:2003
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.6.rst:1201
#, fuzzy
msgid ""
"Import now raises the new exception :exc:`ModuleNotFoundError` (subclass of :"
"exc:`ImportError`) when it cannot find a module.  Code that current checks "
"for ``ImportError`` (in try-except) will still work. (Contributed by Eric "
"Snow in :issue:`15767`.)"
msgstr ""
"Import 現在在找不到模組時引發新例外 :exec:`ModuleNotFoundError`（:exc:"
"`ImportError` 的子類別）。當前檢查 ``ImportError`` （在 try-except 中）的程式"
"碼仍然有效。 （由 Eric Snow 在 :issue:`15767` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1206
#, fuzzy
msgid ""
":class:`importlib.util.LazyLoader` now calls :meth:`~importlib.abc.Loader."
"create_module` on the wrapped loader, removing the restriction that :class:"
"`importlib.machinery.BuiltinImporter` and :class:`importlib.machinery."
"ExtensionFileLoader` couldn't be used with :class:`importlib.util."
"LazyLoader`."
msgstr ""
":class:`importlib.util.LazyLoader` 現在在包裝加載器上呼叫 :meth:`~importlib."
"abc.Loader.create_module`，移除了 :class:`importlib.machinery."
"BuiltinImporter` 和 :class:`importlib 的限制.machinery.ExtensionFileLoader` "
"不能與 :class:`importlib.util.LazyLoader` 一起使用。"

#: ../../whatsnew/3.6.rst:1212
#, fuzzy
msgid ""
":func:`importlib.util.cache_from_source`, :func:`importlib.util."
"source_from_cache`, and :func:`importlib.util.spec_from_file_location` now "
"accept a :term:`path-like object`."
msgstr ""
":func:`importlib.util.cache_from_source`、:func:`importlib.util."
"source_from_cache` 和 :func:`importlib.util.spec_from_file_location` 現在接受"
"一個 :term:`path-like object`。"

#: ../../whatsnew/3.6.rst:1219
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.6.rst:1221
#, fuzzy
msgid ""
"The :func:`inspect.signature() <inspect.signature>` function now reports the "
"implicit ``.0`` parameters generated by the compiler for comprehension and "
"generator expression scopes as if they were positional-only parameters "
"called ``implicit0``. (Contributed by Jelle Zijlstra in :issue:`19611`.)"
msgstr ""
":func:`inspect.signature() <inspect.signature>` 函式現在報告編譯器為理解和生"
"成器表達式範圍生成的隱式 `.0`` 參數，就好像它們是名為 ``implicit0 的僅位置參"
"數一樣``。 （由 Jelle Zijlstra 在 :issue:`19611` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1226
#, fuzzy
msgid ""
"To reduce code churn when upgrading from Python 2.7 and the legacy :func:"
"`inspect.getargspec` API, the previously documented deprecation of :func:"
"`inspect.getfullargspec` has been reversed. While this function is "
"convenient for single/source Python 2/3 code bases, the richer :func:"
"`inspect.signature` interface remains the recommended approach for new code. "
"(Contributed by Nick Coghlan in :issue:`27172`)"
msgstr ""
"為了減少從 Python 2.7 和遺留的 inspect.getargspec API 升級時的程式碼改動，先"
"前記錄的 inspect.getfullargspec 棄用已被撤銷。雖然此功能對於單一/源 Python "
"2/3 程式碼庫很方便，但更豐富的 :func:`inspect.signature` 介面仍然是新程式碼的"
"推薦方法。 （由 Nick Coghlan 在 :issue:`27172` 中貢獻）"

#: ../../whatsnew/3.6.rst:1235
msgid "json"
msgstr "json"

#: ../../whatsnew/3.6.rst:1237
#, fuzzy
msgid ""
":func:`json.load` and :func:`json.loads` now support binary input.  Encoded "
"JSON should be represented using either UTF-8, UTF-16, or UTF-32. "
"(Contributed by Serhiy Storchaka in :issue:`17909`.)"
msgstr ""
":func:`json.load` 和 :func:`json.loads` 現在支援二進位輸入。編碼的 JSON 應使"
"用 UTF-8、UTF-16 或 UTF-32 表示。 （由 Serhiy Storchaka 在 :issue:`17909` 中"
"貢獻。）"

#: ../../whatsnew/3.6.rst:1243
msgid "logging"
msgstr "logging"

#: ../../whatsnew/3.6.rst:1245
#, fuzzy
msgid ""
"The new :meth:`WatchedFileHandler.reopenIfNeeded() <logging.handlers."
"WatchedFileHandler.reopenIfNeeded>` method has been added to add the ability "
"to check if the log file needs to be reopened. (Contributed by Marian Horban "
"in :issue:`24884`.)"
msgstr ""
"新增了新的 :meth:`WatchedFileHandler.reopenIfNeeded() <logging.handlers."
"WatchedFileHandler.reopenIfNeeded>` 方法以新增檢查日誌文件是否需要重新打開的"
"能力。 （由 Marian Horban 在 :issue:`24884` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1252
msgid "math"
msgstr "math"

#: ../../whatsnew/3.6.rst:1254
#, fuzzy
msgid ""
"The tau (*τ*) constant has been added to the :mod:`math` and :mod:`cmath` "
"modules. (Contributed by Lisa Roach in :issue:`12345`, see :pep:`628` for "
"details.)"
msgstr ""
"tau (*τ*) 常數已新增到 :mod:`math` 和 :mod:`cmath` 模組中。 （由 Lisa Roach "
"在 :issue:`12345` 中貢獻，詳見 :pep:`628`。）"

#: ../../whatsnew/3.6.rst:1260
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.6.rst:1262
#, fuzzy
msgid ""
":ref:`Proxy Objects <multiprocessing-proxy_objects>` returned by :func:"
"`multiprocessing.Manager` can now be nested. (Contributed by Davin Potts in :"
"issue:`6766`.)"
msgstr ""
":ref:`multiprocessing.Manager` 回傳的代理物件 <multiprocessing-"
"proxy_objects>` 現在可以嵌套。 （由 Davin Potts 在 :issue:`6766` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1268 ../../whatsnew/3.6.rst:2017
msgid "os"
msgstr "os"

#: ../../whatsnew/3.6.rst:1270
#, fuzzy
msgid ""
"See the summary of :ref:`PEP 519 <whatsnew36-pep519>` for details on how "
"the :mod:`os` and :mod:`os.path` modules now support :term:`path-like "
"objects <path-like object>`."
msgstr ""
"有關 :ref:`os` 和 :mod:`os.path` 模組現在如何支援 :term:`path-like objects "
"<path- 的詳細資訊，請參閱 PEP 519 <whatsnew36-pep519> 的摘要像物件>`。"

#: ../../whatsnew/3.6.rst:1274
#, fuzzy
msgid ":func:`~os.scandir` now supports :class:`bytes` paths on Windows."
msgstr ":func:`~os.scandir` 現在支援 Windows 上的 :class:`bytes` 路徑。"

#: ../../whatsnew/3.6.rst:1276
#, fuzzy
msgid ""
"A new :meth:`~os.scandir.close` method allows explicitly closing a :func:"
"`~os.scandir` iterator.  The :func:`~os.scandir` iterator now supports the :"
"term:`context manager` protocol.  If a :func:`scandir` iterator is neither "
"exhausted nor explicitly closed a :exc:`ResourceWarning` will be emitted in "
"its destructor. (Contributed by Serhiy Storchaka in :issue:`25994`.)"
msgstr ""
"新的 :meth:`~os.scandir.close` 方法允許顯式關閉 :func:`~os.scandir` 疊代"
"器。 :func:`~os.scandir` 疊代器現在支援 :term:`context manager` 協定。如果 :"
"func:`scandir` 疊代器既沒有耗盡也沒有明確關閉 :exec:`ResourceWarning` 將在其"
"析構函式中發出。 （由 Serhiy Storchaka 在 :issue:`25994` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1286
#, fuzzy
msgid ""
"The Linux ``getrandom()`` syscall (get random bytes) is now exposed as the "
"new :func:`os.getrandom` function. (Contributed by Victor Stinner, part of "
"the :pep:`524`)"
msgstr ""
"Linux ``getrandom()`` 系統呼叫（獲取隨機位元組）現在公開為新的 :func:`os."
"getrandom` 函式。 （由 Victor Stinner 貢獻，是 :pep:`524` 的一部分）"

#: ../../whatsnew/3.6.rst:1292
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.6.rst:1294
#, fuzzy
msgid ""
":mod:`pathlib` now supports :term:`path-like objects <path-like object>`. "
"(Contributed by Brett Cannon in :issue:`27186`.)"
msgstr ""
":mod:`pathlib` 現在支援 :term:`path-like objects <path-like object>`。 （由 "
"Brett Cannon 在 :issue:`27186` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1297
msgid "See the summary of :ref:`PEP 519 <whatsnew36-pep519>` for details."
msgstr "細節請見 :ref:`PEP 519 <whatsnew36-pep519>` 中的摘要。"

#: ../../whatsnew/3.6.rst:1301
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.6.rst:1303
#, fuzzy
msgid ""
"The :class:`~pdb.Pdb` class constructor has a new optional *readrc* argument "
"to control whether ``.pdbrc`` files should be read."
msgstr ""
":class:`~pdb.Pdb` 類構造函式有一個新的可選 *readrc* 參數來控制是否應該讀取 "
"``.pdbrc`` 文件。"

#: ../../whatsnew/3.6.rst:1308
msgid "pickle"
msgstr "pickle"

#: ../../whatsnew/3.6.rst:1310
#, fuzzy
msgid ""
"Objects that need ``__new__`` called with keyword arguments can now be "
"pickled using :ref:`pickle protocols <pickle-protocols>` older than protocol "
"version 4. Protocol version 4 already supports this case.  (Contributed by "
"Serhiy Storchaka in :issue:`24164`.)"
msgstr ""
"需要使用關鍵字參數呼叫 `__new__`` 的物件現在可以使用早於協定版本 4 的 pickle "
"協定 <pickle-protocols> 進行醃製。協定版本 4 已經支援這種情況。 （由 Serhiy "
"Storchaka 在 :issue:`24164` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1317
msgid "pickletools"
msgstr "pickletools"

#: ../../whatsnew/3.6.rst:1319
#, fuzzy
msgid ""
":func:`pickletools.dis()` now outputs the implicit memo index for the "
"``MEMOIZE`` opcode. (Contributed by Serhiy Storchaka in :issue:`25382`.)"
msgstr ""
":func:`pickletools.dis()` 現在輸出 ``MEMOIZE`` 操作碼的隱式備忘錄索引。 （由 "
"Serhiy Storchaka 在 :issue:`25382` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1325
msgid "pydoc"
msgstr "pydoc"

#: ../../whatsnew/3.6.rst:1327
#, fuzzy
msgid ""
"The :mod:`pydoc` module has learned to respect the ``MANPAGER`` environment "
"variable. (Contributed by Matthias Klose in :issue:`8637`.)"
msgstr ""
":mod:`pydoc` 模組已經學會遵守 ``MANPAGER`` 環境變數。 （由 Matthias Klose "
"在 :issue:`8637` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1331
#, fuzzy
msgid ""
":func:`help` and :mod:`pydoc` can now list named tuple fields in the order "
"they were defined rather than alphabetically. (Contributed by Raymond "
"Hettinger in :issue:`24879`.)"
msgstr ""
":func:`help` 和 :mod:`pydoc` 現在可以按照定義的順序而不是字母順序列出命名的元"
"組欄位。 （由 Raymond Hettinger 在 :issue:`24879` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1337
msgid "random"
msgstr "random"

#: ../../whatsnew/3.6.rst:1339
#, fuzzy
msgid ""
"The new :func:`~random.choices` function returns a list of elements of "
"specified size from the given population with optional weights. (Contributed "
"by Raymond Hettinger in :issue:`18844`.)"
msgstr ""
"新的 :func:`~random.choices` 函式回傳給定總體中具有可選權重的指定大小的元素列"
"表。 （由 Raymond Hettinger 在 :issue:`18844` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1345 ../../whatsnew/3.6.rst:2025
msgid "re"
msgstr "re"

#: ../../whatsnew/3.6.rst:1347
#, fuzzy
msgid ""
"Added support of modifier spans in regular expressions.  Examples: ``'(?i:"
"p)ython'`` matches ``'python'`` and ``'Python'``, but not ``'PYTHON'``; ``'(?"
"i)g(?-i:v)r'`` matches ``'GvR'`` and ``'gvr'``, but not ``'GVR'``. "
"(Contributed by Serhiy Storchaka in :issue:`433028`.)"
msgstr ""
"新增了對正則表達式中修飾符範圍的支援。示例：``'(?i:p)ython'`` 匹配"
"``'python'`` 和``'Python'``，但不匹配``'PYTHON'``； ``'(?i)g(?-i:v)r'`` 匹配"
"``'GvR'`` 和``'gvr'``，但不匹配``'GVR'``。 （由 Serhiy Storchaka 在 :issue:"
"`433028` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1352
#, fuzzy
msgid ""
"Match object groups can be accessed by ``__getitem__``, which is equivalent "
"to ``group()``.  So ``mo['name']`` is now equivalent to ``mo."
"group('name')``.  (Contributed by Eric Smith in :issue:`24454`.)"
msgstr ""
"可以通過``__getitem__`` 訪問匹配物件組，相當於``group()``。所以 "
"``mo['name']`` 現在等同於 ``mo.group('name')``。 （由 Eric Smith 在 :issue:"
"`24454` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1356
#, fuzzy
msgid ""
":class:`~re.Match` objects now support :meth:`index-like objects <object."
"__index__>` as group indices. (Contributed by Jeroen Demeyer and Xiang Zhang "
"in :issue:`27177`.)"
msgstr ""
":class:`~re.Match` 物件現在支援 :meth:`index-like objects <object."
"__index__>` 作為組索引。 （由 Jeroen Demeyer 和 Xiang Zhang 在 :issue:"
"`27177` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1363
msgid "readline"
msgstr "readline"

#: ../../whatsnew/3.6.rst:1365
#, fuzzy
msgid ""
"Added :func:`~readline.set_auto_history` to enable or disable automatic "
"addition of input to the history list.  (Contributed by Tyler Crompton in :"
"issue:`26870`.)"
msgstr ""
"新增 :func:`~readline.set_auto_history` 以啟用或禁用自動將輸入新增到歷史列"
"表。 （由 Tyler Crompton 在 :issue:`26870` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1371
msgid "rlcompleter"
msgstr "rlcompleter"

#: ../../whatsnew/3.6.rst:1373
#, fuzzy
msgid ""
"Private and special attribute names now are omitted unless the prefix starts "
"with underscores.  A space or a colon is added after some completed "
"keywords. (Contributed by Serhiy Storchaka in :issue:`25011` and :issue:"
"`25209`.)"
msgstr ""
"除非前綴以底線開頭，否則現在省略私有和特殊屬性名稱。在一些完整的關鍵字之後新"
"增一個空格或一個冒號。 （由 Serhiy Storchaka 在 :issue:`25011` 和 :issue:"
"`25209` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1379
msgid "shlex"
msgstr "shlex"

#: ../../whatsnew/3.6.rst:1381
#, fuzzy
msgid ""
"The :class:`~shlex.shlex` has much :ref:`improved shell compatibility "
"<improved-shell-compatibility>` through the new *punctuation_chars* argument "
"to control which characters are treated as punctuation. (Contributed by "
"Vinay Sajip in :issue:`1521950`.)"
msgstr ""
":class:`~shlex.shlex` 通過新的 *punctuation_chars* 參數來控制哪些字元被視為標"
"點符號，從而大大改進了 shell 相容性 <improved-shell-compatibility>`。 （由 "
"Vinay Sajip 在 :issue:`1521950` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1389
msgid "site"
msgstr "site"

#: ../../whatsnew/3.6.rst:1391
#, fuzzy
msgid ""
"When specifying paths to add to :attr:`sys.path` in a ``.pth`` file, you may "
"now specify file paths on top of directories (e.g. zip files). (Contributed "
"by Wolfgang Langner in :issue:`26587`)."
msgstr ""
"在 `.pth`` 文件中指定要新增到 :attr:`sys.path` 的路徑時，您現在可以在目錄頂部"
"指定文件路徑（例如 zip 文件）。 （由 Wolfgang Langner 在 :issue:`26587` 中貢"
"獻）。"

#: ../../whatsnew/3.6.rst:1397
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.6.rst:1399
#, fuzzy
msgid ""
":attr:`sqlite3.Cursor.lastrowid` now supports the ``REPLACE`` statement. "
"(Contributed by Alex LordThorsen in :issue:`16864`.)"
msgstr ""
":attr:`sqlite3.Cursor.lastrowid` 現在支援 ``REPLACE`` 語句。 （由 Alex "
"LordThorsen 在 :issue:`16864` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1404
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.6.rst:1406
#, fuzzy
msgid ""
"The :func:`~socket.socket.ioctl` function now supports the :data:`~socket."
"SIO_LOOPBACK_FAST_PATH` control code. (Contributed by Daniel Stokes in :"
"issue:`26536`.)"
msgstr ""
":func:`~socket.socket.ioctl` 函式現在支援 :data:`~socket."
"SIO_LOOPBACK_FAST_PATH` 控制程式碼。 （由 Daniel Stokes 在 :issue:`26536` 中"
"貢獻。）"

#: ../../whatsnew/3.6.rst:1410
#, fuzzy
msgid ""
"The :meth:`~socket.socket.getsockopt` constants ``SO_DOMAIN``, "
"``SO_PROTOCOL``, ``SO_PEERSEC``, and ``SO_PASSSEC`` are now supported. "
"(Contributed by Christian Heimes in :issue:`26907`.)"
msgstr ""
"現在支援 :meth:`~socket.socket.getsockopt` 常數 ``SO_DOMAIN``、"
"``SO_PROTOCOL``、``SO_PEERSEC`` 和 ``SO_PASSSEC``。 （由 Christian Heimes "
"在 :issue:`26907` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1414
#, fuzzy
msgid ""
"The :meth:`~socket.socket.setsockopt` now supports the ``setsockopt(level, "
"optname, None, optlen: int)`` form. (Contributed by Christian Heimes in :"
"issue:`27744`.)"
msgstr ""
":meth:`~socket.socket.setsockopt` 現在支援 ``setsockopt(level, optname, "
"None, optlen: int)`` 形式。 （由 Christian Heimes 在 :issue:`27744` 中貢"
"獻。）"

#: ../../whatsnew/3.6.rst:1418
#, fuzzy
msgid ""
"The socket module now supports the address family :data:`~socket.AF_ALG` to "
"interface with Linux Kernel crypto API. ``ALG_*``, ``SOL_ALG`` and :meth:"
"`~socket.socket.sendmsg_afalg` were added. (Contributed by Christian Heimes "
"in :issue:`27744` with support from Victor Stinner.)"
msgstr ""
" socket 模組現在支援地址族 :data:`~socket.AF_ALG` 與 Linux 內核加密 API 介"
"面。新增了``ALG_*``、``SOL_ALG`` 和 :meth:`~socket.socket.sendmsg_afalg`。 "
"（由 Christian Heimes 在 :issue:`27744` 中貢獻，並得到 Victor Stinner 的支"
"援。）"

#: ../../whatsnew/3.6.rst:1424
#, fuzzy
msgid ""
"New Linux constants ``TCP_USER_TIMEOUT`` and ``TCP_CONGESTION`` were added. "
"(Contributed by Omar Sandoval, :issue:`26273`)."
msgstr ""
"新增了新的 Linux 常數“TCP_USER_TIMEOUT”和“TCP_CONGESTION”。 （由 Omar "
"Sandoval 提供，:issue:`26273`）。"

#: ../../whatsnew/3.6.rst:1429
msgid "socketserver"
msgstr "socketserver"

#: ../../whatsnew/3.6.rst:1431
#, fuzzy
msgid ""
"Servers based on the :mod:`socketserver` module, including those defined in :"
"mod:`http.server`, :mod:`xmlrpc.server` and :mod:`wsgiref.simple_server`, "
"now support the :term:`context manager` protocol. (Contributed by Aviv "
"Palivoda in :issue:`26404`.)"
msgstr ""
"基於 :mod:`socketserver` 模組的伺服器，包括那些在 :mod:`http.server`、:mod:"
"`xmlrpc.server` 和 :mod:`wsgiref.simple_server` 中定義的伺服器，現在支援 :"
"term:`上下文管理器協定。 （由 Aviv Palivoda 在 :issue:`26404` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1437
#, fuzzy
msgid ""
"The :attr:`~socketserver.StreamRequestHandler.wfile` attribute of :class:"
"`~socketserver.StreamRequestHandler` classes now implements the :class:`io."
"BufferedIOBase` writable interface.  In particular, calling :meth:`~io."
"BufferedIOBase.write` is now guaranteed to send the data in full.  "
"(Contributed by Martin Panter in :issue:`26721`.)"
msgstr ""
":class:`~socketserver.StreamRequestHandler` 類的 :attr:`~socketserver."
"StreamRequestHandler.wfile` 屬性現在實作了 :class:`io.BufferedIOBase` 可寫介"
"面。特別是，呼叫 :meth:`~io.BufferedIOBase.write` 現在可以保證發送完整的資"
"料。 （由 Martin Panter 在 :issue:`26721` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1445 ../../whatsnew/3.6.rst:2033
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.6.rst:1447
#, fuzzy
msgid ""
":mod:`ssl` supports OpenSSL 1.1.0.  The minimum recommend version is 1.0.2. "
"(Contributed by Christian Heimes in :issue:`26470`.)"
msgstr ""
":mod:`ssl` 支援 OpenSSL 1.1.0。最低推薦版本為 1.0.2。 （由 Christian Heimes "
"在 :issue:`26470` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1450
#, fuzzy
msgid ""
"3DES has been removed from the default cipher suites and ChaCha20 Poly1305 "
"cipher suites have been added. (Contributed by Christian Heimes in :issue:"
"`27850` and :issue:`27766`.)"
msgstr ""
"3DES 已從預設密碼套件中刪除，並新增了 ChaCha20 Poly1305 密碼套件。 （由 "
"Christian Heimes 在 :issue:`27850` 和 :issue:`27766` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1454
#, fuzzy
msgid ""
":class:`~ssl.SSLContext` has better default configuration for options and "
"ciphers. (Contributed by Christian Heimes in :issue:`28043`.)"
msgstr ""
":class:`~ssl.SSLContext` 具有更好的選項和密碼預設配置。 （由 Christian "
"Heimes 在 :issue:`28043` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1458
#, fuzzy
msgid ""
"SSL session can be copied from one client-side connection to another with "
"the new :class:`~ssl.SSLSession` class.  TLS session resumption can speed up "
"the initial handshake, reduce latency and improve performance (Contributed "
"by Christian Heimes in :issue:`19500` based on a draft by Alex Warhawk.)"
msgstr ""
"可以使用新的 :class:`~ssl.SSLSession` 類將 SSL 會話從一個客戶端連接複製到另一"
"個客戶端連接。 TLS 會話恢復可以加速初始握手，減少延遲並提高性能（由 "
"Christian Heimes 在 :issue:`19500` 中貢獻，基於 Alex Warhawk 的草稿。）"

#: ../../whatsnew/3.6.rst:1464
#, fuzzy
msgid ""
"The new :meth:`~ssl.SSLContext.get_ciphers` method can be used to get a list "
"of enabled ciphers in order of cipher priority."
msgstr ""
"新的 :meth:`~ssl.SSLContext.get_ciphers` 方法可用於按密碼優先級順序獲取已啟用"
"密碼的列表。"

#: ../../whatsnew/3.6.rst:1467
#, fuzzy
msgid ""
"All constants and flags have been converted to :class:`~enum.IntEnum` and :"
"class:`~enum.IntFlags`. (Contributed by Christian Heimes in :issue:`28025`.)"
msgstr ""
"所有常數和旗標都已轉換為 :class:`~enum.IntEnum` 和 :class:`~enum.IntFlags`。 "
"（由 Christian Heimes 在 :issue:`28025` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1471
#, fuzzy
msgid ""
"Server and client-side specific TLS protocols for :class:`~ssl.SSLContext` "
"were added. (Contributed by Christian Heimes in :issue:`28085`.)"
msgstr ""
"新增了伺服器和客戶端特定於 :class:`~ssl.SSLContext` 的 TLS 協定。 （由 "
"Christian Heimes 在 :issue:`28085` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1477
msgid "statistics"
msgstr "statistics"

#: ../../whatsnew/3.6.rst:1479
#, fuzzy
msgid ""
"A new :func:`~statistics.harmonic_mean` function has been added. "
"(Contributed by Steven D'Aprano in :issue:`27181`.)"
msgstr ""
"新增了一個新的 :func:`~statistics.harmonic_mean` 函式。 （由 Steven D'Aprano "
"在 :issue:`27181` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1484
msgid "struct"
msgstr "struct"

#: ../../whatsnew/3.6.rst:1486
#, fuzzy
msgid ""
":mod:`struct` now supports IEEE 754 half-precision floats via the ``'e'`` "
"format specifier. (Contributed by Eli Stevens, Mark Dickinson in :issue:"
"`11734`.)"
msgstr ""
":mod:`struct` 現在通過 ``e``格式說明符支援 IEEE 754 半精度浮點數。 （由 Eli "
"Stevens 和 Mark Dickinson 在 :issue:`11734` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1492
msgid "subprocess"
msgstr "subprocess"

#: ../../whatsnew/3.6.rst:1494
#, fuzzy
msgid ""
":class:`subprocess.Popen` destructor now emits a :exc:`ResourceWarning` "
"warning if the child process is still running. Use the context manager "
"protocol (``with proc: ...``) or explicitly call the :meth:`~subprocess."
"Popen.wait` method to read the exit status of the child process. "
"(Contributed by Victor Stinner in :issue:`26741`.)"
msgstr ""
":class:`subprocess.Popen` 析構函式現在會發出一個 :exc:`ResourceWarning` 如果"
"子行程仍在運行的警告。使用上下文管理器協定（``with proc: ...``）或顯式呼叫 :"
"meth:`~subprocess.Popen.wait` 方法來讀取子行程的退出狀態。 （由 Victor "
"Stinner 在 :issue:`26741` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1500
#, fuzzy
msgid ""
"The :class:`subprocess.Popen` constructor and all functions that pass "
"arguments through to it now accept *encoding* and *errors* arguments. "
"Specifying either of these will enable text mode for the *stdin*, *stdout* "
"and *stderr* streams. (Contributed by Steve Dower in :issue:`6135`.)"
msgstr ""
":class:`subprocess.Popen` 構造函式和所有將參數傳遞給它的函式現在接受 "
"*encoding* 和 *errors* 參數。指定其中任何一個都將為 *stdin*、*stdout* 和 "
"*stderr* 流啟用文本模式。 （由 Steve Dower 在 :issue:`6135` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1507
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.6.rst:1509
#, fuzzy
msgid ""
"The new :func:`~sys.getfilesystemencodeerrors` function returns the name of "
"the error mode used to convert between Unicode filenames and bytes "
"filenames. (Contributed by Steve Dower in :issue:`27781`.)"
msgstr ""
"新的 :func:`~sys.getfilesystemencodeerrors` 函式回傳用於在 Unicode 文件名和位"
"元組文件名之間轉換的錯誤模式的名稱。 （由 Steve Dower 在 :issue:`27781` 中貢"
"獻。）"

#: ../../whatsnew/3.6.rst:1513
#, fuzzy
msgid ""
"On Windows the return value of the :func:`~sys.getwindowsversion` function "
"now includes the *platform_version* field which contains the accurate major "
"version, minor version and build number of the current operating system, "
"rather than the version that is being emulated for the process (Contributed "
"by Steve Dower in :issue:`27932`.)"
msgstr ""
"在 Windows 上，:func:`~sys.getwindowsversion` 函式的回傳值現在包括 "
"*platform_version* 欄位，該欄位包含當前操作系統的準確主要版本、次要版本和內部"
"版本號，而不是正在模擬的版本對於這個過程（由 Steve Dower 在 :issue:`27932` 中"
"貢獻。）"

#: ../../whatsnew/3.6.rst:1521
msgid "telnetlib"
msgstr "telnetlib"

#: ../../whatsnew/3.6.rst:1523
#, fuzzy
msgid ""
":class:`~telnetlib.Telnet` is now a context manager (contributed by Stéphane "
"Wirtel in :issue:`25485`)."
msgstr ""
":class:`~telnetlib.Telnet` 現在是一個上下文管理器（由 Stéphane Wirtel 在 :"
"issue:`25485` 中貢獻）。"

#: ../../whatsnew/3.6.rst:1528
msgid "time"
msgstr "time"

#: ../../whatsnew/3.6.rst:1530
#, fuzzy
msgid ""
"The :class:`~time.struct_time` attributes :attr:`tm_gmtoff` and :attr:"
"`tm_zone` are now available on all platforms."
msgstr ""
":class:`~time.struct_time` 屬性 :attr:`tm_gmtoff` 和 :attr:`tm_zone` 現在可在"
"所有平台上使用。"

#: ../../whatsnew/3.6.rst:1535
msgid "timeit"
msgstr "timeit"

#: ../../whatsnew/3.6.rst:1537
#, fuzzy
msgid ""
"The new :meth:`Timer.autorange() <timeit.Timer.autorange>` convenience "
"method has been added to call :meth:`Timer.timeit() <timeit.Timer.timeit>` "
"repeatedly so that the total run time is greater or equal to 200 "
"milliseconds. (Contributed by Steven D'Aprano in :issue:`6422`.)"
msgstr ""
"新增了新的 :meth:`Timer.autorange() <timeit.Timer.autorange>` 便捷方法來重複"
"呼叫 :meth:`Timer.timeit() <timeit.Timer.timeit>` 以便總運行時間大於或等於 "
"200 毫秒。 （由 Steven D'Aprano 在 :issue:`6422` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1542
#, fuzzy
msgid ""
":mod:`timeit` now warns when there is substantial (4x) variance between best "
"and worst times. (Contributed by Serhiy Storchaka in :issue:`23552`.)"
msgstr ""
":mod:`timeit` 現在會在最佳時間和最壞時間之間存在顯著 (4x) 差異時發出警告。 "
"（由 Serhiy Storchaka 在 :issue:`23552` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1548 ../../whatsnew/3.6.rst:2050
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.6.rst:1550
#, fuzzy
msgid ""
"Added methods :meth:`~tkinter.Variable.trace_add`, :meth:`~tkinter.Variable."
"trace_remove` and :meth:`~tkinter.Variable.trace_info` in the :class:"
"`tkinter.Variable` class.  They replace old methods :meth:`~tkinter.Variable."
"trace_variable`, :meth:`~tkinter.Variable.trace`, :meth:`~tkinter.Variable."
"trace_vdelete` and :meth:`~tkinter.Variable.trace_vinfo` that use obsolete "
"Tcl commands and might not work in future versions of Tcl. (Contributed by "
"Serhiy Storchaka in :issue:`22115`)."
msgstr ""
"在 :class:`tkinter.Variable` 類中新增了方法 :meth:`~tkinter.Variable."
"trace_add`、:meth:`~tkinter.Variable.trace_remove` 和 :meth:`~tkinter."
"Variable.trace_info`。它們取代了舊方法 :meth:`~tkinter.Variable."
"trace_variable`、:meth:`~tkinter.Variable.trace`、:meth:`~tkinter.Variable."
"trace_vdelete` 和 :meth:`~tkinter.Variable.trace_vinfo ` 使用過時的 Tcl 命"
"令，可能在未來的 Tcl 版本中不起作用。 （由 Serhiy Storchaka 在 :issue:"
"`22115` 中貢獻）。"

#: ../../whatsnew/3.6.rst:1563
msgid "traceback"
msgstr "traceback"

#: ../../whatsnew/3.6.rst:1565
#, fuzzy
msgid ""
"Both the traceback module and the interpreter's builtin exception display "
"now abbreviate long sequences of repeated lines in tracebacks as shown in "
"the following example::"
msgstr ""
"traceback 模組和直譯器的內建例外顯示現在都縮寫了 tracebacks 中重複行的長序"
"列，如下例所示："

#: ../../whatsnew/3.6.rst:1580
#, fuzzy
msgid "(Contributed by Emanuel Barry in :issue:`26823`.)"
msgstr "（由 Emanuel Barry 在 :issue:`26823` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1584
msgid "tracemalloc"
msgstr "tracemalloc"

#: ../../whatsnew/3.6.rst:1586
#, fuzzy
msgid ""
"The :mod:`tracemalloc` module now supports tracing memory allocations in "
"multiple different address spaces."
msgstr ":mod:`tracemalloc` 模組現在支援跟踪多個不同地址空間中的記憶體分配。"

#: ../../whatsnew/3.6.rst:1589
#, fuzzy
msgid ""
"The new :class:`~tracemalloc.DomainFilter` filter class has been added to "
"filter block traces by their address space (domain)."
msgstr ""
"新增了新的 :class:`~tracemalloc.DomainFilter` 過濾器類以按地址空間（域）過濾"
"塊跟踪。"

#: ../../whatsnew/3.6.rst:1592
#, fuzzy
msgid "(Contributed by Victor Stinner in :issue:`26588`.)"
msgstr "（由 Victor Stinner 在 :issue:`26588` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1598
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.6.rst:1600
#, fuzzy
msgid ""
"Since the :mod:`typing` module is :term:`provisional <provisional API>`, all "
"changes introduced in Python 3.6 have also been backported to Python 3.5.x."
msgstr ""
"由於 :mod:`typing` 模組是 :term:`provisional <provisional API>`，Python 3.6 "
"中引入的所有更改也已反向移植到 Python 3.5.x。"

#: ../../whatsnew/3.6.rst:1604
#, fuzzy
msgid ""
"The :mod:`typing` module has a much improved support for generic type "
"aliases.  For example ``Dict[str, Tuple[S, T]]`` is now a valid type "
"annotation. (Contributed by Guido van Rossum in `Github #195 <https://github."
"com/python/typing/pull/195>`_.)"
msgstr ""
":mod:`typing` 模組對通用型別別名的支援有了很大改進。例如``Dict[str, Tuple[S, "
"T]]``現在是一個有效的型別註解。 （由 Guido van Rossum 在 `Github #195 "
"<https://github.com/python/typing/pull/195>`_ 中貢獻。）"

#: ../../whatsnew/3.6.rst:1610
#, fuzzy
msgid ""
"The :class:`typing.ContextManager` class has been added for representing :"
"class:`contextlib.AbstractContextManager`. (Contributed by Brett Cannon in :"
"issue:`25609`.)"
msgstr ""
"新增了 typing.ContextManager 類來表示 contextlib.AbstractContextManager。 "
"（由 Brett Cannon 在 :issue:`25609` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1614
#, fuzzy
msgid ""
"The :class:`typing.Collection` class has been added for representing :class:"
"`collections.abc.Collection`. (Contributed by Ivan Levkivskyi in :issue:"
"`27598`.)"
msgstr ""
"新增了 :class:`typing.Collection` 類來表示 :class:`collections.abc."
"Collection`。 （由 Ivan Levkivskyi 在 :issue:`27598` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1618
#, fuzzy
msgid ""
"The :const:`typing.ClassVar` type construct has been added to mark class "
"variables.  As introduced in :pep:`526`, a variable annotation wrapped in "
"ClassVar indicates that a given attribute is intended to be used as a class "
"variable and should not be set on instances of that class. (Contributed by "
"Ivan Levkivskyi in `Github #280 <https://github.com/python/typing/"
"pull/280>`_.)"
msgstr ""
"新增了 :const:`typing.ClassVar` 型別結構來標記類變數。正如 :pep:`526` 中所介"
"紹的，包裹在 ClassVar 中的變數註釋表示給定的屬性旨在用作類變數，不應在該類的"
"實例上設定。 （由 Ivan Levkivskyi 在 `Github #280 <https://github.com/python/"
"typing/pull/280>`_ 中貢獻。）"

#: ../../whatsnew/3.6.rst:1625
#, fuzzy
msgid ""
"A new :const:`~typing.TYPE_CHECKING` constant that is assumed to be ``True`` "
"by the static type checkers, but is ``False`` at runtime. (Contributed by "
"Guido van Rossum in `Github #230 <https://github.com/python/typing/"
"issues/230>`_.)"
msgstr ""
"一個新的 :const:`~typing.TYPE_CHECKING` 常數，它被靜態型別檢查器假定為 "
"``True``，但在運行時為 ``False``。 （由 Guido van Rossum 在 `Github #230 "
"<https://github.com/python/typing/issues/230>`_ 中貢獻。）"

#: ../../whatsnew/3.6.rst:1630
#, fuzzy
msgid ""
"A new :func:`~typing.NewType` helper function has been added to create "
"lightweight distinct types for annotations::"
msgstr ""
"新增了一個新的 :func:`~typing.NewType` 輔助函式來為註釋建立輕量級的不同型別::"

#: ../../whatsnew/3.6.rst:1638
#, fuzzy
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type.  (Contributed by Ivan Levkivskyi in `Github #189 <https://"
"github.com/python/typing/issues/189>`_.)"
msgstr ""
"靜態型別檢查器會將新型別視為原始型別的子類別。 （由 Ivan Levkivskyi 在"
"`Github #189 <https://github.com/python/typing/issues/189>`_ 中貢獻。）"

#: ../../whatsnew/3.6.rst:1644
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.6.rst:1646
#, fuzzy
msgid ""
"The :mod:`unicodedata` module now uses data from `Unicode 9.0.0 <https://"
"unicode.org/versions/Unicode9.0.0/>`_. (Contributed by Benjamin Peterson.)"
msgstr ""
":mod:`unicodedata` 模組現在使用來自 `Unicode 9.0.0 <https://unicode.org/"
"versions/Unicode9.0.0/>`_ 的資料。 （由本傑明·彼得森提供。）"

#: ../../whatsnew/3.6.rst:1652
msgid "unittest.mock"
msgstr "unittest.mock"

#: ../../whatsnew/3.6.rst:1654
#, fuzzy
msgid "The :class:`~unittest.mock.Mock` class has the following improvements:"
msgstr ":class:`~unittest.mock.Mock` 類有以下改進："

#: ../../whatsnew/3.6.rst:1656
#, fuzzy
msgid ""
"Two new methods, :meth:`Mock.assert_called() <unittest.mock.Mock."
"assert_called>` and :meth:`Mock.assert_called_once() <unittest.mock.Mock."
"assert_called_once>` to check if the mock object was called. (Contributed by "
"Amit Saha in :issue:`26323`.)"
msgstr ""
"兩個新方法，:meth:`Mock.assert_called() <unittest.mock.Mock.assert_called>` "
"和 :meth:`Mock.assert_called_once() <unittest.mock.Mock.assert_called_once>` "
"來檢查模擬對像是否是叫。 （由 Amit Saha 在 :issue:`26323` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1662
#, fuzzy
msgid ""
"The :meth:`Mock.reset_mock() <unittest.mock.Mock.reset_mock>` method now has "
"two optional keyword only arguments: *return_value* and *side_effect*. "
"(Contributed by Kushal Das in :issue:`21271`.)"
msgstr ""
":meth:`Mock.reset_mock() <unittest.mock.Mock.reset_mock>` 方法現在有兩個可選"
"的僅關鍵字參數：*return_value* 和 *side_effect*。 （由 Kushal Das 在 :issue:"
"`21271` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1669
msgid "urllib.request"
msgstr "urllib.request"

#: ../../whatsnew/3.6.rst:1671
#, fuzzy
msgid ""
"If a HTTP request has a file or iterable body (other than a bytes object) "
"but no ``Content-Length`` header, rather than throwing an error, :class:"
"`~urllib.request.AbstractHTTPHandler` now falls back to use chunked transfer "
"encoding. (Contributed by Demian Brecht and Rolf Krahl in :issue:`12319`.)"
msgstr ""
"如果 HTTP 請求有文件或可疊代主體（位元組物件除外）但沒有“Content-Length”標"
"頭，而不是拋出錯誤，:class:`~urllib.request.AbstractHTTPHandler` 現在回退到使"
"用分塊傳輸編碼。 （由 Demian Brecht 和 Rolf Krahl 在 :issue:`12319` 中貢"
"獻。）"

#: ../../whatsnew/3.6.rst:1679
msgid "urllib.robotparser"
msgstr "urllib.robotparser"

#: ../../whatsnew/3.6.rst:1681
#, fuzzy
msgid ""
":class:`~urllib.robotparser.RobotFileParser` now supports the ``Crawl-"
"delay`` and ``Request-rate`` extensions. (Contributed by Nikolay Bogoychev "
"in :issue:`16099`.)"
msgstr ""
":class:`~urllib.robotparser.RobotFileParser` 現在支援``Crawl-delay`` 和"
"``Request-rate`` 擴充。 （由 Nikolay Bogoychev 在 :issue:`16099` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1687 ../../whatsnew/3.6.rst:2058
msgid "venv"
msgstr "venv"

#: ../../whatsnew/3.6.rst:1689
#, fuzzy
msgid ""
":mod:`venv` accepts a new parameter ``--prompt``. This parameter provides an "
"alternative prefix for the virtual environment. (Proposed by Łukasz "
"Balcerzak and ported to 3.6 by Stéphane Wirtel in :issue:`22829`.)"
msgstr ""
":mod:`venv` 接受一個新參數 ``--prompt``。此參數為虛擬環境提供了替代前綴。 "
"（由 Łukasz Balcerzak 提出並由 Stéphane Wirtel 在 :issue:`22829` 移植到 "
"3.6。）"

#: ../../whatsnew/3.6.rst:1695
msgid "warnings"
msgstr "warnings"

#: ../../whatsnew/3.6.rst:1697
#, fuzzy
msgid ""
"A new optional *source* parameter has been added to the :func:`warnings."
"warn_explicit` function: the destroyed object which emitted a :exc:"
"`ResourceWarning`. A *source* attribute has also been added to :class:"
"`warnings.WarningMessage` (contributed by Victor Stinner in :issue:`26568` "
"and :issue:`26567`)."
msgstr ""
":func:`warnings.warn_explicit` 函式中新增了一個新的可選 *source* 參數：發出 "
"ResourceWarning 的銷毀物件。 *source* 屬性也已新增到 :class:`warnings."
"WarningMessage`（由 Victor Stinner 在 :issue:`26568` 和 :issue:`26567` 中貢"
"獻）。"

#: ../../whatsnew/3.6.rst:1703
#, fuzzy
msgid ""
"When a :exc:`ResourceWarning` warning is logged, the :mod:`tracemalloc` "
"module is now used to try to retrieve the traceback where the destroyed "
"object was allocated."
msgstr ""
"當記錄 :exc:`ResourceWarning` 警告時，:mod:`tracemalloc` 模組現在用於嘗試檢索"
"分配銷毀物件的回溯。"

#: ../../whatsnew/3.6.rst:1706
#, fuzzy
msgid "Example with the script ``example.py``::"
msgstr "腳本 ``example.py`` 的示例::"

#: ../../whatsnew/3.6.rst:1716
#, fuzzy
msgid "Output of the command ``python3.6 -Wd -X tracemalloc=5 example.py``::"
msgstr "命令“python3.6 -Wd -X tracemalloc=5 example.py”的輸出："

#: ../../whatsnew/3.6.rst:1726
#, fuzzy
msgid ""
"The \"Object allocated at\" traceback is new and is only displayed if :mod:"
"`tracemalloc` is tracing Python memory allocations and if the :mod:"
"`warnings` module was already imported."
msgstr ""
"“物件分配於”追溯是新的，只有在 :mod:`tracemalloc` 正在跟踪 Python 記憶體分配"
"並且 :mod:`warnings` 模組已經導入時才會顯示。"

#: ../../whatsnew/3.6.rst:1732
msgid "winreg"
msgstr "winreg"

#: ../../whatsnew/3.6.rst:1734
#, fuzzy
msgid ""
"Added the 64-bit integer type :data:`REG_QWORD <winreg.REG_QWORD>`. "
"(Contributed by Clement Rouault in :issue:`23026`.)"
msgstr ""
"新增了 64 位整數型別 :data:`REG_QWORD <winreg.REG_QWORD>`。 （由 Clement "
"Rouault 在 :issue:`23026` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1739
msgid "winsound"
msgstr "winsound"

#: ../../whatsnew/3.6.rst:1741
#, fuzzy
msgid ""
"Allowed keyword arguments to be passed to :func:`Beep <winsound.Beep>`, :"
"func:`MessageBeep <winsound.MessageBeep>`, and :func:`PlaySound <winsound."
"PlaySound>` (:issue:`27982`)."
msgstr ""
"允許將關鍵字參數傳遞給 :func:`Beep <winsound.Beep>`、:func:`MessageBeep "
"<winsound.MessageBeep>` 和 :func:`PlaySound <winsound.PlaySound>` (:issue:"
"`27982` )."

#: ../../whatsnew/3.6.rst:1747
msgid "xmlrpc.client"
msgstr "xmlrpc.client"

#: ../../whatsnew/3.6.rst:1749
#, fuzzy
msgid ""
"The :mod:`xmlrpc.client` module now supports unmarshalling additional data "
"types used by the Apache XML-RPC implementation for numerics and ``None``. "
"(Contributed by Serhiy Storchaka in :issue:`26885`.)"
msgstr ""
":mod:`xmlrpc.client` 模組現在支援解組 Apache XML-RPC 實作使用的附加資料型別，"
"用於數字和 ``None``。 （由 Serhiy Storchaka 在 :issue:`26885` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1756
msgid "zipfile"
msgstr "zipfile"

#: ../../whatsnew/3.6.rst:1758
#, fuzzy
msgid ""
"A new :meth:`ZipInfo.from_file() <zipfile.ZipInfo.from_file>` class method "
"allows making a :class:`~zipfile.ZipInfo` instance from a filesystem file. A "
"new :meth:`ZipInfo.is_dir() <zipfile.ZipInfo.is_dir>` method can be used to "
"check if the :class:`~zipfile.ZipInfo` instance represents a directory. "
"(Contributed by Thomas Kluyver in :issue:`26039`.)"
msgstr ""
"一個新的 :meth:`ZipInfo.from_file() <zipfile.ZipInfo.from_file>` 類方法允許從"
"文件系統文件建立一個 :class:`~zipfile.ZipInfo` 實例。一個新的 :meth:`ZipInfo."
"is_dir() <zipfile.ZipInfo.is_dir>` 方法可用於檢查 :class:`~zipfile.ZipInfo` "
"實例是否表示一個目錄。 （由 Thomas Kluyver 在 :issue:`26039` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1764
#, fuzzy
msgid ""
"The :meth:`ZipFile.open() <zipfile.ZipFile.open>` method can now be used to "
"write data into a ZIP file, as well as for extracting data. (Contributed by "
"Thomas Kluyver in :issue:`26039`.)"
msgstr ""
":meth:`ZipFile.open() <zipfile.ZipFile.open>` 方法現在可用於將資料寫入 ZIP 文"
"件以及提取資料。 （由 Thomas Kluyver 在 :issue:`26039` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1770
msgid "zlib"
msgstr "zlib"

#: ../../whatsnew/3.6.rst:1772
#, fuzzy
msgid ""
"The :func:`~zlib.compress` and :func:`~zlib.decompress` functions now accept "
"keyword arguments. (Contributed by Aviv Palivoda in :issue:`26243` and Xiang "
"Zhang in :issue:`16764` respectively.)"
msgstr ""
":func:`~zlib.compress` 和 :func:`~zlib.decompress` 函式現在接受關鍵字參數。 "
"（分別由 Aviv Palivoda 在 :issue:`26243` 和 Xiang Zhang 在 :issue:`16764` 中"
"貢獻。）"

#: ../../whatsnew/3.6.rst:1779
#, fuzzy
msgid "Optimizations"
msgstr "最佳化"

#: ../../whatsnew/3.6.rst:1781
#, fuzzy
msgid ""
"The Python interpreter now uses a 16-bit wordcode instead of bytecode which "
"made a number of opcode optimizations possible. (Contributed by Demur Rumed "
"with input and reviews from Serhiy Storchaka and Victor Stinner in :issue:"
"`26647` and :issue:`28050`.)"
msgstr ""
"Python 直譯器現在使用 16 位字碼而不是位元組碼，這使得許多操作碼最佳化成為可"
"能。 （由 Demur Rumed 貢獻，Serhiy Storchaka 和 Victor Stinner 在 :issue:"
"`26647` 和 :issue:`28050` 中提供輸入和評論。）"

#: ../../whatsnew/3.6.rst:1786
#, fuzzy
msgid ""
"The :class:`asyncio.Future` class now has an optimized C implementation. "
"(Contributed by Yury Selivanov and INADA Naoki in :issue:`26081`.)"
msgstr ""
":class:`asyncio.Future` 類現在有一個最佳化的 C 實作。 （由 Yury Selivanov 和 "
"INADA Naoki 在 :issue:`26081` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1789
#, fuzzy
msgid ""
"The :class:`asyncio.Task` class now has an optimized C implementation. "
"(Contributed by Yury Selivanov in :issue:`28544`.)"
msgstr ""
":class:`asyncio.Task` 類現在有一個最佳化的 C 實作。 （由 Yury Selivanov 在 :"
"issue:`28544` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1792
#, fuzzy
msgid ""
"Various implementation improvements in the :mod:`typing` module (such as "
"caching of generic types) allow up to 30 times performance improvements and "
"reduced memory footprint."
msgstr ""
":mod:`typing` 模組中的各種實作改進（例如泛型型別的快取）允許高達 30 倍的性能"
"改進和減少記憶體佔用。"

#: ../../whatsnew/3.6.rst:1796
#, fuzzy
msgid ""
"The ASCII decoder is now up to 60 times as fast for error handlers "
"``surrogateescape``, ``ignore`` and ``replace`` (Contributed by Victor "
"Stinner in :issue:`24870`)."
msgstr ""
"對於錯誤處理程式 ``surrogateescape`` 、 ``ignore``和 ``replace`` ，ASCII 解碼"
"器現在的速度提高了 60 倍（由 Victor Stinner 在 :issue: 24870 中貢獻）。"

#: ../../whatsnew/3.6.rst:1800
#, fuzzy
msgid ""
"The ASCII and the Latin1 encoders are now up to 3 times as fast for the "
"error handler ``surrogateescape`` (Contributed by Victor Stinner in :issue:"
"`25227`)."
msgstr ""
"ASCII 和 Latin1 編碼器對於錯誤處理程式 ``surrogateescape``（由 Victor "
"Stinner 在 :issue:`25227` 中貢獻）現在最多快 3 倍。"

#: ../../whatsnew/3.6.rst:1804
#, fuzzy
msgid ""
"The UTF-8 encoder is now up to 75 times as fast for error handlers "
"``ignore``, ``replace``, ``surrogateescape``, ``surrogatepass`` (Contributed "
"by Victor Stinner in :issue:`25267`)."
msgstr ""
"UTF-8 編碼器現在對於錯誤處理程式 ``ignore``、 ``replace`` 、 "
"``surrogateescape`` 、“surrogatepass”的速度提高了 75 倍（由 Victor Stinner "
"在 :issue:`25267 中貢獻`）。"

#: ../../whatsnew/3.6.rst:1808
#, fuzzy
msgid ""
"The UTF-8 decoder is now up to 15 times as fast for error handlers "
"``ignore``, ``replace`` and ``surrogateescape`` (Contributed by Victor "
"Stinner in :issue:`25301`)."
msgstr ""
"UTF-8 解碼器現在對於錯誤處理程式 ``ignore``、``replace`` 和 "
"``surrogateescape`` 的速度提高了 15 倍（由 Victor Stinner 在 :issue:`25301` "
"中貢獻）。"

#: ../../whatsnew/3.6.rst:1812
#, fuzzy
msgid ""
"``bytes % args`` is now up to 2 times faster. (Contributed by Victor Stinner "
"in :issue:`25349`)."
msgstr ""
"``bytes % args`` 現在最多快 2 倍。 （由 Victor Stinner 在 :issue:`25349` 中貢"
"獻）。"

#: ../../whatsnew/3.6.rst:1815
#, fuzzy
msgid ""
"``bytearray % args`` is now between 2.5 and 5 times faster. (Contributed by "
"Victor Stinner in :issue:`25399`)."
msgstr ""
"``bytearray % args`` 現在快了 2.5 到 5 倍。 （由 Victor Stinner 在 :issue:"
"`25399` 中貢獻）。"

#: ../../whatsnew/3.6.rst:1818
#, fuzzy
msgid ""
"Optimize :meth:`bytes.fromhex` and :meth:`bytearray.fromhex`: they are now "
"between 2x and 3.5x faster. (Contributed by Victor Stinner in :issue:"
"`25401`)."
msgstr ""
"最佳化 :meth:`bytes.fromhex` 和 :meth:`bytearray.fromhex`：它們現在的速度提高"
"了 2 到 3.5 倍。 （由 Victor Stinner 在 :issue:`25401` 中貢獻）。"

#: ../../whatsnew/3.6.rst:1821
#, fuzzy
msgid ""
"Optimize ``bytes.replace(b'', b'.')`` and ``bytearray.replace(b'', b'.')``: "
"up to 80% faster. (Contributed by Josh Snider in :issue:`26574`)."
msgstr ""
"最佳化 ``bytes.replace(b'', b'.')`` 和 ``bytearray.replace(b'', b'.')``：速度"
"提高 80%。 （由 Josh Snider 在 :issue:`26574` 中貢獻）。"

#: ../../whatsnew/3.6.rst:1824
#, fuzzy
msgid ""
"Allocator functions of the :c:func:`PyMem_Malloc` domain (:c:data:"
"`PYMEM_DOMAIN_MEM`) now use the :ref:`pymalloc memory allocator <pymalloc>` "
"instead of :c:func:`malloc` function of the C library. The pymalloc "
"allocator is optimized for objects smaller or equal to 512 bytes with a "
"short lifetime, and use :c:func:`malloc` for larger memory blocks. "
"(Contributed by Victor Stinner in :issue:`26249`)."
msgstr ""
":c:func:`PyMem_Malloc` 域 (:c:data:`PYMEM_DOMAIN_MEM`) 的分配器函式現在使用 :"
"ref:`pymalloc 記憶體分配器 <pymalloc>` 而不是 :c:func:`malloc` 函式C 庫。 "
"pymalloc 分配器針對小於或等於 512 位元組且生命週期較短的物件進行了最佳化，並"
"使用 :c:func:`malloc` 用於較大的記憶體塊。 （由 Victor Stinner 在 :issue:"
"`26249` 中貢獻）。"

#: ../../whatsnew/3.6.rst:1831
#, fuzzy
msgid ""
":func:`pickle.load` and :func:`pickle.loads` are now up to 10% faster when "
"deserializing many small objects (Contributed by Victor Stinner in :issue:"
"`27056`)."
msgstr ""
":func:`pickle.load` 和 :func:`pickle.loads` 在反序列化許多小物件時速度提高了 "
"10%（由 Victor Stinner 在 :issue:`27056` 中貢獻）。"

#: ../../whatsnew/3.6.rst:1835
#, fuzzy
msgid ""
"Passing :term:`keyword arguments <keyword argument>` to a function has an "
"overhead in comparison with passing :term:`positional arguments <positional "
"argument>`.  Now in extension functions implemented with using Argument "
"Clinic this overhead is significantly decreased. (Contributed by Serhiy "
"Storchaka in :issue:`27574`)."
msgstr ""
"與傳遞 :term:`位置參數 <positional argument>` 相比，將 :term:`keyword "
"arguments <keyword argument>` 傳遞給函式有開銷。現在，在使用 Argument Clinic "
"實作的擴充功能中，這種開銷顯著減少。 （由 Serhiy Storchaka 在 :issue:`27574` "
"中貢獻）。"

#: ../../whatsnew/3.6.rst:1841
#, fuzzy
msgid ""
"Optimized :func:`~glob.glob` and :func:`~glob.iglob` functions in the :mod:"
"`glob` module; they are now about 3--6 times faster. (Contributed by Serhiy "
"Storchaka in :issue:`25596`)."
msgstr ""
"最佳化了 :mod:`glob` 模組中的 :func:`~glob.glob` 和 :func:`~glob.iglob` 函"
"式；他們現在大約快 3--6 倍。 （由 Serhiy Storchaka 在 :issue:`25596` 中貢"
"獻）。"

#: ../../whatsnew/3.6.rst:1845
#, fuzzy
msgid ""
"Optimized globbing in :mod:`pathlib` by using :func:`os.scandir`; it is now "
"about 1.5--4 times faster. (Contributed by Serhiy Storchaka in :issue:"
"`26032`)."
msgstr ""
"通過使用 :func:`os.scandir` 在 :mod:`pathlib` 中最佳化 globbing；現在大約快 "
"1.5--4 倍。 （由 Serhiy Storchaka 在 :issue:`26032` 中貢獻）。"

#: ../../whatsnew/3.6.rst:1849
#, fuzzy
msgid ""
":class:`xml.etree.ElementTree` parsing, iteration and deepcopy performance "
"has been significantly improved. (Contributed by Serhiy Storchaka in :issue:"
"`25638`, :issue:`25873`, and :issue:`25869`.)"
msgstr ""
":class:`xml.etree.ElementTree` 解析、疊代和深度複製性能得到了顯著改善。 （由 "
"Serhiy Storchaka 在 :issue:`25638`、:issue:`25873` 和 :issue:`25869` 中貢"
"獻。）"

#: ../../whatsnew/3.6.rst:1854
#, fuzzy
msgid ""
"Creation of :class:`fractions.Fraction` instances from floats and decimals "
"is now 2 to 3 times faster. (Contributed by Serhiy Storchaka in :issue:"
"`25971`.)"
msgstr ""
"從浮點數和小數建立 :class:`fractions.Fraction` 實例現在快了 2 到 3 倍。 （由 "
"Serhiy Storchaka 在 :issue:`25971` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1860
#, fuzzy
msgid "Build and C API Changes"
msgstr "構建和 C API 更改"

#: ../../whatsnew/3.6.rst:1862
#, fuzzy
msgid ""
"Python now requires some C99 support in the toolchain to build. Most "
"notably, Python now uses standard integer types and macros in place of "
"custom macros like ``PY_LONG_LONG``. For more information, see :pep:`7` and :"
"issue:`17884`."
msgstr ""
"Python 現在需要工具鏈中的一些 C99 支援才能構建。最值得注意的是，Python 現在使"
"用標準整數型別和巨集來代替自定義巨集，如“PY_LONG_LONG”。有關詳細資訊，請參"
"閱 :pep:`7` 和 :issue:`17884`。"

#: ../../whatsnew/3.6.rst:1867
#, fuzzy
msgid ""
"Cross-compiling CPython with the Android NDK and the Android API level set "
"to 21 (Android 5.0 Lollipop) or greater runs successfully. While Android is "
"not yet a supported platform, the Python test suite runs on the Android "
"emulator with only about 16 tests failures. See the Android meta-issue :"
"issue:`26865`."
msgstr ""
"Android NDK 和 Android API 級別設定為 21 (Android 5.0 Lollipop) 或更高階別的"
"交叉編譯 CPython 成功運行。雖然 Android 還不是受支援的平台，但 Python 測試套"
"件在 Android 模擬器上運行時只有大約 16 次測試失敗。請參閱 Android 元問題 :"
"issue:`26865`。"

#: ../../whatsnew/3.6.rst:1872
#, fuzzy
msgid ""
"The ``--enable-optimizations`` configure flag has been added. Turning it on "
"will activate expensive optimizations like PGO. (Original patch by "
"Alecsandru Patrascu of Intel in :issue:`26359`.)"
msgstr ""
"新增了``--enable-optimizations`` 配置旗標。打開它會激活昂貴的最佳化，如 "
"PGO。 （英特爾的 Alecsandru Patrascu 在 :issue:`26359` 中的原始補丁。）"

#: ../../whatsnew/3.6.rst:1876
#, fuzzy
msgid ""
"The :term:`GIL <global interpreter lock>` must now be held when allocator "
"functions of :c:data:`PYMEM_DOMAIN_OBJ` (ex: :c:func:`PyObject_Malloc`) and :"
"c:data:`PYMEM_DOMAIN_MEM` (ex: :c:func:`PyMem_Malloc`) domains are called."
msgstr ""
":term:`GIL <global interpreter lock>` 現在必須在 :c:data:`PYMEM_DOMAIN_OBJ` "
"(ex: :c:func:`PyObject_Malloc`) 和 :c:data:`PYMEM_DOMAIN_MEM` ( ex: :c:func:"
"`PyMem_Malloc`) 域被呼叫。"

#: ../../whatsnew/3.6.rst:1880
#, fuzzy
msgid ""
"New :c:func:`Py_FinalizeEx` API which indicates if flushing buffered data "
"failed. (Contributed by Martin Panter in :issue:`5319`.)"
msgstr ""
"新的 :c:func:`Py_FinalizeEx` API 指示刷新緩衝資料是否失敗。 （由 Martin "
"Panter 在 :issue:`5319` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1884
#, fuzzy
msgid ""
":c:func:`PyArg_ParseTupleAndKeywords` now supports :ref:`positional-only "
"parameters <positional-only_parameter>`.  Positional-only parameters are "
"defined by empty names. (Contributed by Serhiy Storchaka in :issue:`26282`)."
msgstr ""
":c:func:`PyArg_ParseTupleAndKeywords` 現在支援 :ref:`positional-only "
"parameters <positional-only_parameter>`。僅位置參數由空名稱定義。 （由 "
"Serhiy Storchaka 在 :issue:`26282` 中貢獻）。"

#: ../../whatsnew/3.6.rst:1889
#, fuzzy
msgid ""
"``PyTraceback_Print`` method now abbreviates long sequences of repeated "
"lines as ``\"[Previous line repeated {count} more times]\"``. (Contributed "
"by Emanuel Barry in :issue:`26823`.)"
msgstr ""
"``PyTraceback_Print`` 方法現在將重複行的長序列縮寫為 ``\"[上一行重複 {count} "
"次]\"``。 （由 Emanuel Barry 在 :issue:`26823` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1893
#, fuzzy
msgid ""
"The new :c:func:`PyErr_SetImportErrorSubclass` function allows for "
"specifying a subclass of :exc:`ImportError` to raise. (Contributed by Eric "
"Snow in :issue:`15767`.)"
msgstr ""
"新的 :c:func:`PyErr_SetImportErrorSubclass` 函式允許指定要引發的 :exc:"
"`ImportError` 的子類別。 （由 Eric Snow 在 :issue:`15767` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1897
#, fuzzy
msgid ""
"The new :c:func:`PyErr_ResourceWarning` function can be used to generate a :"
"exc:`ResourceWarning` providing the source of the resource allocation. "
"(Contributed by Victor Stinner in :issue:`26567`.)"
msgstr ""
"新的 :c:func:`PyErr_ResourceWarning` 函式可用於生成一個 :exc:"
"`ResourceWarning` 提供資源分配的來源。 （由 Victor Stinner 在 :issue:`26567` "
"中貢獻。）"

#: ../../whatsnew/3.6.rst:1901
#, fuzzy
msgid ""
"The new :c:func:`PyOS_FSPath` function returns the file system "
"representation of a :term:`path-like object`. (Contributed by Brett Cannon "
"in :issue:`27186`.)"
msgstr ""
"新的 :c:func:`PyOS_FSPath` 函式回傳一個 :term:`path-like object` 的文件系統表"
"示。 （由 Brett Cannon 在 :issue:`27186` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1905
#, fuzzy
msgid ""
"The :c:func:`PyUnicode_FSConverter` and :c:func:`PyUnicode_FSDecoder` "
"functions will now accept :term:`path-like objects <path-like object>`."
msgstr ""
":c:func:`PyUnicode_FSConverter` 和 :c:func:`PyUnicode_FSDecoder` 函式現在將接"
"受 :term:`path-like objects <path-like object>`。"

#: ../../whatsnew/3.6.rst:1910
#, fuzzy
msgid "Other Improvements"
msgstr "其他改進"

#: ../../whatsnew/3.6.rst:1912
#, fuzzy
msgid ""
"When :option:`--version` (short form: :option:`-V`) is supplied twice, "
"Python prints :data:`sys.version` for detailed information."
msgstr ""
"當 :option:`--version`（縮寫：:option:`-V`）被提供兩次時，Python 印出 :data:"
"`sys.version` 以獲得詳細資訊。"

#: ../../whatsnew/3.6.rst:1923
#, fuzzy
msgid "Deprecated"
msgstr "棄用"

#: ../../whatsnew/3.6.rst:1926
msgid "New Keywords"
msgstr "新關鍵字"

#: ../../whatsnew/3.6.rst:1928
#, fuzzy
msgid ""
"``async`` and ``await`` are not recommended to be used as variable, class, "
"function or module names.  Introduced by :pep:`492` in Python 3.5, they will "
"become proper keywords in Python 3.7.  Starting in Python 3.6, the use of "
"``async`` or ``await`` as names will generate a :exc:`DeprecationWarning`."
msgstr ""
"不建議將 ``async`` 和 ``await`` 用作變數、類、函式或模組名稱。在 Python 3.5 "
"中由 :pep:`492` 引入，它們將成為 Python 3.7 中的適當關鍵字。從 Python 3.6 開"
"始，使用 ``async`` 或 ``await`` 作為名稱將生成 DeprecationWarning。"

#: ../../whatsnew/3.6.rst:1935
#, fuzzy
msgid "Deprecated Python behavior"
msgstr "棄用的 Python 行為"

#: ../../whatsnew/3.6.rst:1937
#, fuzzy
msgid ""
"Raising the :exc:`StopIteration` exception inside a generator will now "
"generate a :exc:`DeprecationWarning`, and will trigger a :exc:`RuntimeError` "
"in Python 3.7.  See :ref:`whatsnew-pep-479` for details."
msgstr ""
"在生成器中引發 :exc:`StopIteration` 例外現在將生成 :exc:"
"`DeprecationWarning`，並將在 Python 3.7 中觸發 :exc:`RuntimeError`。有關詳細"
"資訊，請參閱 :ref:`whatsnew-pep-479`。"

#: ../../whatsnew/3.6.rst:1941
#, fuzzy
msgid ""
"The :meth:`__aiter__` method is now expected to return an asynchronous "
"iterator directly instead of returning an awaitable as previously. Doing the "
"former will trigger a :exc:`DeprecationWarning`.  Backward compatibility "
"will be removed in Python 3.7. (Contributed by Yury Selivanov in :issue:"
"`27243`.)"
msgstr ""
":meth:`__aiter__` 方法現在應該直接回傳一個非同步疊代器，而不是像以前那樣回傳"
"一個可等待物件。執行前者會觸發 DeprecationWarning。 Python 3.7 中將刪除向後相"
"容性。 （由 Yury Selivanov 在 :issue:`27243` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1947
#, fuzzy
msgid ""
"A backslash-character pair that is not a valid escape sequence now generates "
"a :exc:`DeprecationWarning`.  Although this will eventually become a :exc:"
"`SyntaxError`, that will not be for several Python releases. (Contributed by "
"Emanuel Barry in :issue:`27364`.)"
msgstr ""
"不是有效轉義序列的反斜杠字元對現在會生成一個 DeprecationWarning。雖然這最終會"
"變成一個 :exc:`SyntaxError`，但這不會出現在幾個 Python 版本中。 （由 Emanuel "
"Barry 在 :issue:`27364` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1952
#, fuzzy
msgid ""
"When performing a relative import, falling back on ``__name__`` and "
"``__path__`` from the calling module when ``__spec__`` or ``__package__`` "
"are not defined now raises an :exc:`ImportWarning`. (Contributed by Rose "
"Ames in :issue:`25791`.)"
msgstr ""
"在執行相對導入時，當未定義 ``__spec__`` 或 ``__package__`` 時，從呼叫模組回退"
"到 ``__name__`` 和 ``__path__`` 現在會引發 :exc:`ImportWarning`。 （由 Rose "
"Ames 在 :issue:`25791` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1959
#, fuzzy
msgid "Deprecated Python modules, functions and methods"
msgstr "棄用的 Python 模組、函式和方法"

#: ../../whatsnew/3.6.rst:1962
msgid "asynchat"
msgstr "asynchat"

#: ../../whatsnew/3.6.rst:1964
#, fuzzy
msgid ""
"The :mod:`asynchat` has been deprecated in favor of :mod:`asyncio`. "
"(Contributed by Mariatta in :issue:`25002`.)"
msgstr ""
":mod:`asynchat` 已被棄用，取而代之的是 :mod:`asyncio`。 （由 Mariata 在 :"
"issue:`25002` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1969
msgid "asyncore"
msgstr "asyncore"

#: ../../whatsnew/3.6.rst:1971
#, fuzzy
msgid ""
"The :mod:`asyncore` has been deprecated in favor of :mod:`asyncio`. "
"(Contributed by Mariatta in :issue:`25002`.)"
msgstr ""
":mod:`asyncore` 已被棄用，取而代之的是 :mod:`asyncio`。 （由 Mariata 在 :"
"issue:`25002` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1976
msgid "dbm"
msgstr "dbm"

#: ../../whatsnew/3.6.rst:1978
#, fuzzy
msgid ""
"Unlike other :mod:`dbm` implementations, the :mod:`dbm.dumb` module creates "
"databases with the ``'rw'`` mode and allows modifying the database opened "
"with the ``'r'`` mode.  This behavior is now deprecated and will be removed "
"in 3.8. (Contributed by Serhiy Storchaka in :issue:`21708`.)"
msgstr ""
"與其他 :mod:`dbm` 實作不同，:mod:`dbm.dumb` 模組以 ``'rw'`` 模式建立資料庫，"
"並允許修改以 ``'r'`` 模式打開的資料庫。此行為現已棄用，並將在 3.8 中刪除。 "
"（由 Serhiy Storchaka 在 :issue:`21708` 中貢獻。）"

#: ../../whatsnew/3.6.rst:1988
#, fuzzy
msgid ""
"The undocumented ``extra_path`` argument to the :class:`~distutils."
"Distribution` constructor is now considered deprecated and will raise a "
"warning if set.   Support for this parameter will be removed in a future "
"Python release.  See :issue:`27919` for details."
msgstr ""
":class:`~distutils.Distribution` 構造函式的未記錄的 ``extra_path`` 參數現在被"
"認為已棄用，如果設定將發出警告。在未來的 Python 版本中將刪除對該參數的支援。"
"有關詳細資訊，請參閱 :issue:`27919`。"

#: ../../whatsnew/3.6.rst:1995
msgid "grp"
msgstr "grp"

#: ../../whatsnew/3.6.rst:1997
#, fuzzy
msgid ""
"The support of non-integer arguments in :func:`~grp.getgrgid` has been "
"deprecated. (Contributed by Serhiy Storchaka in :issue:`26129`.)"
msgstr ""
":func:`~grp.getgrgid` 中對非整數參數的支援已被棄用。 （由 Serhiy Storchaka "
"在 :issue:`26129` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2005
#, fuzzy
msgid ""
"The :meth:`importlib.machinery.SourceFileLoader.load_module` and :meth:"
"`importlib.machinery.SourcelessFileLoader.load_module` methods are now "
"deprecated. They were the only remaining implementations of :meth:`importlib."
"abc.Loader.load_module` in :mod:`importlib` that had not been deprecated in "
"previous versions of Python in favour of :meth:`importlib.abc.Loader."
"exec_module`."
msgstr ""
"importlib.machinery.SourceFileLoader.load_module 和 importlib.machinery."
"SourcelessFileLoader.load_module 方法現已棄用。它們是 importlib 中僅存的 "
"importlib.abc.Loader.load_module 實作，在以前的 Python 版本中沒有被棄用，而支"
"援 importlib.abc.Loader.exec_module `。"

#: ../../whatsnew/3.6.rst:2012
#, fuzzy
msgid ""
"The :class:`importlib.machinery.WindowsRegistryFinder` class is now "
"deprecated. As of 3.6.0, it is still added to :attr:`sys.meta_path` by "
"default (on Windows), but this may change in future releases."
msgstr ""
":class:`importlib.machinery.WindowsRegistryFinder` 類現已棄用。從 3.6.0 開"
"始，它仍然預設新增到 :attr:`sys.meta_path`（在 Windows 上），但這可能會在未來"
"的版本中改變。"

#: ../../whatsnew/3.6.rst:2019
#, fuzzy
msgid ""
"Undocumented support of general :term:`bytes-like objects <bytes-like "
"object>` as paths in :mod:`os` functions, :func:`compile` and similar "
"functions is now deprecated. (Contributed by Serhiy Storchaka in :issue:"
"`25791` and :issue:`26754`.)"
msgstr ""
"對一般 :term:`bytes-like objects <bytes-like object>` 作為 :mod:`os` 函式、:"
"func:`compile` 和類似函式中的路徑的未記錄支援現在已棄用。 （由 Serhiy "
"Storchaka 在 :issue:`25791` 和 :issue:`26754` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2027
#, fuzzy
msgid ""
"Support for inline flags ``(?letters)`` in the middle of the regular "
"expression has been deprecated and will be removed in a future Python "
"version.  Flags at the start of a regular expression are still allowed. "
"(Contributed by Serhiy Storchaka in :issue:`22493`.)"
msgstr ""
"對正則表達式中間的內聯旗標 ``(?letters)`` 的支援已被棄用，並將在未來的 "
"Python 版本中刪除。正則表達式開頭的旗標仍然允許。 （由 Serhiy Storchaka 在 :"
"issue:`22493` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2035
#, fuzzy
msgid ""
"OpenSSL 0.9.8, 1.0.0 and 1.0.1 are deprecated and no longer supported. In "
"the future the :mod:`ssl` module will require at least OpenSSL 1.0.2 or "
"1.1.0."
msgstr ""
"OpenSSL 0.9.8、1.0.0 和 1.0.1 已棄用，不再受支援。將來 :mod:`ssl` 模組將至少"
"需要 OpenSSL 1.0.2 或 1.1.0。"

#: ../../whatsnew/3.6.rst:2039
#, fuzzy
msgid ""
"SSL-related arguments like ``certfile``, ``keyfile`` and ``check_hostname`` "
"in :mod:`ftplib`, :mod:`http.client`, :mod:`imaplib`, :mod:`poplib`, and :"
"mod:`smtplib` have been deprecated in favor of ``context``. (Contributed by "
"Christian Heimes in :issue:`28022`.)"
msgstr ""
"SSL 相關參數，如 ``certfile``、``keyfile`` 和 ``check_hostname`` 在 ftplib、"
"http.client、imaplib、mod:` poplib` 和 :mod:`smtplib` 已被棄用，取而代之的是 "
"``context``。 （由 Christian Heimes 在 :issue:`28022` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2044
#, fuzzy
msgid ""
"A couple of protocols and functions of the :mod:`ssl` module are now "
"deprecated. Some features will no longer be available in future versions of "
"OpenSSL. Other features are deprecated in favor of a different API. "
"(Contributed by Christian Heimes in :issue:`28022` and :issue:`26470`.)"
msgstr ""
":mod:`ssl` 模組的一些協定和函式現已棄用。未來版本的 OpenSSL 中將不再提供某些"
"功能。其他功能已棄用，取而代之的是不同的 API。 （由 Christian Heimes 在 :"
"issue:`28022` 和 :issue:`26470` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2052
#, fuzzy
msgid ""
"The :mod:`tkinter.tix` module is now deprecated.  :mod:`tkinter` users "
"should use :mod:`tkinter.ttk` instead."
msgstr ""
":mod:`tkinter.tix` 模組現已棄用。 :mod:`tkinter` 使用者應該改用 :mod:"
"`tkinter.ttk`。"

#: ../../whatsnew/3.6.rst:2060
#, fuzzy
msgid ""
"The ``pyvenv`` script has been deprecated in favour of ``python3 -m venv``. "
"This prevents confusion as to what Python interpreter ``pyvenv`` is "
"connected to and thus what Python interpreter will be used by the virtual "
"environment.  (Contributed by Brett Cannon in :issue:`25154`.)"
msgstr ""
"``pyvenv`` 腳本已被棄用，取而代之的是 ``python3 -m venv``。這可以防止混淆 "
"Python 直譯器 ``pyvenv`` 連接到什麼以及虛擬環境將使用什麼 Python 直譯器。 "
"（由 Brett Cannon 在 :issue:`25154` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2067
#, fuzzy
msgid "Deprecated functions and types of the C API"
msgstr "C API 的棄用函式和型別"

#: ../../whatsnew/3.6.rst:2069
#, fuzzy
msgid ""
"Undocumented functions :c:func:`PyUnicode_AsEncodedObject`, :c:func:"
"`PyUnicode_AsDecodedObject`, :c:func:`PyUnicode_AsEncodedUnicode` and :c:"
"func:`PyUnicode_AsDecodedUnicode` are deprecated now. Use the :ref:`generic "
"codec based API <codec-registry>` instead."
msgstr ""
"未記錄的函式 :c:func:`PyUnicode_AsEncodedObject`、:c:func:"
"`PyUnicode_AsDecodedObject`、:c:func:`PyUnicode_AsEncodedUnicode` 和 :c:func:"
"`PyUnicode_AsDecodedUnicode` 現在已棄用。請改用 :ref:`基於通用編解碼器的 API "
"<codec-registry>`。"

#: ../../whatsnew/3.6.rst:2076
#, fuzzy
msgid "Deprecated Build Options"
msgstr "棄用的構建選項"

#: ../../whatsnew/3.6.rst:2078
#, fuzzy
msgid ""
"The ``--with-system-ffi`` configure flag is now on by default on non-macOS "
"UNIX platforms.  It may be disabled by using ``--without-system-ffi``, but "
"using the flag is deprecated and will not be accepted in Python 3.7. macOS "
"is unaffected by this change.  Note that many OS distributors already use "
"the ``--with-system-ffi`` flag when building their system Python."
msgstr ""
"``--with-system-ffi`` 配置旗標現在在非 macOS UNIX 平台上預設打開。它可以通過"
"使用 ``--without-system-ffi`` 來禁用，但使用該旗標已被棄用，並且不會在 "
"Python 3.7 中被接受。 macOS 不受此更改的影響。請注意，許多操作系統發行商在構"
"建他們的系統 Python 時已經使用了``--with-system-ffi`` 旗標。"

#: ../../whatsnew/3.6.rst:2086
#, fuzzy
msgid "Removed"
msgstr "刪除"

#: ../../whatsnew/3.6.rst:2089
#, fuzzy
msgid "API and Feature Removals"
msgstr "API 和功能刪除"

#: ../../whatsnew/3.6.rst:2091
#, fuzzy
msgid ""
"Unknown escapes consisting of ``'\\'`` and an ASCII letter in regular "
"expressions will now cause an error.  In replacement templates for :func:`re."
"sub` they are still allowed, but deprecated. The :const:`re.LOCALE` flag can "
"now only be used with binary patterns."
msgstr ""
"由 ``'\\'`` 和正則表達式中的 ASCII 字母組成的未知轉義符現在會導致錯誤。在 :"
"func:`re.sub` 的替換模板中，它們仍然被允許，但已棄用。 :const:`re.LOCALE` 旗"
"標現在只能用於二進位模式。"

#: ../../whatsnew/3.6.rst:2096
#, fuzzy
msgid ""
"``inspect.getmoduleinfo()`` was removed (was deprecated since CPython 3.3). :"
"func:`inspect.getmodulename` should be used for obtaining the module name "
"for a given path. (Contributed by Yury Selivanov in :issue:`13248`.)"
msgstr ""
"``inspect.getmoduleinfo()`` 已被刪除（自 CPython 3.3 起已棄用）。 :func:"
"`inspect.getmodulename` 應用於獲取給定路徑的模組名稱。 （由 Yury Selivanov "
"在 :issue:`13248` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2101
#, fuzzy
msgid ""
"``traceback.Ignore`` class and ``traceback.usage``, ``traceback.modname``, "
"``traceback.fullmodname``, ``traceback.find_lines_from_code``, ``traceback."
"find_lines``, ``traceback.find_strings``, ``traceback."
"find_executable_lines`` methods were removed from the :mod:`traceback` "
"module. They were undocumented methods deprecated since Python 3.2 and "
"equivalent functionality is available from private methods."
msgstr ""
"``traceback.Ignore`` 類和 ``traceback.usage``、``traceback.modname``、"
"``traceback.fullmodname``、``traceback.find_lines_from_code``、``traceback."
"find_lines``、` `traceback.find_strings``、``traceback."
"find_executable_lines`` 方法已從 :mod:`traceback` 模組中刪除。它們是自 "
"Python 3.2 以來已棄用的未記錄方法，私有方法可提供等效功能。"

#: ../../whatsnew/3.6.rst:2108
#, fuzzy
msgid ""
"The ``tk_menuBar()`` and ``tk_bindForTraversal()`` dummy methods in :mod:"
"`tkinter` widget classes were removed (corresponding Tk commands were "
"obsolete since Tk 4.0)."
msgstr ""
":mod:`tkinter` 小部件類中的``tk_menuBar()`` 和``tk_bindForTraversal()`` 虛擬"
"方法已被刪除（相應的 Tk 命令自 Tk 4.0 以來已過時）。"

#: ../../whatsnew/3.6.rst:2112
#, fuzzy
msgid ""
"The :meth:`~zipfile.ZipFile.open` method of the :class:`zipfile.ZipFile` "
"class no longer supports the ``'U'`` mode (was deprecated since Python 3.4). "
"Use :class:`io.TextIOWrapper` for reading compressed text files in :term:"
"`universal newlines` mode."
msgstr ""
":class:`zipfile.ZipFile` 類的 :meth:`~zipfile.ZipFile.open 方法不再支援 "
"``'U'`` 模式（自 Python 3.4 起已棄用）。使用 :class:`io.TextIOWrapper` 以 :"
"term:`universal newlines` 模式讀取壓縮文本文件。"

#: ../../whatsnew/3.6.rst:2117
#, fuzzy
msgid ""
"The undocumented ``IN``, ``CDROM``, ``DLFCN``, ``TYPES``, ``CDIO``, and "
"``STROPTS`` modules have been removed.  They had been available in the "
"platform specific ``Lib/plat-*/`` directories, but were chronically out of "
"date, inconsistently available across platforms, and unmaintained.  The "
"script that created these modules is still available in the source "
"distribution at `Tools/scripts/h2py.py <https://github.com/python/cpython/"
"blob/v3.6.15/Tools/scripts/h2py.py>`_."
msgstr ""
"未記錄的 ``IN``、 ``CDROM``、 ``DLFCN``、 ``TYPES``、 ``CDIO``和 ``STROPTS`` "
"模組已被刪除。它們在特定於平台的“Lib/plat-*/”目錄中可用，但長期過時，跨平台可"
"用不一致，並且無人維護。建立這些模組的腳本仍然可以在 `Tools/scripts/h2py.py "
"<https://github.com/python/cpython/blob/v3.6.15/Tools/scripts/h2py.py>` 的源"
"程式碼分發中使用_。"

#: ../../whatsnew/3.6.rst:2125
#, fuzzy
msgid "The deprecated ``asynchat.fifo`` class has been removed."
msgstr "已棄用的 ``asynchat.fifo`` 類已被刪除。"

#: ../../whatsnew/3.6.rst:2129
#, fuzzy
msgid "Porting to Python 3.6"
msgstr "移植到 Python 3.6"

#: ../../whatsnew/3.6.rst:2131
#, fuzzy
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr "本節列出了先前描述的更改和其他可能需要更改程式碼的錯誤修復。"

#: ../../whatsnew/3.6.rst:2135
#, fuzzy
msgid "Changes in 'python' Command Behavior"
msgstr " ``python``命令列為的變化"

#: ../../whatsnew/3.6.rst:2137
#, fuzzy
msgid ""
"The output of a special Python build with defined ``COUNT_ALLOCS``, "
"``SHOW_ALLOC_COUNT`` or ``SHOW_TRACK_COUNT`` macros is now off by default.  "
"It can be re-enabled using the ``-X showalloccount`` option. It now outputs "
"to ``stderr`` instead of ``stdout``. (Contributed by Serhiy Storchaka in :"
"issue:`23034`.)"
msgstr ""
"具有定義的 ``COUNT_ALLOCS``、``SHOW_ALLOC_COUNT`` 或 ``SHOW_TRACK_COUNT`` 巨"
"集的特殊 Python 構建的輸出現在預設關閉。可以使用“-X showalloccount”選項重新啟"
"用它。它現在輸出到 ``stderr`` 而不是 ``stdout``。 （由 Serhiy Storchaka 在 :"
"issue:`23034` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2145
#, fuzzy
msgid "Changes in the Python API"
msgstr "Python API 的變化"

#: ../../whatsnew/3.6.rst:2147
#, fuzzy
msgid ""
":func:`open() <open>` will no longer allow combining the ``'U'`` mode flag "
"with ``'+'``. (Contributed by Jeff Balogh and John O'Connor in :issue:"
"`2091`.)"
msgstr ""
":func:`open() <open>` 將不再允許將 ``'U'`` 模式旗標與 ``'+'`` 組合。 （由 "
"Jeff Balogh 和 John O'Connor 在 :issue:`2091` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2151
#, fuzzy
msgid ""
":mod:`sqlite3` no longer implicitly commits an open transaction before DDL "
"statements."
msgstr ":mod:`sqlite3` 不再在 DDL 語句之前隱式提交打開的事務。"

#: ../../whatsnew/3.6.rst:2154
#, fuzzy
msgid ""
"On Linux, :func:`os.urandom` now blocks until the system urandom entropy "
"pool is initialized to increase the security."
msgstr ""
"在 Linux 上，:func:`os.urandom` 現在會阻塞，直到初始化系統 urandom 熵池以提高"
"安全性。"

#: ../../whatsnew/3.6.rst:2157
#, fuzzy
msgid ""
"When :meth:`importlib.abc.Loader.exec_module` is defined, :meth:`importlib."
"abc.Loader.create_module` must also be defined."
msgstr ""
"當 :meth:`importlib.abc.Loader.exec_module` 被定義時， :meth:`importlib.abc."
"Loader.create_module` 也必須被定義。"

#: ../../whatsnew/3.6.rst:2160
#, fuzzy
msgid ""
":c:func:`PyErr_SetImportError` now sets :exc:`TypeError` when its **msg** "
"argument is not set. Previously only ``NULL`` was returned."
msgstr ""
":c:func:`PyErr_SetImportError` 現在在未設定其 **msg** 參數時設定 :exc:"
"`TypeError`。以前只回傳 ``NULL`` 。"

#: ../../whatsnew/3.6.rst:2163
#, fuzzy
msgid ""
"The format of the ``co_lnotab`` attribute of code objects changed to support "
"a negative line number delta. By default, Python does not emit bytecode with "
"a negative line number delta. Functions using ``frame.f_lineno``, "
"``PyFrame_GetLineNumber()`` or ``PyCode_Addr2Line()`` are not affected. "
"Functions directly decoding ``co_lnotab`` should be updated to use a signed "
"8-bit integer type for the line number delta, but this is only required to "
"support applications using a negative line number delta. See ``Objects/"
"lnotab_notes.txt`` for the ``co_lnotab`` format and how to decode it, and "
"see the :pep:`511` for the rationale."
msgstr ""
"程式碼物件的 ``co_lnotab`` 屬性的格式更改為支援負行號增量。預設情況下，"
"Python 不會發出帶有負行號增量的位元組碼。使用``frame.f_lineno``、"
"``PyFrame_GetLineNumber()`` 或``PyCode_Addr2Line()`` 的函式不受影響。直接解"
"碼 ``co_lnotab`` 的函式應該更新為使用帶符號的 8 位整數型別作為行號增量，但這"
"只需要支援使用負行號增量的應用程式。請參閱 ``Objects/lnotab_notes.txt`` 了解 "
"``co_lnotab`` 格式及其解碼方式，並參閱 :pep:`511` 了解基本原理。"

#: ../../whatsnew/3.6.rst:2173
#, fuzzy
msgid ""
"The functions in the :mod:`compileall` module now return booleans instead of "
"``1`` or ``0`` to represent success or failure, respectively. Thanks to "
"booleans being a subclass of integers, this should only be an issue if you "
"were doing identity checks for ``1`` or ``0``. See :issue:`25768`."
msgstr ""
":mod:`compileall` 模組中的函式現在回傳布爾值，而不是分別表示成功或失敗的 "
"``1`` 或 ``0``。由於布爾值是整數的子類別，如果您正在對 ``1`` 或 ``0`` 進行身"
"份檢查，這應該只是一個問題。請參閱 :issue:`25768`。"

#: ../../whatsnew/3.6.rst:2178
#, fuzzy
msgid ""
"Reading the :attr:`~urllib.parse.SplitResult.port` attribute of :func:"
"`urllib.parse.urlsplit` and :func:`~urllib.parse.urlparse` results now "
"raises :exc:`ValueError` for out-of-range values, rather than returning :"
"const:`None`.  See :issue:`20059`."
msgstr ""
"讀取 :func:`urllib.parse.urlsplit` 和 :func:`~urllib.parse.urlparse` 結果的 :"
"attr:`~urllib.parse.SplitResult.port` 屬性現在引發 :exc:`ValueError` for out "
"-of-range 值，而不是回傳 :const:`None`。請參閱 :issue:`20059`。"

#: ../../whatsnew/3.6.rst:2183
#, fuzzy
msgid ""
"The :mod:`imp` module now raises a :exc:`DeprecationWarning` instead of :exc:"
"`PendingDeprecationWarning`."
msgstr ""
":mod:`imp` 模組現在引發一個 :exc:`DeprecationWarning` 而不是 :exc:"
"`PendingDeprecationWarning`。"

#: ../../whatsnew/3.6.rst:2186
#, fuzzy
msgid ""
"The following modules have had missing APIs added to their :attr:`__all__` "
"attributes to match the documented APIs: :mod:`calendar`, :mod:`cgi`, :mod:"
"`csv`, :mod:`~xml.etree.ElementTree`, :mod:`enum`, :mod:`fileinput`, :mod:"
"`ftplib`, :mod:`logging`, :mod:`mailbox`, :mod:`mimetypes`, :mod:"
"`optparse`, :mod:`plistlib`, :mod:`smtpd`, :mod:`subprocess`, :mod:"
"`tarfile`, :mod:`threading` and :mod:`wave`.  This means they will export "
"new symbols when ``import *`` is used. (Contributed by Joel Taddei and Jacek "
"Kołodziej in :issue:`23883`.)"
msgstr ""
"以下模組已將缺少的 API 新增到其 :attr:`__all__` 屬性以匹配記錄的 API：:mod:"
"`calendar`、:mod:`cgi`、:mod:`csv`、:mod:`~xml .etree.ElementTree`, :mod:"
"`enum`, :mod:`fileinput`, :mod:`ftplib`, :mod:`logging`, :mod:`mailbox`, :"
"mod:`mimetypes`, :mod :`optparse`, :mod:`plistlib`, :mod:`smtpd`, :mod:"
"`subprocess`, :mod:`tarfile`, :mod:`threading` 和 :mod:`wave`。這意味著當使"
"用 ``import *`` 時它們將導出新的符號。 （由 Joel Taddei 和 Jacek Kołodziej "
"在 :issue:`23883` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2197
#, fuzzy
msgid ""
"When performing a relative import, if ``__package__`` does not compare equal "
"to ``__spec__.parent`` then :exc:`ImportWarning` is raised. (Contributed by "
"Brett Cannon in :issue:`25791`.)"
msgstr ""
"執行相對導入時，如果 ``__package__`` 不等於 ``__spec__.parent`` 則引發 "
"ImportWarning。 （由 Brett Cannon 在 :issue:`25791` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2201
#, fuzzy
msgid ""
"When a relative import is performed and no parent package is known, then :"
"exc:`ImportError` will be raised. Previously, :exc:`SystemError` could be "
"raised. (Contributed by Brett Cannon in :issue:`18018`.)"
msgstr ""
"當執行相對導入並且不知道父包時，將引發 :exc:`ImportError`。以前，可能會引發 :"
"exc:`SystemError`。 （由 Brett Cannon 在 :issue:`18018` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2205
#, fuzzy
msgid ""
"Servers based on the :mod:`socketserver` module, including those defined in :"
"mod:`http.server`, :mod:`xmlrpc.server` and :mod:`wsgiref.simple_server`, "
"now only catch exceptions derived from :exc:`Exception`. Therefore if a "
"request handler raises an exception like :exc:`SystemExit` or :exc:"
"`KeyboardInterrupt`, :meth:`~socketserver.BaseServer.handle_error` is no "
"longer called, and the exception will stop a single-threaded server. "
"(Contributed by Martin Panter in :issue:`23430`.)"
msgstr ""
"基於 :mod:`socketserver` 模組的伺服器，包括在 :mod:`http.server`、:mod:"
"`xmlrpc.server` 和 :mod:`wsgiref.simple_server` 中定義的那些，現在只捕獲來自"
"以下的例外 :exc:`例外`。因此，如果請求處理程式引發類似 :exc:`SystemExit` 或 :"
"exc:`KeyboardInterrupt` 的例外，則不再呼叫 :meth:`~socketserver.BaseServer."
"handle_error`，例外將停止單執行緒伺服器。 （由 Martin Panter 在 :issue:"
"`23430` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2214
#, fuzzy
msgid ""
":func:`spwd.getspnam` now raises a :exc:`PermissionError` instead of :exc:"
"`KeyError` if the user doesn't have privileges."
msgstr ""
":func:`spwd.getspnam` 現在在使用者沒有權限時引發 :exc:`PermissionError` 而不"
"是 :exc:`KeyError`。"

#: ../../whatsnew/3.6.rst:2217
#, fuzzy
msgid ""
"The :meth:`socket.socket.close` method now raises an exception if an error "
"(e.g. ``EBADF``) was reported by the underlying system call. (Contributed by "
"Martin Panter in :issue:`26685`.)"
msgstr ""
":meth:`socket.socket.close` 方法現在在底層系統呼叫報告錯誤（例如 ``EBADF``）"
"時引發例外。 （由 Martin Panter 在 :issue:`26685` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2221
#, fuzzy
msgid ""
"The *decode_data* argument for the :class:`smtpd.SMTPChannel` and :class:"
"`smtpd.SMTPServer` constructors is now ``False`` by default. This means that "
"the argument passed to :meth:`~smtpd.SMTPServer.process_message` is now a "
"bytes object by default, and ``process_message()`` will be passed keyword "
"arguments. Code that has already been updated in accordance with the "
"deprecation warning generated by 3.5 will not be affected."
msgstr ""
"smtpd.SMTPChannel 和 smtpd.SMTPServer 構造函式的 *decode_data* 參數現在預設"
"為 False。這意味著傳遞給 :meth:`~smtpd.SMTPServer.process_message` 的參數現在"
"預設是位元組物件，``process_message()`` 將傳遞關鍵字參數。已經根據 3.5 生成的"
"棄用警告更新的程式碼不會受到影響。"

#: ../../whatsnew/3.6.rst:2229
#, fuzzy
msgid ""
"All optional arguments of the :func:`~json.dump`, :func:`~json.dumps`, :func:"
"`~json.load` and :func:`~json.loads` functions and :class:`~json."
"JSONEncoder` and :class:`~json.JSONDecoder` class constructors in the :mod:"
"`json` module are now :ref:`keyword-only <keyword-only_parameter>`. "
"(Contributed by Serhiy Storchaka in :issue:`18726`.)"
msgstr ""
":func:`~json.dump`、:func:`~json.dumps`、:func:`~json.load` 和 :func:`~json."
"loads` 函式和 :class:` 的所有可選參數 :mod:`json` 模組中的 ~json."
"JSONEncoder` 和 :class:`~json.JSONDecoder` 類構造函式現在是 :ref:`keyword-"
"only <keyword-only_parameter>`。 （由 Serhiy Storchaka 在 :issue:`18726` 中貢"
"獻。）"

#: ../../whatsnew/3.6.rst:2236
#, fuzzy
msgid ""
"Subclasses of :class:`type` which don't override ``type.__new__`` may no "
"longer use the one-argument form to get the type of an object."
msgstr ""
"不覆蓋 type.__new__ 的 type 的子類別可能不再使用單參數形式來獲取物件的型別。"

#: ../../whatsnew/3.6.rst:2239
#, fuzzy
msgid ""
"As part of :pep:`487`, the handling of keyword arguments passed to :class:"
"`type` (other than the metaclass hint, ``metaclass``) is now consistently "
"delegated to :meth:`object.__init_subclass__`. This means that :meth:`type."
"__new__` and :meth:`type.__init__` both now accept arbitrary keyword "
"arguments, but :meth:`object.__init_subclass__` (which is called from :meth:"
"`type.__new__`) will reject them by default. Custom metaclasses accepting "
"additional keyword arguments will need to adjust their calls to :meth:`type."
"__new__` (whether direct or via :class:`super`) accordingly."
msgstr ""
"作為 :pep:`487` 的一部分，傳遞給 :class:`type` 的關鍵字參數的處理（元類提示 "
"``metaclass`` 除外）現在始終委託給 :meth:`object.__init_subclass__`。這意味"
"著 :meth:`type.__new__` 和 :meth:`type.__init__` 現在都接受任意關鍵字參數，但"
"是 :meth:`object.__init_subclass__` （從 :meth:`type.__new__` 呼叫）預設情況"
"下會拒絕它們。接受額外關鍵字參數的自定義元類需要相應地調整它們對 :meth:`type."
"__new__` 的呼叫（無論是直接呼叫還是通過 :class:`super`）。"

#: ../../whatsnew/3.6.rst:2248
#, fuzzy
msgid ""
"In :class:`distutils.command.sdist.sdist`, the ``default_format`` attribute "
"has been removed and is no longer honored. Instead, the gzipped tarfile "
"format is the default on all platforms and no platform-specific selection is "
"made. In environments where distributions are built on Windows and zip "
"distributions are required, configure the project with a ``setup.cfg`` file "
"containing the following:"
msgstr ""
"在 :class:`distutils.command.sdist.sdist` 中，``default_format`` 屬性已被刪"
"除，不再受尊重。相反，gzip 壓縮的 tarfile 格式是所有平台上的預設格式，並且沒"
"有進行特定於平台的選擇。在 Windows 上構建發行版並且需要 zip 發行版的環境中，"
"使用包含以下內容的“setup.cfg”文件配置項目："

#: ../../whatsnew/3.6.rst:2261
#, fuzzy
msgid ""
"This behavior has also been backported to earlier Python versions by "
"Setuptools 26.0.0."
msgstr "此行為也已通過 Setuptools 26.0.0 反向移植到早期的 Python 版本。"

#: ../../whatsnew/3.6.rst:2264
#, fuzzy
msgid ""
"In the :mod:`urllib.request` module and the :meth:`http.client."
"HTTPConnection.request` method, if no Content-Length header field has been "
"specified and the request body is a file object, it is now sent with HTTP "
"1.1 chunked encoding. If a file object has to be sent to a HTTP 1.0 server, "
"the Content-Length value now has to be specified by the caller. (Contributed "
"by Demian Brecht and Rolf Krahl with tweaks from Martin Panter in :issue:"
"`12319`.)"
msgstr ""
"在 :mod:`urllib.request` 模組和 :meth:`http.client.HTTPConnection.request` 方"
"法中，如果沒有指定 Content-Length 頭欄位並且請求主體是一個文件物件，現在發送"
"使用 HTTP 1.1 分塊編碼。如果必須將文件物件發送到 HTTP 1.0 伺服器，則現在必須"
"由呼叫者指定 Content-Length 值。 （由 Demian Brecht 和 Rolf Krahl 貢獻，在 :"
"issue:`12319` 中由 Martin Panter 進行調整。）"

#: ../../whatsnew/3.6.rst:2273
#, fuzzy
msgid ""
"The :class:`~csv.DictReader` now returns rows of type :class:`~collections."
"OrderedDict`. (Contributed by Steve Holden in :issue:`27842`.)"
msgstr ""
":class:`~csv.DictReader` 現在回傳型別為 :class:`~collections.OrderedDict` 的"
"行。 （由 Steve Holden 在 :issue:`27842` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2277
#, fuzzy
msgid ""
"The :const:`crypt.METHOD_CRYPT` will no longer be added to ``crypt.methods`` "
"if unsupported by the platform. (Contributed by Victor Stinner in :issue:"
"`25287`.)"
msgstr ""
"如果平台不支援，則 :const:`crypt.METHOD_CRYPT` 將不再新增到 ``crypt."
"methods`` 中。 （由 Victor Stinner 在 :issue:`25287` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2285
#, fuzzy
msgid ""
"On Linux, :func:`ctypes.util.find_library` now looks in ``LD_LIBRARY_PATH`` "
"for shared libraries. (Contributed by Vinay Sajip in :issue:`9998`.)"
msgstr ""
"在 Linux 上，:func:`ctypes.util.find_library` 現在在 ``LD_LIBRARY_PATH`` 中查"
"找共享庫。 （由 Vinay Sajip 在 :issue:`9998` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2289
#, fuzzy
msgid ""
"The :class:`imaplib.IMAP4` class now handles flags containing the ``']'`` "
"character in messages sent from the server to improve real-world "
"compatibility. (Contributed by Lita Cho in :issue:`21815`.)"
msgstr ""
":class:`imaplib.IMAP4` 類現在處理從伺服器發送的消息中包含 ``']'`` 字元的旗"
"標，以提高現實世界的相容性。 （由 Lita Cho 在 :issue:`21815` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2294
#, fuzzy
msgid ""
"The :func:`mmap.write() <mmap.write>` function now returns the number of "
"bytes written like other write methods. (Contributed by Jakub Stasiak in :"
"issue:`26335`.)"
msgstr ""
":func:`mmap.write() <mmap.write>` 函式現在像其他寫入方法一樣回傳寫入的位元組"
"數。 （由 Jakub Stasiak 在 :issue:`26335` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2298
#, fuzzy
msgid ""
"The :func:`pkgutil.iter_modules` and :func:`pkgutil.walk_packages` functions "
"now return :class:`~pkgutil.ModuleInfo` named tuples. (Contributed by "
"Ramchandra Apte in :issue:`17211`.)"
msgstr ""
":func:`pkgutil.iter_modules` 和 :func:`pkgutil.walk_packages` 函式現在回傳 :"
"class:`~pkgutil.ModuleInfo` 命名元組。 （由 Ramchandra Apte 在 :issue:"
"`17211` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2302
#, fuzzy
msgid ""
":func:`re.sub` now raises an error for invalid numerical group references in "
"replacement templates even if the pattern is not found in the string.  The "
"error message for invalid group references now includes the group index and "
"the position of the reference. (Contributed by SilentGhost, Serhiy Storchaka "
"in :issue:`25953`.)"
msgstr ""
":func:`re.sub` 現在會針對替換模板中的無效數字組引用引發錯誤，即使在字串中找不"
"到該模式也是如此。無效組引用的錯誤消息現在包括組索引和引用的位置。 （由 "
"SilentGhost、Serhiy Storchaka 在 :issue:`25953` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2308
#, fuzzy
msgid ""
":class:`zipfile.ZipFile` will now raise :exc:`NotImplementedError` for "
"unrecognized compression values.  Previously a plain :exc:`RuntimeError` was "
"raised.  Additionally, calling :class:`~zipfile.ZipFile` methods on a closed "
"ZipFile or calling the :meth:`~zipfile.ZipFile.write` method on a ZipFile "
"created with mode ``'r'`` will raise a :exc:`ValueError`. Previously, a :exc:"
"`RuntimeError` was raised in those scenarios."
msgstr ""
":class:`zipfile.ZipFile` 現在將為無法識別的壓縮值引發 :exc:"
"`NotImplementedError`。以前提出了一個普通的 :exc:`RuntimeError`。此外，在關閉"
"的 ZipFile 上呼叫 :class:`~zipfile.ZipFile` 方法或在使用模式 ``'r'`` 建立的 "
"ZipFile 上呼叫 :meth:`~zipfile.ZipFile.write` 方法將引發 :exc ：`值錯誤`。以"
"前，在這些情況下會引發 :exc:`RuntimeError`。"

#: ../../whatsnew/3.6.rst:2315
#, fuzzy
msgid ""
"when custom metaclasses are combined with zero-argument :func:`super` or "
"direct references from methods to the implicit ``__class__`` closure "
"variable, the implicit ``__classcell__`` namespace entry must now be passed "
"up to ``type.__new__`` for initialisation. Failing to do so will result in "
"a :exc:`DeprecationWarning` in Python 3.6 and a :exc:`RuntimeError` in "
"Python 3.8."
msgstr ""
"當自定義元類與零參數 :func:`super` 或從方法到隱式 `__class__`` 閉包變數的直接"
"引用組合時，隱式 `__classcell__`` 命名空間條目現在必須傳遞給 ``type. "
"__new__`` 用於初始化。如果不這樣做，將導致 Python 3.6 中的 "
"DeprecationWarning 和 Python 3.8 中的 RuntimeError。"

#: ../../whatsnew/3.6.rst:2322
#, fuzzy
msgid ""
"With the introduction of :exc:`ModuleNotFoundError`, import system consumers "
"may start expecting import system replacements to raise that more specific "
"exception when appropriate, rather than the less-specific :exc:"
"`ImportError`. To provide future compatibility with such consumers, "
"implementors of alternative import systems that completely replace :func:"
"`__import__` will need to update their implementations to raise the new "
"subclass when a module can't be found at all. Implementors of compliant "
"plugins to the default import system shouldn't need to make any changes, as "
"the default import system will raise the new subclass when appropriate."
msgstr ""
"隨著 :exc:`ModuleNotFoundError` 的引入，導入系統消費者可能會開始期待導入系統"
"替代品在適當的時候引發更具體的例外，而不是不太具體的 :exc:`ImportError`。為了"
"提供與此類消費者的未來相容性，完全替換 :func:`__import__` 的替代導入系統的實"
"作者將需要更新其實作以在根本找不到模組時引發新的子類別。預設導入系統的相容插"
"件的實作者不需要進行任何更改，因為預設導入系統會在適當的時候引發新的子類別。"

#: ../../whatsnew/3.6.rst:2334
msgid "Changes in the C API"
msgstr "C API 中的改動"

#: ../../whatsnew/3.6.rst:2336
#, fuzzy
msgid ""
"The :c:func:`PyMem_Malloc` allocator family now uses the :ref:`pymalloc "
"allocator <pymalloc>` rather than the system :c:func:`malloc`. Applications "
"calling :c:func:`PyMem_Malloc` without holding the GIL can now crash. Set "
"the :envvar:`PYTHONMALLOC` environment variable to ``debug`` to validate the "
"usage of memory allocators in your application. See :issue:`26249`."
msgstr ""
":c:func:`PyMem_Malloc` 分配器系列現在使用 :ref:`pymalloc 分配器 <pymalloc>` "
"而不是系統 :c:func:`malloc`。呼叫 :c:func:`PyMem_Malloc` 而不持有 GIL 的應用"
"程式現在可能會崩潰。將 :envvar:`PYTHONMALLOC` 環境變數設定為 ``debug`` 以驗證"
"應用程式中記憶體分配器的使用情況。請參閱 :issue:`26249`。"

#: ../../whatsnew/3.6.rst:2342
#, fuzzy
msgid ""
":c:func:`Py_Exit` (and the main interpreter) now override the exit status "
"with 120 if flushing buffered data failed.  See :issue:`5319`."
msgstr ""
"如果刷新緩衝資料失敗，:c:func:`Py_Exit`（和主直譯器）現在用 120 覆蓋退出狀"
"態。請參閱 :issue:`5319`。"

#: ../../whatsnew/3.6.rst:2347
#, fuzzy
msgid "CPython bytecode changes"
msgstr "CPython 位元組碼更改"

#: ../../whatsnew/3.6.rst:2349
#, fuzzy
msgid ""
"There have been several major changes to the :term:`bytecode` in Python 3.6."
msgstr "Python 3.6 中的 :term:`bytecode` 有幾處重大變化。"

#: ../../whatsnew/3.6.rst:2351
#, fuzzy
msgid ""
"The Python interpreter now uses a 16-bit wordcode instead of bytecode. "
"(Contributed by Demur Rumed with input and reviews from Serhiy Storchaka and "
"Victor Stinner in :issue:`26647` and :issue:`28050`.)"
msgstr ""
"Python 直譯器現在使用 16 位字碼而不是位元組碼。 （由 Demur Rumed 貢獻，"
"Serhiy Storchaka 和 Victor Stinner 在 :issue:`26647` 和 :issue:`28050` 中提供"
"輸入和評論。）"

#: ../../whatsnew/3.6.rst:2355
#, fuzzy
msgid ""
"The new :opcode:`FORMAT_VALUE` and :opcode:`BUILD_STRING` opcodes as part of "
"the  :ref:`formatted string literal <whatsnew36-pep498>` implementation. "
"(Contributed by Eric Smith in :issue:`25483` and Serhiy Storchaka in :issue:"
"`27078`.)"
msgstr ""
"新的 :opcode:`FORMAT_VALUE` 和 :opcode:`BUILD_STRING` 操作碼作為 :ref:`格式化"
"字串文字 <whatsnew36-pep498>` 實作的一部分。 （由 Eric Smith 在 :issue:"
"`25483` 和 Serhiy Storchaka 在 :issue:`27078` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2360
#, fuzzy
msgid ""
"The new :opcode:`BUILD_CONST_KEY_MAP` opcode to optimize the creation of "
"dictionaries with constant keys. (Contributed by Serhiy Storchaka in :issue:"
"`27140`.)"
msgstr ""
"新的 :opcode:`BUILD_CONST_KEY_MAP` 操作碼可最佳化使用常數鍵建立字典。 （由 "
"Serhiy Storchaka 在 :issue:`27140` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2364
#, fuzzy
msgid ""
"The function call opcodes have been heavily reworked for better performance "
"and simpler implementation. The :opcode:`MAKE_FUNCTION`, :opcode:"
"`CALL_FUNCTION`, :opcode:`CALL_FUNCTION_KW` and :opcode:"
"`BUILD_MAP_UNPACK_WITH_CALL` opcodes have been modified, the new :opcode:"
"`CALL_FUNCTION_EX` and :opcode:`BUILD_TUPLE_UNPACK_WITH_CALL` have been "
"added, and ``CALL_FUNCTION_VAR``, ``CALL_FUNCTION_VAR_KW`` and "
"``MAKE_CLOSURE`` opcodes have been removed. (Contributed by Demur Rumed in :"
"issue:`27095`, and Serhiy Storchaka in :issue:`27213`, :issue:`28257`.)"
msgstr ""
"為了更好的性能和更簡單的實作，函式呼叫操作碼已經過大量修改。修改了 "
"MAKE_FUNCTION、CALL_FUNCTION、CALL_FUNCTION_KW 和 BUILD_MAP_UNPACK_WITH_CALL "
"操作碼，新的 CALL_FUNCTION_EX 和 BUILD_TUPLE_UNPACK_WITH_CALL 操作碼已被修改"
"新增，並刪除了 ``CALL_FUNCTION_VAR``、``CALL_FUNCTION_VAR_KW`` 和 "
"``MAKE_CLOSURE`` 操作碼。 （由 Demur Rumed 在 :issue:`27095` 和 Serhiy "
"Storchaka 在 :issue:`27213` 和 :issue:`28257` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2375
#, fuzzy
msgid ""
"The new :opcode:`SETUP_ANNOTATIONS` and :opcode:`STORE_ANNOTATION` opcodes "
"have been added to support the new :term:`variable annotation` syntax. "
"(Contributed by Ivan Levkivskyi in :issue:`27985`.)"
msgstr ""
"新增了新的 :opcode:`SETUP_ANNOTATIONS` 和 :opcode:`STORE_ANNOTATION` 操作碼以"
"支援新的 :term:`variable annotation` 語法。 （由 Ivan Levkivskyi 在 :issue:"
"`27985` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2381
#, fuzzy
msgid "Notable changes in Python 3.6.2"
msgstr "Python 3.6.2 中的顯著變化"

#: ../../whatsnew/3.6.rst:2384
#, fuzzy
msgid "New ``make regen-all`` build target"
msgstr "新的“make regen-all”構建目標"

#: ../../whatsnew/3.6.rst:2386
#, fuzzy
msgid ""
"To simplify cross-compilation, and to ensure that CPython can reliably be "
"compiled without requiring an existing version of Python to already be "
"available, the autotools-based build system no longer attempts to implicitly "
"recompile generated files based on file modification times."
msgstr ""
"為了簡化交叉編譯，並確保 CPython 可以在不需要現有 Python 版本可用的情況下可靠"
"地編譯，基於 autotools 的構建系統不再嘗試根據文件修改時間隱式重新編譯生成的文"
"件。"

#: ../../whatsnew/3.6.rst:2391
#, fuzzy
msgid ""
"Instead, a new ``make regen-all`` command has been added to force "
"regeneration of these files when desired (e.g. after an initial version of "
"Python has already been built based on the pregenerated versions)."
msgstr ""
"相反，新增了一個新的“make regen-all”命令以在需要時強制重新生成這些文件（例"
"如，在基於預生成版本構建了初始版本的 Python 之後）。"

#: ../../whatsnew/3.6.rst:2395
#, fuzzy
msgid ""
"More selective regeneration targets are also defined - see :source:`Makefile."
"pre.in` for details."
msgstr ""
"還定義了更多選擇性的再生目標 - 有關詳細資訊，請參見 :source:`Makefile.pre."
"in`。"

#: ../../whatsnew/3.6.rst:2398 ../../whatsnew/3.6.rst:2411
#, fuzzy
msgid "(Contributed by Victor Stinner in :issue:`23404`.)"
msgstr "（由 Victor Stinner 在 :issue:`23404` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2404
#, fuzzy
msgid "Removal of ``make touch`` build target"
msgstr "刪除 ``make touch`` 構建目標"

#: ../../whatsnew/3.6.rst:2406
#, fuzzy
msgid ""
"The ``make touch`` build target previously used to request implicit "
"regeneration of generated files by updating their modification times has "
"been removed."
msgstr ""
"以前用於通過更新修改時間來請求生成文件的隱式重新生成的“make touch”構建目標已"
"被刪除。"

#: ../../whatsnew/3.6.rst:2409
#, fuzzy
msgid "It has been replaced by the new ``make regen-all`` target."
msgstr "它已被新的“make regen-all”目標取代。"

#: ../../whatsnew/3.6.rst:2417
#, fuzzy
msgid "Notable changes in Python 3.6.4"
msgstr "Python 3.6.4 中的顯著變化"

#: ../../whatsnew/3.6.rst:2419
#, fuzzy
msgid ""
"The ``PyExc_RecursionErrorInst`` singleton that was part of the public API "
"has been removed as its members being never cleared may cause a segfault "
"during finalization of the interpreter. (Contributed by Xavier de Gaye in :"
"issue:`22898` and :issue:`30697`.)"
msgstr ""
"作為公開 API 的一部分的 ``PyExc_RecursionErrorInst`` 單例已被刪除，因為它的成"
"員永遠不會被清除可能會在直譯器的最終確定期間導致段錯誤。 （由 Xavier de Gaye "
"在 :issue:`22898` 和 :issue:`30697` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2426
#, fuzzy
msgid "Notable changes in Python 3.6.5"
msgstr "Python 3.6.5 中的顯著變化"

#: ../../whatsnew/3.6.rst:2428
#, fuzzy
msgid ""
"The :func:`locale.localeconv` function now sets temporarily the ``LC_CTYPE`` "
"locale to the ``LC_NUMERIC`` locale in some cases. (Contributed by Victor "
"Stinner in :issue:`31900`.)"
msgstr ""
":func:`locale.localeconv` 函式現在在某些情況下將 ``LC_CTYPE`` 區域設定臨時設"
"定為 ``LC_NUMERIC`` 區域設定。 （由 Victor Stinner 在 :issue:`31900` 中貢"
"獻。）"

#: ../../whatsnew/3.6.rst:2433
#, fuzzy
msgid "Notable changes in Python 3.6.7"
msgstr "Python 3.6.7 中的顯著變化"

#: ../../whatsnew/3.6.rst:2435
#, fuzzy
msgid ""
"In 3.6.7 the :mod:`tokenize` module now implicitly emits a ``NEWLINE`` token "
"when provided with input that does not have a trailing new line.  This "
"behavior now matches what the C tokenizer does internally. (Contributed by "
"Ammar Askar in :issue:`33899`.)"
msgstr ""
"在 3.6.7 中，:mod:`tokenize` 模組現在在提供沒有尾隨換行符的輸入時隱式發出一"
"個 ``NEWLINE`` 標記。此行為現在與 C 分詞器在內部執行的操作相匹配。 （由 "
"Ammar Askar 在 :issue:`33899` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2441
#, fuzzy
msgid "Notable changes in Python 3.6.10"
msgstr "Python 3.6.10 中的顯著變化"

#: ../../whatsnew/3.6.rst:2443
#, fuzzy
msgid ""
"Due to significant security concerns, the *reuse_address* parameter of :meth:"
"`asyncio.loop.create_datagram_endpoint` is no longer supported. This is "
"because of the behavior of the socket option ``SO_REUSEADDR`` in UDP. For "
"more details, see the documentation for ``loop.create_datagram_endpoint()``. "
"(Contributed by Kyle Stanley, Antoine Pitrou, and Yury Selivanov in :issue:"
"`37228`.)"
msgstr ""
"由於重大安全問題，不再支援 asyncio.loop.create_datagram_endpoint 的 "
"*reuse_address* 參數。這是因為 UDP 中 socket 選項 ``SO_REUSEADDR`` 的行為。有"
"關詳細資訊，請參閱 ``loop.create_datagram_endpoint()`` 的文檔。 （由 Kyle "
"Stanley、Antoine Pitrou 和 Yury Selivanov 在 :issue:`37228` 中貢獻。）"

#: ../../whatsnew/3.6.rst:2451
#, fuzzy
msgid "Notable changes in Python 3.6.13"
msgstr "Python 3.6.13 中的顯著變化"

#: ../../whatsnew/3.6.rst:2453
#, fuzzy
msgid ""
"Earlier Python versions allowed using both ``;`` and ``&`` as query "
"parameter separators in :func:`urllib.parse.parse_qs` and :func:`urllib."
"parse.parse_qsl`.  Due to security concerns, and to conform with newer W3C "
"recommendations, this has been changed to allow only a single separator key, "
"with ``&`` as the default.  This change also affects :func:`cgi.parse` and :"
"func:`cgi.parse_multipart` as they use the affected functions internally. "
"For more details, please see their respective documentation. (Contributed by "
"Adam Goldschmidt, Senthil Kumaran and Ken Jin in :issue:`42967`.)"
msgstr ""
"早期的 Python 版本允許在 :func:`urllib.parse.parse_qs` 和 :func:`urllib."
"parse.parse_qsl` 中同時使用 ``;`` 和 ``&`` 作為查詢參數分隔符。出於安全考慮，"
"並為了符合更新的 W3C 建議，這已更改為僅允許單個分隔鍵，預設為 ``&``。此更改還"
"會影響 :func:`cgi.parse` 和 :func:`cgi.parse_multipart`，因為它們在內部使用受"
"影響的函式。有關詳細資訊，請參閱各自的文檔。 （由 Adam Goldschmidt、Senthil "
"Kumaran 和 Ken Jin 在 :issue:`42967` 中貢獻。）"
