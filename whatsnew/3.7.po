# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-31 08:13+0000\n"
"PO-Revision-Date: 2018-07-15 18:56+0800\n"
"Last-Translator: \n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../whatsnew/3.7.rst:3
msgid "What's New In Python 3.7"
msgstr "Python 3.7 有什麼新功能"

#: ../../whatsnew/3.7.rst:0
msgid "Editor"
msgstr "編輯者"

#: ../../whatsnew/3.7.rst:5
msgid "Elvis Pranskevichus <elvis@magic.io>"
msgstr "Elvis Pranskevichus <elvis@magic.io>"

#: ../../whatsnew/3.7.rst:47
#, fuzzy
msgid ""
"This article explains the new features in Python 3.7, compared to 3.6. "
"Python 3.7 was released on June 27, 2018. For full details, see the :ref:"
"`changelog <changelog>`."
msgstr ""
"本文介紹了 Python 3.7 與 3.6 相比的新功能。 Python 3.7 於 2018 年 6 月 27 "
"日發布。有關完整詳細資訊，請參閱 :ref:`changelog <changelog>`。"

#: ../../whatsnew/3.7.rst:53
#, fuzzy
msgid "Summary -- Release Highlights"
msgstr "總結——發布亮點"

#: ../../whatsnew/3.7.rst:58
#, fuzzy
msgid "New syntax features:"
msgstr "新的語法特性："

#: ../../whatsnew/3.7.rst:60
#, fuzzy
msgid ""
":ref:`PEP 563 <whatsnew37-pep563>`, postponed evaluation of type annotations."
msgstr ":ref:`PEP 563 <whatsnew37-pep563>`，推遲對型別註釋的評估。"

#: ../../whatsnew/3.7.rst:62
#, fuzzy
msgid "Backwards incompatible syntax changes:"
msgstr "向後不相容的語法更改："

#: ../../whatsnew/3.7.rst:64
msgid ":keyword:`async` and :keyword:`await` are now reserved keywords."
msgstr ":keyword:`async` 和 :keyword:`await` 現為保留關鍵字。"

#: ../../whatsnew/3.7.rst:66
#, fuzzy
msgid "New library modules:"
msgstr "新的庫模組："

#: ../../whatsnew/3.7.rst:68
#, fuzzy
msgid ""
":mod:`contextvars`: :ref:`PEP 567 -- Context Variables <whatsnew37-pep567>`"
msgstr ":mod:`contextvars`: :ref:`PEP 567 -- 上下文變數 <whatsnew37-pep567>`"

#: ../../whatsnew/3.7.rst:69
#, fuzzy
msgid ":mod:`dataclasses`: :ref:`PEP 557 -- Data Classes <whatsnew37-pep557>`"
msgstr ":mod:`dataclasses`: :ref:`PEP 557 -- 資料類 <whatsnew37-pep557>`"

#: ../../whatsnew/3.7.rst:70
msgid ":ref:`whatsnew37_importlib_resources`"
msgstr ":ref:`whatsnew37_importlib_resources`"

#: ../../whatsnew/3.7.rst:72
#, fuzzy
msgid "New built-in features:"
msgstr "新的內建功能："

#: ../../whatsnew/3.7.rst:74
#, fuzzy
msgid ""
":ref:`PEP 553 <whatsnew37-pep553>`, the new :func:`breakpoint` function."
msgstr ":ref:`PEP 553 <whatsnew37-pep553>`，新的 :func:`breakpoint` 函式。"

#: ../../whatsnew/3.7.rst:76
#, fuzzy
msgid "Python data model improvements:"
msgstr "Python 資料模型改進："

#: ../../whatsnew/3.7.rst:78
#, fuzzy
msgid ""
":ref:`PEP 562 <whatsnew37-pep562>`, customization of access to module "
"attributes."
msgstr ":ref:`PEP 562 <whatsnew37-pep562>`，定制對模組屬性的訪問。"

#: ../../whatsnew/3.7.rst:81
#, fuzzy
msgid ""
":ref:`PEP 560 <whatsnew37-pep560>`, core support for typing module and "
"generic types."
msgstr ":ref:`PEP 560 <whatsnew37-pep560>`，對輸入模組和通用型別的核心支援。"

#: ../../whatsnew/3.7.rst:84
#, fuzzy
msgid ""
"the insertion-order preservation nature of :ref:`dict <typesmapping>` "
"objects `has been declared`_ to be an official part of the Python language "
"spec."
msgstr ":ref:`dict <typesmapping>` 物件的插入順序保存特性`已被聲明`_ 是 Python "
"語言規範的官方部分。"

#: ../../whatsnew/3.7.rst:90
#, fuzzy
msgid "Significant improvements in the standard library:"
msgstr "標準庫的重大改進："

#: ../../whatsnew/3.7.rst:92
#, fuzzy
msgid ""
"The :mod:`asyncio` module has received new features, significant :ref:"
"`usability and performance improvements <whatsnew37_asyncio>`."
msgstr ":mod:`asyncio` 模組獲得了新功能、顯著的 :ref:`可用性和性能改進 "
"<whatsnew37_asyncio>`。"

#: ../../whatsnew/3.7.rst:95
#, fuzzy
msgid ""
"The :mod:`time` module gained support for :ref:`functions with nanosecond "
"resolution <whatsnew37-pep564>`."
msgstr ":mod:`time` 模組獲得了對 :ref:`具有納秒分辨率的函式 <whatsnew37-pep564>` "
"的支援。"

#: ../../whatsnew/3.7.rst:98
#, fuzzy
msgid "CPython implementation improvements:"
msgstr "CPython 實作改進："

#: ../../whatsnew/3.7.rst:100
#, fuzzy
msgid "Avoiding the use of ASCII as a default text encoding:"
msgstr "避免使用 ASCII 作為預設文本編碼："

#: ../../whatsnew/3.7.rst:102
#, fuzzy
msgid ":ref:`PEP 538 <whatsnew37-pep538>`, legacy C locale coercion"
msgstr ":ref:`PEP 538 <whatsnew37-pep538>`，遺留 C 語言環境強制"

#: ../../whatsnew/3.7.rst:103
#, fuzzy
msgid ":ref:`PEP 540 <whatsnew37-pep540>`, forced UTF-8 runtime mode"
msgstr ":ref:`PEP 540 <whatsnew37-pep540>`，強制 UTF-8 運行時模式"

#: ../../whatsnew/3.7.rst:104
#, fuzzy
msgid ":ref:`PEP 552 <whatsnew37-pep552>`, deterministic .pycs"
msgstr ":ref:`PEP 552 <whatsnew37-pep552>`，確定性 .pycs"

#: ../../whatsnew/3.7.rst:105
msgid ":ref:`New Python Development Mode <whatsnew37-devmode>`"
msgstr ":ref:`新版 Python 開發模式 <whatsnew37-devmode>`"

#: ../../whatsnew/3.7.rst:106
#, fuzzy
msgid ""
":ref:`PEP 565 <whatsnew37-pep565>`, improved :exc:`DeprecationWarning` "
"handling"
msgstr ":ref:`PEP 565 <whatsnew37-pep565>`，改進了 :exec:`DeprecationWarning` 處理"

#: ../../whatsnew/3.7.rst:109
#, fuzzy
msgid "C API improvements:"
msgstr "C API 改進："

#: ../../whatsnew/3.7.rst:111
#, fuzzy
msgid ":ref:`PEP 539 <whatsnew37-pep539>`, new C API for thread-local storage"
msgstr ":ref:`PEP 539 <whatsnew37-pep539>`，用於執行緒本地儲存的新 C API"

#: ../../whatsnew/3.7.rst:113
#, fuzzy
msgid "Documentation improvements:"
msgstr "文檔改進："

#: ../../whatsnew/3.7.rst:115
#, fuzzy
msgid ":ref:`PEP 545 <whatsnew37-pep545>`, Python documentation translations"
msgstr ":ref:`PEP 545 <whatsnew37-pep545>`，Python 文檔翻譯"

#: ../../whatsnew/3.7.rst:116
#, fuzzy
msgid ""
"New documentation translations: `Japanese <https://docs.python.org/ja/>`_, "
"`French <https://docs.python.org/fr/>`_, and `Korean <https://docs.python."
"org/ko/>`_."
msgstr ""
"新文檔翻譯：`日語 <https://docs.python.org/ja/>`_、`法語 <https://docs.python"
".org/fr/>`_ 和`韓語 <https:// docs.python.org/ko/>`_。"

#: ../../whatsnew/3.7.rst:120
#, fuzzy
msgid ""
"This release features notable performance improvements in many areas. The :"
"ref:`whatsnew37-perf` section lists them in detail."
msgstr "此版本在許多方面都有顯著的性能改進。 :ref:`whatsnew37-perf` "
"部分詳細列出了它們。"

#: ../../whatsnew/3.7.rst:123
#, fuzzy
msgid ""
"For a list of changes that may affect compatibility with previous Python "
"releases please refer to the :ref:`porting-to-python-37` section."
msgstr "有關可能影響與以前 Python 版本的相容性的更改列表，請參閱 :ref:`porting-to-"
"python-37` 部分。"

#: ../../whatsnew/3.7.rst:128
#, fuzzy
msgid "New Features"
msgstr "新功能"

#: ../../whatsnew/3.7.rst:133
#, fuzzy
msgid "PEP 563: Postponed Evaluation of Annotations"
msgstr "PEP 563：延遲評估註釋"

#: ../../whatsnew/3.7.rst:135
#, fuzzy
msgid ""
"The advent of type hints in Python uncovered two glaring usability issues "
"with the functionality of annotations added in :pep:`3107` and refined "
"further in :pep:`526`:"
msgstr ""
"Python 中型別提示的出現揭示了兩個明顯的可用性問題，即在 :pep:`3107` "
"中新增並在 :pep:`526` 中進一步完善的註釋功能："

#: ../../whatsnew/3.7.rst:139
#, fuzzy
msgid ""
"annotations could only use names which were already available in the current "
"scope, in other words they didn't support forward references of any kind; and"
msgstr "註解只能使用當前範圍內已經可用的名稱，換句話說，它們不支援任何型別的前向引用"
"；和"

#: ../../whatsnew/3.7.rst:143
#, fuzzy
msgid ""
"annotating source code had adverse effects on startup time of Python "
"programs."
msgstr "註釋源程式碼對 Python 程式的啟動時間有不利影響。"

#: ../../whatsnew/3.7.rst:146
#, fuzzy
msgid ""
"Both of these issues are fixed by postponing the evaluation of annotations.  "
"Instead of compiling code which executes expressions in annotations at their "
"definition time, the compiler stores the annotation in a string form "
"equivalent to the AST of the expression in question. If needed, annotations "
"can be resolved at runtime using :func:`typing.get_type_hints`.  In the "
"common case where this is not required, the annotations are cheaper to store "
"(since short strings are interned by the interpreter) and make startup time "
"faster."
msgstr ""
"這兩個問題都通過推遲對註釋的評估來解決。編譯器不是在定義時編譯在註解中執行表"
"達式的程式碼，而是以字串形式儲存註解，相當於所討論表達式的 AST。如果需要，"
"可以在運行時使用 typing.get_type_hints 解析註釋。在不需要這樣做的常見情況下，"
"註釋的儲存成本更低（因為直譯器會保留短字串）並使啟動時間更快。"

#: ../../whatsnew/3.7.rst:155
#, fuzzy
msgid ""
"Usability-wise, annotations now support forward references, making the "
"following syntax valid::"
msgstr "在可用性方面，註釋現在支援前向引用，使以下語法有效："

#: ../../whatsnew/3.7.rst:169
#, fuzzy
msgid ""
"Since this change breaks compatibility, the new behavior needs to be enabled "
"on a per-module basis in Python 3.7 using a :mod:`__future__` import::"
msgstr ""
"由於此更改破壞了相容性，因此需要在 Python 3.7 中使用 :mod:`__future__` "
"import:: 在每個模組的基礎上啟用新行為："

#: ../../whatsnew/3.7.rst:174
#, fuzzy
msgid "It will become the default in Python 3.10."
msgstr "它將成為 Python 3.10 中的預設值。"

#: ../../whatsnew/3.7.rst:178
#, fuzzy
msgid ":pep:`563` -- Postponed evaluation of annotations"
msgstr ":pep:`563` -- 推遲評估註釋"

#: ../../whatsnew/3.7.rst:179
#, fuzzy
msgid "PEP written and implemented by Łukasz Langa."
msgstr "PEP 由 Łukasz Langa 編寫和實施。"

#: ../../whatsnew/3.7.rst:185
#, fuzzy
msgid "PEP 538: Legacy C Locale Coercion"
msgstr "PEP 538：遺留 C 語言環境強制轉換"

#: ../../whatsnew/3.7.rst:187
#, fuzzy
msgid ""
"An ongoing challenge within the Python 3 series has been determining a "
"sensible default strategy for handling the \"7-bit ASCII\" text encoding "
"assumption currently implied by the use of the default C or POSIX locale on "
"non-Windows platforms."
msgstr ""
"Python 3 系列中的一個持續挑戰是確定一個合理的預設策略來處理當前在非 Windows "
"平台上使用預設 C 或 POSIX 語言環境所隱含的“7 位 ASCII”文本編碼假設。"

#: ../../whatsnew/3.7.rst:192
#, fuzzy
msgid ""
":pep:`538` updates the default interpreter command line interface to "
"automatically coerce that locale to an available UTF-8 based locale as "
"described in the documentation of the new :envvar:`PYTHONCOERCECLOCALE` "
"environment variable. Automatically setting ``LC_CTYPE`` this way means that "
"both the core interpreter and locale-aware C extensions (such as :mod:"
"`readline`) will assume the use of UTF-8 as the default text encoding, "
"rather than ASCII."
msgstr ""
":pep:`538` 更新預設的直譯器命令列界面，以自動將該語言環境強制為可用的基於 "
"UTF-8 的語言環境，如新的 :envvar:`PYTHONCOERCECLOCALE` 環境變數的文檔中所述。"
"以這種方式自動設定 ``LC_CTYPE`` 意味著核心直譯器和區域感知 C 擴充（例如 "
":mod:`readline`）將假定使用 UTF-8 作為預設文本編碼，而不是 ASCII。"

#: ../../whatsnew/3.7.rst:200
#, fuzzy
msgid ""
"The platform support definition in :pep:`11` has also been updated to limit "
"full text handling support to suitably configured non-ASCII based locales."
msgstr ":pep:`11` 中的平台支援定義也已更新，以將全文處理支援限制為適當配置的基於非 "
"ASCII 的語言環境。"

#: ../../whatsnew/3.7.rst:203
#, fuzzy
msgid ""
"As part of this change, the default error handler for :data:`~sys.stdin` "
"and :data:`~sys.stdout` is now ``surrogateescape`` (rather than ``strict``) "
"when using any of the defined coercion target locales (currently ``C."
"UTF-8``, ``C.utf8``, and ``UTF-8``).  The default error handler for :data:"
"`~sys.stderr` continues to be ``backslashreplace``, regardless of locale."
msgstr ""
"作為此更改的一部分，:data:`~sys.stdin` 和 :data:`~sys.stdout` "
"的預設錯誤處理程式在使用任何定義的強制目標語言環境（當前為“C.UTF-8”、“C."
"utf8”和 ``UTF-8``）。 :data:`~sys.stderr` 的預設錯誤處理程式仍然是 "
"``backslashreplace``，無論語言環境如何。"

#: ../../whatsnew/3.7.rst:209
#, fuzzy
msgid ""
"Locale coercion is silent by default, but to assist in debugging potentially "
"locale related integration problems, explicit warnings (emitted directly on :"
"data:`~sys.stderr`) can be requested by setting "
"``PYTHONCOERCECLOCALE=warn``. This setting will also cause the Python "
"runtime to emit a warning if the legacy C locale remains active when the "
"core interpreter is initialized."
msgstr ""
"預設情況下，語言環境強制是無聲的，但為了幫助除錯潛在的與語言環境相關的集成問"
"題，可以通過設定“PYTHONCOERCECLOCALE=warn”來請求顯式警告（直接在 :data:`~sys."
"stderr` 上發出）。如果在初始化核心直譯器時遺留 C 語言環境保持活動狀態，"
"此設定還將導致 Python 運行時發出警告。"

#: ../../whatsnew/3.7.rst:215
#, fuzzy
msgid ""
"While :pep:`538`'s locale coercion has the benefit of also affecting "
"extension modules (such as GNU ``readline``), as well as child processes "
"(including those running non-Python applications and older versions of "
"Python), it has the downside of requiring that a suitable target locale be "
"present on the running system. To better handle the case where no suitable "
"target locale is available (as occurs on RHEL/CentOS 7, for example), Python "
"3.7 also implements :ref:`whatsnew37-pep540`."
msgstr ""
"雖然 :pep:`538` 的語言環境強制還具有影響擴充模組（例如 GNU "
"``readline``）以及子行程（包括那些運行非 Python 應用程式和舊版本 Python 的行"
"程）的好處，它的缺點是要求在運行的系統上存在合適的目標語言環境。為了更好地處"
"理沒有合適的目標語言環境可用的情況（例如在 RHEL/CentOS 7 上發生的情況），"
"Python 3.7 還實作了 :ref:`whatsnew37-pep540`。"

#: ../../whatsnew/3.7.rst:225
#, fuzzy
msgid ":pep:`538` -- Coercing the legacy C locale to a UTF-8 based locale"
msgstr ":pep:`538` -- 將遺留 C 語言環境強制轉換為基於 UTF-8 的語言環境"

#: ../../whatsnew/3.7.rst:226
msgid "PEP written and implemented by Nick Coghlan."
msgstr "由 Nick Coghlan 撰寫 PEP 與實作。"

#: ../../whatsnew/3.7.rst:232
#, fuzzy
msgid "PEP 540: Forced UTF-8 Runtime Mode"
msgstr "PEP 540：強制 UTF-8 運行時模式"

#: ../../whatsnew/3.7.rst:234
#, fuzzy
msgid ""
"The new :option:`-X` ``utf8`` command line option and :envvar:`PYTHONUTF8` "
"environment variable can be used to enable the :ref:`Python UTF-8 Mode <utf8-"
"mode>`."
msgstr ""
"新的 :option:`-X` ``utf8`` 命令列選項和 :envvar:`PYTHONUTF8` "
"環境變數可用於啟用 :ref:`Python UTF-8 模式 <utf8-mode>`。"

#: ../../whatsnew/3.7.rst:238
#, fuzzy
msgid ""
"When in UTF-8 mode, CPython ignores the locale settings, and uses the UTF-8 "
"encoding by default.  The error handlers for :data:`sys.stdin` and :data:"
"`sys.stdout` streams are set to ``surrogateescape``."
msgstr ""
"在 UTF-8 模式下，CPython 忽略語言環境設定，預設使用 UTF-8 編碼。 sys.stdin "
"和 sys.stdout 流的錯誤處理程式設定為 surrogateescape。"

#: ../../whatsnew/3.7.rst:242
#, fuzzy
msgid ""
"The forced UTF-8 mode can be used to change the text handling behavior in an "
"embedded Python interpreter without changing the locale settings of an "
"embedding application."
msgstr "強制 UTF-8 模式可用於更改嵌入式 Python "
"直譯器中的文本處理行為，而無需更改嵌入應用程式的區域設定。"

#: ../../whatsnew/3.7.rst:246
#, fuzzy
msgid ""
"While :pep:`540`'s UTF-8 mode has the benefit of working regardless of which "
"locales are available on the running system, it has the downside of having "
"no effect on extension modules (such as GNU ``readline``), child processes "
"running non-Python applications, and child processes running older versions "
"of Python. To reduce the risk of corrupting text data when communicating "
"with such components, Python 3.7 also implements :ref:`whatsnew37-pep540`)."
msgstr ""
"雖然 :pep:`540` 的 UTF-8 模式的優點是無論運行的系統上有哪些語言環境都可以工作"
"，但它的缺點是對擴充模組（例如 GNU ``readline``）沒有影響，運行非 Python "
"應用程式的子行程，以及運行舊版本 Python "
"的子行程。為了降低與此類組件通信時損壞文本資料的風險，Python 3.7 還實作了 "
":ref:`whatsnew37-pep540`)。"

#: ../../whatsnew/3.7.rst:253
#, fuzzy
msgid ""
"The UTF-8 mode is enabled by default when the locale is ``C`` or ``POSIX``, "
"and the :pep:`538` locale coercion feature fails to change it to a UTF-8 "
"based alternative (whether that failure is due to ``PYTHONCOERCECLOCALE=0`` "
"being set, ``LC_ALL`` being set, or the lack of a suitable target locale)."
msgstr ""
"當區域設定為 ``C``或 ``POSIX``時，預設情況下啟用 UTF-8 模式，並且 :pep:`538` "
"區域設定強制功能無法將其更改為基於 UTF-8 的替代方案（無論是失敗是由於設定了“P"
"YTHONCOERCECLOCALE=0”、設定了“LC_ALL”或缺少合適的目標語言環境）。"

#: ../../whatsnew/3.7.rst:260
#, fuzzy
msgid ":pep:`540` -- Add a new UTF-8 mode"
msgstr ":pep:`540` -- 新增新的 UTF-8 模式"

#: ../../whatsnew/3.7.rst:261 ../../whatsnew/3.7.rst:363
msgid "PEP written and implemented by Victor Stinner"
msgstr "由 Victor Stinner 撰寫 PEP 與實作"

#: ../../whatsnew/3.7.rst:267
#, fuzzy
msgid "PEP 553: Built-in ``breakpoint()``"
msgstr "PEP 553：內建``斷點（）``"

#: ../../whatsnew/3.7.rst:269
#, fuzzy
msgid ""
"Python 3.7 includes the new built-in :func:`breakpoint` function as an easy "
"and consistent way to enter the Python debugger."
msgstr "Python 3.7 包含新的內建 :func:`breakpoint` 函式，作為進入 Python "
"除錯器的一種簡單且一致的方式。"

#: ../../whatsnew/3.7.rst:272
#, fuzzy
msgid ""
"Built-in ``breakpoint()`` calls :func:`sys.breakpointhook`.  By default, the "
"latter imports :mod:`pdb` and then calls ``pdb.set_trace()``, but by binding "
"``sys.breakpointhook()`` to the function of your choosing, ``breakpoint()`` "
"can enter any debugger. Additionally, the environment variable :envvar:"
"`PYTHONBREAKPOINT` can be set to the callable of your debugger of choice.  "
"Set ``PYTHONBREAKPOINT=0`` to completely disable built-in ``breakpoint()``."
msgstr ""
"內建的``breakpoint()``呼叫 :func:`sys.breakpointhook`。預設情況下，後者導入 "
":mod:`pdb` 然後呼叫 ``pdb.set_trace()``，但是通過將 ``sys.breakpointhook()`` "
"綁定到您選擇的函式，``breakpoint()` ` 可以進入任何除錯器。此外，環境變數 "
":envvar:`PYTHONBREAKPOINT` 可以設定為您選擇的除錯器的可呼叫物件。設定 "
"``PYTHONBREAKPOINT=0`` 以完全禁用內建的 ``breakpoint()``。"

#: ../../whatsnew/3.7.rst:282
#, fuzzy
msgid ":pep:`553` -- Built-in breakpoint()"
msgstr ":pep:`553` -- 內建斷點()"

#: ../../whatsnew/3.7.rst:283
msgid "PEP written and implemented by Barry Warsaw"
msgstr "由 Barry Warsaw 撰寫 PEP 與實作"

#: ../../whatsnew/3.7.rst:289
#, fuzzy
msgid "PEP 539: New C API for Thread-Local Storage"
msgstr "PEP 539：用於執行緒本地儲存的新 C API"

#: ../../whatsnew/3.7.rst:291
#, fuzzy
msgid ""
"While Python provides a C API for thread-local storage support; the "
"existing :ref:`Thread Local Storage (TLS) API <thread-local-storage-api>` "
"has used :c:expr:`int` to represent TLS keys across all platforms.  This has "
"not generally been a problem for officially support platforms, but that is "
"neither POSIX-compliant, nor portable in any practical sense."
msgstr ""
"Python 為執行緒本地儲存支援提供了一個 C API；現有的 :ref:`Thread Local "
"Storage (TLS) API <thread-local-storage-api>` 已經使用 :c:expr:`int` "
"來表示跨所有平台的 TLS 密鑰。對於官方支援平台來說，這通常不是問題，"
"但這既不符合 POSIX，也不符合任何實際意義上的可移植性。"

#: ../../whatsnew/3.7.rst:297
#, fuzzy
msgid ""
":pep:`539` changes this by providing a new :ref:`Thread Specific Storage "
"(TSS) API <thread-specific-storage-api>` to CPython which supersedes use of "
"the existing TLS API within the CPython interpreter, while deprecating the "
"existing API.  The TSS API uses a new type :c:type:`Py_tss_t` instead of :c:"
"expr:`int` to represent TSS keys--an opaque type the definition of which may "
"depend on the underlying TLS implementation.  Therefore, this will allow to "
"build CPython on platforms where the native TLS key is defined in a way that "
"cannot be safely cast to :c:expr:`int`."
msgstr ""
":pep:`539` 通過向 CPython 提供新的 :ref:`執行緒特定儲存 (TSS) API <thread-"
"specific-storage-api>` 來改變這一點，它取代了 CPython 直譯器中現有 TLS API "
"的使用，同時棄用了現有的 API。 TSS API 使用新型別 Py_tss_t 而不是 int 來表示 "
"TSS 密鑰——一種不透明型別，其定義可能取決於底層 TLS 實作。因此，"
"這將允許在以無法安全轉換為 :c:expr:`int` 的方式定義本機 TLS 密鑰的平台上構建 "
"CPython。"

#: ../../whatsnew/3.7.rst:306
#, fuzzy
msgid ""
"Note that on platforms where the native TLS key is defined in a way that "
"cannot be safely cast to :c:expr:`int`, all functions of the existing TLS "
"API will be no-op and immediately return failure. This indicates clearly "
"that the old API is not supported on platforms where it cannot be used "
"reliably, and that no effort will be made to add such support."
msgstr ""
"請注意，在以無法安全轉換為 :c:expr:`int` 的方式定義本機 TLS 密鑰的平台上，"
"現有 TLS API 的所有函式都將是空操作並立即回傳失敗。這清楚地表明舊 API "
"在不能可靠使用的平台上不受支援，並且不會努力新增此類支援。"

#: ../../whatsnew/3.7.rst:314
#, fuzzy
msgid ":pep:`539` -- A New C-API for Thread-Local Storage in CPython"
msgstr ":pep:`539` -- CPython 中用於執行緒本地儲存的新 C-API"

#: ../../whatsnew/3.7.rst:315
msgid "PEP written by Erik M. Bray; implementation by Masayuki Yamamoto."
msgstr "PEP 由 Erik M. Bray 撰寫；由 Masayuki Yamamoto 實作。"

#: ../../whatsnew/3.7.rst:321
#, fuzzy
msgid "PEP 562: Customization of Access to Module Attributes"
msgstr "PEP 562：自定義訪問模組屬性"

#: ../../whatsnew/3.7.rst:323
#, fuzzy
msgid ""
"Python 3.7 allows defining :meth:`__getattr__` on modules and will call it "
"whenever a module attribute is otherwise not found.  Defining :meth:"
"`__dir__` on modules is now also allowed."
msgstr ""
"Python 3.7 允許在模組上定義 :meth:`__getattr__` 並在找不到模組屬性時呼叫它。"
"現在也允許在模組上定義 :meth:`__dir__`。"

#: ../../whatsnew/3.7.rst:327
#, fuzzy
msgid ""
"A typical example of where this may be useful is module attribute "
"deprecation and lazy loading."
msgstr "這可能有用的一個典型示例是模組屬性棄用和延遲加載。"

#: ../../whatsnew/3.7.rst:332
#, fuzzy
msgid ":pep:`562` -- Module ``__getattr__`` and ``__dir__``"
msgstr ":pep:`562` -- 模組 ``__getattr__`` 和 ``__dir__``"

#: ../../whatsnew/3.7.rst:333 ../../whatsnew/3.7.rst:422
msgid "PEP written and implemented by Ivan Levkivskyi"
msgstr "由 Ivan Levkivskyi 撰寫 PEP 與實作"

#: ../../whatsnew/3.7.rst:339
#, fuzzy
msgid "PEP 564: New Time Functions With Nanosecond Resolution"
msgstr "PEP 564：具有納秒分辨率的新時間函式"

#: ../../whatsnew/3.7.rst:341
#, fuzzy
msgid ""
"The resolution of clocks in modern systems can exceed the limited precision "
"of a floating point number returned by the :func:`time.time` function and "
"its variants.  To avoid loss of precision, :pep:`564` adds six new "
"\"nanosecond\" variants of the existing timer functions to the :mod:`time` "
"module:"
msgstr ""
"現代系統中時鐘的分辨率可以超過 :func:`time.time` "
"函式及其變體回傳的浮點數的有限精度。為避免精度損失，:pep:`564` "
"將現有定時器函式的六個新“納秒”變體新增到 :mod:`time` 模組："

#: ../../whatsnew/3.7.rst:347 ../../whatsnew/3.7.rst:1447
msgid ":func:`time.clock_gettime_ns`"
msgstr ":func:`time.clock_gettime_ns`"

#: ../../whatsnew/3.7.rst:348 ../../whatsnew/3.7.rst:1448
msgid ":func:`time.clock_settime_ns`"
msgstr ":func:`time.clock_settime_ns`"

#: ../../whatsnew/3.7.rst:349 ../../whatsnew/3.7.rst:1449
msgid ":func:`time.monotonic_ns`"
msgstr ":func:`time.monotonic_ns`"

#: ../../whatsnew/3.7.rst:350 ../../whatsnew/3.7.rst:1450
msgid ":func:`time.perf_counter_ns`"
msgstr ":func:`time.perf_counter_ns`"

#: ../../whatsnew/3.7.rst:351 ../../whatsnew/3.7.rst:1451
msgid ":func:`time.process_time_ns`"
msgstr ":func:`time.process_time_ns`"

#: ../../whatsnew/3.7.rst:352 ../../whatsnew/3.7.rst:1452
msgid ":func:`time.time_ns`"
msgstr ":func:`time.time_ns`"

#: ../../whatsnew/3.7.rst:354
#, fuzzy
msgid "The new functions return the number of nanoseconds as an integer value."
msgstr "新函式將納秒數作為整數值回傳。"

#: ../../whatsnew/3.7.rst:356
#, fuzzy
msgid ""
"`Measurements <https://peps.python.org/pep-0564/#annex-clocks-resolution-in-"
"python>`_ show that on Linux and Windows the resolution of :func:`time."
"time_ns` is approximately 3 times better than that of :func:`time.time`."
msgstr ""
"`測量 <https://peps.python.org/pep-0564/#annex-clocks-resolution-in-python>`"
"_ 表明在 Linux 和 Windows 上 :func:`time.time_ns` 的分辨率大約為 3比 "
":func:`time.time` 好幾倍。"

#: ../../whatsnew/3.7.rst:362
#, fuzzy
msgid ":pep:`564` -- Add new time functions with nanosecond resolution"
msgstr ":pep:`564` -- 新增具有納秒分辨率的新時間函式"

#: ../../whatsnew/3.7.rst:369
#, fuzzy
msgid "PEP 565: Show DeprecationWarning in ``__main__``"
msgstr "PEP 565：在 ``__main__`` 中顯示 DeprecationWarning"

#: ../../whatsnew/3.7.rst:371
#, fuzzy
msgid ""
"The default handling of :exc:`DeprecationWarning` has been changed such that "
"these warnings are once more shown by default, but only when the code "
"triggering them is running directly in the :mod:`__main__` module.  As a "
"result, developers of single file scripts and those using Python "
"interactively should once again start seeing deprecation warnings for the "
"APIs they use, but deprecation warnings triggered by imported application, "
"library and framework modules will continue to be hidden by default."
msgstr ""
":exc:`DeprecationWarning` "
"的預設處理已更改，因此預設情況下會再次顯示這些警告，"
"但僅當觸發它們的程式碼直接在 :mod:`__main__` 模組中運行時才會顯示。因此，"
"單文件腳本的開發人員和交互式使用 Python 的開發人員應該再次開始看到他們使用的 "
"API "
"的棄用警告，但由導入的應用程式、庫和框架模組觸發的棄用警告將繼續預設隱藏。"

#: ../../whatsnew/3.7.rst:379
#, fuzzy
msgid ""
"As a result of this change, the standard library now allows developers to "
"choose between three different deprecation warning behaviours:"
msgstr "由於這一變化，標準庫現在允許開發人員在三種不同的棄用警告行為之間進行選擇："

#: ../../whatsnew/3.7.rst:382
#, fuzzy
msgid ""
":exc:`FutureWarning`: always displayed by default, recommended for warnings "
"intended to be seen by application end users (e.g. for deprecated "
"application configuration settings)."
msgstr ":exc:`FutureWarning`：預設情況下始終顯示，建議用於應用程式最終使用者可以看到"
"的警告（例如，已棄用的應用程式配置設定）。"

#: ../../whatsnew/3.7.rst:385
#, fuzzy
msgid ""
":exc:`DeprecationWarning`: displayed by default only in :mod:`__main__` and "
"when running tests, recommended for warnings intended to be seen by other "
"Python developers where a version upgrade may result in changed behaviour or "
"an error."
msgstr ""
":exc:`DeprecationWarning`：預設情況下僅在 :mod:`__main__` 和運行測試時顯示，"
"建議用於其他 Python "
"開發人員可以看到的警告，其中版本升級可能會導致行為改變或錯誤。"

#: ../../whatsnew/3.7.rst:389
#, fuzzy
msgid ""
":exc:`PendingDeprecationWarning`: displayed by default only when running "
"tests, intended for cases where a future version upgrade will change the "
"warning category to :exc:`DeprecationWarning` or :exc:`FutureWarning`."
msgstr ""
":exc:`PendingDeprecationWarning`: 預設情況下僅在運行測試時顯示，"
"用於未來版本升級將警告類別更改為 :exc:`DeprecationWarning` 或 "
":exc:`FutureWarning` 的情況。"

#: ../../whatsnew/3.7.rst:393
#, fuzzy
msgid ""
"Previously both :exc:`DeprecationWarning` and :exc:"
"`PendingDeprecationWarning` were only visible when running tests, which "
"meant that developers primarily writing single file scripts or using Python "
"interactively could be surprised by breaking changes in the APIs they used."
msgstr ""
"以前 :exc:`DeprecationWarning` 和 :exc:`PendingDeprecationWarning` "
"僅在運行測試時可見，這意味著主要編寫單個文件腳本或以交互方式使用 Python "
"的開發人員可能會對他們使用的 API 的重大更改感到驚訝。"

#: ../../whatsnew/3.7.rst:400
#, fuzzy
msgid ":pep:`565` -- Show DeprecationWarning in ``__main__``"
msgstr ":pep:`565` -- 在 ``__main__`` 中顯示 DeprecationWarning"

#: ../../whatsnew/3.7.rst:401
msgid "PEP written and implemented by Nick Coghlan"
msgstr "由 Nick Coghlan 撰寫 PEP 與實作"

#: ../../whatsnew/3.7.rst:407
#, fuzzy
msgid "PEP 560: Core Support for ``typing`` module and Generic Types"
msgstr "PEP 560：對 ``typing`` 模組和通用型別的核心支援"

#: ../../whatsnew/3.7.rst:409
#, fuzzy
msgid ""
"Initially :pep:`484` was designed in such way that it would not introduce "
"*any* changes to the core CPython interpreter. Now type hints and the :mod:"
"`typing` module are extensively used by the community, so this restriction "
"is removed. The PEP introduces two special methods :meth:`__class_getitem__` "
"and ``__mro_entries__``, these methods are now used by most classes and "
"special constructs in :mod:`typing`. As a result, the speed of various "
"operations with types increased up to 7 times, the generic types can be used "
"without metaclass conflicts, and several long standing bugs in :mod:`typing` "
"module are fixed."
msgstr ""
"最初 :pep:`484` 的設計方式是不會對核心 CPython 直譯器引入 *任何* 更改。"
"現在型別提示和 :mod:`typing` 模組被社區廣泛使用，所以這個限制被刪除了。 PEP "
"引入了兩個特殊方法 :meth:`__class_getitem__` 和 ``__mro_entries__``，"
"這些方法現在被 :mod:`typing` 中的大多數類和特殊結構使用。結果，"
"型別的各種操作速度提高了 7 倍，泛型型別可以在沒有元類衝突的情況下使用，並且 "
":mod:`typing` 模組中的幾個長期存在的錯誤得到修復。"

#: ../../whatsnew/3.7.rst:421
#, fuzzy
msgid ":pep:`560` -- Core support for typing module and generic types"
msgstr ":pep:`560` -- 對輸入模組和通用型別的核心支援"

#: ../../whatsnew/3.7.rst:428
#, fuzzy
msgid "PEP 552: Hash-based .pyc Files"
msgstr "PEP 552：基於雜湊的 .pyc 文件"

#: ../../whatsnew/3.7.rst:430
#, fuzzy
msgid ""
"Python has traditionally checked the up-to-dateness of bytecode cache files "
"(i.e., ``.pyc`` files) by comparing the source metadata (last-modified "
"timestamp and size) with source metadata saved in the cache file header when "
"it was generated. While effective, this invalidation method has its "
"drawbacks.  When filesystem timestamps are too coarse, Python can miss "
"source updates, leading to user confusion. Additionally, having a timestamp "
"in the cache file is problematic for `build reproducibility <https://"
"reproducible-builds.org/>`_ and content-based build systems."
msgstr ""
"傳統上，Python 通過比較源元資料（最後修改的時間戳和大小）與保存在快取文件頭中"
"的源元資料來檢查位元組碼快取文件（即 .pyc 文件）的最新性。產生。雖然有效，但"
"這種無效方法有其缺點。當文件系統時間戳太粗糙時，Python 可能會錯過源更新，從而"
"導致使用者混淆。此外，快取文件中的時間戳對於“構建可重複性<https"
"://reproducible-builds.org/>”和基於內容的構建系統來說是有問題的。"

#: ../../whatsnew/3.7.rst:439
#, fuzzy
msgid ""
":pep:`552` extends the pyc format to allow the hash of the source file to be "
"used for invalidation instead of the source timestamp. Such ``.pyc`` files "
"are called \"hash-based\". By default, Python still uses timestamp-based "
"invalidation and does not generate hash-based ``.pyc`` files at runtime. "
"Hash-based ``.pyc`` files may be generated with :mod:`py_compile` or :mod:"
"`compileall`."
msgstr ""
":pep:`552` 擴充了 pyc 格式，允許將源文件的雜湊值用於無效而不是源時間戳。"
"這樣的 ``.pyc`` 文件被稱為“基於雜湊的”。預設情況下，Python "
"仍然使用基於時間戳的失效，並且不會在運行時生成基於雜湊的 .pyc 文件。"
"基於散列的 ``.pyc`` 文件可以使用 :mod:`py_compile` 或 :mod:`compileall` "
"生成。"

#: ../../whatsnew/3.7.rst:445
#, fuzzy
msgid ""
"Hash-based ``.pyc`` files come in two variants: checked and unchecked. "
"Python validates checked hash-based ``.pyc`` files against the corresponding "
"source files at runtime but doesn't do so for unchecked hash-based pycs. "
"Unchecked hash-based ``.pyc`` files are a useful performance optimization "
"for environments where a system external to Python (e.g., the build system) "
"is responsible for keeping ``.pyc`` files up-to-date."
msgstr ""
"基於散列的 .pyc 文件有兩種變體：已檢查和未檢查。 Python "
"在運行時根據相應的源文件驗證已檢查的基於雜湊的“.pyc”文件，"
"但不會對未檢查的基於雜湊的 pyc 執行此操作。未經檢查的基於雜湊的“.pyc”"
"文件對於 Python 外部系統（例如，構建系統）負責保持“."
"pyc”文件最新的環境來說是一種有用的性能最佳化。"

#: ../../whatsnew/3.7.rst:452
msgid "See :ref:`pyc-invalidation` for more information."
msgstr "更多資訊請見 :ref:`pyc-invalidation`\\ 。"

#: ../../whatsnew/3.7.rst:456
#, fuzzy
msgid ":pep:`552` -- Deterministic pycs"
msgstr ":pep:`552` -- 確定性 pycs"

#: ../../whatsnew/3.7.rst:457
msgid "PEP written and implemented by Benjamin Peterson"
msgstr "由 Benjamin Peterson 撰寫 PEP 與實作"

#: ../../whatsnew/3.7.rst:463
msgid "PEP 545: Python Documentation Translations"
msgstr "PEP 545：Python 文件翻譯"

#: ../../whatsnew/3.7.rst:465
#, fuzzy
msgid ""
":pep:`545` describes the process of creating and maintaining Python "
"documentation translations."
msgstr ":pep:`545` 描述了建立和維護 Python 文檔翻譯的過程。"

#: ../../whatsnew/3.7.rst:468
#, fuzzy
msgid "Three new translations have been added:"
msgstr "新增了三個新的翻譯："

#: ../../whatsnew/3.7.rst:470
msgid "Japanese: https://docs.python.org/ja/"
msgstr "日文：https://docs.python.org/ja/"

#: ../../whatsnew/3.7.rst:471
msgid "French: https://docs.python.org/fr/"
msgstr "法文：https://docs.python.org/fr/"

#: ../../whatsnew/3.7.rst:472
msgid "Korean: https://docs.python.org/ko/"
msgstr "韓文：https://docs.python.org/ko/"

#: ../../whatsnew/3.7.rst:477
msgid ":pep:`545` -- Python Documentation Translations"
msgstr ":pep:`545` -- Python 文件翻譯"

#: ../../whatsnew/3.7.rst:477
msgid ""
"PEP written and implemented by Julien Palard, Inada Naoki, and Victor "
"Stinner."
msgstr "PEP 由 Julien Palard、Inada Naoki 與 Victor Stinner 撰寫。"

#: ../../whatsnew/3.7.rst:484
#, fuzzy
msgid "Python Development Mode (-X dev)"
msgstr "Python 開發模式 (-X dev)"

#: ../../whatsnew/3.7.rst:486
#, fuzzy
msgid ""
"The new :option:`-X` ``dev`` command line option or the new :envvar:"
"`PYTHONDEVMODE` environment variable can be used to enable :ref:`Python "
"Development Mode <devmode>`.  When in development mode, Python performs "
"additional runtime checks that are too expensive to be enabled by default. "
"See :ref:`Python Development Mode <devmode>` documentation for the full "
"description."
msgstr ""
"新的 :option:`-X` ``dev`` 命令列選項或新的 :envvar:`PYTHONDEVMODE` "
"環境變數可用於啟用 :ref:`Python 開發模式 <devmode>`。在開發模式下，Python "
"會執行額外的運行時檢查，這些檢查成本太高而無法預設啟用。有關完整說明，請參閱 "
":ref:`Python 開發模式 <devmode>` 文檔。"

#: ../../whatsnew/3.7.rst:495
#, fuzzy
msgid "Other Language Changes"
msgstr "其他語言變化"

#: ../../whatsnew/3.7.rst:497
#, fuzzy
msgid ""
"An :keyword:`await` expression and comprehensions containing an :keyword:"
"`async for` clause were illegal in the expressions in :ref:`formatted string "
"literals <f-strings>` due to a problem with the implementation.  In Python "
"3.7 this restriction was lifted."
msgstr ""
":keyword:`await` 表達式和包含 :keyword:`async for` 子句的理解在 :ref:`"
"formatted string literals <f-strings>` "
"中的表達式中是非法的，因為實作存在問題。在 Python 3.7 中，這個限制被取消了。"

#: ../../whatsnew/3.7.rst:502
#, fuzzy
msgid ""
"More than 255 arguments can now be passed to a function, and a function can "
"now have more than 255 parameters. (Contributed by Serhiy Storchaka in :"
"issue:`12844` and :issue:`18896`.)"
msgstr ""
"現在可以將超過 255 個參數傳遞給一個函式，並且一個函式現在可以有超過 255 "
"個參數。 （由 Serhiy Storchaka 在 :issue:`12844` 和 :issue:`18896` 中貢獻。）"

#: ../../whatsnew/3.7.rst:506
#, fuzzy
msgid ""
":meth:`bytes.fromhex` and :meth:`bytearray.fromhex` now ignore all ASCII "
"whitespace, not only spaces. (Contributed by Robert Xiao in :issue:`28927`.)"
msgstr ""
":meth:`bytes.fromhex` 和 :meth:`bytearray.fromhex` 現在忽略所有 ASCII "
"空格，而不僅僅是空格。 （由 Robert Xiao 在 :issue:`28927` 中貢獻。）"

#: ../../whatsnew/3.7.rst:509
#, fuzzy
msgid ""
":class:`str`, :class:`bytes`, and :class:`bytearray` gained support for the "
"new :meth:`isascii() <str.isascii>` method, which can be used to test if a "
"string or bytes contain only the ASCII characters. (Contributed by INADA "
"Naoki in :issue:`32677`.)"
msgstr ""
":class:`str`、:class:`bytes` 和 :class:`bytearray` 獲得了對新的 "
":meth:`isascii() <str.isascii>` 方法的支援，該方法可用於測試字串是否或 bytes "
"僅包含 ASCII 字元。 （由 INADA Naoki 在 :issue:`32677` 中貢獻。）"

#: ../../whatsnew/3.7.rst:514
#, fuzzy
msgid ""
":exc:`ImportError` now displays module name and module ``__file__`` path "
"when ``from ... import ...`` fails. (Contributed by Matthias Bussonnier in :"
"issue:`29546`.)"
msgstr ""
":exc:`ImportError` 現在在 ``from ... import ...`` 失敗時顯示模組名稱和模組 "
"``__file__`` 路徑。 （由 Matthias Bussonnier 在 :issue:`29546` 中貢獻。）"

#: ../../whatsnew/3.7.rst:518
#, fuzzy
msgid ""
"Circular imports involving absolute imports with binding a submodule to a "
"name are now supported. (Contributed by Serhiy Storchaka in :issue:`30024`.)"
msgstr "現在支援涉及將子模組綁定到名稱的絕對導入的循環導入。 （由 Serhiy Storchaka "
"在 :issue:`30024` 中貢獻。）"

#: ../../whatsnew/3.7.rst:522
#, fuzzy
msgid ""
"``object.__format__(x, '')`` is now equivalent to ``str(x)`` rather than "
"``format(str(self), '')``. (Contributed by Serhiy Storchaka in :issue:"
"`28974`.)"
msgstr ""
"``object.__format__(x, '')`` 現在等同於 ``str(x)`` 而不是 ``format(str(self)"
", '')``。 （由 Serhiy Storchaka 在 :issue:`28974` 中貢獻。）"

#: ../../whatsnew/3.7.rst:526
#, fuzzy
msgid ""
"In order to better support dynamic creation of stack traces, :class:`types."
"TracebackType` can now be instantiated from Python code, and the ``tb_next`` "
"attribute on :ref:`tracebacks <traceback-objects>` is now writable. "
"(Contributed by Nathaniel J. Smith in :issue:`30579`.)"
msgstr ""
"為了更好地支援堆疊跟踪的動態建立，現在可以從 Python 程式碼實例化 types."
"TracebackType，tracebacks <traceback-objects> 上的 tb_next 屬性現在是可寫的. "
"（由 Nathaniel J. Smith 在 :issue:`30579` 中貢獻。）"

#: ../../whatsnew/3.7.rst:532
#, fuzzy
msgid ""
"When using the :option:`-m` switch, ``sys.path[0]`` is now eagerly expanded "
"to the full starting directory path, rather than being left as the empty "
"directory (which allows imports from the *current* working directory at the "
"time when an import occurs) (Contributed by Nick Coghlan in :issue:`33053`.)"
msgstr ""
"使用 :option:`-m` 開關時，``sys.path[0]`` "
"現在急切地擴充到完整的起始目錄路徑，而不是保留為空目錄（允許從 *current* "
"導入發生導入時的工作目錄）（由 Nick Coghlan 在 :issue:`33053` 中貢獻。）"

#: ../../whatsnew/3.7.rst:538
#, fuzzy
msgid ""
"The new :option:`-X` ``importtime`` option or the :envvar:"
"`PYTHONPROFILEIMPORTTIME` environment variable can be used to show the "
"timing of each module import. (Contributed by Inada Naoki in :issue:`31415`.)"
msgstr ""
"新的 :option:`-X` ``importtime`` 選項或 :envvar:`PYTHONPROFILEIMPORTTIME` "
"環境變數可用於顯示每個模組導入的時間。 （由 Inada Naoki 在 :issue:`31415` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:545
msgid "New Modules"
msgstr "新模組"

#: ../../whatsnew/3.7.rst:550
msgid "contextvars"
msgstr "contextvars"

#: ../../whatsnew/3.7.rst:552
#, fuzzy
msgid ""
"The new :mod:`contextvars` module and a set of :ref:`new C APIs "
"<contextvarsobjects>` introduce support for *context variables*.  Context "
"variables are conceptually similar to thread-local variables.  Unlike TLS, "
"context variables support asynchronous code correctly."
msgstr ""
"新的 :mod:`contextvars` 模組和一組 :ref:`new C APIs <contextvarsobjects>` "
"引入了對 *context variables* 的支援。上下文變數在概念上類似於執行緒局部變數。"
"與 TLS 不同，上下文變數正確支援非同步程式碼。"

#: ../../whatsnew/3.7.rst:558
#, fuzzy
msgid ""
"The :mod:`asyncio` and :mod:`decimal` modules have been updated to use and "
"support context variables out of the box.  Particularly the active decimal "
"context is now stored in a context variable, which allows decimal operations "
"to work with the correct context in asynchronous code."
msgstr ""
":mod:`asyncio` 和 :mod:`decimal` 模組已更新為使用和支援開箱即用的上下文變數。"
"特別是活動十進位上下文現在儲存在上下文變數中，這允許十進位操作在非同步程式碼"
"中使用正確的上下文。"

#: ../../whatsnew/3.7.rst:565
#, fuzzy
msgid ":pep:`567` -- Context Variables"
msgstr ":pep:`567` -- 上下文變數"

#: ../../whatsnew/3.7.rst:566
msgid "PEP written and implemented by Yury Selivanov"
msgstr "由 Yury Selivanov 撰寫 PEP 與實作"

#: ../../whatsnew/3.7.rst:572
msgid "dataclasses"
msgstr "dataclasses"

#: ../../whatsnew/3.7.rst:574
#, fuzzy
msgid ""
"The new :func:`~dataclasses.dataclass` decorator provides a way to declare "
"*data classes*.  A data class describes its attributes using class variable "
"annotations.  Its constructor and other magic methods, such as :meth:"
"`~object.__repr__`, :meth:`~object.__eq__`, and :meth:`~object.__hash__` are "
"generated automatically."
msgstr ""
"新的 :func:`~dataclasses.dataclass` 裝飾器提供了一種聲明*資料類*的方法。資料"
"類使用類變數註釋來描述其屬性。它的構造函式和其他魔術方法，例如 :meth:`~object"
".__repr__`、:meth:`~object.__eq__` 和 :meth:`~object.__hash__` 是自動生成的。"

#: ../../whatsnew/3.7.rst:580
msgid "Example::"
msgstr ""
"範例：\n"
"\n"
"::"

#: ../../whatsnew/3.7.rst:593
#, fuzzy
msgid ":pep:`557` -- Data Classes"
msgstr ":pep:`557` -- 資料類"

#: ../../whatsnew/3.7.rst:594
msgid "PEP written and implemented by Eric V. Smith"
msgstr "由 Eric V. Smith 撰寫 PEP 與實作"

#: ../../whatsnew/3.7.rst:600
msgid "importlib.resources"
msgstr "importlib.resources"

#: ../../whatsnew/3.7.rst:602
#, fuzzy
msgid ""
"The new :mod:`importlib.resources` module provides several new APIs and one "
"new ABC for access to, opening, and reading *resources* inside packages. "
"Resources are roughly similar to files inside packages, but they needn't be "
"actual files on the physical file system.  Module loaders can provide a :"
"meth:`get_resource_reader()` function which returns a :class:`importlib.abc."
"ResourceReader` instance to support this new API.  Built-in file path "
"loaders and zip file loaders both support this."
msgstr ""
"新的 :mod:`importlib.resources` 模組提供了幾個新的 API 和一個新的 "
"ABC，用於訪問、打開和讀取包內的 "
"*resources*。資源大致類似於包內的文件，但它們不必是物理文件系統上的實際文件。"
"模組加載器可以提供一個 :meth:`get_resource_reader()` 函式回傳一個 "
":class:`importlib.abc.ResourceReader` 實例來支援這個新的 API。"
"內建文件路徑加載器和 zip 文件加載器都支援這一點。"

#: ../../whatsnew/3.7.rst:610
#, fuzzy
msgid "Contributed by Barry Warsaw and Brett Cannon in :issue:`32248`."
msgstr "由 Barry Warsaw 和 Brett Cannon 在 :issue:`32248` 中貢獻。"

#: ../../whatsnew/3.7.rst:614
#, fuzzy
msgid ""
"`importlib_resources <https://importlib-resources.readthedocs.io/en/latest/"
">`_ -- a PyPI backport for earlier Python versions."
msgstr ""
"`importlib_resources <https://importlib-resources.readthedocs.io/en/latest/>`"
"_ -- 早期 Python 版本的 PyPI backport。"

#: ../../whatsnew/3.7.rst:619
#, fuzzy
msgid "Improved Modules"
msgstr "改進模組"

#: ../../whatsnew/3.7.rst:623
msgid "argparse"
msgstr "argparse"

#: ../../whatsnew/3.7.rst:625
#, fuzzy
msgid ""
"The new :meth:`ArgumentParser.parse_intermixed_args() <argparse."
"ArgumentParser.parse_intermixed_args>` method allows intermixing options and "
"positional arguments. (Contributed by paul.j3 in :issue:`14191`.)"
msgstr ""
"新的 ArgumentParser.parse_intermixed_args() "
"<argparse.ArgumentParser.parse_intermixed_args> 方法允許混合選項和位置參數。 "
"（由 paul.j3 在 :issue:`14191` 中貢獻。）"

#: ../../whatsnew/3.7.rst:634 ../../whatsnew/3.7.rst:1951
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.7.rst:636
#, fuzzy
msgid ""
"The :mod:`asyncio` module has received many new features, usability and :ref:"
"`performance improvements <whatsnew37-asyncio-perf>`.  Notable changes "
"include:"
msgstr ""
":mod:`asyncio` 模組獲得了許多新功能、可用性和 :ref:`性能改進 <whatsnew37"
"-asyncio-perf>`。顯著變化包括："

#: ../../whatsnew/3.7.rst:640
#, fuzzy
msgid ""
"The new :term:`provisional <provisional API>` :func:`asyncio.run` function "
"can be used to run a coroutine from synchronous code by automatically "
"creating and destroying the event loop. (Contributed by Yury Selivanov in :"
"issue:`32314`.)"
msgstr ""
"新的 :term:`provisional <provisional API>` :func:`asyncio.run` "
"函式可用於通過自動建立和銷毀事件循環來從同步程式碼運行協程。 （由 Yury "
"Selivanov 在 :issue:`32314` 中貢獻。）"

#: ../../whatsnew/3.7.rst:645
#, fuzzy
msgid ""
"asyncio gained support for :mod:`contextvars`. :meth:`loop.call_soon() "
"<asyncio.loop.call_soon>`, :meth:`loop.call_soon_threadsafe() <asyncio.loop."
"call_soon_threadsafe>`, :meth:`loop.call_later() <asyncio.loop."
"call_later>`, :meth:`loop.call_at() <asyncio.loop.call_at>`, and :meth:"
"`Future.add_done_callback() <asyncio.Future.add_done_callback>` have a new "
"optional keyword-only *context* parameter. :class:`Tasks <asyncio.Task>` now "
"track their context automatically. See :pep:`567` for more details. "
"(Contributed by Yury Selivanov in :issue:`32436`.)"
msgstr ""
"asyncio 獲得了對 :mod:`contextvars` 的支援。 :meth:`loop.call_soon() <asyncio"
".loop.call_soon>`, :meth:`loop.call_soon_threadsafe() <asyncio.loop."
"call_soon_threadsafe>`, :meth:`loop.call_later() <asyncio.loop. "
"call_later>`、:meth:`loop.call_at() <asyncio.loop.call_at>` 和 :meth:`Future."
"add_done_callback() <asyncio.Future.add_done_callback>` 有一個新的可選關鍵字-"
"only *context*範圍。 :class:`Tasks <asyncio.Task>` "
"現在自動跟踪它們的上下文。有關更多詳細資訊，請參見 :pep:`567`。 （由 Yury "
"Selivanov 在 :issue:`32436` 中貢獻。）"

#: ../../whatsnew/3.7.rst:656
#, fuzzy
msgid ""
"The new :func:`asyncio.create_task` function has been added as a shortcut to "
"``asyncio.get_event_loop().create_task()``. (Contributed by Andrew Svetlov "
"in :issue:`32311`.)"
msgstr ""
"新的 :func:`asyncio.create_task` 函式已新增為 ``asyncio.get_event_loop()."
"create_task()`` 的快捷方式。 （由 Andrew Svetlov 在 :issue:`32311` 中貢獻。）"

#: ../../whatsnew/3.7.rst:660
#, fuzzy
msgid ""
"The new :meth:`loop.start_tls() <asyncio.loop.start_tls>` method can be used "
"to upgrade an existing connection to TLS. (Contributed by Yury Selivanov in :"
"issue:`23749`.)"
msgstr ""
"新的 :meth:`loop.start_tls() <asyncio.loop.start_tls>` "
"方法可用於將現有連接升級到 TLS。 （由 Yury Selivanov 在 :issue:`23749` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:664
#, fuzzy
msgid ""
"The new :meth:`loop.sock_recv_into() <asyncio.loop.sock_recv_into>` method "
"allows reading data from a socket directly into a provided buffer making it "
"possible to reduce data copies. (Contributed by Antoine Pitrou in :issue:"
"`31819`.)"
msgstr ""
"新的 :meth:`loop.sock_recv_into() <asyncio.loop.sock_recv_into>` "
"方法允許將資料從 socket 直接讀取到提供的緩衝區中，從而可以減少資料副本。 （由 "
"Antoine Pitrou 在 :issue:`31819` 中貢獻。）"

#: ../../whatsnew/3.7.rst:669
#, fuzzy
msgid ""
"The new :func:`asyncio.current_task` function returns the currently running :"
"class:`~asyncio.Task` instance, and the new :func:`asyncio.all_tasks` "
"function returns a set of all existing ``Task`` instances in a given loop. "
"The :meth:`Task.current_task() <asyncio.Task.current_task>` and :meth:`Task."
"all_tasks() <asyncio.Task.all_tasks>` methods have been deprecated. "
"(Contributed by Andrew Svetlov in :issue:`32250`.)"
msgstr ""
"新的 :func:`asyncio.current_task` 函式回傳當前運行的 :class:`~asyncio.Task` "
"實例，新的 :func:`asyncio.all_tasks` 函式回傳一組所有現有的 ``Task`` "
"實例在給定的循環中。 Task.current_task() <asyncio.Task.current_task> 和 Task."
"all_tasks() <asyncio.Task.all_tasks> 方法已被棄用。 （由 Andrew Svetlov 在 "
":issue:`32250` 中貢獻。）"

#: ../../whatsnew/3.7.rst:676
#, fuzzy
msgid ""
"The new *provisional* :class:`~asyncio.BufferedProtocol` class allows "
"implementing streaming protocols with manual control over the receive "
"buffer. (Contributed by Yury Selivanov in :issue:`32251`.)"
msgstr ""
"新的 *provisional* :class:`~asyncio.BufferedProtocol` "
"類允許通過手動控制接收緩衝區來實作流協定。 （由 Yury Selivanov 在 "
":issue:`32251` 中貢獻。）"

#: ../../whatsnew/3.7.rst:680
#, fuzzy
msgid ""
"The new :func:`asyncio.get_running_loop` function returns the currently "
"running loop, and raises a :exc:`RuntimeError` if no loop is running. This "
"is in contrast with :func:`asyncio.get_event_loop`, which will *create* a "
"new event loop if none is running. (Contributed by Yury Selivanov in :issue:"
"`32269`.)"
msgstr ""
"新的 :func:`asyncio.get_running_loop` 函式回傳當前正在運行的循環，"
"並在沒有循環運行時引發 :exc:`RuntimeError`。這與 :func:`asyncio."
"get_event_loop` 形成對比，如果沒有運行，它將*建立*一個新的事件循環。 （由 "
"Yury Selivanov 在 :issue:`32269` 中貢獻。）"

#: ../../whatsnew/3.7.rst:686
#, fuzzy
msgid ""
"The new :meth:`StreamWriter.wait_closed() <asyncio.StreamWriter."
"wait_closed>` coroutine method allows waiting until the stream writer is "
"closed.  The new :meth:`StreamWriter.is_closing() <asyncio.StreamWriter."
"is_closing>` method can be used to determine if the writer is closing. "
"(Contributed by Andrew Svetlov in :issue:`32391`.)"
msgstr ""
"新的 :meth:`StreamWriter.wait_closed() <asyncio.StreamWriter.wait_closed>` "
"協程方法允許等待流寫入器關閉。新的 :meth:`StreamWriter.is_closing() <asyncio."
"StreamWriter.is_closing>` 方法可用於確定編寫器是否正在關閉。 （由 Andrew "
"Svetlov 在 :issue:`32391` 中貢獻。）"

#: ../../whatsnew/3.7.rst:692
#, fuzzy
msgid ""
"The new :meth:`loop.sock_sendfile() <asyncio.loop.sock_sendfile>` coroutine "
"method allows sending files using :mod:`os.sendfile` when possible. "
"(Contributed by Andrew Svetlov in :issue:`32410`.)"
msgstr ""
"新的 :meth:`loop.sock_sendfile() <asyncio.loop.sock_sendfile>` "
"協程方法允許在可能的情況下使用 :mod:`os.sendfile` 發送文件。 （由 Andrew "
"Svetlov 在 :issue:`32410` 中貢獻。）"

#: ../../whatsnew/3.7.rst:696
#, fuzzy
msgid ""
"The new :meth:`Future.get_loop() <asyncio.Future.get_loop>` and ``Task."
"get_loop()`` methods return the instance of the loop on which a task or a "
"future were created. :meth:`Server.get_loop() <asyncio.Server.get_loop>` "
"allows doing the same for :class:`asyncio.Server` objects. (Contributed by "
"Yury Selivanov in :issue:`32415` and Srinivas Reddy Thatiparthy in :issue:"
"`32418`.)"
msgstr ""
"新的 Future.get_loop() <asyncio.Future.get_loop> 和 Task.get_loop() "
"方法回傳建立任務或未來的循環實例。 :meth:`Server.get_loop() <asyncio.Server."
"get_loop>` 允許對 :class:`asyncio.Server` 對像做同樣的事情。 （由 Yury "
"Selivanov 在 :issue:`32415` 和 Srinivas Reddy Thatiparthy 在 :issue:`32418` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:704
#, fuzzy
msgid ""
"It is now possible to control how instances of :class:`asyncio.Server` begin "
"serving.  Previously, the server would start serving immediately when "
"created. The new *start_serving* keyword argument to :meth:`loop."
"create_server() <asyncio.loop.create_server>` and :meth:`loop."
"create_unix_server() <asyncio.loop.create_unix_server>`, as well as :meth:"
"`Server.start_serving() <asyncio.Server.start_serving>`, and :meth:`Server."
"serve_forever() <asyncio.Server.serve_forever>` can be used to decouple "
"server instantiation and serving.  The new :meth:`Server.is_serving() "
"<asyncio.Server.is_serving>` method returns ``True`` if the server is "
"serving.  :class:`~asyncio.Server` objects are now asynchronous context "
"managers::"
msgstr ""
"現在可以控制 :class:`asyncio.Server` "
"的實例如何開始服務。以前，伺服器會在建立後立即開始服務。 :meth:`loop."
"create_server() <asyncio.loop.create_server>` 和 :meth:`loop."
"create_unix_server() <asyncio.loop.create_unix_server>` 的新 *start_serving* "
"關鍵字參數，以及 :meth: `Server.start_serving() <asyncio.Server."
"start_serving>` 和 :meth:`Server.serve_forever() <asyncio.Server."
"serve_forever>` "
"可用於分離伺服器實例化和服務。如果伺服器正在服務，新的 :meth:`Server."
"is_serving() <asyncio.Server.is_serving>` 方法回傳 ``True``。 "
":class:`~asyncio.Server` 物件現在是非同步上下文管理器::"

#: ../../whatsnew/3.7.rst:723
#, fuzzy
msgid "(Contributed by Yury Selivanov in :issue:`32662`.)"
msgstr "（由 Yury Selivanov 在 :issue:`32662` 中貢獻。）"

#: ../../whatsnew/3.7.rst:725
#, fuzzy
msgid ""
"Callback objects returned by :func:`loop.call_later() <asyncio.loop."
"call_later>` gained the new :meth:`when() <asyncio.TimerHandle.when>` method "
"which returns an absolute scheduled callback timestamp. (Contributed by "
"Andrew Svetlov in :issue:`32741`.)"
msgstr ""
":func:`loop.call_later() <asyncio.loop.call_later>` "
"回傳的回呼物件獲得了新的 :meth:`when() <asyncio.TimerHandle.when>` "
"方法，該方法回傳絕對計劃的回呼時間戳。 （由 Andrew Svetlov 在 :issue:`32741` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:731
#, fuzzy
msgid ""
"The :meth:`loop.create_datagram_endpoint() \\ <asyncio.loop."
"create_datagram_endpoint>` method gained support for Unix sockets. "
"(Contributed by Quentin Dawans in :issue:`31245`.)"
msgstr ""
":meth:`loop.create_datagram_endpoint() \\ <asyncio.loop."
"create_datagram_endpoint>` 方法獲得了對 Unix  socket 的支援。 （由 Quentin "
"Dawans 在 :issue:`31245` 中貢獻。）"

#: ../../whatsnew/3.7.rst:736
#, fuzzy
msgid ""
"The :func:`asyncio.open_connection`, :func:`asyncio.start_server` "
"functions, :meth:`loop.create_connection() <asyncio.loop."
"create_connection>`, :meth:`loop.create_server() <asyncio.loop."
"create_server>`, :meth:`loop.create_accepted_socket() <asyncio.loop."
"connect_accepted_socket>` methods and their corresponding UNIX socket "
"variants now accept the *ssl_handshake_timeout* keyword argument. "
"(Contributed by Neil Aspinall in :issue:`29970`.)"
msgstr ""
":func:`asyncio.open_connection`、:func:`asyncio.start_server` "
"函式、:meth:`loop.create_connection() <asyncio.loop."
"create_connection>`、:meth:`loop.create_server() <asyncio. loop."
"create_server>`, :meth:`loop.create_accepted_socket() <asyncio.loop."
"connect_accepted_socket>` 方法及其相應的 UNIX  socket 變體現在接受 "
"*ssl_handshake_timeout* 關鍵字參數。 （由 Neil Aspinall 在 :issue:`29970` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:744
#, fuzzy
msgid ""
"The new :meth:`Handle.cancelled() <asyncio.Handle.cancelled>` method returns "
"``True`` if the callback was cancelled. (Contributed by Marat Sharafutdinov "
"in :issue:`31943`.)"
msgstr ""
"如果回呼被取消，新的 :meth:`Handle.cancelled() <asyncio.Handle.cancelled>` "
"方法回傳 ``True``。 （由 Marat Sharafutdinov 在 :issue:`31943` 中貢獻。）"

#: ../../whatsnew/3.7.rst:748
#, fuzzy
msgid ""
"The asyncio source has been converted to use the :keyword:`async`/:keyword:"
"`await` syntax. (Contributed by Andrew Svetlov in :issue:`32193`.)"
msgstr ""
"asyncio 源已轉換為使用 :keyword:`async`/:keyword:`await` 語法。 （由 Andrew "
"Svetlov 在 :issue:`32193` 中貢獻。）"

#: ../../whatsnew/3.7.rst:752
#, fuzzy
msgid ""
"The new :meth:`ReadTransport.is_reading() <asyncio.ReadTransport."
"is_reading>` method can be used to determine the reading state of the "
"transport. Additionally, calls to :meth:`ReadTransport.resume_reading() "
"<asyncio.ReadTransport.resume_reading>` and :meth:`ReadTransport."
"pause_reading() <asyncio.ReadTransport.pause_reading>` are now idempotent. "
"(Contributed by Yury Selivanov in :issue:`32356`.)"
msgstr ""
"新的 :meth:`ReadTransport.is_reading() <asyncio.ReadTransport.is_reading>` "
"方法可用於確定傳輸的讀取狀態。此外，對 ReadTransport.resume_reading() "
"<asyncio.ReadTransport.resume_reading> 和 ReadTransport.pause_reading() "
"<asyncio.ReadTransport.pause_reading> 的呼叫現在是冪等的。 （由 Yury "
"Selivanov 在 :issue:`32356` 中貢獻。）"

#: ../../whatsnew/3.7.rst:760
#, fuzzy
msgid ""
"Loop methods which accept socket paths now support passing :term:`path-like "
"objects <path-like object>`. (Contributed by Yury Selivanov in :issue:"
"`32066`.)"
msgstr ""
"接受 socket 路徑的循環方法現在支援傳遞 :term:`path-like objects <path-like "
"object>`。 （由 Yury Selivanov 在 :issue:`32066` 中貢獻。）"

#: ../../whatsnew/3.7.rst:764
#, fuzzy
msgid ""
"In :mod:`asyncio` TCP sockets on Linux are now created with ``TCP_NODELAY`` "
"flag set by default. (Contributed by Yury Selivanov and Victor Stinner in :"
"issue:`27456`.)"
msgstr ""
"在 :mod:`asyncio` 中，Linux 上的 TCP  socket 現在建立時預設設定了 "
"``TCP_NODELAY`` 旗標。 （由 Yury Selivanov 和 Victor Stinner 在 "
":issue:`27456` 中貢獻。）"

#: ../../whatsnew/3.7.rst:768
#, fuzzy
msgid ""
"Exceptions occurring in cancelled tasks are no longer logged. (Contributed "
"by Yury Selivanov in :issue:`30508`.)"
msgstr "取消的任務中發生的例外不再被記錄。 （由 Yury Selivanov 在 :issue:`30508` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:771
#, fuzzy
msgid ""
"New ``WindowsSelectorEventLoopPolicy`` and "
"``WindowsProactorEventLoopPolicy`` classes. (Contributed by Yury Selivanov "
"in :issue:`33792`.)"
msgstr ""
"新的 ``WindowsSelectorEventLoopPolicy`` 和 ``WindowsProactorEventLoopPolicy`` 類。 （"
"由 Yury Selivanov 在 :issue:`33792` 中貢獻。）"

#: ../../whatsnew/3.7.rst:775
#, fuzzy
msgid ""
"Several ``asyncio`` APIs have been :ref:`deprecated <whatsnew37-asyncio-"
"deprecated>`."
msgstr "幾個 ``asyncio`` API 已被棄用 <whatsnew37-asyncio-deprecated>`。"

#: ../../whatsnew/3.7.rst:780
msgid "binascii"
msgstr "binascii"

#: ../../whatsnew/3.7.rst:782
#, fuzzy
msgid ""
"The :func:`~binascii.b2a_uu` function now accepts an optional *backtick* "
"keyword argument.  When it's true, zeros are represented by ``'`'`` instead "
"of spaces.  (Contributed by Xiang Zhang in :issue:`30103`.)"
msgstr ""
":func:`~binascii.b2a_uu` 函式現在接受一個可選的 *backtick* "
"關鍵字參數。當它為真時，零由 ``'`'`` 而不是空格表示。 （由 Xiang Zhang 在 "
":issue:`30103` 中貢獻。）"

#: ../../whatsnew/3.7.rst:788
msgid "calendar"
msgstr "calendar"

#: ../../whatsnew/3.7.rst:790
#, fuzzy
msgid ""
"The :class:`~calendar.HTMLCalendar` class has new class attributes which "
"ease the customization of CSS classes in the produced HTML calendar. "
"(Contributed by Oz Tiram in :issue:`30095`.)"
msgstr ""
":class:`~calendar.HTMLCalendar` 類具有新的類屬性，可以簡化生成的 HTML 日曆中 "
"CSS 類的自定義。 （由 Oz Tiram 在 :issue:`30095` 中貢獻。）"

#: ../../whatsnew/3.7.rst:796 ../../whatsnew/3.7.rst:1965
msgid "collections"
msgstr "collections"

#: ../../whatsnew/3.7.rst:798
#, fuzzy
msgid ""
"``collections.namedtuple()`` now supports default values. (Contributed by "
"Raymond Hettinger in :issue:`32320`.)"
msgstr ""
"``collections.namedtuple()`` 現在支援預設值。 （由 Raymond Hettinger 在 "
":issue:`32320` 中貢獻。）"

#: ../../whatsnew/3.7.rst:803
msgid "compileall"
msgstr "compileall"

#: ../../whatsnew/3.7.rst:805
#, fuzzy
msgid ""
":func:`compileall.compile_dir` learned the new *invalidation_mode* "
"parameter, which can be used to enable :ref:`hash-based .pyc invalidation "
"<whatsnew37-pep552>`.  The invalidation mode can also be specified on the "
"command line using the new ``--invalidation-mode`` argument. (Contributed by "
"Benjamin Peterson in :issue:`31650`.)"
msgstr ""
":func:`compileall.compile_dir` 了解了新的 *invalidation_mode* "
"參數，可用於啟用 :ref:`基於雜湊的 .pyc 失效 "
"<whatsnew37-pep552>`。也可以使用新的“--invalidation-"
"mode”參數在命令列上指定失效模式。 （由 Benjamin Peterson 在 :issue:`31650` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:814
msgid "concurrent.futures"
msgstr "concurrent.futures"

#: ../../whatsnew/3.7.rst:816
#, fuzzy
msgid ""
":class:`ProcessPoolExecutor <concurrent.futures.ProcessPoolExecutor>` and :"
"class:`ThreadPoolExecutor <concurrent.futures.ThreadPoolExecutor>` now "
"support the new *initializer* and *initargs* constructor arguments. "
"(Contributed by Antoine Pitrou in :issue:`21423`.)"
msgstr ""
":class:`ProcessPoolExecutor <concurrent.futures.ProcessPoolExecutor>` 和 "
":class:`ThreadPoolExecutor <concurrent.futures.ThreadPoolExecutor>` "
"現在支援新的 *initializer* 和 *initargs* 構造函式參數。 （由 Antoine Pitrou "
"在 :issue:`21423` 中貢獻。）"

#: ../../whatsnew/3.7.rst:821
#, fuzzy
msgid ""
"The :class:`ProcessPoolExecutor <concurrent.futures.ProcessPoolExecutor>` "
"can now take the multiprocessing context via the new *mp_context* argument. "
"(Contributed by Thomas Moreau in :issue:`31540`.)"
msgstr ""
":class:`ProcessPoolExecutor <concurrent.futures.ProcessPoolExecutor>` "
"現在可以通過新的 *mp_context* 參數獲取多處理上下文。 （由 Thomas Moreau 在 "
":issue:`31540` 中貢獻。）"

#: ../../whatsnew/3.7.rst:827
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.7.rst:829
#, fuzzy
msgid ""
"The new :func:`~contextlib.nullcontext` is a simpler and faster no-op "
"context manager than :class:`~contextlib.ExitStack`. (Contributed by Jesse-"
"Bakker in :issue:`10049`.)"
msgstr ""
"新的 :func:`~contextlib.nullcontext` 是一個比 :class:`~contextlib.ExitStack` "
"更簡單、更快的無操作上下文管理器。 （由 Jesse-Bakker 在 :issue:`10049` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:833
#, fuzzy
msgid ""
"The new :func:`~contextlib.asynccontextmanager`, :class:`~contextlib."
"AbstractAsyncContextManager`, and :class:`~contextlib.AsyncExitStack` have "
"been added to complement their synchronous counterparts.  (Contributed by "
"Jelle Zijlstra in :issue:`29679` and :issue:`30241`, and by Alexander Mohr "
"and Ilya Kulakov in :issue:`29302`.)"
msgstr ""
"新增了新的 :func:`~contextlib.asynccontextmanager`、:class:`~contextlib."
"AbstractAsyncContextManager` 和 :class:`~contextlib.AsyncExitStack` "
"來補充它們的同步副本。 （由 Jelle Zijlstra 在 :issue:`29679` 和 "
":issue:`30241` 以及 Alexander Mohr 和 Ilya Kulakov 在 :issue:`29302` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:842
msgid "cProfile"
msgstr "cProfile"

#: ../../whatsnew/3.7.rst:844
#, fuzzy
msgid ""
"The :mod:`cProfile` command line now accepts ``-m module_name`` as an "
"alternative to script path.  (Contributed by Sanyam Khurana in :issue:"
"`21862`.)"
msgstr ""
":mod:`cProfile` 命令列現在接受 ``-m module_name`` 作為腳本路徑的替代。 （由 "
"Sanyam Khurana 在 :issue:`21862` 中貢獻。）"

#: ../../whatsnew/3.7.rst:849
msgid "crypt"
msgstr "crypt"

#: ../../whatsnew/3.7.rst:851
#, fuzzy
msgid ""
"The :mod:`crypt` module now supports the Blowfish hashing method. "
"(Contributed by Serhiy Storchaka in :issue:`31664`.)"
msgstr ""
":mod:`crypt` 模組現在支援 Blowfish 雜湊方法。 （由 Serhiy Storchaka 在 "
":issue:`31664` 中貢獻。）"

#: ../../whatsnew/3.7.rst:854
#, fuzzy
msgid ""
"The :func:`~crypt.mksalt` function now allows specifying the number of "
"rounds for hashing.  (Contributed by Serhiy Storchaka in :issue:`31702`.)"
msgstr ""
":func:`~crypt.mksalt` 函式現在允許指定散列的輪數。 （由 Serhiy Storchaka 在 "
":issue:`31702` 中貢獻。）"

#: ../../whatsnew/3.7.rst:859
msgid "datetime"
msgstr "datetime"

#: ../../whatsnew/3.7.rst:861
#, fuzzy
msgid ""
"The new :meth:`datetime.fromisoformat() <datetime.datetime.fromisoformat>` "
"method constructs a :class:`~datetime.datetime` object from a string in one "
"of the formats output by :meth:`datetime.isoformat() <datetime.datetime."
"isoformat>`. (Contributed by Paul Ganssle in :issue:`15873`.)"
msgstr ""
"新的 :meth:`datetime.fromisoformat() <datetime.datetime.fromisoformat>` "
"方法從一個字串構造一個 :class:`~datetime.datetime` 物件，格式之一是 "
":meth:`datetime.isoformat( ) <日期時間.日期時間.isoformat>`。 （由 Paul "
"Ganssle 在 :issue:`15873` 中貢獻。）"

#: ../../whatsnew/3.7.rst:867
#, fuzzy
msgid ""
"The :class:`tzinfo <datetime.tzinfo>` class now supports sub-minute offsets. "
"(Contributed by Alexander Belopolsky in :issue:`5288`.)"
msgstr ""
":class:`tzinfo <datetime.tzinfo>` 類現在支援亞分鐘偏移量。 （由 Alexander "
"Belopolsky 在 :issue:`5288` 中貢獻。）"

#: ../../whatsnew/3.7.rst:872 ../../whatsnew/3.7.rst:1975
msgid "dbm"
msgstr "dbm"

#: ../../whatsnew/3.7.rst:874
#, fuzzy
msgid ""
":mod:`dbm.dumb` now supports reading read-only files and no longer writes "
"the index file when it is not changed."
msgstr ":mod:`dbm.dumb` 現在支援讀取只讀文件，並且在未更改時不再寫入索引文件。"

#: ../../whatsnew/3.7.rst:879
msgid "decimal"
msgstr "decimal"

#: ../../whatsnew/3.7.rst:881
#, fuzzy
msgid ""
"The :mod:`decimal` module now uses :ref:`context variables <whatsnew37-"
"pep567>` to store the decimal context. (Contributed by Yury Selivanov in :"
"issue:`32630`.)"
msgstr ""
":mod:`decimal` 模組現在使用 :ref:`context variables <whatsnew37-pep567>` "
"來儲存十進位上下文。 （由 Yury Selivanov 在 :issue:`32630` 中貢獻。）"

#: ../../whatsnew/3.7.rst:887
msgid "dis"
msgstr "dis"

#: ../../whatsnew/3.7.rst:889
#, fuzzy
msgid ""
"The :func:`~dis.dis` function is now able to disassemble nested code objects "
"(the code of comprehensions, generator expressions and nested functions, and "
"the code used for building nested classes).  The maximum depth of "
"disassembly recursion is controlled by the new *depth* parameter. "
"(Contributed by Serhiy Storchaka in :issue:`11822`.)"
msgstr ""
":func:`~dis.dis` 函式現在可以反彙編嵌套程式碼物件（理解、生成器表達式和嵌套函"
"式的程式碼，以及用於構建嵌套類的程式碼）。反彙編遞迴的最大深度由新的 *depth* "
"參數控制。 （由 Serhiy Storchaka 在 :issue:`11822` 中貢獻。）"

#: ../../whatsnew/3.7.rst:898
msgid "distutils"
msgstr "distutils"

#: ../../whatsnew/3.7.rst:900
#, fuzzy
msgid ""
"``README.rst`` is now included in the list of distutils standard READMEs and "
"therefore included in source distributions. (Contributed by Ryan Gonzalez "
"in :issue:`11913`.)"
msgstr ""
"``README.rst`` 現在包含在 distutils 標準 README "
"列表中，因此包含在源程式碼分發中。 （由 Ryan Gonzalez 在 :issue:`11913` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:906 ../../whatsnew/3.7.rst:1985
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.7.rst:908
#, fuzzy
msgid ""
"The :class:`Enum <enum.Enum>` learned the new ``_ignore_`` class property, "
"which allows listing the names of properties which should not become enum "
"members. (Contributed by Ethan Furman in :issue:`31801`.)"
msgstr ""
":class:`Enum <enum.Enum>` 學習了新的 ``_ignore_`` "
"類屬性，它允許列出不應成為枚舉成員的屬性的名稱。 （由 Ethan Furman 在 "
":issue:`31801` 中貢獻。）"

#: ../../whatsnew/3.7.rst:913
#, fuzzy
msgid ""
"In Python 3.8, attempting to check for non-Enum objects in :class:`Enum` "
"classes will raise a :exc:`TypeError` (e.g. ``1 in Color``); similarly, "
"attempting to check for non-Flag objects in a :class:`Flag` member will "
"raise :exc:`TypeError` (e.g. ``1 in Perm.RW``); currently, both operations "
"return :const:`False` instead and are deprecated. (Contributed by Ethan "
"Furman in :issue:`33217`.)"
msgstr ""
"在 Python 3.8 中，嘗試檢查 Enum 類中的非 Enum 物件將引發 TypeError（例如，"
"Color 中的 1）；同樣，嘗試檢查 :class:`Flag` 成員中的非 Flag 物件將引發 "
":exc:`TypeError`（例如 ``Perm.RW 中的 1``）；目前，這兩個操作都回傳 "
":const:`False` 並且已被棄用。 （由 Ethan Furman 在 :issue:`33217` 中貢獻。）"

#: ../../whatsnew/3.7.rst:922
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.7.rst:924
#, fuzzy
msgid ""
":func:`functools.singledispatch` now supports registering implementations "
"using type annotations. (Contributed by Łukasz Langa in :issue:`32227`.)"
msgstr ""
":func:`functools.singledispatch` 現在支援使用型別註釋註冊實作。 （由 Łukasz "
"Langa 在 :issue:`32227` 中貢獻。）"

#: ../../whatsnew/3.7.rst:930
msgid "gc"
msgstr "gc"

#: ../../whatsnew/3.7.rst:932
#, fuzzy
msgid ""
"The new :func:`gc.freeze` function allows freezing all objects tracked by "
"the garbage collector and excluding them from future collections. This can "
"be used before a POSIX ``fork()`` call to make the GC copy-on-write friendly "
"or to speed up collection.  The new :func:`gc.unfreeze` functions reverses "
"this operation.  Additionally, :func:`gc.get_freeze_count` can be used to "
"obtain the number of frozen objects. (Contributed by Li Zekun in :issue:"
"`31558`.)"
msgstr ""
"新的 :func:`gc.freeze` "
"函式允許凍結垃圾收集器跟踪的所有物件，並將它們從未來的收集中排除。這可以在 "
"POSIX ``fork()`` 呼叫之前使用，以使 GC 寫時復制友好或加速收集。新的 :func:`gc"
".unfreeze` 函式反轉了這個操作。此外，:func:`gc.get_freeze_count` "
"可用於獲取凍結物件的數量。 （由李澤坤貢獻於 :issue:`31558`。）"

#: ../../whatsnew/3.7.rst:942
msgid "hmac"
msgstr "hmac"

#: ../../whatsnew/3.7.rst:944
#, fuzzy
msgid ""
"The :mod:`hmac` module now has an optimized one-shot :func:`~hmac.digest` "
"function, which is up to three times faster than :func:`~hmac.HMAC`. "
"(Contributed by Christian Heimes in :issue:`32433`.)"
msgstr ""
":mod:`hmac` 模組現在有一個最佳化的一次性 :func:`~hmac.digest` 函式，比 "
":func:`~hmac.HMAC` 快三倍。 （由 Christian Heimes 在 :issue:`32433` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:950
msgid "http.client"
msgstr "http.client"

#: ../../whatsnew/3.7.rst:952
#, fuzzy
msgid ""
":class:`~http.client.HTTPConnection` and :class:`~http.client."
"HTTPSConnection` now support the new *blocksize* argument for improved "
"upload throughput. (Contributed by Nir Soffer in :issue:`31945`.)"
msgstr ""
":class:`~http.client.HTTPConnection` 和 :class:`~http.client.HTTPSConnection`"
" 現在支援新的 *blocksize* 參數以提高上傳吞吐量。 （由 Nir "
"Soffer 在 :issue:`31945` 中貢獻。）"

#: ../../whatsnew/3.7.rst:958
msgid "http.server"
msgstr "http.server"

#: ../../whatsnew/3.7.rst:960
#, fuzzy
msgid ""
":class:`~http.server.SimpleHTTPRequestHandler` now supports the HTTP ``If-"
"Modified-Since`` header.  The server returns the 304 response status if the "
"target file was not modified after the time specified in the header. "
"(Contributed by Pierre Quentel in :issue:`29654`.)"
msgstr ""
":class:`~http.server.SimpleHTTPRequestHandler` 現在支援 HTTP ``If-Modified-"
"Since`` 標頭。如果目標文件在標頭中指定的時間後未被修改，則伺服器回傳 304 "
"響應狀態。 （由 Pierre Quentel 在 :issue:`29654` 中貢獻。）"

#: ../../whatsnew/3.7.rst:965
#, fuzzy
msgid ""
":class:`~http.server.SimpleHTTPRequestHandler` accepts the new *directory* "
"argument, in addition to the new ``--directory`` command line argument. With "
"this parameter, the server serves the specified directory, by default it "
"uses the current working directory. (Contributed by Stéphane Wirtel and "
"Julien Palard in :issue:`28707`.)"
msgstr ""
":class:`~http.server.SimpleHTTPRequestHandler` 接受新的 *directory* 參數，"
"以及新的 `--directory`` "
"命令列參數。使用此參數，伺服器提供指定目錄，預設情況下它使用當前工作目錄。 （"
"由 Stéphane Wirtel 和 Julien Palard 在 :issue:`28707` 中貢獻。）"

#: ../../whatsnew/3.7.rst:971
#, fuzzy
msgid ""
"The new :class:`ThreadingHTTPServer <http.server.ThreadingHTTPServer>` class "
"uses threads to handle requests using :class:`~socketserver.ThreadingMixin`. "
"It is used when ``http.server`` is run with ``-m``. (Contributed by Julien "
"Palard in :issue:`31639`.)"
msgstr ""
"新的 :class:`ThreadingHTTPServer <http.server.ThreadingHTTPServer>` "
"類使用執行緒來處理使用 :class:`~socketserver.ThreadingMixin` 的請求。它在 "
"``http.server`` 以 ``-m`` 運行時使用。 （由 Julien Palard 在 :issue:`31639` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:978
#, fuzzy
msgid "idlelib and IDLE"
msgstr "空閒庫和空閒"

#: ../../whatsnew/3.7.rst:980
#, fuzzy
msgid ""
"Multiple fixes for autocompletion. (Contributed by Louie Lu in :issue:"
"`15786`.)"
msgstr "自動完成的多項修復。 （由 Louie Lu 在 :issue:`15786` 中貢獻。）"

#: ../../whatsnew/3.7.rst:982
#, fuzzy
msgid ""
"Module Browser (on the File menu, formerly called Class Browser), now "
"displays nested functions and classes in addition to top-level functions and "
"classes. (Contributed by Guilherme Polo, Cheryl Sabella, and Terry Jan Reedy "
"in :issue:`1612262`.)"
msgstr ""
"模組瀏覽器（在文件菜單上，以前稱為類瀏覽器）現在除了頂級函式和類之外還顯示嵌"
"套函式和類。 （由 Guilherme Polo、Cheryl Sabella 和 Terry Jan Reedy 在 "
":issue:`1612262` 中貢獻。）"

#: ../../whatsnew/3.7.rst:988
#, fuzzy
msgid ""
"The Settings dialog (Options, Configure IDLE) has been partly rewritten to "
"improve both appearance and function. (Contributed by Cheryl Sabella and "
"Terry Jan Reedy in multiple issues.)"
msgstr ""
"設定對話框（選項、配置 IDLE）已部分重寫，以改進外觀和功能。 （由 Cheryl "
"Sabella 和 Terry Jan Reedy 在多期中供稿。）"

#: ../../whatsnew/3.7.rst:992
#, fuzzy
msgid ""
"The font sample now includes a selection of non-Latin characters so that "
"users can better see the effect of selecting a particular font. (Contributed "
"by Terry Jan Reedy in :issue:`13802`.) The sample can be edited to include "
"other characters. (Contributed by Serhiy Storchaka in :issue:`31860`.)"
msgstr ""
"字體示例現在包括非拉丁字元的選擇，以便使用者可以更好地查看選擇特定字體的效果"
"。 （由 Terry Jan Reedy 在 :issue:`13802` "
"中貢獻。）可以編輯示例以包含其他字元。 （由 Serhiy Storchaka 在 "
":issue:`31860` 中貢獻。）"

#: ../../whatsnew/3.7.rst:998
#, fuzzy
msgid ""
"The IDLE features formerly implemented as extensions have been reimplemented "
"as normal features.  Their settings have been moved from the Extensions tab "
"to other dialog tabs. (Contributed by Charles Wohlganger and Terry Jan Reedy "
"in :issue:`27099`.)"
msgstr ""
"以前作為擴充實作的 IDLE "
"功能已作為普通功能重新實作。它們的設定已從“擴充”選項卡移至其他對話框選項卡。 "
"（由 Charles Wohlganger 和 Terry Jan Reedy 在 :issue:`27099` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1003
#, fuzzy
msgid ""
"Editor code context option revised.  Box displays all context lines up to "
"maxlines.  Clicking on a context line jumps the editor to that line.  "
"Context colors for custom themes is added to Highlights tab of Settings "
"dialog. (Contributed by Cheryl Sabella and Terry Jan Reedy in :issue:"
"`33642`, :issue:`33768`, and :issue:`33679`.)"
msgstr ""
"修改了編輯器程式碼上下文選項。 Box 顯示最大行數的所有上下文行。單擊上下文行會"
"將編輯器跳轉到該行。自定義主題的上下文顏色已新增到“設定”對話框的“突出顯示”選"
"項卡中。 （由 Cheryl Sabella 和 Terry Jan Reedy 在 "
":issue:`33642`、:issue:`33768` 和 :issue:`33679` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1009
#, fuzzy
msgid ""
"On Windows, a new API call tells Windows that tk scales for DPI. On Windows "
"8.1+ or 10, with DPI compatibility properties of the Python binary "
"unchanged, and a monitor resolution greater than 96 DPI, this should make "
"text and lines sharper.  It should otherwise have no effect. (Contributed by "
"Terry Jan Reedy in :issue:`33656`.)"
msgstr ""
"在 Windows 上，一個新的 API 呼叫告訴 Windows tk 針對 DPI 進行縮放。在 "
"Windows 8.1+ 或 10 上，Python 二進位文件的 DPI 相容性屬性不變，"
"並且顯示器分辨率大於 96 DPI，這應該會使文本和線條更清晰。否則它應該沒有效果。"
" （由 Terry Jan Reedy 在 :issue:`33656` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1015
#, fuzzy
msgid "New in 3.7.1:"
msgstr "3.7.1 中的新功能："

#: ../../whatsnew/3.7.rst:1017
#, fuzzy
msgid ""
"Output over N lines (50 by default) is squeezed down to a button. N can be "
"changed in the PyShell section of the General page of the Settings dialog.  "
"Fewer, but possibly extra long, lines can be squeezed by right clicking on "
"the output.  Squeezed output can be expanded in place by double-clicking the "
"button or into the clipboard or a separate window by right-clicking the "
"button.  (Contributed by Tal Einat in :issue:`1529353`.)"
msgstr ""
"N 行（預設為 50 行）的輸出被壓縮到一個按鈕。 N 可以在設定對話框的常規頁面的 "
"PyShell 部分中更改。通過右鍵單擊輸出可以壓縮更少但可能更長的行。壓縮的輸出可"
"以通過雙擊按鈕或右鍵單擊按鈕擴充到剪貼板或單獨的窗口中。 （由 Tal Einat 在 "
":issue:`1529353` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1024
#, fuzzy
msgid "The changes above have been backported to 3.6 maintenance releases."
msgstr "上述更改已反向移植到 3.6 維護版本。"

#: ../../whatsnew/3.7.rst:1026
#, fuzzy
msgid "NEW in 3.7.4:"
msgstr "3.7.4 中的新功能："

#: ../../whatsnew/3.7.rst:1028
#, fuzzy
msgid ""
"Add \"Run Customized\" to the Run menu to run a module with customized "
"settings. Any command line arguments entered are added to sys.argv. They re-"
"appear in the box for the next customized run.  One can also suppress the "
"normal Shell main module restart.  (Contributed by Cheryl Sabella, Terry Jan "
"Reedy, and others in :issue:`5680` and :issue:`37627`.)"
msgstr ""
"將“運行自定義”新增到“運行”菜單以運行具有自定義設定的模組。"
"輸入的任何命令列參數都會新增到 sys."
"argv。它們會重新出現在下一次自定義運行的框中。也可以抑制正常的 Shell "
"主模組重啟。 （由 Cheryl Sabella、Terry Jan Reedy 和其他人在 :issue:`5680` "
"和 :issue:`37627` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1034
#, fuzzy
msgid "New in 3.7.5:"
msgstr "3.7.5 中的新功能："

#: ../../whatsnew/3.7.rst:1036
#, fuzzy
msgid ""
"Add optional line numbers for IDLE editor windows. Windows open without line "
"numbers unless set otherwise in the General tab of the configuration "
"dialog.  Line numbers for an existing window are shown and hidden in the "
"Options menu. (Contributed by Tal Einat and Saimadhav Heblikar in :issue:"
"`17535`.)"
msgstr ""
"為 IDLE 編輯器窗口新增可選的行號。 Windows 打開時沒有行號，除非在配置對話框的"
"常規選項卡中另有設定。現有窗口的行號在“選項”菜單中顯示和隱藏。 （由 Tal "
"Einat 和 Saimadhav Heblikar 在 :issue:`17535` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1044 ../../whatsnew/3.7.rst:2004
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.7.rst:1046
#, fuzzy
msgid ""
"The :class:`importlib.abc.ResourceReader` ABC was introduced to support the "
"loading of resources from packages.  See also :ref:"
"`whatsnew37_importlib_resources`. (Contributed by Barry Warsaw, Brett Cannon "
"in :issue:`32248`.)"
msgstr ""
":class:`importlib.abc.ResourceReader` ABC "
"被引入以支援從包中加載資源。另見 :ref:`whatsnew37_importlib_resources`。 （"
"由 Barry Warsaw 和 Brett Cannon 在 :issue:`32248` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1051
#, fuzzy
msgid ""
":func:`importlib.reload` now raises :exc:`ModuleNotFoundError` if the module "
"lacks a spec. (Contributed by Garvit Khatri in :issue:`29851`.)"
msgstr ""
":func:`importlib.reload` 現在會引發 :exc:`ModuleNotFoundError` "
"如果模組缺少規範。 （由 Garvit Khatri 在 :issue:`29851` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1055
#, fuzzy
msgid ""
":func:`importlib.find_spec` now raises :exc:`ModuleNotFoundError` instead "
"of :exc:`AttributeError` if the specified parent module is not a package (i."
"e. lacks a ``__path__`` attribute). (Contributed by Milan Oberkirch in :"
"issue:`30436`.)"
msgstr ""
"如果指定的父模組不是包（即缺少 __path__ 屬性），importlib.find_spec "
"現在引發：exc:ModuleNotFoundError 而不是 AttributeError。 （由 Milan "
"Oberkirch 在 :issue:`30436` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1060
#, fuzzy
msgid ""
"The new :func:`importlib.source_hash` can be used to compute the hash of the "
"passed source.  A :ref:`hash-based .pyc file <whatsnew37-pep552>` embeds the "
"value returned by this function."
msgstr ""
"新的 :func:`importlib.source_hash` 可用於計算傳遞源的雜湊值。 :ref:`"
"基於雜湊的 .pyc 文件 <whatsnew37-pep552>` 嵌入了此函式回傳的值。"

#: ../../whatsnew/3.7.rst:1066
msgid "io"
msgstr "io"

#: ../../whatsnew/3.7.rst:1068
#, fuzzy
msgid ""
"The new :meth:`TextIOWrapper.reconfigure() <io.TextIOWrapper.reconfigure>` "
"method can be used to reconfigure the text stream with the new settings. "
"(Contributed by Antoine Pitrou in :issue:`30526` and INADA Naoki in :issue:"
"`15216`.)"
msgstr ""
"新的 :meth:`TextIOWrapper.reconfigure() <io.TextIOWrapper.reconfigure>` "
"方法可用於使用新設定重新配置文本流。 （由 Antoine Pitrou 在 :issue:`30526` "
"和 INADA Naoki 在 :issue:`15216` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1075
msgid "ipaddress"
msgstr "ipaddress"

#: ../../whatsnew/3.7.rst:1077
#, fuzzy
msgid ""
"The new ``subnet_of()`` and ``supernet_of()`` methods of :class:`ipaddress."
"IPv6Network` and :class:`ipaddress.IPv4Network` can be used for network "
"containment tests. (Contributed by Michel Albert and Cheryl Sabella in :"
"issue:`20825`.)"
msgstr ""
"ipaddress.IPv6Network 和 ipaddress.IPv4Network 的新 subnet_of() 和 "
"supernet_of() 方法可用於網絡遏制測試。 （由 Michel Albert 和 Cheryl Sabella "
"在 :issue:`20825` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1084
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.7.rst:1086
#, fuzzy
msgid ""
":func:`itertools.islice` now accepts :meth:`integer-like objects <object."
"__index__>` as start, stop, and slice arguments. (Contributed by Will "
"Roberts in :issue:`30537`.)"
msgstr ""
":func:`itertools.islice` 現在接受 :meth:`類似整數的物件 <object.__index__>` "
"作為開始、停止和切片參數。 （由 Will Roberts 在 :issue:`30537` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1093 ../../whatsnew/3.7.rst:2022
msgid "locale"
msgstr "locale"

#: ../../whatsnew/3.7.rst:1095
#, fuzzy
msgid ""
"The new *monetary* argument to :func:`locale.format_string` can be used to "
"make the conversion use monetary thousands separators and grouping strings.  "
"(Contributed by Garvit in :issue:`10379`.)"
msgstr ""
":func:`locale.format_string` 的新 *monetary* "
"參數可用於使用貨幣千位分隔符和分組字串進行轉換。 （由 Garvit 在 "
":issue:`10379` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1099
#, fuzzy
msgid ""
"The :func:`locale.getpreferredencoding` function now always returns "
"``'UTF-8'`` on Android or when in the :ref:`forced UTF-8 mode <whatsnew37-"
"pep540>`."
msgstr ""
":func:`locale.getpreferredencoding` 函式現在總是在 Android 上或處於 :ref:`"
"forced UTF-8 模式 <whatsnew37-pep540>` 時回傳 ``'UTF-8'``。"

#: ../../whatsnew/3.7.rst:1104
msgid "logging"
msgstr "logging"

#: ../../whatsnew/3.7.rst:1106
#, fuzzy
msgid ""
":class:`~logging.Logger` instances can now be pickled. (Contributed by Vinay "
"Sajip in :issue:`30520`.)"
msgstr ""
":class:`~logging.Logger` 實例現在可以被醃製。 （由 Vinay Sajip 在 "
":issue:`30520` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1109
#, fuzzy
msgid ""
"The new :meth:`StreamHandler.setStream() <logging.StreamHandler.setStream>` "
"method can be used to replace the logger stream after handler creation. "
"(Contributed by Vinay Sajip in :issue:`30522`.)"
msgstr ""
"新的 :meth:`StreamHandler.setStream() <logging.StreamHandler.setStream>` "
"方法可用於在處理程式建立後替換記錄器流。 （由 Vinay Sajip 在 :issue:`30522` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:1113
#, fuzzy
msgid ""
"It is now possible to specify keyword arguments to handler constructors in "
"configuration passed to :func:`logging.config.fileConfig`. (Contributed by "
"Preston Landers in :issue:`31080`.)"
msgstr ""
"現在可以在傳遞給 logging.config.fileConfig "
"的配置中為處理程式構造函式指定關鍵字參數。 （由 Preston Landers 在 "
":issue:`31080` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1119
msgid "math"
msgstr "math"

#: ../../whatsnew/3.7.rst:1121
#, fuzzy
msgid ""
"The new :func:`math.remainder` function implements the IEEE 754-style "
"remainder operation.  (Contributed by Mark Dickinson in :issue:`29962`.)"
msgstr ""
"新的 :func:`math.remainder` 函式實作了 IEEE 754 風格的餘數運算。 （由 Mark "
"Dickinson 在 :issue:`29962` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1126
msgid "mimetypes"
msgstr "mimetypes"

#: ../../whatsnew/3.7.rst:1128
#, fuzzy
msgid ""
"The MIME type of .bmp has been changed from ``'image/x-ms-bmp'`` to ``'image/"
"bmp'``. (Contributed by Nitish Chandra in :issue:`22589`.)"
msgstr ""
".bmp 的 MIME 型別已從 ``'image/x-ms-bmp'`` 更改為 ``'image/bmp'``。 （由 "
"Nitish Chandra 在 :issue:`22589` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1134
msgid "msilib"
msgstr "msilib"

#: ../../whatsnew/3.7.rst:1136
#, fuzzy
msgid ""
"The new :meth:`Database.Close() <msilib.Database.Close>` method can be used "
"to close the :abbr:`MSI` database. (Contributed by Berker Peksag in :issue:"
"`20486`.)"
msgstr ""
"新的 :meth:`Database.Close() <msilib.Database.Close>` "
"方法可用於關閉 :abbr:`MSI` 資料庫。 （由 Berker Peksag 在 :issue:`20486` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:1142
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.7.rst:1144
#, fuzzy
msgid ""
"The new :meth:`Process.close() <multiprocessing.Process.close>` method "
"explicitly closes the process object and releases all resources associated "
"with it.  :exc:`ValueError` is raised if the underlying process is still "
"running. (Contributed by Antoine Pitrou in :issue:`30596`.)"
msgstr ""
"新的 :meth:`Process.close() <multiprocessing.Process.close>` "
"方法顯式關閉行程物件並釋放與其關聯的所有資源。如果底層行程仍在運行，則會引發 "
":exc:`ValueError`。 （由 Antoine Pitrou 在 :issue:`30596` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1150
#, fuzzy
msgid ""
"The new :meth:`Process.kill() <multiprocessing.Process.kill>` method can be "
"used to terminate the process using the :data:`SIGKILL` signal on Unix. "
"(Contributed by Vitor Pereira in :issue:`30794`.)"
msgstr ""
"新的 Process.kill() <multiprocessing.Process.kill> 方法可用於在 Unix 上使用 "
"SIGKILL 信號終止行程。 （由 Vitor Pereira 在 :issue:`30794` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1154
#, fuzzy
msgid ""
"Non-daemonic threads created by :class:`~multiprocessing.Process` are now "
"joined on process exit. (Contributed by Antoine Pitrou in :issue:`18966`.)"
msgstr ""
"由 :class:`~multiprocessing.Process` 建立的非守護執行緒現在在行程退出時加入。"
" （由 Antoine Pitrou 在 :issue:`18966` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1160
msgid "os"
msgstr "os"

#: ../../whatsnew/3.7.rst:1162
#, fuzzy
msgid ""
":func:`os.fwalk` now accepts the *path* argument as :class:`bytes`. "
"(Contributed by Serhiy Storchaka in :issue:`28682`.)"
msgstr ""
":func:`os.fwalk` 現在接受 *path* 參數作為 :class:`bytes`。 （由 Serhiy "
"Storchaka 在 :issue:`28682` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1165
#, fuzzy
msgid ""
":func:`os.scandir` gained support for :ref:`file descriptors <path_fd>`. "
"(Contributed by Serhiy Storchaka in :issue:`25996`.)"
msgstr ""
":func:`os.scandir` 獲得了對 :ref:`文件描述器 <path_fd>` 的支援。 （由 Serhiy "
"Storchaka 在 :issue:`25996` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1168
#, fuzzy
msgid ""
"The new :func:`~os.register_at_fork` function allows registering Python "
"callbacks to be executed at process fork. (Contributed by Antoine Pitrou in :"
"issue:`16500`.)"
msgstr ""
"新的 :func:`~os.register_at_fork` 函式允許註冊 Python 回呼以在行程 fork "
"上執行。 （由 Antoine Pitrou 在 :issue:`16500` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1172
#, fuzzy
msgid ""
"Added :func:`os.preadv` (combine the functionality of :func:`os.readv` and :"
"func:`os.pread`) and :func:`os.pwritev` functions (combine the functionality "
"of :func:`os.writev` and :func:`os.pwrite`). (Contributed by Pablo Galindo "
"in :issue:`31368`.)"
msgstr ""
"新增了 :func:`os.preadv`（結合了 :func:`os.readv` 和 :func:`os.pread` "
"的功能）和 :func:`os.pwritev` 函式（結合了 :func: 的功能： `os.writev` 和 "
":func:`os.pwrite`)。 （由 Pablo Galindo 在 :issue:`31368` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1177
#, fuzzy
msgid ""
"The mode argument of :func:`os.makedirs` no longer affects the file "
"permission bits of newly created intermediate-level directories. "
"(Contributed by Serhiy Storchaka in :issue:`19930`.)"
msgstr ""
":func:`os.makedirs` 的模式參數不再影響新建立的中間級目錄的文件權限位。 （由 "
"Serhiy Storchaka 在 :issue:`19930` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1181
#, fuzzy
msgid ""
":func:`os.dup2` now returns the new file descriptor.  Previously, ``None`` "
"was always returned. (Contributed by Benjamin Peterson in :issue:`32441`.)"
msgstr ""
":func:`os.dup2` 現在回傳新的文件描述器。以前，總是回傳 ``None`` 。 （由 Benjamin "
"Peterson 在 :issue:`32441` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1185
#, fuzzy
msgid ""
"The structure returned by :func:`os.stat` now contains the :attr:`~os."
"stat_result.st_fstype` attribute on Solaris and its derivatives. "
"(Contributed by Jesús Cea Avión in :issue:`32659`.)"
msgstr ""
":func:`os.stat` 回傳的結構現在包含 Solaris 及其衍生產品的 :attr:`~os."
"stat_result.st_fstype` 屬性。 （由 Jesús Cea Avión 在 :issue:`32659` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:1191
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.7.rst:1193
#, fuzzy
msgid ""
"The new :meth:`Path.is_mount() <pathlib.Path.is_mount>` method is now "
"available on POSIX systems and can be used to determine whether a path is a "
"mount point. (Contributed by Cooper Ry Lees in :issue:`30897`.)"
msgstr ""
"新的 :meth:`Path.is_mount() <pathlib.Path.is_mount>` 方法現在可用於 POSIX "
"系統，可用於確定路徑是否為掛載點。 （由 Cooper Ry Lees 在 :issue:`30897` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:1199
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.7.rst:1201
#, fuzzy
msgid ""
":func:`pdb.set_trace` now takes an optional *header* keyword-only argument.  "
"If given, it is printed to the console just before debugging begins.  "
"(Contributed by Barry Warsaw in :issue:`31389`.)"
msgstr ""
":func:`pdb.set_trace` 現在採用可選的 *header* "
"關鍵字參數。如果給定，它會在除錯開始前印出到控制台。 （由 Barry Warsaw 在 "
":issue:`31389` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1205
#, fuzzy
msgid ""
":mod:`pdb` command line now accepts ``-m module_name`` as an alternative to "
"script file.  (Contributed by Mario Corchero in :issue:`32206`.)"
msgstr ""
":mod:`pdb` 命令列現在接受 ``-m module_name`` 作為腳本文件的替代。 （由 Mario "
"Corchero 在 :issue:`32206` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1210
msgid "py_compile"
msgstr "py_compile"

#: ../../whatsnew/3.7.rst:1212
#, fuzzy
msgid ""
":func:`py_compile.compile` -- and by extension, :mod:`compileall` -- now "
"respects the :envvar:`SOURCE_DATE_EPOCH` environment variable by "
"unconditionally creating ``.pyc`` files for hash-based validation. This "
"allows for guaranteeing `reproducible builds <https://reproducible-builds."
"org/>`_ of ``.pyc`` files when they are created eagerly. (Contributed by "
"Bernhard M. Wiedemann in :issue:`29708`.)"
msgstr ""
":func:`py_compile.compile` —— 以及 :mod:`compileall` —— 現在通過無條件建立 ``"
".pyc`` 文件進行基於散列的驗證來尊重 :envvar:`SOURCE_DATE_EPOCH` 環境變數。"
"這允許在急切建立 `.pyc`` 文件時保證`可重現構建 <https://reproducible-builds."
"org/>`_。 （由 Bernhard M. Wiedemann 在 :issue:`29708` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1222
msgid "pydoc"
msgstr "pydoc"

#: ../../whatsnew/3.7.rst:1224
#, fuzzy
msgid ""
"The pydoc server can now bind to an arbitrary hostname specified by the new "
"``-n`` command-line argument. (Contributed by Feanil Patel in :issue:"
"`31128`.)"
msgstr ""
"pydoc 伺服器現在可以綁定到由新的 ``-n``命令列參數指定的任意主機名。 （由 Feanil "
"Patel 在 :issue:`31128` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1230
msgid "queue"
msgstr "queue"

#: ../../whatsnew/3.7.rst:1232
#, fuzzy
msgid ""
"The new :class:`~queue.SimpleQueue` class is an unbounded :abbr:`FIFO` "
"queue. (Contributed by Antoine Pitrou in :issue:`14976`.)"
msgstr ""
"新的 :class:`~queue.SimpleQueue` 類是一個無限的 :abbr:`FIFO` 隊列。 （由 "
"Antoine Pitrou 在 :issue:`14976` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1237
msgid "re"
msgstr "re"

#: ../../whatsnew/3.7.rst:1239
#, fuzzy
msgid ""
"The flags :const:`re.ASCII`, :const:`re.LOCALE` and :const:`re.UNICODE` can "
"be set within the scope of a group. (Contributed by Serhiy Storchaka in :"
"issue:`31690`.)"
msgstr ""
"旗標 :const:`re.ASCII`、:const:`re.LOCALE` 和 :const:`re.UNICODE` "
"可以在組範圍內設定。 （由 Serhiy Storchaka 在 :issue:`31690` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1243
#, fuzzy
msgid ""
":func:`re.split` now supports splitting on a pattern like ``r'\\b'``, ``'^"
"$'`` or ``(?=-)`` that matches an empty string. (Contributed by Serhiy "
"Storchaka in :issue:`25054`.)"
msgstr ""
":func:`re.split` 現在支援拆分匹配空字串的模式，例如 ``r'\\b'``、``'^$'`` 或 "
"``(?=-)``。 （由 Serhiy Storchaka 在 :issue:`25054` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1247
#, fuzzy
msgid ""
"Regular expressions compiled with the :const:`re.LOCALE` flag no longer "
"depend on the locale at compile time.  Locale settings are applied only when "
"the compiled regular expression is used. (Contributed by Serhiy Storchaka "
"in :issue:`30215`.)"
msgstr ""
"使用 :const:`re.LOCALE` 旗標編譯的正則表達式在編譯時不再依賴於語言環境。只有"
"在使用編譯的正則表達式時才應用區域設定。 （由 Serhiy Storchaka 在 "
":issue:`30215` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1252
#, fuzzy
msgid ""
":exc:`FutureWarning` is now emitted if a regular expression contains "
"character set constructs that will change semantically in the future, such "
"as nested sets and set operations. (Contributed by Serhiy Storchaka in :"
"issue:`30349`.)"
msgstr ""
":exc:`FutureWarning` "
"如果正則表達式包含將來會在語義上發生變化的字元集構造，例如嵌套集和集操作，"
"則會發出 FutureWarning。 （由 Serhiy Storchaka 在 :issue:`30349` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1257
#, fuzzy
msgid ""
"Compiled regular expression and match objects can now be copied using :func:"
"`copy.copy` and :func:`copy.deepcopy`. (Contributed by Serhiy Storchaka in :"
"issue:`10076`.)"
msgstr ""
"現在可以使用 :func:`copy.copy` 和 :func:`copy.deepcopy` "
"複製已編譯的正則表達式和匹配物件。 （由 Serhiy Storchaka 在 :issue:`10076` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:1263
msgid "signal"
msgstr "signal"

#: ../../whatsnew/3.7.rst:1265
#, fuzzy
msgid ""
"The new *warn_on_full_buffer* argument to the :func:`signal.set_wakeup_fd` "
"function makes it possible to specify whether Python prints a warning on "
"stderr when the wakeup buffer overflows. (Contributed by Nathaniel J. Smith "
"in :issue:`30050`.)"
msgstr ""
":func:`signal.set_wakeup_fd` 函式的新 *warn_on_full_buffer* "
"參數可以指定當喚醒緩衝區溢出時 Python 是否在 stderr 上印出警告。 （由 "
"Nathaniel J. Smith 在 :issue:`30050` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1272 ../../whatsnew/3.7.rst:2045
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.7.rst:1274
#, fuzzy
msgid ""
"The new :func:`socket.getblocking() <socket.socket.getblocking>` method "
"returns ``True`` if the socket is in blocking mode and ``False`` otherwise. "
"(Contributed by Yury Selivanov in :issue:`32373`.)"
msgstr ""
"如果 socket 處於阻塞模式，新的 :func:`socket.getblocking() <socket.socket."
"getblocking>` 方法回傳 ``True``，否則回傳 ``False``。 （由 Yury Selivanov 在 "
":issue:`32373` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1278
#, fuzzy
msgid ""
"The new :func:`socket.close` function closes the passed socket file "
"descriptor. This function should be used instead of :func:`os.close` for "
"better compatibility across platforms. (Contributed by Christian Heimes in :"
"issue:`32454`.)"
msgstr ""
"新的 :func:`socket.close` 函式關閉傳遞的 socket 文件描述器。應該使用此函式代替 "
":func:`os.close` 以獲得更好的跨平台相容性。 （由 Christian Heimes 在 "
":issue:`32454` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1283
#, fuzzy
msgid ""
"The :mod:`socket` module now exposes the :data:`socket.TCP_CONGESTION` "
"(Linux 2.6.13), :data:`socket.TCP_USER_TIMEOUT` (Linux 2.6.37), and :data:"
"`socket.TCP_NOTSENT_LOWAT` (Linux 3.12) constants. (Contributed by Omar "
"Sandoval in :issue:`26273` and Nathaniel J. Smith in :issue:`29728`.)"
msgstr ""
":mod:`socket` 模組現在公開了 :data:`socket.TCP_CONGESTION` (Linux 2.6."
"13)、:data:`socket.TCP_USER_TIMEOUT` (Linux 2.6.37) 和 :data:`socket."
"TCP_NOTSENT_LOWAT` (Linux 3.12) 常數。 （由 Omar Sandoval 在 :issue:`26273` "
"和 Nathaniel J. Smith 在 :issue:`29728` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1289
#, fuzzy
msgid ""
"Support for :data:`socket.AF_VSOCK` sockets has been added to allow "
"communication between virtual machines and their hosts. (Contributed by "
"Cathy Avery in :issue:`27584`.)"
msgstr ""
"新增了對 :data:`socket.AF_VSOCK` "
" socket 的支援，以允許虛擬機與其主機之間進行通信。 （由 Cathy Avery 在 "
":issue:`27584` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1293
#, fuzzy
msgid ""
"Sockets now auto-detect family, type and protocol from file descriptor by "
"default. (Contributed by Christian Heimes in :issue:`28134`.)"
msgstr " socket 現在預設從文件描述器自動檢測系列、型別和協定。 （由 Christian Heimes "
"在 :issue:`28134` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1299
msgid "socketserver"
msgstr "socketserver"

#: ../../whatsnew/3.7.rst:1301
#, fuzzy
msgid ""
":meth:`socketserver.ThreadingMixIn.server_close` now waits until all non-"
"daemon threads complete. :meth:`socketserver.ForkingMixIn.server_close` now "
"waits until all child processes complete."
msgstr ""
":meth:`socketserver.ThreadingMixIn.server_close` "
"現在等待所有非守護執行緒完成。 :meth:`socketserver.ForkingMixIn.server_close`"
" 現在等待所有子行程完成。"

#: ../../whatsnew/3.7.rst:1305
#, fuzzy
msgid ""
"Add a new :attr:`socketserver.ForkingMixIn.block_on_close` class attribute "
"to :class:`socketserver.ForkingMixIn` and :class:`socketserver."
"ThreadingMixIn` classes. Set the class attribute to ``False`` to get the "
"pre-3.7 behaviour."
msgstr ""
"新增一個新的 :attr:`socketserver.ForkingMixIn.block_on_close` 類屬性到 "
":class:`socketserver.ForkingMixIn` 和 :class:`socketserver.ThreadingMixIn` "
"類。將類屬性設定為 ``False``以獲得 3.7 之前的行為。"

#: ../../whatsnew/3.7.rst:1311
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.7.rst:1313
#, fuzzy
msgid ""
":class:`sqlite3.Connection` now exposes the :meth:`~sqlite3.Connection."
"backup` method when the underlying SQLite library is at version 3.6.11 or "
"higher. (Contributed by Lele Gaifax in :issue:`27645`.)"
msgstr ""
":class:`sqlite3.Connection` 現在公開了 :meth:`~sqlite3.Connection.backup` "
"當底層 SQLite 庫是 3.6.11 或更高版本時的方法。 （由 Lele Gaifax 在 "
":issue:`27645` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1317
#, fuzzy
msgid ""
"The *database* argument of :func:`sqlite3.connect` now accepts any :term:"
"`path-like object`, instead of just a string. (Contributed by Anders "
"Lorentsen in :issue:`31843`.)"
msgstr ""
":func:`sqlite3.connect` 的 *database* 參數現在接受任何 :term:`path-like "
"object`，而不僅僅是一個字串。 （由 Anders Lorentsen 在 :issue:`31843` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:1323 ../../whatsnew/3.7.rst:2054
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.7.rst:1325
#, fuzzy
msgid ""
"The :mod:`ssl` module now uses OpenSSL's builtin API instead of :func:`~ssl."
"match_hostname` to check a host name or an IP address.  Values are validated "
"during TLS handshake.  Any certificate validation error including failing "
"the host name check now raises :exc:`~ssl.SSLCertVerificationError` and "
"aborts the handshake with a proper TLS Alert message.  The new exception "
"contains additional information. Host name validation can be customized "
"with :attr:`SSLContext.hostname_checks_common_name <ssl.SSLContext."
"hostname_checks_common_name>`. (Contributed by Christian Heimes in :issue:"
"`31399`.)"
msgstr ""
":mod:`ssl` 模組現在使用 OpenSSL 的內建 API 而不是 :func:`~ssl.match_hostname`"
" 來檢查主機名或 IP 地址。在 TLS 握手期間驗證值。包括主機名檢查失敗在內的任何"
"證書驗證錯誤現在都會引發 :exec:`~ssl.SSLCertVerificationError` 並使用適當的 "
"TLS 警報消息中止握手。新例外包含附加資訊。可以使用 "
"SSLContext.hostname_checks_common_name "
"<ssl.SSLContext.hostname_checks_common_name> 自定義主機名驗證。 （由 "
"Christian Heimes 在 :issue:`31399` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1336
#, fuzzy
msgid ""
"The improved host name check requires a *libssl* implementation compatible "
"with OpenSSL 1.0.2 or 1.1.  Consequently, OpenSSL 0.9.8 and 1.0.1 are no "
"longer supported (see :ref:`37-platform-support-removals` for more details). "
"The ssl module is mostly compatible with LibreSSL 2.7.2 and newer."
msgstr ""
"改進的主機名檢查需要與 OpenSSL 1.0.2 或 1.1 相容的 *libssl* 實作。因此，"
"不再支援 OpenSSL 0.9.8 和 1.0.1（有關詳細資訊，請參閱 :ref:`37-platform-"
"support-removals`）。 ssl 模組主要與 LibreSSL 2.7.2 及更新版本相容。"

#: ../../whatsnew/3.7.rst:1341
#, fuzzy
msgid ""
"The ``ssl`` module no longer sends IP addresses in SNI TLS extension. "
"(Contributed by Christian Heimes in :issue:`32185`.)"
msgstr ""
"``ssl`` 模組不再在 SNI TLS 擴充中發送 IP 地址。 （由 Christian Heimes 在 "
":issue:`32185` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1344
#, fuzzy
msgid ""
":func:`~ssl.match_hostname` no longer supports partial wildcards like ``www*."
"example.org``. (Contributed by Mandeep Singh in :issue:`23033` and Christian "
"Heimes in :issue:`31399`.)"
msgstr ""
":func:`~ssl.match_hostname` 不再支援像 ``www*.example.org`` "
"這樣的部分通配符。 （由 Mandeep Singh 在 :issue:`23033` 和 Christian Heimes "
"在 :issue:`31399` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1349
#, fuzzy
msgid ""
"The default cipher suite selection of the ``ssl`` module now uses a "
"blacklist approach rather than a hard-coded whitelist.  Python no longer re-"
"enables ciphers that have been blocked by OpenSSL security updates.  Default "
"cipher suite selection can be configured at compile time. (Contributed by "
"Christian Heimes in :issue:`31429`.)"
msgstr ""
"``ssl`` 模組的預設密碼套件選擇現在使用黑名單方法而不是硬編碼的白名單。 "
"Python 不再重新啟用已被 OpenSSL "
"安全更新阻止的密碼。可以在編譯時配置預設密碼套件選擇。 （由 Christian Heimes "
"在 :issue:`31429` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1355
#, fuzzy
msgid ""
"Validation of server certificates containing internationalized domain names "
"(IDNs) is now supported.  As part of this change, the :attr:`SSLSocket."
"server_hostname <ssl.SSLSocket.server_hostname>` attribute now stores the "
"expected hostname in A-label form (``\"xn--pythn-mua.org\"``), rather than "
"the U-label form (``\"pythön.org\"``).  (Contributed by Nathaniel J. Smith "
"and Christian Heimes in :issue:`28414`.)"
msgstr ""
"現在支援驗證包含國際化域名 (IDN) 的伺服器證書。作為此更改的一部分，:attr:`"
"SSLSocket.server_hostname <ssl.SSLSocket.server_hostname>` 屬性現在以 A "
"標籤形式儲存預期的主機名 (``\"xn--python-mua.org\"``)，而不是 U 標籤形式（``"
"\"python.org\"``）。 （由 Nathaniel J. Smith 和 Christian Heimes 在 "
":issue:`28414` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1362
#, fuzzy
msgid ""
"The ``ssl`` module has preliminary and experimental support for TLS 1.3 and "
"OpenSSL 1.1.1.  At the time of Python 3.7.0 release, OpenSSL 1.1.1 is still "
"under development and TLS 1.3 hasn't been finalized yet.  The TLS 1.3 "
"handshake and protocol behaves slightly differently than TLS 1.2 and "
"earlier, see :ref:`ssl-tlsv1_3`. (Contributed by Christian Heimes in :issue:"
"`32947`, :issue:`20995`, :issue:`29136`, :issue:`30622` and :issue:`33618`)"
msgstr ""
"``ssl`` 模組對 TLS 1.3 和 OpenSSL 1.1.1 有初步的和實驗性的支援。在 Python "
"3.7.0 發佈時，OpenSSL 1.1.1 仍在開發中，TLS 1.3 尚未最終確定。 TLS 1.3 "
"握手和協定的行為與 TLS 1.2 及更早版本略有不同，請參閱 :ref:`ssl-tlsv1_3`。 （"
"由 Christian Heimes 在 "
":issue:`32947`、:issue:`20995`、:issue:`29136`、:issue:`30622` 和 "
":issue:`33618` 中貢獻）"

#: ../../whatsnew/3.7.rst:1370
#, fuzzy
msgid ""
":class:`~ssl.SSLSocket` and :class:`~ssl.SSLObject` no longer have a public "
"constructor.  Direct instantiation was never a documented and supported "
"feature.  Instances must be created with :class:`~ssl.SSLContext` methods :"
"meth:`~ssl.SSLContext.wrap_socket` and :meth:`~ssl.SSLContext.wrap_bio`. "
"(Contributed by Christian Heimes in :issue:`32951`)"
msgstr ""
":class:`~ssl.SSLSocket` 和 :class:`~ssl.SSLObject` "
"不再有公開構造函式。直接實例化從來都不是記錄和支援的功能。實例必須使用 "
":class:`~ssl.SSLContext` 方法 :meth:`~ssl.SSLContext.wrap_socket` 和 "
":meth:`~ssl.SSLContext.wrap_bio` 建立。 （由 Christian Heimes 在 "
":issue:`32951` 中貢獻）"

#: ../../whatsnew/3.7.rst:1376
#, fuzzy
msgid ""
"OpenSSL 1.1 APIs for setting the minimum and maximum TLS protocol version "
"are available as :attr:`SSLContext.minimum_version <ssl.SSLContext."
"minimum_version>` and :attr:`SSLContext.maximum_version <ssl.SSLContext."
"maximum_version>`. Supported protocols are indicated by several new flags, "
"such as :data:`~ssl.HAS_TLSv1_1`. (Contributed by Christian Heimes in :issue:"
"`32609`.)"
msgstr ""
"用於設定最小和最大 TLS 協定版本的 OpenSSL 1.1 API 可用作 :attr:`"
"SSLContext.minimum_version <ssl.SSLContext.minimum_version>` 和 :attr:`"
"SSLContext.maximum_version <ssl.SSLContext."
"maximum_version>`。支援的協定由幾個新旗標指示，例如 :data:`~ssl."
"HAS_TLSv1_1`。 （由 Christian Heimes 在 :issue:`32609` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1385
msgid "string"
msgstr "string"

#: ../../whatsnew/3.7.rst:1387
#, fuzzy
msgid ""
":class:`string.Template` now lets you to optionally modify the regular "
"expression pattern for braced placeholders and non-braced placeholders "
"separately.  (Contributed by Barry Warsaw in :issue:`1198569`.)"
msgstr ""
":class:`string.Template` "
"現在允許您有選擇地分別修改大括號佔位符和非大括號佔位符的正則表達式模式。 （"
"由 Barry Warsaw 在 :issue:`1198569` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1393
msgid "subprocess"
msgstr "subprocess"

#: ../../whatsnew/3.7.rst:1395
#, fuzzy
msgid ""
"The :func:`subprocess.run` function accepts the new *capture_output* keyword "
"argument.  When true, stdout and stderr will be captured. This is equivalent "
"to passing :data:`subprocess.PIPE` as *stdout* and *stderr* arguments. "
"(Contributed by Bo Bayles in :issue:`32102`.)"
msgstr ""
":func:`subprocess.run` 函式接受新的 *capture_output* 關鍵字參數。當為真時，"
"stdout 和 stderr 將被捕獲。這相當於將 :data:`subprocess.PIPE` 作為 *stdout* "
"和 *stderr* 參數傳遞。 （由 Bo Bayles 在 :issue:`32102` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1401
#, fuzzy
msgid ""
"The ``subprocess.run`` function and the :class:`subprocess.Popen` "
"constructor now accept the *text* keyword argument as an alias to "
"*universal_newlines*. (Contributed by Andrew Clegg in :issue:`31756`.)"
msgstr ""
"``subprocess.run`` 函式和 :class:`subprocess.Popen` 構造函式現在接受 *text* "
"關鍵字參數作為 *universal_newlines* 的別名。 （由 Andrew Clegg 在 "
":issue:`31756` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1406
#, fuzzy
msgid ""
"On Windows the default for *close_fds* was changed from ``False`` to "
"``True`` when redirecting the standard handles.  It's now possible to set "
"*close_fds* to true when redirecting the standard handles.  See :class:"
"`subprocess.Popen`.  This means that *close_fds* now defaults to ``True`` on "
"all supported platforms. (Contributed by Segev Finer in :issue:`19764`.)"
msgstr ""
"在 Windows 上，當重定向標準句柄時，*close_fds* "
"的預設值從 ``False``更改為 ``True``。現在可以在重定向標準句柄時將 *close_fds* "
"設定為 true。請參閱 :class:`subprocess.Popen`。這意味著 *close_fds* "
"現在在所有支援的平台上預設為 ``True``。 （由 Segev Finer 在 :issue:`19764` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:1413
#, fuzzy
msgid ""
"The subprocess module is now more graceful when handling :exc:"
"`KeyboardInterrupt` during :func:`subprocess.call`, :func:`subprocess.run`, "
"or in a :class:`~subprocess.Popen` context manager.  It now waits a short "
"amount of time for the child to exit, before continuing the handling of the "
"``KeyboardInterrupt`` exception. (Contributed by Gregory P. Smith in :issue:"
"`25942`.)"
msgstr ""
"subprocess 模組現在在 subprocess.call、subprocess.run 或 class:~"
"subprocess.Popen 上下文管理器中處理 KeyboardInterrupt 時更加優雅。現在，它會"
"等待一小段時間讓孩子退出，然後再繼續處理 ``KeyboardInterrupt`` 例外。 （由 "
"Gregory P. Smith 在 :issue:`25942` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1423 ../../whatsnew/3.7.rst:2070
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.7.rst:1425
#, fuzzy
msgid ""
"The new :func:`sys.breakpointhook` hook function is called by the built-in :"
"func:`breakpoint`. (Contributed by Barry Warsaw in :issue:`31353`.)"
msgstr ""
"新的 :func:`sys.breakpointhook` 鉤子函式由內建的 :func:`breakpoint` 呼叫。 （"
"由 Barry Warsaw 在 :issue:`31353` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1429
#, fuzzy
msgid ""
"On Android, the new :func:`sys.getandroidapilevel` returns the build-time "
"Android API version. (Contributed by Victor Stinner in :issue:`28740`.)"
msgstr ""
"在 Android 上，新的 :func:`sys.getandroidapilevel` 回傳構建時 Android API "
"版本。 （由 Victor Stinner 在 :issue:`28740` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1433
#, fuzzy
msgid ""
"The new :func:`sys.get_coroutine_origin_tracking_depth` function returns the "
"current coroutine origin tracking depth, as set by the new :func:`sys."
"set_coroutine_origin_tracking_depth`.  :mod:`asyncio` has been converted to "
"use this new API instead of the deprecated :func:`sys."
"set_coroutine_wrapper`. (Contributed by Nathaniel J. Smith in :issue:"
"`32591`.)"
msgstr ""
"新的 :func:`sys.get_coroutine_origin_tracking_depth` "
"函式回傳當前協程原點跟踪深度，由新的 :func:`sys."
"set_coroutine_origin_tracking_depth` 設定。 :mod:`asyncio` 已轉換為使用此新 "
"API，而不是已棄用的 :func:`sys.set_coroutine_wrapper`。 （由 Nathaniel J. "
"Smith 在 :issue:`32591` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1442
msgid "time"
msgstr "time"

#: ../../whatsnew/3.7.rst:1444
#, fuzzy
msgid ""
":pep:`564` adds six new functions with nanosecond resolution to the :mod:"
"`time` module:"
msgstr ":pep:`564` 向 :mod:`time` 模組新增了六個具有納秒分辨率的新函式："

#: ../../whatsnew/3.7.rst:1454
#, fuzzy
msgid "New clock identifiers have been added:"
msgstr "新增了新的時鐘標識符："

#: ../../whatsnew/3.7.rst:1456
#, fuzzy
msgid ""
":data:`time.CLOCK_BOOTTIME` (Linux): Identical to :data:`time."
"CLOCK_MONOTONIC`, except it also includes any time that the system is "
"suspended."
msgstr ""
":data:`time.CLOCK_BOOTTIME` (Linux)：與 :data:`time.CLOCK_MONOTONIC` "
"相同，除了它還包括系統掛起的任何時間。"

#: ../../whatsnew/3.7.rst:1459
#, fuzzy
msgid ""
":data:`time.CLOCK_PROF` (FreeBSD, NetBSD and OpenBSD): High-resolution per-"
"process CPU timer."
msgstr ":data:`time.CLOCK_PROF`（FreeBSD、NetBSD 和 OpenBSD）：高分辨率每行程 CPU "
"計時器。"

#: ../../whatsnew/3.7.rst:1461
#, fuzzy
msgid ""
":data:`time.CLOCK_UPTIME` (FreeBSD, OpenBSD): Time whose absolute value is "
"the time the system has been running and not suspended, providing accurate "
"uptime measurement."
msgstr ""
":data:`time.CLOCK_UPTIME` (FreeBSD, OpenBSD): "
"時間，其絕對值是系統已經運行且未掛起的時間，提供準確的正常運行時間測量。"

#: ../../whatsnew/3.7.rst:1465
#, fuzzy
msgid ""
"The new :func:`time.thread_time` and :func:`time.thread_time_ns` functions "
"can be used to get per-thread CPU time measurements. (Contributed by Antoine "
"Pitrou in :issue:`32025`.)"
msgstr ""
"新的 :func:`time.thread_time` 和 :func:`time.thread_time_ns` "
"函式可用於獲取每執行緒 CPU 時間測量值。 （由 Antoine Pitrou 在 :issue:`32025`"
" 中貢獻。）"

#: ../../whatsnew/3.7.rst:1469
#, fuzzy
msgid ""
"The new :func:`time.pthread_getcpuclockid` function returns the clock ID of "
"the thread-specific CPU-time clock."
msgstr "新的 :func:`time.pthread_getcpuclockid` 函式回傳執行緒特定 CPU "
"時間時鐘的時鐘 ID。"

#: ../../whatsnew/3.7.rst:1474
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.7.rst:1476
#, fuzzy
msgid ""
"The new :class:`tkinter.ttk.Spinbox` class is now available. (Contributed by "
"Alan Moore in :issue:`32585`.)"
msgstr ""
"新的 :class:`tkinter.ttk.Spinbox` 類現已可用。 （由 Alan Moore 在 "
":issue:`32585` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1481
msgid "tracemalloc"
msgstr "tracemalloc"

#: ../../whatsnew/3.7.rst:1483
#, fuzzy
msgid ""
":class:`tracemalloc.Traceback` behaves more like regular tracebacks, sorting "
"the frames from oldest to most recent. :meth:`Traceback.format() "
"<tracemalloc.Traceback.format>` now accepts negative *limit*, truncating the "
"result to the ``abs(limit)`` oldest frames.  To get the old behaviour, use "
"the new *most_recent_first* argument to ``Traceback.format()``. (Contributed "
"by Jesse Bakker in :issue:`32121`.)"
msgstr ""
":class:`tracemalloc.Traceback` 的行為更像常規回溯，將幀從最舊到最新排序。 "
":meth:`Traceback.format() <tracemalloc.Traceback.format>` 現在接受負 "
"*limit*，將結果截斷為 ``abs(limit)`` 最舊的幀。要獲得舊行為，請使用新的 "
"*most_recent_first* 參數到 ``Traceback.format()``。 （由 Jesse Bakker 在 "
":issue:`32121` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1493
msgid "types"
msgstr "types"

#: ../../whatsnew/3.7.rst:1495
#, fuzzy
msgid ""
"The new :class:`~types.WrapperDescriptorType`, :class:`~types."
"MethodWrapperType`, :class:`~types.MethodDescriptorType`, and :class:`~types."
"ClassMethodDescriptorType` classes are now available. (Contributed by Manuel "
"Krebber and Guido van Rossum in :issue:`29377`, and Serhiy Storchaka in :"
"issue:`32265`.)"
msgstr ""
"新的 :class:`~types.WrapperDescriptorType`、:class:`~types."
"MethodWrapperType`、:class:`~types.MethodDescriptorType` 和 :class:`~types."
"ClassMethodDescriptorType` 類現已可用。 （由 Manuel Krebber 和 Guido van "
"Rossum 在 :issue:`29377` 和 Serhiy Storchaka 在 :issue:`32265` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1501
#, fuzzy
msgid ""
"The new :func:`types.resolve_bases` function resolves MRO entries "
"dynamically as specified by :pep:`560`. (Contributed by Ivan Levkivskyi in :"
"issue:`32717`.)"
msgstr ""
"新的 :func:`types.resolve_bases` 函式按照 :pep:`560` 的指定動態解析 MRO "
"條目。 （由 Ivan Levkivskyi 在 :issue:`32717` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1507
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.7.rst:1509
#, fuzzy
msgid ""
"The internal :mod:`unicodedata` database has been upgraded to use `Unicode "
"11 <https://www.unicode.org/versions/Unicode11.0.0/>`_. (Contributed by "
"Benjamin Peterson.)"
msgstr ""
"內部 :mod:`unicodedata` 資料庫已升級為使用 `Unicode 11 <https://www.unicode."
"org/versions/Unicode11.0.0/>`_。 （由本傑明·彼得森提供。）"

#: ../../whatsnew/3.7.rst:1515
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.7.rst:1517
#, fuzzy
msgid ""
"The new ``-k`` command-line option allows filtering tests by a name "
"substring or a Unix shell-like pattern. For example, ``python -m unittest -k "
"foo`` runs ``foo_tests.SomeTest.test_something``, ``bar_tests.SomeTest."
"test_foo``, but not ``bar_tests.FooTest.test_something``. (Contributed by "
"Jonas Haag in :issue:`32071`.)"
msgstr ""
"新的 ``-k``命令列選項允許通過名稱子字串或類似 Unix shell 的模式過濾測試。例如，“"
"python -m unittest -k foo”運行“foo_tests.SomeTest.test_something”、“bar_tests"
".SomeTest.test_foo”，但不運行“bar_tests.FooTest.test_something”。 （由 Jonas "
"Haag 在 :issue:`32071` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1526
msgid "unittest.mock"
msgstr "unittest.mock"

#: ../../whatsnew/3.7.rst:1528
#, fuzzy
msgid ""
"The :const:`~unittest.mock.sentinel` attributes now preserve their identity "
"when they are :mod:`copied <copy>` or :mod:`pickled <pickle>`. (Contributed "
"by Serhiy Storchaka in :issue:`20804`.)"
msgstr ""
":const:`~unittest.mock.sentinel` 屬性現在在 :mod:`copied <copy>` 或 :mod:`"
"pickled <pickle>` 時保留它們的身份。 （由 Serhiy Storchaka 在 :issue:`20804` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:1532
#, fuzzy
msgid ""
"The new :func:`~unittest.mock.seal` function allows sealing :class:"
"`~unittest.mock.Mock` instances, which will disallow further creation of "
"attribute mocks.  The seal is applied recursively to all attributes that are "
"themselves mocks. (Contributed by Mario Corchero in :issue:`30541`.)"
msgstr ""
"新的 :func:`~unittest.mock.seal` 函式允許密封 :class:`~unittest.mock.Mock` "
"實例，這將禁止進一步建立屬性模擬。密封遞迴地應用於所有本身是模擬的屬性。 （"
"由 Mario Corchero 在 :issue:`30541` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1540
msgid "urllib.parse"
msgstr "urllib.parse"

#: ../../whatsnew/3.7.rst:1542
#, fuzzy
msgid ""
":func:`urllib.parse.quote` has been updated from :rfc:`2396` to :rfc:`3986`, "
"adding ``~`` to the set of characters that are never quoted by default. "
"(Contributed by Christian Theune and Ratnadeep Debnath in :issue:`16285`.)"
msgstr ""
":func:`urllib.parse.quote` 已從 :rfc:`2396` 更新為 :rfc:`3986`，將 ``~`` "
"新增到預設情況下從不引用的字元集中。 （由 Christian Theune 和 Ratnadeep "
"Debnath 在 :issue:`16285` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1548
msgid "uu"
msgstr "uu"

#: ../../whatsnew/3.7.rst:1550
#, fuzzy
msgid ""
"The :func:`uu.encode` function now accepts an optional *backtick* keyword "
"argument.  When it's true, zeros are represented by ``'`'`` instead of "
"spaces.  (Contributed by Xiang Zhang in :issue:`30103`.)"
msgstr ""
":func:`uu.encode` 函式現在接受一個可選的 *backtick* 關鍵字參數。當它為真時，"
"零由 ``'`'`` 而不是空格表示。 （由 Xiang Zhang 在 :issue:`30103` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1556
msgid "uuid"
msgstr "uuid"

#: ../../whatsnew/3.7.rst:1558
#, fuzzy
msgid ""
"The new :attr:`UUID.is_safe <uuid.UUID.is_safe>` attribute relays "
"information from the platform about whether generated UUIDs are generated "
"with a multiprocessing-safe method. (Contributed by Barry Warsaw in :issue:"
"`22807`.)"
msgstr ""
"新的 :attr:`UUID.is_safe <uuid.UUID.is_safe>` 屬性從平台傳遞有關生成的 UUID "
"是否使用多處理安全方法生成的資訊。 （由 Barry Warsaw 在 :issue:`22807` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:1563
#, fuzzy
msgid ""
":func:`uuid.getnode` now prefers universally administered MAC addresses over "
"locally administered MAC addresses. This makes a better guarantee for global "
"uniqueness of UUIDs returned from :func:`uuid.uuid1`.  If only locally "
"administered MAC addresses are available, the first such one found is "
"returned. (Contributed by Barry Warsaw in :issue:`32107`.)"
msgstr ""
":func:`uuid.getnode` 現在比本地管理的 MAC 地址更喜歡通用管理的 MAC 地址。"
"這更好地保證了從 :func:`uuid.uuid1` 回傳的 UUID 的全局唯一性。"
"如果只有本地管理的 MAC 地址可用，則回傳找到的第一個這樣的地址。 （由 Barry "
"Warsaw 在 :issue:`32107` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1572
msgid "warnings"
msgstr "warnings"

#: ../../whatsnew/3.7.rst:1574
#, fuzzy
msgid ""
"The initialization of the default warnings filters has changed as follows:"
msgstr "預設警告過濾器的初始化更改如下："

#: ../../whatsnew/3.7.rst:1576
#, fuzzy
msgid ""
"warnings enabled via command line options (including those for :option:`-b` "
"and the new CPython-specific :option:`-X` ``dev`` option) are always passed "
"to the warnings machinery via the :data:`sys.warnoptions` attribute."
msgstr ""
"通過命令列選項啟用的警告（包括 :option:`-b` 和新的 CPython 特定的 "
":option:`-X` ``dev`` 選項）總是通過 :data:` 傳遞給警告機制sys.warnoptions` "
"屬性。"

#: ../../whatsnew/3.7.rst:1580
#, fuzzy
msgid ""
"warnings filters enabled via the command line or the environment now have "
"the following order of precedence:"
msgstr "通過命令列或環境啟用的警告過濾器現在具有以下優先順序："

#: ../../whatsnew/3.7.rst:1583
#, fuzzy
msgid "the ``BytesWarning`` filter for :option:`-b` (or ``-bb``)"
msgstr ":option:`-b`（或 ``-bb``）的 ``BytesWarning`` 過濾器"

#: ../../whatsnew/3.7.rst:1584
#, fuzzy
msgid "any filters specified with the :option:`-W` option"
msgstr "使用 :option:`-W` 選項指定的任何過濾器"

#: ../../whatsnew/3.7.rst:1585
#, fuzzy
msgid ""
"any filters specified with the :envvar:`PYTHONWARNINGS` environment variable"
msgstr "使用 PYTHONWARNINGS 環境變數指定的任何過濾器"

#: ../../whatsnew/3.7.rst:1587
#, fuzzy
msgid ""
"any other CPython specific filters (e.g. the ``default`` filter added for "
"the new ``-X dev`` mode)"
msgstr "任何其他 CPython 特定過濾器（例如，為新的 ``-X dev`` 模式新增的 ``default`` "
"過濾器）"

#: ../../whatsnew/3.7.rst:1589
#, fuzzy
msgid "any implicit filters defined directly by the warnings machinery"
msgstr "警告機制直接定義的任何隱式過濾器"

#: ../../whatsnew/3.7.rst:1591
#, fuzzy
msgid ""
"in :ref:`CPython debug builds <debug-build>`, all warnings are now displayed "
"by default (the implicit filter list is empty)"
msgstr "在 :ref:`CPython debug builds <debug-build>` "
"中，現在預設顯示所有警告（隱式過濾器列表為空）"

#: ../../whatsnew/3.7.rst:1594
#, fuzzy
msgid ""
"(Contributed by Nick Coghlan and Victor Stinner in :issue:`20361`, :issue:"
"`32043`, and :issue:`32230`.)"
msgstr ""
"（由 Nick Coghlan 和 Victor Stinner 在 :issue:`20361`、:issue:`32043` 和 "
":issue:`32230` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1597
#, fuzzy
msgid ""
"Deprecation warnings are once again shown by default in single-file scripts "
"and at the interactive prompt.  See :ref:`whatsnew37-pep565` for details. "
"(Contributed by Nick Coghlan in :issue:`31975`.)"
msgstr ""
"預設情況下，棄用警告再次顯示在單文件腳本和交互式提示中。有關詳細資訊，請參閱"
":ref:`whatsnew37-pep565`。 （由 Nick Coghlan 在 :issue:`31975` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1603
msgid "xml.etree"
msgstr "xml.etree"

#: ../../whatsnew/3.7.rst:1605
#, fuzzy
msgid ""
":ref:`ElementPath <elementtree-xpath>` predicates in the :meth:`find` "
"methods can now compare text of the current node with ``[. = \"text\"]``, "
"not only text in children.  Predicates also allow adding spaces for better "
"readability.  (Contributed by Stefan Behnel in :issue:`31648`.)"
msgstr ""
":ref:`ElementPath <elementtree-xpath>` :meth:`find` "
"方法中的謂詞現在可以將當前節點的文本與 ``[ 進行比較。 = \"文本\""
"]``，不僅是兒童文本。謂詞還允許新增空格以提高可讀性。 （由 Stefan Behnel 在 "
":issue:`31648` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1612
msgid "xmlrpc.server"
msgstr "xmlrpc.server"

#: ../../whatsnew/3.7.rst:1614
#, fuzzy
msgid ""
":meth:`SimpleXMLRPCDispatcher.register_function <xmlrpc.server."
"SimpleXMLRPCDispatcher>` can now be used as a decorator.  (Contributed by "
"Xiang Zhang in :issue:`7769`.)"
msgstr ""
":meth:`SimpleXMLRPCDispatcher.register_function <xmlrpc.server."
"SimpleXMLRPCDispatcher>` 現在可以用作裝飾器。 （由 Xiang Zhang 在 "
":issue:`7769` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1620
msgid "zipapp"
msgstr "zipapp"

#: ../../whatsnew/3.7.rst:1622
#, fuzzy
msgid ""
"Function :func:`~zipapp.create_archive` now accepts an optional *filter* "
"argument to allow the user to select which files should be included in the "
"archive.  (Contributed by Irmen de Jong in :issue:`31072`.)"
msgstr ""
"函式 :func:`~zipapp.create_archive` 現在接受一個可選的 *filter* "
"參數，以允許使用者選擇哪些文件應包含在存檔中。 （由 Irmen de Jong 在 "
":issue:`31072` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1626
#, fuzzy
msgid ""
"Function :func:`~zipapp.create_archive` now accepts an optional *compressed* "
"argument to generate a compressed archive.  A command line option ``--"
"compress`` has also been added to support compression. (Contributed by "
"Zhiming Wang in :issue:`31638`.)"
msgstr ""
"函式 :func:`~zipapp.create_archive` 現在接受可選的 *compressed* "
"參數來生成壓縮存檔。還新增了命令列選項 ``--compress``以支援壓縮。 （由 Zhiming "
"Wang 在 :issue:`31638` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1633
msgid "zipfile"
msgstr "zipfile"

#: ../../whatsnew/3.7.rst:1635
#, fuzzy
msgid ""
":class:`~zipfile.ZipFile` now accepts the new *compresslevel* parameter to "
"control the compression level. (Contributed by Bo Bayles in :issue:`21417`.)"
msgstr ""
":class:`~zipfile.ZipFile` 現在接受新的 *compresslevel* 參數來控制壓縮級別。 "
"（由 Bo Bayles 在 :issue:`21417` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1639
#, fuzzy
msgid ""
"Subdirectories in archives created by ``ZipFile`` are now stored in "
"alphabetical order. (Contributed by Bernhard M. Wiedemann in :issue:`30693`.)"
msgstr ""
"由 ``ZipFile`` 建立的檔案中的子目錄現在按字母順序儲存。 （由 Bernhard M. "
"Wiedemann 在 :issue:`30693` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1645
#, fuzzy
msgid "C API Changes"
msgstr "C API 更改"

#: ../../whatsnew/3.7.rst:1647
#, fuzzy
msgid ""
"A new API for thread-local storage has been implemented.  See :ref:"
"`whatsnew37-pep539` for an overview and :ref:`thread-specific-storage-api` "
"for a complete reference. (Contributed by Masayuki Yamamoto in :issue:"
"`25658`.)"
msgstr ""
"已實作用於執行緒本地儲存的新 "
"API。有關概述，請參閱 :ref:`whatsnew37-pep539`，有關完整參考，請參閱：ref"
"：`thread-specific-storage-api`。 （由 Masayuki Yamamoto 在 :issue:`25658` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:1652
#, fuzzy
msgid ""
"The new :ref:`context variables <whatsnew37-pep567>` functionality exposes a "
"number of :ref:`new C APIs <contextvarsobjects>`."
msgstr ""
"新的 :ref:`上下文變數 <whatsnew37-pep567>` 功能公開了許多 :ref:`新的 C API "
"<contextvarsobjects>`。"

#: ../../whatsnew/3.7.rst:1655
#, fuzzy
msgid ""
"The new :c:func:`PyImport_GetModule` function returns the previously "
"imported module with the given name. (Contributed by Eric Snow in :issue:"
"`28411`.)"
msgstr ""
"新的 :c:func:`PyImport_GetModule` 函式回傳先前導入的具有給定名稱的模組。 （"
"由 Eric Snow 在 :issue:`28411` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1659
#, fuzzy
msgid ""
"The new :c:macro:`Py_RETURN_RICHCOMPARE` macro eases writing rich comparison "
"functions. (Contributed by Petr Victorin in :issue:`23699`.)"
msgstr ""
"新的 :c:macro:`Py_RETURN_RICHCOMPARE` 巨集簡化了編寫豐富的比較函式。 （由 "
"Petr Victorin 在 :issue:`23699` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1663
#, fuzzy
msgid ""
"The new :c:macro:`Py_UNREACHABLE` macro can be used to mark unreachable code "
"paths. (Contributed by Barry Warsaw in :issue:`31338`.)"
msgstr ""
"新的 :c:macro:`Py_UNREACHABLE` 巨集可用於標記無法訪問的程式碼路徑。 （由 "
"Barry Warsaw 在 :issue:`31338` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1667
#, fuzzy
msgid ""
"The :mod:`tracemalloc` now exposes a C API through the new :c:func:"
"`PyTraceMalloc_Track` and :c:func:`PyTraceMalloc_Untrack` functions. "
"(Contributed by Victor Stinner in :issue:`30054`.)"
msgstr ""
":mod:`tracemalloc` 現在通過新的:c:func:`PyTraceMalloc_Track` "
"和:c:func:`PyTraceMalloc_Untrack` 函式公開了一個 C API。 （由 Victor Stinner "
"在 :issue:`30054` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1672
#, fuzzy
msgid ""
"The new :c:func:`import__find__load__start` and :c:func:"
"`import__find__load__done` static markers can be used to trace module "
"imports. (Contributed by Christian Heimes in :issue:`31574`.)"
msgstr ""
"新的 :c:func:`import__find__load__start` 和 "
":c:func:`import__find__load__done` 靜態標記可用於跟踪模組導入。 （由 "
"Christian Heimes 在 :issue:`31574` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1677
#, fuzzy
msgid ""
"The fields :c:member:`name` and :c:member:`doc` of structures :c:type:"
"`PyMemberDef`, :c:type:`PyGetSetDef`, :c:type:`PyStructSequence_Field`, :c:"
"type:`PyStructSequence_Desc`, and :c:type:`wrapperbase` are now of type "
"``const char *`` rather of ``char *``.  (Contributed by Serhiy Storchaka in :"
"issue:`28761`.)"
msgstr ""
"欄位:c:member:`name` 和:c:member:`doc` 結構:c:type:`PyMemberDef`, "
":c:type:`PyGetSetDef`, :c:type:`PyStructSequence_Field`, :c "
":type:`PyStructSequence_Desc` 和 :c:type:`wrapperbase` 現在屬於 ``const char "
"*`` 而不是 ``char *`` 型別。 （由 Serhiy Storchaka 在 :issue:`28761` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:1683
#, fuzzy
msgid ""
"The result of :c:func:`PyUnicode_AsUTF8AndSize` and :c:func:"
"`PyUnicode_AsUTF8` is now of type ``const char *`` rather of ``char *``. "
"(Contributed by Serhiy Storchaka in :issue:`28769`.)"
msgstr ""
":c:func:`PyUnicode_AsUTF8AndSize` 和 :c:func:`PyUnicode_AsUTF8` 的結果現在是 "
"``const char *`` 而不是 ``char *`` 型別。 （由 Serhiy Storchaka 在 "
":issue:`28769` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1687
#, fuzzy
msgid ""
"The result of :c:func:`PyMapping_Keys`, :c:func:`PyMapping_Values` and :c:"
"func:`PyMapping_Items` is now always a list, rather than a list or a tuple. "
"(Contributed by Oren Milman in :issue:`28280`.)"
msgstr ""
":c:func:`PyMapping_Keys`、:c:func:`PyMapping_Values` 和 "
":c:func:`PyMapping_Items` 的結果現在始終是列表，而不是列表或元組。 （由 Oren "
"Milman 在 :issue:`28280` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1691
#, fuzzy
msgid ""
"Added functions :c:func:`PySlice_Unpack` and :c:func:"
"`PySlice_AdjustIndices`. (Contributed by Serhiy Storchaka in :issue:`27867`.)"
msgstr ""
"新增函式 :c:func:`PySlice_Unpack` 和 :c:func:`PySlice_AdjustIndices`。 （由 "
"Serhiy Storchaka 在 :issue:`27867` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1694
#, fuzzy
msgid ""
":c:func:`PyOS_AfterFork` is deprecated in favour of the new functions :c:"
"func:`PyOS_BeforeFork`, :c:func:`PyOS_AfterFork_Parent` and :c:func:"
"`PyOS_AfterFork_Child`.  (Contributed by Antoine Pitrou in :issue:`16500`.)"
msgstr ""
":c:func:`PyOS_AfterFork` 已棄用，取而代之的是新函式 :c:func:`PyOS_BeforeFork`"
"、:c:func:`PyOS_AfterFork_Parent` 和 :c:func:`PyOS_AfterFork_Child`。 （由 "
"Antoine Pitrou 在 :issue:`16500` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1699
#, fuzzy
msgid ""
"The ``PyExc_RecursionErrorInst`` singleton that was part of the public API "
"has been removed as its members being never cleared may cause a segfault "
"during finalization of the interpreter. Contributed by Xavier de Gaye in :"
"issue:`22898` and :issue:`30697`."
msgstr ""
"作為公開 API 的一部分的 ``PyExc_RecursionErrorInst`` 單例已被刪除，因為它的成"
"員永遠不會被清除可能會在直譯器的最終確定期間導致段錯誤。由 Xavier de Gaye 在 "
":issue:`22898` 和 :issue:`30697` 中貢獻。"

#: ../../whatsnew/3.7.rst:1704
#, fuzzy
msgid ""
"Added C API support for timezones with timezone constructors :c:func:"
"`PyTimeZone_FromOffset` and :c:func:`PyTimeZone_FromOffsetAndName`, and "
"access to the UTC singleton with :c:data:`PyDateTime_TimeZone_UTC`. "
"Contributed by Paul Ganssle in :issue:`10381`."
msgstr ""
"新增了對時區構造函式 :c:func:`PyTimeZone_FromOffset` 和 "
":c:func:`PyTimeZone_FromOffsetAndName` 的時區的 C API 支援，並使用 "
":c:data:`PyDateTime_TimeZone_UTC` 訪問 UTC 單例。由 Paul Ganssle 在 "
":issue:`10381` 中貢獻。"

#: ../../whatsnew/3.7.rst:1709
#, fuzzy
msgid ""
"The type of results of :c:func:`PyThread_start_new_thread` and :c:func:"
"`PyThread_get_thread_ident`, and the *id* parameter of :c:func:"
"`PyThreadState_SetAsyncExc` changed from :c:expr:`long` to :c:expr:`unsigned "
"long`. (Contributed by Serhiy Storchaka in :issue:`6532`.)"
msgstr ""
":c:func:`PyThread_start_new_thread` 和 :c:func:`PyThread_get_thread_ident` "
"的結果型別，以及 :c:func:`PyThreadState_SetAsyncExc` 的 *id* 參數從 "
":c:expr:`long` 更改為： c:expr:`unsigned long`。 （由 Serhiy Storchaka 在 "
":issue:`6532` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1715
#, fuzzy
msgid ""
":c:func:`PyUnicode_AsWideCharString` now raises a :exc:`ValueError` if the "
"second argument is ``NULL`` and the :c:expr:`wchar_t*` string contains null "
"characters.  (Contributed by Serhiy Storchaka in :issue:`30708`.)"
msgstr ""
":c:func:`PyUnicode_AsWideCharString` 現在在第二個參數為 ``NULL`` 且 "
":c:expr:`wchar_t*` 字串包含空字元時引發 :exc:`ValueError`。 （由 Serhiy "
"Storchaka 在 :issue:`30708` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1719
#, fuzzy
msgid ""
"Changes to the startup sequence and the management of dynamic memory "
"allocators mean that the long documented requirement to call :c:func:"
"`Py_Initialize` before calling most C API functions is now relied on more "
"heavily, and failing to abide by it may lead to segfaults in embedding "
"applications. See the :ref:`porting-to-python-37` section in this document "
"and the :ref:`pre-init-safe` section in the C API documentation for more "
"details."
msgstr ""
"啟動順序的更改和動態記憶體分配器的管理意味著在呼叫大多數 C API 函式之前呼叫 "
":c:func:`Py_Initialize` 的長期記錄要求現在更加依賴，如果不遵守它可能會導致嵌"
"入應用程式中的段錯誤。有關詳細資訊，請參閱本文檔中的 :ref:`porting-to-"
"python-37` 部分和 C API 文檔中的 :ref:`pre-init-safe` 部分。"

#: ../../whatsnew/3.7.rst:1727
#, fuzzy
msgid ""
"The new :c:func:`PyInterpreterState_GetID` returns the unique ID for a given "
"interpreter. (Contributed by Eric Snow in :issue:`29102`.)"
msgstr ""
"新的 :c:func:`PyInterpreterState_GetID` 回傳給定直譯器的唯一 ID。 （由 Eric "
"Snow 在 :issue:`29102` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1731
#, fuzzy
msgid ""
":c:func:`Py_DecodeLocale`, :c:func:`Py_EncodeLocale` now use the UTF-8 "
"encoding when the :ref:`UTF-8 mode <whatsnew37-pep540>` is enabled. "
"(Contributed by Victor Stinner in :issue:`29240`.)"
msgstr ""
":c:func:`Py_DecodeLocale`、:c:func:`Py_EncodeLocale` 現在在啟用 :ref:`UTF-8 "
"模式 <whatsnew37-pep540>` 時使用 UTF-8 編碼。 （由 Victor Stinner 在 "
":issue:`29240` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1735
#, fuzzy
msgid ""
":c:func:`PyUnicode_DecodeLocaleAndSize` and :c:func:`PyUnicode_EncodeLocale` "
"now use the current locale encoding for ``surrogateescape`` error handler. "
"(Contributed by Victor Stinner in :issue:`29240`.)"
msgstr ""
":c:func:`PyUnicode_DecodeLocaleAndSize` 和 :c:func:`PyUnicode_EncodeLocale` "
"現在使用當前區域設定編碼作為 ``surrogateescape`` 錯誤處理程式。 （由 Victor "
"Stinner 在 :issue:`29240` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1739
#, fuzzy
msgid ""
"The *start* and *end* parameters of :c:func:`PyUnicode_FindChar` are now "
"adjusted to behave like string slices. (Contributed by Xiang Zhang in :issue:"
"`28822`.)"
msgstr ""
":c:func:`PyUnicode_FindChar` 的 *start* 和 *end* "
"參數現在被調整為表現得像字串切片。 （由 Xiang Zhang 在 :issue:`28822` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:1745
#, fuzzy
msgid "Build Changes"
msgstr "構建更改"

#: ../../whatsnew/3.7.rst:1747
#, fuzzy
msgid ""
"Support for building ``--without-threads`` has been removed.  The :mod:"
"`threading` module is now always available. (Contributed by Antoine Pitrou "
"in :issue:`31370`.)."
msgstr ""
"已刪除對構建 ``--without-threads`` 的支援。 :mod:`threading` 模組現在始終可用。 "
"（由 Antoine Pitrou 在 :issue:`31370` 中貢獻。）。"

#: ../../whatsnew/3.7.rst:1751
#, fuzzy
msgid ""
"A full copy of libffi is no longer bundled for use when building the :mod:"
"`_ctypes <ctypes>` module on non-OSX UNIX platforms.  An installed copy of "
"libffi is now required when building ``_ctypes`` on such platforms. "
"(Contributed by Zachary Ware in :issue:`27979`.)"
msgstr ""
"在非 OSX UNIX 平台上構建 :mod:`_ctypes <ctypes>` 模組時，不再捆綁使用 libffi "
"的完整副本。在此類平台上構建 _ctypes 時，現在需要安裝 libffi 副本。 （由 "
"Zachary Ware 在 :issue:`27979` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1756
#, fuzzy
msgid ""
"The Windows build process no longer depends on Subversion to pull in "
"external sources, a Python script is used to download zipfiles from GitHub "
"instead. If Python 3.6 is not found on the system (via ``py -3.6``), NuGet "
"is used to download a copy of 32-bit Python for this purpose.  (Contributed "
"by Zachary Ware in :issue:`30450`.)"
msgstr ""
"Windows 構建過程不再依賴 Subversion 來引入外部源，而是使用 Python 腳本從 "
"GitHub 下載 zip 文件。如果在系統上未找到 Python 3.6（通過 ``py -3.6``），"
"NuGet 將用於為此目的下載 32 位 Python 的副本。 （由 Zachary Ware 在 "
":issue:`30450` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1762
#, fuzzy
msgid ""
"The :mod:`ssl` module requires OpenSSL 1.0.2 or 1.1 compatible libssl. "
"OpenSSL 1.0.1 has reached end of lifetime on 2016-12-31 and is no longer "
"supported. LibreSSL is temporarily not supported as well. LibreSSL releases "
"up to version 2.6.4 are missing required OpenSSL 1.0.2 APIs."
msgstr ""
":mod:`ssl` 模組需要 OpenSSL 1.0.2 或 1.1 相容的 libssl。 OpenSSL 1.0.1 已於 "
"2016 年 12 月 31 日結束生命週期，不再受支援。暫時也不支援 LibreSSL。 "
"LibreSSL 版本 2.6.4 之前的版本缺少必需的 OpenSSL 1.0.2 API。"

#: ../../whatsnew/3.7.rst:1771
#, fuzzy
msgid "Optimizations"
msgstr "最佳化"

#: ../../whatsnew/3.7.rst:1773
#, fuzzy
msgid ""
"The overhead of calling many methods of various standard library classes "
"implemented in C has been significantly reduced by porting more code to use "
"the ``METH_FASTCALL`` convention. (Contributed by Victor Stinner in :issue:"
"`29300`, :issue:`29507`, :issue:`29452`, and :issue:`29286`.)"
msgstr ""
"通過移植更多程式碼以使用“METH_FASTCALL”約定，呼叫用 C "
"實作的各種標準庫類的許多方法的開銷已大大減少。 （由 Victor Stinner 在 "
":issue:`29300`、:issue:`29507`、:issue:`29452` 和 :issue:`29286` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1779
#, fuzzy
msgid ""
"Various optimizations have reduced Python startup time by 10% on Linux and "
"up to 30% on macOS. (Contributed by Victor Stinner, INADA Naoki in :issue:"
"`29585`, and Ivan Levkivskyi in :issue:`31333`.)"
msgstr ""
"各種最佳化已將 Python 在 Linux 上的啟動時間減少了 10%，在 macOS 上減少了高達 "
"30%。 （由 Victor Stinner、INADA Naoki 在 :issue:`29585` 和 Ivan Levkivskyi "
"在 :issue:`31333` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1784
#, fuzzy
msgid ""
"Method calls are now up to 20% faster due to the bytecode changes which "
"avoid creating bound method instances. (Contributed by Yury Selivanov and "
"INADA Naoki in :issue:`26110`.)"
msgstr ""
"由於避免建立綁定方法實例的位元組碼更改，方法呼叫現在最多快 20%。 （由 Yury "
"Selivanov 和 INADA Naoki 在 :issue:`26110` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1790
#, fuzzy
msgid ""
"The :mod:`asyncio` module received a number of notable optimizations for "
"commonly used functions:"
msgstr ":mod:`asyncio` 模組對常用函式進行了許多顯著最佳化："

#: ../../whatsnew/3.7.rst:1793
#, fuzzy
msgid ""
"The :func:`asyncio.get_event_loop` function has been reimplemented in C to "
"make it up to 15 times faster. (Contributed by Yury Selivanov in :issue:"
"`32296`.)"
msgstr ""
":func:`asyncio.get_event_loop` 函式已在 C 中重新實作，使其速度提高了 15 倍。 "
"（由 Yury Selivanov 在 :issue:`32296` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1797
#, fuzzy
msgid ""
":class:`asyncio.Future` callback management has been optimized. (Contributed "
"by Yury Selivanov in :issue:`32348`.)"
msgstr ""
":class:`asyncio.Future` 回呼管理已經過最佳化。 （由 Yury Selivanov 在 "
":issue:`32348` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1800
#, fuzzy
msgid ""
":func:`asyncio.gather` is now up to 15% faster. (Contributed by Yury "
"Selivanov in :issue:`32355`.)"
msgstr ""
":func:`asyncio.gather` 現在最多快 15%。 （由 Yury Selivanov 在 :issue:`32355`"
" 中貢獻。）"

#: ../../whatsnew/3.7.rst:1803
#, fuzzy
msgid ""
":func:`asyncio.sleep` is now up to 2 times faster when the *delay* argument "
"is zero or negative. (Contributed by Andrew Svetlov in :issue:`32351`.)"
msgstr ""
":func:`asyncio.sleep` 現在當 *delay* 參數為零或負數時最多快 2 倍。 （由 "
"Andrew Svetlov 在 :issue:`32351` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1807
#, fuzzy
msgid ""
"The performance overhead of asyncio debug mode has been reduced. "
"(Contributed by Antoine Pitrou in :issue:`31970`.)"
msgstr "asyncio 除錯模式的性能開銷已減少。 （由 Antoine Pitrou 在 :issue:`31970` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:1810
#, fuzzy
msgid ""
"As a result of :ref:`PEP 560 work <whatsnew37-pep560>`, the import time of :"
"mod:`typing` has been reduced by a factor of 7, and many typing operations "
"are now faster. (Contributed by Ivan Levkivskyi in :issue:`32226`.)"
msgstr ""
"作為 :ref:`PEP 560 work <whatsnew37-pep560>` 的結果，:mod:`typing` "
"的導入時間減少了 7 倍，許多打字操作現在更快了。 （由 Ivan Levkivskyi 在 "
":issue:`32226` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1815
#, fuzzy
msgid ""
":func:`sorted` and :meth:`list.sort` have been optimized for common cases to "
"be up to 40-75% faster. (Contributed by Elliot Gorokhovsky in :issue:"
"`28685`.)"
msgstr ""
":func:`sorted` 和 :meth:`list.sort` 針對常見情況進行了最佳化，速度提高了 "
"40-75%。 （由 Elliot Gorokhovsky 在 :issue:`28685` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1819
#, fuzzy
msgid ""
":meth:`dict.copy` is now up to 5.5 times faster. (Contributed by Yury "
"Selivanov in :issue:`31179`.)"
msgstr ":meth:`dict.copy` 現在最多快 5.5 倍。 （由 Yury Selivanov 在 :issue:`31179` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:1822
#, fuzzy
msgid ""
":func:`hasattr` and :func:`getattr` are now about 4 times faster when *name* "
"is not found and *obj* does not override :meth:`object.__getattr__` or :meth:"
"`object.__getattribute__`. (Contributed by INADA Naoki in :issue:`32544`.)"
msgstr ""
":func:`hasattr` 和 :func:`getattr` 在未找到 *name* 且 *obj* 未覆蓋 "
":meth:`object.__getattr__` 或 :meth:`object.__getattribute__` 時大約快 4 倍. "
"（由 INADA Naoki 在 :issue:`32544` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1827
#, fuzzy
msgid ""
"Searching for certain Unicode characters (like Ukrainian capital \"Є\") in a "
"string was up to 25 times slower than searching for other characters. It is "
"now only 3 times slower in the worst case. (Contributed by Serhiy Storchaka "
"in :issue:`24821`.)"
msgstr ""
"在字串中搜索某些 Unicode 字元（如烏克蘭大寫字母 ``Є``）比搜索其他字元慢多達 25 "
"倍。現在在最壞的情況下只慢了 3 倍。 （由 Serhiy Storchaka 在 :issue:`24821` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:1832
#, fuzzy
msgid ""
"The :func:`collections.namedtuple` factory has been reimplemented to make "
"the creation of named tuples 4 to 6 times faster. (Contributed by Jelle "
"Zijlstra with further improvements by INADA Naoki, Serhiy Storchaka, and "
"Raymond Hettinger in :issue:`28638`.)"
msgstr ""
":func:`collections.namedtuple` 工廠已經重新實作，使命名元組的建立速度提高了 "
"4 到 6 倍。 （由 Jelle Zijlstra 貢獻，INADA Naoki、Serhiy Storchaka 和 "
"Raymond Hettinger 在 :issue:`28638` 中進一步改進。）"

#: ../../whatsnew/3.7.rst:1837
#, fuzzy
msgid ""
":meth:`date.fromordinal` and :meth:`date.fromtimestamp` are now up to 30% "
"faster in the common case. (Contributed by Paul Ganssle in :issue:`32403`.)"
msgstr ""
":meth:`date.fromordinal` 和 :meth:`date.fromtimestamp` "
"現在在常見情況下最多快 30%。 （由 Paul Ganssle 在 :issue:`32403` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1841
#, fuzzy
msgid ""
"The :func:`os.fwalk` function is now up to 2 times faster thanks to the use "
"of :func:`os.scandir`. (Contributed by Serhiy Storchaka in :issue:`25996`.)"
msgstr ""
"由於使用了 :func:`os.scandir`，現在 :func:`os.fwalk` 函式的速度提高了 2 倍。 "
"（由 Serhiy Storchaka 在 :issue:`25996` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1845
#, fuzzy
msgid ""
"The speed of the :func:`shutil.rmtree` function has been improved by 20--40% "
"thanks to the use of the :func:`os.scandir` function. (Contributed by Serhiy "
"Storchaka in :issue:`28564`.)"
msgstr ""
"由於使用了 :func:`os.scandir` 函式，shutil.rmtree 函式的速度提高了 20--40%。 "
"（由 Serhiy Storchaka 在 :issue:`28564` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1849
#, fuzzy
msgid ""
"Optimized case-insensitive matching and searching of :mod:`regular "
"expressions <re>`.  Searching some patterns can now be up to 20 times "
"faster. (Contributed by Serhiy Storchaka in :issue:`30285`.)"
msgstr ""
"最佳化了 :mod:`正則表達式 <re>` 的不區分大小寫的匹配和搜索。"
"搜索某些模式現在最多可以快 20 倍。 （由 Serhiy Storchaka 在 :issue:`30285` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:1853
#, fuzzy
msgid ""
":func:`re.compile` now converts ``flags`` parameter to int object if it is "
"``RegexFlag``.  It is now as fast as Python 3.5, and faster than Python 3.6 "
"by about 10% depending on the pattern. (Contributed by INADA Naoki in :issue:"
"`31671`.)"
msgstr ""
":func:`re.compile` 現在將 ``flags`` 參數轉換為 int 物件，如果它是 "
"``RegexFlag``。它現在與 Python 3.5 一樣快，並且比 Python 3.6 快大約 "
"10%，具體取決於模式。 （由 INADA Naoki 在 :issue:`31671` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1858
#, fuzzy
msgid ""
"The :meth:`~selectors.BaseSelector.modify` methods of classes :class:"
"`selectors.EpollSelector`, :class:`selectors.PollSelector` and :class:"
"`selectors.DevpollSelector` may be around 10% faster under heavy loads.  "
"(Contributed by Giampaolo Rodola' in :issue:`30014`)"
msgstr ""
":class:`selectors.EpollSelector`、:class:`selectors.PollSelector` 和 "
":class:`selectors.DevpollSelector` 類的 :meth:`~selectors.BaseSelector."
"modify` 方法在重負載下可能會快 10% 左右. （由 Giampaolo Rodola 在 "
":issue:`30014` 中貢獻）"

#: ../../whatsnew/3.7.rst:1863
#, fuzzy
msgid ""
"Constant folding has been moved from the peephole optimizer to the new AST "
"optimizer, which is able perform optimizations more consistently. "
"(Contributed by Eugene Toder and INADA Naoki in :issue:`29469` and :issue:"
"`11549`.)"
msgstr ""
"恆定折疊已從窺孔最佳化器轉移到新的 AST 最佳化器，它能夠更一致地執行最佳化。 "
"（由 Eugene Toder 和 INADA Naoki 在 :issue:`29469` 和 :issue:`11549` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:1868
#, fuzzy
msgid ""
"Most functions and methods in :mod:`abc` have been rewritten in C. This "
"makes creation of abstract base classes, and calling :func:`isinstance` and :"
"func:`issubclass` on them 1.5x faster.  This also reduces Python start-up "
"time by up to 10%. (Contributed by Ivan Levkivskyi and INADA Naoki in :issue:"
"`31333`)"
msgstr ""
":mod:`abc` 中的大多數函式和方法都已用 C 語言重寫。"
"這使得抽象基底類別的建立以及呼叫 :func:`isinstance` 和 :func:`issubclass` "
"的速度提高了 1.5 倍。這還將 Python 啟動時間減少了多達 10%。 （由 Ivan "
"Levkivskyi 和 INADA Naoki 在 :issue:`31333` 中貢獻）"

#: ../../whatsnew/3.7.rst:1874
#, fuzzy
msgid ""
"Significant speed improvements to alternate constructors for :class:"
"`datetime.date` and :class:`datetime.datetime` by using fast-path "
"constructors when not constructing subclasses. (Contributed by Paul Ganssle "
"in :issue:`32403`)"
msgstr ""
"通過在不構造子類別時使用快速路徑構造函式，顯著提高了 datetime.date 和 "
"datetime.datetime 的備用構造函式的速度。 （由 Paul Ganssle 在 :issue:`32403` "
"中貢獻）"

#: ../../whatsnew/3.7.rst:1879
#, fuzzy
msgid ""
"The speed of comparison of :class:`array.array` instances has been improved "
"considerably in certain cases.  It is now from 10x to 70x faster when "
"comparing arrays holding values of the same integer type. (Contributed by "
"Adrian Wielgosik in :issue:`24700`.)"
msgstr ""
":class:`array.array` 實例的比較速度在某些情況下得到了顯著提高。現在，在比較包"
"含相同整數型別值的數組時，速度提高了 10 倍到 70 倍。 （由 Adrian Wielgosik "
"在 :issue:`24700` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1884
#, fuzzy
msgid ""
"The :func:`math.erf` and :func:`math.erfc` functions now use the (faster) C "
"library implementation on most platforms. (Contributed by Serhiy Storchaka "
"in :issue:`26121`.)"
msgstr ""
":func:`math.erf` 和 :func:`math.erfc` 函式現在在大多數平台上使用（更快的）C "
"庫實作。 （由 Serhiy Storchaka 在 :issue:`26121` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1890
#, fuzzy
msgid "Other CPython Implementation Changes"
msgstr "其他 CPython 實作更改"

#: ../../whatsnew/3.7.rst:1892
#, fuzzy
msgid ""
"Trace hooks may now opt out of receiving the ``line`` and opt into receiving "
"the ``opcode`` events from the interpreter by setting the corresponding new "
"``f_trace_lines`` and ``f_trace_opcodes`` attributes on the frame being "
"traced. (Contributed by Nick Coghlan in :issue:`31344`.)"
msgstr ""
"跟踪掛鉤現在可以通過在被跟踪的幀上設定相應的新“f_trace_lines”和“f_trace_opcod"
"es”屬性來選擇不接收 ``line``並選擇從直譯器接收 ``opcode``事件. （由 Nick Coghlan "
"在 :issue:`31344` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1897
#, fuzzy
msgid ""
"Fixed some consistency problems with namespace package module attributes. "
"Namespace module objects now have an ``__file__`` that is set to ``None`` "
"(previously unset), and their ``__spec__.origin`` is also set to ``None`` "
"(previously the string ``\"namespace\"``).  See :issue:`32305`.  Also, the "
"namespace module object's ``__spec__.loader`` is set to the same value as "
"``__loader__`` (previously, the former was set to ``None``).  See :issue:"
"`32303`."
msgstr ""
"修復了命名空間包模組屬性的一些一致性問題。命名空間模組物件現在有一個設定為 ``None`` "
"（之前未設定）的 ``__file__``，它們的 ``__spec__.origin`` 也設定為 ``None`` "
"（之前是字串 ``\"namespace\"``)。請參閱 :issue:`32305`。此外，命名空間模組物件的 "
"``__spec__.loader`` 設定為與 ``__loader__`` 相同的值（之前，前者設定為 ``None``）"
"。請參閱 :issue:`32303`。"

#: ../../whatsnew/3.7.rst:1905
#, fuzzy
msgid ""
"The :func:`locals` dictionary now displays in the lexical order that "
"variables were defined.  Previously, the order was undefined. (Contributed "
"by Raymond Hettinger in :issue:`32690`.)"
msgstr ""
":func:`locals` 字典現在以定義變數的詞法順序顯示。以前，順序是未定義的。 （由 "
"Raymond Hettinger 在 :issue:`32690` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1909
#, fuzzy
msgid ""
"The :mod:`distutils` ``upload`` command no longer tries to change CR end-of-"
"line characters to CRLF.  This fixes a corruption issue with sdists that "
"ended with a byte equivalent to CR. (Contributed by Bo Bayles in :issue:"
"`32304`.)"
msgstr ""
":mod:`distutils` ``upload`` 命令不再嘗試將 CR 行尾字元更改為 CRLF。"
"這修復了以相當於 CR 的位元組結尾的 sdists 的損壞問題。 （由 Bo Bayles 在 "
":issue:`32304` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1916
#, fuzzy
msgid "Deprecated Python Behavior"
msgstr "棄用的 Python 行為"

#: ../../whatsnew/3.7.rst:1918
#, fuzzy
msgid ""
"Yield expressions (both ``yield`` and ``yield from`` clauses) are now "
"deprecated in comprehensions and generator expressions (aside from the "
"iterable expression in the leftmost :keyword:`!for` clause). This ensures "
"that comprehensions always immediately return a container of the appropriate "
"type (rather than potentially returning a :term:`generator iterator` "
"object), while generator expressions won't attempt to interleave their "
"implicit output with the output from any explicit yield expressions.  In "
"Python 3.7, such expressions emit :exc:`DeprecationWarning` when compiled, "
"in Python 3.8 this will be a :exc:`SyntaxError`. (Contributed by Serhiy "
"Storchaka in :issue:`10544`.)"
msgstr ""
"Yield 表達式（``yield`` 和 ``yield from`` 子句）現在在理解和生成器表達式中被"
"棄用（除了最左邊的可疊代表達式 :keyword:`!for` "
"子句）。這確保理解總是立即回傳適當型別的容器（而不是可能回傳 generator "
"iterator 物件），而生成器表達式不會嘗試將其隱式輸出與任何顯式 yield "
"表達式的輸出交錯。在 Python 3.7 "
"中，此類表達式在編譯時發出 :exec:`DeprecationWarning`，在 Python 3.8 "
"中，這將是一個 :exec:`SyntaxError`。 （由 Serhiy Storchaka 在 :issue:`10544` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:1929
#, fuzzy
msgid ""
"Returning a subclass of :class:`complex` from :meth:`object.__complex__` is "
"deprecated and will be an error in future Python versions.  This makes "
"``__complex__()`` consistent with :meth:`object.__int__` and :meth:`object."
"__float__`. (Contributed by Serhiy Storchaka in :issue:`28894`.)"
msgstr ""
"從 :meth:`object.__complex__` 回傳 :class:`complex` 的子類別已被棄用，"
"在未來的 Python 版本中將是一個錯誤。這使得 ``__complex__()`` 與 :meth:`object"
".__int__` 和 :meth:`object.__float__` 一致。 （由 Serhiy Storchaka 在 "
":issue:`28894` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1938
#, fuzzy
msgid "Deprecated Python modules, functions and methods"
msgstr "棄用的 Python 模組、函式和方法"

#: ../../whatsnew/3.7.rst:1941
msgid "aifc"
msgstr "aifc"

#: ../../whatsnew/3.7.rst:1943
#, fuzzy
msgid ""
":func:`aifc.openfp` has been deprecated and will be removed in Python 3.9. "
"Use :func:`aifc.open` instead. (Contributed by Brian Curtin in :issue:"
"`31985`.)"
msgstr ""
":func:`aifc.openfp` 已被棄用，並將在 Python 3.9 中刪除。使用 :func:`aifc."
"open` 代替。 （由 Brian Curtin 在 :issue:`31985` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1953
#, fuzzy
msgid ""
"Support for directly ``await``-ing instances of :class:`asyncio.Lock` and "
"other asyncio synchronization primitives has been deprecated.  An "
"asynchronous context manager must be used in order to acquire and release "
"the synchronization resource. (Contributed by Andrew Svetlov in :issue:"
"`32253`.)"
msgstr ""
"不推薦直接支援 asyncio.Lock 和其他 asyncio 同步原語的 ``await``-ing "
"實例。必須使用非同步上下文管理器來獲取和釋放同步資源。 （由 Andrew Svetlov "
"在 :issue:`32253` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1959
#, fuzzy
msgid ""
"The :meth:`asyncio.Task.current_task` and :meth:`asyncio.Task.all_tasks` "
"methods have been deprecated. (Contributed by Andrew Svetlov in :issue:"
"`32250`.)"
msgstr ""
":meth:`asyncio.Task.current_task` 和 :meth:`asyncio.Task.all_tasks` "
"方法已被棄用。 （由 Andrew Svetlov 在 :issue:`32250` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1967
#, fuzzy
msgid ""
"In Python 3.8, the abstract base classes in :mod:`collections.abc` will no "
"longer be exposed in the regular :mod:`collections` module.  This will help "
"create a clearer distinction between the concrete classes and the abstract "
"base classes. (Contributed by Serhiy Storchaka in :issue:`25988`.)"
msgstr ""
"在 Python 3.8 中，:mod:`collections.abc` 中的抽象基底類別將不再在常規 "
":mod:`collections` "
"模組中公開。這將有助於在具體類和抽象基底類別之間建立更清晰的區別。 （由 "
"Serhiy Storchaka 在 :issue:`25988` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1977
#, fuzzy
msgid ""
":mod:`dbm.dumb` now supports reading read-only files and no longer writes "
"the index file when it is not changed.  A deprecation warning is now emitted "
"if the index file is missing and recreated in the ``'r'`` and ``'w'`` modes "
"(this will be an error in future Python releases). (Contributed by Serhiy "
"Storchaka in :issue:`28847`.)"
msgstr ""
":mod:`dbm.dumb` 現在支援讀取只讀文件，並且在未更改時不再寫入索引文件。如果索"
"引文件丟失並在 ``'r'`` 和 ``'w'`` 模式下重新建立，現在會發出棄用警告（這將是未來 Python "
"版本中的錯誤）。 （由 Serhiy Storchaka 在 :issue:`28847` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1987
#, fuzzy
msgid ""
"In Python 3.8, attempting to check for non-Enum objects in :class:`Enum` "
"classes will raise a :exc:`TypeError` (e.g. ``1 in Color``); similarly, "
"attempting to check for non-Flag objects in a :class:`Flag` member will "
"raise :exc:`TypeError` (e.g. ``1 in Perm.RW``); currently, both operations "
"return :const:`False` instead. (Contributed by Ethan Furman in :issue:"
"`33217`.)"
msgstr ""
"在 Python 3.8 中，嘗試檢查 Enum 類中的非 Enum 物件將引發 TypeError（例如，"
"Color 中的 1）；同樣，嘗試檢查 :class:`Flag` 成員中的非 Flag 物件將引發 "
":exc:`TypeError`（例如 ``Perm.RW 中的 1``）；目前，這兩個操作都回傳 "
":const:`False`。 （由 Ethan Furman 在 :issue:`33217` 中貢獻。）"

#: ../../whatsnew/3.7.rst:1996
msgid "gettext"
msgstr "gettext"

#: ../../whatsnew/3.7.rst:1998
#, fuzzy
msgid ""
"Using non-integer value for selecting a plural form in :mod:`gettext` is now "
"deprecated.  It never correctly worked. (Contributed by Serhiy Storchaka in :"
"issue:`28692`.)"
msgstr ""
"在 :mod:`gettext` 中使用非整數值選擇複數形式現已棄用。它從來沒有正確工作過。 "
"（由 Serhiy Storchaka 在 :issue:`28692` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2006
#, fuzzy
msgid ""
"Methods :meth:`MetaPathFinder.find_module() <importlib.abc.MetaPathFinder."
"find_module>` (replaced by :meth:`MetaPathFinder.find_spec() <importlib.abc."
"MetaPathFinder.find_spec>`) and :meth:`PathEntryFinder.find_loader() "
"<importlib.abc.PathEntryFinder.find_loader>` (replaced by :meth:"
"`PathEntryFinder.find_spec() <importlib.abc.PathEntryFinder.find_spec>`) "
"both deprecated in Python 3.4 now emit :exc:`DeprecationWarning`. "
"(Contributed by Matthias Bussonnier in :issue:`29576`)"
msgstr ""
"方法 :meta:`MetaPathFinder.find_module() <importlib.abc.MetaPathFinder."
"find_module>`（替換為 :meth:`MetaPathFinder.find_spec() <importlib.abc."
"MetaPathFinder.find_spec>`）和 :meth:`PathEntryFinder。 find_loader() "
"<importlib.abc.PathEntryFinder.find_loader>`（替換為 :meth:`PathEntryFinder."
"find_spec() <importlib.abc.PathEntryFinder.find_spec>`）在 Python 3.4 "
"中均已棄用，現在發出 :exec:`DeprecationWarning`。 （由 Matthias Bussonnier 在 "
":issue:`29576` 中貢獻）"

#: ../../whatsnew/3.7.rst:2017
#, fuzzy
msgid ""
"The :class:`importlib.abc.ResourceLoader` ABC has been deprecated in favour "
"of :class:`importlib.abc.ResourceReader`."
msgstr ""
":class:`importlib.abc.ResourceLoader` ABC 已被棄用，取而代之的是 "
":class:`importlib.abc.ResourceReader`。"

#: ../../whatsnew/3.7.rst:2024
#, fuzzy
msgid ""
":func:`locale.format` has been deprecated, use :meth:`locale.format_string` "
"instead.  (Contributed by Garvit in :issue:`10379`.)"
msgstr ""
":func:`locale.format` 已被棄用，請改用 :meth:`locale.format_string`。 （由 "
"Garvit 在 :issue:`10379` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2029
msgid "macpath"
msgstr "macpath"

#: ../../whatsnew/3.7.rst:2031
#, fuzzy
msgid ""
"The :mod:`macpath` is now deprecated and will be removed in Python 3.8. "
"(Contributed by Chi Hsuan Yen in :issue:`9850`.)"
msgstr ""
":mod:`macpath` 現已棄用，並將在 Python 3.8 中刪除。 （由 Chi Hsuan Yen 在 "
":issue:`9850` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2036
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.7.rst:2038
#, fuzzy
msgid ""
":mod:`dummy_threading` and :mod:`_dummy_thread` have been deprecated.  It is "
"no longer possible to build Python with threading disabled. Use :mod:"
"`threading` instead. (Contributed by Antoine Pitrou in :issue:`31370`.)"
msgstr ""
":mod:`dummy_threading` 和 :mod:`_dummy_thread` 已被棄用。"
"不再可能在禁用執行緒的情況下構建 Python。使用 :mod:`threading` 代替。 （由 "
"Antoine Pitrou 在 :issue:`31370` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2047
#, fuzzy
msgid ""
"The silent argument value truncation in :func:`socket.htons` and :func:"
"`socket.ntohs` has been deprecated.  In future versions of Python, if the "
"passed argument is larger than 16 bits, an exception will be raised. "
"(Contributed by Oren Milman in :issue:`28332`.)"
msgstr ""
":func:`socket.htons` 和 :func:`socket.ntohs` 中的靜默參數值截斷已被棄用。"
"在未來的 Python 版本中，如果傳遞的參數大於 16 位，則會引發例外。 （由 Oren "
"Milman 在 :issue:`28332` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2056
#, fuzzy
msgid ""
":func:`ssl.wrap_socket` is deprecated.  Use :meth:`ssl.SSLContext."
"wrap_socket` instead. (Contributed by Christian Heimes in :issue:`28124`.)"
msgstr ""
":func:`ssl.wrap_socket` 已棄用。請改用 :meth:`ssl.SSLContext.wrap_socket`。 "
"（由 Christian Heimes 在 :issue:`28124` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2062
msgid "sunau"
msgstr "sunau"

#: ../../whatsnew/3.7.rst:2064
#, fuzzy
msgid ""
":func:`sunau.openfp` has been deprecated and will be removed in Python 3.9. "
"Use :func:`sunau.open` instead. (Contributed by Brian Curtin in :issue:"
"`31985`.)"
msgstr ""
":func:`sunau.openfp` 已被棄用，並將在 Python 3.9 中刪除。請改用 :func:`sunau."
"open`。 （由 Brian Curtin 在 :issue:`31985` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2072
#, fuzzy
msgid ""
"Deprecated :func:`sys.set_coroutine_wrapper` and :func:`sys."
"get_coroutine_wrapper`."
msgstr "棄用 :func:`sys.set_coroutine_wrapper` 和 :func:`sys.get_coroutine_wrapper`。"

#: ../../whatsnew/3.7.rst:2075
#, fuzzy
msgid ""
"The undocumented ``sys.callstats()`` function has been deprecated and will "
"be removed in a future Python version. (Contributed by Victor Stinner in :"
"issue:`28799`.)"
msgstr ""
"未記錄的 ``sys.callstats()`` 函式已被棄用，並將在未來的 Python 版本中刪除。 "
"（由 Victor Stinner 在 :issue:`28799` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2081
msgid "wave"
msgstr "wave"

#: ../../whatsnew/3.7.rst:2083
#, fuzzy
msgid ""
":func:`wave.openfp` has been deprecated and will be removed in Python 3.9. "
"Use :func:`wave.open` instead. (Contributed by Brian Curtin in :issue:"
"`31985`.)"
msgstr ""
":func:`wave.openfp` 已被棄用，並將在 Python 3.9 中刪除。使用 :func:`wave."
"open` 代替。 （由 Brian Curtin 在 :issue:`31985` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2089
#, fuzzy
msgid "Deprecated functions and types of the C API"
msgstr "C API 的棄用函式和型別"

#: ../../whatsnew/3.7.rst:2091
#, fuzzy
msgid ""
"Function :c:func:`PySlice_GetIndicesEx` is deprecated and replaced with a "
"macro if ``Py_LIMITED_API`` is not set or set to a value in the range "
"between ``0x03050400`` and ``0x03060000`` (not inclusive), or is "
"``0x03060100`` or higher.  (Contributed by Serhiy Storchaka in :issue:"
"`27867`.)"
msgstr ""
"函式:c:func:`PySlice_GetIndicesEx` 被棄用並替換為巨集如果``Py_LIMITED_API`` "
"未設定或設定為``0x03050400`` 和``0x03060000`` "
"之間的值（不包括在內），或者是 ``0x03060100``或更高。 （由 Serhiy Storchaka 在 "
":issue:`27867` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2096
#, fuzzy
msgid ""
":c:func:`PyOS_AfterFork` has been deprecated.  Use :c:func:"
"`PyOS_BeforeFork`, :c:func:`PyOS_AfterFork_Parent` or :c:func:"
"`PyOS_AfterFork_Child()` instead. (Contributed by Antoine Pitrou in :issue:"
"`16500`.)"
msgstr ""
":c:func:`PyOS_AfterFork` "
"已被棄用。使用:c:func:`PyOS_BeforeFork`、:c:func:`PyOS_AfterFork_Parent` "
"或:c:func:`PyOS_AfterFork_Child()` 代替。 （由 Antoine Pitrou 在 "
":issue:`16500` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2104
#, fuzzy
msgid "Platform Support Removals"
msgstr "平台支援刪除"

#: ../../whatsnew/3.7.rst:2106
#, fuzzy
msgid "FreeBSD 9 and older are no longer officially supported."
msgstr "官方不再支援 FreeBSD 9 及更早版本。"

#: ../../whatsnew/3.7.rst:2107
#, fuzzy
msgid ""
"For full Unicode support, including within extension modules, \\*nix "
"platforms are now expected to provide at least one of ``C.UTF-8`` (full "
"locale), ``C.utf8`` (full locale) or ``UTF-8`` (``LC_CTYPE``-only locale) as "
"an alternative to the legacy ``ASCII``-based ``C`` locale."
msgstr ""
"對於完整的 Unicode 支援，包括在擴充模組中，\\*nix 平台現在應該提供至少一種“C."
"UTF-8”（完整語言環境）、“C.utf8”（完整語言環境）或“ "
"`UTF-8``（``LC_CTYPE``-僅語言環境）作為遺留的基於``ASCII`` 的``C`` "
"語言環境的替代。"

#: ../../whatsnew/3.7.rst:2111
#, fuzzy
msgid ""
"OpenSSL 0.9.8 and 1.0.1 are no longer supported, which means building "
"CPython 3.7 with SSL/TLS support on older platforms still using these "
"versions requires custom build options that link to a more recent version of "
"OpenSSL."
msgstr ""
"不再支援 OpenSSL 0.9.8 和 1.0.1，"
"這意味著在仍在使用這些版本的舊平台上構建支援 SSL/TLS 的 CPython 3.7 "
"需要鏈接到更新版本的 OpenSSL 的自定義構建選項。"

#: ../../whatsnew/3.7.rst:2115
#, fuzzy
msgid ""
"Notably, this issue affects the Debian 8 (aka \"jessie\") and Ubuntu 14.04 "
"(aka \"Trusty\") LTS Linux distributions, as they still use OpenSSL 1.0.1 by "
"default."
msgstr ""
"值得注意的是，此問題會影響 Debian 8（又名 ``jessie``）和 Ubuntu 14."
"04（又名 ``Trusty``）LTS Linux 發行版，因為它們預設仍使用 OpenSSL 1.0.1。"

#: ../../whatsnew/3.7.rst:2119
#, fuzzy
msgid ""
"Debian 9 (\"stretch\") and Ubuntu 16.04 (\"xenial\"), as well as recent "
"releases of other LTS Linux releases (e.g. RHEL/CentOS 7.5, SLES 12-SP3), "
"use OpenSSL 1.0.2 or later, and remain supported in the default build "
"configuration."
msgstr ""
"Debian 9（ ``stretch`` ）和 Ubuntu 16.04（ ``xenial``），以及其他 LTS Linux "
"版本的最新版本（例如 RHEL/CentOS 7.5、SLES 12-SP3），使用 OpenSSL 1.0.2 "
"或更高版本，並保持支援在預設構建配置中。"

#: ../../whatsnew/3.7.rst:2123
#, fuzzy
msgid ""
"CPython's own `CI configuration file <https://github.com/python/cpython/blob/"
"v3.7.13/.travis.yml>`_ provides an example of using the SSL :source:"
"`compatibility testing infrastructure <Tools/ssl/multissltests.py>` in "
"CPython's test suite to build and link against OpenSSL 1.1.0 rather than an "
"outdated system provided OpenSSL."
msgstr ""
"CPython 自己的 `CI 配置文件 <https://github.com/python/cpython/blob/v3.7.13/."
"travis.yml>`_ 提供了使用 SSL 的示例 :source:`相容性測試基礎結構 <Tools/"
"ssl /multissltests.py>` 在 CPython 的測試套件中針對 OpenSSL 1.1.0 "
"構建和鏈接，而不是提供 OpenSSL 的過時系統。"

#: ../../whatsnew/3.7.rst:2132
#, fuzzy
msgid "API and Feature Removals"
msgstr "API 和功能刪除"

#: ../../whatsnew/3.7.rst:2134
#, fuzzy
msgid "The following features and APIs have been removed from Python 3.7:"
msgstr "以下功能和 API 已從 Python 3.7 中刪除："

#: ../../whatsnew/3.7.rst:2136
#, fuzzy
msgid ""
"The ``os.stat_float_times()`` function has been removed. It was introduced "
"in Python 2.3 for backward compatibility with Python 2.2, and was deprecated "
"since Python 3.1."
msgstr ""
"``os.stat_float_times()`` 函式已被刪除。它在 Python 2.3 中引入是為了與 "
"Python 2.2 向後相容，並且自 Python 3.1 起已棄用。"

#: ../../whatsnew/3.7.rst:2140
#, fuzzy
msgid ""
"Unknown escapes consisting of ``'\\'`` and an ASCII letter in replacement "
"templates for :func:`re.sub` were deprecated in Python 3.5, and will now "
"cause an error."
msgstr ""
"由 ``'\\'`` 和 :func:`re.sub` 的替換模板中的 ASCII 字母組成的未知轉義在 "
"Python 3.5 中已棄用，現在將導致錯誤。"

#: ../../whatsnew/3.7.rst:2144
#, fuzzy
msgid ""
"Removed support of the *exclude* argument in :meth:`tarfile.TarFile.add`. It "
"was deprecated in Python 2.7 and 3.2.  Use the *filter* argument instead."
msgstr ""
"在 :meth:`tarfile.TarFile.add` 中刪除了對 *exclude* 參數的支援。它在 Python "
"2.7 和 3.2 中被棄用。請改用 *filter* 參數。"

#: ../../whatsnew/3.7.rst:2147
#, fuzzy
msgid ""
"The ``splitunc()`` function in the :mod:`ntpath` module was deprecated in "
"Python 3.1, and has now been removed.  Use the :func:`~os.path.splitdrive` "
"function instead."
msgstr ""
":mod:`ntpath` 模組中的 ``splitunc()`` 函式在 Python 3.1 "
"中已棄用，現在已被刪除。請改用 :func:`~os.path.splitdrive` 函式。"

#: ../../whatsnew/3.7.rst:2151
#, fuzzy
msgid ""
":func:`collections.namedtuple` no longer supports the *verbose* parameter or "
"``_source`` attribute which showed the generated source code for the named "
"tuple class.  This was part of an optimization designed to speed-up class "
"creation.  (Contributed by Jelle Zijlstra with further improvements by INADA "
"Naoki, Serhiy Storchaka, and Raymond Hettinger in :issue:`28638`.)"
msgstr ""
":func:`collections.namedtuple` 不再支援 *verbose* 參數或 ``_source`` "
"屬性，它顯示了命名元組類的生成源程式碼。這是旨在加速類建立的最佳化的一部分。 "
"（由 Jelle Zijlstra 貢獻，INADA Naoki、Serhiy Storchaka 和 Raymond Hettinger "
"在 :issue:`28638` 中進一步改進。）"

#: ../../whatsnew/3.7.rst:2157
#, fuzzy
msgid ""
"Functions :func:`bool`, :func:`float`, :func:`list` and :func:`tuple` no "
"longer take keyword arguments.  The first argument of :func:`int` can now be "
"passed only as positional argument."
msgstr ""
"函式 :func:`bool`、:func:`float`、:func:`list` 和 :func:`tuple` "
"不再採用關鍵字參數。 :func:`int` 的第一個參數現在只能作為位置參數傳遞。"

#: ../../whatsnew/3.7.rst:2161
#, fuzzy
msgid ""
"Removed previously deprecated in Python 2.4 classes ``Plist``, ``Dict`` and "
"``_InternalDict`` in the :mod:`plistlib` module.  Dict values in the result "
"of functions :func:`~plistlib.readPlist` and :func:`~plistlib."
"readPlistFromBytes` are now normal dicts.  You no longer can use attribute "
"access to access items of these dictionaries."
msgstr ""
"刪除了以前在 Python 2.4 類中棄用的 ``Plist``、``Dict`` 和 ``_InternalDict`` "
"模組中的 :mod:`plistlib`。函式結果中的字典值 :func:`~plistlib.readPlist` 和 "
":func:`~plistlib.readPlistFromBytes` "
"現在是普通字典。您不能再使用屬性訪問來訪問這些詞典的項目。"

#: ../../whatsnew/3.7.rst:2167
#, fuzzy
msgid ""
"The ``asyncio.windows_utils.socketpair()`` function has been removed.  Use "
"the :func:`socket.socketpair` function instead, it is available on all "
"platforms since Python 3.5. ``asyncio.windows_utils.socketpair`` was just an "
"alias to ``socket.socketpair`` on Python 3.5 and newer."
msgstr ""
"``asyncio.windows_utils.socketpair()`` 函式已被刪除。請改用 :func:`socket."
"socketpair` 函式，它在 Python 3.5 之後的所有平台上都可用。 ``asyncio."
"windows_utils.socketpair`` 只是 Python 3.5 及更新版本上 ``socket.socketpair``"
" 的別名。"

#: ../../whatsnew/3.7.rst:2173
#, fuzzy
msgid ""
":mod:`asyncio` no longer exports the :mod:`selectors` and :mod:`_overlapped` "
"modules as ``asyncio.selectors`` and ``asyncio._overlapped``. Replace ``from "
"asyncio import selectors`` with ``import selectors``."
msgstr ""
":mod:`asyncio` 不再將 :mod:`selectors` 和 :mod:`_overlapped` 模組導出為 "
"``asyncio.selectors`` 和 ``asyncio._overlapped``。將 ``from asyncio import "
"selectors`` 替換為 ``import selectors``。"

#: ../../whatsnew/3.7.rst:2178
#, fuzzy
msgid ""
"Direct instantiation of :class:`ssl.SSLSocket` and :class:`ssl.SSLObject` "
"objects is now prohibited. The constructors were never documented, tested, "
"or designed as public constructors.  Users were supposed to use :func:`ssl."
"wrap_socket` or :class:`ssl.SSLContext`. (Contributed by Christian Heimes "
"in :issue:`32951`.)"
msgstr ""
"現在禁止直接實例化 :class:`ssl.SSLSocket` 和 :class:`ssl.SSLObject` "
"物件。構造函式從未被記錄、測試或設計為公開構造函式。使用者應該使用 :func:`ssl"
".wrap_socket` 或 :class:`ssl.SSLContext`。 （由 Christian Heimes 在 "
":issue:`32951` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2184
#, fuzzy
msgid ""
"The unused :mod:`distutils` ``install_misc`` command has been removed. "
"(Contributed by Eric N. Vander Weele in :issue:`29218`.)"
msgstr ""
"未使用的 :mod:`distutils` ``install_misc`` 命令已被刪除。 （由 Eric N. "
"Vander Weele 在 :issue:`29218` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2189
#, fuzzy
msgid "Module Removals"
msgstr "模組移除"

#: ../../whatsnew/3.7.rst:2191
#, fuzzy
msgid ""
"The ``fpectl`` module has been removed.  It was never enabled by default, "
"never worked correctly on x86-64, and it changed the Python ABI in ways that "
"caused unexpected breakage of C extensions. (Contributed by Nathaniel J. "
"Smith in :issue:`29137`.)"
msgstr ""
"``fpectl`` 模組已被刪除。它從未預設啟用，從未在 x86-64 上正常工作，"
"並且它以導致 C 擴充意外中斷的方式更改了 Python ABI。 （由 Nathaniel J. Smith "
"在 :issue:`29137` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2198 ../../whatsnew/3.7.rst:2474
#, fuzzy
msgid "Windows-only Changes"
msgstr "僅限 Windows 的更改"

#: ../../whatsnew/3.7.rst:2200
#, fuzzy
msgid ""
"The python launcher, (py.exe), can accept 32 & 64 bit specifiers **without** "
"having to specify a minor version as well. So ``py -3-32`` and ``py -3-64`` "
"become valid as well as ``py -3.7-32``, also the -*m*-64 and -*m.n*-64 forms "
"are now accepted to force 64 bit python even if 32 bit would have otherwise "
"been used. If the specified version is not available py.exe will error exit. "
"(Contributed by Steve Barnes in :issue:`30291`.)"
msgstr ""
"python 啟動器 (py.exe) 可以接受 32 位和 64 位說明符 **而** "
"也不必指定次要版本。所以 ``py -3-32`` 和 ``py -3-64`` 和 ``py -3.7-32`` 以及 "
"-*m*-64 和 -*m.n*-64 一樣有效現在可以接受表單來強制使用 64 位 python，"
"即使本來可以使用 32 位。如果指定的版本不可用，py.exe 將錯誤退出。 （由 Steve "
"Barnes 在 :issue:`30291` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2207
#, fuzzy
msgid ""
"The launcher can be run as ``py -0`` to produce a list of the installed "
"pythons, *with default marked with an asterisk*. Running ``py -0p`` will "
"include the paths. If py is run with a version specifier that cannot be "
"matched it will also print the *short form* list of available specifiers. "
"(Contributed by Steve Barnes in :issue:`30362`.)"
msgstr ""
"啟動器可以作為 ``py -0`` 運行以生成已安裝 python 的列表，*預設值標有星號*。"
"運行 ``py -0p`` 將包含路徑。如果 py "
"使用無法匹配的版本說明符運行，它還將印出可用說明符的*簡短格式*列表。 （由 "
"Steve Barnes 在 :issue:`30362` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2217
#, fuzzy
msgid "Porting to Python 3.7"
msgstr "移植到 Python 3.7"

#: ../../whatsnew/3.7.rst:2219
#, fuzzy
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr "本節列出了先前描述的更改和其他可能需要更改程式碼的錯誤修復。"

#: ../../whatsnew/3.7.rst:2224
#, fuzzy
msgid "Changes in Python Behavior"
msgstr "Python 行為的變化"

#: ../../whatsnew/3.7.rst:2226
#, fuzzy
msgid ""
":keyword:`async` and :keyword:`await` names are now reserved keywords. Code "
"using these names as identifiers will now raise a :exc:`SyntaxError`. "
"(Contributed by Jelle Zijlstra in :issue:`30406`.)"
msgstr ""
":keyword:`async` 和 :keyword:`await` 名稱現在是保留關鍵字。"
"使用這些名稱作為標識符的程式碼現在將引發 :exc:`SyntaxError`。 （由 Jelle "
"Zijlstra 在 :issue:`30406` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2230
#, fuzzy
msgid ""
":pep:`479` is enabled for all code in Python 3.7, meaning that :exc:"
"`StopIteration` exceptions raised directly or indirectly in coroutines and "
"generators are transformed into :exc:`RuntimeError` exceptions. (Contributed "
"by Yury Selivanov in :issue:`32670`.)"
msgstr ""
":pep:`479` 在 Python 3.7 中為所有程式碼啟用，這意味著 :exec:`StopIteration` "
"在協程和生成器中直接或間接引發的例外被轉換為 :exc:`RuntimeError` 例外。 （由 "
"Yury Selivanov 在 :issue:`32670` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2236
#, fuzzy
msgid ""
":meth:`object.__aiter__` methods can no longer be declared as asynchronous.  "
"(Contributed by Yury Selivanov in :issue:`31709`.)"
msgstr ""
":meth:`object.__aiter__` 方法不能再聲明為非同步的。 （由 Yury Selivanov 在 "
":issue:`31709` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2239
#, fuzzy
msgid ""
"Due to an oversight, earlier Python versions erroneously accepted the "
"following syntax::"
msgstr "由於疏忽，早期的 Python 版本錯誤地接受了以下語法："

#: ../../whatsnew/3.7.rst:2247
#, fuzzy
msgid ""
"Python 3.7 now correctly raises a :exc:`SyntaxError`, as a generator "
"expression always needs to be directly inside a set of parentheses and "
"cannot have a comma on either side, and the duplication of the parentheses "
"can be omitted only on calls. (Contributed by Serhiy Storchaka in :issue:"
"`32012` and :issue:`32023`.)"
msgstr ""
"Python 3.7 現在可以正確引發 :exc:`SyntaxError`，因為生成器表達式始終需要直接"
"位於一組括號內，並且兩邊不能有逗號，而且重複的括號只能在呼叫時省略。 （由 "
"Serhiy Storchaka 在 :issue:`32012` 和 :issue:`32023` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2253
#, fuzzy
msgid ""
"When using the :option:`-m` switch, the initial working directory is now "
"added to :data:`sys.path`, rather than an empty string (which dynamically "
"denoted the current working directory at the time of each import). Any "
"programs that are checking for the empty string, or otherwise relying on the "
"previous behaviour, will need to be updated accordingly (e.g. by also "
"checking for ``os.getcwd()`` or ``os.path.dirname(__main__.__file__)``, "
"depending on why the code was checking for the empty string in the first "
"place)."
msgstr ""
"使用 :option:`-m` 開關時，初始工作目錄現在新增到 :data:`sys.path`，而不是空字"
"串（在每次導入時動態表示當前工作目錄）。任何正在檢查空字串或以其他方式依賴於"
"先前行為的程式都需要相應地更新（例如，還檢查 ``os.getcwd()`` 或 ``os.path."
"dirname(__main__. __file__)``，取決於程式碼首先檢查空字串的原因）。"

#: ../../whatsnew/3.7.rst:2263
#, fuzzy
msgid "Changes in the Python API"
msgstr "Python API 的變化"

#: ../../whatsnew/3.7.rst:2265
#, fuzzy
msgid ""
":meth:`socketserver.ThreadingMixIn.server_close` now waits until all non-"
"daemon threads complete.  Set the new :attr:`socketserver.ThreadingMixIn."
"block_on_close` class attribute to ``False`` to get the pre-3.7 behaviour. "
"(Contributed by Victor Stinner in :issue:`31233` and :issue:`33540`.)"
msgstr ""
":meth:`socketserver.ThreadingMixIn.server_close` "
"現在等待所有非守護執行緒完成。將新的 :attr:`socketserver.ThreadingMixIn."
"block_on_close` 類屬性設定為 ``False`` 以獲得 3.7 之前的行為。 （由 Victor "
"Stinner 在 :issue:`31233` 和 :issue:`33540` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2271
#, fuzzy
msgid ""
":meth:`socketserver.ForkingMixIn.server_close` now waits until all child "
"processes complete. Set the new :attr:`socketserver.ForkingMixIn."
"block_on_close` class attribute to ``False`` to get the pre-3.7 behaviour. "
"(Contributed by Victor Stinner in :issue:`31151` and :issue:`33540`.)"
msgstr ""
":meth:`socketserver.ForkingMixIn.server_close` 現在等待所有子行程完成。"
"將新的 :attr:`socketserver.ForkingMixIn.block_on_close` 類屬性設定為 "
"``False`` 以獲得 3.7 之前的行為。 （由 Victor Stinner 在 :issue:`31151` 和 "
":issue:`33540` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2277
#, fuzzy
msgid ""
"The :func:`locale.localeconv` function now temporarily sets the ``LC_CTYPE`` "
"locale to the value of ``LC_NUMERIC`` in some cases. (Contributed by Victor "
"Stinner in :issue:`31900`.)"
msgstr ""
":func:`locale.localeconv` 函式現在在某些情況下臨時將 ``LC_CTYPE`` "
"語言環境設定為 ``LC_NUMERIC`` 的值。 （由 Victor Stinner 在 :issue:`31900` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:2281
#, fuzzy
msgid ""
":meth:`pkgutil.walk_packages` now raises a :exc:`ValueError` if *path* is a "
"string.  Previously an empty list was returned. (Contributed by Sanyam "
"Khurana in :issue:`24744`.)"
msgstr ""
":meth:`pkgutil.walk_packages` 現在會在 *path* 是字串時引發 "
":exc:`ValueError`。以前回傳一個空列表。 （由 Sanyam Khurana 在 :issue:`24744`"
" 中貢獻。）"

#: ../../whatsnew/3.7.rst:2285
#, fuzzy
msgid ""
"A format string argument for :meth:`string.Formatter.format` is now :ref:"
"`positional-only <positional-only_parameter>`. Passing it as a keyword "
"argument was deprecated in Python 3.5. (Contributed by Serhiy Storchaka in :"
"issue:`29193`.)"
msgstr ""
":meth:`string.Formatter.format` 的格式字串參數現在是 :ref:`positional-only "
"<positional-only_parameter>`。將其作為關鍵字參數傳遞在 Python 3.5 "
"中已被棄用。 （由 Serhiy Storchaka 在 :issue:`29193` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2290
#, fuzzy
msgid ""
"Attributes :attr:`~http.cookies.Morsel.key`, :attr:`~http.cookies.Morsel."
"value` and :attr:`~http.cookies.Morsel.coded_value` of class :class:`http."
"cookies.Morsel` are now read-only. Assigning to them was deprecated in "
"Python 3.5. Use the :meth:`~http.cookies.Morsel.set` method for setting "
"them. (Contributed by Serhiy Storchaka in :issue:`29192`.)"
msgstr ""
"屬性 :attr:`~http.cookies.Morsel.key`, :attr:`~http.cookies.Morsel.value` 和 "
":attr:`~http.cookies.Morsel.coded_value` of class :class:`http. cookies."
"Morsel` 現在是只讀的。分配給它們在 Python 3.5 中已棄用。使用 :meth:`~http."
"cookies.Morsel.set` 方法來設定它們。 （由 Serhiy Storchaka 在 :issue:`29192` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:2298
#, fuzzy
msgid ""
"The *mode* argument of :func:`os.makedirs` no longer affects the file "
"permission bits of newly created intermediate-level directories. To set "
"their file permission bits you can set the umask before invoking "
"``makedirs()``. (Contributed by Serhiy Storchaka in :issue:`19930`.)"
msgstr ""
":func:`os.makedirs` 的 *mode* "
"參數不再影響新建立的中間級目錄的文件權限位。要設定它們的文件權限位，"
"您可以在呼叫 ``makedirs()`` 之前設定 umask。 （由 Serhiy Storchaka 在 "
":issue:`19930` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2304
#, fuzzy
msgid ""
"The :attr:`struct.Struct.format` type is now :class:`str` instead of :class:"
"`bytes`. (Contributed by Victor Stinner in :issue:`21071`.)"
msgstr ""
":attr:`struct.Struct.format` 型別現在是 :class:`str` 而不是 :class:`bytes`。 "
"（由 Victor Stinner 在 :issue:`21071` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2307
#, fuzzy
msgid ""
":func:`~cgi.parse_multipart` now accepts the *encoding* and *errors* "
"arguments and returns the same results as :class:`~FieldStorage`: for non-"
"file fields, the value associated to a key is a list of strings, not bytes. "
"(Contributed by Pierre Quentel in :issue:`29979`.)"
msgstr ""
":func:`~cgi.parse_multipart` 現在接受 *encoding* 和 *errors* 參數並回傳與 "
":class:`~FieldStorage` "
"相同的結果：對於非文件欄位，與鍵關聯的值是一個列表字串，而不是位元組。 （由 "
"Pierre Quentel 在 :issue:`29979` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2313
#, fuzzy
msgid ""
"Due to internal changes in :mod:`socket`, calling :func:`socket.fromshare` "
"on a socket created by :func:`socket.share <socket.socket.share>` in older "
"Python versions is not supported."
msgstr ""
"由於 :mod:`socket` 的內部變化，不支援在舊 Python 版本中通過 :func:`"
"socket.share <socket.socket.share>` 建立的 socket 上呼叫 :func:`socket."
"fromshare`。"

#: ../../whatsnew/3.7.rst:2317
#, fuzzy
msgid ""
"``repr`` for :exc:`BaseException` has changed to not include the trailing "
"comma.  Most exceptions are affected by this change. (Contributed by Serhiy "
"Storchaka in :issue:`30399`.)"
msgstr ""
"``repr`` for :exc:`BaseException` "
"已更改為不包括尾隨逗號。大多數例外都受此更改的影響。 （由 Serhiy Storchaka "
"在 :issue:`30399` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2321
#, fuzzy
msgid ""
"``repr`` for :class:`datetime.timedelta` has changed to include the keyword "
"arguments in the output. (Contributed by Utkarsh Upadhyay in :issue:`30302`.)"
msgstr ""
"``repr`` for :class:`datetime.timedelta` 已更改為在輸出中包含關鍵字參數。 （"
"由 Utkarsh Upadhyay 在 :issue:`30302` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2324
#, fuzzy
msgid ""
"Because :func:`shutil.rmtree` is now implemented using the :func:`os."
"scandir` function, the user specified handler *onerror* is now called with "
"the first argument ``os.scandir`` instead of ``os.listdir`` when listing the "
"directory is failed."
msgstr ""
"因為 :func:`shutil.rmtree` 現在是使用 :func:`os.scandir` 函式實作的，"
"使用者指定的處理程式 *onerror* 現在使用第一個參數 ``os.scandir`` 而不是 ``os "
"來呼叫.listdir`` 列出目錄失敗時。"

#: ../../whatsnew/3.7.rst:2329
#, fuzzy
msgid ""
"Support for nested sets and set operations in regular expressions as in "
"`Unicode Technical Standard #18`_ might be added in the future.  This would "
"change the syntax.  To facilitate this future change a :exc:`FutureWarning` "
"will be raised in ambiguous cases for the time being. That include sets "
"starting with a literal ``'['`` or containing literal character sequences "
"``'--'``, ``'&&'``, ``'~~'``, and ``'||'``.  To avoid a warning, escape them "
"with a backslash. (Contributed by Serhiy Storchaka in :issue:`30349`.)"
msgstr ""
"將來可能會新增對正則表達式中的嵌套集和集操作的支援，如“Unicode 技術標準 "
"#18”中所述。這會改變語法。為了促進這種未來的變化，"
"暫時將在模棱兩可的情況下引發 :exc:`FutureWarning`。這包括以文字 ``'['`` 開頭或包含"
"文字字元序列 ``'--'``、``'&&'``、``'~~'`` 和 ``'||'`` 的集合。 "
"為避免警告，請使用反斜杠轉義它們。 （由 Serhiy Storchaka 在 "
":issue:`30349` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2340
#, fuzzy
msgid ""
"The result of splitting a string on a :mod:`regular expression <re>` that "
"could match an empty string has been changed.  For example splitting on "
"``r'\\s*'`` will now split not only on whitespaces as it did previously, but "
"also on empty strings before all non-whitespace characters and just before "
"the end of the string. The previous behavior can be restored by changing the "
"pattern to ``r'\\s+'``.  A :exc:`FutureWarning` was emitted for such "
"patterns since Python 3.5."
msgstr ""
"在可以匹配空字串的 :mod:`正則表達式 <re>` 上拆分字串的結果已更改。例如，在 "
"``r'\\s*'`` 上拆分現在不僅會像以前那樣拆分空格，還會拆分所有非空白字元之前和"
"字串末尾之前的空字串。可以通過將模式更改為 ``r'\\s+'`` 來恢復之前的行為。自 "
"Python 3.5 以來，針對此類模式發出了 :exc:`FutureWarning`。"

#: ../../whatsnew/3.7.rst:2349
#, fuzzy
msgid ""
"For patterns that match both empty and non-empty strings, the result of "
"searching for all matches may also be changed in other cases.  For example "
"in the string ``'a\\n\\n'``, the pattern ``r'(?m)^\\s*?$'`` will not only "
"match empty strings at positions 2 and 3, but also the string ``'\\n'`` at "
"positions 2--3.  To match only blank lines, the pattern should be rewritten "
"as ``r'(?m)^[^\\S\\n]*$'``."
msgstr ""
"對於同時匹配空字串和非空字串的模式，在其他情況下搜索所有匹配的結果也可能會發"
"生變化。例如在字串 ``'a\\n\\n'`` 中，模式 ``r'(?m)^\\s*?$'`` 不僅匹配位"
"置 2 和位置 3 的空字串，而且位置 2"
"--3 處的字串 ``'\\n'``。要僅匹配空行，模式應重寫為 ``r'(?m)^[^\\S\\n]*$'``。"

#: ../../whatsnew/3.7.rst:2356
#, fuzzy
msgid ""
":func:`re.sub()` now replaces empty matches adjacent to a previous non-empty "
"match.  For example ``re.sub('x*', '-', 'abxd')`` returns now ``'-a-b--d-'`` "
"instead of ``'-a-b-d-'`` (the first minus between 'b' and 'd' replaces 'x', "
"and the second minus replaces an empty string between 'x' and 'd')."
msgstr ""
":func:`re.sub()` 現在替換與先前非空匹配項相鄰的空匹配項。例如``re.sub('x*', "
"'-', 'abxd')`` 現在回傳``'-a-b--d-'`` 而不是``'-a-b-d-'``（ 'b' 和 'd' "
"之間的第一個減號替換 'x'，第二個減號替換 'x' 和 'd' 之間的空字串）。"

#: ../../whatsnew/3.7.rst:2362
#, fuzzy
msgid "(Contributed by Serhiy Storchaka in :issue:`25054` and :issue:`32308`.)"
msgstr "（由 Serhiy Storchaka 在 :issue:`25054` 和 :issue:`32308` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2364
#, fuzzy
msgid ""
"Change :func:`re.escape` to only escape regex special characters instead of "
"escaping all characters other than ASCII letters, numbers, and ``'_'``. "
"(Contributed by Serhiy Storchaka in :issue:`29995`.)"
msgstr ""
"將 :func:`re.escape` 更改為僅轉義正則表達式特殊字元，而不是轉義除 ASCII "
"字母、數字和 ``'_'`` 以外的所有字元。 （由 Serhiy Storchaka 在 :issue:`29995`"
" 中貢獻。）"

#: ../../whatsnew/3.7.rst:2368
#, fuzzy
msgid ""
":class:`tracemalloc.Traceback` frames are now sorted from oldest to most "
"recent to be more consistent with :mod:`traceback`. (Contributed by Jesse "
"Bakker in :issue:`32121`.)"
msgstr ""
":class:`tracemalloc.Traceback` 幀現在從最舊到最近排序，以便與 "
":mod:`traceback` 更加一致。 （由 Jesse Bakker 在 :issue:`32121` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2372
#, fuzzy
msgid ""
"On OSes that support :const:`socket.SOCK_NONBLOCK` or :const:`socket."
"SOCK_CLOEXEC` bit flags, the :attr:`socket.type <socket.socket.type>` no "
"longer has them applied. Therefore, checks like ``if sock.type == socket."
"SOCK_STREAM`` work as expected on all platforms. (Contributed by Yury "
"Selivanov in :issue:`32331`.)"
msgstr ""
"在支援 :const:`socket.SOCK_NONBLOCK` 或 :const:`socket.SOCK_CLOEXEC` "
"位旗標的操作系統上，:attr:`socket.type <socket.socket.type>` "
"不再應用它們。因此，像 if sock.type == socket.SOCK_STREAM "
"這樣的檢查在所有平台上都按預期工作。 （由 Yury Selivanov 在 :issue:`32331` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:2379
#, fuzzy
msgid ""
"On Windows the default for the *close_fds* argument of :class:`subprocess."
"Popen` was changed from :const:`False` to :const:`True` when redirecting the "
"standard handles. If you previously depended on handles being inherited when "
"using :class:`subprocess.Popen` with standard io redirection, you will have "
"to pass ``close_fds=False`` to preserve the previous behaviour, or use :attr:"
"`STARTUPINFO.lpAttributeList <subprocess.STARTUPINFO.lpAttributeList>`."
msgstr ""
"在 Windows 上，當重定向標準句柄時，subprocess.Popen 的 *close_fds* "
"參數的預設值從 :const:`False` 更改為 :const:`True`。如果您之前在使用 "
":class:`subprocess.Popen` 和標準 io 重定向時依賴於繼承的句柄，則必須傳遞 "
"``close_fds=False`` 以保留以前的行為，或使用 :attr:`"
"STARTUPINFO.lpAttributeList <subprocess.STARTUPINFO.lpAttributeList>`。"

#: ../../whatsnew/3.7.rst:2387
#, fuzzy
msgid ""
":meth:`importlib.machinery.PathFinder.invalidate_caches` -- which implicitly "
"affects :func:`importlib.invalidate_caches` -- now deletes entries in :data:"
"`sys.path_importer_cache` which are set to ``None``. (Contributed by Brett "
"Cannon in :issue:`33169`.)"
msgstr ""
":meth:`importlib.machinery.PathFinder.invalidate_caches` —— 這隱含地影響了 "
":func:`importlib.invalidate_caches` —— 現在刪除了 :data:`sys."
"path_importer_cache` 中設定為 ``None`` 的條目。 （由 Brett Cannon 在 "
":issue:`33169` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2392
#, fuzzy
msgid ""
"In :mod:`asyncio`, :meth:`loop.sock_recv() <asyncio.loop.sock_recv>`, :meth:"
"`loop.sock_sendall() <asyncio.loop.sock_sendall>`, :meth:`loop.sock_accept() "
"<asyncio.loop.sock_accept>`, :meth:`loop.getaddrinfo() <asyncio.loop."
"getaddrinfo>`, :meth:`loop.getnameinfo() <asyncio.loop.getnameinfo>` have "
"been changed to be proper coroutine methods to match their documentation.  "
"Previously, these methods returned :class:`asyncio.Future` instances. "
"(Contributed by Yury Selivanov in :issue:`32327`.)"
msgstr ""
"在 :mod:`asyncio`， :meth:`loop.sock_recv（）<asyncio.loop."
"sock_recv>`， :meth:`loop.sock_sendall（）<asyncio.loop."
"sock_sendall>`， :meth:`循環。 sock_accept() <asyncio.loop."
"sock_accept>`、:meth:`loop.getaddrinfo() <asyncio.loop."
"getaddrinfo>`、:meth:`loop.getnameinfo() <asyncio.loop.getnameinfo>` "
"已更改是匹配其文檔的正確協程方法。以前，這些方法回傳 :class:`asyncio.Future` "
"實例。 （由 Yury Selivanov 在 :issue:`32327` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2403
#, fuzzy
msgid ""
":attr:`asyncio.Server.sockets` now returns a copy of the internal list of "
"server sockets, instead of returning it directly. (Contributed by Yury "
"Selivanov in :issue:`32662`.)"
msgstr ""
":attr:`asyncio.Server.sockets` "
"現在回傳伺服器 socket 內部列表的副本，而不是直接回傳它。 （由 Yury Selivanov "
"在 :issue:`32662` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2407
#, fuzzy
msgid ""
":attr:`Struct.format <struct.Struct.format>` is now a :class:`str` instance "
"instead of a :class:`bytes` instance. (Contributed by Victor Stinner in :"
"issue:`21071`.)"
msgstr ""
":attr:`Struct.format <struct.Struct.format>` 現在是一個 :class:`str` "
"實例而不是一個 :class:`bytes` 實例。 （由 Victor Stinner 在 :issue:`21071` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:2411
#, fuzzy
msgid ""
":mod:`argparse` subparsers can now be made mandatory by passing "
"``required=True`` to :meth:`ArgumentParser.add_subparsers() <argparse."
"ArgumentParser.add_subparsers>`. (Contributed by Anthony Sottile in :issue:"
"`26510`.)"
msgstr ""
":mod:`argparse` 子解析器現在可以通過將 ``required=True`` 傳遞給 "
"ArgumentParser.add_subparsers() <argparse.ArgumentParser.add_subparsers>` "
"來強制執行。 （由 Anthony Sottile 在 :issue:`26510` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2415
#, fuzzy
msgid ""
":meth:`ast.literal_eval()` is now stricter.  Addition and subtraction of "
"arbitrary numbers are no longer allowed. (Contributed by Serhiy Storchaka "
"in :issue:`31778`.)"
msgstr ""
":meth:`ast.literal_eval()` 現在更嚴格了。不再允許任意數字的加減。 （由 "
"Serhiy Storchaka 在 :issue:`31778` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2419
#, fuzzy
msgid ""
":meth:`Calendar.itermonthdates <calendar.Calendar.itermonthdates>` will now "
"consistently raise an exception when a date falls outside of the "
"``0001-01-01`` through ``9999-12-31`` range.  To support applications that "
"cannot tolerate such exceptions, the new :meth:`Calendar.itermonthdays3 "
"<calendar.Calendar.itermonthdays3>` and :meth:`Calendar.itermonthdays4 "
"<calendar.Calendar.itermonthdays4>` can be used. The new methods return "
"tuples and are not restricted by the range supported by :class:`datetime."
"date`. (Contributed by Alexander Belopolsky in :issue:`28292`.)"
msgstr ""
":meth:`Calendar.itermonthdates <calendar.Calendar.itermonthdates>` "
"現在會在日期超出 ``0001-01-01`` 到 ``9999-12-31`` "
"範圍時持續引發例外。為了支援不能容忍此類例外的應用程式，可以使用新的 :meth:`"
"Calendar.itermonthdays3 <calendar.Calendar.itermonthdays3>` 和 :meth:`"
"Calendar.itermonthdays4 <calendar.Calendar.itermonthdays4>`。"
"新方法回傳元組並且不受 :class:`datetime.date` 支援的範圍的限制。 （由 "
"Alexander Belopolsky 在 :issue:`28292` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2429
#, fuzzy
msgid ""
":class:`collections.ChainMap` now preserves the order of the underlying "
"mappings.  (Contributed by Raymond Hettinger in :issue:`32792`.)"
msgstr ""
":class:`collections.ChainMap` 現在保留底層映射的順序。 （由 Raymond "
"Hettinger 在 :issue:`32792` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2432
#, fuzzy
msgid ""
"The ``submit()`` method of :class:`concurrent.futures.ThreadPoolExecutor` "
"and :class:`concurrent.futures.ProcessPoolExecutor` now raises a :exc:"
"`RuntimeError` if called during interpreter shutdown. (Contributed by Mark "
"Nemec in :issue:`33097`.)"
msgstr ""
"如果在直譯器關閉期間呼叫，concurrent.futures.ThreadPoolExecutor 和 "
"concurrent.futures.ProcessPoolExecutor 的 `submit()` 方法現在會引發 "
"RuntimeError。 （由 Mark Nemec 在 :issue:`33097` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2437
#, fuzzy
msgid ""
"The :class:`configparser.ConfigParser` constructor now uses ``read_dict()`` "
"to process the default values, making its behavior consistent with the rest "
"of the parser.  Non-string keys and values in the defaults dictionary are "
"now being implicitly converted to strings. (Contributed by James Tocknell "
"in :issue:`23835`.)"
msgstr ""
":class:`configparser.ConfigParser` 構造函式現在使用 ``read_dict()`` 來處理預"
"設值，使其行為與解析器的其餘部分一致。預設字典中的非字串鍵和值現在被隱式轉換"
"為字串。 （由 James Tocknell 在 :issue:`23835` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2443
#, fuzzy
msgid ""
"Several undocumented internal imports were removed. One example is that ``os."
"errno`` is no longer available; use ``import errno`` directly instead. Note "
"that such undocumented internal imports may be removed any time without "
"notice, even in micro version releases."
msgstr ""
"刪除了幾個未記錄的內部導入。一個例子是 ``os.errno`` 不再可用；直接使用 ``"
"import errno`` 代替。請注意，此類未記錄的內部導入可能會隨時刪除，恕不另行通知"
"，即使在微版本發布中也是如此。"

#: ../../whatsnew/3.7.rst:2451
msgid "Changes in the C API"
msgstr "C API 中的改動"

#: ../../whatsnew/3.7.rst:2453
#, fuzzy
msgid ""
"The function :c:func:`PySlice_GetIndicesEx` is considered unsafe for "
"resizable sequences.  If the slice indices are not instances of :class:"
"`int`, but objects that implement the :meth:`!__index__` method, the "
"sequence can be resized after passing its length to :c:func:`!"
"PySlice_GetIndicesEx`.  This can lead to returning indices out of the length "
"of the sequence.  For avoiding possible problems use new functions :c:func:"
"`PySlice_Unpack` and :c:func:`PySlice_AdjustIndices`. (Contributed by Serhiy "
"Storchaka in :issue:`27867`.)"
msgstr ""
":c:func:`PySlice_GetIndicesEx` 函式被認為對於可調整大小的序列是不安全的。"
"如果切片索引不是 :class:`int` 的實例，而是實作 :meth:`!__index__` "
"方法的物件，則可以在將其長度傳遞給 :c:func:`!PySlice_GetIndicesEx` "
"後調整序列的大小。這可能導致回傳超出序列長度的索引。為了避免可能出現的問題，"
"請使用新函式 :c:func:`PySlice_Unpack` 和 :c:func:`PySlice_AdjustIndices`。 （"
"由 Serhiy Storchaka 在 :issue:`27867` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2464
#, fuzzy
msgid "CPython bytecode changes"
msgstr "CPython 位元組碼更改"

#: ../../whatsnew/3.7.rst:2466
#, fuzzy
msgid ""
"There are two new opcodes: :opcode:`LOAD_METHOD` and :opcode:`CALL_METHOD`. "
"(Contributed by Yury Selivanov and INADA Naoki in :issue:`26110`.)"
msgstr ""
"有兩個新的操作碼：:opcode:`LOAD_METHOD` 和 :opcode:`CALL_METHOD`。 （由 Yury "
"Selivanov 和 INADA Naoki 在 :issue:`26110` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2469
#, fuzzy
msgid ""
"The :opcode:`STORE_ANNOTATION` opcode has been removed. (Contributed by Mark "
"Shannon in :issue:`32550`.)"
msgstr ""
":opcode:`STORE_ANNOTATION` 操作碼已被刪除。 （由 Mark Shannon 在 "
":issue:`32550` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2476
#, fuzzy
msgid ""
"The file used to override :data:`sys.path` is now called ``<python-"
"executable>._pth`` instead of ``'sys.path'``. See :ref:"
"`windows_finding_modules` for more information. (Contributed by Steve Dower "
"in :issue:`28137`.)"
msgstr ""
"用於覆蓋 :data:`sys.path` 的文件現在稱為 ``<python-executable>._pth`` 而不是 "
"``'sys.path'``。有關詳細資訊，請參閱 :ref:`windows_finding_modules`。 （由 "
"Steve Dower 在 :issue:`28137` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2483
#, fuzzy
msgid "Other CPython implementation changes"
msgstr "其他 CPython 實作更改"

#: ../../whatsnew/3.7.rst:2485
#, fuzzy
msgid ""
"In preparation for potential future changes to the public CPython runtime "
"initialization API (see :pep:`432` for an initial, but somewhat outdated, "
"draft), CPython's internal startup and configuration management logic has "
"been significantly refactored. While these updates are intended to be "
"entirely transparent to both embedding applications and users of the regular "
"CPython CLI, they're being mentioned here as the refactoring changes the "
"internal order of various operations during interpreter startup, and hence "
"may uncover previously latent defects, either in embedding applications, or "
"in CPython itself. (Initially contributed by Nick Coghlan and Eric Snow as "
"part of :issue:`22257`, and further updated by Nick, Eric, and Victor "
"Stinner in a number of other issues). Some known details affected:"
msgstr ""
"為了準備對公開 CPython 運行時初始化 API 進行潛在的未來更改（請參閱 :pep:`432`"
" 了解初始但有些過時的草稿），CPython 的內部啟動和配置管理邏輯已被顯著重構。"
"雖然這些更新旨在對嵌入式應用程式和常規 CPython CLI 的使用者完全透明，但在這裡"
"提到它們是因為重構改變了直譯器啟動期間各種操作的內部順序，因此可能會發現以前"
"的潛在缺陷，或者在嵌入應用程式中，或在 CPython 本身中。 （最初由 Nick "
"Coghlan 和 Eric Snow 作為 :issue:`22257` 的一部分貢獻，並由 Nick、Eric 和 "
"Victor Stinner 在許多其他問題中進一步更新）。一些已知的細節受影響："

#: ../../whatsnew/3.7.rst:2498
#, fuzzy
msgid ""
":c:func:`PySys_AddWarnOptionUnicode` is not currently usable by embedding "
"applications due to the requirement to create a Unicode object prior to "
"calling ``Py_Initialize``. Use :c:func:`PySys_AddWarnOption` instead."
msgstr ""
":c:func:`PySys_AddWarnOptionUnicode` 目前不能被嵌入應用程式使用，因為在呼叫 "
"``Py_Initialize`` 之前需要建立一個 Unicode 物件。請改用 "
":c:func:`PySys_AddWarnOption`。"

#: ../../whatsnew/3.7.rst:2502
#, fuzzy
msgid ""
"warnings filters added by an embedding application with :c:func:"
"`PySys_AddWarnOption` should now more consistently take precedence over the "
"default filters set by the interpreter"
msgstr "嵌入應用程式使用 PySys_AddWarnOption "
"新增的警告過濾器現在應該更一致地優先於直譯器設定的預設過濾器"

#: ../../whatsnew/3.7.rst:2506
#, fuzzy
msgid ""
"Due to changes in the way the default warnings filters are configured, "
"setting :c:data:`Py_BytesWarningFlag` to a value greater than one is no "
"longer sufficient to both emit :exc:`BytesWarning` messages and have them "
"converted to exceptions.  Instead, the flag must be set (to cause the "
"warnings to be emitted in the first place), and an explicit ``error::"
"BytesWarning`` warnings filter added to convert them to exceptions."
msgstr ""
"由於預設警告過濾器的配置方式發生了變化，將 Py_BytesWarningFlag 設定為大於 1 "
"的值不再足以發出 BytesWarning "
"消息並將它們轉換為例外。相反，必須設定旗標（首先發出警告），並新增一個明確的 "
"``error::BytesWarning`` 警告過濾器以將它們轉換為例外。"

#: ../../whatsnew/3.7.rst:2513
#, fuzzy
msgid ""
"Due to a change in the way docstrings are handled by the compiler, the "
"implicit ``return None`` in a function body consisting solely of a docstring "
"is now marked as occurring on the same line as the docstring, not on the "
"function's header line."
msgstr ""
"由於編譯器處理文檔字串的方式發生了變化，僅由文檔字串組成的函式體中的隱式“"
"return None”現在被標記為出現在與文檔字串相同的行，而不是函式的標題行."

#: ../../whatsnew/3.7.rst:2518
#, fuzzy
msgid ""
"The current exception state has been moved from the frame object to the co-"
"routine. This simplified the interpreter and fixed a couple of obscure bugs "
"caused by having swap exception state when entering or exiting a generator. "
"(Contributed by Mark Shannon in :issue:`25612`.)"
msgstr ""
"當前的例外狀態已經從框架物件轉移到協程中。這簡化了直譯器並修復了一些由於在進"
"入或退出生成器時交換例外狀態而導致的模糊錯誤。 （由 Mark Shannon 在 "
":issue:`25612` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2524
#, fuzzy
msgid "Notable changes in Python 3.7.1"
msgstr "Python 3.7.1 中的顯著變化"

#: ../../whatsnew/3.7.rst:2526
#, fuzzy
msgid ""
"Starting in 3.7.1, :c:func:`Py_Initialize` now consistently reads and "
"respects all of the same environment settings as :c:func:`Py_Main` (in "
"earlier Python versions, it respected an ill-defined subset of those "
"environment variables, while in Python 3.7.0 it didn't read any of them due "
"to :issue:`34247`). If this behavior is unwanted, set :c:data:"
"`Py_IgnoreEnvironmentFlag` to 1 before calling :c:func:`Py_Initialize`."
msgstr ""
"從 3.7.1 開始，:c:func:`Py_Initialize` 現在始終如一地讀取並遵循與 "
":c:func:`Py_Main` 相同的所有環境設定（在早期的 Python "
"版本中，它遵循這些環境的定義不明確的子集變數，而在 Python 3.7.0 中，由於 "
":issue:`34247` 而沒有讀取它們中的任何一個)。如果不需要此行為，請在呼叫 "
"Py_Initialize 之前將 Py_IgnoreEnvironmentFlag 設定為 1。"

#: ../../whatsnew/3.7.rst:2533
#, fuzzy
msgid ""
"In 3.7.1 the C API for Context Variables :ref:`was updated "
"<contextvarsobjects_pointertype_change>` to use :c:type:`PyObject` "
"pointers.  See also :issue:`34762`."
msgstr ""
"在 3.7.1 中，用於上下文變數的 C API :ref:`已更新 "
"<contextvarsobjects_pointertype_change>` 以使用 :c:type:`PyObject` "
"指標。另見 :issue:`34762`。"

#: ../../whatsnew/3.7.rst:2537
#, fuzzy
msgid ""
"In 3.7.1 the :mod:`tokenize` module now implicitly emits a ``NEWLINE`` token "
"when provided with input that does not have a trailing new line.  This "
"behavior now matches what the C tokenizer does internally. (Contributed by "
"Ammar Askar in :issue:`33899`.)"
msgstr ""
"在 3.7.1 中，:mod:`tokenize` "
"模組現在在提供沒有尾隨換行符的輸入時隱式發出一個 ``NEWLINE`` 標記。"
"此行為現在與 C 分詞器在內部執行的操作相匹配。 （由 Ammar Askar 在 "
":issue:`33899` 中貢獻。）"

#: ../../whatsnew/3.7.rst:2543
#, fuzzy
msgid "Notable changes in Python 3.7.2"
msgstr "Python 3.7.2 中的顯著變化"

#: ../../whatsnew/3.7.rst:2545
#, fuzzy
msgid ""
"In 3.7.2, :mod:`venv` on Windows no longer copies the original binaries, but "
"creates redirector scripts named ``python.exe`` and ``pythonw.exe`` instead. "
"This resolves a long standing issue where all virtual environments would "
"have to be upgraded or recreated with each Python update. However, note that "
"this release will still require recreation of virtual environments in order "
"to get the new scripts."
msgstr ""
"在 3.7.2 中，Windows 上的 :mod:`venv` 不再复制原始二進位文件，而是建立名為 "
"``python.exe`` 和 ``pythonw.exe`` "
"的重定向器腳本。這解決了一個長期存在的問題，即每次 Python 更新都必須升級或重"
"新建立所有虛擬環境。但是，請注意，此版本仍需要重新建立虛擬環境才能獲取新腳本"
"。"

#: ../../whatsnew/3.7.rst:2553
#, fuzzy
msgid "Notable changes in Python 3.7.6"
msgstr "Python 3.7.6 中的顯著變化"

#: ../../whatsnew/3.7.rst:2555
#, fuzzy
msgid ""
"Due to significant security concerns, the *reuse_address* parameter of :meth:"
"`asyncio.loop.create_datagram_endpoint` is no longer supported. This is "
"because of the behavior of the socket option ``SO_REUSEADDR`` in UDP. For "
"more details, see the documentation for ``loop.create_datagram_endpoint()``. "
"(Contributed by Kyle Stanley, Antoine Pitrou, and Yury Selivanov in :issue:"
"`37228`.)"
msgstr ""
"由於重大安全問題，不再支援 asyncio.loop.create_datagram_endpoint 的 "
"*reuse_address* 參數。這是因為 UDP 中 socket 選項 ``SO_REUSEADDR`` "
"的行為。有關詳細資訊，請參閱 ``loop.create_datagram_endpoint()`` 的文檔。 （"
"由 Kyle Stanley、Antoine Pitrou 和 Yury Selivanov 在 :issue:`37228` "
"中貢獻。）"

#: ../../whatsnew/3.7.rst:2563
#, fuzzy
msgid "Notable changes in Python 3.7.10"
msgstr "Python 3.7.10 中的顯著變化"

#: ../../whatsnew/3.7.rst:2565
#, fuzzy
msgid ""
"Earlier Python versions allowed using both ``;`` and ``&`` as query "
"parameter separators in :func:`urllib.parse.parse_qs` and :func:`urllib."
"parse.parse_qsl`.  Due to security concerns, and to conform with newer W3C "
"recommendations, this has been changed to allow only a single separator key, "
"with ``&`` as the default.  This change also affects :func:`cgi.parse` and :"
"func:`cgi.parse_multipart` as they use the affected functions internally. "
"For more details, please see their respective documentation. (Contributed by "
"Adam Goldschmidt, Senthil Kumaran and Ken Jin in :issue:`42967`.)"
msgstr ""
"早期的 Python 版本允許在 :func:`urllib.parse.parse_qs` 和 :func:`urllib.parse"
".parse_qsl` 中同時使用 ``;`` 和 ``&`` 作為查詢參數分隔符。出於安全考慮，"
"並為了符合更新的 W3C 建議，這已更改為僅允許單個分隔鍵，預設為 ``&``。"
"此更改還會影響 :func:`cgi.parse` 和 :func:`cgi.parse_multipart`，因為它們在內"
"部使用受影響的函式。有關詳細資訊，請參閱各自的文檔。 （由 Adam Goldschmidt、"
"Senthil Kumaran 和 Ken Jin 在 :issue:`42967` 中貢獻。）"
