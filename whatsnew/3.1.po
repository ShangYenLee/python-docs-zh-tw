# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-09-26 00:21+0000\n"
"PO-Revision-Date: 2018-05-23 16:20+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.1.rst:3
msgid "What's New In Python 3.1"
msgstr "Python 3.1 有什麼新功能"

#: ../../whatsnew/3.1.rst:0
msgid "Author"
msgstr "作者"

#: ../../whatsnew/3.1.rst:5
msgid "Raymond Hettinger"
msgstr "Raymond Hettinger"

#: ../../whatsnew/3.1.rst:49
msgid ""
"This article explains the new features in Python 3.1, compared to 3.0. "
"Python 3.1 was released on June 27, 2009."
msgstr ""

#: ../../whatsnew/3.1.rst:54
#, fuzzy
msgid "PEP 372: Ordered Dictionaries"
msgstr "PEP 372：有序字典"

#: ../../whatsnew/3.1.rst:56
#, fuzzy
msgid ""
"Regular Python dictionaries iterate over key/value pairs in arbitrary order. "
"Over the years, a number of authors have written alternative implementations "
"that remember the order that the keys were originally inserted.  Based on "
"the experiences from those implementations, a new :class:`collections."
"OrderedDict` class has been introduced."
msgstr ""
"常規 Python 字典以任意順序疊代鍵/值對。多年來，許多作者編寫了替代實作來記住密"
"鑰最初插入的順序。基於這些實作的經驗，引入了一個新的 :class:`collections."
"OrderedDict` 類。"

#: ../../whatsnew/3.1.rst:62
#, fuzzy
msgid ""
"The OrderedDict API is substantially the same as regular dictionaries but "
"will iterate over keys and values in a guaranteed order depending on when a "
"key was first inserted.  If a new entry overwrites an existing entry, the "
"original insertion position is left unchanged.  Deleting an entry and "
"reinserting it will move it to the end."
msgstr ""
"OrderedDict API 與常規字典基本相同，但會根據首次插入鍵的時間以保證順序疊代鍵"
"和值。如果新條目覆蓋現有條目，則原始插入位置保持不變。刪除條目並重新插入會將"
"其移動到末尾。"

#: ../../whatsnew/3.1.rst:68
#, fuzzy
msgid ""
"The standard library now supports use of ordered dictionaries in several "
"modules.  The :mod:`configparser` module uses them by default.  This lets "
"configuration files be read, modified, and then written back in their "
"original order.  The *_asdict()* method for :func:`collections.namedtuple` "
"now returns an ordered dictionary with the values appearing in the same "
"order as the underlying tuple indices.  The :mod:`json` module is being "
"built-out with an *object_pairs_hook* to allow OrderedDicts to be built by "
"the decoder. Support was also added for third-party tools like `PyYAML "
"<https://pyyaml.org/>`_."
msgstr ""
"標準庫現在支援在多個模組中使用有序字典。 :mod:`configparser` "
"模組預設使用它們。這允許配置文件被讀取、修改，然後以其原始順序寫回。 "
":func:`collections.namedtuple` 的 *_asdict()* "
"方法現在回傳一個有序字典，其中值的出現順序與底層元組索引相同。 :mod:`json` "
"模組正在使用 *object_pairs_hook* 構建，以允許解碼器構建 "
"OrderedDicts。還新增了對第三方工具的支援，例如`PyYAML <https://pyyaml.org/"
">`_。"

#: ../../whatsnew/3.1.rst:80
#, fuzzy
msgid ":pep:`372` - Ordered Dictionaries"
msgstr ":pep:`372` - 有序字典"

#: ../../whatsnew/3.1.rst:80
#, fuzzy
msgid ""
"PEP written by Armin Ronacher and Raymond Hettinger.  Implementation written "
"by Raymond Hettinger."
msgstr "PEP 由 Armin Ronacher 和 Raymond Hettinger 編寫。由 Raymond Hettinger "
"編寫的實作。"

#: ../../whatsnew/3.1.rst:85
#, fuzzy
msgid "PEP 378: Format Specifier for Thousands Separator"
msgstr "PEP 378：千位分隔符的格式說明符"

#: ../../whatsnew/3.1.rst:87
#, fuzzy
msgid ""
"The built-in :func:`format` function and the :meth:`str.format` method use a "
"mini-language that now includes a simple, non-locale aware way to format a "
"number with a thousands separator.  That provides a way to humanize a "
"program's output, improving its professional appearance and readability::"
msgstr ""
"內建的 :func:`format` 函式和 :meth:`str.format` 方法使用一種迷你語言，現在包"
"括一種簡單的、非區域設定感知的方式來格式化帶有千位分隔符的數字。這提供了一種"
"使程式輸出人性化、提高其專業外觀和可讀性的方法："

#: ../../whatsnew/3.1.rst:101
#, fuzzy
msgid ""
"The supported types are :class:`int`, :class:`float`, :class:`complex` and :"
"class:`decimal.Decimal`."
msgstr ""
"支援的型別是 :class:`int`、:class:`float`、:class:`complex` 和 "
":class:`decimal.Decimal`。"

#: ../../whatsnew/3.1.rst:104
#, fuzzy
msgid ""
"Discussions are underway about how to specify alternative separators like "
"dots, spaces, apostrophes, or underscores.  Locale-aware applications should "
"use the existing *n* format specifier which already has some support for "
"thousands separators."
msgstr ""
"正在討論如何指定替代分隔符，如點、空格、撇號或底線。"
"可識別區域設定的應用程式應使用現有的 *n* "
"格式說明符，該說明符已經對千位分隔符提供了一些支援。"

#: ../../whatsnew/3.1.rst:112
#, fuzzy
msgid ":pep:`378` - Format Specifier for Thousands Separator"
msgstr ":pep:`378` - 千位分隔符的格式說明符"

#: ../../whatsnew/3.1.rst:112
#, fuzzy
msgid ""
"PEP written by Raymond Hettinger and implemented by Eric Smith and Mark "
"Dickinson."
msgstr "PEP 由 Raymond Hettinger 編寫，由 Eric Smith 和 Mark Dickinson 實施。"

#: ../../whatsnew/3.1.rst:117
#, fuzzy
msgid "Other Language Changes"
msgstr "其他語言變化"

#: ../../whatsnew/3.1.rst:119
#, fuzzy
msgid "Some smaller changes made to the core Python language are:"
msgstr "對核心 Python 語言所做的一些較小的更改是："

#: ../../whatsnew/3.1.rst:121
#, fuzzy
msgid ""
"Directories and zip archives containing a :file:`__main__.py` file can now "
"be executed directly by passing their name to the interpreter. The directory/"
"zipfile is automatically inserted as the first entry in sys.path.  "
"(Suggestion and initial patch by Andy Chu; revised patch by Phillip J. Eby "
"and Nick Coghlan; :issue:`1739468`.)"
msgstr ""
"包含 :file:`__main__.py` 文件的目錄和 zip "
"存檔現在可以通過將它們的名稱傳遞給直譯器來直接執行。目錄/zip "
"文件作為第一個條目自動插入到 sys.path 中。 （Andy Chu 的建議和初始補丁；"
"Phillip J. Eby 和 Nick Coghlan 修訂的補丁；:issue:`1739468`。）"

#: ../../whatsnew/3.1.rst:127
#, fuzzy
msgid ""
"The :func:`int` type gained a ``bit_length`` method that returns the number "
"of bits necessary to represent its argument in binary::"
msgstr ":func:`int` 型別獲得了一個 ``bit_length`` "
"方法，該方法回傳以二進位表示其參數所需的位數："

#: ../../whatsnew/3.1.rst:141
#, fuzzy
msgid ""
"(Contributed by Fredrik Johansson, Victor Stinner, Raymond Hettinger, and "
"Mark Dickinson; :issue:`3439`.)"
msgstr ""
"（由 Fredrik Johansson、Victor Stinner、Raymond Hettinger 和 Mark Dickinson "
"提供；:issue:`3439`。）"

#: ../../whatsnew/3.1.rst:144
#, fuzzy
msgid ""
"The fields in :func:`format` strings can now be automatically numbered::"
msgstr ":func:`format` 字串中的欄位現在可以自動編號::"

#: ../../whatsnew/3.1.rst:150
#, fuzzy
msgid ""
"Formerly, the string would have required numbered fields such as: ``'Sir {0} "
"of {1}'``."
msgstr "以前，該字串需要帶編號的欄位，例如：``'Sir {0} of {1}'``。"

#: ../../whatsnew/3.1.rst:153
#, fuzzy
msgid "(Contributed by Eric Smith; :issue:`5237`.)"
msgstr "（由 Eric Smith 提供；:issue:`5237`。）"

#: ../../whatsnew/3.1.rst:155
#, fuzzy
msgid ""
"The :func:`string.maketrans` function is deprecated and is replaced by new "
"static methods, :meth:`bytes.maketrans` and :meth:`bytearray.maketrans`. "
"This change solves the confusion around which types were supported by the :"
"mod:`string` module. Now, :class:`str`, :class:`bytes`, and :class:"
"`bytearray` each have their own **maketrans** and **translate** methods with "
"intermediate translation tables of the appropriate type."
msgstr ""
":func:`string.maketrans` 函式已棄用，取而代之的是新的靜態方法 :meth:`bytes."
"maketrans` 和 :meth:`bytearray.maketrans`。此更改解決了 :mod:`string` "
"模組支援哪些型別的困惑。現在，:class:`str`、:class:`bytes` "
"和 :class:`bytearray` 每個都有自己的 **maketrans** 和 **translate** "
"方法以及適當型別的中間翻譯表。"

#: ../../whatsnew/3.1.rst:162
#, fuzzy
msgid "(Contributed by Georg Brandl; :issue:`5675`.)"
msgstr "（由 Georg Brandl 提供；:issue:`5675`。）"

#: ../../whatsnew/3.1.rst:164
#, fuzzy
msgid ""
"The syntax of the :keyword:`with` statement now allows multiple context "
"managers in a single statement::"
msgstr ":keyword:`with` 語句的語法現在允許在單個語句中使用多個上下文管理器::"

#: ../../whatsnew/3.1.rst:172
#, fuzzy
msgid ""
"With the new syntax, the :func:`contextlib.nested` function is no longer "
"needed and is now deprecated."
msgstr "使用新語法，不再需要 :func:`contextlib.nested` 函式，現在已棄用。"

#: ../../whatsnew/3.1.rst:175
#, fuzzy
msgid ""
"(Contributed by Georg Brandl and Mattias Brändström; `appspot issue 53094 "
"<https://codereview.appspot.com/53094>`_.)"
msgstr ""
"（由 Georg Brandl 和 Mattias Brändström 提供；`appspot 問題 53094 "
"<https://codereview.appspot.com/53094>`_。）"

#: ../../whatsnew/3.1.rst:178
#, fuzzy
msgid ""
"``round(x, n)`` now returns an integer if *x* is an integer. Previously it "
"returned a float::"
msgstr "如果 *x* 是整數，``round(x, n)`` 現在回傳一個整數。以前它回傳一個 float::"

#: ../../whatsnew/3.1.rst:184
#, fuzzy
msgid "(Contributed by Mark Dickinson; :issue:`4707`.)"
msgstr "（由 Mark Dickinson 提供；:issue:`4707`。）"

#: ../../whatsnew/3.1.rst:186
#, fuzzy
msgid ""
"Python now uses David Gay's algorithm for finding the shortest floating "
"point representation that doesn't change its value.  This should help "
"mitigate some of the confusion surrounding binary floating point numbers."
msgstr "Python 現在使用 David Gay 的演算法來尋找不改變其值的最短浮點表示。這應該有助"
"於減輕圍繞二進位浮點數的一些混淆。"

#: ../../whatsnew/3.1.rst:191
#, fuzzy
msgid ""
"The significance is easily seen with a number like ``1.1`` which does not "
"have an exact equivalent in binary floating point.  Since there is no exact "
"equivalent, an expression like ``float('1.1')`` evaluates to the nearest "
"representable value which is ``0x1.199999999999ap+0`` in hex or "
"``1.100000000000000088817841970012523233890533447265625`` in decimal. That "
"nearest value was and still is used in subsequent floating point "
"calculations."
msgstr ""
"使用像“1.1”這樣的數字很容易看出其重要性，它在二進位浮點數中沒有精確的等價物。"
"由於沒有精確的等價物，像“float('1."
"1')”這樣的表達式求得最接近的可表示值，即十六進位的“0x1."
"199999999999ap+0”或十進位的“1.10000000000000008881784197001252323389053344726"
"5625”。該最接近的值曾經並且仍然用於後續的浮點計算。"

#: ../../whatsnew/3.1.rst:199
#, fuzzy
msgid ""
"What is new is how the number gets displayed.  Formerly, Python used a "
"simple approach.  The value of ``repr(1.1)`` was computed as ``format(1.1, "
"'.17g')`` which evaluated to ``'1.1000000000000001'``. The advantage of "
"using 17 digits was that it relied on IEEE-754 guarantees to assure that "
"``eval(repr(1.1))`` would round-trip exactly to its original value.  The "
"disadvantage is that many people found the output to be confusing (mistaking "
"intrinsic limitations of binary floating point representation as being a "
"problem with Python itself)."
msgstr ""
"新的是數字的顯示方式。以前，Python 使用一種簡單的方法。 ``repr(1.1)`` "
"的值被計算為 ``format(1.1, '.17g')`` 計算結果為 ``'1.1000000000000001'``。"
"使用 17 位數字的優勢在於它依賴 IEEE-754 保證來確保“eval(repr(1."
"1))”將精確地回傳到其原始值。缺點是許多人發現輸出令人困惑（"
"將二進位浮點表示的內在限制誤認為是 Python 本身的問題）。"

#: ../../whatsnew/3.1.rst:208
#, fuzzy
msgid ""
"The new algorithm for ``repr(1.1)`` is smarter and returns ``'1.1'``. "
"Effectively, it searches all equivalent string representations (ones that "
"get stored with the same underlying float value) and returns the shortest "
"representation."
msgstr ""
"``repr(1.1)`` 的新演算法更智能並回傳 ``'1.1'``。實際上，它會搜索所有等效的字"
"串表示形式（以相同的基礎浮點值儲存的字串表示形式）並回傳最短的表示形式。"

#: ../../whatsnew/3.1.rst:213
#, fuzzy
msgid ""
"The new algorithm tends to emit cleaner representations when possible, but "
"it does not change the underlying values.  So, it is still the case that "
"``1.1 + 2.2 != 3.3`` even though the representations may suggest otherwise."
msgstr ""
"新演算法傾向於在可能的情況下發出更清晰的表示，但它不會改變基礎值。因此，“1.1 "
"+ 2.2 != 3.3”仍然是這種情況，儘管表示可能另有說明。"

#: ../../whatsnew/3.1.rst:217
#, fuzzy
msgid ""
"The new algorithm depends on certain features in the underlying floating "
"point implementation.  If the required features are not found, the old "
"algorithm will continue to be used.  Also, the text pickle protocols assure "
"cross-platform portability by using the old algorithm."
msgstr ""
"新演算法取決於底層浮點實作中的某些特性。如果沒有找到所需的特徵，將繼續使用舊"
"演算法。此外，text pickle 協定通過使用舊演算法確保跨平台的可移植性。"

#: ../../whatsnew/3.1.rst:222
#, fuzzy
msgid "(Contributed by Eric Smith and Mark Dickinson; :issue:`1580`)"
msgstr "（由 Eric Smith 和 Mark Dickinson 提供；:issue:`1580`）"

#: ../../whatsnew/3.1.rst:225
#, fuzzy
msgid "New, Improved, and Deprecated Modules"
msgstr "新的、改進的和棄用的模組"

#: ../../whatsnew/3.1.rst:227
#, fuzzy
msgid ""
"Added a :class:`collections.Counter` class to support convenient counting of "
"unique items in a sequence or iterable::"
msgstr "新增了一個 :class:`collections.Counter` "
"類以支援方便地對序列或可疊代中的唯一項進行計數::"

#: ../../whatsnew/3.1.rst:233
#, fuzzy
msgid "(Contributed by Raymond Hettinger; :issue:`1696199`.)"
msgstr "（由 Raymond Hettinger 提供；:issue:`1696199`。）"

#: ../../whatsnew/3.1.rst:235
#, fuzzy
msgid ""
"Added a new module, :mod:`tkinter.ttk` for access to the Tk themed widget "
"set. The basic idea of ttk is to separate, to the extent possible, the code "
"implementing a widget's behavior from the code implementing its appearance."
msgstr ""
"新增了一個新模組，:mod:`tkinter.ttk` 用於訪問 Tk 主題小部件集。 ttk "
"的基本思想是盡可能將實作小部件行為的程式碼與實作其外觀的程式碼分開。"

#: ../../whatsnew/3.1.rst:239
#, fuzzy
msgid "(Contributed by Guilherme Polo; :issue:`2983`.)"
msgstr "（由 Guilherme Polo 提供；:issue:`2983`。）"

#: ../../whatsnew/3.1.rst:241
#, fuzzy
msgid ""
"The :class:`gzip.GzipFile` and :class:`bz2.BZ2File` classes now support the "
"context management protocol::"
msgstr ":class:`gzip.GzipFile` 和 :class:`bz2.BZ2File` 類現在支援上下文管理協定::"

#: ../../whatsnew/3.1.rst:248
#, fuzzy
msgid "(Contributed by Antoine Pitrou.)"
msgstr "（由安托萬·皮特魯提供。）"

#: ../../whatsnew/3.1.rst:250
#, fuzzy
msgid ""
"The :mod:`decimal` module now supports methods for creating a decimal object "
"from a binary :class:`float`.  The conversion is exact but can sometimes be "
"surprising::"
msgstr ":mod:`decimal` 模組現在支援從二進位 :class:`float` "
"建立十進位物件的方法。轉換是準確的，但有時會令人驚訝::"

#: ../../whatsnew/3.1.rst:257
#, fuzzy
msgid ""
"The long decimal result shows the actual binary fraction being stored for "
"*1.1*.  The fraction has many digits because *1.1* cannot be exactly "
"represented in binary."
msgstr "長十進位結果顯示為 *1.1* 儲存的實際二進位小數。分數有很多位，因為 *1.1* "
"不能用二進位精確表示。"

#: ../../whatsnew/3.1.rst:261
#, fuzzy
msgid "(Contributed by Raymond Hettinger and Mark Dickinson.)"
msgstr "（由 Raymond Hettinger 和 Mark Dickinson 提供。）"

#: ../../whatsnew/3.1.rst:263
#, fuzzy
msgid ""
"The :mod:`itertools` module grew two new functions.  The :func:`itertools."
"combinations_with_replacement` function is one of four for generating "
"combinatorics including permutations and Cartesian products.  The :func:"
"`itertools.compress` function mimics its namesake from APL.  Also, the "
"existing :func:`itertools.count` function now has an optional *step* "
"argument and can accept any type of counting sequence including :class:"
"`fractions.Fraction` and :class:`decimal.Decimal`::"
msgstr ""
":mod:`itertools` 模組增加了兩個新功能。 :func:`itertools."
"combinations_with_replacement` "
"函式是用於生成包括排列和笛卡爾積在內的組合的四個函式之一。 :func:`itertools."
"compress` 函式模仿了 APL 中的同名函式。此外，現有的 itertools.count "
"函式現在有一個可選的 *step* 參數，可以接受任何型別的計數序列，包括 "
"fractions.Fraction 和 decimal.Decimal::class:`decimal.Decimal::"

#: ../../whatsnew/3.1.rst:282
#, fuzzy
msgid "(Contributed by Raymond Hettinger.)"
msgstr "（雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/3.1.rst:284
#, fuzzy
msgid ""
":func:`collections.namedtuple` now supports a keyword argument *rename* "
"which lets invalid fieldnames be automatically converted to positional names "
"in the form _0, _1, etc.  This is useful when the field names are being "
"created by an external source such as a CSV header, SQL field list, or user "
"input::"
msgstr ""
":func:`collections.namedtuple` 現在支援關鍵字參數 *rename*，"
"它可以讓無效的欄位名自動轉換為 _0、_1 "
"等形式的位置名稱。這在欄位名由外部源建立時很有用，例如作為 CSV 標頭、SQL "
"欄位列表或使用者輸入::"

#: ../../whatsnew/3.1.rst:301
#, fuzzy
msgid "(Contributed by Raymond Hettinger; :issue:`1818`.)"
msgstr "（由 Raymond Hettinger 提供；:issue:`1818`。）"

#: ../../whatsnew/3.1.rst:303
#, fuzzy
msgid ""
"The :func:`re.sub`, :func:`re.subn` and :func:`re.split` functions now "
"accept a flags parameter."
msgstr ":func:`re.sub`、:func:`re.subn` 和 :func:`re.split` 函式現在接受旗標參數。"

#: ../../whatsnew/3.1.rst:306
#, fuzzy
msgid "(Contributed by Gregory Smith.)"
msgstr "（由格雷戈里·史密斯提供。）"

#: ../../whatsnew/3.1.rst:308
#, fuzzy
msgid ""
"The :mod:`logging` module now implements a simple :class:`logging."
"NullHandler` class for applications that are not using logging but are "
"calling library code that does.  Setting-up a null handler will suppress "
"spurious warnings such as \"No handlers could be found for logger foo\"::"
msgstr ""
":mod:`logging` 模組現在實作了一個簡單的 :class:`logging.NullHandler` 類，用於"
"不使用日誌記錄但呼叫使用日誌記錄的庫程式碼的應用程式。設定空處理程式將抑制虛"
"假警告，例如“找不到記錄器 foo 的處理程式”::"

#: ../../whatsnew/3.1.rst:316
#, fuzzy
msgid "(Contributed by Vinay Sajip; :issue:`4384`)."
msgstr "（由 Vinay Sajip 提供；:issue:`4384`）。"

#: ../../whatsnew/3.1.rst:318
#, fuzzy
msgid ""
"The :mod:`runpy` module which supports the ``-m`` command line switch now "
"supports the execution of packages by looking for and executing a "
"``__main__`` submodule when a package name is supplied."
msgstr "支援 ``-m`` 命令列開關的 :mod:`runpy` "
"模組現在支援通過在提供包名稱時查找並執行 `__main__`` 子模組來執行包。"

#: ../../whatsnew/3.1.rst:322
#, fuzzy
msgid "(Contributed by Andi Vajda; :issue:`4195`.)"
msgstr "（由 Andi Vajda 提供；:issue:`4195`。）"

#: ../../whatsnew/3.1.rst:324
#, fuzzy
msgid ""
"The :mod:`pdb` module can now access and display source code loaded via :mod:"
"`zipimport` (or any other conformant :pep:`302` loader)."
msgstr ""
":mod:`pdb` 模組現在可以訪問和顯示通過 :mod:`zipimport`（或任何其他相容的 "
":pep:`302` 加載器）加載的源程式碼。"

#: ../../whatsnew/3.1.rst:327
#, fuzzy
msgid "(Contributed by Alexander Belopolsky; :issue:`4201`.)"
msgstr "（由 Alexander Belopolsky 提供；:issue:`4201`。）"

#: ../../whatsnew/3.1.rst:329
#, fuzzy
msgid ":class:`functools.partial` objects can now be pickled."
msgstr ":class:`functools.partial` 物件現在可以被醃製。"

#: ../../whatsnew/3.1.rst:331
#, fuzzy
msgid ""
"(Suggested by Antoine Pitrou and Jesse Noller.  Implemented by Jack "
"Diederich; :issue:`5228`.)"
msgstr "（由 Antoine Pitrou 和 Jesse Noller 建議。由 Jack Diederich "
"實施；:issue:`5228`。）"

#: ../../whatsnew/3.1.rst:334
#, fuzzy
msgid ""
"Add :mod:`pydoc` help topics for symbols so that ``help('@')`` works as "
"expected in the interactive environment."
msgstr "為符號新增 :mod:`pydoc` 幫助主題，以便 ``help('@')`` "
"在交互式環境中按預期工作。"

#: ../../whatsnew/3.1.rst:337
#, fuzzy
msgid "(Contributed by David Laban; :issue:`4739`.)"
msgstr "（由 David Laban 提供；:issue:`4739`。）"

#: ../../whatsnew/3.1.rst:339
#, fuzzy
msgid ""
"The :mod:`unittest` module now supports skipping individual tests or classes "
"of tests. And it supports marking a test as an expected failure, a test that "
"is known to be broken, but shouldn't be counted as a failure on a "
"TestResult::"
msgstr ""
":mod:`unittest` 模組現在支援跳過單個測試或測試類。並且它支援將測試標記為預期"
"失敗，即已知被破壞的測試，但不應計為 TestResult:: 上的失敗"

#: ../../whatsnew/3.1.rst:354
#, fuzzy
msgid ""
"Also, tests for exceptions have been builtout to work with context managers "
"using the :keyword:`with` statement::"
msgstr "此外，已經構建了例外測試以使用 :keyword:`with` 語句與上下文管理器一起工作::"

#: ../../whatsnew/3.1.rst:361
#, fuzzy
msgid ""
"In addition, several new assertion methods were added including :func:"
"`assertSetEqual`, :func:`assertDictEqual`, :func:"
"`assertDictContainsSubset`, :func:`assertListEqual`, :func:"
"`assertTupleEqual`, :func:`assertSequenceEqual`, :func:"
"`assertRaisesRegexp`, :func:`assertIsNone`, and :func:`assertIsNotNone`."
msgstr ""
"此外，還新增了幾個新的斷言方法，包括`、:func:`assertRaisesRegexp`、:func:`ass"
"ertIsNone` 和 :func:`assertIsNotNone`。"

#: ../../whatsnew/3.1.rst:368
#, fuzzy
msgid "(Contributed by Benjamin Peterson and Antoine Pitrou.)"
msgstr "（由本傑明·彼得森和安托萬·皮特魯提供。）"

#: ../../whatsnew/3.1.rst:370
#, fuzzy
msgid ""
"The :mod:`io` module has three new constants for the :meth:`seek` method :"
"data:`SEEK_SET`, :data:`SEEK_CUR`, and :data:`SEEK_END`."
msgstr ""
":mod:`io` 模組為 :meth:`seek` "
"方法新增了三個新常數 :data:`SEEK_SET`、:data:`SEEK_CUR` 和 :data:`SEEK_END`。"

#: ../../whatsnew/3.1.rst:373
#, fuzzy
msgid "The :attr:`sys.version_info` tuple is now a named tuple::"
msgstr ":attr:`sys.version_info` 元組現在是命名元組::"

#: ../../whatsnew/3.1.rst:378
#, fuzzy
msgid "(Contributed by Ross Light; :issue:`4285`.)"
msgstr "（由 Ross Light 提供；:issue:`4285`。）"

#: ../../whatsnew/3.1.rst:380
#, fuzzy
msgid "The :mod:`nntplib` and :mod:`imaplib` modules now support IPv6."
msgstr ":mod:`nntplib` 和 :mod:`imaplib` 模組現在支援 IPv6。"

#: ../../whatsnew/3.1.rst:382
#, fuzzy
msgid "(Contributed by Derek Morr; :issue:`1655` and :issue:`1664`.)"
msgstr "（由 Derek Morr 提供；:issue:`1655` 和 :issue:`1664`。）"

#: ../../whatsnew/3.1.rst:384
#, fuzzy
msgid ""
"The :mod:`pickle` module has been adapted for better interoperability with "
"Python 2.x when used with protocol 2 or lower.  The reorganization of the "
"standard library changed the formal reference for many objects.  For "
"example, ``__builtin__.set`` in Python 2 is called ``builtins.set`` in "
"Python 3. This change confounded efforts to share data between different "
"versions of Python.  But now when protocol 2 or lower is selected, the "
"pickler will automatically use the old Python 2 names for both loading and "
"dumping. This remapping is turned-on by default but can be disabled with the "
"*fix_imports* option::"
msgstr ""
":mod:`pickle` 模組已經過調整，以便在與協定 2 或更低版本一起使用時與 Python "
"2.x 實作更好的互操作性。標準庫的重組改變了許多物件的正式引用。例如，Python 2 "
"中的“__builtin__.set”在 Python 3 中稱為“builtins.set”。"
"這種變化混淆了在不同版本的 Python 之間共享資料的努力。但是現在當選擇協定 2 "
"或更低版本時，pickler 將自動使用舊的 Python 2 "
"名稱進行加載和轉儲。預設情況下，此重新映射是打開的，但可以使用 *fix_imports* "
"選項禁用::"

#: ../../whatsnew/3.1.rst:400
#, fuzzy
msgid ""
"An unfortunate but unavoidable side-effect of this change is that protocol 2 "
"pickles produced by Python 3.1 won't be readable with Python 3.0. The latest "
"pickle protocol, protocol 3, should be used when migrating data between "
"Python 3.x implementations, as it doesn't attempt to remain compatible with "
"Python 2.x."
msgstr ""
"此更改的一個不幸但不可避免的副作用是 Python 3.1 生成的協定 2 pickle "
"將無法使用 Python 3.0 讀取。在 Python 3.x 實作之間遷移資料時應使用最新的 "
"pickle 協定 protocol 3，因為它不會嘗試與 Python 2.x 保持相容。"

#: ../../whatsnew/3.1.rst:406
#, fuzzy
msgid ""
"(Contributed by Alexandre Vassalotti and Antoine Pitrou, :issue:`6137`.)"
msgstr "（由 Alexandre Vassalotti 和 Antoine Pitrou 貢獻，:issue:`6137`。）"

#: ../../whatsnew/3.1.rst:408
#, fuzzy
msgid ""
"A new module, :mod:`importlib` was added.  It provides a complete, portable, "
"pure Python reference implementation of the :keyword:`import` statement and "
"its counterpart, the :func:`__import__` function.  It represents a "
"substantial step forward in documenting and defining the actions that take "
"place during imports."
msgstr ""
"新增了一個新模組 :mod:`importlib`。它提供了 :keyword:`import` 語句及其對應的 "
":func:`__import__` 函式的完整、可移植、純 Python "
"參考實作。它代表了在記錄和定義進口期間發生的行動方面向前邁出的實質性一步。"

#: ../../whatsnew/3.1.rst:414
#, fuzzy
msgid "(Contributed by Brett Cannon.)"
msgstr "（由 Brett Cannon 提供。）"

#: ../../whatsnew/3.1.rst:417
#, fuzzy
msgid "Optimizations"
msgstr "最佳化"

#: ../../whatsnew/3.1.rst:419
#, fuzzy
msgid "Major performance enhancements have been added:"
msgstr "新增了主要的性能增強功能："

#: ../../whatsnew/3.1.rst:421
#, fuzzy
msgid ""
"The new I/O library (as defined in :pep:`3116`) was mostly written in Python "
"and quickly proved to be a problematic bottleneck in Python 3.0. In Python "
"3.1, the I/O library has been entirely rewritten in C and is 2 to 20 times "
"faster depending on the task at hand. The pure Python version is still "
"available for experimentation purposes through the ``_pyio`` module."
msgstr ""
"新的 I/O 庫（如 :pep:`3116` 中所定義）主要是用 Python 編寫的，"
"並且很快被證明是 Python 3.0 中的一個有問題的瓶頸。在 Python 3.1 中，I/O "
"庫已完全用 C 語言重寫，速度提高了 2 到 20 倍，具體取決於手頭的任務。純 "
"Python 版本仍可通過 _pyio 模組用於實驗目的。"

#: ../../whatsnew/3.1.rst:428
#, fuzzy
msgid "(Contributed by Amaury Forgeot d'Arc and Antoine Pitrou.)"
msgstr "（由 Amaury Forgeot d'Arc 和 Antoine Pitrou 提供。）"

#: ../../whatsnew/3.1.rst:430
#, fuzzy
msgid ""
"Added a heuristic so that tuples and dicts containing only untrackable "
"objects are not tracked by the garbage collector. This can reduce the size "
"of collections and therefore the garbage collection overhead on long-running "
"programs, depending on their particular use of datatypes."
msgstr ""
"新增了啟發式方法，以便垃圾收集器不跟踪僅包含不可跟踪物件的元組和字典。這可以"
"減少集合的大小，從而減少長時間運行的程式的垃圾收集開銷，具體取決於它們對資料"
"型別的特定使用。"

#: ../../whatsnew/3.1.rst:435
#, fuzzy
msgid "(Contributed by Antoine Pitrou, :issue:`4688`.)"
msgstr "（由 Antoine Pitrou 提供，:issue:`4688`。）"

#: ../../whatsnew/3.1.rst:437
#, fuzzy
msgid ""
"Enabling a configure option named ``--with-computed-gotos`` on compilers "
"that support it (notably: gcc, SunPro, icc), the bytecode evaluation loop is "
"compiled with a new dispatch mechanism which gives speedups of up to 20%, "
"depending on the system, the compiler, and the benchmark."
msgstr ""
"在支援它的編譯器（特別是：gcc、SunPro、icc）上啟用名為“--with-computed-"
"gotos”的配置選項，位元組碼評估循環使用一種新的調度機制編譯，該機制可提供高達 "
"20% 的加速，取決於系統、編譯器和基準測試。"

#: ../../whatsnew/3.1.rst:443
#, fuzzy
msgid ""
"(Contributed by Antoine Pitrou along with a number of other participants, :"
"issue:`4753`)."
msgstr "（由 Antoine Pitrou 和許多其他參與者貢獻，:issue:`4753`）。"

#: ../../whatsnew/3.1.rst:446
#, fuzzy
msgid ""
"The decoding of UTF-8, UTF-16 and LATIN-1 is now two to four times faster."
msgstr "UTF-8、UTF-16 和 LATIN-1 的解碼現在快兩到四倍。"

#: ../../whatsnew/3.1.rst:449
#, fuzzy
msgid ""
"(Contributed by Antoine Pitrou and Amaury Forgeot d'Arc, :issue:`4868`.)"
msgstr "（由 Antoine Pitrou 和 Amaury Forgeot d'Arc 貢獻，:issue:`4868`。）"

#: ../../whatsnew/3.1.rst:451
#, fuzzy
msgid ""
"The :mod:`json` module now has a C extension to substantially improve its "
"performance.  In addition, the API was modified so that json works only "
"with :class:`str`, not with :class:`bytes`.  That change makes the module "
"closely match the `JSON specification <https://json.org/>`_ which is defined "
"in terms of Unicode."
msgstr ""
":mod:`json` 模組現在有一個 C 擴充，可以顯著提高它的性能。此外，修改了 API，"
"使 json 僅適用於 :class:`str`，而不適用於 :class:`bytes`。該更改使模組與根據 "
"Unicode 定義的 `JSON 規範 <https://json.org/>`_ 緊密匹配。"

#: ../../whatsnew/3.1.rst:457
#, fuzzy
msgid ""
"(Contributed by Bob Ippolito and converted to Py3.1 by Antoine Pitrou and "
"Benjamin Peterson; :issue:`4136`.)"
msgstr ""
"（由 Bob Ippolito 貢獻並由 Antoine Pitrou 和 Benjamin Peterson 轉換為 Py3."
"1；:issue:`4136`。）"

#: ../../whatsnew/3.1.rst:460
#, fuzzy
msgid ""
"Unpickling now interns the attribute names of pickled objects.  This saves "
"memory and allows pickles to be smaller."
msgstr "Unpickling 現在會保留已醃製物件的屬性名稱。這樣可以節省記憶體並允許泡菜更小。"

#: ../../whatsnew/3.1.rst:463
#, fuzzy
msgid "(Contributed by Jake McGuire and Antoine Pitrou; :issue:`5084`.)"
msgstr "（由 Jake McGuire 和 Antoine Pitrou 提供；:issue:`5084`。）"

#: ../../whatsnew/3.1.rst:466
msgid "IDLE"
msgstr "IDLE"

#: ../../whatsnew/3.1.rst:468
#, fuzzy
msgid ""
"IDLE's format menu now provides an option to strip trailing whitespace from "
"a source file."
msgstr "IDLE 的格式菜單現在提供了一個從源文件中去除尾隨空格的選項。"

#: ../../whatsnew/3.1.rst:471
#, fuzzy
msgid "(Contributed by Roger D. Serwy; :issue:`5150`.)"
msgstr "（由 Roger D. Serwy 提供；:issue:`5150`。）"

#: ../../whatsnew/3.1.rst:474
#, fuzzy
msgid "Build and C API Changes"
msgstr "構建和 C API 更改"

#: ../../whatsnew/3.1.rst:476
#, fuzzy
msgid "Changes to Python's build process and to the C API include:"
msgstr "Python 構建過程和 C API 的變化包括："

#: ../../whatsnew/3.1.rst:478
#, fuzzy
msgid ""
"Integers are now stored internally either in base ``2**15`` or in base "
"``2**30``, the base being determined at build time.  Previously, they were "
"always stored in base ``2**15``.  Using base ``2**30`` gives significant "
"performance improvements on 64-bit machines, but benchmark results on 32-bit "
"machines have been mixed.  Therefore, the default is to use base ``2**30`` "
"on 64-bit machines and base ``2**15`` on 32-bit machines; on Unix, there's a "
"new configure option ``--enable-big-digits`` that can be used to override "
"this default."
msgstr ""
"整數現在在內部儲存在基數“2**15”或基數“2**30”中，基數在構建時確定。以前，"
"它們總是儲存在基數 ``2**15`` 中。使用基數 ``2**30`` 可以在 64 "
"位機器上顯著提高性能，但在 32 位機器上的基準測試結果好壞參半。因此，預設是在 "
"64 位機器上使用 base ``2**30``，在 32 位機器上使用 base ``2**15``；在 Unix "
"上，有一個新的配置選項 ``--enable-big-digits`` 可用於覆蓋此預設值。"

#: ../../whatsnew/3.1.rst:487
#, fuzzy
msgid ""
"Apart from the performance improvements this change should be invisible to "
"end users, with one exception: for testing and debugging purposes there's a "
"new :attr:`sys.int_info` that provides information about the internal "
"format, giving the number of bits per digit and the size in bytes of the C "
"type used to store each digit::"
msgstr ""
"除了性能改進之外，最終使用者應該看不到這一變化，但有一個例外：為了測試和除錯"
"目的，有一個新的 :attr:`sys.int_info` 提供有關內部格式的資訊，"
"給出每個數字的位數和用於儲存每個數字的 C 型別的位元組大小::"

#: ../../whatsnew/3.1.rst:497
#, fuzzy
msgid "(Contributed by Mark Dickinson; :issue:`4258`.)"
msgstr "（由 Mark Dickinson 提供；:issue:`4258`。）"

#: ../../whatsnew/3.1.rst:499
#, fuzzy
msgid ""
"The :c:func:`PyLong_AsUnsignedLongLong()` function now handles a negative "
"*pylong* by raising :exc:`OverflowError` instead of :exc:`TypeError`."
msgstr ""
":c:func:`PyLong_AsUnsignedLongLong()` 函式現在通過引發 :exc:`OverflowError` "
"而不是 :exc:`TypeError` 來處理負 *pylong*。"

#: ../../whatsnew/3.1.rst:502
#, fuzzy
msgid "(Contributed by Mark Dickinson and Lisandro Dalcrin; :issue:`5175`.)"
msgstr "（由 Mark Dickinson 和 Lisandro Dalcrin 提供；:issue:`5175`。）"

#: ../../whatsnew/3.1.rst:504
#, fuzzy
msgid ""
"Deprecated :c:func:`PyNumber_Int`.  Use :c:func:`PyNumber_Long` instead."
msgstr "棄用 :c:func:`PyNumber_Int`。請改用 :c:func:`PyNumber_Long`。"

#: ../../whatsnew/3.1.rst:506
#, fuzzy
msgid "(Contributed by Mark Dickinson; :issue:`4910`.)"
msgstr "（由 Mark Dickinson 提供；:issue:`4910`。）"

#: ../../whatsnew/3.1.rst:508
#, fuzzy
msgid ""
"Added a new :c:func:`PyOS_string_to_double` function to replace the "
"deprecated functions :c:func:`PyOS_ascii_strtod` and :c:func:"
"`PyOS_ascii_atof`."
msgstr ""
"新增了一個新的 :c:func:`PyOS_string_to_double` 函式來替換已棄用的函式 "
":c:func:`PyOS_ascii_strtod` 和 :c:func:`PyOS_ascii_atof`。"

#: ../../whatsnew/3.1.rst:511
#, fuzzy
msgid "(Contributed by Mark Dickinson; :issue:`5914`.)"
msgstr "（由 Mark Dickinson 提供；:issue:`5914`。）"

#: ../../whatsnew/3.1.rst:513
#, fuzzy
msgid ""
"Added :c:type:`PyCapsule` as a replacement for the :c:type:`PyCObject` API. "
"The principal difference is that the new type has a well defined interface "
"for passing typing safety information and a less complicated signature for "
"calling a destructor.  The old type had a problematic API and is now "
"deprecated."
msgstr ""
"新增 :c:type:`PyCapsule` 作為 :c:type:`PyCObject` API 的替代品。主要區別在於"
"新型別有一個定義良好的介面用於傳遞型別安全資訊和一個不太複雜的呼叫析構函式的"
"簽名。舊型別的 API 有問題，現在已棄用。"

#: ../../whatsnew/3.1.rst:519
#, fuzzy
msgid "(Contributed by Larry Hastings; :issue:`5630`.)"
msgstr "（由 Larry Hastings 提供；:issue:`5630`。）"

#: ../../whatsnew/3.1.rst:522
#, fuzzy
msgid "Porting to Python 3.1"
msgstr "移植到 Python 3.1"

#: ../../whatsnew/3.1.rst:524
#, fuzzy
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code:"
msgstr "本節列出了之前描述的更改和其他可能需要更改程式碼的錯誤修復："

#: ../../whatsnew/3.1.rst:527
#, fuzzy
msgid ""
"The new floating point string representations can break existing doctests. "
"For example::"
msgstr "新的浮點字串表示可以打破現有的 doctests。例如：："

#: ../../whatsnew/3.1.rst:550
#, fuzzy
msgid ""
"The automatic name remapping in the pickle module for protocol 2 or lower "
"can make Python 3.1 pickles unreadable in Python 3.0.  One solution is to "
"use protocol 3.  Another solution is to set the *fix_imports* option to "
"``False``. See the discussion above for more details."
msgstr ""
"協定 2 或更低版本的 pickle 模組中的自動名稱重新映射可以使 Python 3.1 pickle "
"在 Python 3.0 中不可讀。一種解決方案是使用協定 3。另一種解決方案是將 "
"*fix_imports* 選項設定為 ``False``。有關詳細資訊，請參閱上面的討論。"
