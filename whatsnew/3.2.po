# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-31 08:13+0000\n"
"PO-Revision-Date: 2018-05-23 16:20+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.2.rst:3
msgid "What's New In Python 3.2"
msgstr "Python 3.2 有什麼新功能"

#: ../../whatsnew/3.2.rst:0
msgid "Author"
msgstr "作者"

#: ../../whatsnew/3.2.rst:5
msgid "Raymond Hettinger"
msgstr "Raymond Hettinger"

#: ../../whatsnew/3.2.rst:51
#, fuzzy
msgid ""
"This article explains the new features in Python 3.2 as compared to 3.1. "
"Python 3.2 was released on February 20, 2011. It focuses on a few highlights "
"and gives a few examples.  For full details, see the `Misc/NEWS <https://"
"github.com/python/cpython/blob/076ca6c3c8df3030307e548d9be792ce3c1c6eea/Misc/"
"NEWS>`__ file."
msgstr ""
"本文介紹了 Python 3.2 與 3.1 相比的新功能。 Python 3.2 於 2011 年 2 月 20 "
"日發布。它重點介紹了一些亮點並給出了一些示例。有關完整詳細資訊，請參閱`Misc/"
"NEWS <https://github.com/python/cpython/blob/"
"076ca6c3c8df3030307e548d9be792ce3c1c6eea/Misc/NEWS>`__ 文件。"

#: ../../whatsnew/3.2.rst:60
#, fuzzy
msgid ":pep:`392` - Python 3.2 Release Schedule"
msgstr ":pep:`392` - Python 3.2 發佈時間表"

#: ../../whatsnew/3.2.rst:64
#, fuzzy
msgid "PEP 384: Defining a Stable ABI"
msgstr "PEP 384：定義穩定的 ABI"

#: ../../whatsnew/3.2.rst:66
#, fuzzy
msgid ""
"In the past, extension modules built for one Python version were often not "
"usable with other Python versions. Particularly on Windows, every feature "
"release of Python required rebuilding all extension modules that one wanted "
"to use. This requirement was the result of the free access to Python "
"interpreter internals that extension modules could use."
msgstr ""
"過去，為一個 Python 版本構建的擴充模組通常不能用於其他 Python 版本。特別是在 "
"Windows 上，Python 的每個功能版本都需要重新構建人們想要使用的所有擴充模組。"
"此要求是免費訪問擴充模組可以使用的 Python 直譯器內部結構的結果。"

#: ../../whatsnew/3.2.rst:72
#, fuzzy
msgid ""
"With Python 3.2, an alternative approach becomes available: extension "
"modules which restrict themselves to a limited API (by defining "
"Py_LIMITED_API) cannot use many of the internals, but are constrained to a "
"set of API functions that are promised to be stable for several releases. As "
"a consequence, extension modules built for 3.2 in that mode will also work "
"with 3.3, 3.4, and so on. Extension modules that make use of details of "
"memory structures can still be built, but will need to be recompiled for "
"every feature release."
msgstr ""
"在 Python 3.2 中，另一種方法變得可用：將自身限制為有限 API（通過定義 "
"Py_LIMITED_API）的擴充模組不能使用許多內部組件，"
"而是被限制為一組承諾在多個版本中保持穩定的 API 函式。因此，在該模式下為 3.2 "
"構建的擴充模組也適用於 3.3、3.4 "
"等。仍然可以構建使用記憶體結構細節的擴充模組，但需要為每個功能版本重新編譯。"

#: ../../whatsnew/3.2.rst:83
#, fuzzy
msgid ":pep:`384` - Defining a Stable ABI"
msgstr ":pep:`384` - 定義穩定的 ABI"

#: ../../whatsnew/3.2.rst:84
msgid "PEP written by Martin von Löwis."
msgstr "由 Martin von Löwis 撰寫 PEP。"

#: ../../whatsnew/3.2.rst:88
#, fuzzy
msgid "PEP 389: Argparse Command Line Parsing Module"
msgstr "PEP 389：Argparse 命令列剖析模組"

#: ../../whatsnew/3.2.rst:90
#, fuzzy
msgid ""
"A new module for command line parsing, :mod:`argparse`, was introduced to "
"overcome the limitations of :mod:`optparse` which did not provide support "
"for positional arguments (not just options), subcommands, required options "
"and other common patterns of specifying and validating options."
msgstr ""
"引入了一個用於命令列剖析的新模組 :mod:`argparse`，以克服 :mod:`optparse` 的局"
"限性，後者不支援位置參數（不僅僅是選項）、子命令、必需選項和其他常見模式指定"
"和驗證選項。"

#: ../../whatsnew/3.2.rst:95
#, fuzzy
msgid ""
"This module has already had widespread success in the community as a third-"
"party module.  Being more fully featured than its predecessor, the :mod:"
"`argparse` module is now the preferred module for command-line processing. "
"The older module is still being kept available because of the substantial "
"amount of legacy code that depends on it."
msgstr ""
"該模組作為第三方模組已經在社區中取得了廣泛的成功。 :mod:`argparse` 模組比其前"
"身功能更全面，現在是命令列處理的首選模組。由於依賴於它的大量遺留程式碼，舊模"
"組仍然可用。"

#: ../../whatsnew/3.2.rst:101
#, fuzzy
msgid ""
"Here's an annotated example parser showing features like limiting results to "
"a set of choices, specifying a *metavar* in the help screen, validating that "
"one or more positional arguments is present, and making a required option::"
msgstr ""
"這是一個帶註釋的示例剖析器，顯示了諸如將結果限制為一組選擇、在幫助屏幕中指定 "
"*metavar*、驗證是否存在一個或多個位置參數以及製作所需選項等功能："

#: ../../whatsnew/3.2.rst:120
#, fuzzy
msgid "Example of calling the parser on a command string::"
msgstr "在命令字串上呼叫剖析器的示例::"

#: ../../whatsnew/3.2.rst:131
#, fuzzy
msgid "Example of the parser's automatically generated help::"
msgstr "剖析器自動生成的幫助示例::"

#: ../../whatsnew/3.2.rst:150
#, fuzzy
msgid ""
"An especially nice :mod:`argparse` feature is the ability to define "
"subparsers, each with their own argument patterns and help displays::"
msgstr "一個特別好的 :mod:`argparse` "
"特性是定義子剖析器的能力，每個子剖析器都有自己的參數模式和幫助顯示::"

#: ../../whatsnew/3.2.rst:176
#, fuzzy
msgid ":pep:`389` - New Command Line Parsing Module"
msgstr ":pep:`389` - 新的命令列剖析模組"

#: ../../whatsnew/3.2.rst:176
msgid "PEP written by Steven Bethard."
msgstr "由 Steven Bethard 撰寫 PEP。"

#: ../../whatsnew/3.2.rst:178
#, fuzzy
msgid ""
":ref:`upgrading-optparse-code` for details on the differences from :mod:"
"`optparse`."
msgstr ":ref:`upgrading-optparse-code` 有關與 :mod:`optparse` 的區別的詳細資訊。"

#: ../../whatsnew/3.2.rst:182
#, fuzzy
msgid "PEP 391:  Dictionary Based Configuration for Logging"
msgstr "PEP 391：用於日誌記錄的基於字典的配置"

#: ../../whatsnew/3.2.rst:184
#, fuzzy
msgid ""
"The :mod:`logging` module provided two kinds of configuration, one style "
"with function calls for each option or another style driven by an external "
"file saved in a :mod:`ConfigParser` format.  Those options did not provide "
"the flexibility to create configurations from JSON or YAML files, nor did "
"they support incremental configuration, which is needed for specifying "
"logger options from a command line."
msgstr ""
":mod:`logging` 模組提供了兩種配置，一種是對每個選項進行函式呼叫，"
"另一種是通過以 :mod:`ConfigParser` 格式保存的外部文件驅動。這些選項不提供從 "
"JSON 或 YAML 文件建立配置的靈活性，也不支援增量配置，而增量配置是從命令列指定"
"記錄器選項所必需的。"

#: ../../whatsnew/3.2.rst:191
#, fuzzy
msgid ""
"To support a more flexible style, the module now offers :func:`logging."
"config.dictConfig` for specifying logging configuration with plain Python "
"dictionaries.  The configuration options include formatters, handlers, "
"filters, and loggers.  Here's a working example of a configuration "
"dictionary::"
msgstr ""
"為了支援更靈活的樣式，該模組現在提供 :func:`logging.config.dictConfig` "
"用於使用純 Python 字典指定日誌記錄配置。配置選項包括格式化程式、處理程式、過"
"濾器和記錄器。這是一個配置字典的工作示例："

#: ../../whatsnew/3.2.rst:215
#, fuzzy
msgid ""
"If that dictionary is stored in a file called :file:`conf.json`, it can be "
"loaded and called with code like this::"
msgstr "如果該字典儲存在名為 :file:`conf.json` "
"的文件中，則可以使用如下程式碼加載和呼叫它："

#: ../../whatsnew/3.2.rst:230
#, fuzzy
msgid ":pep:`391` - Dictionary Based Configuration for Logging"
msgstr ":pep:`391` - 基於字典的日誌記錄配置"

#: ../../whatsnew/3.2.rst:231
msgid "PEP written by Vinay Sajip."
msgstr "由 Vinay Sajip 撰寫 PEP。"

#: ../../whatsnew/3.2.rst:235
#, fuzzy
msgid "PEP 3148:  The ``concurrent.futures`` module"
msgstr "PEP 3148：``concurrent.futures`` 模組"

#: ../../whatsnew/3.2.rst:237
#, fuzzy
msgid ""
"Code for creating and managing concurrency is being collected in a new top-"
"level namespace, *concurrent*.  Its first member is a *futures* package "
"which provides a uniform high-level interface for managing threads and "
"processes."
msgstr ""
"用於建立和管理並發的程式碼被收集在一個新的頂級命名空間 *concurrent* 中。"
"它的第一個成員是一個 *futures* "
"包，它提供了一個統一的高階介面來管理執行緒和行程。"

#: ../../whatsnew/3.2.rst:241
#, fuzzy
msgid ""
"The design for :mod:`concurrent.futures` was inspired by the *java.util."
"concurrent* package.  In that model, a running call and its result are "
"represented by a :class:`~concurrent.futures.Future` object that abstracts "
"features common to threads, processes, and remote procedure calls.  That "
"object supports status checks (running or done), timeouts, cancellations, "
"adding callbacks, and access to results or exceptions."
msgstr ""
":mod:`concurrent.futures` 的設計靈感來自 *java.util.concurrent* "
"包。在該模型中，運行中的呼叫及其結果由 :class:`~concurrent.futures.Future` 物"
"件表示，該物件抽象了執行緒、行程和遠程過程呼叫的通用特徵。該物件支援狀態檢查"
"（運行或完成）、超時、取消、新增回呼以及對結果或例外的訪問。"

#: ../../whatsnew/3.2.rst:248
#, fuzzy
msgid ""
"The primary offering of the new module is a pair of executor classes for "
"launching and managing calls.  The goal of the executors is to make it "
"easier to use existing tools for making parallel calls. They save the effort "
"needed to setup a pool of resources, launch the calls, create a results "
"queue, add time-out handling, and limit the total number of threads, "
"processes, or remote procedure calls."
msgstr ""
"新模組的主要產品是一對用於啟動和管理呼叫的執行器類。執行器的目標是使使用現有"
"工具進行並行呼叫變得更加容易。它們節省了設定資源池、啟動呼叫、建立結果隊列、"
"新增超時處理以及限制執行緒、行程或遠程過程呼叫的總數所需的工作。"

#: ../../whatsnew/3.2.rst:255
#, fuzzy
msgid ""
"Ideally, each application should share a single executor across multiple "
"components so that process and thread limits can be centrally managed.  This "
"solves the design challenge that arises when each component has its own "
"competing strategy for resource management."
msgstr ""
"理想情況下，每個應用程式都應該跨多個組件共享一個執行程式，以便可以集中管理行"
"程和執行緒限制。這解決了當每個組件都有自己的資源管理競爭策略時出現的設計挑戰"
"。"

#: ../../whatsnew/3.2.rst:260
#, fuzzy
msgid ""
"Both classes share a common interface with three methods: :meth:`~concurrent."
"futures.Executor.submit` for scheduling a callable and returning a :class:"
"`~concurrent.futures.Future` object; :meth:`~concurrent.futures.Executor."
"map` for scheduling many asynchronous calls at a time, and :meth:"
"`~concurrent.futures.Executor.shutdown` for freeing resources.  The class is "
"a :term:`context manager` and can be used in a :keyword:`with` statement to "
"assure that resources are automatically released when currently pending "
"futures are done executing."
msgstr ""
"這兩個類共享一個具有三種方法的公開介面： :meth:`~concurrent.futures.Executor."
"map` 用於一次調度多個非同步呼叫，而 :meth:`~concurrent.futures.Executor."
"shutdown` 用於釋放資源。該類是一個 :term:`context manager`，可以在 "
":keyword:`with` 語句中使用，以確保在當前掛起的期貨完成執行時自動釋放資源。"

#: ../../whatsnew/3.2.rst:269
#, fuzzy
msgid ""
"A simple of example of :class:`~concurrent.futures.ThreadPoolExecutor` is a "
"launch of four parallel threads for copying files::"
msgstr ""
":class:`~concurrent.futures.ThreadPoolExecutor` "
"的一個簡單示例是啟動四個並行執行緒來複製文件::"

#: ../../whatsnew/3.2.rst:282
#, fuzzy
msgid ":pep:`3148` - Futures -- Execute Computations Asynchronously"
msgstr ":pep:`3148` - 期貨——非同步執行計算"

#: ../../whatsnew/3.2.rst:282
msgid "PEP written by Brian Quinlan."
msgstr "由 Brian Quinlan 撰寫 PEP。"

#: ../../whatsnew/3.2.rst:284
#, fuzzy
msgid ""
":ref:`Code for Threaded Parallel URL reads<threadpoolexecutor-example>`, an "
"example using threads to fetch multiple web pages in parallel."
msgstr ""
":ref:`執行緒並行 URL 的程式碼讀取 <threadpoolexecutor-"
"example>`，一個使用執行緒並行獲取多個網頁的示例。"

#: ../../whatsnew/3.2.rst:287
#, fuzzy
msgid ""
":ref:`Code for computing prime numbers in parallel<processpoolexecutor-"
"example>`, an example demonstrating :class:`~concurrent.futures."
"ProcessPoolExecutor`."
msgstr ""
":ref:`並行計算質數的程式碼<processpoolexecutor-example>`，一個演示 "
":class:`~concurrent.futures.ProcessPoolExecutor` 的示例。"

#: ../../whatsnew/3.2.rst:293
#, fuzzy
msgid "PEP 3147:  PYC Repository Directories"
msgstr "PEP 3147：PYC 儲存庫目錄"

#: ../../whatsnew/3.2.rst:295
#, fuzzy
msgid ""
"Python's scheme for caching bytecode in *.pyc* files did not work well in "
"environments with multiple Python interpreters.  If one interpreter "
"encountered a cached file created by another interpreter, it would recompile "
"the source and overwrite the cached file, thus losing the benefits of "
"caching."
msgstr ""
"Python 在 *.pyc* 文件中快取位元組碼的方案在具有多個 Python 直譯器的環境中效果"
"不佳。如果一個直譯器遇到另一個直譯器建立的快取文件，它將重新編譯源程式碼並覆"
"蓋快取文件，從而失去快取的好處。"

#: ../../whatsnew/3.2.rst:300
#, fuzzy
msgid ""
"The issue of \"pyc fights\" has become more pronounced as it has become "
"commonplace for Linux distributions to ship with multiple versions of "
"Python. These conflicts also arise with CPython alternatives such as Unladen "
"Swallow."
msgstr ""
"“pyc 打架”的問題變得更加明顯，因為 Linux 發行版隨附多個版本的 Python "
"已變得司空見慣。這些衝突也出現在 CPython 替代品中，例如 Unladen Swallow。"

#: ../../whatsnew/3.2.rst:304
#, fuzzy
msgid ""
"To solve this problem, Python's import machinery has been extended to use "
"distinct filenames for each interpreter.  Instead of Python 3.2 and Python "
"3.3 and Unladen Swallow each competing for a file called \"mymodule.pyc\", "
"they will now look for \"mymodule.cpython-32.pyc\", \"mymodule.cpython-33.pyc"
"\", and \"mymodule.unladen10.pyc\".  And to prevent all of these new files "
"from cluttering source directories, the *pyc* files are now collected in a "
"\"__pycache__\" directory stored under the package directory."
msgstr ""
"為了解決這個問題，Python 的導入機制已經擴充為為每個直譯器使用不同的文件名。 "
"Python 3.2 和 Python 3.3 以及 Unladen Swallow 不再各自競爭名為“mymodule."
"pyc”的文件，它們現在將尋找“mymodule.cpython-32.pyc”、“mymodule.cpython-33."
"pyc”和 ``mymodule``  .unladen10.pyc”。為了防止所有這些新文件弄亂源目錄，*pyc* "
"文件現在收集在儲存在包目錄下的“__pycache__”目錄中。"

#: ../../whatsnew/3.2.rst:312
#, fuzzy
msgid ""
"Aside from the filenames and target directories, the new scheme has a few "
"aspects that are visible to the programmer:"
msgstr "除了文件名和目標目錄之外，新方案還有幾個對程式員可見的方面："

#: ../../whatsnew/3.2.rst:315
#, fuzzy
msgid ""
"Imported modules now have a :attr:`__cached__` attribute which stores the "
"name of the actual file that was imported:"
msgstr "導入的模組現在有一個 :attr:`__cached__` 屬性，它儲存導入的實際文件的名稱："

#: ../../whatsnew/3.2.rst:322
#, fuzzy
msgid ""
"The tag that is unique to each interpreter is accessible from the :mod:`imp` "
"module:"
msgstr "可以從 :mod:`imp` 模組訪問每個直譯器唯一的標籤："

#: ../../whatsnew/3.2.rst:329
#, fuzzy
msgid ""
"Scripts that try to deduce source filename from the imported file now need "
"to be smarter.  It is no longer sufficient to simply strip the \"c\" from a "
"\".pyc\" filename.  Instead, use the new functions in the :mod:`imp` module:"
msgstr ""
"嘗試從導入文件中推斷源文件名的腳本現在需要更智能。僅僅從“."
"pyc”文件名中去掉 ``c``已經不夠了。相反，使用 :mod:`imp` 模組中的新函式："

#: ../../whatsnew/3.2.rst:338
#, fuzzy
msgid ""
"The :mod:`py_compile` and :mod:`compileall` modules have been updated to "
"reflect the new naming convention and target directory.  The command-line "
"invocation of *compileall* has new options: ``-i`` for specifying a list of "
"files and directories to compile and ``-b`` which causes bytecode files to "
"be written to their legacy location rather than *__pycache__*."
msgstr ""
":mod:`py_compile` 和 :mod:`compileall` "
"模組已更新以反映新的命名約定和目標目錄。 *compileall* "
"的命令列呼叫有新選項：``-i`` 用於指定要編譯的文件和目錄列表，``-b`` "
"導致位元組碼文件寫入其遺留位置而不是 * __pycache__*。"

#: ../../whatsnew/3.2.rst:345
#, fuzzy
msgid ""
"The :mod:`importlib.abc` module has been updated with new :term:`abstract "
"base classes <abstract base class>` for loading bytecode files.  The "
"obsolete ABCs, :class:`~importlib.abc.PyLoader` and :class:`~importlib.abc."
"PyPycLoader`, have been deprecated (instructions on how to stay Python 3.1 "
"compatible are included with the documentation)."
msgstr ""
":mod:`importlib.abc` 模組已使用新的 :term:`abstract base classes <abstract "
"base class>` 更新，用於加載位元組碼文件。過時的 ABCs :class:`~importlib.abc."
"PyLoader` 和 :class:`~importlib.abc.PyPycLoader` 已被棄用（有關如何保持 "
"Python 3.1 相容的說明包含在文檔中）。"

#: ../../whatsnew/3.2.rst:353
#, fuzzy
msgid ":pep:`3147` - PYC Repository Directories"
msgstr ":pep:`3147` - PYC 儲存庫目錄"

#: ../../whatsnew/3.2.rst:354 ../../whatsnew/3.2.rst:385
msgid "PEP written by Barry Warsaw."
msgstr "由 Barry Warsaw 撰寫 PEP。"

#: ../../whatsnew/3.2.rst:358
#, fuzzy
msgid "PEP 3149: ABI Version Tagged .so Files"
msgstr "PEP 3149：ABI 版本標記的 .so 文件"

#: ../../whatsnew/3.2.rst:360
#, fuzzy
msgid ""
"The PYC repository directory allows multiple bytecode cache files to be co-"
"located.  This PEP implements a similar mechanism for shared object files by "
"giving them a common directory and distinct names for each version."
msgstr "PYC 儲存庫目錄允許將多個位元組碼快取文件放在一起。這個 PEP "
"通過為每個版本提供一個公開目錄和不同的名稱來實作共享物件文件的類似機制。"

#: ../../whatsnew/3.2.rst:364
#, fuzzy
msgid ""
"The common directory is \"pyshared\" and the file names are made distinct by "
"identifying the Python implementation (such as CPython, PyPy, Jython, etc.), "
"the major and minor version numbers, and optional build flags (such as \"d\" "
"for debug, \"m\" for pymalloc, \"u\" for wide-unicode).  For an arbitrary "
"package \"foo\", you may see these files when the distribution package is "
"installed::"
msgstr ""
"公開目錄是 ``pyshared`` ，文件名通過識別 Python 實作（例如 CPython、PyPy、Jython "
"等）、主要和次要版本號以及可選的構建旗標（例如 ``d``代表除錯， ``m``代表 "
"pymalloc， ``u``代表 wide-"
"unicode）。對於任意包 ``foo``，您可能會在安裝分發包時看到這些文件："

#: ../../whatsnew/3.2.rst:373
#, fuzzy
msgid ""
"In Python itself, the tags are accessible from functions in the :mod:"
"`sysconfig` module::"
msgstr "在 Python 本身中，標籤可以從 :mod:`sysconfig` 模組中的函式訪問："

#: ../../whatsnew/3.2.rst:384
#, fuzzy
msgid ":pep:`3149` - ABI Version Tagged .so Files"
msgstr ":pep:`3149` - ABI 版本標記的 .so 文件"

#: ../../whatsnew/3.2.rst:389
#, fuzzy
msgid "PEP 3333: Python Web Server Gateway Interface v1.0.1"
msgstr "PEP 3333：Python Web 伺服器網關介面 v1.0.1"

#: ../../whatsnew/3.2.rst:391
#, fuzzy
msgid ""
"This informational PEP clarifies how bytes/text issues are to be handled by "
"the WSGI protocol.  The challenge is that string handling in Python 3 is "
"most conveniently handled with the :class:`str` type even though the HTTP "
"protocol is itself bytes oriented."
msgstr ""
"此資訊性 PEP 闡明了 WSGI 協定如何處理位元組/文本問題。挑戰在於 Python 3 "
"中的字串處理最方便地使用 :class:`str` 型別，即使 HTTP "
"協定本身是面向位元組的。"

#: ../../whatsnew/3.2.rst:396
#, fuzzy
msgid ""
"The PEP differentiates so-called *native strings* that are used for request/"
"response headers and metadata versus *byte strings* which are used for the "
"bodies of requests and responses."
msgstr "PEP 區分了用於請求/響應標頭和元資料的所謂的 *native strings* "
"與用於請求和響應主體的 *byte strings*。"

#: ../../whatsnew/3.2.rst:400
#, fuzzy
msgid ""
"The *native strings* are always of type :class:`str` but are restricted to "
"code points between *U+0000* through *U+00FF* which are translatable to "
"bytes using *Latin-1* encoding.  These strings are used for the keys and "
"values in the environment dictionary and for response headers and statuses "
"in the :func:`start_response` function.  They must follow :rfc:`2616` with "
"respect to encoding. That is, they must either be *ISO-8859-1* characters or "
"use :rfc:`2047` MIME encoding."
msgstr ""
"*本機字串* 始終為 :class:`str` 型別，但僅限於 *U+0000* 到 *U+00FF* "
"之間的程式碼點，這些程式碼點可使用 *Latin-1* 編碼轉換為位元組。"
"這些字串用於環境字典中的鍵和值以及 :func:`start_response` "
"函式中的響應標頭和狀態。關於編碼，它們必須遵循 :rfc:`2616`。也就是說，"
"它們必須是 *ISO-8859-1* 字元或使用 :rfc:`2047` MIME 編碼。"

#: ../../whatsnew/3.2.rst:408
#, fuzzy
msgid ""
"For developers porting WSGI applications from Python 2, here are the salient "
"points:"
msgstr "對於從 Python 2 移植 WSGI 應用程式的開發人員，以下是要點："

#: ../../whatsnew/3.2.rst:411
#, fuzzy
msgid ""
"If the app already used strings for headers in Python 2, no change is needed."
msgstr "如果應用程式已在 Python 2 中使用標頭字串，則無需更改。"

#: ../../whatsnew/3.2.rst:413
#, fuzzy
msgid ""
"If instead, the app encoded output headers or decoded input headers, then "
"the headers will need to be re-encoded to Latin-1.  For example, an output "
"header encoded in utf-8 was using ``h.encode('utf-8')`` now needs to convert "
"from bytes to native strings using ``h.encode('utf-8').decode('latin-1')``."
msgstr ""
"相反，如果應用程式編碼輸出標頭或解碼輸入標頭，則需要將標頭重新編碼為 "
"Latin-1。例如，使用 ``h.encode('utf-8')`` 以 utf-8 "
"編碼的輸出標頭現在需要使用 ``h.encode('utf-8') "
"從位元組轉換為本機字串。解碼（'latin-1'）``。"

#: ../../whatsnew/3.2.rst:418
#, fuzzy
msgid ""
"Values yielded by an application or sent using the :meth:`write` method must "
"be byte strings.  The :func:`start_response` function and environ must use "
"native strings.  The two cannot be mixed."
msgstr ""
"應用程式生成的值或使用 write 方法發送的值必須是位元組字串。 "
":func:`start_response` 函式和環境必須使用原生字串。兩者不能混用。"

#: ../../whatsnew/3.2.rst:422
#, fuzzy
msgid ""
"For server implementers writing CGI-to-WSGI pathways or other CGI-style "
"protocols, the users must to be able access the environment using native "
"strings even though the underlying platform may have a different "
"convention.  To bridge this gap, the :mod:`wsgiref` module has a new "
"function, :func:`wsgiref.handlers.read_environ` for transcoding CGI "
"variables from :attr:`os.environ` into native strings and returning a new "
"dictionary."
msgstr ""
"對於編寫 CGI 到 WSGI 路徑或其他 CGI 樣式協定的伺服器實施者，使用者必須能夠使"
"用本機字串訪問環境，即使底層平台可能有不同的約定。為了彌合這一差距，:mod:`wsg"
"iref` 模組有一個新函式 :func:`wsgiref.handlers.read_environ` 用於將 CGI "
"變數從 :attr:`os.environ` 轉碼為本機字串並回傳一個新字典。"

#: ../../whatsnew/3.2.rst:431
#, fuzzy
msgid ":pep:`3333` - Python Web Server Gateway Interface v1.0.1"
msgstr ":pep:`3333` - Python Web 伺服器網關介面 v1.0.1"

#: ../../whatsnew/3.2.rst:432
msgid "PEP written by Phillip Eby."
msgstr "由 Phillip Eby 撰寫 PEP。"

#: ../../whatsnew/3.2.rst:436
#, fuzzy
msgid "Other Language Changes"
msgstr "其他語言變化"

#: ../../whatsnew/3.2.rst:438
#, fuzzy
msgid "Some smaller changes made to the core Python language are:"
msgstr "對核心 Python 語言所做的一些較小的更改是："

#: ../../whatsnew/3.2.rst:440
#, fuzzy
msgid ""
"String formatting for :func:`format` and :meth:`str.format` gained new "
"capabilities for the format character **#**.  Previously, for integers in "
"binary, octal, or hexadecimal, it caused the output to be prefixed with "
"'0b', '0o', or '0x' respectively.  Now it can also handle floats, complex, "
"and Decimal, causing the output to always have a decimal point even when no "
"digits follow it."
msgstr ""
":func:`format` 和 :meth:`str.format` 的字串格式化獲得了格式字元 **#** 的新功"
"能。以前，對於二進位、八進位或十六進位的整數，它會導致輸出分別以 ``0b``、 ``0o``或“"
"0x”為前綴。現在它還可以處理浮點數、複數和小數，導致輸出始終有一個小數點，即使"
"後面沒有數字。"

#: ../../whatsnew/3.2.rst:452
#, fuzzy
msgid ""
"(Suggested by Mark Dickinson and implemented by Eric Smith in :issue:`7094`.)"
msgstr "（由 Mark Dickinson 建議並由 Eric Smith 在 :issue:`7094` 中實作。）"

#: ../../whatsnew/3.2.rst:454
#, fuzzy
msgid ""
"There is also a new :meth:`str.format_map` method that extends the "
"capabilities of the existing :meth:`str.format` method by accepting "
"arbitrary :term:`mapping` objects.  This new method makes it possible to use "
"string formatting with any of Python's many dictionary-like objects such as :"
"class:`~collections.defaultdict`, :class:`~shelve.Shelf`, :class:"
"`~configparser.ConfigParser`, or :mod:`dbm`.  It is also useful with custom :"
"class:`dict` subclasses that normalize keys before look-up or that supply a :"
"meth:`__missing__` method for unknown keys::"
msgstr ""
"還有一個新的 :meth:`str.format_map` 方法通過接受任意 :term:`mapping` "
"物件來擴充現有 :meth:`str.format` 方法的功能。這種新方法可以將字串格式與 "
"Python 的許多類似字典的對像中的任何一個一起使用，例如 :class:`~collections."
"defaultdict`、:class:`~shelve.Shelf`、:class:`~configparser.ConfigParser` , "
"或 :mod:`dbm`。它對於自定義 dict 子類別也很有用，"
"這些子類別在查找之前規範化鍵或者為未知鍵提供 :meth:`__missing__` 方法::"

#: ../../whatsnew/3.2.rst:481
#, fuzzy
msgid ""
"(Suggested by Raymond Hettinger and implemented by Eric Smith in :issue:"
"`6081`.)"
msgstr "（由 Raymond Hettinger 建議並由 Eric Smith 在 :issue:`6081` 中實作。）"

#: ../../whatsnew/3.2.rst:484
#, fuzzy
msgid ""
"The interpreter can now be started with a quiet option, ``-q``, to prevent "
"the copyright and version information from being displayed in the "
"interactive mode.  The option can be introspected using the :attr:`sys."
"flags` attribute:"
msgstr ""
"直譯器現在可以用一個安靜的選項啟動，``-q``，以防止在交互模式下顯示版權和版本"
"資訊。可以使用 :attr:`sys.flags` 屬性自省該選項："

#: ../../whatsnew/3.2.rst:496
#, fuzzy
msgid "(Contributed by Marcin Wojdyr in :issue:`1772833`)."
msgstr "（由 Marcin Wojdyr 在 :issue:`1772833` 中貢獻）。"

#: ../../whatsnew/3.2.rst:498
#, fuzzy
msgid ""
"The :func:`hasattr` function works by calling :func:`getattr` and detecting "
"whether an exception is raised.  This technique allows it to detect methods "
"created dynamically by :meth:`__getattr__` or :meth:`__getattribute__` which "
"would otherwise be absent from the class dictionary.  Formerly, *hasattr* "
"would catch any exception, possibly masking genuine errors.  Now, *hasattr* "
"has been tightened to only catch :exc:`AttributeError` and let other "
"exceptions pass through::"
msgstr ""
":func:`hasattr` 函式通過呼叫 :func:`getattr` 並檢測是否引發例外來工作。"
"這種技術允許它檢測由 :meth:`__getattr__` 或 :meth:`__getattribute__` "
"動態建立的方法，否則這些方法將不存在於類字典中。以前，*hasattr* "
"會捕獲任何例外，可能會掩蓋真正的錯誤。現在，*hasattr* 已被收緊以僅捕獲 "
":exc:`AttributeError` 並讓其他例外通過::"

#: ../../whatsnew/3.2.rst:517
#, fuzzy
msgid ""
"(Discovered by Yury Selivanov and fixed by Benjamin Peterson; :issue:`9666`.)"
msgstr "（由 Yury Selivanov 發現並由 Benjamin Peterson 修復；:issue:`9666`。）"

#: ../../whatsnew/3.2.rst:519
#, fuzzy
msgid ""
"The :func:`str` of a float or complex number is now the same as its :func:"
"`repr`. Previously, the :func:`str` form was shorter but that just caused "
"confusion and is no longer needed now that the shortest possible :func:"
"`repr` is displayed by default:"
msgstr ""
"浮點數或複數的 :func:`str` 現在與其 :func:`repr` 相同。以前，:func:`str` 形式"
"較短，但這只會造成混淆，現在不再需要了，因為預設情況下會顯示最短的 :func:`repr"
"`："

#: ../../whatsnew/3.2.rst:530
#, fuzzy
msgid "(Proposed and implemented by Mark Dickinson; :issue:`9337`.)"
msgstr "（由 Mark Dickinson 提出並實施；:issue:`9337`。）"

#: ../../whatsnew/3.2.rst:532
#, fuzzy
msgid ""
":class:`memoryview` objects now have a :meth:`~memoryview.release()` method "
"and they also now support the context management protocol.  This allows "
"timely release of any resources that were acquired when requesting a buffer "
"from the original object."
msgstr ""
":class:`memoryview` 物件現在有一個 :meth:`~memoryview.release()` 方法，它們現"
"在還支援上下文管理協定。這允許及時釋放從原始物件請求緩衝區時獲取的任何資源。"

#: ../../whatsnew/3.2.rst:541
#, fuzzy
msgid "(Added by Antoine Pitrou; :issue:`9757`.)"
msgstr "（由 Antoine Pitrou 新增；:issue:`9757`。）"

#: ../../whatsnew/3.2.rst:543
#, fuzzy
msgid ""
"Previously it was illegal to delete a name from the local namespace if it "
"occurs as a free variable in a nested block::"
msgstr "以前，如果名稱作為嵌套塊中的自由變數出現，則從本地名稱空間中刪除該名稱是非法"
"的::"

#: ../../whatsnew/3.2.rst:552
#, fuzzy
msgid ""
"This is now allowed.  Remember that the target of an :keyword:`except` "
"clause is cleared, so this code which used to work with Python 2.6, raised "
"a :exc:`SyntaxError` with Python 3.1 and now works again::"
msgstr ""
"現在允許這樣做。請記住，:keyword:`except` 子句的目標已被清除，因此這段用於 "
"Python 2.6 的程式碼在 Python 3.1 "
"中引發了一個 :exc:`SyntaxError`，現在又可以工作了::"

#: ../../whatsnew/3.2.rst:565
msgid "(See :issue:`4617`.)"
msgstr "（請見 :issue:`4617`\\ 。）"

#: ../../whatsnew/3.2.rst:567
#, fuzzy
msgid ""
"The internal :c:type:`structsequence` tool now creates subclasses of tuple. "
"This means that C structures like those returned by :func:`os.stat`, :func:"
"`time.gmtime`, and :attr:`sys.version_info` now work like a :term:`named "
"tuple` and now work with functions and methods that expect a tuple as an "
"argument.  This is a big step forward in making the C structures as flexible "
"as their pure Python counterparts:"
msgstr ""
"內部 :c:type:`structsequence` 工具現在建立元組的子類別。這意味著像 :func:`os."
"stat`、:func:`time.gmtime` 和 :attr:`sys.version_info` 回傳的 C 結構現在像 "
":term:`named tuple` 一樣工作具有期望元組作為參數的函式和方法。這是使 C "
"結構與純 Python 結構一樣靈活的一大進步："

#: ../../whatsnew/3.2.rst:580
#, fuzzy
msgid ""
"(Suggested by Arfrever Frehtes Taifersar Arahesis and implemented by "
"Benjamin Peterson in :issue:`8413`.)"
msgstr ""
"（由 Arfrever Frehtes Taifersar Arahesis 建議並由 Benjamin Peterson 在 "
":issue:`8413` 中實施。）"

#: ../../whatsnew/3.2.rst:583
#, fuzzy
msgid ""
"Warnings are now easier to control using the :envvar:`PYTHONWARNINGS` "
"environment variable as an alternative to using ``-W`` at the command line:"
msgstr "現在使用 PYTHONWARNINGS 環境變數可以更輕鬆地控制警告，作為在命令列中使用 "
"``-W`` 的替代方法："

#: ../../whatsnew/3.2.rst:590
#, fuzzy
msgid ""
"(Suggested by Barry Warsaw and implemented by Philip Jenvey in :issue:"
"`7301`.)"
msgstr "（由 Barry Warsaw 建議並由 Philip Jenvey 在 :issue:`7301` 中實作。）"

#: ../../whatsnew/3.2.rst:592
#, fuzzy
msgid ""
"A new warning category, :exc:`ResourceWarning`, has been added.  It is "
"emitted when potential issues with resource consumption or cleanup are "
"detected.  It is silenced by default in normal release builds but can be "
"enabled through the means provided by the :mod:`warnings` module, or on the "
"command line."
msgstr ""
"新增了一個新的警告類別 :exec:`ResourceWarning`。當檢測到資源消耗或清理的潛在問"
"題時，它會被發出。它在正常發布版本中預設是靜音的，但可以通過 :mod:`warnings` "
"模組提供的方式或在命令列上啟用。"

#: ../../whatsnew/3.2.rst:598
#, fuzzy
msgid ""
"A :exc:`ResourceWarning` is issued at interpreter shutdown if the :data:`gc."
"garbage` list isn't empty, and if :attr:`gc.DEBUG_UNCOLLECTABLE` is set, all "
"uncollectable objects are printed.  This is meant to make the programmer "
"aware that their code contains object finalization issues."
msgstr ""
"如果 :data:`gc.garbage` 列表不為空，並且如果 :attr:`gc.DEBUG_UNCOLLECTABLE` "
"已設定，則會在直譯器關閉時發出 :exc:`ResourceWarning`，印出所有無法收集的物件"
"。這是為了讓程式員意識到他們的程式碼包含物件終結問題。"

#: ../../whatsnew/3.2.rst:603
#, fuzzy
msgid ""
"A :exc:`ResourceWarning` is also issued when a :term:`file object` is "
"destroyed without having been explicitly closed.  While the deallocator for "
"such object ensures it closes the underlying operating system resource "
"(usually, a file descriptor), the delay in deallocating the object could "
"produce various issues, especially under Windows.  Here is an example of "
"enabling the warning from the command line:"
msgstr ""
"當 :term:`file object` 在沒有明確關閉的情況下被銷毀時，也會發出 :exc:`Resourc"
"eWarning`。雖然此類物件的釋放器確保它關閉底層操作系統資源（通常是文件描述器）"
"，但釋放物件的延遲可能會產生各種問題，尤其是在 Windows "
"下。以下是從命令列啟用警告的示例："

#: ../../whatsnew/3.2.rst:617
#, fuzzy
msgid ""
"(Added by Antoine Pitrou and Georg Brandl in :issue:`10093` and :issue:"
"`477863`.)"
msgstr ""
"（由 Antoine Pitrou 和 Georg Brandl 在 :issue:`10093` 和 :issue:`477863` "
"中新增。）"

#: ../../whatsnew/3.2.rst:619
#, fuzzy
msgid ""
":class:`range` objects now support *index* and *count* methods. This is part "
"of an effort to make more objects fully implement the :class:`collections."
"Sequence` :term:`abstract base class`.  As a result, the language will have "
"a more uniform API.  In addition, :class:`range` objects now support slicing "
"and negative indices, even with values larger than :attr:`sys.maxsize`.  "
"This makes *range* more interoperable with lists::"
msgstr ""
":class:`range` 物件現在支援 *index* 和 *count* 方法。這是使更多物件完全實作 "
":class:`collections.Sequence` :term:`abstract base class` "
"的努力的一部分。因此，該語言將具有更統一的 API。此外，:class:`range` "
"物件現在支援切片和負索引，即使值大於 :attr:`sys.maxsize`。這使得 *range* "
"與列表的互操作性更強::"

#: ../../whatsnew/3.2.rst:635
#, fuzzy
msgid ""
"(Contributed by Daniel Stutzbach in :issue:`9213`, by Alexander Belopolsky "
"in :issue:`2690`, and by Nick Coghlan in :issue:`10889`.)"
msgstr ""
"（由 Daniel Stutzbach 在 :issue:`9213`、Alexander Belopolsky 在 :issue:`2690`"
" 和 Nick Coghlan 在 :issue:`10889` 中貢獻。）"

#: ../../whatsnew/3.2.rst:638
#, fuzzy
msgid ""
"The :func:`callable` builtin function from Py2.x was resurrected.  It "
"provides a concise, readable alternative to using an :term:`abstract base "
"class` in an expression like ``isinstance(x, collections.Callable)``:"
msgstr ""
"來自 Py2.x 的 :func:`callable` "
"內建函式復活了。它提供了一種簡潔、可讀的替代方法，可以在類似 isinstance(x, "
"collections.Callable) 的表達式中使用抽象基底類別："

#: ../../whatsnew/3.2.rst:647
msgid "(See :issue:`10518`.)"
msgstr "（請見 :issue:`10518`\\ 。）"

#: ../../whatsnew/3.2.rst:649
#, fuzzy
msgid ""
"Python's import mechanism can now load modules installed in directories with "
"non-ASCII characters in the path name.  This solved an aggravating problem "
"with home directories for users with non-ASCII characters in their usernames."
msgstr ""
"Python 的導入機制現在可以加載安裝在路徑名中包含非 ASCII 字元的目錄中的模組。"
"這解決了使用者名中包含非 ASCII 字元的使用者的主目錄的嚴重問題。"

#: ../../whatsnew/3.2.rst:653
#, fuzzy
msgid "(Required extensive work by Victor Stinner in :issue:`9425`.)"
msgstr "（需要 Victor Stinner 在 :issue:`9425` 中做大量工作。）"

#: ../../whatsnew/3.2.rst:657
#, fuzzy
msgid "New, Improved, and Deprecated Modules"
msgstr "新的、改進的和棄用的模組"

#: ../../whatsnew/3.2.rst:659
#, fuzzy
msgid ""
"Python's standard library has undergone significant maintenance efforts and "
"quality improvements."
msgstr "Python 的標準庫經歷了重大的維護工作和質量改進。"

#: ../../whatsnew/3.2.rst:662
#, fuzzy
msgid ""
"The biggest news for Python 3.2 is that the :mod:`email` package, :mod:"
"`mailbox` module, and :mod:`nntplib` modules now work correctly with the "
"bytes/text model in Python 3.  For the first time, there is correct handling "
"of messages with mixed encodings."
msgstr ""
"Python 3.2 最大的新聞是 :mod:`email` 包、:mod:`mailbox` 模組和 :mod:`nntplib` "
"模組現在可以在 Python 3 "
"中正確地使用位元組/文本模型。這是第一次，可以正確處理混合編碼的消息。"

#: ../../whatsnew/3.2.rst:667
#, fuzzy
msgid ""
"Throughout the standard library, there has been more careful attention to "
"encodings and text versus bytes issues.  In particular, interactions with "
"the operating system are now better able to exchange non-ASCII data using "
"the Windows MBCS encoding, locale-aware encodings, or UTF-8."
msgstr ""
"在整個標準庫中，人們更加關注編碼和文本與位元組問題。特別是，"
"與操作系統的交互現在能夠使用 Windows MBCS 編碼、區域設定感知編碼或 UTF-8 "
"更好地交換非 ASCII 資料。"

#: ../../whatsnew/3.2.rst:672
#, fuzzy
msgid ""
"Another significant win is the addition of substantially better support for "
"*SSL* connections and security certificates."
msgstr "另一個重要的勝利是增加了對 *SSL* 連接和安全證書的更好支援。"

#: ../../whatsnew/3.2.rst:675
#, fuzzy
msgid ""
"In addition, more classes now implement a :term:`context manager` to support "
"convenient and reliable resource clean-up using a :keyword:`with` statement."
msgstr "此外，更多類現在實作了上下文管理器，以支援使用 :keyword:`with` "
"語句進行方便可靠的資源清理。"

#: ../../whatsnew/3.2.rst:679
msgid "email"
msgstr "email"

#: ../../whatsnew/3.2.rst:681
#, fuzzy
msgid ""
"The usability of the :mod:`email` package in Python 3 has been mostly fixed "
"by the extensive efforts of R. David Murray.  The problem was that emails "
"are typically read and stored in the form of :class:`bytes` rather than :"
"class:`str` text, and they may contain multiple encodings within a single "
"email.  So, the email package had to be extended to parse and generate email "
"messages in bytes format."
msgstr ""
":mod:`email` 包在 Python 3 中的可用性大部分已通過 R. David Murray "
"的廣泛努力得到修復。問題是電子郵件通常以 bytes 而不是 str 文本的形式讀取和存"
"儲，並且它們可能在一封電子郵件中包含多種編碼。因此，必須擴充電子郵件包以剖析"
"和生成位元組格式的電子郵件消息。"

#: ../../whatsnew/3.2.rst:688
#, fuzzy
msgid ""
"New functions :func:`~email.message_from_bytes` and :func:`~email."
"message_from_binary_file`, and new classes :class:`~email.parser."
"BytesFeedParser` and :class:`~email.parser.BytesParser` allow binary message "
"data to be parsed into model objects."
msgstr ""
"新函式 :func:`~email.message_from_bytes` 和 :func:`~email."
"message_from_binary_file` 以及新類 :class:`~email.parser.BytesFeedParser` 和 "
":class:`~email.parser.BytesParser` 允許二進位要剖析為模型物件的消息資料。"

#: ../../whatsnew/3.2.rst:693
#, fuzzy
msgid ""
"Given bytes input to the model, :meth:`~email.message.Message.get_payload` "
"will by default decode a message body that has a :mailheader:`Content-"
"Transfer-Encoding` of *8bit* using the charset specified in the MIME headers "
"and return the resulting string."
msgstr ""
"給定模型的位元組輸入，:meth:`~email.message.Message.get_payload` "
"將預設使用在MIME 標頭並回傳結果字串。"

#: ../../whatsnew/3.2.rst:698
#, fuzzy
msgid ""
"Given bytes input to the model, :class:`~email.generator.Generator` will "
"convert message bodies that have a :mailheader:`Content-Transfer-Encoding` "
"of *8bit* to instead have a *7bit* :mailheader:`Content-Transfer-Encoding`."
msgstr ""
"給定模型的位元組輸入，:class:`~email.generator.Generator` 會將具有 *8 位* "
"的:mailheader:`Content-Transfer-Encoding` 的郵件正文轉換為 *7 "
"位*:mailheader:`內容傳輸編碼`。"

#: ../../whatsnew/3.2.rst:702
#, fuzzy
msgid ""
"Headers with unencoded non-ASCII bytes are deemed to be :rfc:`2047`\\ -"
"encoded using the *unknown-8bit* character set."
msgstr "帶有未編碼的非 ASCII 位元組的標頭被認為是 :rfc:`2047`\\ 使用 *unknown-8bit* "
"字元集編碼的。"

#: ../../whatsnew/3.2.rst:705
#, fuzzy
msgid ""
"A new class :class:`~email.generator.BytesGenerator` produces bytes as "
"output, preserving any unchanged non-ASCII data that was present in the "
"input used to build the model, including message bodies with a :mailheader:"
"`Content-Transfer-Encoding` of *8bit*."
msgstr ""
"新類 :class:`~email.generator.BytesGenerator` 生成位元組作為輸出，"
"保留用於構建模型的輸入中存在的任何未更改的非 ASCII 資料，包括帶有 Content-"
"Transfer 的消息正文-*8 位* 的編碼`。"

#: ../../whatsnew/3.2.rst:710
#, fuzzy
msgid ""
"The :mod:`smtplib` :class:`~smtplib.SMTP` class now accepts a byte string "
"for the *msg* argument to the :meth:`~smtplib.SMTP.sendmail` method, and a "
"new method, :meth:`~smtplib.SMTP.send_message` accepts a :class:`~email."
"message.Message` object and can optionally obtain the *from_addr* and "
"*to_addrs* addresses directly from the object."
msgstr ""
":mod:`smtplib` :class:`~smtplib.SMTP` 類現在接受 :meth:`~smtplib.SMTP."
"sendmail` 方法的 *msg* 參數的位元組字串，以及一個新方法：meth :`~smtplib.SMTP"
".send_message` 接受一個 :class:`~email.message.Message` 物件，"
"並且可以選擇直接從對像中獲取 *from_addr* 和 *to_addrs* 地址。"

#: ../../whatsnew/3.2.rst:716
#, fuzzy
msgid ""
"(Proposed and implemented by R. David Murray, :issue:`4661` and :issue:"
"`10321`.)"
msgstr "（由 R. David Murray、:issue:`4661` 和 :issue:`10321` 提出並實施。）"

#: ../../whatsnew/3.2.rst:719
msgid "elementtree"
msgstr "elementtree"

#: ../../whatsnew/3.2.rst:721
#, fuzzy
msgid ""
"The :mod:`xml.etree.ElementTree` package and its :mod:`xml.etree."
"cElementTree` counterpart have been updated to version 1.3."
msgstr ""
":mod:`xml.etree.ElementTree` 包及其對應的 :mod:`xml.etree.cElementTree` "
"已更新至 1.3 版。"

#: ../../whatsnew/3.2.rst:724
#, fuzzy
msgid "Several new and useful functions and methods have been added:"
msgstr "新增了幾個新的有用的函式和方法："

#: ../../whatsnew/3.2.rst:726
#, fuzzy
msgid ""
":func:`xml.etree.ElementTree.fromstringlist` which builds an XML document "
"from a sequence of fragments"
msgstr ":func:`xml.etree.ElementTree.fromstringlist` 從一系列片段構建 XML 文檔"

#: ../../whatsnew/3.2.rst:728
#, fuzzy
msgid ""
":func:`xml.etree.ElementTree.register_namespace` for registering a global "
"namespace prefix"
msgstr ":func:`xml.etree.ElementTree.register_namespace` 用於註冊全局命名空間前綴"

#: ../../whatsnew/3.2.rst:730
#, fuzzy
msgid ""
":func:`xml.etree.ElementTree.tostringlist` for string representation "
"including all sublists"
msgstr ":func:`xml.etree.ElementTree.tostringlist` 用於包括所有子列表的字串表示"

#: ../../whatsnew/3.2.rst:732
#, fuzzy
msgid ""
":meth:`xml.etree.ElementTree.Element.extend` for appending a sequence of "
"zero or more elements"
msgstr ":meth:`xml.etree.ElementTree.Element.extend` 用於附加零個或多個元素的序列"

#: ../../whatsnew/3.2.rst:734
#, fuzzy
msgid ""
":meth:`xml.etree.ElementTree.Element.iterfind` searches an element and "
"subelements"
msgstr ":meth:`xml.etree.ElementTree.Element.iterfind` 搜索元素和子元素"

#: ../../whatsnew/3.2.rst:736
#, fuzzy
msgid ""
":meth:`xml.etree.ElementTree.Element.itertext` creates a text iterator over "
"an element and its subelements"
msgstr ":meth:`xml.etree.ElementTree.Element.itertext` "
"在元素及其子元素上建立文本疊代器"

#: ../../whatsnew/3.2.rst:738
#, fuzzy
msgid ""
":meth:`xml.etree.ElementTree.TreeBuilder.end` closes the current element"
msgstr ":meth:`xml.etree.ElementTree.TreeBuilder.end` 關閉當前元素"

#: ../../whatsnew/3.2.rst:739
#, fuzzy
msgid ""
":meth:`xml.etree.ElementTree.TreeBuilder.doctype` handles a doctype "
"declaration"
msgstr ":meth:`xml.etree.ElementTree.TreeBuilder.doctype` 處理文檔型別聲明"

#: ../../whatsnew/3.2.rst:742
#, fuzzy
msgid "Two methods have been deprecated:"
msgstr "兩種方法已被棄用："

#: ../../whatsnew/3.2.rst:744
#, fuzzy
msgid ":meth:`xml.etree.ElementTree.getchildren` use ``list(elem)`` instead."
msgstr ":meth:`xml.etree.ElementTree.getchildren` 使用 ``list(elem)`` 代替。"

#: ../../whatsnew/3.2.rst:745
#, fuzzy
msgid ":meth:`xml.etree.ElementTree.getiterator` use ``Element.iter`` instead."
msgstr ":meth:`xml.etree.ElementTree.getiterator` 使用``Element.iter`` 代替。"

#: ../../whatsnew/3.2.rst:747
#, fuzzy
msgid ""
"For details of the update, see `Introducing ElementTree <https://web.archive."
"org/web/20200703234532/http://effbot.org/zone/elementtree-13-intro.htm>`_ on "
"Fredrik Lundh's website."
msgstr ""
"有關更新的詳細資訊，請參閱 Fredrik Lundh 網站上的“Introducing ElementTree "
"<https://web.archive.org/web/20200703234532/http://effbot.org/zone/"
"elementtree-13-intro.htm>”。"

#: ../../whatsnew/3.2.rst:751
#, fuzzy
msgid "(Contributed by Florent Xicluna and Fredrik Lundh, :issue:`6472`.)"
msgstr "（由 Florent Xicluna 和 Fredrik Lundh 提供，:issue:`6472`。）"

#: ../../whatsnew/3.2.rst:754
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.2.rst:756
#, fuzzy
msgid ""
"The :mod:`functools` module includes a new decorator for caching function "
"calls.  :func:`functools.lru_cache` can save repeated queries to an external "
"resource whenever the results are expected to be the same."
msgstr ""
":mod:`functools` 模組包含一個用於快取函式呼叫的新裝飾器。 :func:`functools."
"lru_cache` 可以在預期結果相同時將重複查詢保存到外部資源。"

#: ../../whatsnew/3.2.rst:760
#, fuzzy
msgid ""
"For example, adding a caching decorator to a database query function can "
"save database accesses for popular searches:"
msgstr "例如，將快取裝飾器新增到資料庫查詢函式可以節省資料庫訪問以進行熱門搜索："

#: ../../whatsnew/3.2.rst:773
#, fuzzy
msgid ""
"To help with choosing an effective cache size, the wrapped function is "
"instrumented for tracking cache statistics:"
msgstr "為了幫助選擇有效的快取大小，包裝函式用於跟踪快取統計資訊："

#: ../../whatsnew/3.2.rst:779
#, fuzzy
msgid ""
"If the phonelist table gets updated, the outdated contents of the cache can "
"be cleared with:"
msgstr "如果 phonelist 表得到更新，快取中的過時內容可以通過以下方式清除："

#: ../../whatsnew/3.2.rst:784
#, fuzzy
msgid ""
"(Contributed by Raymond Hettinger and incorporating design ideas from Jim "
"Baker, Miki Tebeka, and Nick Coghlan; see `recipe 498245 <https://code."
"activestate.com/recipes/498245>`_\\, `recipe 577479 <https://code."
"activestate.com/recipes/577479>`_\\, :issue:`10586`, and :issue:`10593`.)"
msgstr ""
"（由 Raymond Hettinger 提供並結合了 Jim Baker、Miki Tebeka 和 Nick Coghlan "
"的設計理念；參見`recipe 498245 <https://code.activestate.com/recipes/498245>`"
"_\\、`recipe 577479 <https:/ /code.activestate.com/recipes/577479>`_\\, "
":issue:`10586`, and :issue:`10593`。）"

#: ../../whatsnew/3.2.rst:790
#, fuzzy
msgid ""
"The :func:`functools.wraps` decorator now adds a :attr:`__wrapped__` "
"attribute pointing to the original callable function.  This allows wrapped "
"functions to be introspected.  It also copies :attr:`__annotations__` if "
"defined.  And now it also gracefully skips over missing attributes such as :"
"attr:`__doc__` which might not be defined for the wrapped callable."
msgstr ""
":func:`functools.wraps` 裝飾器現在新增了一個 :attr:`__wrapped__` "
"屬性指向原始可呼叫函式。這允許對包裝函式進行內省。如果已定義，它還會復制 "
":attr:`__annotations__`。現在它還可以優雅地跳過缺少的屬性，例如 "
":attr:`__doc__` ，這些屬性可能沒有為包裝的可呼叫物件定義。"

#: ../../whatsnew/3.2.rst:796
#, fuzzy
msgid ""
"In the above example, the cache can be removed by recovering the original "
"function:"
msgstr "在上面的示例中，可以通過恢復原始功能來刪除快取："

#: ../../whatsnew/3.2.rst:801
#, fuzzy
msgid ""
"(By Nick Coghlan and Terrence Cole; :issue:`9567`, :issue:`3445`, and :issue:"
"`8814`.)"
msgstr ""
"（作者：Nick Coghlan 和 Terrence Cole；:issue:`9567`、:issue:`3445` 和 "
":issue:`8814`。）"

#: ../../whatsnew/3.2.rst:804
#, fuzzy
msgid ""
"To help write classes with rich comparison methods, a new decorator :func:"
"`functools.total_ordering` will use existing equality and inequality methods "
"to fill in the remaining methods."
msgstr ""
"為了幫助編寫具有豐富比較方法的類，一個新的裝飾器 functools.total_ordering "
"將使用現有的相等和不等方法來填充剩餘的方法。"

#: ../../whatsnew/3.2.rst:808
#, fuzzy
msgid ""
"For example, supplying *__eq__* and *__lt__* will enable :func:`~functools."
"total_ordering` to fill-in *__le__*, *__gt__* and *__ge__*::"
msgstr ""
"例如，提供 *__eq__* 和 *__lt__* 將使 :func:`~functools.total_ordering` "
"能夠填充 *__le__*、*__gt__* 和 *__ge__*::"

#: ../../whatsnew/3.2.rst:821
#, fuzzy
msgid ""
"With the *total_ordering* decorator, the remaining comparison methods are "
"filled in automatically."
msgstr "使用 *total_ordering* 裝飾器，自動填充剩餘的比較方法。"

#: ../../whatsnew/3.2.rst:824 ../../whatsnew/3.2.rst:836
#: ../../whatsnew/3.2.rst:880 ../../whatsnew/3.2.rst:901
#: ../../whatsnew/3.2.rst:915 ../../whatsnew/3.2.rst:1785
#: ../../whatsnew/3.2.rst:1830
#, fuzzy
msgid "(Contributed by Raymond Hettinger.)"
msgstr "（雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/3.2.rst:826
#, fuzzy
msgid ""
"To aid in porting programs from Python 2, the :func:`functools.cmp_to_key` "
"function converts an old-style comparison function to modern :term:`key "
"function`:"
msgstr "為了幫助從 Python 2 移植程式， functools.cmp_to_key "
"函式將舊式比較函式轉換為現代 key 函式："

#: ../../whatsnew/3.2.rst:833
#, fuzzy
msgid ""
"For sorting examples and a brief sorting tutorial, see the `Sorting HowTo "
"<https://wiki.python.org/moin/HowTo/Sorting/>`_ tutorial."
msgstr ""
"有關排序示例和簡短的排序教程，請參閱`Sorting HowTo <https://wiki.python.org/"
"moin/HowTo/Sorting/>`_ 教程。"

#: ../../whatsnew/3.2.rst:839
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.2.rst:841
#, fuzzy
msgid ""
"The :mod:`itertools` module has a new :func:`~itertools.accumulate` function "
"modeled on APL's *scan* operator and Numpy's *accumulate* function:"
msgstr ""
":mod:`itertools` 模組有一個新的 :func:`~itertools.accumulate` 函式模仿 APL "
"的 *scan* 運算符和 Numpy 的 *accumulate* 函式："

#: ../../whatsnew/3.2.rst:852
#, fuzzy
msgid ""
"For an example using :func:`~itertools.accumulate`, see the :ref:`examples "
"for the random module <random-examples>`."
msgstr ""
"有關使用 :func:`~itertools.accumulate` 的示例，請參閱隨機模組 <random-"
"examples>` 的 :ref:`示例。"

#: ../../whatsnew/3.2.rst:855
#, fuzzy
msgid ""
"(Contributed by Raymond Hettinger and incorporating design suggestions from "
"Mark Dickinson.)"
msgstr "（由 Raymond Hettinger 提供並結合了 Mark Dickinson 的設計建議。）"

#: ../../whatsnew/3.2.rst:859
msgid "collections"
msgstr "collections"

#: ../../whatsnew/3.2.rst:861
#, fuzzy
msgid ""
"The :class:`collections.Counter` class now has two forms of in-place "
"subtraction, the existing *-=* operator for `saturating subtraction <https://"
"en.wikipedia.org/wiki/Saturation_arithmetic>`_ and the new :meth:"
"`~collections.Counter.subtract` method for regular subtraction.  The former "
"is suitable for `multisets <https://en.wikipedia.org/wiki/Multiset>`_ which "
"only have positive counts, and the latter is more suitable for use cases "
"that allow negative counts:"
msgstr ""
":class:`collections.Counter` 類現在有兩種形式的就地減法，現有的 *-=* "
"運算符用於`飽和減法 <https://en.wikipedia.org/wiki/Saturation_arithmetic>`_ "
"和用於常規減法的新 :meth:`~collections.Counter.subtract` 方法。"
"前者適用於只有正數的 `multisets <https://en.wikipedia.org/wiki/"
"Multiset>`_，後者更適合允許負數的用例："

#: ../../whatsnew/3.2.rst:882
#, fuzzy
msgid ""
"The :class:`collections.OrderedDict` class has a new method :meth:"
"`~collections.OrderedDict.move_to_end` which takes an existing key and moves "
"it to either the first or last position in the ordered sequence."
msgstr ""
":class:`collections.OrderedDict` 類有一個新方法 :meth:`~collections."
"OrderedDict.move_to_end` "
"它接受一個現有的鍵並將其移動到有序序列中的第一個或最後一個位置。"

#: ../../whatsnew/3.2.rst:886
#, fuzzy
msgid ""
"The default is to move an item to the last position.  This is equivalent of "
"renewing an entry with ``od[k] = od.pop(k)``."
msgstr "預設是將項目移動到最後一個位置。這相當於用 ``od[k] = od.pop(k)`` "
"更新一個條目。"

#: ../../whatsnew/3.2.rst:889
#, fuzzy
msgid ""
"A fast move-to-end operation is useful for resequencing entries.  For "
"example, an ordered dictionary can be used to track order of access by aging "
"entries from the oldest to the most recently accessed."
msgstr "快速移動到結束操作對於重新排序條目很有用。例如，有序字典可用於通過從最舊到最"
"近訪問的老化條目來跟踪訪問順序。"

#: ../../whatsnew/3.2.rst:903
#, fuzzy
msgid ""
"The :class:`collections.deque` class grew two new methods :meth:"
"`~collections.deque.count` and :meth:`~collections.deque.reverse` that make "
"them more substitutable for :class:`list` objects:"
msgstr ""
":class:`collections.deque` 類增加了兩個新方法 :meth:`~collections.deque."
"count` 和 :meth:`~collections.deque.reverse` 使它們更容易替代 :class:`list` "
"物件:"

#: ../../whatsnew/3.2.rst:918
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.2.rst:920
#, fuzzy
msgid ""
"The :mod:`threading` module has a new :class:`~threading.Barrier` "
"synchronization class for making multiple threads wait until all of them "
"have reached a common barrier point.  Barriers are useful for making sure "
"that a task with multiple preconditions does not run until all of the "
"predecessor tasks are complete."
msgstr ""
":mod:`threading` 模組有一個新的 :class:`~threading.Barrier` 同步類，用於使多個"
"執行緒等待，直到所有執行緒都到達一個共同的障礙點。障礙對於確保具有多個先決條"
"件的任務在所有前置任務完成之前不會運行很有用。"

#: ../../whatsnew/3.2.rst:926
#, fuzzy
msgid ""
"Barriers can work with an arbitrary number of threads.  This is a "
"generalization of a `Rendezvous <https://en.wikipedia.org/wiki/"
"Synchronous_rendezvous>`_ which is defined for only two threads."
msgstr ""
"屏障可以與任意數量的執行緒一起使用。這是`Rendezvous <https://en.wikipedia."
"org/wiki/Synchronous_rendezvous>`_ 的概括，它只為兩個執行緒定義。"

#: ../../whatsnew/3.2.rst:930
#, fuzzy
msgid ""
"Implemented as a two-phase cyclic barrier, :class:`~threading.Barrier` "
"objects are suitable for use in loops.  The separate *filling* and "
"*draining* phases assure that all threads get released (drained) before any "
"one of them can loop back and re-enter the barrier.  The barrier fully "
"resets after each cycle."
msgstr ""
"作為兩相循環屏障實作，:class:`~threading.Barrier` 物件適合在循環中使用。"
"單獨的 *filling* 和 *draining* 階段確保所有執行緒在其中任何一個執行緒回傳並重"
"新進入屏障之前被釋放（耗盡）。屏障在每個循環後完全重置。"

#: ../../whatsnew/3.2.rst:935
#, fuzzy
msgid "Example of using barriers::"
msgstr "使用障礙的示例::"

#: ../../whatsnew/3.2.rst:949
#, fuzzy
msgid ""
"In this example, the barrier enforces a rule that votes cannot be counted at "
"any polling site until all polls are closed.  Notice how a solution with a "
"barrier is similar to one with :meth:`threading.Thread.join`, but the "
"threads stay alive and continue to do work (summarizing ballots) after the "
"barrier point is crossed."
msgstr ""
"在這個例子中，屏障強制執行一個規則，即在所有投票結束之前，不能在任何投票站計"
"算選票。請注意帶有屏障的解決方案與帶有 :meth:`threading.Thread.join` 的解決方"
"案是如何相似的，但是執行緒保持活動狀態並在越過屏障點後繼續工作（匯總選票）。"

#: ../../whatsnew/3.2.rst:955
#, fuzzy
msgid ""
"If any of the predecessor tasks can hang or be delayed, a barrier can be "
"created with an optional *timeout* parameter.  Then if the timeout period "
"elapses before all the predecessor tasks reach the barrier point, all "
"waiting threads are released and a :exc:`~threading.BrokenBarrierError` "
"exception is raised::"
msgstr ""
"如果任何前置任務可能掛起或延遲，則可以使用可選的 *timeout* "
"參數建立屏障。然後，如果在所有前置任務到達障礙點之前超時時間已過，"
"則釋放所有等待執行緒並引發 :exc:`~threading.BrokenBarrierError` 例外::"

#: ../../whatsnew/3.2.rst:971
#, fuzzy
msgid ""
"In this example, the barrier enforces a more robust rule.  If some election "
"sites do not finish before midnight, the barrier times-out and the ballots "
"are sealed and deposited in a queue for later handling."
msgstr "在此示例中，屏障執行更穩健的規則。如果某些選舉站點未在午夜之前完成，則屏障超"
"時並且選票將被密封並放入隊列中以供以後處理。"

#: ../../whatsnew/3.2.rst:975
#, fuzzy
msgid ""
"See `Barrier Synchronization Patterns <https://osl.cs.illinois.edu/media/"
"papers/karmani-2009-barrier_synchronization_pattern.pdf>`_ for more examples "
"of how barriers can be used in parallel computing.  Also, there is a simple "
"but thorough explanation of barriers in `The Little Book of Semaphores "
"<https://greenteapress.com/semaphores/LittleBookOfSemaphores.pdf>`_, "
"*section 3.6*."
msgstr ""
"有關如何在並行計算中使用障礙的更多示例，請參閱“障礙同步模式 <https://osl.cs."
"illinois.edu/media/papers/karmani-2009-barrier_synchronization_pattern."
"pdf>”。此外，在`The Little Book of Semaphores <https://greenteapress.com/"
"semaphores/LittleBookOfSemaphores.pdf>`_，*第 3.6 節* "
"中對障礙進行了簡單而透徹的解釋。"

#: ../../whatsnew/3.2.rst:981
#, fuzzy
msgid ""
"(Contributed by Kristján Valur Jónsson with an API review by Jeffrey Yasskin "
"in :issue:`8777`.)"
msgstr ""
"（由 Kristján Valur Jónsson 貢獻，由 Jeffrey Yasskin 在 :issue:`8777` 進行 "
"API 審查。）"

#: ../../whatsnew/3.2.rst:985
msgid "datetime and time"
msgstr "datetime 和 time"

#: ../../whatsnew/3.2.rst:987
#, fuzzy
msgid ""
"The :mod:`datetime` module has a new type :class:`~datetime.timezone` that "
"implements the :class:`~datetime.tzinfo` interface by returning a fixed UTC "
"offset and timezone name. This makes it easier to create timezone-aware "
"datetime objects::"
msgstr ""
":mod:`datetime` 模組有一個新型別 :class:`~datetime.timezone`，"
"它通過回傳固定的 UTC 偏移量和時區名稱來實作 :class:`~datetime.tzinfo` "
"介面。這使得建立時區感知日期時間對像變得更容易::"

#: ../../whatsnew/3.2.rst:1000
#, fuzzy
msgid ""
"Also, :class:`~datetime.timedelta` objects can now be multiplied by :class:"
"`float` and divided by :class:`float` and :class:`int` objects. And :class:"
"`~datetime.timedelta` objects can now divide one another."
msgstr ""
"此外，:class:`~datetime.timedelta` 物件現在可以乘以 :class:`float` "
"並除以 :class:`float` 和 :class:`int` 物件。 :class:`~datetime.timedelta` "
"物件現在可以相互分割。"

#: ../../whatsnew/3.2.rst:1004
#, fuzzy
msgid ""
"The :meth:`datetime.date.strftime` method is no longer restricted to years "
"after 1900.  The new supported year range is from 1000 to 9999 inclusive."
msgstr ""
":meth:`datetime.date.strftime` 方法不再局限於 1900 年之後的年份。"
"新支援的年份範圍是從 1000 到 9999（含）。"

#: ../../whatsnew/3.2.rst:1007
#, fuzzy
msgid ""
"Whenever a two-digit year is used in a time tuple, the interpretation has "
"been governed by :attr:`time.accept2dyear`.  The default is ``True`` which "
"means that for a two-digit year, the century is guessed according to the "
"POSIX rules governing the ``%y`` strptime format."
msgstr ""
"每當在時間元組中使用兩位數的年份時，解釋都由 :attr:`time.accept2dyear` "
"控制。預設值為 ``True``，這意味著對於兩位數的年份，根據管理“%y”strptime 格式的 "
"POSIX 規則猜測世紀。"

#: ../../whatsnew/3.2.rst:1012
#, fuzzy
msgid ""
"Starting with Py3.2, use of the century guessing heuristic will emit a :exc:"
"`DeprecationWarning`.  Instead, it is recommended that :attr:`time."
"accept2dyear` be set to ``False`` so that large date ranges can be used "
"without guesswork::"
msgstr ""
"從 Py3.2 開始，使用世紀猜測啟發式將發出一個 DeprecationWarning。相反，建議將 "
":attr:`time.accept2dyear` 設定為 ``False`` "
"以便無需猜測即可使用較大的日期範圍::"

#: ../../whatsnew/3.2.rst:1031
#, fuzzy
msgid ""
"Several functions now have significantly expanded date ranges.  When :attr:"
"`time.accept2dyear` is false, the :func:`time.asctime` function will accept "
"any year that fits in a C int, while the :func:`time.mktime` and :func:`time."
"strftime` functions will accept the full range supported by the "
"corresponding operating system functions."
msgstr ""
"幾個函式現在已經顯著擴充了日期範圍。當 :attr:`time.accept2dyear` 為 false "
"時，:func:`time.asctime` 函式將接受適合 C int 的任何年份，而 :func:`time."
"mktime` 和 :func:`time. strftime` 函式將接受相應操作系統函式支援的全部範圍。"

#: ../../whatsnew/3.2.rst:1037
#, fuzzy
msgid ""
"(Contributed by Alexander Belopolsky and Victor Stinner in :issue:"
"`1289118`, :issue:`5094`, :issue:`6641`, :issue:`2706`, :issue:`1777412`, :"
"issue:`8013`, and :issue:`10827`.)"
msgstr ""
"（由 Alexander Belopolsky 和 Victor Stinner 在 :issue:`1289118`"
", :issue:`5094`, :issue:`6641`, :issue:`2706`, :issue:`1777412`, "
":issue:`8013` 中貢獻，和 :issue:`10827`。）"

#: ../../whatsnew/3.2.rst:1044
msgid "math"
msgstr "math"

#: ../../whatsnew/3.2.rst:1046
#, fuzzy
msgid ""
"The :mod:`math` module has been updated with six new functions inspired by "
"the C99 standard."
msgstr ":mod:`math` 模組更新了六個受 C99 標準啟發的新函式。"

#: ../../whatsnew/3.2.rst:1049
#, fuzzy
msgid ""
"The :func:`~math.isfinite` function provides a reliable and fast way to "
"detect special values.  It returns ``True`` for regular numbers and "
"``False`` for *Nan* or *Infinity*:"
msgstr ""
":func:`~math.isfinite` 函式提供了一種可靠且快速的方法來檢測特殊值。"
"它為常規數字回傳 ``True``，為 *Nan* 或 *Infinity* 回傳 ``False``："

#: ../../whatsnew/3.2.rst:1057
#, fuzzy
msgid ""
"The :func:`~math.expm1` function computes ``e**x-1`` for small values of *x* "
"without incurring the loss of precision that usually accompanies the "
"subtraction of nearly equal quantities:"
msgstr ":func:`~math.expm1` 函式為 *x* 的小值計算 ``e**x-1`` "
"而不會導致通常伴隨幾乎等量減法的精度損失："

#: ../../whatsnew/3.2.rst:1065
#, fuzzy
msgid ""
"The :func:`~math.erf` function computes a probability integral or `Gaussian "
"error function <https://en.wikipedia.org/wiki/Error_function>`_.  The "
"complementary error function, :func:`~math.erfc`, is ``1 - erf(x)``:"
msgstr ""
":func:`~math.erf` 函式計算概率積分或`高斯誤差函式 <https://en.wikipedia.org/"
"wiki/Error_function>`_。互補誤差函式 :func:`~math.erfc` 是 ``1 - erf(x)``："

#: ../../whatsnew/3.2.rst:1080
#, fuzzy
msgid ""
"The :func:`~math.gamma` function is a continuous extension of the factorial "
"function.  See https://en.wikipedia.org/wiki/Gamma_function for details.  "
"Because the function is related to factorials, it grows large even for small "
"values of *x*, so there is also a :func:`~math.lgamma` function for "
"computing the natural logarithm of the gamma function:"
msgstr ""
":func:`~math.gamma` 函式是階乘函式的連續擴充。有關詳細資訊，請參閱 https://en"
".wikipedia.org/wiki/Gamma_function。因為該函式與階乘有關，即使 *x* "
"的值很小，它也會變大，所以還有一個 :func:`~math.lgamma` "
"函式用於計算伽瑪函式的自然對數："

#: ../../whatsnew/3.2.rst:1092
#, fuzzy
msgid "(Contributed by Mark Dickinson.)"
msgstr "（由馬克·迪金森提供。）"

#: ../../whatsnew/3.2.rst:1095
msgid "abc"
msgstr "abc"

#: ../../whatsnew/3.2.rst:1097
#, fuzzy
msgid ""
"The :mod:`abc` module now supports :func:`~abc.abstractclassmethod` and :"
"func:`~abc.abstractstaticmethod`."
msgstr ""
":mod:`abc` 模組現在支援 :func:`~abc.abstractclassmethod` 和 :func:`~abc."
"abstractstaticmethod`。"

#: ../../whatsnew/3.2.rst:1100
#, fuzzy
msgid ""
"These tools make it possible to define an :term:`abstract base class` that "
"requires a particular :func:`classmethod` or :func:`staticmethod` to be "
"implemented::"
msgstr "這些工具可以定義一個抽象基底類別，它需要一個特定的類方法或靜態方法來實作："

#: ../../whatsnew/3.2.rst:1112
#, fuzzy
msgid "(Patch submitted by Daniel Urban; :issue:`5867`.)"
msgstr "（補丁由 Daniel Urban 提交；:issue:`5867`。）"

#: ../../whatsnew/3.2.rst:1115
msgid "io"
msgstr "io"

#: ../../whatsnew/3.2.rst:1117
#, fuzzy
msgid ""
"The :class:`io.BytesIO` has a new method, :meth:`~io.BytesIO.getbuffer`, "
"which provides functionality similar to :func:`memoryview`.  It creates an "
"editable view of the data without making a copy.  The buffer's random access "
"and support for slice notation are well-suited to in-place editing::"
msgstr ""
":class:`io.BytesIO` 有一個新方法 :meth:`~io.BytesIO.getbuffer`，它提供類似於 "
":func:`memoryview` 的功能。它建立了一個可編輯的資料視圖，而無需製作副本。緩衝"
"區的隨機訪問和對切片符號的支援非常適合就地編輯::"

#: ../../whatsnew/3.2.rst:1143
#, fuzzy
msgid "(Contributed by Antoine Pitrou in :issue:`5506`.)"
msgstr "（由 Antoine Pitrou 在 :issue:`5506` 中貢獻。）"

#: ../../whatsnew/3.2.rst:1146
msgid "reprlib"
msgstr "reprlib"

#: ../../whatsnew/3.2.rst:1148
#, fuzzy
msgid ""
"When writing a :meth:`__repr__` method for a custom container, it is easy to "
"forget to handle the case where a member refers back to the container "
"itself. Python's builtin objects such as :class:`list` and :class:`set` "
"handle self-reference by displaying \"...\" in the recursive part of the "
"representation string."
msgstr ""
"為自定義容器編寫 :meth:`__repr__` "
"方法時，很容易忘記處理成員引用容器本身的情況。 Python 的內建物件，例如 "
":class:`list` 和 :class:`set` 通過在表示字串的遞迴部分顯示“...”來處理自引用。"

#: ../../whatsnew/3.2.rst:1154
#, fuzzy
msgid ""
"To help write such :meth:`__repr__` methods, the :mod:`reprlib` module has a "
"new decorator, :func:`~reprlib.recursive_repr`, for detecting recursive "
"calls to :meth:`__repr__` and substituting a placeholder string instead::"
msgstr ""
"為了幫助編寫這樣的 :meth:`__repr__` 方法，:mod:`reprlib` "
"模組有一個新的裝飾器 :func:`~reprlib.recursive_repr`，用於檢測對 "
":meth:`__repr__` 的遞迴呼叫並替換佔位符改為字串::"

#: ../../whatsnew/3.2.rst:1169
#, fuzzy
msgid "(Contributed by Raymond Hettinger in :issue:`9826` and :issue:`9840`.)"
msgstr "（由 Raymond Hettinger 在 :issue:`9826` 和 :issue:`9840` 中貢獻。）"

#: ../../whatsnew/3.2.rst:1172
msgid "logging"
msgstr "logging"

#: ../../whatsnew/3.2.rst:1174
#, fuzzy
msgid ""
"In addition to dictionary-based configuration described above, the :mod:"
"`logging` package has many other improvements."
msgstr "除了上述基於字典的配置之外，:mod:`logging` 包還有許多其他改進。"

#: ../../whatsnew/3.2.rst:1177
#, fuzzy
msgid ""
"The logging documentation has been augmented by a :ref:`basic tutorial "
"<logging-basic-tutorial>`\\, an :ref:`advanced tutorial <logging-advanced-"
"tutorial>`\\, and a :ref:`cookbook <logging-cookbook>` of logging recipes.  "
"These documents are the fastest way to learn about logging."
msgstr ""
"日誌記錄文檔已通過 :ref:`basic tutorial <logging-basic-tutorial>`\\、:ref:`"
"advanced tutorial <logging-advanced-tutorial>`\\ 和 :ref:`cookbook <logging "
"-cookbook>` 的記錄食譜。這些文檔是了解日誌記錄的最快方式。"

#: ../../whatsnew/3.2.rst:1182
#, fuzzy
msgid ""
"The :func:`logging.basicConfig` set-up function gained a *style* argument to "
"support three different types of string formatting.  It defaults to \"%\" "
"for traditional %-formatting, can be set to \"{\" for the new :meth:`str."
"format` style, or can be set to \"$\" for the shell-style formatting "
"provided by :class:`string.Template`.  The following three configurations "
"are equivalent::"
msgstr ""
":func:`logging.basicConfig` 設定函式獲得了一個 *style* "
"參數來支援三種不同型別的字串格式。對於傳統的 % 格式，它預設為 ``%``，對於新的 "
":meth:`str.format` 樣式可以設定為 ``{``，或者對於 :class 提供的 shell "
"樣式格式可以設定為 ``$`` :`string.Template`。以下三個配置是等價的："

#: ../../whatsnew/3.2.rst:1193
#, fuzzy
msgid ""
"If no configuration is set-up before a logging event occurs, there is now a "
"default configuration using a :class:`~logging.StreamHandler` directed to :"
"attr:`sys.stderr` for events of ``WARNING`` level or higher.  Formerly, an "
"event occurring before a configuration was set-up would either raise an "
"exception or silently drop the event depending on the value of :attr:"
"`logging.raiseExceptions`.  The new default handler is stored in :attr:"
"`logging.lastResort`."
msgstr ""
"如果在日誌記錄事件發生之前沒有設定配置，現在有一個預設配置使用 "
":class:`~logging.StreamHandler` 定向到 :attr:`sys.stderr` 用於 ``WARNING`` "
"級別的事件或更高。以前，在設定配置之前發生的事件會引發例外或靜默刪除事件，"
"具體取決於 logging.raiseExceptions 的值。新的預設處理程式儲存在 "
":attr:`logging.lastResort` 中。"

#: ../../whatsnew/3.2.rst:1201
#, fuzzy
msgid ""
"The use of filters has been simplified.  Instead of creating a :class:"
"`~logging.Filter` object, the predicate can be any Python callable that "
"returns ``True`` or ``False``."
msgstr ""
"過濾器的使用已得到簡化。不是建立 :class:`~logging.Filter` 物件，"
"謂詞可以是任何回傳 ``True`` 或 ``False`` 的 Python 可呼叫物件。"

#: ../../whatsnew/3.2.rst:1205
#, fuzzy
msgid ""
"There were a number of other improvements that add flexibility and simplify "
"configuration.  See the module documentation for a full listing of changes "
"in Python 3.2."
msgstr "還有許多其他改進可以增加靈活性並簡化配置。有關 Python 3.2 "
"中更改的完整列表，請參閱模組文檔。"

#: ../../whatsnew/3.2.rst:1210
msgid "csv"
msgstr "csv"

#: ../../whatsnew/3.2.rst:1212
#, fuzzy
msgid ""
"The :mod:`csv` module now supports a new dialect, :class:`~csv."
"unix_dialect`, which applies quoting for all fields and a traditional Unix "
"style with ``'\\n'`` as the line terminator.  The registered dialect name is "
"``unix``."
msgstr ""
":mod:`csv` 模組現在支援一種新的方言，:class:`~csv.unix_dialect`，"
"它對所有欄位應用引號和傳統的 Unix 樣式，以 ``'\\n"
"'`` 作為行終止符。註冊的方言名稱是 ``unix``。"

#: ../../whatsnew/3.2.rst:1216
#, fuzzy
msgid ""
"The :class:`csv.DictWriter` has a new method, :meth:`~csv.DictWriter."
"writeheader` for writing-out an initial row to document the field names::"
msgstr ""
":class:`csv.DictWriter` 有一個新方法 :meth:`~csv.DictWriter.writeheader` "
"用於寫出初始行以記錄欄位名稱::"

#: ../../whatsnew/3.2.rst:1230
#, fuzzy
msgid ""
"(New dialect suggested by Jay Talbot in :issue:`5975`, and the new method "
"suggested by Ed Abraham in :issue:`1537721`.)"
msgstr ""
"（Jay Talbot 在 :issue:`5975` 中建議的新方言，以及 Ed Abraham 在 "
":issue:`1537721` 中建議的新方法。）"

#: ../../whatsnew/3.2.rst:1234
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.2.rst:1236
#, fuzzy
msgid ""
"There is a new and slightly mind-blowing tool :class:`~contextlib."
"ContextDecorator` that is helpful for creating a :term:`context manager` "
"that does double duty as a function decorator."
msgstr ""
"有一個新的且有點令人興奮的工具 :class:`~contextlib.ContextDecorator` "
"有助於建立一個 :term:`context manager` 作為函式裝飾器執行雙重任務。"

#: ../../whatsnew/3.2.rst:1240
#, fuzzy
msgid ""
"As a convenience, this new functionality is used by :func:`~contextlib."
"contextmanager` so that no extra effort is needed to support both roles."
msgstr "為方便起見，這個新功能由 :func:`~contextlib.contextmanager` "
"使用，因此不需要額外的工作來支援這兩個角色。"

#: ../../whatsnew/3.2.rst:1244
#, fuzzy
msgid ""
"The basic idea is that both context managers and function decorators can be "
"used for pre-action and post-action wrappers.  Context managers wrap a group "
"of statements using a :keyword:`with` statement, and function decorators "
"wrap a group of statements enclosed in a function.  So, occasionally there "
"is a need to write a pre-action or post-action wrapper that can be used in "
"either role."
msgstr ""
"基本思想是上下文管理器和函式裝飾器都可以用於動作前和動作後包裝器。"
"上下文管理器使用 :keyword:`with` 語句包裝一組語句，函式裝飾器包裝一組包含在函"
"式中的語句。因此，有時需要編寫可用於任一角色的動作前或動作後包裝器。"

#: ../../whatsnew/3.2.rst:1250
#, fuzzy
msgid ""
"For example, it is sometimes useful to wrap functions or groups of "
"statements with a logger that can track the time of entry and time of exit.  "
"Rather than writing both a function decorator and a context manager for the "
"task, the :func:`~contextlib.contextmanager` provides both capabilities in a "
"single definition::"
msgstr ""
"例如，有時使用可以跟踪進入時間和退出時間的記錄器來包裝函式或語句組很有用。 "
":func:`~contextlib.contextmanager` "
"不是為任務同時編寫函式裝飾器和上下文管理器，而是在單個定義中提供這兩種功能::"

#: ../../whatsnew/3.2.rst:1267
#, fuzzy
msgid "Formerly, this would have only been usable as a context manager::"
msgstr "以前，這只能用作上下文管理器::"

#: ../../whatsnew/3.2.rst:1273
#, fuzzy
msgid "Now, it can be used as a decorator as well::"
msgstr "現在，它也可以用作裝飾器::"

#: ../../whatsnew/3.2.rst:1280
#, fuzzy
msgid ""
"Trying to fulfill two roles at once places some limitations on the "
"technique. Context managers normally have the flexibility to return an "
"argument usable by a :keyword:`with` statement, but there is no parallel for "
"function decorators."
msgstr ""
"試圖同時扮演兩個角色會給這項技術帶來一些限制。"
"上下文管理器通常可以靈活地回傳可由 :keyword:`with` "
"語句使用的參數，但函式裝飾器沒有類似之處。"

#: ../../whatsnew/3.2.rst:1284
#, fuzzy
msgid ""
"In the above example, there is not a clean way for the "
"*track_entry_and_exit* context manager to return a logging instance for use "
"in the body of enclosed statements."
msgstr "在上面的示例中，*track_entry_and_exit* "
"上下文管理器沒有一種干淨的方法來回傳用於封閉語句主體的日誌記錄實例。"

#: ../../whatsnew/3.2.rst:1288
#, fuzzy
msgid "(Contributed by Michael Foord in :issue:`9110`.)"
msgstr "（由 Michael Foord 在 :issue:`9110` 中貢獻。）"

#: ../../whatsnew/3.2.rst:1291
#, fuzzy
msgid "decimal and fractions"
msgstr "小數和分數"

#: ../../whatsnew/3.2.rst:1293
#, fuzzy
msgid ""
"Mark Dickinson crafted an elegant and efficient scheme for assuring that "
"different numeric datatypes will have the same hash value whenever their "
"actual values are equal (:issue:`8188`)::"
msgstr ""
"Mark Dickinson 精心設計了一個優雅而高效的方案，"
"以確保不同的數字資料型別在實際值相等時將具有相同的雜湊值 (:issue:`8188`)::"

#: ../../whatsnew/3.2.rst:1300
#, fuzzy
msgid ""
"Some of the hashing details are exposed through a new attribute, :attr:`sys."
"hash_info`, which describes the bit width of the hash value, the prime "
"modulus, the hash values for *infinity* and *nan*, and the multiplier used "
"for the imaginary part of a number:"
msgstr ""
"一些散列細節通過一個新屬性 :attr:`sys.hash_info` "
"公開，它描述了散列值的位寬、質數模數、*infinity* 和 *nan* "
"的散列值以及乘數用於數字的虛部："

#: ../../whatsnew/3.2.rst:1308
#, fuzzy
msgid ""
"An early decision to limit the inter-operability of various numeric types "
"has been relaxed.  It is still unsupported (and ill-advised) to have "
"implicit mixing in arithmetic expressions such as ``Decimal('1.1') + "
"float('1.1')`` because the latter loses information in the process of "
"constructing the binary float.  However, since existing floating point value "
"can be converted losslessly to either a decimal or rational representation, "
"it makes sense to add them to the constructor and to support mixed-type "
"comparisons."
msgstr ""
"限制各種數字型別的互操作性的早期決定已經放寬。在諸如“Decimal('1.1') + "
"float('1.1')”之類的算術表達式中進行隱式混合仍然不受支援（並且不明智），因為後"
"者在構造二進位浮點數的過程中會丟失資訊。但是，由於現有的浮點值可以無損地轉換"
"為十進位或有理數表示形式，因此將它們新增到構造函式並支援混合型別比較是有意義"
"的。"

#: ../../whatsnew/3.2.rst:1316
#, fuzzy
msgid ""
"The :class:`decimal.Decimal` constructor now accepts :class:`float` objects "
"directly so there in no longer a need to use the :meth:`~decimal.Decimal."
"from_float` method (:issue:`8257`)."
msgstr ""
":class:`decimal.Decimal` 構造函式現在直接接受 :class:`float` 物件，"
"因此不再需要使用 :meth:`~decimal.Decimal.from_float` 方法 (:issue:`8257`) ."

#: ../../whatsnew/3.2.rst:1320
#, fuzzy
msgid ""
"Mixed type comparisons are now fully supported so that :class:`~decimal."
"Decimal` objects can be directly compared with :class:`float` and :class:"
"`fractions.Fraction` (:issue:`2531` and :issue:`8188`)."
msgstr ""
"現在完全支援混合型別比較，因此 :class:`~decimal.Decimal` 物件可以直接與 "
":class:`float` 和 :class:`fractions.Fraction` (:issue:`2531` 和 :issue: "
"`8188`）。"

#: ../../whatsnew/3.2.rst:1324
#, fuzzy
msgid ""
"Similar changes were made to :class:`fractions.Fraction` so that the :meth:"
"`~fractions.Fraction.from_float()` and :meth:`~fractions.Fraction."
"from_decimal` methods are no longer needed (:issue:`8294`):"
msgstr ""
"對 :class:`fractions.Fraction` 進行了類似的更改，因此不再需要 :meth:`~fractions"
".Fraction.from_float()` 和 :meth:`~fractions.Fraction.from_decimal` "
"方法（:issue:`8294`):"

#: ../../whatsnew/3.2.rst:1335
#, fuzzy
msgid ""
"Another useful change for the :mod:`decimal` module is that the :attr:"
"`Context.clamp` attribute is now public.  This is useful in creating "
"contexts that correspond to the decimal interchange formats specified in "
"IEEE 754 (see :issue:`8540`)."
msgstr ""
":mod:`decimal` 模組的另一個有用的變化是 :attr:`Context.clamp` "
"屬性現在是公開的。這在建立對應於 IEEE 754 "
"中指定的十進位交換格式的上下文時很有用（請參閱 :issue:`8540`）。"

#: ../../whatsnew/3.2.rst:1340
#, fuzzy
msgid "(Contributed by Mark Dickinson and Raymond Hettinger.)"
msgstr "（由 Mark Dickinson 和 Raymond Hettinger 提供。）"

#: ../../whatsnew/3.2.rst:1343
msgid "ftp"
msgstr "ftp"

#: ../../whatsnew/3.2.rst:1345
#, fuzzy
msgid ""
"The :class:`ftplib.FTP` class now supports the context management protocol "
"to unconditionally consume :exc:`socket.error` exceptions and to close the "
"FTP connection when done::"
msgstr ""
":class:`ftplib.FTP` 類現在支援上下文管理協定以無條件地使用 :exc:`socket."
"error` 例外並在完成後關閉 FTP 連接::"

#: ../../whatsnew/3.2.rst:1360
#, fuzzy
msgid ""
"Other file-like objects such as :class:`mmap.mmap` and :func:`fileinput."
"input` also grew auto-closing context managers::"
msgstr ""
"其他類似文件的物件，例如 :class:`mmap.mmap` 和 :func:`fileinput.input` "
"也增加了自動關閉上下文管理器::"

#: ../../whatsnew/3.2.rst:1367
#, fuzzy
msgid ""
"(Contributed by Tarek Ziadé and Giampaolo Rodolà in :issue:`4972`, and by "
"Georg Brandl in :issue:`8046` and :issue:`1286`.)"
msgstr ""
"（由 Tarek Ziadé 和 Giampaolo Rodolà 在 :issue:`4972` 以及 Georg Brandl 在 "
":issue:`8046` 和 :issue:`1286` 中貢獻。）"

#: ../../whatsnew/3.2.rst:1370
#, fuzzy
msgid ""
"The :class:`~ftplib.FTP_TLS` class now accepts a *context* parameter, which "
"is a :class:`ssl.SSLContext` object allowing bundling SSL configuration "
"options, certificates and private keys into a single (potentially long-"
"lived) structure."
msgstr ""
":class:`~ftplib.FTP_TLS` 類現在接受 *context* 參數，這是一個 :class:`ssl."
"SSLContext` 物件，允許將 SSL "
"配置選項、證書和私鑰捆綁到一個單一的（可能長期存在的）結構。"

#: ../../whatsnew/3.2.rst:1374
#, fuzzy
msgid "(Contributed by Giampaolo Rodolà; :issue:`8806`.)"
msgstr "（由 Giampaolo Rodolà 提供；:issue:`8806`。）"

#: ../../whatsnew/3.2.rst:1377
msgid "popen"
msgstr "popen"

#: ../../whatsnew/3.2.rst:1379
#, fuzzy
msgid ""
"The :func:`os.popen` and :func:`subprocess.Popen` functions now support :"
"keyword:`with` statements for auto-closing of the file descriptors."
msgstr ""
":func:`os.popen` 和 :func:`subprocess.Popen` 函式現在支援 :keyword:`with` "
"語句來自動關閉文件描述器。"

#: ../../whatsnew/3.2.rst:1382
#, fuzzy
msgid ""
"(Contributed by Antoine Pitrou and Brian Curtin in :issue:`7461` and :issue:"
"`10554`.)"
msgstr "（由 Antoine Pitrou 和 Brian Curtin 在 :issue:`7461` 和 :issue:`10554` "
"中貢獻。）"

#: ../../whatsnew/3.2.rst:1386
msgid "select"
msgstr "select"

#: ../../whatsnew/3.2.rst:1388
#, fuzzy
msgid ""
"The :mod:`select` module now exposes a new, constant attribute, :attr:"
"`~select.PIPE_BUF`, which gives the minimum number of bytes which are "
"guaranteed not to block when :func:`select.select` says a pipe is ready for "
"writing."
msgstr ""
":mod:`select` 模組現在公開了一個新的常數屬性 :attr:`~select.PIPE_BUF`，"
"它給出了保證在 :func:`select.select` 說 a "
"時不會阻塞的最小位元組數管道已準備好寫入。"

#: ../../whatsnew/3.2.rst:1397
#, fuzzy
msgid "(Available on Unix systems. Patch by Sébastien Sablé in :issue:`9862`)"
msgstr "（在 Unix 系統上可用。Sébastien Sablé 在 :issue:`9862` 中的補丁）"

#: ../../whatsnew/3.2.rst:1400
msgid "gzip and zipfile"
msgstr "gzip 和 zipfile"

#: ../../whatsnew/3.2.rst:1402
#, fuzzy
msgid ""
":class:`gzip.GzipFile` now implements the :class:`io.BufferedIOBase` :term:"
"`abstract base class` (except for ``truncate()``).  It also has a :meth:"
"`~gzip.GzipFile.peek` method and supports unseekable as well as zero-padded "
"file objects."
msgstr ""
":class:`gzip.GzipFile` 現在實作了 :class:`io.BufferedIOBase` "
":term:`抽象基底類別`（``truncate()`` 除外）。它還有一個 :meth:`~gzip.GzipFile"
".peek` 方法並支援不可搜索和零填充文件物件。"

#: ../../whatsnew/3.2.rst:1407
#, fuzzy
msgid ""
"The :mod:`gzip` module also gains the :func:`~gzip.compress` and :func:"
"`~gzip.decompress` functions for easier in-memory compression and "
"decompression.  Keep in mind that text needs to be encoded as :class:`bytes` "
"before compressing and decompressing:"
msgstr ""
":mod:`gzip` 模組還獲得了 :func:`~gzip.compress` 和 :func:`~gzip.decompress` "
"函式，以便更輕鬆地進行記憶體壓縮和解壓縮。請記住，在壓縮和解壓縮之前，文本需"
"要編碼為 :class:`bytes`："

#: ../../whatsnew/3.2.rst:1424
#, fuzzy
msgid ""
"(Contributed by Anand B. Pillai in :issue:`3488`; and by Antoine Pitrou, Nir "
"Aides and Brian Curtin in :issue:`9962`, :issue:`1675951`, :issue:`7471` "
"and :issue:`2846`.)"
msgstr ""
"（由 Anand B. Pillai 在 :issue:`3488` 中貢獻；由 Antoine Pitrou、Nir Aides "
"和 Brian Curtin 在 :issue:`9962`、:issue:`1675951`、:issue:`7471` 和 :issue: "
"中貢獻`2846`。）"

#: ../../whatsnew/3.2.rst:1428
#, fuzzy
msgid ""
"Also, the :class:`zipfile.ZipExtFile` class was reworked internally to "
"represent files stored inside an archive.  The new implementation is "
"significantly faster and can be wrapped in an :class:`io.BufferedReader` "
"object for more speedups.  It also solves an issue where interleaved calls "
"to *read* and *readline* gave the wrong results."
msgstr ""
"此外，:class:`zipfile.ZipExtFile` "
"類在內部進行了重新設計，以表示儲存在存檔中的文件。新的實作速度明顯更快，"
"並且可以包裝在 io.BufferedReader 對像中以獲得更多加速。它還解決了對 *read* "
"和 *readline* 的交錯呼叫給出錯誤結果的問題。"

#: ../../whatsnew/3.2.rst:1434
#, fuzzy
msgid "(Patch submitted by Nir Aides in :issue:`7610`.)"
msgstr "（補丁由 Nir Aides 在 :issue:`7610` 中提交。）"

#: ../../whatsnew/3.2.rst:1437
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.2.rst:1439
#, fuzzy
msgid ""
"The :class:`~tarfile.TarFile` class can now be used as a context manager.  "
"In addition, its :meth:`~tarfile.TarFile.add` method has a new option, "
"*filter*, that controls which files are added to the archive and allows the "
"file metadata to be edited."
msgstr ""
":class:`~tarfile.TarFile` 類現在可以用作上下文管理器。此外，它的 "
":meth:`~tarfile.TarFile.add` 方法有一個新選項 "
"*filter*，它控制將哪些文件新增到存檔中並允許編輯文件元資料。"

#: ../../whatsnew/3.2.rst:1444
#, fuzzy
msgid ""
"The new *filter* option replaces the older, less flexible *exclude* "
"parameter which is now deprecated.  If specified, the optional *filter* "
"parameter needs to be a :term:`keyword argument`.  The user-supplied filter "
"function accepts a :class:`~tarfile.TarInfo` object and returns an updated :"
"class:`~tarfile.TarInfo` object, or if it wants the file to be excluded, the "
"function can return ``None``::"
msgstr ""
"新的 *filter* 選項取代了舊的、不太靈活的 *exclude* "
"參數，該參數現已棄用。如果指定，可選的 *filter* 參數需要是一個關鍵字參數。"
"使用者提供的過濾器函式接受一個 :class:`~tarfile.TarInfo` "
"物件並回傳一個更新的 :class:`~tarfile.TarInfo` 物件，或者如果它想要排除文件，"
"該函式可以回傳 ``None ``::"

#: ../../whatsnew/3.2.rst:1468
#, fuzzy
msgid ""
"(Proposed by Tarek Ziadé and implemented by Lars Gustäbel in :issue:`6856`.)"
msgstr "（由 Tarek Ziadé 提出並由 Lars Gustäbel 在 :issue:`6856` 中實施。）"

#: ../../whatsnew/3.2.rst:1471
msgid "hashlib"
msgstr "hashlib"

#: ../../whatsnew/3.2.rst:1473
#, fuzzy
msgid ""
"The :mod:`hashlib` module has two new constant attributes listing the "
"hashing algorithms guaranteed to be present in all implementations and those "
"available on the current implementation::"
msgstr ":mod:`hashlib` 模組有兩個新的常數屬性，列出保證在所有實作中都存在的雜湊演算法"
"以及當前實作中可用的雜湊演算法::"

#: ../../whatsnew/3.2.rst:1488
#, fuzzy
msgid "(Suggested by Carl Chenet in :issue:`7418`.)"
msgstr "（由 Carl Chenet 在 :issue:`7418` 中建議。）"

#: ../../whatsnew/3.2.rst:1491
msgid "ast"
msgstr "ast"

#: ../../whatsnew/3.2.rst:1493
#, fuzzy
msgid ""
"The :mod:`ast` module has a wonderful a general-purpose tool for safely "
"evaluating expression strings using the Python literal syntax.  The :func:"
"`ast.literal_eval` function serves as a secure alternative to the builtin :"
"func:`eval` function which is easily abused.  Python 3.2 adds :class:`bytes` "
"and :class:`set` literals to the list of supported types: strings, bytes, "
"numbers, tuples, lists, dicts, sets, booleans, and ``None``."
msgstr ""
":mod:`ast` 模組有一個很棒的通用工具，可以使用 Python "
"文字語法安全地評估表達式字串。 :func:`ast.literal_eval` 函式作為內建 "
":func:`eval` 函式的安全替代品，後者很容易被濫用。 Python 3.2 將 "
":class:`bytes` 和 :class:`set` 文字新增到受支援型別的列表中：字串、位元組、數"
"字、元組、列表、字典、集合、布爾值和 ``None`` 。"

#: ../../whatsnew/3.2.rst:1514
#, fuzzy
msgid "(Implemented by Benjamin Peterson and Georg Brandl.)"
msgstr "（由 Benjamin Peterson 和 Georg Brandl 實施。）"

#: ../../whatsnew/3.2.rst:1517
msgid "os"
msgstr "os"

#: ../../whatsnew/3.2.rst:1519
#, fuzzy
msgid ""
"Different operating systems use various encodings for filenames and "
"environment variables.  The :mod:`os` module provides two new functions, :"
"func:`~os.fsencode` and :func:`~os.fsdecode`, for encoding and decoding "
"filenames:"
msgstr ""
"不同的操作系統對文件名和環境變數使用不同的編碼。 :mod:`os` "
"模組提供了兩個新函式，:func:`~os.fsencode` 和 :func:`~os."
"fsdecode`，用於編碼和解碼文件名："

#: ../../whatsnew/3.2.rst:1529
#, fuzzy
msgid ""
"Some operating systems allow direct access to encoded bytes in the "
"environment.  If so, the :attr:`os.supports_bytes_environ` constant will be "
"true."
msgstr "一些操作系統允許直接訪問環境中的編碼位元組。如果是這樣，:attr:`os."
"supports_bytes_environ` 常數將為真。"

#: ../../whatsnew/3.2.rst:1533
#, fuzzy
msgid ""
"For direct access to encoded environment variables (if available), use the "
"new :func:`os.getenvb` function or use :data:`os.environb` which is a bytes "
"version of :data:`os.environ`."
msgstr ""
"要直接訪問編碼環境變數（如果可用），請使用新的 os.getenvb 函式或使用 "
"os.environ 的位元組版本的 os.environb。"

#: ../../whatsnew/3.2.rst:1537
#, fuzzy
msgid "(Contributed by Victor Stinner.)"
msgstr "（由 Victor Stinner 提供。）"

#: ../../whatsnew/3.2.rst:1540
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.2.rst:1542
#, fuzzy
msgid "The :func:`shutil.copytree` function has two new options:"
msgstr ":func:`shutil.copytree` 函式有兩個新選項："

#: ../../whatsnew/3.2.rst:1544
#, fuzzy
msgid ""
"*ignore_dangling_symlinks*: when ``symlinks=False`` so that the function "
"copies a file pointed to by a symlink, not the symlink itself. This option "
"will silence the error raised if the file doesn't exist."
msgstr ""
"*ignore_dangling_symlinks*：當 ``symlinks=False`` 時，函式複製符號鏈接指向的"
"文件，而不是符號鏈接本身。如果文件不存在，此選項將消除引發的錯誤。"

#: ../../whatsnew/3.2.rst:1548
#, fuzzy
msgid ""
"*copy_function*: is a callable that will be used to copy files. :func:"
"`shutil.copy2` is used by default."
msgstr "*copy_function*：是一個可呼叫函式，用於復製文件。 :func:`shutil.copy2` "
"預設使用。"

#: ../../whatsnew/3.2.rst:1551 ../../whatsnew/3.2.rst:1589
#, fuzzy
msgid "(Contributed by Tarek Ziadé.)"
msgstr "（由 Tarek Ziadé 提供。）"

#: ../../whatsnew/3.2.rst:1553
#, fuzzy
msgid ""
"In addition, the :mod:`shutil` module now supports :ref:`archiving "
"operations <archiving-operations>` for zipfiles, uncompressed tarfiles, "
"gzipped tarfiles, and bzipped tarfiles.  And there are functions for "
"registering additional archiving file formats (such as xz compressed "
"tarfiles or custom formats)."
msgstr ""
"此外，:mod:`shutil` 模組現在支援 :ref:`archiving operations <archiving-"
"operations>` 壓縮文件、未壓縮的 tar 文件、gzip 壓縮的 tar 文件和 bzip 壓縮的 "
"tar 文件。還有用於註冊其他歸檔文件格式（例如 xz 壓縮的 tar "
"文件或自定義格式）的功能。"

#: ../../whatsnew/3.2.rst:1558
#, fuzzy
msgid ""
"The principal functions are :func:`~shutil.make_archive` and :func:`~shutil."
"unpack_archive`.  By default, both operate on the current directory (which "
"can be set by :func:`os.chdir`) and on any sub-directories. The archive "
"filename needs to be specified with a full pathname.  The archiving step is "
"non-destructive (the original files are left unchanged)."
msgstr ""
"主要函式是 :func:`~shutil.make_archive` 和 :func:`~shutil."
"unpack_archive`。預設情況下，兩者都在當前目錄（可以通過 :func:`os.chdir` 設定"
"）和任何子目錄上運行。存檔文件名需要使用完整路徑名指定。歸檔步驟是非破壞性的"
"（原始文件保持不變）。"

#: ../../whatsnew/3.2.rst:1592
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.2.rst:1594
#, fuzzy
msgid ""
"The :mod:`sqlite3` module was updated to pysqlite version 2.6.0.  It has two "
"new capabilities."
msgstr ":mod:`sqlite3` 模組已更新為 pysqlite 版本 2.6.0。它有兩個新功能。"

#: ../../whatsnew/3.2.rst:1596
#, fuzzy
msgid ""
"The :attr:`sqlite3.Connection.in_transit` attribute is true if there is an "
"active transaction for uncommitted changes."
msgstr "如果存在未提交更改的活動事務，則 :attr:`sqlite3.Connection.in_transit` "
"屬性為真。"

#: ../../whatsnew/3.2.rst:1599
#, fuzzy
msgid ""
"The :meth:`sqlite3.Connection.enable_load_extension` and :meth:`sqlite3."
"Connection.load_extension` methods allows you to load SQLite extensions from "
"\".so\" files.  One well-known extension is the fulltext-search extension "
"distributed with SQLite."
msgstr ""
"sqlite3.Connection.enable_load_extension 和 "
"sqlite3.Connection.load_extension 方法允許您從“.so”文件加載 SQLite 擴充。"
"一個眾所周知的擴充是與 SQLite 一起分發的全文搜索擴充。"

#: ../../whatsnew/3.2.rst:1604
#, fuzzy
msgid "(Contributed by R. David Murray and Shashwat Anand; :issue:`8845`.)"
msgstr "（由 R. David Murray 和 Shashwat Anand 提供；:issue:`8845`。）"

#: ../../whatsnew/3.2.rst:1607
msgid "html"
msgstr "html"

#: ../../whatsnew/3.2.rst:1609
#, fuzzy
msgid ""
"A new :mod:`html` module was introduced with only a single function, :func:"
"`~html.escape`, which is used for escaping reserved characters from HTML "
"markup:"
msgstr "引入了一個新的 :mod:`html` 模組，它只有一個函式：:func:`~html.escape`，"
"用於轉義 HTML 標記中的保留字元："

#: ../../whatsnew/3.2.rst:1618
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.2.rst:1620
#, fuzzy
msgid "The :mod:`socket` module has two new improvements."
msgstr ":mod:`socket` 模組有兩個新的改進。"

#: ../../whatsnew/3.2.rst:1622
#, fuzzy
msgid ""
"Socket objects now have a :meth:`~socket.socket.detach()` method which puts "
"the socket into closed state without actually closing the underlying file "
"descriptor.  The latter can then be reused for other purposes. (Added by "
"Antoine Pitrou; :issue:`8524`.)"
msgstr ""
" socket 物件現在有一個 :meth:`~socket.socket.detach()` 方法，該方法將 socket 置於"
"關閉狀態而不實際關閉底層文件描述器。然後可以將後者重新用於其他目的。 （由 "
"Antoine Pitrou 新增；:issue:`8524`。）"

#: ../../whatsnew/3.2.rst:1627
#, fuzzy
msgid ""
":func:`socket.create_connection` now supports the context management "
"protocol to unconditionally consume :exc:`socket.error` exceptions and to "
"close the socket when done. (Contributed by Giampaolo Rodolà; :issue:`9794`.)"
msgstr ""
":func:`socket.create_connection` 現在支援上下文管理協定無條件使用 "
":exc:`socket.error` 例外並在完成時關閉 socket 。 （由 Giampaolo Rodolà "
"提供；:issue:`9794`。）"

#: ../../whatsnew/3.2.rst:1633
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.2.rst:1635
#, fuzzy
msgid ""
"The :mod:`ssl` module added a number of features to satisfy common "
"requirements for secure (encrypted, authenticated) internet connections:"
msgstr ":mod:`ssl` 模組新增了許多功能以滿足安全（加密、認證）網際網路連接的常見要求："

#: ../../whatsnew/3.2.rst:1638
#, fuzzy
msgid ""
"A new class, :class:`~ssl.SSLContext`, serves as a container for persistent "
"SSL data, such as protocol settings, certificates, private keys, and various "
"other options. It includes a :meth:`~ssl.SSLContext.wrap_socket` for "
"creating an SSL socket from an SSL context."
msgstr ""
"一個新類 :class:`~ssl.SSLContext` 用作持久 SSL "
"資料的容器，例如協定設定、證書、私鑰和各種其他選項。它包括一個 :meth:`~ssl."
"SSLContext.wrap_socket` 用於從 SSL 上下文建立 SSL  socket 。"

#: ../../whatsnew/3.2.rst:1643
#, fuzzy
msgid ""
"A new function, :func:`ssl.match_hostname`, supports server identity "
"verification for higher-level protocols by implementing the rules of HTTPS "
"(from :rfc:`2818`) which are also suitable for other protocols."
msgstr ""
"新功能 :func:`ssl.match_hostname` 通過實施 HTTPS 規則（來自 "
":rfc:`2818`）支援更高階別協定的伺服器身份驗證，這些規則也適用於其他協定。"

#: ../../whatsnew/3.2.rst:1647
#, fuzzy
msgid ""
"The :func:`ssl.wrap_socket` constructor function now takes a *ciphers* "
"argument.  The *ciphers* string lists the allowed encryption algorithms "
"using the format described in the `OpenSSL documentation <https://www."
"openssl.org/docs/man1.0.2/man1/ciphers.html#CIPHER-LIST-FORMAT>`__."
msgstr ""
":func:`ssl.wrap_socket` 構造函式現在採用 *ciphers* 參數。 *ciphers* 字串使用 "
"`OpenSSL 文檔 <https://www.openssl.org/docs/man1.0.2/man1/ciphers.html"
"#CIPHER-LIST-FORMAT>`__ 中描述的格式列出允許的加密演算法."

#: ../../whatsnew/3.2.rst:1652
#, fuzzy
msgid ""
"When linked against recent versions of OpenSSL, the :mod:`ssl` module now "
"supports the Server Name Indication extension to the TLS protocol, allowing "
"multiple \"virtual hosts\" using different certificates on a single IP port. "
"This extension is only supported in client mode, and is activated by passing "
"the *server_hostname* argument to :meth:`ssl.SSLContext.wrap_socket`."
msgstr ""
"當鏈接到最新版本的 OpenSSL 時，:mod:`ssl` 模組現在支援 TLS "
"協定的伺服器名稱指示擴充，允許多個“虛擬主機”在單個 IP "
"端口上使用不同的證書。此擴充僅在客戶端模式下受支援，並通過將 "
"*server_hostname* 參數傳遞給 :meth:`ssl.SSLContext.wrap_socket` 來激活。"

#: ../../whatsnew/3.2.rst:1658
#, fuzzy
msgid ""
"Various options have been added to the :mod:`ssl` module, such as :data:"
"`~ssl.OP_NO_SSLv2` which disables the insecure and obsolete SSLv2 protocol."
msgstr "各種選項已新增到 :mod:`ssl` 模組，例如 :data:`~ssl.OP_NO_SSLv2` "
"禁用不安全和過時的 SSLv2 協定。"

#: ../../whatsnew/3.2.rst:1662
#, fuzzy
msgid ""
"The extension now loads all the OpenSSL ciphers and digest algorithms.  If "
"some SSL certificates cannot be verified, they are reported as an \"unknown "
"algorithm\" error."
msgstr "該擴充現在加載所有 OpenSSL 密碼和摘要演算法。如果無法驗證某些 SSL "
"證書，它們將被報告為“未知演算法”錯誤。"

#: ../../whatsnew/3.2.rst:1666
#, fuzzy
msgid ""
"The version of OpenSSL being used is now accessible using the module "
"attributes :data:`ssl.OPENSSL_VERSION` (a string), :data:`ssl."
"OPENSSL_VERSION_INFO` (a 5-tuple), and :data:`ssl.OPENSSL_VERSION_NUMBER` "
"(an integer)."
msgstr ""
"現在可以使用模組屬性訪問正在使用的 OpenSSL 版本 :data:`ssl."
"OPENSSL_VERSION`（一個字串）、 :data:`ssl.OPENSSL_VERSION_INFO`（一個 5 "
"元組）和 :data:`ssl.OPENSSL_VERSION_NUMBER` （整數）。"

#: ../../whatsnew/3.2.rst:1671
#, fuzzy
msgid ""
"(Contributed by Antoine Pitrou in :issue:`8850`, :issue:`1589`, :issue:"
"`8322`, :issue:`5639`, :issue:`4870`, :issue:`8484`, and :issue:`8321`.)"
msgstr ""
"（由 Antoine Pitrou 在 :issue:`8850`、:issue:`1589`、:issue:`8322`、:issue:`5"
"639`、:issue:`4870`、:issue:`8484` 和 :問題：`8321`。）"

#: ../../whatsnew/3.2.rst:1675
msgid "nntp"
msgstr "nntp"

#: ../../whatsnew/3.2.rst:1677
#, fuzzy
msgid ""
"The :mod:`nntplib` module has a revamped implementation with better bytes "
"and text semantics as well as more practical APIs.  These improvements break "
"compatibility with the nntplib version in Python 3.1, which was partly "
"dysfunctional in itself."
msgstr ""
":mod:`nntplib` 模組具有改進的實作，具有更好的位元組和文本語義以及更實用的 "
"API。這些改進打破了與 Python 3.1 中 nntplib "
"版本的相容性，它本身部分功能失調。"

#: ../../whatsnew/3.2.rst:1682
#, fuzzy
msgid ""
"Support for secure connections through both implicit (using :class:`nntplib."
"NNTP_SSL`) and explicit (using :meth:`nntplib.NNTP.starttls`) TLS has also "
"been added."
msgstr "還新增了通過隱式（使用 nntplib.NNTP_SSL）和顯式（使用 nntplib.NNTP.starttls）"
"TLS 支援安全連接。"

#: ../../whatsnew/3.2.rst:1686
#, fuzzy
msgid ""
"(Contributed by Antoine Pitrou in :issue:`9360` and Andrew Vant in :issue:"
"`1926`.)"
msgstr "（由 Antoine Pitrou 在 :issue:`9360` 和 Andrew Vant 在 :issue:`1926` "
"中貢獻。）"

#: ../../whatsnew/3.2.rst:1689
msgid "certificates"
msgstr "certificates"

#: ../../whatsnew/3.2.rst:1691
#, fuzzy
msgid ""
":class:`http.client.HTTPSConnection`, :class:`urllib.request.HTTPSHandler` "
"and :func:`urllib.request.urlopen` now take optional arguments to allow for "
"server certificate checking against a set of Certificate Authorities, as "
"recommended in public uses of HTTPS."
msgstr ""
":class:`http.client.HTTPSConnection`、:class:`urllib.request.HTTPSHandler` "
"和 :func:`urllib.request.urlopen` "
"現在採用可選參數以允許針對一組證書頒發機構檢查伺服器證書，如建議在 HTTPS "
"的公開用途中使用。"

#: ../../whatsnew/3.2.rst:1696
#, fuzzy
msgid "(Added by Antoine Pitrou, :issue:`9003`.)"
msgstr "（由 Antoine Pitrou 新增，:issue:`9003`。）"

#: ../../whatsnew/3.2.rst:1699
msgid "imaplib"
msgstr "imaplib"

#: ../../whatsnew/3.2.rst:1701
#, fuzzy
msgid ""
"Support for explicit TLS on standard IMAP4 connections has been added "
"through the new :mod:`imaplib.IMAP4.starttls` method."
msgstr "通過新的 imaplib.IMAP4.starttls 方法新增了對標準 IMAP4 連接上顯式 TLS "
"的支援。"

#: ../../whatsnew/3.2.rst:1704
#, fuzzy
msgid "(Contributed by Lorenzo M. Catucci and Antoine Pitrou, :issue:`4471`.)"
msgstr "（由 Lorenzo M. Catucci 和 Antoine Pitrou 貢獻，:issue:`4471`。）"

#: ../../whatsnew/3.2.rst:1707
msgid "http.client"
msgstr "http.client"

#: ../../whatsnew/3.2.rst:1709
#, fuzzy
msgid ""
"There were a number of small API improvements in the :mod:`http.client` "
"module. The old-style HTTP 0.9 simple responses are no longer supported and "
"the *strict* parameter is deprecated in all classes."
msgstr ""
":mod:`http.client` 模組中有許多小的 API 改進。不再支援舊式 HTTP 0.9 "
"簡單響應，並且所有類中的 *strict* 參數均已棄用。"

#: ../../whatsnew/3.2.rst:1713
#, fuzzy
msgid ""
"The :class:`~http.client.HTTPConnection` and :class:`~http.client."
"HTTPSConnection` classes now have a *source_address* parameter for a (host, "
"port) tuple indicating where the HTTP connection is made from."
msgstr ""
":class:`~http.client.HTTPConnection` 和 :class:`~http.client.HTTPSConnection`"
" 類現在有一個 *source_address* 參數用於 (host, port) 元組，指示 HTTP "
"連接的來源。"

#: ../../whatsnew/3.2.rst:1718
#, fuzzy
msgid ""
"Support for certificate checking and HTTPS virtual hosts were added to :"
"class:`~http.client.HTTPSConnection`."
msgstr "對證書檢查和 HTTPS 虛擬主機的支援已新增到 :class:`~http.client."
"HTTPSConnection`。"

#: ../../whatsnew/3.2.rst:1721
#, fuzzy
msgid ""
"The :meth:`~http.client.HTTPConnection.request` method on connection objects "
"allowed an optional *body* argument so that a :term:`file object` could be "
"used to supply the content of the request.  Conveniently, the *body* "
"argument now also accepts an :term:`iterable` object so long as it includes "
"an explicit ``Content-Length`` header.  This extended interface is much more "
"flexible than before."
msgstr ""
"連接對像上的 :meth:`~http.client.HTTPConnection.request` 方法允許一個可選的 "
"*body* 參數，因此可以使用 :term:`file object` "
"來提供請求的內容。方便的是，*body* 參數現在也接受一個 :term:`iterable` 物件，"
"只要它包含一個顯式的 ``Content-Length`` 頭。這個擴充介面比以前靈活多了。"

#: ../../whatsnew/3.2.rst:1728
#, fuzzy
msgid ""
"To establish an HTTPS connection through a proxy server, there is a new :"
"meth:`~http.client.HTTPConnection.set_tunnel` method that sets the host and "
"port for HTTP Connect tunneling."
msgstr ""
"要通過代理伺服器建立 HTTPS 連接，有一個新的 :meth:`~http.client."
"HTTPConnection.set_tunnel` 方法可以設定 HTTP 連接隧道的主機和端口。"

#: ../../whatsnew/3.2.rst:1732
#, fuzzy
msgid ""
"To match the behavior of :mod:`http.server`, the HTTP client library now "
"also encodes headers with ISO-8859-1 (Latin-1) encoding.  It was already "
"doing that for incoming headers, so now the behavior is consistent for both "
"incoming and outgoing traffic. (See work by Armin Ronacher in :issue:"
"`10980`.)"
msgstr ""
"為了匹配 :mod:`http.server` 的行為，HTTP 客戶端庫現在還使用 ISO-8859-1 "
"(Latin-1) 編碼對標頭進行編碼。它已經為傳入標頭這樣做了，所以現在行為對於傳入"
"和傳出流量是一致的。 （請參閱 Armin Ronacher 在 :issue:`10980` 中的工作。）"

#: ../../whatsnew/3.2.rst:1738
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.2.rst:1740
#, fuzzy
msgid ""
"The unittest module has a number of improvements supporting test discovery "
"for packages, easier experimentation at the interactive prompt, new testcase "
"methods, improved diagnostic messages for test failures, and better method "
"names."
msgstr "unittest 模組有許多改進，支援包的測試發現、更容易在交互式提示下進行實驗、新的"
"測試用例方法、改進的測試失敗診斷消息以及更好的方法名稱。"

#: ../../whatsnew/3.2.rst:1745
#, fuzzy
msgid ""
"The command-line call ``python -m unittest`` can now accept file paths "
"instead of module names for running specific tests (:issue:`10620`).  The "
"new test discovery can find tests within packages, locating any test "
"importable from the top-level directory.  The top-level directory can be "
"specified with the ``-t`` option, a pattern for matching files with ``-p``, "
"and a directory to start discovery with ``-s``:"
msgstr ""
"命令列呼叫 ``python -m unittest`` 現在可以接受文件路徑而不是模組名稱來運行特"
"定測試（ :issue:`10620`）。新的測試發現可以在包中找到測試，定位任何可從頂級目"
"錄導入的測試。可以使用 ``-t``選項指定頂級目錄，使用 ``-p``匹配文件的模式，以及使用“"
"-s”開始發現的目錄："

#: ../../whatsnew/3.2.rst:1756 ../../whatsnew/3.2.rst:1765
#: ../../whatsnew/3.2.rst:1921
#, fuzzy
msgid "(Contributed by Michael Foord.)"
msgstr "（由邁克爾·福特提供。）"

#: ../../whatsnew/3.2.rst:1758
#, fuzzy
msgid ""
"Experimentation at the interactive prompt is now easier because the :class:"
"`unittest.case.TestCase` class can now be instantiated without arguments:"
msgstr "在交互式提示下進行實驗現在更容易，因為現在可以在沒有參數的情況下實例化 "
":class:`unittest.case.TestCase` 類："

#: ../../whatsnew/3.2.rst:1767
#, fuzzy
msgid ""
"The :mod:`unittest` module has two new methods, :meth:`~unittest.TestCase."
"assertWarns` and :meth:`~unittest.TestCase.assertWarnsRegex` to verify that "
"a given warning type is triggered by the code under test::"
msgstr ""
":mod:`unittest` 模組有兩個新方法，:meth:`~unittest.TestCase.assertWarns` 和 "
":meth:`~unittest.TestCase.assertWarnsRegex` "
"來驗證給定的警告型別是否由被測程式碼觸發::"

#: ../../whatsnew/3.2.rst:1775
#, fuzzy
msgid "(Contributed by Antoine Pitrou, :issue:`9754`.)"
msgstr "（由 Antoine Pitrou 提供，:issue:`9754`。）"

#: ../../whatsnew/3.2.rst:1777
#, fuzzy
msgid ""
"Another new method, :meth:`~unittest.TestCase.assertCountEqual` is used to "
"compare two iterables to determine if their element counts are equal "
"(whether the same elements are present with the same number of occurrences "
"regardless of order)::"
msgstr ""
"另一種新方法 :meth:`~unittest.TestCase.assertCountEqual` 用於比較兩個可疊代對"
"像以確定它們的元素計數是否相等（無論順序如何，相同元素是否以相同的出現次數出"
"現）::"

#: ../../whatsnew/3.2.rst:1787
#, fuzzy
msgid ""
"A principal feature of the unittest module is an effort to produce "
"meaningful diagnostics when a test fails.  When possible, the failure is "
"recorded along with a diff of the output.  This is especially helpful for "
"analyzing log files of failed test runs. However, since diffs can sometime "
"be voluminous, there is a new :attr:`~unittest.TestCase.maxDiff` attribute "
"that sets maximum length of diffs displayed."
msgstr ""
"unittest 模組的一個主要特性是在測試失敗時努力產生有意義的診斷。如果可能，會記"
"錄故障以及輸出的差異。這對於分析失敗測試運行的日誌文件特別有用。但是，由於差"
"異有時可能會很大，因此有一個新的 :attr:`~unittest.TestCase.maxDiff` "
"屬性可以設定顯示的差異的最大長度。"

#: ../../whatsnew/3.2.rst:1794
#, fuzzy
msgid ""
"In addition, the method names in the module have undergone a number of clean-"
"ups."
msgstr "此外，模組中的方法名稱也經過多次清理。"

#: ../../whatsnew/3.2.rst:1796
#, fuzzy
msgid ""
"For example, :meth:`~unittest.TestCase.assertRegex` is the new name for :"
"meth:`~unittest.TestCase.assertRegexpMatches` which was misnamed because the "
"test uses :func:`re.search`, not :func:`re.match`.  Other methods using "
"regular expressions are now named using short form \"Regex\" in preference "
"to \"Regexp\" -- this matches the names used in other unittest "
"implementations, matches Python's old name for the :mod:`re` module, and it "
"has unambiguous camel-casing."
msgstr ""
"例如，:meth:`~unittest.TestCase.assertRegex` 是 :meth:`~unittest.TestCase."
"assertRegexpMatches` 的新名稱，因為測試使用的是 :func:`re.search` 而不是 "
":func: `重新匹配`。其他使用正則表達式的方法現在使用縮寫形式 ``Regex``而不是“Rege"
"xp”來命名——這與其他單元測試實作中使用的名稱相匹配，與 :mod:`re` 模組的 "
"Python 舊名稱相匹配，並且它具有明確的駱駝外殼。"

#: ../../whatsnew/3.2.rst:1804
#, fuzzy
msgid "(Contributed by Raymond Hettinger and implemented by Ezio Melotti.)"
msgstr "（由 Raymond Hettinger 提供並由 Ezio Melotti 實施。）"

#: ../../whatsnew/3.2.rst:1806
#, fuzzy
msgid ""
"To improve consistency, some long-standing method aliases are being "
"deprecated in favor of the preferred names:"
msgstr "為了提高一致性，一些長期存在的方法別名被棄用，取而代之的是首選名稱："

#: ../../whatsnew/3.2.rst:1810
#, fuzzy
msgid "Old Name"
msgstr "舊名稱"

#: ../../whatsnew/3.2.rst:1810
#, fuzzy
msgid "Preferred Name"
msgstr "首選名稱"

#: ../../whatsnew/3.2.rst:1812
msgid ":meth:`assert_`"
msgstr ":meth:`assert_`"

#: ../../whatsnew/3.2.rst:1812
msgid ":meth:`.assertTrue`"
msgstr ":meth:`.assertTrue`"

#: ../../whatsnew/3.2.rst:1813
msgid ":meth:`assertEquals`"
msgstr ":meth:`assertEquals`"

#: ../../whatsnew/3.2.rst:1813
msgid ":meth:`.assertEqual`"
msgstr ":meth:`.assertEqual`"

#: ../../whatsnew/3.2.rst:1814
msgid ":meth:`assertNotEquals`"
msgstr ":meth:`assertNotEquals`"

#: ../../whatsnew/3.2.rst:1814
msgid ":meth:`.assertNotEqual`"
msgstr ":meth:`.assertNotEqual`"

#: ../../whatsnew/3.2.rst:1815
msgid ":meth:`assertAlmostEquals`"
msgstr ":meth:`assertAlmostEquals`"

#: ../../whatsnew/3.2.rst:1815
msgid ":meth:`.assertAlmostEqual`"
msgstr ":meth:`.assertAlmostEqual`"

#: ../../whatsnew/3.2.rst:1816
msgid ":meth:`assertNotAlmostEquals`"
msgstr ":meth:`assertNotAlmostEquals`"

#: ../../whatsnew/3.2.rst:1816
msgid ":meth:`.assertNotAlmostEqual`"
msgstr ":meth:`.assertNotAlmostEqual`"

#: ../../whatsnew/3.2.rst:1819
#, fuzzy
msgid ""
"Likewise, the ``TestCase.fail*`` methods deprecated in Python 3.1 are "
"expected to be removed in Python 3.3.  Also see the :ref:`deprecated-"
"aliases` section in the :mod:`unittest` documentation."
msgstr ""
"同樣，在 Python 3.1 中棄用的 ``TestCase.fail*`` 方法預計將在 Python 3.3 "
"中刪除。另請參閱 :ref:`unittest` 文檔中的 :ref:`deprecated-aliases` 部分。"

#: ../../whatsnew/3.2.rst:1823
#, fuzzy
msgid "(Contributed by Ezio Melotti; :issue:`9424`.)"
msgstr "（由 Ezio Melotti 提供；:issue:`9424`。）"

#: ../../whatsnew/3.2.rst:1825
#, fuzzy
msgid ""
"The :meth:`~unittest.TestCase.assertDictContainsSubset` method was "
"deprecated because it was misimplemented with the arguments in the wrong "
"order.  This created hard-to-debug optical illusions where tests like "
"``TestCase().assertDictContainsSubset({'a':1, 'b':2}, {'a':1})`` would fail."
msgstr ""
":meth:`~unittest.TestCase.assertDictContainsSubset` "
"方法已被棄用，因為它在錯誤的順序中錯誤地實作了參數。這造成了難以除錯的錯覺，"
"其中像 ``TestCase().assertDictContainsSubset({'a':1, 'b':2}, {'a':1})`` "
"這樣的測試會失敗。"

#: ../../whatsnew/3.2.rst:1833
msgid "random"
msgstr "random"

#: ../../whatsnew/3.2.rst:1835
#, fuzzy
msgid ""
"The integer methods in the :mod:`random` module now do a better job of "
"producing uniform distributions.  Previously, they computed selections with "
"``int(n*random())`` which had a slight bias whenever *n* was not a power of "
"two. Now, multiple selections are made from a range up to the next power of "
"two and a selection is kept only when it falls within the range ``0 <= x < "
"n``.  The functions and methods affected are :func:`~random.randrange`, :"
"func:`~random.randint`, :func:`~random.choice`, :func:`~random.shuffle` and :"
"func:`~random.sample`."
msgstr ""
":mod:`random` 模組中的整數方法現在可以更好地生成均勻分佈。以前，他們使用 "
"int(n*random()) 計算選擇，只要 *n* 不是 2 的冪，它就會有輕微的偏差。現在，"
"從一個範圍到 2 的下一個冪進行多項選擇，並且僅當選擇落在“0 <= x < "
"n”範圍內時才會保留一個選擇。受影響的函式和方法是 :func:`~random."
"randrange`、:func:`~random.randint`、:func:`~random.choice`、:func:`~random."
"shuffle` 和 :func:` ~random.sample`。"

#: ../../whatsnew/3.2.rst:1844
#, fuzzy
msgid "(Contributed by Raymond Hettinger; :issue:`9025`.)"
msgstr "（由 Raymond Hettinger 提供；:issue:`9025`。）"

#: ../../whatsnew/3.2.rst:1847
msgid "poplib"
msgstr "poplib"

#: ../../whatsnew/3.2.rst:1849
#, fuzzy
msgid ""
":class:`~poplib.POP3_SSL` class now accepts a *context* parameter, which is "
"a :class:`ssl.SSLContext` object allowing bundling SSL configuration "
"options, certificates and private keys into a single (potentially long-"
"lived) structure."
msgstr ""
":class:`~poplib.POP3_SSL` 類現在接受 *context* 參數，這是一個 :class:`ssl."
"SSLContext` 物件，允許將 SSL "
"配置選項、證書和私鑰捆綁到一個（可能長期存在的）結構中."

#: ../../whatsnew/3.2.rst:1854
#, fuzzy
msgid "(Contributed by Giampaolo Rodolà; :issue:`8807`.)"
msgstr "（由 Giampaolo Rodolà 提供；:issue:`8807`。）"

#: ../../whatsnew/3.2.rst:1857
msgid "asyncore"
msgstr "asyncore"

#: ../../whatsnew/3.2.rst:1859
#, fuzzy
msgid ""
":class:`asyncore.dispatcher` now provides a :meth:`~asyncore.dispatcher."
"handle_accepted()` method returning a ``(sock, addr)`` pair which is called "
"when a connection has actually been established with a new remote endpoint. "
"This is supposed to be used as a replacement for old :meth:`~asyncore."
"dispatcher.handle_accept()` and avoids the user  to call :meth:`~asyncore."
"dispatcher.accept()` directly."
msgstr ""
":class:`asyncore.dispatcher` 現在提供一個 :meth:`~asyncore.dispatcher."
"handle_accepted()` 方法回傳一個 ``(sock, addr)`` "
"對，當一個新的連接實際建立時呼叫遠程端點。這應該用作舊的 :meth:`~asyncore."
"dispatcher.handle_accept()` 的替代品，並避免使用者直接呼叫 :meth:`~asyncore."
"dispatcher.accept()`。"

#: ../../whatsnew/3.2.rst:1866
#, fuzzy
msgid "(Contributed by Giampaolo Rodolà; :issue:`6706`.)"
msgstr "（由 Giampaolo Rodolà 提供；:issue:`6706`。）"

#: ../../whatsnew/3.2.rst:1869
msgid "tempfile"
msgstr "tempfile"

#: ../../whatsnew/3.2.rst:1871
#, fuzzy
msgid ""
"The :mod:`tempfile` module has a new context manager, :class:`~tempfile."
"TemporaryDirectory` which provides easy deterministic cleanup of temporary "
"directories::"
msgstr ""
":mod:`tempfile` 模組有一個新的上下文管理器 :class:`~tempfile."
"TemporaryDirectory`，它提供了對臨時目錄的簡單確定性清理::"

#: ../../whatsnew/3.2.rst:1878
#, fuzzy
msgid "(Contributed by Neil Schemenauer and Nick Coghlan; :issue:`5178`.)"
msgstr "（由 Neil Schemenauer 和 Nick Coghlan 提供；:issue:`5178`。）"

#: ../../whatsnew/3.2.rst:1881
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.2.rst:1883
#, fuzzy
msgid ""
"The :mod:`inspect` module has a new function :func:`~inspect."
"getgeneratorstate` to easily identify the current state of a generator-"
"iterator::"
msgstr ""
":mod:`inspect` 模組有一個新函式 :func:`~inspect.getgeneratorstate` "
"可以輕鬆識別生成器-疊代器的當前狀態::"

#: ../../whatsnew/3.2.rst:1901
#, fuzzy
msgid "(Contributed by Rodolpho Eckhardt and Nick Coghlan, :issue:`10220`.)"
msgstr "（由 Rodolpho Eckhardt 和 Nick Coghlan 貢獻，:issue:`10220`。）"

#: ../../whatsnew/3.2.rst:1903
#, fuzzy
msgid ""
"To support lookups without the possibility of activating a dynamic "
"attribute, the :mod:`inspect` module has a new function, :func:`~inspect."
"getattr_static`. Unlike :func:`hasattr`, this is a true read-only search, "
"guaranteed not to change state while it is searching::"
msgstr ""
"為了在不激活動態屬性的情況下支援查找，:mod:`inspect` "
"模組有一個新函式 :func:`~inspect.getattr_static`。與 :func:`hasattr` "
"不同，這是一個真正的只讀搜索，保證在搜索時不會改變狀態::"

#: ../../whatsnew/3.2.rst:1924
msgid "pydoc"
msgstr "pydoc"

#: ../../whatsnew/3.2.rst:1926
#, fuzzy
msgid ""
"The :mod:`pydoc` module now provides a much-improved web server interface, "
"as well as a new command-line option ``-b`` to automatically open a browser "
"window to display that server:"
msgstr ""
":mod:`pydoc` 模組現在提供了一個大大改進的 Web 伺服器界面，"
"以及一個新的命令列選項 ``-b`` 來自動打開一個瀏覽器窗口來顯示該伺服器："

#: ../../whatsnew/3.2.rst:1934
#, fuzzy
msgid "(Contributed by Ron Adam; :issue:`2001`.)"
msgstr "（由 Ron Adam 提供；:issue:`2001`。）"

#: ../../whatsnew/3.2.rst:1937
msgid "dis"
msgstr "dis"

#: ../../whatsnew/3.2.rst:1939
#, fuzzy
msgid ""
"The :mod:`dis` module gained two new functions for inspecting code, :func:"
"`~dis.code_info` and :func:`~dis.show_code`.  Both provide detailed code "
"object information for the supplied function, method, source code string or "
"code object.  The former returns a string and the latter prints it::"
msgstr ""
":mod:`dis` 模組獲得了兩個用於檢查程式碼的新函式，:func:`~dis.code_info` 和 "
":func:`~dis.show_code`。兩者都為提供的函式、方法、源程式碼字串或程式碼物件提"
"供詳細的程式碼物件資訊。前者回傳一個字串，後者印出它::"

#: ../../whatsnew/3.2.rst:1966
#, fuzzy
msgid ""
"In addition, the :func:`~dis.dis` function now accepts string arguments so "
"that the common idiom ``dis(compile(s, '', 'eval'))`` can be shortened to "
"``dis(s)``::"
msgstr ""
"此外，:func:`~dis.dis` 函式現在接受字串參數，因此常見的習語 ``dis(compile(s, "
"'', 'eval'))`` 可以縮短為 ``dis(s ）``::"

#: ../../whatsnew/3.2.rst:1988
#, fuzzy
msgid ""
"Taken together, these improvements make it easier to explore how CPython is "
"implemented and to see for yourself what the language syntax does under-the-"
"hood."
msgstr "總而言之，這些改進使探索 CPython "
"的實作方式以及親自了解語言語法在幕後的作用變得更加容易。"

#: ../../whatsnew/3.2.rst:1992
#, fuzzy
msgid "(Contributed by Nick Coghlan in :issue:`9147`.)"
msgstr "（由 Nick Coghlan 在 :issue:`9147` 中貢獻。）"

#: ../../whatsnew/3.2.rst:1995
msgid "dbm"
msgstr "dbm"

#: ../../whatsnew/3.2.rst:1997
#, fuzzy
msgid ""
"All database modules now support the :meth:`get` and :meth:`setdefault` "
"methods."
msgstr "所有資料庫模組現在都支援 :meth:`get` 和 :meth:`setdefault` 方法。"

#: ../../whatsnew/3.2.rst:1999
#, fuzzy
msgid "(Suggested by Ray Allen in :issue:`9523`.)"
msgstr "（由 Ray Allen 在 :issue:`9523` 中建議。）"

#: ../../whatsnew/3.2.rst:2002
msgid "ctypes"
msgstr "ctypes"

#: ../../whatsnew/3.2.rst:2004
#, fuzzy
msgid ""
"A new type, :class:`ctypes.c_ssize_t` represents the C :c:type:`ssize_t` "
"datatype."
msgstr "新型別 ctypes.c_ssize_t 表示 C :c:type:ssize_t 資料型別。"

#: ../../whatsnew/3.2.rst:2007
msgid "site"
msgstr "site"

#: ../../whatsnew/3.2.rst:2009
#, fuzzy
msgid ""
"The :mod:`site` module has three new functions useful for reporting on the "
"details of a given Python installation."
msgstr ":mod:`site` 模組具有三個新功能，可用於報告給定 Python 安裝的詳細資訊。"

#: ../../whatsnew/3.2.rst:2012
#, fuzzy
msgid ""
":func:`~site.getsitepackages` lists all global site-packages directories."
msgstr ":func:`~site.getsitepackages` 列出所有全局站點包目錄。"

#: ../../whatsnew/3.2.rst:2014
#, fuzzy
msgid ""
":func:`~site.getuserbase` reports on the user's base directory where data "
"can be stored."
msgstr ":func:`~site.getuserbase` 報告可以儲存資料的使用者基本目錄。"

#: ../../whatsnew/3.2.rst:2017
#, fuzzy
msgid ""
":func:`~site.getusersitepackages` reveals the user-specific site-packages "
"directory path."
msgstr ":func:`~site.getusersitepackages` 顯示使用者特定的站點包目錄路徑。"

#: ../../whatsnew/3.2.rst:2032
#, fuzzy
msgid ""
"Conveniently, some of site's functionality is accessible directly from the "
"command-line:"
msgstr "方便的是，網站的一些功能可以直接從命令列訪問："

#: ../../whatsnew/3.2.rst:2042
#, fuzzy
msgid "(Contributed by Tarek Ziadé in :issue:`6693`.)"
msgstr "（由 Tarek Ziadé 在 :issue:`6693` 中貢獻。）"

#: ../../whatsnew/3.2.rst:2045
msgid "sysconfig"
msgstr "sysconfig"

#: ../../whatsnew/3.2.rst:2047
#, fuzzy
msgid ""
"The new :mod:`sysconfig` module makes it straightforward to discover "
"installation paths and configuration variables that vary across platforms "
"and installations."
msgstr "新的 :mod:`sysconfig` 模組可以直接發現安裝路徑和配置變數因平台和安裝而異。"

#: ../../whatsnew/3.2.rst:2051
#, fuzzy
msgid ""
"The module offers access simple access functions for platform and version "
"information:"
msgstr "該模組提供訪問平台和版本資訊的簡單訪問功能："

#: ../../whatsnew/3.2.rst:2054
#, fuzzy
msgid ""
":func:`~sysconfig.get_platform` returning values like *linux-i586* or "
"*macosx-10.6-ppc*."
msgstr ""
":func:`~sysconfig.get_platform` 回傳類似 *linux-i586* 或 *macosx-10.6-ppc* "
"的值。"

#: ../../whatsnew/3.2.rst:2056
#, fuzzy
msgid ""
":func:`~sysconfig.get_python_version` returns a Python version string such "
"as \"3.2\"."
msgstr ":func:`~sysconfig.get_python_version` 回傳 Python 版本字串，例如“3.2”。"

#: ../../whatsnew/3.2.rst:2059
#, fuzzy
msgid ""
"It also provides access to the paths and variables corresponding to one of "
"seven named schemes used by :mod:`distutils`.  Those include *posix_prefix*, "
"*posix_home*, *posix_user*, *nt*, *nt_user*, *os2*, *os2_home*:"
msgstr ""
"它還提供對與 distutils 使用的七個命名方案之一相對應的路徑和變數的訪問。"
"這些包括 *posix_prefix*、*posix_home*、*posix_user*、*nt*、*nt_user*、*os2*、"
"*os2_home*："

#: ../../whatsnew/3.2.rst:2063
#, fuzzy
msgid ""
":func:`~sysconfig.get_paths` makes a dictionary containing installation "
"paths for the current installation scheme."
msgstr ":func:`~sysconfig.get_paths` 建立一個包含當前安裝方案的安裝路徑的字典。"

#: ../../whatsnew/3.2.rst:2065
#, fuzzy
msgid ""
":func:`~sysconfig.get_config_vars` returns a dictionary of platform specific "
"variables."
msgstr ":func:`~sysconfig.get_config_vars` 回傳平台特定變數的字典。"

#: ../../whatsnew/3.2.rst:2068
#, fuzzy
msgid "There is also a convenient command-line interface:"
msgstr "還有一個方便的命令列界面："

#: ../../whatsnew/3.2.rst:2107
#, fuzzy
msgid "(Moved out of Distutils by Tarek Ziadé.)"
msgstr "（由 Tarek Ziadé 移出 Distutils。）"

#: ../../whatsnew/3.2.rst:2110
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.2.rst:2112
#, fuzzy
msgid ""
"The :mod:`pdb` debugger module gained a number of usability improvements:"
msgstr ":mod:`pdb` 除錯器模組獲得了許多可用性改進："

#: ../../whatsnew/3.2.rst:2114
#, fuzzy
msgid ""
":file:`pdb.py` now has a ``-c`` option that executes commands as given in a :"
"file:`.pdbrc` script file."
msgstr ":file:`pdb.py` 現在有一個 ``-c`` 選項，可以執行 :file:`.pdbrc` "
"腳本文件中給出的命令。"

#: ../../whatsnew/3.2.rst:2116
#, fuzzy
msgid ""
"A :file:`.pdbrc` script file can contain ``continue`` and ``next`` commands "
"that continue debugging."
msgstr ":file:`.pdbrc` 腳本文件可以包含繼續除錯的``continue`` 和``next`` 命令。"

#: ../../whatsnew/3.2.rst:2118
#, fuzzy
msgid "The :class:`Pdb` class constructor now accepts a *nosigint* argument."
msgstr ":class:`Pdb` 類構造函式現在接受 *nosigint* 參數。"

#: ../../whatsnew/3.2.rst:2119
#, fuzzy
msgid ""
"New commands: ``l(list)``, ``ll(long list)`` and ``source`` for listing "
"source code."
msgstr "新命令：``l(list)``、``ll(long list)`` 和 ``source`` 用於列出源程式碼。"

#: ../../whatsnew/3.2.rst:2121
#, fuzzy
msgid ""
"New commands: ``display`` and ``undisplay`` for showing or hiding the value "
"of an expression if it has changed."
msgstr "新命令：``display`` 和 ``undisplay`` 用於顯示或隱藏已更改的表達式的值。"

#: ../../whatsnew/3.2.rst:2123
#, fuzzy
msgid ""
"New command: ``interact`` for starting an interactive interpreter containing "
"the global and local  names found in the current scope."
msgstr "新命令：``interact`` "
"用於啟動包含在當前範圍內找到的全局和局部名稱的交互式直譯器。"

#: ../../whatsnew/3.2.rst:2125
#, fuzzy
msgid "Breakpoints can be cleared by breakpoint number."
msgstr "斷點可以通過斷點號清除。"

#: ../../whatsnew/3.2.rst:2127
#, fuzzy
msgid "(Contributed by Georg Brandl, Antonio Cuni and Ilya Sandler.)"
msgstr "（由 Georg Brandl、Antonio Cuni 和 Ilya Sandler 提供。）"

#: ../../whatsnew/3.2.rst:2130
msgid "configparser"
msgstr "configparser"

#: ../../whatsnew/3.2.rst:2132
#, fuzzy
msgid ""
"The :mod:`configparser` module was modified to improve usability and "
"predictability of the default parser and its supported INI syntax.  The old :"
"class:`ConfigParser` class was removed in favor of :class:`SafeConfigParser` "
"which has in turn been renamed to :class:`~configparser.ConfigParser`. "
"Support for inline comments is now turned off by default and section or "
"option duplicates are not allowed in a single configuration source."
msgstr ""
"修改了 :mod:`configparser` 模組以提高預設剖析器及其支援的 INI "
"語法的可用性和可預測性。舊的 :class:`ConfigParser` 類被刪除，取而代之的是 "
":class:`SafeConfigParser`，後者又被重命名為 :class:`~configparser.ConfigParse"
"r`。現在預設關閉對內聯註釋的支援，並且在單個配置源中不允許重複部分或選項。"

#: ../../whatsnew/3.2.rst:2139
#, fuzzy
msgid "Config parsers gained a new API based on the mapping protocol::"
msgstr "配置剖析器獲得了一個基於映射協定的新 API："

#: ../../whatsnew/3.2.rst:2167
#, fuzzy
msgid ""
"The new API is implemented on top of the classical API, so custom parser "
"subclasses should be able to use it without modifications."
msgstr "新 API 是在經典 API "
"之上實作的，因此自定義剖析器子類別應該能夠在不修改的情況下使用它。"

#: ../../whatsnew/3.2.rst:2170
#, fuzzy
msgid ""
"The INI file structure accepted by config parsers can now be customized. "
"Users can specify alternative option/value delimiters and comment prefixes, "
"change the name of the *DEFAULT* section or switch the interpolation syntax."
msgstr ""
"現在可以自定義配置剖析器接受的 INI "
"文件結構。使用者可以指定替代選項/值分隔符和註釋前綴，更改 *DEFAULT* "
"部分的名稱或切換插值語法。"

#: ../../whatsnew/3.2.rst:2174
#, fuzzy
msgid ""
"There is support for pluggable interpolation including an additional "
"interpolation handler :class:`~configparser.ExtendedInterpolation`::"
msgstr "支援可插入插值，包括一個額外的插值處理程式 :class:`~configparser."
"ExtendedInterpolation`::"

#: ../../whatsnew/3.2.rst:2207
#, fuzzy
msgid ""
"A number of smaller features were also introduced, like support for "
"specifying encoding in read operations, specifying fallback values for get-"
"functions, or reading directly from dictionaries and strings."
msgstr "還引入了許多較小的功能，例如支援在讀取操作中指定編碼、為 get "
"函式指定回退值或直接從字典和字串中讀取。"

#: ../../whatsnew/3.2.rst:2211
#, fuzzy
msgid "(All changes contributed by Łukasz Langa.)"
msgstr "（所有更改均由 Łukasz Langa 貢獻。）"

#: ../../whatsnew/3.2.rst:2216
msgid "urllib.parse"
msgstr "urllib.parse"

#: ../../whatsnew/3.2.rst:2218
#, fuzzy
msgid ""
"A number of usability improvements were made for the :mod:`urllib.parse` "
"module."
msgstr "對 :mod:`urllib.parse` 模組進行了許多可用性改進。"

#: ../../whatsnew/3.2.rst:2220
#, fuzzy
msgid ""
"The :func:`~urllib.parse.urlparse` function now supports `IPv6 <https://en."
"wikipedia.org/wiki/IPv6>`_ addresses as described in :rfc:`2732`:"
msgstr ""
":func:`~urllib.parse.urlparse` 函式現在支援 `IPv6 <https://en.wikipedia.org/"
"wiki/IPv6>`_ 地址，如 :rfc:`2732` 中所述："

#: ../../whatsnew/3.2.rst:2232
#, fuzzy
msgid ""
"The :func:`~urllib.parse.urldefrag` function now returns a :term:`named "
"tuple`::"
msgstr ":func:`~urllib.parse.urldefrag` 函式現在回傳一個 :term:`named tuple`::"

#: ../../whatsnew/3.2.rst:2242
#, fuzzy
msgid ""
"And, the :func:`~urllib.parse.urlencode` function is now much more flexible, "
"accepting either a string or bytes type for the *query* argument.  If it is "
"a string, then the *safe*, *encoding*, and *error* parameters are sent to :"
"func:`~urllib.parse.quote_plus` for encoding::"
msgstr ""
"而且，:func:`~urllib.parse.urlencode` 函式現在更加靈活，"
"可以接受字串或位元組型別作為 *query* 參數。如果它是一個字串，那麼 "
"*safe*、*encoding* 和 *error* 參數被發送到 :func:`~urllib.parse.quote_plus` "
"進行編碼::"

#: ../../whatsnew/3.2.rst:2253
#, fuzzy
msgid ""
"As detailed in :ref:`parsing-ascii-encoded-bytes`, all the :mod:`urllib."
"parse` functions now accept ASCII-encoded byte strings as input, so long as "
"they are not mixed with regular strings.  If ASCII-encoded byte strings are "
"given as parameters, the return types will also be an ASCII-encoded byte "
"strings:"
msgstr ""
"如 :ref:`parsing-ascii-encoded-bytes` 中所述，所有 :mod:`urllib.parse` "
"函式現在都接受 ASCII 編碼的位元組字串作為輸入，只要它們不與常規字串混合即可。"
"如果 ASCII 編碼的位元組字串作為參數給出，則回傳型別也將是 ASCII "
"編碼的位元組字串："

#: ../../whatsnew/3.2.rst:2262
#, fuzzy
msgid ""
"(Work by Nick Coghlan, Dan Mahn, and Senthil Kumaran in :issue:`2987`, :"
"issue:`5468`, and :issue:`9873`.)"
msgstr ""
"（Nick Coghlan、Dan Mahn 和 Senthil Kumaran 在 :issue:`2987`、:issue:`5468` "
"和 :issue:`9873` 中的工作。）"

#: ../../whatsnew/3.2.rst:2266
msgid "mailbox"
msgstr "mailbox"

#: ../../whatsnew/3.2.rst:2268
#, fuzzy
msgid ""
"Thanks to a concerted effort by R. David Murray, the :mod:`mailbox` module "
"has been fixed for Python 3.2.  The challenge was that mailbox had been "
"originally designed with a text interface, but email messages are best "
"represented with :class:`bytes` because various parts of a message may have "
"different encodings."
msgstr ""
"由於 R. David Murray 的共同努力，:mod:`mailbox` 模組已針對 Python 3.2 "
"得到修復。挑戰在於郵箱最初是用文本界面設計的，但電子郵件消息最好用 "
":class:`bytes` 表示，因為消息的各個部分可能有不同的編碼。"

#: ../../whatsnew/3.2.rst:2273
#, fuzzy
msgid ""
"The solution harnessed the :mod:`email` package's binary support for parsing "
"arbitrary email messages.  In addition, the solution required a number of "
"API changes."
msgstr "該解決方案利用 :mod:`email` 包的二進位支援來剖析任意電子郵件消息。此外，"
"該解決方案需要進行大量 API 更改。"

#: ../../whatsnew/3.2.rst:2277
#, fuzzy
msgid ""
"As expected, the :meth:`~mailbox.Mailbox.add` method for :class:`mailbox."
"Mailbox` objects now accepts binary input."
msgstr "正如預期的那樣，mailbox.Mailbox 物件的 :meth:`~mailbox.Mailbox.add` "
"方法現在接受二進位輸入。"

#: ../../whatsnew/3.2.rst:2280
#, fuzzy
msgid ""
":class:`~io.StringIO` and text file input are deprecated.  Also, string "
"input will fail early if non-ASCII characters are used.  Previously it would "
"fail when the email was processed in a later step."
msgstr ""
":class:`~io.StringIO` 和文本文件輸入已棄用。此外，如果使用非 ASCII "
"字元，字串輸入將提前失敗。以前在稍後的步驟中處理電子郵件時會失敗。"

#: ../../whatsnew/3.2.rst:2284
#, fuzzy
msgid ""
"There is also support for binary output.  The :meth:`~mailbox.Mailbox."
"get_file` method now returns a file in the binary mode (where it used to "
"incorrectly set the file to text-mode).  There is also a new :meth:`~mailbox."
"Mailbox.get_bytes` method that returns a :class:`bytes` representation of a "
"message corresponding to a given *key*."
msgstr ""
"還支援二進位輸出。 :meth:`~mailbox.Mailbox.get_file` "
"方法現在回傳一個二進位模式的文件（它曾經錯誤地將文件設定為文本模式）。"
"還有一個新的 :meth:`~mailbox.Mailbox.get_bytes` 方法回傳對應於給定 *key* "
"的消息的 :class:`bytes` 表示。"

#: ../../whatsnew/3.2.rst:2290
#, fuzzy
msgid ""
"It is still possible to get non-binary output using the old API's :meth:"
"`~mailbox.Mailbox.get_string` method, but that approach is not very useful.  "
"Instead, it is best to extract messages from a :class:`~mailbox.Message` "
"object or to load them from binary input."
msgstr ""
"使用舊 API 的 :meth:`~mailbox.Mailbox.get_string` "
"方法仍然可以獲得非二進位輸出，但這種方法不是很有用。相反，最好從 "
":class:`~mailbox.Message` 對像中提取消息或從二進位輸入中加載它們。"

#: ../../whatsnew/3.2.rst:2295
#, fuzzy
msgid ""
"(Contributed by R. David Murray, with efforts from Steffen Daode Nurpmeso "
"and an initial patch by Victor Stinner in :issue:`9124`.)"
msgstr ""
"（由 R. David Murray 貢獻，Steffen Daode Nurpmeso 的努力和 Victor Stinner 在 "
":issue:`9124` 中的初始補丁。）"

#: ../../whatsnew/3.2.rst:2299
msgid "turtledemo"
msgstr "turtledemo"

#: ../../whatsnew/3.2.rst:2301
#, fuzzy
msgid ""
"The demonstration code for the :mod:`turtle` module was moved from the "
"*Demo* directory to main library.  It includes over a dozen sample scripts "
"with lively displays.  Being on :attr:`sys.path`, it can now be run directly "
"from the command-line:"
msgstr ""
":mod:`turtle` 模組的演示程式碼已從 *Demo* "
"目錄移至主庫。它包括十幾個帶有生動顯示的示例腳本。在 :attr:`sys.path` "
"上，它現在可以直接從命令列運行："

#: ../../whatsnew/3.2.rst:2310
#, fuzzy
msgid ""
"(Moved from the Demo directory by Alexander Belopolsky in :issue:`10199`.)"
msgstr "（從 Alexander Belopolsky 在 :issue:`10199` 的 Demo 目錄中移出。）"

#: ../../whatsnew/3.2.rst:2313
#, fuzzy
msgid "Multi-threading"
msgstr "多執行緒"

#: ../../whatsnew/3.2.rst:2315
#, fuzzy
msgid ""
"The mechanism for serializing execution of concurrently running Python "
"threads (generally known as the :term:`GIL` or Global Interpreter Lock) has "
"been rewritten.  Among the objectives were more predictable switching "
"intervals and reduced overhead due to lock contention and the number of "
"ensuing system calls.  The notion of a \"check interval\" to allow thread "
"switches has been abandoned and replaced by an absolute duration expressed "
"in seconds.  This parameter is tunable through :func:`sys."
"setswitchinterval()`. It currently defaults to 5 milliseconds."
msgstr ""
"並發運行的 Python 執行緒的序列化執行機制（通常稱為 GIL 或全局直譯器鎖）已被重"
"寫。目標之一是更可預測的切換間隔和減少由於鎖爭用和隨後的系統呼叫數量而導致的"
"開銷。允許執行緒切換的“檢查間隔”的概念已被放棄，取而代之的是以秒為單位的絕對"
"持續時間。此參數可通過 :func:`sys.setswitchinterval()` 進行調整。目前預設為 "
"5 毫秒。"

#: ../../whatsnew/3.2.rst:2324
#, fuzzy
msgid ""
"Additional details about the implementation can be read from a `python-dev "
"mailing-list message <https://mail.python.org/pipermail/python-dev/2009-"
"October/093321.html>`_ (however, \"priority requests\" as exposed in this "
"message have not been kept for inclusion)."
msgstr ""
"有關實作的其他詳細資訊可以從`python-dev 郵件列表消息<https://mail.python.org/"
"pipermail/python-dev/2009-October/093321."
"html>`_（但是，“優先級未保留此消息中公開的請求”）。"

#: ../../whatsnew/3.2.rst:2330
#, fuzzy
msgid "(Contributed by Antoine Pitrou.)"
msgstr "（由安托萬·皮特魯提供。）"

#: ../../whatsnew/3.2.rst:2332
#, fuzzy
msgid ""
"Regular and recursive locks now accept an optional *timeout* argument to "
"their :meth:`~threading.Lock.acquire` method.  (Contributed by Antoine "
"Pitrou; :issue:`7316`.)"
msgstr ""
"常規鎖和遞迴鎖現在接受一個可選的 *timeout* 參數到它們的 :meth:`~threading.Lock"
".acquire` 方法。 （由 Antoine Pitrou 提供；:issue:`7316`。）"

#: ../../whatsnew/3.2.rst:2336
#, fuzzy
msgid ""
"Similarly, :meth:`threading.Semaphore.acquire` also gained a *timeout* "
"argument.  (Contributed by Torsten Landschoff; :issue:`850728`.)"
msgstr ""
"同樣，:meth:`threading.Semaphore.acquire` 也獲得了 *timeout* 參數。 （由 "
"Torsten Landschoff 提供；:issue:`850728`。）"

#: ../../whatsnew/3.2.rst:2339
#, fuzzy
msgid ""
"Regular and recursive lock acquisitions can now be interrupted by signals on "
"platforms using Pthreads.  This means that Python programs that deadlock "
"while acquiring locks can be successfully killed by repeatedly sending "
"SIGINT to the process (by pressing :kbd:`Ctrl+C` in most shells). "
"(Contributed by Reid Kleckner; :issue:`8844`.)"
msgstr ""
"在使用 Pthreads 的平台上，現在可以通過信號中斷常規和遞迴鎖獲取。"
"這意味著在獲取鎖時死鎖的 Python 程式可以通過向行程重複發送 SIGINT "
"來成功終止（在大多數 shell 中按 Ctrl+C）。 （由 Reid Kleckner "
"提供；:issue:`8844`。）"

#: ../../whatsnew/3.2.rst:2347
#, fuzzy
msgid "Optimizations"
msgstr "最佳化"

#: ../../whatsnew/3.2.rst:2349
#, fuzzy
msgid "A number of small performance enhancements have been added:"
msgstr "新增了許多小的性能增強："

#: ../../whatsnew/3.2.rst:2351
#, fuzzy
msgid ""
"Python's peephole optimizer now recognizes patterns such ``x in {1, 2, 3}`` "
"as being a test for membership in a set of constants.  The optimizer recasts "
"the :class:`set` as a :class:`frozenset` and stores the pre-built constant."
msgstr ""
"Python 的窺孔最佳化器現在可以將諸如“x in {1, 2, "
"3}”之類的模式識別為一組常數成員資格的測試。最佳化器將 :class:`set` 重鑄為 "
":class:`frozenset` 並儲存預建常數。"

#: ../../whatsnew/3.2.rst:2355
#, fuzzy
msgid ""
"Now that the speed penalty is gone, it is practical to start writing "
"membership tests using set-notation.  This style is both semantically clear "
"and operationally fast::"
msgstr "現在速度損失已經消失，開始使用集合表示法編寫成員資格測試是可行的。這種風格既"
"語義清晰又操作快速::"

#: ../../whatsnew/3.2.rst:2363
#, fuzzy
msgid ""
"(Patch and additional tests contributed by Dave Malcolm; :issue:`6690`)."
msgstr "（補丁和附加測試由 Dave Malcolm 提供；:issue:`6690`）。"

#: ../../whatsnew/3.2.rst:2365
#, fuzzy
msgid ""
"Serializing and unserializing data using the :mod:`pickle` module is now "
"several times faster."
msgstr "使用 pickle 模組序列化和反序列化資料現在快了幾倍。"

#: ../../whatsnew/3.2.rst:2368
#, fuzzy
msgid ""
"(Contributed by Alexandre Vassalotti, Antoine Pitrou and the Unladen Swallow "
"team in :issue:`9410` and :issue:`3873`.)"
msgstr ""
"（由 Alexandre Vassalotti、Antoine Pitrou 和 Unladen Swallow 團隊在 "
":issue:`9410` 和 :issue:`3873` 中貢獻。）"

#: ../../whatsnew/3.2.rst:2371
#, fuzzy
msgid ""
"The `Timsort algorithm <https://en.wikipedia.org/wiki/Timsort>`_ used in :"
"meth:`list.sort` and :func:`sorted` now runs faster and uses less memory "
"when called with a :term:`key function`.  Previously, every element of a "
"list was wrapped with a temporary object that remembered the key value "
"associated with each element.  Now, two arrays of keys and values are sorted "
"in parallel.  This saves the memory consumed by the sort wrappers, and it "
"saves time lost to delegating comparisons."
msgstr ""
"在 :meth:`list.sort` 和 :func:`sorted` 中使用的 `Timsort 演算法 <https://en."
"wikipedia.org/wiki/Timsort>`_ 現在運行得更快，並且在呼叫時使用更少的記憶體："
"術語：`關鍵功能`。以前，列表的每個元素都用一個臨時物件包裝，該物件會記住與每"
"個元素關聯的鍵值。現在，兩個鍵和值數組並行排序。這節省了排序包裝器消耗的記憶"
"體，並且節省了委託比較所浪費的時間。"

#: ../../whatsnew/3.2.rst:2379
#, fuzzy
msgid "(Patch by Daniel Stutzbach in :issue:`9915`.)"
msgstr "（Daniel Stutzbach 在 :issue:`9915` 中的補丁。）"

#: ../../whatsnew/3.2.rst:2381
#, fuzzy
msgid ""
"JSON decoding performance is improved and memory consumption is reduced "
"whenever the same string is repeated for multiple keys.  Also, JSON encoding "
"now uses the C speedups when the ``sort_keys`` argument is true."
msgstr ""
"每當為多個鍵重複相同的字串時，JSON 解碼性能得到提高並減少記憶體消耗。此外，"
"當 ``sort_keys`` 參數為真時，JSON 編碼現在使用 C 加速。"

#: ../../whatsnew/3.2.rst:2385
#, fuzzy
msgid ""
"(Contributed by Antoine Pitrou in :issue:`7451` and by Raymond Hettinger and "
"Antoine Pitrou in :issue:`10314`.)"
msgstr ""
"（由 Antoine Pitrou 在 :issue:`7451` 和 Raymond Hettinger 和 Antoine Pitrou "
"在 :issue:`10314` 中貢獻。）"

#: ../../whatsnew/3.2.rst:2388
#, fuzzy
msgid ""
"Recursive locks (created with the :func:`threading.RLock` API) now benefit "
"from a C implementation which makes them as fast as regular locks, and "
"between 10x and 15x faster than their previous pure Python implementation."
msgstr ""
"遞迴鎖（使用 :func:`threading.RLock` API 建立）現在受益於 C "
"實作，這使得它們與常規鎖一樣快，並且比以前的純 Python 實作快 10 到 15 倍。"

#: ../../whatsnew/3.2.rst:2392
#, fuzzy
msgid "(Contributed by Antoine Pitrou; :issue:`3001`.)"
msgstr "（由 Antoine Pitrou 提供；:issue:`3001`。）"

#: ../../whatsnew/3.2.rst:2394
#, fuzzy
msgid ""
"The fast-search algorithm in stringlib is now used by the :meth:`split`, :"
"meth:`rsplit`, :meth:`splitlines` and :meth:`replace` methods on :class:"
"`bytes`, :class:`bytearray` and :class:`str` objects. Likewise, the "
"algorithm is also used by :meth:`rfind`, :meth:`rindex`, :meth:`rsplit` and :"
"meth:`rpartition`."
msgstr ""
"stringlib 中的快速搜索演算法現在被 "
":meth:`split`、:meth:`rsplit`、:meth:`splitlines` 和 :meth:`replace` "
"方法用於 :class:`bytes`、:class :`bytearray` 和 :class:`str` 物件。同樣，"
"該演算法也被 :meth:`rfind`、:meth:`rindex`、:meth:`rsplit` 和 "
":meth:`rpartition` 使用。"

#: ../../whatsnew/3.2.rst:2400
#, fuzzy
msgid "(Patch by Florent Xicluna in :issue:`7622` and :issue:`7462`.)"
msgstr "（Florent Xicluna 在 :issue:`7622` 和 :issue:`7462` 中的補丁。）"

#: ../../whatsnew/3.2.rst:2403
#, fuzzy
msgid ""
"Integer to string conversions now work two \"digits\" at a time, reducing "
"the number of division and modulo operations."
msgstr "整數到字串的轉換現在一次處理兩個“數字”，減少了除法和模運算的次數。"

#: ../../whatsnew/3.2.rst:2406
#, fuzzy
msgid "(:issue:`6713` by Gawain Bolton, Mark Dickinson, and Victor Stinner.)"
msgstr "（:issue:`6713` 由 Gawain Bolton、Mark Dickinson 和 Victor Stinner。）"

#: ../../whatsnew/3.2.rst:2408
#, fuzzy
msgid ""
"There were several other minor optimizations. Set differencing now runs "
"faster when one operand is much larger than the other (patch by Andress "
"Bennetts in :issue:`8685`).  The :meth:`array.repeat` method has a faster "
"implementation (:issue:`1569291` by Alexander Belopolsky). The :class:"
"`BaseHTTPRequestHandler` has more efficient buffering (:issue:`3709` by "
"Andrew Schaaf).  The :func:`operator.attrgetter` function has been sped-up (:"
"issue:`10160` by Christos Georgiou).  And :class:`ConfigParser` loads multi-"
"line arguments a bit faster (:issue:`7113` by Łukasz Langa)."
msgstr ""
"還有其他一些小的最佳化。當一個操作數比另一個大得多時，集合差分現在運行得更快"
"（Andress Bennetts 在 :issue:`8685` 中的補丁）。 :meth:`array.repeat` "
"方法的實作速度更快（Alexander Belopolsky 的 :issue:`1569291`）。 "
":class:`BaseHTTPRequestHandler` 具有更高效的緩衝（Andrew Schaaf "
"的 :issue:`3709`）。 :func:`operator.attrgetter` 函式已加速（Christos "
"Georgiou 的 :issue:`10160`）。並且 :class:`ConfigParser` "
"加載多行參數的速度更快一些（ :issue:`7113` by Łukasz Langa）。"

#: ../../whatsnew/3.2.rst:2419
#, fuzzy
msgid "Unicode"
msgstr "統一碼"

#: ../../whatsnew/3.2.rst:2421
#, fuzzy
msgid ""
"Python has been updated to `Unicode 6.0.0 <https://unicode.org/versions/"
"Unicode6.0.0/>`_.  The update to the standard adds over 2,000 new characters "
"including `emoji <https://en.wikipedia.org/wiki/Emoji>`_ symbols which are "
"important for mobile phones."
msgstr ""
"Python 已更新為 `Unicode 6.0.0 <https://unicode.org/versions/Unicode6.0.0/"
">`_。該標準的更新增加了 2,000 多個新字元，包括對手機很重要的`emoji "
"<https://en.wikipedia.org/wiki/Emoji>`_ 符號。"

#: ../../whatsnew/3.2.rst:2426
#, fuzzy
msgid ""
"In addition, the updated standard has altered the character properties for "
"two Kannada characters (U+0CF1, U+0CF2) and one New Tai Lue numeric "
"character (U+19DA), making the former eligible for use in identifiers while "
"disqualifying the latter.  For more information, see `Unicode Character "
"Database Changes <https://www.unicode.org/versions/Unicode6.0.0/"
"#Database_Changes>`_."
msgstr ""
"此外，更新後的標準還更改了兩個卡納達字元（U+0CF1、U+0CF2）和一個新泰略數字字"
"元（U+19DA）的字元屬性，使前者可以在標識符中使用，而後者則被取消資格。有關詳"
"細資訊，請參閱`Unicode 字元資料庫更改 <https://www.unicode.org/versions/"
"Unicode6.0.0/#Database_Changes>`_。"

#: ../../whatsnew/3.2.rst:2434
#, fuzzy
msgid "Codecs"
msgstr "編解碼器"

#: ../../whatsnew/3.2.rst:2436
#, fuzzy
msgid "Support was added for *cp720* Arabic DOS encoding (:issue:`1616979`)."
msgstr "新增了對 *cp720* Arabic DOS 編碼的支援 (:issue:`1616979`)。"

#: ../../whatsnew/3.2.rst:2438
#, fuzzy
msgid ""
"MBCS encoding no longer ignores the error handler argument. In the default "
"strict mode, it raises an :exc:`UnicodeDecodeError` when it encounters an "
"undecodable byte sequence and an :exc:`UnicodeEncodeError` for an "
"unencodable character."
msgstr ""
"MBCS 編碼不再忽略錯誤處理程式參數。在預設的嚴格模式下，"
"它會在遇到無法解碼的位元組序列和無法編碼的字元時引發 "
":exc:`UnicodeDecodeError`。"

#: ../../whatsnew/3.2.rst:2443
#, fuzzy
msgid ""
"The MBCS codec supports ``'strict'`` and ``'ignore'`` error handlers for "
"decoding, and ``'strict'`` and ``'replace'`` for encoding."
msgstr "MBCS 編解碼器支援用於解碼的“嚴格”和“忽略”錯誤處理程式，以及用於編碼的“嚴格”和"
"“替換”。"

#: ../../whatsnew/3.2.rst:2446
#, fuzzy
msgid ""
"To emulate Python3.1 MBCS encoding, select the ``'ignore'`` handler for "
"decoding and the ``'replace'`` handler for encoding."
msgstr "要模擬 Python3.1 MBCS "
"編碼，請選擇“忽略”處理程式進行解碼，並選擇“替換”處理程式進行編碼。"

#: ../../whatsnew/3.2.rst:2449
#, fuzzy
msgid ""
"On Mac OS X, Python decodes command line arguments with ``'utf-8'`` rather "
"than the locale encoding."
msgstr "在 Mac OS X 上，Python 使用 ``utf-8``而不是語言環境編碼來解碼命令列參數。"

#: ../../whatsnew/3.2.rst:2452
#, fuzzy
msgid ""
"By default, :mod:`tarfile` uses ``'utf-8'`` encoding on Windows (instead of "
"``'mbcs'``) and the ``'surrogateescape'`` error handler on all operating "
"systems."
msgstr ""
"預設情況下，:mod:`tarfile` 在 Windows 上使用 ``'utf-8'`` 編碼（而不是 "
"``'mbcs'``），並在所有操作系統上使用 ``'surrogateescape'`` 錯誤處理程式。"

#: ../../whatsnew/3.2.rst:2458
msgid "Documentation"
msgstr "文件"

#: ../../whatsnew/3.2.rst:2460
#, fuzzy
msgid "The documentation continues to be improved."
msgstr "文檔繼續得到改進。"

#: ../../whatsnew/3.2.rst:2462
#, fuzzy
msgid ""
"A table of quick links has been added to the top of lengthy sections such "
"as :ref:`built-in-funcs`.  In the case of :mod:`itertools`, the links are "
"accompanied by tables of cheatsheet-style summaries to provide an overview "
"and memory jog without having to read all of the docs."
msgstr ""
"快速鏈接表已新增到冗長部分的頂部，例如 :ref:`built-in-funcs`。在 "
":mod:`itertools` 的情況下，鏈接附有備忘單樣式的摘要表格，以提供概述和記憶慢跑"
"，而無需閱讀所有文檔。"

#: ../../whatsnew/3.2.rst:2467
#, fuzzy
msgid ""
"In some cases, the pure Python source code can be a helpful adjunct to the "
"documentation, so now many modules now feature quick links to the latest "
"version of the source code.  For example, the :mod:`functools` module "
"documentation has a quick link at the top labeled:"
msgstr ""
"在某些情況下，純 Python 源程式碼可以作為文檔的有用附件，因此現在許多模組都具"
"有指向最新版本源程式碼的快速鏈接。例如，:mod:`functools` "
"模組文檔在頂部有一個快速鏈接，標籤為："

#: ../../whatsnew/3.2.rst:2472
#, fuzzy
msgid "**Source code** :source:`Lib/functools.py`."
msgstr "**原始碼**：:source:`Lib/functools.py`。"

#: ../../whatsnew/3.2.rst:2474
#, fuzzy
msgid ""
"(Contributed by Raymond Hettinger; see `rationale <https://rhettinger."
"wordpress.com/2011/01/28/open-your-source-more/>`_.)"
msgstr ""
"（由 Raymond Hettinger 提供；參見`基本原理 <https://rhettinger.wordpress.com/"
"2011/01/28/open-your-source-more/>`_。）"

#: ../../whatsnew/3.2.rst:2477
#, fuzzy
msgid ""
"The docs now contain more examples and recipes.  In particular, :mod:`re` "
"module has an extensive section, :ref:`re-examples`.  Likewise, the :mod:"
"`itertools` module continues to be updated with new :ref:`itertools-recipes`."
msgstr ""
"文檔現在包含更多示例和方法。特別是，:mod:`re` 模組有一個擴充部分，:ref:`re-"
"examples`。同樣，:mod:`itertools` 模組繼續使用新的 :ref:`itertools-recipes` "
"進行更新。"

#: ../../whatsnew/3.2.rst:2482
#, fuzzy
msgid ""
"The :mod:`datetime` module now has an auxiliary implementation in pure "
"Python. No functionality was changed.  This just provides an easier-to-read "
"alternate implementation."
msgstr ":mod:`datetime` 模組現在有一個純 Python "
"的輔助實作。沒有更改任何功能。這只是提供了一個更易於閱讀的替代實作。"

#: ../../whatsnew/3.2.rst:2486
#, fuzzy
msgid "(Contributed by Alexander Belopolsky in :issue:`9528`.)"
msgstr "（由 Alexander Belopolsky 在 :issue:`9528` 中貢獻。）"

#: ../../whatsnew/3.2.rst:2488
#, fuzzy
msgid ""
"The unmaintained :file:`Demo` directory has been removed.  Some demos were "
"integrated into the documentation, some were moved to the :file:`Tools/demo` "
"directory, and others were removed altogether."
msgstr "未維護的 Demo 目錄已被刪除。一些演示被集成到文檔中，一些被移動到 :file:`"
"Tools/demo` 目錄，還有一些被完全刪除。"

#: ../../whatsnew/3.2.rst:2492
#, fuzzy
msgid "(Contributed by Georg Brandl in :issue:`7962`.)"
msgstr "（由 Georg Brandl 在 :issue:`7962` 中貢獻。）"

#: ../../whatsnew/3.2.rst:2496
msgid "IDLE"
msgstr "IDLE"

#: ../../whatsnew/3.2.rst:2498
#, fuzzy
msgid ""
"The format menu now has an option to clean source files by stripping "
"trailing whitespace."
msgstr "格式菜單現在有一個選項可以通過去除尾隨空格來清理源文件。"

#: ../../whatsnew/3.2.rst:2501
#, fuzzy
msgid "(Contributed by Raymond Hettinger; :issue:`5150`.)"
msgstr "（由 Raymond Hettinger 提供；:issue:`5150`。）"

#: ../../whatsnew/3.2.rst:2503
#, fuzzy
msgid "IDLE on Mac OS X now works with both Carbon AquaTk and Cocoa AquaTk."
msgstr "Mac OS X 上的 IDLE 現在可以與 Carbon AquaTk 和 Cocoa AquaTk 一起使用。"

#: ../../whatsnew/3.2.rst:2505
#, fuzzy
msgid ""
"(Contributed by Kevin Walzer, Ned Deily, and Ronald Oussoren; :issue:`6075`.)"
msgstr "（由 Kevin Walzer、Ned Deily 和 Ronald Oussoren 提供；:issue:`6075`。）"

#: ../../whatsnew/3.2.rst:2508
#, fuzzy
msgid "Code Repository"
msgstr "程式碼庫"

#: ../../whatsnew/3.2.rst:2510
#, fuzzy
msgid ""
"In addition to the existing Subversion code repository at https://svn.python."
"org there is now a `Mercurial <https://www.mercurial-scm.org/>`_ repository "
"at https://hg.python.org/\\ ."
msgstr ""
"除了位於 https://svn.python.org 的現有 Subversion 程式碼儲存庫之外，"
"現在還有一個位於 https://hg.python 的`Mercurial <https://www.mercurial-scm."
"org/>`_ 儲存庫。組織/\\。"

#: ../../whatsnew/3.2.rst:2514
#, fuzzy
msgid ""
"After the 3.2 release, there are plans to switch to Mercurial as the primary "
"repository.  This distributed version control system should make it easier "
"for members of the community to create and share external changesets.  See :"
"pep:`385` for details."
msgstr ""
"在 3.2 發布後，有計劃切換到 Mercurial 作為主要儲存庫。這個分佈式版本控制系統"
"應該讓社區成員更容易建立和共享外部變更集。有關詳細資訊，請參閱 :pep:`385`。"

#: ../../whatsnew/3.2.rst:2519
#, fuzzy
msgid ""
"To learn to use the new version control system, see the `Quick Start "
"<https://www.mercurial-scm.org/wiki/QuickStart>`_ or the `Guide to Mercurial "
"Workflows <https://www.mercurial-scm.org/guide>`_."
msgstr ""
"要學習使用新的版本控制系統，請參閱`快速入門 <https://www.mercurial-scm.org/"
"wiki/QuickStart>`_ 或`Guide to Mercurial Workflows <https://www.mercurial- "
"scm.org/guide>`_。"

#: ../../whatsnew/3.2.rst:2525
#, fuzzy
msgid "Build and C API Changes"
msgstr "構建和 C API 更改"

#: ../../whatsnew/3.2.rst:2527
#, fuzzy
msgid "Changes to Python's build process and to the C API include:"
msgstr "Python 構建過程和 C API 的變化包括："

#: ../../whatsnew/3.2.rst:2529
#, fuzzy
msgid ""
"The *idle*, *pydoc* and *2to3* scripts are now installed with a version-"
"specific suffix on ``make altinstall`` (:issue:`10679`)."
msgstr ""
"*idle*、*pydoc* 和 *2to3* 腳本現在安裝時帶有特定於版本的後綴“make "
"altinstall”（:issue:`10679`)）。"

#: ../../whatsnew/3.2.rst:2532
#, fuzzy
msgid ""
"The C functions that access the Unicode Database now accept and return "
"characters from the full Unicode range, even on narrow unicode builds "
"(Py_UNICODE_TOLOWER, Py_UNICODE_ISDECIMAL, and others).  A visible "
"difference in Python is that :func:`unicodedata.numeric` now returns the "
"correct value for large code points, and :func:`repr` may consider more "
"characters as printable."
msgstr ""
"訪問 Unicode 資料庫的 C 函式現在接受並回傳來自完整 Unicode 範圍的字元，"
"即使是在狹窄的 Unicode 構建（Py_UNICODE_TOLOWER、Py_UNICODE_ISDECIMAL "
"等）上也是如此。 Python 中的一個明顯區別是 :func:`unicodedata.numeric` "
"現在為大程式碼點回傳正確的值，而 :func:`repr` 可能認為更多字元是可印出的。"

#: ../../whatsnew/3.2.rst:2539
#, fuzzy
msgid ""
"(Reported by Bupjoe Lee and fixed by Amaury Forgeot D'Arc; :issue:`5127`.)"
msgstr "（由 Bupjoe Lee 報告並由 Amaury Forgeot D'Arc 修復；:issue:`5127`。）"

#: ../../whatsnew/3.2.rst:2541
#, fuzzy
msgid ""
"Computed gotos are now enabled by default on supported compilers (which are "
"detected by the configure script).  They can still be disabled selectively "
"by specifying ``--without-computed-gotos``."
msgstr ""
"計算的 goto 現在在支援的編譯器上預設啟用（由配置腳本檢測）。"
"它們仍然可以通過指定 --without-computed-gotos 來選擇性地禁用。"

#: ../../whatsnew/3.2.rst:2545
#, fuzzy
msgid "(Contributed by Antoine Pitrou; :issue:`9203`.)"
msgstr "（由 Antoine Pitrou 提供；:issue:`9203`。）"

#: ../../whatsnew/3.2.rst:2547
#, fuzzy
msgid ""
"The option ``--with-wctype-functions`` was removed.  The built-in unicode "
"database is now used for all functions."
msgstr "選項 ``--with-wctype-functions`` 已被刪除。內建的 unicode "
"資料庫現在用於所有功能。"

#: ../../whatsnew/3.2.rst:2550
#, fuzzy
msgid "(Contributed by Amaury Forgeot D'Arc; :issue:`9210`.)"
msgstr "（由 Amaury Forgeot D'Arc 提供；:issue:`9210`。）"

#: ../../whatsnew/3.2.rst:2552
#, fuzzy
msgid ""
"Hash values are now values of a new type, :c:type:`Py_hash_t`, which is "
"defined to be the same size as a pointer.  Previously they were of type "
"long, which on some 64-bit operating systems is still only 32 bits long.  As "
"a result of this fix, :class:`set` and :class:`dict` can now hold more than "
"``2**32`` entries on builds with 64-bit pointers (previously, they could "
"grow to that size but their performance degraded catastrophically)."
msgstr ""
"雜湊值現在是一種新型別的值，:c:type:`Py_hash_t`，它被定義為與指標大小相同。"
"以前它們是 long 型別，在某些 64 位操作系統上仍然只有 32 "
"位長。作為此修復的結果，:class:`set` 和 :class:`dict` 現在可以在具有 64 "
"位指標的構建中容納超過 ``2**32`` "
"條目（以前，它們可以增長到該大小但他們的表現災難性地下降了）。"

#: ../../whatsnew/3.2.rst:2559
#, fuzzy
msgid ""
"(Suggested by Raymond Hettinger and implemented by Benjamin Peterson; :issue:"
"`9778`.)"
msgstr "（由 Raymond Hettinger 建議並由 Benjamin Peterson 實施；:issue:`9778`。）"

#: ../../whatsnew/3.2.rst:2562
#, fuzzy
msgid ""
"A new macro :c:macro:`Py_VA_COPY` copies the state of the variable argument "
"list.  It is equivalent to C99 *va_copy* but available on all Python "
"platforms (:issue:`2443`)."
msgstr ""
"新巨集 :c:macro:`Py_VA_COPY` 複製變數參數列表的狀態。它等同於 C99 *va_copy* "
"但在所有 Python 平台上都可用 (:issue:`2443`)。"

#: ../../whatsnew/3.2.rst:2566
#, fuzzy
msgid ""
"A new C API function :c:func:`PySys_SetArgvEx` allows an embedded "
"interpreter to set :attr:`sys.argv` without also modifying :attr:`sys.path` "
"(:issue:`5753`)."
msgstr ""
"新的 C API 函式:c:func:`PySys_SetArgvEx` 允許嵌入式直譯器設定 :attr:`sys.argv`"
" 而無需修改 :attr:`sys.path` (:issue:`5753`)。"

#: ../../whatsnew/3.2.rst:2570
#, fuzzy
msgid ""
":c:macro:`PyEval_CallObject` is now only available in macro form.  The "
"function declaration, which was kept for backwards compatibility reasons, is "
"now removed -- the macro was introduced in 1997 (:issue:`8276`)."
msgstr ""
":c:macro:`PyEval_CallObject` "
"現在只能以巨集形式使用。出於向後相容性原因而保留的函式聲明現在已被刪除——"
"巨集是在 1997 年引入的 (:issue:`8276`)。"

#: ../../whatsnew/3.2.rst:2574
#, fuzzy
msgid ""
"There is a new function :c:func:`PyLong_AsLongLongAndOverflow` which is "
"analogous to :c:func:`PyLong_AsLongAndOverflow`.  They both serve to convert "
"Python :class:`int` into a native fixed-width type while providing detection "
"of cases where the conversion won't fit (:issue:`7767`)."
msgstr ""
"有一個新函式 :c:func:`PyLong_AsLongLongAndOverflow` 類似於 "
":c:func:`PyLong_AsLongAndOverflow`。它們都用於將 Python :class:`int` "
"轉換為本機固定寬度型別，同時提供對轉換不適合的情況的檢測 (:issue:`7767`)。"

#: ../../whatsnew/3.2.rst:2579
#, fuzzy
msgid ""
"The :c:func:`PyUnicode_CompareWithASCIIString` function now returns *not "
"equal* if the Python string is *NUL* terminated."
msgstr ""
"如果 Python 字串以 *NUL* 終止，則 :c:func:`PyUnicode_CompareWithASCIIString` "
"函式現在回傳 *not equal*。"

#: ../../whatsnew/3.2.rst:2582
#, fuzzy
msgid ""
"There is a new function :c:func:`PyErr_NewExceptionWithDoc` that is like :c:"
"func:`PyErr_NewException` but allows a docstring to be specified. This lets "
"C exceptions have the same self-documenting capabilities as their pure "
"Python counterparts (:issue:`7033`)."
msgstr ""
"有一個新函式 :c:func:`PyErr_NewExceptionWithDoc` 類似於 "
":c:func:`PyErr_NewException` 但允許指定文檔字串。這讓 C 例外具有與其純 "
"Python 對應物相同的自我記錄功能（:issue:`7033`）。"

#: ../../whatsnew/3.2.rst:2587
#, fuzzy
msgid ""
"When compiled with the ``--with-valgrind`` option, the pymalloc allocator "
"will be automatically disabled when running under Valgrind.  This gives "
"improved memory leak detection when running under Valgrind, while taking "
"advantage of pymalloc at other times (:issue:`2422`)."
msgstr ""
"當使用 ``--with-valgrind`` 選項編譯時，在 Valgrind 下運行時，pymalloc "
"分配器將自動禁用。這在 Valgrind 下運行時改進了記憶體洩漏檢測，"
"同時在其他時間利用 pymalloc (:issue:`2422`)。"

#: ../../whatsnew/3.2.rst:2592
#, fuzzy
msgid ""
"Removed the ``O?`` format from the *PyArg_Parse* functions.  The format is "
"no longer used and it had never been documented (:issue:`8837`)."
msgstr "從 *PyArg_Parse* 函式中刪除了``O?`` 格式。該格式不再使用，也從未被記錄 "
"(:issue:`8837`)。"

#: ../../whatsnew/3.2.rst:2595
#, fuzzy
msgid ""
"There were a number of other small changes to the C-API.  See the `Misc/NEWS "
"<https://github.com/python/cpython/blob/v3.2.6/Misc/NEWS>`__ file for a "
"complete list."
msgstr ""
"C-API 還有許多其他小的變化。有關完整列表，請參閱`Misc/NEWS <https://github."
"com/python/cpython/blob/v3.2.6/Misc/NEWS>`__ 文件。"

#: ../../whatsnew/3.2.rst:2599
#, fuzzy
msgid ""
"Also, there were a number of updates to the Mac OS X build, see `Mac/"
"BuildScript/README.txt <https://github.com/python/cpython/blob/v3.2.6/Mac/"
"BuildScript/README.txt>`_ for details.  For users running a 32/64-bit build, "
"there is a known problem with the default Tcl/Tk on Mac OS X 10.6. "
"Accordingly, we recommend installing an updated alternative such as "
"`ActiveState Tcl/Tk 8.5.9 <https://www.activestate.com/activetcl/downloads>`_"
"\\. See https://www.python.org/download/mac/tcltk/ for additional details."
msgstr ""
"此外，Mac OS X 構建也有許多更新，請參閱`Mac/BuildScript/README.txt "
"<https://github.com/python/cpython/blob/v3.2.6/Mac/BuildScript/README.txt >`"
"_ 了解詳情。對於運行 32/64 位構建的使用者，Mac OS X 10.6 上的預設 Tcl/Tk "
"存在一個已知問題。因此，我們建議安裝更新的替代方案，例如 `ActiveState Tcl/Tk "
"8.5.9 <https://www.activestate.com/activetcl/downloads>`_\\"
"。有關更多詳細資訊，請參閱 https://www.python.org/download/mac/tcltk/。"

#: ../../whatsnew/3.2.rst:2608
#, fuzzy
msgid "Porting to Python 3.2"
msgstr "移植到 Python 3.2"

#: ../../whatsnew/3.2.rst:2610
#, fuzzy
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code:"
msgstr "本節列出了之前描述的更改和其他可能需要更改程式碼的錯誤修復："

#: ../../whatsnew/3.2.rst:2613
#, fuzzy
msgid ""
"The :mod:`configparser` module has a number of clean-ups.  The major change "
"is to replace the old :class:`ConfigParser` class with long-standing "
"preferred alternative :class:`SafeConfigParser`.  In addition there are a "
"number of smaller incompatibilities:"
msgstr ""
":mod:`configparser` 模組有許多清理工作。主要變化是將舊的 ConfigParser 類替換"
"為長期首選的替代類 :class:`SafeConfigParser`。此外還有一些較小的不相容性："

#: ../../whatsnew/3.2.rst:2618
#, fuzzy
msgid ""
"The interpolation syntax is now validated on :meth:`~configparser."
"ConfigParser.get` and :meth:`~configparser.ConfigParser.set` operations. In "
"the default interpolation scheme, only two tokens with percent signs are "
"valid: ``%(name)s`` and ``%%``, the latter being an escaped percent sign."
msgstr ""
"插值語法現在在 :meth:`~configparser.ConfigParser.get` 和 :meth:`~configparser"
".ConfigParser.set` 操作上得到驗證。在預設插值方案中，只有兩個帶百分號的標記是"
"有效的：``%(name)s`` 和 ``%%``，後者是轉義的百分號。"

#: ../../whatsnew/3.2.rst:2624
#, fuzzy
msgid ""
"The :meth:`~configparser.ConfigParser.set` and :meth:`~configparser."
"ConfigParser.add_section` methods now verify that values are actual "
"strings.  Formerly, unsupported types could be introduced unintentionally."
msgstr ""
":meth:`~configparser.ConfigParser.set` 和 :meth:`~configparser.ConfigParser."
"add_section` "
"方法現在驗證值是否為實際字串。以前，可能會無意中引入不受支援的型別。"

#: ../../whatsnew/3.2.rst:2629
#, fuzzy
msgid ""
"Duplicate sections or options from a single source now raise either :exc:"
"`~configparser.DuplicateSectionError` or :exc:`~configparser."
"DuplicateOptionError`.  Formerly, duplicates would silently overwrite a "
"previous entry."
msgstr ""
"來自單一來源的重複部分或選項現在引發 :exec:`~configparser."
"DuplicateSectionError` 或 :exc:`~configparser."
"DuplicateOptionError`。以前，重複項會默默地覆蓋以前的條目。"

#: ../../whatsnew/3.2.rst:2634
#, fuzzy
msgid ""
"Inline comments are now disabled by default so now the **;** character can "
"be safely used in values."
msgstr "現在預設情況下禁用內聯註釋，因此現在可以在值中安全地使用 **;** 字元。"

#: ../../whatsnew/3.2.rst:2637
#, fuzzy
msgid ""
"Comments now can be indented.  Consequently, for **;** or **#** to appear at "
"the start of a line in multiline values, it has to be interpolated.  This "
"keeps comment prefix characters in values from being mistaken as comments."
msgstr ""
"現在可以縮進評論。因此，要使 **;** 或 **#** 出現在多行值中一行的開頭，必須對"
"其進行插值。這可以防止值中的註釋前綴字元被誤認為是註釋。"

#: ../../whatsnew/3.2.rst:2641
#, fuzzy
msgid ""
"``\"\"`` is now a valid value and is no longer automatically converted to an "
"empty string. For empty strings, use ``\"option =\"`` in a line."
msgstr "``\"\"`` 現在是一個有效值，不再自動轉換為空字串。對於空字串，在一行中使用 ``"
"\"option =\"``。"

#: ../../whatsnew/3.2.rst:2644
#, fuzzy
msgid ""
"The :mod:`nntplib` module was reworked extensively, meaning that its APIs "
"are often incompatible with the 3.1 APIs."
msgstr ":mod:`nntplib` 模組進行了廣泛的修改，這意味著它的 API 通常與 3.1 API 不相容。"

#: ../../whatsnew/3.2.rst:2647
#, fuzzy
msgid ""
":class:`bytearray` objects can no longer be used as filenames; instead, they "
"should be converted to :class:`bytes`."
msgstr ":class:`bytearray` 對像不能再用作文件名；相反，它們應該被轉換為 "
":class:`bytes`。"

#: ../../whatsnew/3.2.rst:2650
#, fuzzy
msgid ""
"The :meth:`array.tostring` and :meth:`array.fromstring` have been renamed "
"to :meth:`array.tobytes` and :meth:`array.frombytes` for clarity.  The old "
"names have been deprecated. (See :issue:`8990`.)"
msgstr ""
"為清楚起見，array.tostring 和 array.fromstring 已重命名為 array.tobytes 和 "
"array.frombytes。舊名稱已被棄用。 （參見 :issue:`8990`。）"

#: ../../whatsnew/3.2.rst:2654
#, fuzzy
msgid "``PyArg_Parse*()`` functions:"
msgstr "``PyArg_Parse*()`` 函式："

#: ../../whatsnew/3.2.rst:2656
#, fuzzy
msgid "\"t#\" format has been removed: use \"s#\" or \"s*\" instead"
msgstr "“t#”格式已被刪除：改用“s#”或“s*”"

#: ../../whatsnew/3.2.rst:2657
#, fuzzy
msgid "\"w\" and \"w#\" formats has been removed: use \"w*\" instead"
msgstr " ``w``和“w#”格式已被刪除：改用“w*”"

#: ../../whatsnew/3.2.rst:2659
#, fuzzy
msgid ""
"The :c:type:`PyCObject` type, deprecated in 3.1, has been removed.  To wrap "
"opaque C pointers in Python objects, the :c:type:`PyCapsule` API should be "
"used instead; the new type has a well-defined interface for passing typing "
"safety information and a less complicated signature for calling a destructor."
msgstr ""
"在 3.1 中棄用的 :c:type:`PyCObject` 型別已被刪除。要在 Python "
"對像中包裝不透明的 C 指標，應改用 PyCapsule API；新型別有一個定義良好的介面用"
"於傳遞型別安全資訊和一個不太複雜的呼叫析構函式的簽名。"

#: ../../whatsnew/3.2.rst:2664
#, fuzzy
msgid ""
"The :func:`sys.setfilesystemencoding` function was removed because it had a "
"flawed design."
msgstr ":func:`sys.setfilesystemencoding` 函式已被刪除，因為它的設計有缺陷。"

#: ../../whatsnew/3.2.rst:2667
#, fuzzy
msgid ""
"The :func:`random.seed` function and method now salt string seeds with an "
"sha512 hash function.  To access the previous version of *seed* in order to "
"reproduce Python 3.1 sequences, set the *version* argument to *1*, ``random."
"seed(s, version=1)``."
msgstr ""
":func:`random.seed` 函式和方法現在使用 sha512 "
"雜湊函式對字串種子進行鹽分處理。要訪問以前版本的 *seed* 以重現 Python 3.1 "
"序列，請將 *version* 參數設定為 *1*，``random.seed(s, version=1)``。"

#: ../../whatsnew/3.2.rst:2672
#, fuzzy
msgid ""
"The previously deprecated :func:`string.maketrans` function has been removed "
"in favor of the static methods :meth:`bytes.maketrans` and :meth:`bytearray."
"maketrans`.  This change solves the confusion around which types were "
"supported by the :mod:`string` module.  Now, :class:`str`, :class:`bytes`, "
"and :class:`bytearray` each have their own **maketrans** and **translate** "
"methods with intermediate translation tables of the appropriate type."
msgstr ""
"以前棄用的 :func:`string.maketrans` "
"函式已被刪除，取而代之的是靜態方法 :meth:`bytes.maketrans` 和 :meth:`bytearray"
".maketrans`。此更改解決了 :mod:`string` "
"模組支援哪些型別的困惑。現在，:class:`str`、:class:`bytes` "
"和 :class:`bytearray` 每個都有自己的 **maketrans** 和 **translate** "
"方法以及適當型別的中間翻譯表。"

#: ../../whatsnew/3.2.rst:2680
#, fuzzy
msgid "(Contributed by Georg Brandl; :issue:`5675`.)"
msgstr "（由 Georg Brandl 提供；:issue:`5675`。）"

#: ../../whatsnew/3.2.rst:2682
#, fuzzy
msgid ""
"The previously deprecated :func:`contextlib.nested` function has been "
"removed in favor of a plain :keyword:`with` statement which can accept "
"multiple context managers.  The latter technique is faster (because it is "
"built-in), and it does a better job finalizing multiple context managers "
"when one of them raises an exception::"
msgstr ""
"以前棄用的 :func:`contextlib.nested` 函式已被刪除，取而代之的是一個普通的 "
":keyword:`with` 語句，它可以接受多個上下文管理器。後一種技術更快（因為它是內"
"置的），並且當其中一個引發例外時，它可以更好地完成多個上下文管理器："

#: ../../whatsnew/3.2.rst:2693
#, fuzzy
msgid ""
"(Contributed by Georg Brandl and Mattias Brändström; `appspot issue 53094 "
"<https://codereview.appspot.com/53094>`_.)"
msgstr ""
"（由 Georg Brandl 和 Mattias Brändström 提供；`appspot 問題 53094 "
"<https://codereview.appspot.com/53094>`_。）"

#: ../../whatsnew/3.2.rst:2696
#, fuzzy
msgid ""
":func:`struct.pack` now only allows bytes for the ``s`` string pack code. "
"Formerly, it would accept text arguments and implicitly encode them to bytes "
"using UTF-8.  This was problematic because it made assumptions about the "
"correct encoding and because a variable-length encoding can fail when "
"writing to fixed length segment of a structure."
msgstr ""
":func:`struct.pack` 現在只允許 ``s`` 字串包程式碼的位元組。以前，"
"它會接受文本參數並使用 UTF-8 將它們隱式編碼為位元組。這是有問題的，因為它對正"
"確的編碼做出了假設，並且因為可變長度編碼在寫入結構的固定長度段時可能會失敗。"

#: ../../whatsnew/3.2.rst:2702
#, fuzzy
msgid ""
"Code such as ``struct.pack('<6sHHBBB', 'GIF87a', x, y)`` should be rewritten "
"with to use bytes instead of text, ``struct.pack('<6sHHBBB', b'GIF87a', x, "
"y)``."
msgstr ""
"``struct.pack('<6sHHBBB', 'GIF87a', x, y)`` "
"等程式碼應該重寫為使用位元組而不是文本，``struct.pack('<6sHHBBB', b'GIF87a' "
", x, y)``。"

#: ../../whatsnew/3.2.rst:2705
#, fuzzy
msgid ""
"(Discovered by David Beazley and fixed by Victor Stinner; :issue:`10783`.)"
msgstr "（由 David Beazley 發現並由 Victor Stinner 修復；:issue:`10783`。）"

#: ../../whatsnew/3.2.rst:2707
#, fuzzy
msgid ""
"The :class:`xml.etree.ElementTree` class now raises an :exc:`xml.etree."
"ElementTree.ParseError` when a parse fails. Previously it raised an :exc:"
"`xml.parsers.expat.ExpatError`."
msgstr ""
":class:`xml.etree.ElementTree` 類現在在剖析失敗時引發 :exc:`xml.etree."
"ElementTree.ParseError`。以前它引發了 :exc:`xml.parsers.expat.ExpatError`。"

#: ../../whatsnew/3.2.rst:2711
#, fuzzy
msgid ""
"The new, longer :func:`str` value on floats may break doctests which rely on "
"the old output format."
msgstr "浮點數上新的、更長的 :func:`str` 值可能會破壞依賴於舊輸出格式的文檔測試。"

#: ../../whatsnew/3.2.rst:2714
#, fuzzy
msgid ""
"In :class:`subprocess.Popen`, the default value for *close_fds* is now "
"``True`` under Unix; under Windows, it is ``True`` if the three standard "
"streams are set to ``None``, ``False`` otherwise.  Previously, *close_fds* "
"was always ``False`` by default, which produced difficult to solve bugs or "
"race conditions when open file descriptors would leak into the child process."
msgstr ""
"在 :class:`subprocess.Popen` 中，*close_fds* 的預設值現在在 Unix 下為 "
"``True``；在 Windows 下，如果三個標準流都設定為 ``None``，則為 ``True``，否則為“Fal"
"se”。以前，*close_fds* 預設情況下始終為 ``False``，當打開的文件描述器洩漏到子行"
"程中時，這會產生難以解決的錯誤或競爭條件。"

#: ../../whatsnew/3.2.rst:2721
#, fuzzy
msgid ""
"Support for legacy HTTP 0.9 has been removed from :mod:`urllib.request` and :"
"mod:`http.client`.  Such support is still present on the server side (in :"
"mod:`http.server`)."
msgstr ""
"已從 :mod:`urllib.request` 和 :mod:`http.client` 中刪除對舊版 HTTP 0.9 "
"的支援。這種支援仍然存在於伺服器端（在 :mod:`http.server` 中）。"

#: ../../whatsnew/3.2.rst:2725
#, fuzzy
msgid "(Contributed by Antoine Pitrou, :issue:`10711`.)"
msgstr "（由 Antoine Pitrou 提供，:issue:`10711`。）"

#: ../../whatsnew/3.2.rst:2727
#, fuzzy
msgid ""
"SSL sockets in timeout mode now raise :exc:`socket.timeout` when a timeout "
"occurs, rather than a generic :exc:`~ssl.SSLError`."
msgstr ""
"超時模式下的 SSL  socket 現在會在發生超時時引發 :exc:`socket."
"timeout`，而不是通用的 :exc:`~ssl.SSLError`。"

#: ../../whatsnew/3.2.rst:2730
#, fuzzy
msgid "(Contributed by Antoine Pitrou, :issue:`10272`.)"
msgstr "（由 Antoine Pitrou 提供，:issue:`10272`。）"

#: ../../whatsnew/3.2.rst:2732
#, fuzzy
msgid ""
"The misleading functions :c:func:`PyEval_AcquireLock()` and :c:func:"
"`PyEval_ReleaseLock()` have been officially deprecated.  The thread-state "
"aware APIs (such as :c:func:`PyEval_SaveThread()` and :c:func:"
"`PyEval_RestoreThread()`) should be used instead."
msgstr ""
"誤導性函式 :c:func:`PyEval_AcquireLock()` 和 :c:func:`PyEval_ReleaseLock()` "
"已被正式棄用。應改用執行緒狀態感知 API（例如 :c:func:`PyEval_SaveThread()` "
"和 :c:func:`PyEval_RestoreThread()`）。"

#: ../../whatsnew/3.2.rst:2737
#, fuzzy
msgid ""
"Due to security risks, :func:`asyncore.handle_accept` has been deprecated, "
"and a new function, :func:`asyncore.handle_accepted`, was added to replace "
"it."
msgstr ""
"由於安全風險，已棄用 :func:`asyncore.handle_accept`，並新增了一個新函式 "
":func:`asyncore.handle_accepted` 來替代它。"

#: ../../whatsnew/3.2.rst:2740
#, fuzzy
msgid "(Contributed by Giampaolo Rodola in :issue:`6706`.)"
msgstr "（由 Giampaolo Rodola 在 :issue:`6706` 中貢獻。）"

#: ../../whatsnew/3.2.rst:2742
#, fuzzy
msgid ""
"Due to the new :term:`GIL` implementation, :c:func:`PyEval_InitThreads()` "
"cannot be called before :c:func:`Py_Initialize()` anymore."
msgstr "由於新的 GIL 實作，不能再在 Py_Initialize() 之前呼叫 PyEval_InitThreads()。"
