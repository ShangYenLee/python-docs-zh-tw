# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-24 00:16+0000\n"
"PO-Revision-Date: 2018-05-23 16:20+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/2.6.rst:5
msgid "What's New in Python 2.6"
msgstr "Python 2.6 有什麼新功能"

#: ../../whatsnew/2.6.rst:0
msgid "Author"
msgstr "作者"

#: ../../whatsnew/2.6.rst:9
msgid "A.M. Kuchling (amk at amk.ca)"
msgstr "A.M. Kuchling (amk at amk.ca)"

#: ../../whatsnew/2.6.rst:52
#, fuzzy
msgid ""
"This article explains the new features in Python 2.6, released on October 1, "
"2008.  The release schedule is described in :pep:`361`."
msgstr "本文介紹了 2008 年 10 月 1 日發布的 Python 2.6 中的新功能。發佈時間表在 "
":pep:`361` 中進行了描述。"

#: ../../whatsnew/2.6.rst:55
#, fuzzy
msgid ""
"The major theme of Python 2.6 is preparing the migration path to Python 3.0, "
"a major redesign of the language.  Whenever possible, Python 2.6 "
"incorporates new features and syntax from 3.0 while remaining compatible "
"with existing code by not removing older features or syntax.  When it's not "
"possible to do that, Python 2.6 tries to do what it can, adding "
"compatibility functions in a :mod:`future_builtins` module and a :option:"
"`!-3` switch to warn about usages that will become unsupported in 3.0."
msgstr ""
"Python 2.6 的主題是準備遷移到 Python 3."
"0，這是語言的重大重新設計。只要有可能，Python 2.6 就會合併 3.0 的新功能和語法"
"，同時通過不刪除舊功能或語法來保持與現有程式碼的相容性。當不可能做到這一點時"
"，Python 2.6 會盡力而為，在 future_builtins 模組和 :option:`!-3` "
"開關中新增相容性函式以警告 3.0 中將不受支援的用法."

#: ../../whatsnew/2.6.rst:64
#, fuzzy
msgid ""
"Some significant new packages have been added to the standard library, such "
"as the :mod:`multiprocessing` and :mod:`json` modules, but there aren't many "
"new features that aren't related to Python 3.0 in some way."
msgstr ""
"一些重要的新包已新增到標準庫中，例如 :mod:`multiprocessing` 和 :mod:`json` "
"模組，但沒有多少新功能在某種程度上與 Python 3.0 無關。"

#: ../../whatsnew/2.6.rst:69
#, fuzzy
msgid ""
"Python 2.6 also sees a number of improvements and bugfixes throughout the "
"source.  A search through the change logs finds there were 259 patches "
"applied and 612 bugs fixed between Python 2.5 and 2.6.  Both figures are "
"likely to be underestimates."
msgstr ""
"Python 2.6 還在整個源程式碼中看到了許多改進和錯誤修復。搜索更改日誌發現在 "
"Python 2.5 和 2.6 之間應用了 259 個補丁並修復了 612 "
"個錯誤。這兩個數字都可能被低估。"

#: ../../whatsnew/2.6.rst:74
#, fuzzy
msgid ""
"This article doesn't attempt to provide a complete specification of the new "
"features, but instead provides a convenient overview.  For full details, you "
"should refer to the documentation for Python 2.6. If you want to understand "
"the rationale for the design and implementation, refer to the PEP for a "
"particular new feature. Whenever possible, \"What's New in Python\" links to "
"the bug/patch item for each change."
msgstr ""
"本文並不試圖提供新功能的完整規範，而是提供一個方便的概述。有關完整詳細資訊，"
"您應該參考 Python 2.6 的文檔。如果您想了解設計和實作的基本原理，"
"請參閱特定新功能的 PEP。只要有可能，“Python "
"的新增功能”鏈接到每個更改的錯誤/補丁項。"

#: ../../whatsnew/2.6.rst:90
msgid "Python 3.0"
msgstr "Python 3.0"

#: ../../whatsnew/2.6.rst:92
#, fuzzy
msgid ""
"The development cycle for Python versions 2.6 and 3.0 was synchronized, with "
"the alpha and beta releases for both versions being made on the same days.  "
"The development of 3.0 has influenced many features in 2.6."
msgstr ""
"Python 2.6 和 3.0 版本的開發週期是同步的，兩個版本的 alpha 和 beta "
"版本是在同一天發布的。 3.0的發展影響了2.6的很多特性。"

#: ../../whatsnew/2.6.rst:97
#, fuzzy
msgid ""
"Python 3.0 is a far-ranging redesign of Python that breaks compatibility "
"with the 2.x series.  This means that existing Python code will need some "
"conversion in order to run on Python 3.0.  However, not all the changes in "
"3.0 necessarily break compatibility.  In cases where new features won't "
"cause existing code to break, they've been backported to 2.6 and are "
"described in this document in the appropriate place.  Some of the 3.0-"
"derived features are:"
msgstr ""
"Python 3.0 是對 Python 的廣泛重新設計，打破了與 2.x 系列的相容性。"
"這意味著現有的 Python 程式碼需要進行一些轉換才能在 Python 3.0 上運行。然而，"
"並非 3.0 "
"中的所有更改都必然會破壞相容性。在新功能不會導致現有程式碼中斷的情況下，"
"它們已被反向移植到 2.6，並在本文檔的適當位置進行了描述。一些 3.0 "
"派生的功能是："

#: ../../whatsnew/2.6.rst:106
#, fuzzy
msgid ""
"A :meth:`__complex__` method for converting objects to a complex number."
msgstr "一種用於將物件轉換為複數的 :meth:`__complex__` 方法。"

#: ../../whatsnew/2.6.rst:107
#, fuzzy
msgid "Alternate syntax for catching exceptions: ``except TypeError as exc``."
msgstr "捕獲例外的替代語法：``except TypeError as exc``。"

#: ../../whatsnew/2.6.rst:108
#, fuzzy
msgid ""
"The addition of :func:`functools.reduce` as a synonym for the built-in :func:"
"`reduce` function."
msgstr "新增 :func:`functools.reduce` 作為內建 :func:`reduce` 函式的同義詞。"

#: ../../whatsnew/2.6.rst:111
#, fuzzy
msgid ""
"Python 3.0 adds several new built-in functions and changes the semantics of "
"some existing builtins.  Functions that are new in 3.0 such as :func:`bin` "
"have simply been added to Python 2.6, but existing builtins haven't been "
"changed; instead, the :mod:`future_builtins` module has versions with the "
"new 3.0 semantics.  Code written to be compatible with 3.0 can do ``from "
"future_builtins import hex, map`` as necessary."
msgstr ""
"Python 3.0 新增了幾個新的內建函式並更改了一些現有內建函式的語義。 Python 2.6 "
"中簡單地新增了 3.0 中的新函式，例如 "
":func:`bin`，但現有的內建函式沒有改變；相反，:mod:`future_builtins` "
"模組具有具有新 3.0 語義的版本。為與 3.0 相容而編寫的程式碼可以根據需要執行“"
"from future_builtins import hex, map”。"

#: ../../whatsnew/2.6.rst:119
#, fuzzy
msgid ""
"A new command-line switch, :option:`!-3`, enables warnings about features "
"that will be removed in Python 3.0.  You can run code with this switch to "
"see how much work will be necessary to port code to 3.0.  The value of this "
"switch is available to Python code as the boolean variable :data:`sys."
"py3kwarning`, and to C extension code as :c:data:`Py_Py3kWarningFlag`."
msgstr ""
"一個新的命令列開關 :option:`!-3` 啟用有關將在 Python 3.0 "
"中刪除的功能的警告。您可以使用此開關運行程式碼，以查看將程式碼移植到 3.0 "
"需要做多少工作。此開關的值作為布爾變數 :data:`sys.py3kwarning` 可用於 Python "
"程式碼，作為 :c:data:`Py_Py3kWarningFlag` 可用於 C 擴充程式碼。"

#: ../../whatsnew/2.6.rst:128
#, fuzzy
msgid ""
"The 3xxx series of PEPs, which contains proposals for Python 3.0. :pep:"
"`3000` describes the development process for Python 3.0. Start with :pep:"
"`3100` that describes the general goals for Python 3.0, and then explore the "
"higher-numbered PEPS that propose specific features."
msgstr ""
"3xxx 系列 PEP，其中包含 Python 3.0 的提案。 :pep:`3000` 描述了 Python 3.0 "
"的開發過程。從描述 Python 3.0 總體目標的 :pep:`3100` 開始，"
"然後探索提出特定功能的更高編號的 PEPS。"

#: ../../whatsnew/2.6.rst:136
#, fuzzy
msgid "Changes to the Development Process"
msgstr "開發過程的變化"

#: ../../whatsnew/2.6.rst:138
#, fuzzy
msgid ""
"While 2.6 was being developed, the Python development process underwent two "
"significant changes: we switched from SourceForge's issue tracker to a "
"customized Roundup installation, and the documentation was converted from "
"LaTeX to reStructuredText."
msgstr ""
"在開發 2.6 時，Python 開發過程經歷了兩個重大變化：我們從 SourceForge "
"的問題跟踪器切換到定制的 Roundup 安裝，文檔從 LaTeX 轉換為 reStructuredText。"

#: ../../whatsnew/2.6.rst:145
#, fuzzy
msgid "New Issue Tracker: Roundup"
msgstr "新問題追踪器：綜述"

#: ../../whatsnew/2.6.rst:147
#, fuzzy
msgid ""
"For a long time, the Python developers had been growing increasingly annoyed "
"by SourceForge's bug tracker.  SourceForge's hosted solution doesn't permit "
"much customization; for example, it wasn't possible to customize the life "
"cycle of issues."
msgstr ""
"很長一段時間以來，Python 開發人員對 SourceForge 的錯誤跟踪器越來越惱火。 "
"SourceForge 的託管解決方案不允許太多定制；例如，無法自定義問題的生命週期。"

#: ../../whatsnew/2.6.rst:152
#, fuzzy
msgid ""
"The infrastructure committee of the Python Software Foundation therefore "
"posted a call for issue trackers, asking volunteers to set up different "
"products and import some of the bugs and patches from SourceForge.  Four "
"different trackers were examined: `Jira <https://www.atlassian.com/software/"
"jira/>`__, `Launchpad <https://launchpad.net/>`__, `Roundup <https://roundup."
"sourceforge.io/>`__, and `Trac <https://trac.edgewall.org/>`__. The "
"committee eventually settled on Jira and Roundup as the two candidates.  "
"Jira is a commercial product that offers no-cost hosted instances to free-"
"software projects; Roundup is an open-source project that requires "
"volunteers to administer it and a server to host it."
msgstr ""
"因此，Python 軟件基金會的基礎設施委員會發布了一個問題跟踪器號召，"
"要求志願者設定不同的產品並從 SourceForge "
"導入一些錯誤和補丁。檢查了四種不同的跟踪器：`Jira <https://www.atlassian.com/"
"software/jira/>`__、`Launchpad <https://launchpad.net/>`__、`Roundup "
"<https://roundup .sourceforge.io/>`__ 和 `Trac <https://trac.edgewall.org/"
">`__。委員會最終選定了 Jira 和 Roundup 作為兩個候選人。 Jira "
"是一種商業產品，可為免費軟件項目提供免費託管實例； Roundup "
"是一個開源項目，需要志願者來管理它，並需要一台伺服器來託管它。"

#: ../../whatsnew/2.6.rst:166
#, fuzzy
msgid ""
"After posting a call for volunteers, a new Roundup installation was set up "
"at https://bugs.python.org.  One installation of Roundup can host multiple "
"trackers, and this server now also hosts issue trackers for Jython and for "
"the Python web site.  It will surely find other uses in the future.  Where "
"possible, this edition of \"What's New in Python\" links to the bug/patch "
"item for each change."
msgstr ""
"在發布志願者徵集後，在 https://bugs.python.org 上設定了一個新的 Roundup "
"安裝。 Roundup 的一個安裝可以託管多個跟踪器，並且該伺服器現在還託管 Jython "
"和 Python "
"網站的問題跟踪器。它肯定會在未來找到其他用途。在可能的情況下，此版本的“"
"Python 的新增功能”鏈接到每個更改的錯誤/補丁項。"

#: ../../whatsnew/2.6.rst:174
#, fuzzy
msgid ""
"Hosting of the Python bug tracker is kindly provided by `Upfront Systems "
"<https://upfrontsoftware.co.za>`__ of Stellenbosch, South Africa.  Martin "
"von Löwis put a lot of effort into importing existing bugs and patches from "
"SourceForge; his scripts for this import operation are at ``https://svn."
"python.org/view/tracker/importer/`` and may be useful to other projects "
"wishing to move from SourceForge to Roundup."
msgstr ""
"南非斯泰倫博斯的 `Upfront Systems <https://upfrontsoftware.co.za>`__ "
"友情提供了 Python 錯誤跟踪器的託管服務。 Martin von Löwis 投入大量精力從 "
"SourceForge 導入現有的錯誤和補丁；他用於此導入操作的腳本位於 ``https://svn."
"python.org/view/tracker/importer/`` 並且可能對希望從 SourceForge 遷移到 "
"Roundup 的其他項目有用。"

#: ../../whatsnew/2.6.rst:185
msgid "https://bugs.python.org"
msgstr "https://bugs.python.org"

#: ../../whatsnew/2.6.rst:185
#, fuzzy
msgid "The Python bug tracker."
msgstr "Python 錯誤跟踪器。"

#: ../../whatsnew/2.6.rst:188
msgid "https://bugs.jython.org:"
msgstr "https://bugs.jython.org:"

#: ../../whatsnew/2.6.rst:188
#, fuzzy
msgid "The Jython bug tracker."
msgstr "Jython 錯誤跟踪器。"

#: ../../whatsnew/2.6.rst:191
msgid "https://roundup.sourceforge.io/"
msgstr "https://roundup.sourceforge.io/"

#: ../../whatsnew/2.6.rst:191
#, fuzzy
msgid "Roundup downloads and documentation."
msgstr "綜述下載和文檔。"

#: ../../whatsnew/2.6.rst:193
msgid "https://svn.python.org/view/tracker/importer/"
msgstr "https://svn.python.org/view/tracker/importer/"

#: ../../whatsnew/2.6.rst:194
#, fuzzy
msgid "Martin von Löwis's conversion scripts."
msgstr "Martin von Löwis 的轉換腳本。"

#: ../../whatsnew/2.6.rst:197
#, fuzzy
msgid "New Documentation Format: reStructuredText Using Sphinx"
msgstr "新文檔格式：使用 Sphinx 的 reStructuredText"

#: ../../whatsnew/2.6.rst:199
#, fuzzy
msgid ""
"The Python documentation was written using LaTeX since the project started "
"around 1989.  In the 1980s and early 1990s, most documentation was printed "
"out for later study, not viewed online. LaTeX was widely used because it "
"provided attractive printed output while remaining straightforward to write "
"once the basic rules of the markup were learned."
msgstr ""
"自該項目於 1989 年左右開始以來，Python 文檔就是使用 LaTeX 編寫的。在 1980 "
"年代和 1990 年代初期，大多數文檔都是印出出來供以後學習，而不是在線查看。 "
"LaTeX 被廣泛使用，因為它提供了有吸引力的印出輸出，同時在學習了標記的基本規則"
"後仍然易於編寫。"

#: ../../whatsnew/2.6.rst:206
#, fuzzy
msgid ""
"Today LaTeX is still used for writing publications destined for printing, "
"but the landscape for programming tools has shifted.  We no longer print out "
"reams of documentation; instead, we browse through it online and HTML has "
"become the most important format to support. Unfortunately, converting LaTeX "
"to HTML is fairly complicated and Fred L. Drake Jr., the long-time Python "
"documentation editor, spent a lot of time maintaining the conversion "
"process.  Occasionally people would suggest converting the documentation "
"into SGML and later XML, but performing a good conversion is a major task "
"and no one ever committed the time required to finish the job."
msgstr ""
"如今，LaTeX 仍用於編寫印刷出版物，但編程工具的格局已經發生了變化。我們不再印"
"出大量文檔；相反，我們在線瀏覽它，HTML 已成為最重要的支援格式。不幸的是，將 "
"LaTeX 轉換為 HTML 相當複雜，長期擔任 Python 文檔編輯的 Fred L. Drake Jr. "
"花了很多時間來維護轉換過程。有時人們會建議將文檔轉換為 SGML，然後再轉換為 "
"XML，但是執行良好的轉換是一項重大任務，而且沒有人花時間完成這項工作。"

#: ../../whatsnew/2.6.rst:217
#, fuzzy
msgid ""
"During the 2.6 development cycle, Georg Brandl put a lot of effort into "
"building a new toolchain for processing the documentation.  The resulting "
"package is called Sphinx, and is available from https://www.sphinx-doc.org/."
msgstr ""
"在 2.6 開發週期中，Georg Brandl 投入了大量精力來構建用於處理文檔的新工具鏈。"
"生成的包稱為 Sphinx，可從 https://www.sphinx-doc.org/ 獲得。"

#: ../../whatsnew/2.6.rst:222
#, fuzzy
msgid ""
"Sphinx concentrates on HTML output, producing attractively styled and modern "
"HTML; printed output is still supported through conversion to LaTeX.  The "
"input format is reStructuredText, a markup syntax supporting custom "
"extensions and directives that is commonly used in the Python community."
msgstr ""
"Sphinx 專注於 HTML 輸出，生成風格精美的現代 HTML；通過轉換為 LaTeX "
"仍然支援印出輸出。輸入格式為 "
"reStructuredText，這是一種支援自定義擴充和指令的標記語法，在 Python "
"社區中很常用。"

#: ../../whatsnew/2.6.rst:228
#, fuzzy
msgid ""
"Sphinx is a standalone package that can be used for writing, and almost two "
"dozen other projects (`listed on the Sphinx web site <https://www.sphinx-doc."
"org/en/master/examples.html>`__) have adopted Sphinx as their documentation "
"tool."
msgstr ""
"Sphinx 是一個獨立的包，可用於編寫和幾乎兩打其他項目（`在 Sphinx 網站上列出 "
"<https://www.sphinx-doc.org/en/master/examples.html>`__）已經採用 Sphinx "
"作為他們的文檔工具。"

#: ../../whatsnew/2.6.rst:236
#, fuzzy
msgid "`Documenting Python <https://devguide.python.org/documenting/>`__"
msgstr "`記錄 Python <https://devguide.python.org/documenting/>`__"

#: ../../whatsnew/2.6.rst:236
#, fuzzy
msgid "Describes how to write for Python's documentation."
msgstr "描述如何為 Python 編寫文檔。"

#: ../../whatsnew/2.6.rst:239
#, fuzzy
msgid "`Sphinx <https://www.sphinx-doc.org/>`__"
msgstr "`獅身人面像 <https://www.sphinx-doc.org/>`__"

#: ../../whatsnew/2.6.rst:239
#, fuzzy
msgid "Documentation and code for the Sphinx toolchain."
msgstr "Sphinx 工具鏈的文檔和程式碼。"

#: ../../whatsnew/2.6.rst:241
#, fuzzy
msgid "`Docutils <https://docutils.sourceforge.io>`__"
msgstr "`Docutils <https://docutils.sourceforge.io>`__"

#: ../../whatsnew/2.6.rst:242
#, fuzzy
msgid "The underlying reStructuredText parser and toolset."
msgstr "底層的 reStructuredText 解析器和工具集。"

#: ../../whatsnew/2.6.rst:248
#, fuzzy
msgid "PEP 343: The 'with' statement"
msgstr "PEP 343： ``with``語句"

#: ../../whatsnew/2.6.rst:250
#, fuzzy
msgid ""
"The previous version, Python 2.5, added the ':keyword:`with`' statement as "
"an optional feature, to be enabled by a ``from __future__ import "
"with_statement`` directive.  In 2.6 the statement no longer needs to be "
"specially enabled; this means that :keyword:`!with` is now always a "
"keyword.  The rest of this section is a copy of the corresponding section "
"from the \"What's New in Python 2.5\" document; if you're familiar with the "
"':keyword:`!with`' statement from Python 2.5, you can skip this section."
msgstr ""
"之前的版本 Python 2.5 新增了 ':keyword:`with`' 語句作為可選功能，由``from "
"__future__ import with_statement`` 指令啟用。在 2.6 "
"中不再需要特別啟用該語句；這意味著 :keyword:`!with` "
"現在總是一個關鍵字。本節的其餘部分是“Python 2.5 "
"的新增功能”文檔中相應部分的副本；如果您熟悉 Python 2.5 中的 ':keyword:`!with`"
"' 語句，則可以跳過本節。"

#: ../../whatsnew/2.6.rst:259
#, fuzzy
msgid ""
"The ':keyword:`with`' statement clarifies code that previously would use "
"``try...finally`` blocks to ensure that clean-up code is executed.  In this "
"section, I'll discuss the statement as it will commonly be used.  In the "
"next section, I'll examine the implementation details and show how to write "
"objects for use with this statement."
msgstr ""
"':keyword:`with`' 語句澄清了以前使用 ``try...finally`` 塊來確保執行清理程式碼"
"的程式碼。在本節中，我將討論該語句，因為它通常會被使用。在下一節中，我將檢查"
"實作細節並展示如何編寫用於此語句的物件。"

#: ../../whatsnew/2.6.rst:265
#, fuzzy
msgid ""
"The ':keyword:`with`' statement is a control-flow structure whose basic "
"structure is::"
msgstr "':keyword:`with`' 語句是一個控制流結構，其基本結構是："

#: ../../whatsnew/2.6.rst:271
#, fuzzy
msgid ""
"The expression is evaluated, and it should result in an object that supports "
"the context management protocol (that is, has :meth:`__enter__` and :meth:"
"`__exit__` methods)."
msgstr ""
"表達式被評估，它應該產生一個支援上下文管理協定的物件（即，具有 "
":meth:`__enter__` 和 :meth:`__exit__` 方法）。"

#: ../../whatsnew/2.6.rst:275
#, fuzzy
msgid ""
"The object's :meth:`__enter__` is called before *with-block* is executed and "
"therefore can run set-up code. It also may return a value that is bound to "
"the name *variable*, if given.  (Note carefully that *variable* is *not* "
"assigned the result of *expression*.)"
msgstr ""
"物件的 :meth:`__enter__` 在執行 *with-block* "
"之前被呼叫，因此可以運行設定程式碼。它還可能回傳一個綁定到名稱 *variable* "
"的值，如果給定的話。 （請注意，*變數* *未* 分配 *表達式* 的結果。）"

#: ../../whatsnew/2.6.rst:280
#, fuzzy
msgid ""
"After execution of the *with-block* is finished, the object's :meth:"
"`__exit__` method is called, even if the block raised an exception, and can "
"therefore run clean-up code."
msgstr "*with-block* 執行完成後，將呼叫物件的 :meth:`__exit__` "
"方法，即使該塊引發例外，也可以因此運行清理程式碼。"

#: ../../whatsnew/2.6.rst:284
#, fuzzy
msgid ""
"Some standard Python objects now support the context management protocol and "
"can be used with the ':keyword:`with`' statement. File objects are one "
"example::"
msgstr "一些標準的 Python 物件現在支援上下文管理協定，並且可以與 ':keyword:`with`' "
"語句一起使用。文件物件就是一個例子::"

#: ../../whatsnew/2.6.rst:292
#, fuzzy
msgid ""
"After this statement has executed, the file object in *f* will have been "
"automatically closed, even if the :keyword:`for` loop raised an exception "
"part-way through the block."
msgstr "執行此語句後，*f* 中的文件物件將自動關閉，即使 for "
"循環在塊中途引發例外也是如此。"

#: ../../whatsnew/2.6.rst:298
#, fuzzy
msgid ""
"In this case, *f* is the same object created by :func:`open`, because :meth:"
"`file.__enter__` returns *self*."
msgstr "在這種情況下，*f* 與 :func:`open` 建立的物件相同，因為 :meth:`file.__enter__`"
" 回傳 *self*。"

#: ../../whatsnew/2.6.rst:301
#, fuzzy
msgid ""
"The :mod:`threading` module's locks and condition variables  also support "
"the ':keyword:`with`' statement::"
msgstr ":mod:`threading` 模組的鎖和條件變數也支援 ':keyword:`with`' 語句::"

#: ../../whatsnew/2.6.rst:309
#, fuzzy
msgid ""
"The lock is acquired before the block is executed and always released once  "
"the block is complete."
msgstr "鎖在塊執行之前獲取，並在塊完成後始終釋放。"

#: ../../whatsnew/2.6.rst:312
#, fuzzy
msgid ""
"The :func:`localcontext` function in the :mod:`decimal` module makes it easy "
"to save and restore the current decimal context, which encapsulates the "
"desired precision and rounding characteristics for computations::"
msgstr ""
":mod:`decimal` 模組中的 :func:`localcontext` "
"函式可以輕鬆保存和恢復當前的十進位上下文，它封裝了計算所需的精度和舍入特性::"

#: ../../whatsnew/2.6.rst:331
#, fuzzy
msgid "Writing Context Managers"
msgstr "編寫上下文管理器"

#: ../../whatsnew/2.6.rst:333
#, fuzzy
msgid ""
"Under the hood, the ':keyword:`with`' statement is fairly complicated. Most "
"people will only use ':keyword:`!with`' in company with existing objects and "
"don't need to know these details, so you can skip the rest of this section "
"if you like.  Authors of new objects will need to understand the details of "
"the underlying implementation and should keep reading."
msgstr ""
"在幕後，':keyword:`with`' 語句相當複雜。大多數人只會將 ':keyword:`!with`' 與"
"現有對像一起使用，不需要了解這些細節，因此您可以根據需要跳過本節的其餘部分。"
"新物件的作者需要了解底層實作的細節並且應該繼續閱讀。"

#: ../../whatsnew/2.6.rst:339
#, fuzzy
msgid "A high-level explanation of the context management protocol is:"
msgstr "上下文管理協定的高階解釋是："

#: ../../whatsnew/2.6.rst:341
#, fuzzy
msgid ""
"The expression is evaluated and should result in an object called a "
"\"context manager\".  The context manager must have :meth:`__enter__` and :"
"meth:`__exit__` methods."
msgstr ""
"表達式被評估並且應該產生一個稱為“上下文管理器”的物件。上下文管理器必須具有 "
":meth:`__enter__` 和 :meth:`__exit__` 方法。"

#: ../../whatsnew/2.6.rst:345
#, fuzzy
msgid ""
"The context manager's :meth:`__enter__` method is called.  The value "
"returned is assigned to *VAR*.  If no ``as VAR`` clause is present, the "
"value is simply discarded."
msgstr ""
"上下文管理器的 :meth:`__enter__` 方法被呼叫。回傳的值分配給 *VAR*。"
"如果不存在 ``as VAR`` 子句，則該值將被簡單地丟棄。"

#: ../../whatsnew/2.6.rst:349
#, fuzzy
msgid "The code in *BLOCK* is executed."
msgstr "*BLOCK* 中的程式碼被執行。"

#: ../../whatsnew/2.6.rst:351
#, fuzzy
msgid ""
"If *BLOCK* raises an exception, the context manager's :meth:`__exit__` "
"method is called with three arguments, the exception details (``type, value, "
"traceback``, the same values returned by :func:`sys.exc_info`, which can "
"also be ``None`` if no exception occurred).  The method's return value "
"controls whether an exception is re-raised: any false value re-raises the "
"exception, and ``True`` will result in suppressing it.  You'll only rarely "
"want to suppress the exception, because if you do the author of the code "
"containing the ':keyword:`with`' statement will never realize anything went "
"wrong."
msgstr ""
"如果 *BLOCK* 引發例外，則使用三個參數呼叫上下文管理器的 :meth:`__exit__` "
"方法，例外詳細資訊（``type, value, traceback``，與 :func:`sys.exc_info "
"回傳的值相同`，如果沒有發生例外，也可以是 "
"``None``）。該方法的回傳值控制是否重新引發例外：任何 false "
"值都會重新引發例外，而 ``True`` 將導致抑制它。你很少會想要抑制例外，因為如果"
"你這樣做，包含':keyword:`with`'語句的程式碼的作者將永遠不會意識到出了什麼問題"
"。"

#: ../../whatsnew/2.6.rst:360
#, fuzzy
msgid ""
"If *BLOCK* didn't raise an exception,  the :meth:`__exit__` method is still "
"called, but *type*, *value*, and *traceback* are all ``None``."
msgstr ""
"如果 *BLOCK* 沒有引發例外，:meth:`__exit__` 方法仍然會被呼叫，但是 "
"*type*、*value* 和 *traceback* 都是 ``None``。"

#: ../../whatsnew/2.6.rst:363
#, fuzzy
msgid ""
"Let's think through an example.  I won't present detailed code but will only "
"sketch the methods necessary for a database that supports transactions."
msgstr "讓我們通過一個例子來思考。我不會提供詳細的程式碼，而只會概述支援事務的資料庫"
"所需的方法。"

#: ../../whatsnew/2.6.rst:366
#, fuzzy
msgid ""
"(For people unfamiliar with database terminology: a set of changes to the "
"database are grouped into a transaction.  Transactions can be either "
"committed, meaning that all the changes are written into the database, or "
"rolled back, meaning that the changes are all discarded and the database is "
"unchanged.  See any database textbook for more information.)"
msgstr ""
"（對於不熟悉資料庫術語的人：對資料庫的一組更改被分組到一個事務中。事務可以是"
"提交的，這意味著所有的更改都被寫入資料庫，或者回滾，這意味著所有的更改都被丟"
"棄並且資料庫不變。有關更多資訊，請參閱任何資料庫教科書。）"

#: ../../whatsnew/2.6.rst:372
#, fuzzy
msgid ""
"Let's assume there's an object representing a database connection. Our goal "
"will be to let the user write code like this::"
msgstr "假設有一個表示資料庫連接的物件。我們的目標是讓使用者編寫這樣的程式碼::"

#: ../../whatsnew/2.6.rst:381
#, fuzzy
msgid ""
"The transaction should be committed if the code in the block runs flawlessly "
"or rolled back if there's an exception. Here's the basic interface for :"
"class:`DatabaseConnection` that I'll assume::"
msgstr ""
"如果塊中的程式碼運行無誤，則應提交事務；如果出現例外，則應回滾。這是我假設的 "
":class:`DatabaseConnection` 的基本介面："

#: ../../whatsnew/2.6.rst:394
#, fuzzy
msgid ""
"The :meth:`__enter__` method is pretty easy, having only to start a new "
"transaction.  For this application the resulting cursor object would be a "
"useful result, so the method will return it.  The user can then add ``as "
"cursor`` to their ':keyword:`with`' statement to bind the cursor to a "
"variable name. ::"
msgstr ""
":meth:`__enter__` 方法非常簡單，只需開始一個新事務。對於此應用程式，生成的游"
"標物件將是一個有用的結果，因此該方法將回傳它。然後，使用者可以將 ``as "
"cursor`` 新增到他們的 ':keyword:`with`' 語句中，以將游標綁定到變數名。 ::"

#: ../../whatsnew/2.6.rst:406
#, fuzzy
msgid ""
"The :meth:`__exit__` method is the most complicated because it's where most "
"of the work has to be done.  The method has to check if an exception "
"occurred.  If there was no exception, the transaction is committed.  The "
"transaction is rolled back if there was an exception."
msgstr ""
":meth:`__exit__` 方法是最複雜的，因為它是大部分工作必須完成的地方。該方法必須"
"檢查是否發生例外。如果沒有例外，則提交事務。如果出現例外，事務將回滾。"

#: ../../whatsnew/2.6.rst:411
#, fuzzy
msgid ""
"In the code below, execution will just fall off the end of the function, "
"returning the default value of ``None``.  ``None`` is false, so the "
"exception will be re-raised automatically.  If you wished, you could be more "
"explicit and add a :keyword:`return` statement at the marked location. ::"
msgstr ""
"在下面的程式碼中，執行將剛好從函式的末尾掉下來，回傳預設值 ``None``。 ``None`` "
"為 false，因此將自動重新引發例外。如果您願意，您可以更明確地在標記位置新增一"
"個 :keyword:`return` 語句。 ::"

#: ../../whatsnew/2.6.rst:431
#, fuzzy
msgid "The contextlib module"
msgstr "上下文庫模組"

#: ../../whatsnew/2.6.rst:433
#, fuzzy
msgid ""
"The :mod:`contextlib` module provides some functions and a decorator that "
"are useful when writing objects for use with the ':keyword:`with`' statement."
msgstr ""
":mod:`contextlib` 模組提供了一些函式和一個裝飾器，它們在編寫對像以與 "
"':keyword:`with`' 語句一起使用時很有用。"

#: ../../whatsnew/2.6.rst:436
#, fuzzy
msgid ""
"The decorator is called :func:`contextmanager`, and lets you write a single "
"generator function instead of defining a new class.  The generator should "
"yield exactly one value.  The code up to the :keyword:`yield` will be "
"executed as the :meth:`__enter__` method, and the value yielded will be the "
"method's return value that will get bound to the variable in the ':keyword:"
"`with`' statement's :keyword:`!as` clause, if any.  The code after the :"
"keyword:`!yield` will be executed in the :meth:`__exit__` method.  Any "
"exception raised in the block will be raised by the :keyword:`!yield` "
"statement."
msgstr ""
"裝飾器稱為 :func:`contextmanager`，可讓您編寫單個生成器函式而不是定義新類。生"
"成器應該只產生一個值。 :keyword:`yield` 之前的程式碼將作為 :meth:`__enter__` "
"方法執行，產生的值將是方法的回傳值，該值將綁定到 ':keyword:`with` 中的變數' "
"語句的 :keyword:`!as` 子句，如果有的話。 :keyword:`!yield` 之後的程式碼將在 "
":meth:`__exit__` 方法中執行。塊中引發的任何例外都將由 :keyword:`!yield` "
"語句引發。"

#: ../../whatsnew/2.6.rst:445
#, fuzzy
msgid ""
"Using this decorator, our database example from the previous section could "
"be written as::"
msgstr "使用這個裝飾器，我們上一節的資料庫示例可以寫成："

#: ../../whatsnew/2.6.rst:465
#, fuzzy
msgid ""
"The :mod:`contextlib` module also has a ``nested(mgr1, mgr2, ...)`` function "
"that combines a number of context managers so you don't need to write nested "
"':keyword:`with`' statements.  In this example, the single ':keyword:`!"
"with`' statement both starts a database transaction and acquires a thread "
"lock::"
msgstr ""
":mod:`contextlib` 模組還有一個``nested(mgr1, mgr2, ...)`` "
"函式，它結合了多個上下文管理器，所以你不需要編寫 nested "
"':keyword:`with`'聲明。在此示例中，單個 ':keyword:`!with`' "
"語句啟動資料庫事務並獲取執行緒鎖::"

#: ../../whatsnew/2.6.rst:474
#, fuzzy
msgid ""
"Finally, the :func:`closing` function returns its argument so that it can be "
"bound to a variable, and calls the argument's ``.close()`` method at the end "
"of the block. ::"
msgstr "最後，:func:`closing` 函式回傳它的參數以便它可以綁定到一個變數，"
"並在塊的末尾呼叫參數的 ``.close()`` 方法。 ::"

#: ../../whatsnew/2.6.rst:492
#, fuzzy
msgid ":pep:`343` - The \"with\" statement"
msgstr ":pep:`343` -  ``with``語句"

#: ../../whatsnew/2.6.rst:489
#, fuzzy
msgid ""
"PEP written by Guido van Rossum and Nick Coghlan; implemented by Mike Bland, "
"Guido van Rossum, and Neal Norwitz.  The PEP shows the code generated for a "
"':keyword:`with`' statement, which can be helpful in learning how the "
"statement works."
msgstr ""
"PEP 由 Guido van Rossum 和 Nick Coghlan 撰寫；由 Mike Bland、Guido van "
"Rossum 和 Neal Norwitz 實施。 PEP 顯示了為 ':keyword:`with`' "
"語句生成的程式碼，這有助於了解該語句的工作原理。"

#: ../../whatsnew/2.6.rst:494
#, fuzzy
msgid "The documentation  for the :mod:`contextlib` module."
msgstr ":mod:`contextlib` 模組的文檔。"

#: ../../whatsnew/2.6.rst:501
#, fuzzy
msgid "PEP 366: Explicit Relative Imports From a Main Module"
msgstr "PEP 366：來自主模組的顯式相對導入"

#: ../../whatsnew/2.6.rst:503
#, fuzzy
msgid ""
"Python's :option:`-m` switch allows running a module as a script. When you "
"ran a module that was located inside a package, relative imports didn't work "
"correctly."
msgstr "Python 的 :option:`-m` "
"開關允許將模組作為腳本運行。當您運行位於包內的模組時，相對導入無法正常工作。"

#: ../../whatsnew/2.6.rst:507
#, fuzzy
msgid ""
"The fix for Python 2.6 adds a :attr:`__package__` attribute to modules.  "
"When this attribute is present, relative imports will be relative to the "
"value of this attribute instead of the :attr:`__name__` attribute."
msgstr ""
"Python 2.6 的修復為模組新增了一個 :attr:`__package__` "
"屬性。當此屬性存在時，相對導入將與此屬性的值相關，而不是 :attr:`__name__` "
"屬性。"

#: ../../whatsnew/2.6.rst:512
#, fuzzy
msgid ""
"PEP 302-style importers can then set :attr:`__package__` as necessary. The :"
"mod:`runpy` module that implements the :option:`-m` switch now does this, so "
"relative imports will now work correctly in scripts running from inside a "
"package."
msgstr ""
"然後，PEP 302 樣式的導入程式可以根據需要設定 :attr:`__package__`。實作 "
":option:`-m` 開關的 :mod:`runpy` "
"模組現在可以執行此操作，因此相對導入現在可以在從包內部運行的腳本中正常工作。"

#: ../../whatsnew/2.6.rst:522
#, fuzzy
msgid "PEP 370: Per-user ``site-packages`` Directory"
msgstr "PEP 370：每個使用者的 ``site-packages`` 目錄"

#: ../../whatsnew/2.6.rst:524
#, fuzzy
msgid ""
"When you run Python, the module search path ``sys.path`` usually includes a "
"directory whose path ends in ``\"site-packages\"``.  This directory is "
"intended to hold locally installed packages available to all users using a "
"machine or a particular site installation."
msgstr ""
"當您運行 Python 時，模組搜索路徑 ``sys.path`` 通常包括一個路徑以 ``\"site-"
"packages\"`` 結尾的目錄。此目錄旨在保存本地安裝的軟件包，所有使用者都可以使用"
"機器或特定站點安裝。"

#: ../../whatsnew/2.6.rst:529
#, fuzzy
msgid ""
"Python 2.6 introduces a convention for user-specific site directories. The "
"directory varies depending on the platform:"
msgstr "Python 2.6 引入了使用者特定站點目錄的約定。該目錄因平台而異："

#: ../../whatsnew/2.6.rst:532
#, fuzzy
msgid "Unix and Mac OS X: :file:`~/.local/`"
msgstr "Unix 和 Mac OS X: :file:`~/.local/`"

#: ../../whatsnew/2.6.rst:533
#, fuzzy
msgid "Windows: :file:`%APPDATA%/Python`"
msgstr "Windows: :file:`%APPDATA%/Python`"

#: ../../whatsnew/2.6.rst:535
#, fuzzy
msgid ""
"Within this directory, there will be version-specific subdirectories, such "
"as :file:`lib/python2.6/site-packages` on Unix/Mac OS and :file:`Python26/"
"site-packages` on Windows."
msgstr ""
"在此目錄中，將有特定於版本的子目錄，例如 Unix/Mac OS 上的 :file:`lib/python2."
"6/site-packages` 和 Windows 上的 :file:`Python26/site-packages`。"

#: ../../whatsnew/2.6.rst:539
#, fuzzy
msgid ""
"If you don't like the default directory, it can be overridden by an "
"environment variable.  :envvar:`PYTHONUSERBASE` sets the root directory used "
"for all Python versions supporting this feature.  On Windows, the directory "
"for application-specific data can be changed by setting the :envvar:"
"`APPDATA` environment variable.  You can also modify the :file:`site.py` "
"file for your Python installation."
msgstr ""
"如果您不喜歡預設目錄，可以通過環境變數覆蓋它。 :envvar:`PYTHONUSERBASE` "
"設定用於支援此功能的所有 Python 版本的根目錄。在 Windows 上，可以通過設定 "
"APPDATA 環境變數來更改應用程式特定資料的目錄。您還可以為您的 Python 安裝修改 "
":file:`site.py` 文件。"

#: ../../whatsnew/2.6.rst:546
#, fuzzy
msgid ""
"The feature can be disabled entirely by running Python with the :option:`-s` "
"option or setting the :envvar:`PYTHONNOUSERSITE` environment variable."
msgstr "通過使用 -s 選項運行 Python 或設定 PYTHONNOUSERSITE "
"環境變數，可以完全禁用該功能。"

#: ../../whatsnew/2.6.rst:552
#, fuzzy
msgid ":pep:`370` - Per-user ``site-packages`` Directory"
msgstr ":pep:`370` - 每個使用者的 ``site-packages`` 目錄"

#: ../../whatsnew/2.6.rst:553
msgid "PEP written and implemented by Christian Heimes."
msgstr "由 Christian Heimes 撰寫 PEP 與實作。"

#: ../../whatsnew/2.6.rst:561
#, fuzzy
msgid "PEP 371: The ``multiprocessing`` Package"
msgstr "PEP 371：``多處理``包"

#: ../../whatsnew/2.6.rst:563
#, fuzzy
msgid ""
"The new :mod:`multiprocessing` package lets Python programs create new "
"processes that will perform a computation and return a result to the "
"parent.  The parent and child processes can communicate using queues and "
"pipes, synchronize their operations using locks and semaphores, and can "
"share simple arrays of data."
msgstr ""
"新的 :mod:`multiprocessing` 包允許 Python 程式建立新行程，這些行程將執行計算"
"並將結果回傳給父行程。父行程和子行程可以使用隊列和管道進行通信，使用鎖和信號"
"量同步它們的操作，並且可以共享簡單的資料數組。"

#: ../../whatsnew/2.6.rst:569
#, fuzzy
msgid ""
"The :mod:`multiprocessing` module started out as an exact emulation of the :"
"mod:`threading` module using processes instead of threads.  That goal was "
"discarded along the path to Python 2.6, but the general approach of the "
"module is still similar.  The fundamental class is the :class:`Process`, "
"which is passed a callable object and a collection of arguments.  The :meth:"
"`start` method sets the callable running in a subprocess, after which you "
"can call the :meth:`is_alive` method to check whether the subprocess is "
"still running and the :meth:`join` method to wait for the process to exit."
msgstr ""
":mod:`multiprocessing` 模組最初是使用行程而不是執行緒來精確模擬 "
":mod:`threading` 模組。這個目標在通往 Python 2.6 "
"的道路上被拋棄了，但該模組的一般方法仍然相似。基礎類是 "
"Process，它傳遞一個可呼叫物件和一組參數。 :meth:`start` "
"方法設定在子行程中運行的可呼叫物件，之後可以呼叫 :meth:`is_alive` "
"方法檢查子行程是否還在運行，:meth:`join` 方法等待行程退出。"

#: ../../whatsnew/2.6.rst:579
#, fuzzy
msgid ""
"Here's a simple example where the subprocess will calculate a factorial.  "
"The function doing the calculation is written strangely so that it takes "
"significantly longer when the input argument is a multiple of 4."
msgstr "這是一個簡單的示例，其中子流程將計算階乘。執行計算的函式寫得很奇怪，"
"因此當輸入參數是 4 的倍數時，它花費的時間明顯更長。"

#: ../../whatsnew/2.6.rst:616
#, fuzzy
msgid ""
"A :class:`~queue.Queue` is used to communicate the result of the factorial. "
"The :class:`~queue.Queue` object is stored in a global variable. The child "
"process will use the value of the variable when the child was created; "
"because it's a :class:`~queue.Queue`, parent and child can use the object to "
"communicate.  (If the parent were to change the value of the global "
"variable, the child's value would be unaffected, and vice versa.)"
msgstr ""
"A :class:`~queue.Queue` 用於傳達階乘的結果。 :class:`~queue.Queue` 物件儲存在"
"全局變數中。子行程將使用建立子行程時的變數值；因為它是一個 :class:`~queue."
"Queue`，父母和孩子可以使用該物件進行通信。 "
"（如果父級要更改全局變數的值，子級的值將不受影響，反之亦然。）"

#: ../../whatsnew/2.6.rst:624
#, fuzzy
msgid ""
"Two other classes, :class:`Pool` and :class:`Manager`, provide higher-level "
"interfaces.  :class:`Pool` will create a fixed number of worker processes, "
"and requests can then be distributed to the workers by calling :meth:`apply` "
"or :meth:`apply_async` to add a single request, and :meth:`map` or :meth:"
"`map_async` to add a number of requests.  The following code uses a :class:"
"`Pool` to spread requests across 5 worker processes and retrieve a list of "
"results::"
msgstr ""
"另外兩個類，:class:`Pool` 和:class"
":`Manager`，提供更高階別的介面。 :class:`Pool` "
"將建立固定數量的工作行程，然後可以通過呼叫 :meth:`apply` 或 :meth:`apply_async`"
" 新增單個請求將請求分發給工作行程，然後 :meth:` map` 或 :meth:`map_async` "
"新增多個請求。以下程式碼使用 :class:`Pool` 將請求分散到 5 "
"個工作行程並檢索結果列表::"

#: ../../whatsnew/2.6.rst:642
#, fuzzy
msgid "This produces the following output::"
msgstr "這會產生以下輸出："

#: ../../whatsnew/2.6.rst:651
#, fuzzy
msgid ""
"The other high-level interface, the :class:`Manager` class, creates a "
"separate server process that can hold master copies of Python data "
"structures.  Other processes can then access and modify these data "
"structures using proxy objects.  The following example creates a shared "
"dictionary by calling the :meth:`dict` method; the worker processes then "
"insert values into the dictionary.  (Locking is not done for you "
"automatically, which doesn't matter in this example. :class:`Manager`'s "
"methods also include :meth:`Lock`, :meth:`RLock`, and :meth:`Semaphore` to "
"create shared locks.)"
msgstr ""
"另一個高階介面，Manager 類，建立一個單獨的伺服器行程，可以保存 Python "
"資料結構的主副本。然後其他行程可以使用代理物件訪問和修改這些資料結構。"
"以下示例通過呼叫 :meth:`dict` 方法建立共享字典；工作行程然後將值插入字典。 "
"（鎖定不會自動為您完成，這在本例中無關緊要。:class:`Manager` "
"的方法還包括 :meth:`Lock`、:meth:`RLock` 和 :meth:`Semaphore`建立共享鎖。）"

#: ../../whatsnew/2.6.rst:695
#, fuzzy
msgid "This will produce the output::"
msgstr "這將產生輸出："

#: ../../whatsnew/2.6.rst:706
#, fuzzy
msgid "The documentation for the :mod:`multiprocessing` module."
msgstr ":mod:`multiprocessing` 模組的文檔。"

#: ../../whatsnew/2.6.rst:709
#, fuzzy
msgid ":pep:`371` - Addition of the multiprocessing package"
msgstr ":pep:`371` - 新增多處理包"

#: ../../whatsnew/2.6.rst:709
#, fuzzy
msgid ""
"PEP written by Jesse Noller and Richard Oudkerk; implemented by Richard "
"Oudkerk and Jesse Noller."
msgstr ""
"PEP 由 Jesse Noller 和 Richard Oudkerk 撰寫；由 Richard Oudkerk 和 Jesse "
"Noller 實施。"

#: ../../whatsnew/2.6.rst:718
#, fuzzy
msgid "PEP 3101: Advanced String Formatting"
msgstr "PEP 3101：高階字串格式"

#: ../../whatsnew/2.6.rst:720
#, fuzzy
msgid ""
"In Python 3.0, the ``%`` operator is supplemented by a more powerful string "
"formatting method, :meth:`format`.  Support for the :meth:`str.format` "
"method has been backported to Python 2.6."
msgstr ""
"在 Python 3.0 中，``%`` 運算符由更強大的字串格式化方法 :meth:`format` 補充。"
"對 :meth:`str.format` 方法的支援已反向移植到 Python 2.6。"

#: ../../whatsnew/2.6.rst:724
#, fuzzy
msgid ""
"In 2.6, both 8-bit and Unicode strings have a ``.format()`` method that "
"treats the string as a template and takes the arguments to be formatted. The "
"formatting template uses curly brackets (``{``, ``}``) as special "
"characters::"
msgstr ""
"在 2.6 中，8 位和 Unicode 字串都有一個 ``.format()`` 方法，該方法將字串視為模"
"板並接受要格式化的參數。格式化模板使用大括號（``{``、``}``）作為特殊字元::"

#: ../../whatsnew/2.6.rst:737
#, fuzzy
msgid "Curly brackets can be escaped by doubling them::"
msgstr "可以通過將大括號加倍來轉義大括號::"

#: ../../whatsnew/2.6.rst:742
#, fuzzy
msgid ""
"Field names can be integers indicating positional arguments, such as ``{0}"
"``, ``{1}``, etc. or names of keyword arguments.  You can also supply "
"compound field names that read attributes or access dictionary keys::"
msgstr ""
"欄位名可以是表示位置參數的整數，例如``{0}``、``{1}`` 等，也可以是關鍵字參數的"
"名稱。您還可以提供讀取屬性或訪問字典鍵的複合欄位名稱::"

#: ../../whatsnew/2.6.rst:756
#, fuzzy
msgid ""
"Note that when using dictionary-style notation such as ``[.mp4]``, you don't "
"need to put any quotation marks around the string; it will look up the value "
"using ``.mp4`` as the key.  Strings beginning with a number will be "
"converted to an integer.  You can't write more complicated expressions "
"inside a format string."
msgstr ""
"請注意，當使用諸如``[.mp4]`` "
"之類的字典式表示法時，您不需要在字串兩邊加上任何引號；它將使用“.mp4”作為鍵來"
"查找值。以數字開頭的字串將被轉換為整數。您不能在格式字串中編寫更複雜的表達式"
"。"

#: ../../whatsnew/2.6.rst:762
#, fuzzy
msgid ""
"So far we've shown how to specify which field to substitute into the "
"resulting string.  The precise formatting used is also controllable by "
"adding a colon followed by a format specifier.  For example::"
msgstr "到目前為止，我們已經展示瞭如何指定將哪個欄位替換為結果字串。所使用的精確格式"
"也可以通過新增一個冒號後跟一個格式說明符來控制。例如：："

#: ../../whatsnew/2.6.rst:776
#, fuzzy
msgid "Format specifiers can reference other fields through nesting::"
msgstr "格式說明符可以通過嵌套引用其他欄位："

#: ../../whatsnew/2.6.rst:786
#, fuzzy
msgid "The alignment of a field within the desired width can be specified:"
msgstr "可以指定所需寬度內欄位的對齊方式："

#: ../../whatsnew/2.6.rst:789
#, fuzzy
msgid "Character"
msgstr "特點"

#: ../../whatsnew/2.6.rst:789
#, fuzzy
msgid "Effect"
msgstr "影響"

#: ../../whatsnew/2.6.rst:791
#, fuzzy
msgid "< (default)"
msgstr "<（預設）"

#: ../../whatsnew/2.6.rst:791
#, fuzzy
msgid "Left-align"
msgstr "左對齊"

#: ../../whatsnew/2.6.rst:792
msgid ">"
msgstr ">"

#: ../../whatsnew/2.6.rst:792
#, fuzzy
msgid "Right-align"
msgstr "右對齊"

#: ../../whatsnew/2.6.rst:793
msgid "^"
msgstr "^"

#: ../../whatsnew/2.6.rst:793
#, fuzzy
msgid "Center"
msgstr "中心"

#: ../../whatsnew/2.6.rst:794
msgid "="
msgstr "="

#: ../../whatsnew/2.6.rst:794
#, fuzzy
msgid "(For numeric types only) Pad after the sign."
msgstr "（僅適用於數字型別）在符號後填充。"

#: ../../whatsnew/2.6.rst:797
#, fuzzy
msgid ""
"Format specifiers can also include a presentation type, which controls how "
"the value is formatted.  For example, floating-point numbers can be "
"formatted as a general number or in exponential notation::"
msgstr "格式說明符還可以包含表示型別，它控制值的格式設定方式。例如，浮點數可以格式化"
"為一般數字或指數表示法::"

#: ../../whatsnew/2.6.rst:806
#, fuzzy
msgid ""
"A variety of presentation types are available.  Consult the 2.6 "
"documentation for a :ref:`complete list <formatstrings>`; here's a sample:"
msgstr "有多種演示型別可供選擇。請參閱 2.6 文檔以獲取 :ref:`完整列表 "
"<formatstrings>`；這是一個示例："

#: ../../whatsnew/2.6.rst:810
msgid "``b``"
msgstr "``b``"

#: ../../whatsnew/2.6.rst:810
#, fuzzy
msgid "Binary. Outputs the number in base 2."
msgstr "二進位。輸出基數為 2 的數字。"

#: ../../whatsnew/2.6.rst:811
msgid "``c``"
msgstr "``c``"

#: ../../whatsnew/2.6.rst:811
#, fuzzy
msgid ""
"Character. Converts the integer to the corresponding Unicode character "
"before printing."
msgstr "特點。在印出之前將整數轉換為相應的 Unicode 字元。"

#: ../../whatsnew/2.6.rst:813
msgid "``d``"
msgstr "``d``"

#: ../../whatsnew/2.6.rst:813
#, fuzzy
msgid "Decimal Integer. Outputs the number in base 10."
msgstr "十進位整數。輸出以 10 為基數的數字。"

#: ../../whatsnew/2.6.rst:814
msgid "``o``"
msgstr "``o``"

#: ../../whatsnew/2.6.rst:814
#, fuzzy
msgid "Octal format. Outputs the number in base 8."
msgstr "八進位格式。輸出以 8 為基數的數字。"

#: ../../whatsnew/2.6.rst:815
msgid "``x``"
msgstr "``x``"

#: ../../whatsnew/2.6.rst:815
#, fuzzy
msgid ""
"Hex format. Outputs the number in base 16, using lower-case letters for the "
"digits above 9."
msgstr "十六進位格式。輸出以 16 為基數的數字，9 以上的數字使用小寫字母。"

#: ../../whatsnew/2.6.rst:817
msgid "``e``"
msgstr "``e``"

#: ../../whatsnew/2.6.rst:817
#, fuzzy
msgid ""
"Exponent notation. Prints the number in scientific notation using the letter "
"'e' to indicate the exponent."
msgstr "指數符號。使用字母 ``e``指示指數以科學記數法印出數字。"

#: ../../whatsnew/2.6.rst:819
msgid "``g``"
msgstr "``g``"

#: ../../whatsnew/2.6.rst:819
#, fuzzy
msgid ""
"General format. This prints the number as a fixed-point number, unless the "
"number is too large, in which case it switches to 'e' exponent notation."
msgstr "通用格式。這會將數字印出為定點數，除非數字太大，在這種情況下它會切換為 ``e``指數"
"表示法。"

#: ../../whatsnew/2.6.rst:822
msgid "``n``"
msgstr "``n``"

#: ../../whatsnew/2.6.rst:822
#, fuzzy
msgid ""
"Number. This is the same as 'g' (for floats) or 'd' (for integers), except "
"that it uses the current locale setting to insert the appropriate number "
"separator characters."
msgstr "數字。這與 ``g``（用於浮點數）或 ``d``（用於整數）相同，只是它使用當前區域設定來插"
"入適當的數字分隔符。"

#: ../../whatsnew/2.6.rst:825
msgid "``%``"
msgstr "``%``"

#: ../../whatsnew/2.6.rst:825
#, fuzzy
msgid ""
"Percentage. Multiplies the number by 100 and displays in fixed ('f') format, "
"followed by a percent sign."
msgstr "百分比。將數字乘以 100 並以固定 ('f') 格式顯示，後跟百分號。"

#: ../../whatsnew/2.6.rst:829
#, fuzzy
msgid ""
"Classes and types can define a :meth:`__format__` method to control how "
"they're formatted.  It receives a single argument, the format specifier::"
msgstr "類和型別可以定義一個 :meth:`__format__` "
"方法來控制它們的格式。它接收一個參數，格式說明符::"

#: ../../whatsnew/2.6.rst:838
#, fuzzy
msgid ""
"There's also a :func:`format` builtin that will format a single value.  It "
"calls the type's :meth:`__format__` method with the provided specifier::"
msgstr "還有一個 :func:`format` 內建函式可以格式化單個值。"
"它使用提供的說明符呼叫型別的 :meth:`__format__` 方法::"

#: ../../whatsnew/2.6.rst:849
msgid ":ref:`formatstrings`"
msgstr ":ref:`formatstrings`"

#: ../../whatsnew/2.6.rst:849
#, fuzzy
msgid "The reference documentation for format fields."
msgstr "格式欄位的參考文檔。"

#: ../../whatsnew/2.6.rst:851
#, fuzzy
msgid ":pep:`3101` - Advanced String Formatting"
msgstr ":pep:`3101` - 高階字串格式化"

#: ../../whatsnew/2.6.rst:852
msgid "PEP written by Talin. Implemented by Eric Smith."
msgstr "由 Talin 撰寫 PEP、由 Eric Smith 實作。"

#: ../../whatsnew/2.6.rst:859
#, fuzzy
msgid "PEP 3105: ``print`` As a Function"
msgstr "PEP 3105：``print`` 作為函式"

#: ../../whatsnew/2.6.rst:861
#, fuzzy
msgid ""
"The ``print`` statement becomes the :func:`print` function in Python 3.0. "
"Making :func:`print` a function makes it possible to replace the function by "
"doing ``def print(...)`` or importing a new function from somewhere else."
msgstr ""
"``print`` 語句成為 Python 3.0 中的 :func:`print` 函式。使 :func:`print` "
"成為函式可以通過執行 ``def print(...)`` 或從其他地方導入新函式來替換該函式。"

#: ../../whatsnew/2.6.rst:865
#, fuzzy
msgid ""
"Python 2.6 has a ``__future__`` import that removes ``print`` as language "
"syntax, letting you use the functional form instead.  For example::"
msgstr "Python 2.6 有一個 ``__future__`` 導入，它刪除了 ``print`` "
"作為語言語法，讓您可以使用函式形式。例如：："

#: ../../whatsnew/2.6.rst:871
#, fuzzy
msgid "The signature of the new function is::"
msgstr "新函式的簽名是："

#: ../../whatsnew/2.6.rst:876
#, fuzzy
msgid "The parameters are:"
msgstr "參數是："

#: ../../whatsnew/2.6.rst:878
#, fuzzy
msgid "*args*: positional arguments whose values will be printed out."
msgstr "*args*：位置參數，其值將被印出出來。"

#: ../../whatsnew/2.6.rst:879
#, fuzzy
msgid "*sep*: the separator, which will be printed between arguments."
msgstr "*sep*：分隔符，將在參數之間印出。"

#: ../../whatsnew/2.6.rst:880
#, fuzzy
msgid ""
"*end*: the ending text, which will be printed after all of the arguments "
"have been output."
msgstr "*end*：結束文本，將在所有參數輸出後印出。"

#: ../../whatsnew/2.6.rst:882
#, fuzzy
msgid "*file*: the file object to which the output will be sent."
msgstr "*file*：輸出將發送到的文件物件。"

#: ../../whatsnew/2.6.rst:886
#, fuzzy
msgid ":pep:`3105` - Make print a function"
msgstr ":pep:`3105` - 使 print 成為一個函式"

#: ../../whatsnew/2.6.rst:887
msgid "PEP written by Georg Brandl."
msgstr "由 Georg Brandl 撰寫 PEP。"

#: ../../whatsnew/2.6.rst:894
#, fuzzy
msgid "PEP 3110: Exception-Handling Changes"
msgstr "PEP 3110：例外處理變更"

#: ../../whatsnew/2.6.rst:896
#, fuzzy
msgid ""
"One error that Python programmers occasionally make is writing the following "
"code::"
msgstr "Python 程式員偶爾會犯的一個錯誤是編寫以下程式碼："

#: ../../whatsnew/2.6.rst:904
#, fuzzy
msgid ""
"The author is probably trying to catch both :exc:`TypeError` and :exc:"
"`ValueError` exceptions, but this code actually does something different: it "
"will catch :exc:`TypeError` and bind the resulting exception object to the "
"local name ``\"ValueError\"``.  The :exc:`ValueError` exception will not be "
"caught at all.  The correct code specifies a tuple of exceptions::"
msgstr ""
"作者可能試圖同時捕獲 :exc:`TypeError` 和 :exc:`ValueError` "
"例外，但這段程式碼實際上做了一些不同的事情：它將捕獲 :exc:`TypeError` "
"並將生成的例外物件綁定到本地名稱``“值錯誤”``。 :exc:`ValueError` "
"例外不會被捕獲。正確的程式碼指定了一個例外元組::"

#: ../../whatsnew/2.6.rst:916
#, fuzzy
msgid ""
"This error happens because the use of the comma here is ambiguous: does it "
"indicate two different nodes in the parse tree, or a single node that's a "
"tuple?"
msgstr "發生此錯誤是因為此處逗號的使用不明確：它是表示解析樹中的兩個不同節點，還是表"
"示一個元組節點？"

#: ../../whatsnew/2.6.rst:920
#, fuzzy
msgid ""
"Python 3.0 makes this unambiguous by replacing the comma with the word "
"\"as\".  To catch an exception and store the exception object in the "
"variable ``exc``, you must write::"
msgstr "Python 3.0 通過用單詞 ``as``替換逗號來明確這一點。"
"要捕獲例外並將例外物件儲存在變數 ``exc`` 中，您必須編寫："

#: ../../whatsnew/2.6.rst:929
#, fuzzy
msgid ""
"Python 3.0 will only support the use of \"as\", and therefore interprets the "
"first example as catching two different exceptions.  Python 2.6 supports "
"both the comma and \"as\", so existing code will continue to work.  We "
"therefore suggest using \"as\" when writing new Python code that will only "
"be executed with 2.6."
msgstr ""
"Python 3.0 將只支援使用 ``as``，因此將第一個示例解釋為捕獲兩個不同的例外。 "
"Python 2.6 同時支援逗號和 ``as``，因此現有程式碼將繼續工作。因此，"
"我們建議在編寫只能使用 2.6 執行的新 Python 程式碼時使用 ``as``。"

#: ../../whatsnew/2.6.rst:937
#, fuzzy
msgid ":pep:`3110` - Catching Exceptions in Python 3000"
msgstr ":pep:`3110` - 在 Python 3000 中捕獲例外"

#: ../../whatsnew/2.6.rst:938
msgid "PEP written and implemented by Collin Winter."
msgstr "由 Collin Winter 撰寫 PEP 與實作。"

#: ../../whatsnew/2.6.rst:945
#, fuzzy
msgid "PEP 3112: Byte Literals"
msgstr "PEP 3112：位元組文字"

#: ../../whatsnew/2.6.rst:947
#, fuzzy
msgid ""
"Python 3.0 adopts Unicode as the language's fundamental string type and "
"denotes 8-bit literals differently, either as ``b'string'`` or using a :"
"class:`bytes` constructor.  For future compatibility, Python 2.6 adds :class:"
"`bytes` as a synonym for the :class:`str` type, and it also supports the "
"``b''`` notation."
msgstr ""
"Python 3.0 採用 Unicode 作為語言的基本字串型別，並以不同的方式表示 8 "
"位文字，要么表示為“b'string”，要么使用 :class:`bytes` "
"構造函式。為了將來的相容性，Python 2.6 新增了 :class:`bytes` 作為 "
":class:`str` 型別的同義詞，它還支援 ``b''`` 表示法。"

#: ../../whatsnew/2.6.rst:954
#, fuzzy
msgid ""
"The 2.6 :class:`str` differs from 3.0's :class:`bytes` type in various ways; "
"most notably, the constructor is completely different.  In 3.0, ``bytes([65, "
"66, 67])`` is 3 elements long, containing the bytes representing ``ABC``; in "
"2.6, ``bytes([65, 66, 67])`` returns the 12-byte string representing the :"
"func:`str` of the list."
msgstr ""
"2.6 :class:`str` 與 3.0 的 :class:`bytes` "
"型別有很多不同；最值得注意的是，構造函式完全不同。在 3.0 中，``bytes([65, "
"66, 67])`` 是 3 個元素長，包含表示 ``ABC`` 的位元組；在 2.6 中，``bytes([65, "
"66, 67])`` 回傳表示列表的 str 的 12 位元組字串。"

#: ../../whatsnew/2.6.rst:960
#, fuzzy
msgid ""
"The primary use of :class:`bytes` in 2.6 will be to write tests of object "
"type such as ``isinstance(x, bytes)``.  This will help the 2to3 converter, "
"which can't tell whether 2.x code intends strings to contain either "
"characters or 8-bit bytes; you can now use either :class:`bytes` or :class:"
"`str` to represent your intention exactly, and the resulting code will also "
"be correct in Python 3.0."
msgstr ""
":class:`bytes` 在 2.6 中的主要用途是編寫對像型別的測試，例如 ``isinstance(x, "
"bytes)``。這將有助於 2to3 轉換器，它無法判斷 2.x "
"程式碼是否打算讓字串包含字元或 8 位位元組；您現在可以使用 :class:`bytes` 或 "
":class:`str` 來準確表示您的意圖，結果程式碼在 Python 3.0 中也將是正確的。"

#: ../../whatsnew/2.6.rst:967
#, fuzzy
msgid ""
"There's also a ``__future__`` import that causes all string literals to "
"become Unicode strings.  This means that ``\\u`` escape sequences can be "
"used to include Unicode characters::"
msgstr ""
"還有一個 ``__future__`` 導入導致所有字串文字成為 Unicode 字串。這意味著 ``\\u"
"`` 轉義序列可用於包含 Unicode 字元::"

#: ../../whatsnew/2.6.rst:979
#, fuzzy
msgid ""
"At the C level, Python 3.0 will rename the existing 8-bit string type, "
"called :c:type:`PyStringObject` in Python 2.x, to :c:type:`PyBytesObject`.  "
"Python 2.6 uses ``#define`` to support using the names :c:func:"
"`PyBytesObject`, :c:func:`PyBytes_Check`, :c:func:"
"`PyBytes_FromStringAndSize`, and all the other functions and macros used "
"with strings."
msgstr ""
"在 C 級別，Python 3.0 會將現有的 8 位字串型別（在 Python 2.x "
"中稱為 :c:type:`PyStringObject`）重命名為 :c:type:`PyBytesObject`。 Python "
"2.6 使用 ``#define`` 來支援使用名稱 :c:func:`PyBytesObject`、:c:func:`PyBytes"
"_Check`、:c:func:`PyBytes_FromStringAndSize`，以及所有其他函式和巨集字串。"

#: ../../whatsnew/2.6.rst:986
#, fuzzy
msgid ""
"Instances of the :class:`bytes` type are immutable just as strings are.  A "
"new :class:`bytearray` type stores a mutable sequence of bytes::"
msgstr ":class:`bytes` 型別的實例與字串一樣是不可變的。一個新的 :class:`bytearray` "
"型別儲存一個可變的位元組序列::"

#: ../../whatsnew/2.6.rst:1001
#, fuzzy
msgid ""
"Byte arrays support most of the methods of string types, such as :meth:"
"`startswith`/:meth:`endswith`, :meth:`find`/:meth:`rfind`, and some of the "
"methods of lists, such as :meth:`append`, :meth:`pop`,  and :meth:`reverse`."
msgstr ""
"位元組數組支援字串型別的大部分方法，如 :meth:`startswith`/:meth:`endswith`、:m"
"eth:`find`/:meth:`rfind`，以及列表的部分方法，如作為 "
":meth:`append`、:meth:`pop` 和 :meth:`reverse`。"

#: ../../whatsnew/2.6.rst:1014
#, fuzzy
msgid ""
"There's also a corresponding C API, with :c:func:`PyByteArray_FromObject`, :"
"c:func:`PyByteArray_FromStringAndSize`, and various other functions."
msgstr ""
"還有相應的 C API，包括 :c:func:`PyByteArray_FromObject`、:c:func:`PyByteArray"
"_FromStringAndSize` 和各種其他函式。"

#: ../../whatsnew/2.6.rst:1021
#, fuzzy
msgid ":pep:`3112` - Bytes literals in Python 3000"
msgstr ":pep:`3112` - Python 3000 中的位元組文字"

#: ../../whatsnew/2.6.rst:1022
#, fuzzy
msgid "PEP written by Jason Orendorff; backported to 2.6 by Christian Heimes."
msgstr "PEP 由 Jason Orendorff 撰寫；由 Christian Heimes 向後移植到 2.6。"

#: ../../whatsnew/2.6.rst:1029
#, fuzzy
msgid "PEP 3116: New I/O Library"
msgstr "PEP 3116：新的 I/O 庫"

#: ../../whatsnew/2.6.rst:1031
#, fuzzy
msgid ""
"Python's built-in file objects support a number of methods, but file-like "
"objects don't necessarily support all of them.  Objects that imitate files "
"usually support :meth:`read` and :meth:`write`, but they may not support :"
"meth:`readline`, for example.  Python 3.0 introduces a layered I/O library "
"in the :mod:`io` module that separates buffering and text-handling features "
"from the fundamental read and write operations."
msgstr ""
"Python 的內建文件物件支援多種方法，但類文件對像不一定支援所有這些方法。"
"模仿文件的物件通常支援 :meth:`read` 和 :meth:`write`，但它們可能不支援 "
":meth:`readline`，例如。 Python 3.0 在 :mod:`io` 模組中引入了一個分層的 I/O "
"庫，它將緩沖和文本處理功能與基本的讀寫操作分開。"

#: ../../whatsnew/2.6.rst:1039
#, fuzzy
msgid ""
"There are three levels of abstract base classes provided by the :mod:`io` "
"module:"
msgstr ":mod:`io` 模組提供了三個級別的抽象基底類別："

#: ../../whatsnew/2.6.rst:1042
#, fuzzy
msgid ""
":class:`RawIOBase` defines raw I/O operations: :meth:`read`, :meth:"
"`readinto`, :meth:`write`, :meth:`seek`, :meth:`tell`, :meth:`truncate`, "
"and :meth:`close`. Most of the methods of this class will often map to a "
"single system call. There are also :meth:`readable`, :meth:`writable`, and :"
"meth:`seekable` methods for determining what operations a given object will "
"allow."
msgstr ""
":class:`RawIOBase` 定義原始 I/O 操作：:meth:`read`, :meth:`readinto`, "
":meth:`write`, :meth:`seek`, :meth:`tell`, :meth :`truncate` 和 "
":meth:`close`。此類的大多數方法通常會映射到單個系統呼叫。還有 "
":meth:`readable`、:meth:`writable` 和 :meth:`seekable` "
"方法用於確定給定物件將允許的操作。"

#: ../../whatsnew/2.6.rst:1050
#, fuzzy
msgid ""
"Python 3.0 has concrete implementations of this class for files and sockets, "
"but Python 2.6 hasn't restructured its file and socket objects in this way."
msgstr "Python 3.0 為文件和 socket 提供了此類的具體實作，但 Python 2.6 "
"並未以這種方式重構其文件和 socket 物件。"

#: ../../whatsnew/2.6.rst:1056
#, fuzzy
msgid ""
":class:`BufferedIOBase` is an abstract base class that buffers data in "
"memory to reduce the number of system calls used, making I/O processing more "
"efficient. It supports all of the methods of :class:`RawIOBase`, and adds a :"
"attr:`raw` attribute holding the underlying raw object."
msgstr ""
":class:`BufferedIOBase` "
"是一個抽象基底類別，它在記憶體中緩衝資料以減少使用的系統呼叫次數，使 I/O "
"處理更加高效。它支援 :class:`RawIOBase` 的所有方法，並新增了一個 :attr:`raw` "
"屬性來保存底層原始物件。"

#: ../../whatsnew/2.6.rst:1062
#, fuzzy
msgid ""
"There are five concrete classes implementing this ABC. :class:"
"`BufferedWriter` and :class:`BufferedReader` are for objects that support "
"write-only or read-only usage that have a :meth:`seek` method for random "
"access.  :class:`BufferedRandom` objects support read and write access upon "
"the same underlying stream, and :class:`BufferedRWPair` is for objects such "
"as TTYs that have both read and write operations acting upon unconnected "
"streams of data. The :class:`BytesIO` class supports reading, writing, and "
"seeking over an in-memory buffer."
msgstr ""
"有五個具體類實作了這個 ABC。 :class:`BufferedWriter` 和 "
":class:`BufferedReader` 適用於支援只寫或只讀用法的物件，"
"它們具有用於隨機訪問的 :meth:`seek` 方法。 :class:`BufferedRandom` "
"物件支援對同一底層流的讀寫訪問，而 :class:`BufferedRWPair` "
"適用於對未連接的資料流執行讀寫操作的物件，例如 TTY。 :class:`BytesIO` "
"類支援讀取、寫入和查找記憶體緩衝區。"

#: ../../whatsnew/2.6.rst:1075
#, fuzzy
msgid ""
":class:`TextIOBase`: Provides functions for reading and writing strings "
"(remember, strings will be Unicode in Python 3.0), and supporting :term:"
"`universal newlines`.  :class:`TextIOBase` defines the :meth:`readline` "
"method and supports iteration upon objects."
msgstr ""
":class:`TextIOBase`: 提供讀取和寫入字串的函式（記住，字串在 Python 3.0 "
"中將是 Unicode），並支援 :term:`universal newlines`。 :class:`TextIOBase` "
"定義了 :meth:`readline` 方法並支援對物件進行疊代。"

#: ../../whatsnew/2.6.rst:1081
#, fuzzy
msgid ""
"There are two concrete implementations.  :class:`TextIOWrapper` wraps a "
"buffered I/O object, supporting all of the methods for text I/O and adding "
"a :attr:`buffer` attribute for access to the underlying object.  :class:"
"`StringIO` simply buffers everything in memory without ever writing anything "
"to disk."
msgstr ""
"具體實作有兩種。 :class:`TextIOWrapper` 包裝一個緩衝 I/O 物件，支援文本 I/O "
"的所有方法並新增一個 :attr:`buffer` 屬性以訪問底層物件。 :class:`StringIO` "
"只是將所有內容緩沖在記憶體中，而無需將任何內容寫入磁盤。"

#: ../../whatsnew/2.6.rst:1087
#, fuzzy
msgid ""
"(In Python 2.6, :class:`io.StringIO` is implemented in pure Python, so it's "
"pretty slow.   You should therefore stick with the existing :mod:`StringIO` "
"module or :mod:`cStringIO` for now.  At some point Python 3.0's :mod:`io` "
"module will be rewritten into C for speed, and perhaps the C implementation "
"will be  backported to the 2.x releases.)"
msgstr ""
"（在 Python 2.6 中，:class:`io.StringIO` 是用純 Python "
"實作的，所以它很慢。因此，您現在應該堅持使用現有的 :mod:`StringIO` "
"模組或 :mod:`cStringIO`。在某些情況下點 Python 3.0 的 :mod:`io` "
"模組將被重寫為 C 以提高速度，並且 C 實作可能會向後移植到 2.x 版本。）"

#: ../../whatsnew/2.6.rst:1093
#, fuzzy
msgid ""
"In Python 2.6, the underlying implementations haven't been restructured to "
"build on top of the :mod:`io` module's classes.  The module is being "
"provided to make it easier to write code that's forward-compatible with 3.0, "
"and to save developers the effort of writing their own implementations of "
"buffering and text I/O."
msgstr ""
"在 Python 2.6 中，底層實作尚未重構為構建在 :mod:`io` 模組的類之上。"
"提供該模組是為了更容易編寫與 3.0 向前相容的程式碼，"
"並節省開發人員編寫他們自己的緩沖和文本 I/O 實作的工作。"

#: ../../whatsnew/2.6.rst:1103
#, fuzzy
msgid ":pep:`3116` - New I/O"
msgstr ":pep:`3116` - 新的 I/O"

#: ../../whatsnew/2.6.rst:1102
#, fuzzy
msgid ""
"PEP written by Daniel Stutzbach, Mike Verdone, and Guido van Rossum. Code by "
"Guido van Rossum, Georg Brandl, Walter Doerwald, Jeremy Hylton, Martin von "
"Löwis, Tony Lownds, and others."
msgstr ""
"PEP 由 Daniel Stutzbach、Mike Verdone 和 Guido van Rossum 編寫。 Guido van "
"Rossum、Georg Brandl、Walter Doerwald、Jeremy Hylton、Martin von Löwis、Tony "
"Lownds 等人編寫的程式碼。"

#: ../../whatsnew/2.6.rst:1111
msgid "PEP 3118: Revised Buffer Protocol"
msgstr "PEP 3118：修訂緩衝協定"

#: ../../whatsnew/2.6.rst:1113
#, fuzzy
msgid ""
"The buffer protocol is a C-level API that lets Python types exchange "
"pointers into their internal representations.  A memory-mapped file can be "
"viewed as a buffer of characters, for example, and this lets another module "
"such as :mod:`re` treat memory-mapped files as a string of characters to be "
"searched."
msgstr ""
"緩衝協定是一個 C 級 API，它允許 Python 型別將指標交換到它們的內部表示中。例如"
"，記憶體映射文件可以被視為字元緩衝區，這讓另一個模組（如 "
":mod:`re`）將記憶體映射文件視為要搜索的字串。"

#: ../../whatsnew/2.6.rst:1119
#, fuzzy
msgid ""
"The primary users of the buffer protocol are numeric-processing packages "
"such as NumPy, which expose the internal representation of arrays so that "
"callers can write data directly into an array instead of going through a "
"slower API.  This PEP updates the buffer protocol in light of experience "
"from NumPy development, adding a number of new features such as indicating "
"the shape of an array or locking a memory region."
msgstr ""
"緩衝區協定的主要使用者是 NumPy "
"等數字處理包，它公開數組的內部表示，以便呼叫者可以將資料直接寫入數組，"
"而不是通過較慢的 API。此 PEP 根據 NumPy 開發的經驗更新了緩衝區協定，新增了許"
"多新功能，例如指示數組的形狀或鎖定記憶體區域。"

#: ../../whatsnew/2.6.rst:1126
#, fuzzy
msgid ""
"The most important new C API function is ``PyObject_GetBuffer(PyObject *obj, "
"Py_buffer *view, int flags)``, which takes an object and a set of flags, and "
"fills in the ``Py_buffer`` structure with information about the object's "
"memory representation.  Objects can use this operation to lock memory in "
"place while an external caller could be modifying the contents, so there's a "
"corresponding ``PyBuffer_Release(Py_buffer *view)`` to indicate that the "
"external caller is done."
msgstr ""
"最重要的新 C API 函式是 PyObject_GetBuffer(PyObject *obj, Py_buffer *view, "
"int flags)物件的記憶體表示。物件可以使用此操作將記憶體鎖定到位，而外部呼叫者"
"可能正在修改內容，因此有一個相應的 PyBuffer_Release(Py_buffer *view) "
"來指示外部呼叫者已完成。"

#: ../../whatsnew/2.6.rst:1138
#, fuzzy
msgid ""
"The *flags* argument to :c:func:`PyObject_GetBuffer` specifies constraints "
"upon the memory returned.  Some examples are:"
msgstr ":c:func:`PyObject_GetBuffer` 的 *flags* "
"參數指定對回傳記憶體的約束。一些例子是："

#: ../../whatsnew/2.6.rst:1141
#, fuzzy
msgid ":const:`PyBUF_WRITABLE` indicates that the memory must be writable."
msgstr ":const:`PyBUF_WRITABLE` 表示記憶體必須是可寫的。"

#: ../../whatsnew/2.6.rst:1143
#, fuzzy
msgid ""
":const:`PyBUF_LOCK` requests a read-only or exclusive lock on the memory."
msgstr ":const:`PyBUF_LOCK` 請求記憶體上的只讀或排他鎖。"

#: ../../whatsnew/2.6.rst:1145
#, fuzzy
msgid ""
":const:`PyBUF_C_CONTIGUOUS` and :const:`PyBUF_F_CONTIGUOUS` requests a C-"
"contiguous (last dimension varies the fastest) or Fortran-contiguous (first "
"dimension varies the fastest) array layout."
msgstr ""
":const:`PyBUF_C_CONTIGUOUS` 和 :const:`PyBUF_F_CONTIGUOUS` 請求 C "
"連續（最後一個維度變化最快）或 Fortran 連續（第一個維度變化最快）數組佈局。"

#: ../../whatsnew/2.6.rst:1149
#, fuzzy
msgid ""
"Two new argument codes for :c:func:`PyArg_ParseTuple`, ``s*`` and ``z*``, "
"return locked buffer objects for a parameter."
msgstr ":c:func:`PyArg_ParseTuple`、``s*`` 和 ``z*`` "
"的兩個新參數程式碼，回傳參數的鎖定緩衝區物件。"

#: ../../whatsnew/2.6.rst:1155
#, fuzzy
msgid ":pep:`3118` - Revising the buffer protocol"
msgstr ":pep:`3118` - 修改緩衝協定"

#: ../../whatsnew/2.6.rst:1155
#, fuzzy
msgid ""
"PEP written by Travis Oliphant and Carl Banks; implemented by Travis "
"Oliphant."
msgstr "PEP 由 Travis Oliphant 和 Carl Banks 撰寫；由 Travis Oliphant 實施。"

#: ../../whatsnew/2.6.rst:1164
#, fuzzy
msgid "PEP 3119: Abstract Base Classes"
msgstr "PEP 3119：抽象基底類別"

#: ../../whatsnew/2.6.rst:1166
#, fuzzy
msgid ""
"Some object-oriented languages such as Java support interfaces, declaring "
"that a class has a given set of methods or supports a given access "
"protocol.  Abstract Base Classes (or ABCs) are an equivalent feature for "
"Python. The ABC support consists of an :mod:`abc` module containing a "
"metaclass called :class:`ABCMeta`, special handling of this metaclass by "
"the :func:`isinstance` and :func:`issubclass` builtins, and a collection of "
"basic ABCs that the Python developers think will be widely useful.  Future "
"versions of Python will probably add more ABCs."
msgstr ""
"某些面向物件的語言（如 Java）支援介面，聲明一個類具有一組給定的方法或支援給定"
"的訪問協定。抽象基底類別（或 ABC）是 Python 的等效功能。 ABC 支援包括一個 "
":mod:`abc` 模組，其中包含一個名為 :class:`ABCMeta` 的元類，由 "
":func:`isinstance` 和 :func:`issubclass` 內建函式對該元類的特殊處理，"
"以及一組Python 開發人員認為將廣泛有用的基本 ABC。未來版本的 Python "
"可能會新增更多 ABC。"

#: ../../whatsnew/2.6.rst:1176
#, fuzzy
msgid ""
"Let's say you have a particular class and wish to know whether it supports "
"dictionary-style access.  The phrase \"dictionary-style\" is vague, however. "
"It probably means that accessing items with ``obj[1]`` works. Does it imply "
"that setting items with ``obj[2] = value`` works? Or that the object will "
"have :meth:`keys`, :meth:`values`, and :meth:`items` methods?  What about "
"the iterative variants  such as :meth:`iterkeys`?  :meth:`copy` and :meth:"
"`update`?  Iterating over the object with :func:`iter`?"
msgstr ""
"假設您有一個特定的類並且想知道它是否支援字典式訪問。然而，“字典式”一詞含糊不"
"清。這可能意味著使用 ``obj[1]`` 訪問項目是有效的。這是否意味著使用 ``obj[2] "
"= value`` 設定項目有效？或者該物件將具有 :meth:`keys`、:meth:`values` 和 "
":meth:`items` 方法？像 :meth:`iterkeys` 這樣的疊代變體呢？ :meth:`copy` 和 "
":meth:`update`？用 :func:`iter` 遍歷物件？"

#: ../../whatsnew/2.6.rst:1184
#, fuzzy
msgid ""
"The Python 2.6 :mod:`collections` module includes a number of different ABCs "
"that represent these distinctions.  :class:`Iterable` indicates that a class "
"defines :meth:`__iter__`, and :class:`Container` means the class defines a :"
"meth:`__contains__` method and therefore supports ``x in y`` expressions.  "
"The basic dictionary interface of getting items, setting items, and :meth:"
"`keys`, :meth:`values`, and :meth:`items`, is defined by the :class:"
"`MutableMapping` ABC."
msgstr ""
"Python 2.6 :mod:`collections` 模組包括許多代表這些區別的不同 ABC。 "
":class:`Iterable` 表示一個類定義了 :meth:`__iter__`，而 :class:`Container` "
"表示該類定義了一個 :meth:`__contains__` 方法，因此支援 ``x in y`` "
"表達式。獲取項目、設定項目和 :meth:`keys`、:meth:`values` 和 :meth:`items` "
"的基本字典介面由 :class:`MutableMapping` ABC 定義。"

#: ../../whatsnew/2.6.rst:1193
#, fuzzy
msgid ""
"You can derive your own classes from a particular ABC to indicate they "
"support that ABC's interface::"
msgstr "您可以從特定的 ABC 派生您自己的類，以表明它們支援該 ABC 的介面::"

#: ../../whatsnew/2.6.rst:1202
#, fuzzy
msgid ""
"Alternatively, you could write the class without deriving from the desired "
"ABC and instead register the class by calling the ABC's :meth:`register` "
"method::"
msgstr "或者，您可以在不從所需 ABC 派生的情況下編寫類，而是通過呼叫 ABC 的 "
":meth:`register` 方法來註冊類："

#: ../../whatsnew/2.6.rst:1213
#, fuzzy
msgid ""
"For classes that you write, deriving from the ABC is probably clearer. The :"
"meth:`register`  method is useful when you've written a new ABC that can "
"describe an existing type or class, or if you want to declare that some "
"third-party class implements an ABC. For example, if you defined a :class:"
"`PrintableType` ABC, it's legal to do::"
msgstr ""
"對於您編寫的類，從 ABC 派生可能更清楚。"
"當您編寫了一個可以描述現有型別或類的新 ABC，或者您想要聲明某個第三方類實作 "
"ABC 時，:meth:`register` 方法很有用。例如，如果您定義了一個 "
":class:`PrintableType` ABC，那麼這樣做是合法的："

#: ../../whatsnew/2.6.rst:1225
#, fuzzy
msgid ""
"Classes should obey the semantics specified by an ABC, but Python can't "
"check this; it's up to the class author to understand the ABC's requirements "
"and to implement the code accordingly."
msgstr "類應該遵守 ABC 指定的語義，但 Python 無法檢查這一點；類作者需要了解 ABC "
"的要求並相應地實作程式碼。"

#: ../../whatsnew/2.6.rst:1229
#, fuzzy
msgid ""
"To check whether an object supports a particular interface, you can now "
"write::"
msgstr "要檢查對像是否支援特定介面，您現在可以編寫："

#: ../../whatsnew/2.6.rst:1236
#, fuzzy
msgid ""
"Don't feel that you must now begin writing lots of checks as in the above "
"example.  Python has a strong tradition of duck-typing, where explicit type-"
"checking is never done and code simply calls methods on an object, trusting "
"that those methods will be there and raising an exception if they aren't.  "
"Be judicious in checking for ABCs and only do it where it's absolutely "
"necessary."
msgstr ""
"不要覺得您現在必須像上面的示例那樣開始編寫大量支票。 Python 有一個強大的鴨子"
"型別傳統，其中永遠不會進行顯式型別檢查，程式碼只是呼叫對像上的方法，相信這些"
"方法會存在，如果不存在則引發例外。在檢查 ABC "
"時要謹慎，並且只在絕對必要時才進行。"

#: ../../whatsnew/2.6.rst:1243
#, fuzzy
msgid ""
"You can write your own ABCs by using ``abc.ABCMeta`` as the metaclass in a "
"class definition::"
msgstr "您可以通過使用“abc.ABCMeta”作為類定義中的元類來編寫自己的 ABC："

#: ../../whatsnew/2.6.rst:1264
#, fuzzy
msgid ""
"In the :class:`Drawable` ABC above, the :meth:`draw_doubled` method renders "
"the object at twice its size and can be implemented in terms of other "
"methods described in :class:`Drawable`.  Classes implementing this ABC "
"therefore don't need to provide their own implementation of :meth:"
"`draw_doubled`, though they can do so.  An implementation of :meth:`draw` is "
"necessary, though; the ABC can't provide a useful generic implementation."
msgstr ""
"在上面的 :class:`Drawable` ABC 中，:meth:`draw_doubled` "
"方法將物件渲染為其兩倍大小，並且可以根據 :class:`Drawable` "
"中描述的其他方法來實作。因此，實作此 ABC 的類不需要提供它們自己的 "
"draw_doubled 實作，儘管它們可以這樣做。不過，需要實作 :meth:`draw`； ABC "
"無法提供有用的通用實作。"

#: ../../whatsnew/2.6.rst:1272
#, fuzzy
msgid ""
"You can apply the ``@abstractmethod`` decorator to methods such as :meth:"
"`draw` that must be implemented; Python will then raise an exception for "
"classes that don't define the method. Note that the exception is only raised "
"when you actually try to create an instance of a subclass lacking the "
"method::"
msgstr ""
"您可以將``@abstractmethod`` "
"裝飾器應用於必須實作的方法，例如 :meth:`draw`；然後，Python 將為未定義該方法"
"的類引發例外。請注意，僅當您實際嘗試建立缺少該方法的子類別的實例時才會引發例"
"外："

#: ../../whatsnew/2.6.rst:1287
#, fuzzy
msgid ""
"Abstract data attributes can be declared using the ``@abstractproperty`` "
"decorator::"
msgstr "可以使用 @abstractproperty 裝飾器聲明抽像資料屬性："

#: ../../whatsnew/2.6.rst:1297
#, fuzzy
msgid "Subclasses must then define a :meth:`readonly` property."
msgstr "然後子類別必須定義一個 :meth:`readonly` 屬性。"

#: ../../whatsnew/2.6.rst:1303
#, fuzzy
msgid ":pep:`3119` - Introducing Abstract Base Classes"
msgstr ":pep:`3119` - 引入抽象基底類別"

#: ../../whatsnew/2.6.rst:1302
#, fuzzy
msgid ""
"PEP written by Guido van Rossum and Talin. Implemented by Guido van Rossum. "
"Backported to 2.6 by Benjamin Aranguren, with Alex Martelli."
msgstr ""
"PEP 由 Guido van Rossum 和 Talin 編寫。由 Guido van Rossum 實施。由 Benjamin "
"Aranguren 和 Alex Martelli 向後移植到 2.6。"

#: ../../whatsnew/2.6.rst:1311
#, fuzzy
msgid "PEP 3127: Integer Literal Support and Syntax"
msgstr "PEP 3127：整數文字支援和語法"

#: ../../whatsnew/2.6.rst:1313
#, fuzzy
msgid ""
"Python 3.0 changes the syntax for octal (base-8) integer literals, prefixing "
"them with \"0o\" or \"0O\" instead of a leading zero, and adds support for "
"binary (base-2) integer literals, signalled by a \"0b\" or \"0B\" prefix."
msgstr ""
"Python 3.0 更改了八進位（base-8）整數文字的語法，在它們前面加上 ``0o``或 ``0O``而不"
"是前導零，並新增了對二進位（base-2）整數文字的支援，由 ``0b``表示或 ``0B``前綴。"

#: ../../whatsnew/2.6.rst:1318
#, fuzzy
msgid ""
"Python 2.6 doesn't drop support for a leading 0 signalling an octal number, "
"but it does add support for \"0o\" and \"0b\"::"
msgstr "Python 2.6 不放棄對前導 0 "
"表示八進位數的支援，但它確實增加了對 ``0o``和 ``0b``的支援::"

#: ../../whatsnew/2.6.rst:1326
#, fuzzy
msgid ""
"The :func:`oct` builtin still returns numbers prefixed with a leading zero, "
"and a new :func:`bin` builtin returns the binary representation for a "
"number::"
msgstr ":func:`oct` 內建函式仍然回傳以零為前綴的數字，而新的 :func:`bin` "
"內建函式回傳數字的二進位表示形式::"

#: ../../whatsnew/2.6.rst:1337
#, fuzzy
msgid ""
"The :func:`int` and :func:`long` builtins will now accept the \"0o\" and "
"\"0b\" prefixes when base-8 or base-2 are requested, or when the *base* "
"argument is zero (signalling that the base used should be determined from "
"the string)::"
msgstr ""
":func:`int` 和 :func:`long` 內建函式現在將在請求 base-8 或 base-2 時，或當 "
"*base* 參數為零時接受 ``0o``和 ``0b``前綴（表示使用的基數應根據字串確定：："

#: ../../whatsnew/2.6.rst:1355
#, fuzzy
msgid ":pep:`3127` - Integer Literal Support and Syntax"
msgstr ":pep:`3127` - 整數文字支援和語法"

#: ../../whatsnew/2.6.rst:1355
#, fuzzy
msgid "PEP written by Patrick Maupin; backported to 2.6 by Eric Smith."
msgstr "PEP 由 Patrick Maupin 撰寫；由 Eric Smith 反向移植到 2.6。"

#: ../../whatsnew/2.6.rst:1363
#, fuzzy
msgid "PEP 3129: Class Decorators"
msgstr "PEP 3129：類裝飾器"

#: ../../whatsnew/2.6.rst:1365
#, fuzzy
msgid ""
"Decorators have been extended from functions to classes.  It's now legal to "
"write::"
msgstr "裝飾器已經從函式擴充到類。現在寫::是合法的"

#: ../../whatsnew/2.6.rst:1373
#, fuzzy
msgid "This is equivalent to::"
msgstr "這相當於："

#: ../../whatsnew/2.6.rst:1382
#, fuzzy
msgid ":pep:`3129` - Class Decorators"
msgstr ":pep:`3129` - 類裝飾器"

#: ../../whatsnew/2.6.rst:1383
msgid "PEP written by Collin Winter."
msgstr "由 Collin Winter 撰寫 PEP。"

#: ../../whatsnew/2.6.rst:1390
#, fuzzy
msgid "PEP 3141: A Type Hierarchy for Numbers"
msgstr "PEP 3141：數字的型別層次結構"

#: ../../whatsnew/2.6.rst:1392
#, fuzzy
msgid ""
"Python 3.0 adds several abstract base classes for numeric types inspired by "
"Scheme's numeric tower.  These classes were backported to 2.6 as the :mod:"
"`numbers` module."
msgstr ""
"受 Scheme 的數字塔啟發，Python 3.0 為數字型別新增了幾個抽象基底類別。"
"這些類作為 :mod:`numbers` 模組被反向移植到 2.6。"

#: ../../whatsnew/2.6.rst:1396
#, fuzzy
msgid ""
"The most general ABC is :class:`Number`.  It defines no operations at all, "
"and only exists to allow checking if an object is a number by doing "
"``isinstance(obj, Number)``."
msgstr ""
"最一般的 ABC 是 :class:`Number`。它根本不定義任何操作，只允許通過執行 "
"isinstance(obj, Number) 檢查對像是否為數字。"

#: ../../whatsnew/2.6.rst:1400
#, fuzzy
msgid ""
":class:`Complex` is a subclass of :class:`Number`.  Complex numbers can "
"undergo the basic operations of addition, subtraction, multiplication, "
"division, and exponentiation, and you can retrieve the real and imaginary "
"parts and obtain a number's conjugate.  Python's built-in complex type is an "
"implementation of :class:`Complex`."
msgstr ""
":class:`Complex` 是 :class:`Number` 的子類別。複數可以進行加、減、乘、除、冪"
"等基本運算，還可以檢索實部和虛部，得到數的共軛。 Python 的內建複雜型別是 "
":class:`Complex` 的一個實作。"

#: ../../whatsnew/2.6.rst:1406
#, fuzzy
msgid ""
":class:`Real` further derives from :class:`Complex`, and adds operations "
"that only work on real numbers: :func:`floor`, :func:`trunc`, rounding, "
"taking the remainder mod N, floor division, and comparisons."
msgstr ""
":class:`Real` 進一步派生自 :class:`Complex`，並新增了僅適用於實數的操作：:fun"
"c:`floor`、:func:`trunc`、舍入、取餘數 mod N、floor 除法, 和比較。"

#: ../../whatsnew/2.6.rst:1411
#, fuzzy
msgid ""
":class:`Rational` numbers derive from :class:`Real`, have :attr:`numerator` "
"and :attr:`denominator` properties, and can be converted to floats.  Python "
"2.6 adds a simple rational-number class, :class:`Fraction`, in the :mod:"
"`fractions` module.  (It's called :class:`Fraction` instead of :class:"
"`Rational` to avoid a name clash with :class:`numbers.Rational`.)"
msgstr ""
":class:`Rational` 數派生自 :class:`Real`，具有 :attr:`numerator` 和 "
":attr:`denominator` 屬性，並且可以轉換為浮點數。 Python 2.6 在 "
":mod:`fractions` 模組中新增了一個簡單的有理數類：:class:`Fraction`。 （"
"它被稱為 :class:`Fraction` 而不是 :class:`Rational` 以避免與 :class:`numbers."
"Rational` 的名稱衝突。）"

#: ../../whatsnew/2.6.rst:1418
#, fuzzy
msgid ""
":class:`Integral` numbers derive from :class:`Rational`, and can be shifted "
"left and right with ``<<`` and ``>>``, combined using bitwise operations "
"such as ``&`` and ``|``, and can be used as array indexes and slice "
"boundaries."
msgstr ""
":class:`Integral` numbers 派生自 :class:`Rational`，可以用 ``<<`` 和 ``>>`` "
"左右移動，使用 ``&`` 和``|``，可用作數組索引和切片邊界。"

#: ../../whatsnew/2.6.rst:1423
#, fuzzy
msgid ""
"In Python 3.0, the PEP slightly redefines the existing builtins :func:"
"`round`, :func:`math.floor`, :func:`math.ceil`, and adds a new one, :func:"
"`math.trunc`, that's been backported to Python 2.6. :func:`math.trunc` "
"rounds toward zero, returning the closest :class:`Integral` that's between "
"the function's argument and zero."
msgstr ""
"在 Python 3.0 中，PEP 稍微重新定義了現有的內建函式 :func:`round`、:func:`math"
".floor`、:func:`math.ceil`，並新增了一個新的 :func:`math.trunc` ，"
"這已被反向移植到 Python 2.6。 :func:`math.trunc` 向零舍入，"
"回傳函式參數和零之間最接近的 :class:`Integral`。"

#: ../../whatsnew/2.6.rst:1432
#, fuzzy
msgid ":pep:`3141` - A Type Hierarchy for Numbers"
msgstr ":pep:`3141` - 數字的型別層次結構"

#: ../../whatsnew/2.6.rst:1432
msgid "PEP written by Jeffrey Yasskin."
msgstr "由 Jeffrey Yasskin 撰寫 PEP。"

#: ../../whatsnew/2.6.rst:1434
#, fuzzy
msgid ""
"`Scheme's numerical tower <https://www.gnu.org/software/guile/manual/"
"html_node/Numerical-Tower.html#Numerical-Tower>`__, from the Guile manual."
msgstr ""
"`Scheme 的數值塔 <https://www.gnu.org/software/guile/manual/html_node/"
"Numerical-Tower.html#Numerical-Tower>`__，來自 Guile 手冊。"

#: ../../whatsnew/2.6.rst:1436
#, fuzzy
msgid ""
"`Scheme's number datatypes <https://schemers.org/Documents/Standards/R5RS/"
"HTML/r5rs-Z-H-9.html#%_sec_6.2>`__ from the R5RS Scheme specification."
msgstr ""
"`Scheme 的數字資料型別 <https://schemers.org/Documents/Standards/R5RS/HTML/"
"r5rs-Z-H-9.html#%_sec_6.2>`__ 來自 R5RS Scheme 規範。"

#: ../../whatsnew/2.6.rst:1440
#, fuzzy
msgid "The :mod:`fractions` Module"
msgstr ":mod:`fractions` 模組"

#: ../../whatsnew/2.6.rst:1442
#, fuzzy
msgid ""
"To fill out the hierarchy of numeric types, the :mod:`fractions` module "
"provides a rational-number class.  Rational numbers store their values as a "
"numerator and denominator forming a fraction, and can exactly represent "
"numbers such as ``2/3`` that floating-point numbers can only approximate."
msgstr ""
"為了填充數字型別的層次結構，:mod:`fractions` 模組提供了一個有理數類。有理數將"
"它們的值儲存為分子和分母組成的分數，並且可以精確地表示浮點數只能近似的數字，"
"例如“2/3”。"

#: ../../whatsnew/2.6.rst:1448
#, fuzzy
msgid ""
"The :class:`Fraction` constructor takes two :class:`Integral` values that "
"will be the numerator and denominator of the resulting fraction. ::"
msgstr ":class:`Fraction` 構造函式採用兩個 :class:`Integral` "
"值，它們將作為結果分數的分子和分母。 ::"

#: ../../whatsnew/2.6.rst:1461
#, fuzzy
msgid ""
"For converting floating-point numbers to rationals, the float type now has "
"an :meth:`as_integer_ratio()` method that returns the numerator and "
"denominator for a fraction that evaluates to the same floating-point value::"
msgstr ""
"為了將浮點數轉換為有理數，float 型別現在有一個 as_integer_ratio() "
"方法，該方法回傳計算結果為相同浮點值的分數的分子和分母::"

#: ../../whatsnew/2.6.rst:1473
#, fuzzy
msgid ""
"Note that values that can only be approximated by floating-point numbers, "
"such as 1./3, are not simplified to the number being approximated; the "
"fraction attempts to match the floating-point value **exactly**."
msgstr "請注意，只能由浮點數近似的值，例如 "
"1./3，不會簡化為被近似的數字；小數試圖**精確**匹配浮點值。"

#: ../../whatsnew/2.6.rst:1478
#, fuzzy
msgid ""
"The :mod:`fractions` module is based upon an implementation by Sjoerd "
"Mullender that was in Python's :file:`Demo/classes/` directory for a long "
"time.  This implementation was significantly updated by Jeffrey Yasskin."
msgstr ""
":mod:`fractions` 模組基於 Sjoerd Mullender 的一個實作，該實作長期位於 Python "
"的 :file:`Demo/classes/` 目錄中。此實作由 Jeffrey Yasskin 進行了重大更新。"

#: ../../whatsnew/2.6.rst:1485
#, fuzzy
msgid "Other Language Changes"
msgstr "其他語言變化"

#: ../../whatsnew/2.6.rst:1487
#, fuzzy
msgid "Some smaller changes made to the core Python language are:"
msgstr "對核心 Python 語言所做的一些較小的更改是："

#: ../../whatsnew/2.6.rst:1489
#, fuzzy
msgid ""
"Directories and zip archives containing a :file:`__main__.py` file can now "
"be executed directly by passing their name to the interpreter. The directory "
"or zip archive is automatically inserted as the first entry in sys.path.  "
"(Suggestion and initial patch by Andy Chu, subsequently revised by Phillip "
"J. Eby and Nick Coghlan; :issue:`1739468`.)"
msgstr ""
"包含 :file:`__main__.py` 文件的目錄和 zip "
"存檔現在可以通過將它們的名稱傳遞給直譯器來直接執行。目錄或 zip "
"存檔將作為第一個條目自動插入 sys.path 中。 （Andy Chu 的建議和初始補丁，"
"隨後由 Phillip J. Eby 和 Nick Coghlan 修訂；:issue:`1739468`。）"

#: ../../whatsnew/2.6.rst:1496
#, fuzzy
msgid ""
"The :func:`hasattr` function was catching and ignoring all errors, under the "
"assumption that they meant a :meth:`__getattr__` method was failing somehow "
"and the return value of :func:`hasattr` would therefore be ``False``.  This "
"logic shouldn't be applied to :exc:`KeyboardInterrupt` and :exc:"
"`SystemExit`, however; Python 2.6 will no longer discard such exceptions "
"when :func:`hasattr` encounters them.  (Fixed by Benjamin Peterson; :issue:"
"`2196`.)"
msgstr ""
":func:`hasattr` 函式捕獲並忽略所有錯誤，假設它們意味著 :meth:`__getattr__` "
"方法以某種方式失敗，因此 :func:`hasattr` 的回傳值將是 ``False` `。但是，"
"此邏輯不應應用於 :exc:`KeyboardInterrupt` 和 :exc:`SystemExit`；當 "
":func:`hasattr` 遇到此類例外時，Python 2.6 將不再丟棄它們。 （由 Benjamin "
"Peterson 修復；:issue:`2196`。）"

#: ../../whatsnew/2.6.rst:1504
#, fuzzy
msgid ""
"When calling a function using the ``**`` syntax to provide keyword "
"arguments, you are no longer required to use a Python dictionary; any "
"mapping will now work::"
msgstr "使用 ``**`` 語法呼叫函式以提供關鍵字參數時，您不再需要使用 Python "
"字典；任何映射現在都可以工作::"

#: ../../whatsnew/2.6.rst:1517
#, fuzzy
msgid "(Contributed by Alexander Belopolsky; :issue:`1686487`.)"
msgstr "（由 Alexander Belopolsky 提供；:issue:`1686487`。）"

#: ../../whatsnew/2.6.rst:1519
#, fuzzy
msgid ""
"It's also become legal to provide keyword arguments after a ``*args`` "
"argument to a function call. ::"
msgstr "在函式呼叫的“*args”參數之後提供關鍵字參數也變得合法。 ::"

#: ../../whatsnew/2.6.rst:1528
#, fuzzy
msgid ""
"Previously this would have been a syntax error. (Contributed by Amaury "
"Forgeot d'Arc; :issue:`3473`.)"
msgstr "以前這是一個語法錯誤。 （由 Amaury Forgeot d'Arc 提供；:issue:`3473`。）"

#: ../../whatsnew/2.6.rst:1531
#, fuzzy
msgid ""
"A new builtin, ``next(iterator, [default])`` returns the next item from the "
"specified iterator.  If the *default* argument is supplied, it will be "
"returned if *iterator* has been exhausted; otherwise, the :exc:"
"`StopIteration` exception will be raised.  (Backported in :issue:`2719`.)"
msgstr ""
"一個新的內建函式，``next(iterator, [default])`` 回傳指定疊代器的下一個項目。"
"如果提供了 *default* 參數，則在 *iterator* 已用完時回傳；否則，將引發 "
":exc:`StopIteration` 例外。 （在 :issue:`2719` 中反向移植。）"

#: ../../whatsnew/2.6.rst:1537
#, fuzzy
msgid ""
"Tuples now have :meth:`index` and :meth:`count` methods matching the list "
"type's :meth:`index` and :meth:`count` methods::"
msgstr ""
"元組現在有 :meth:`index` 和 :meth:`count` 方法匹配列表型別的 :meth:`index` "
"和 :meth:`count` 方法::"

#: ../../whatsnew/2.6.rst:1546
#, fuzzy
msgid "(Contributed by Raymond Hettinger)"
msgstr "（雷蒙德·海廷格供稿）"

#: ../../whatsnew/2.6.rst:1548
#, fuzzy
msgid ""
"The built-in types now have improved support for extended slicing syntax, "
"accepting various combinations of ``(start, stop, step)``. Previously, the "
"support was partial and certain corner cases wouldn't work. (Implemented by "
"Thomas Wouters.)"
msgstr ""
"內建型別現在改進了對擴充切片語法的支援，接受“(start, stop, "
"step)”的各種組合。以前，支援是部分的，某些極端情況不起作用。 （由 Thomas "
"Wouters 實施。）"

#: ../../whatsnew/2.6.rst:1555
#, fuzzy
msgid ""
"Properties now have three attributes, :attr:`getter`, :attr:`setter` and :"
"attr:`deleter`, that are decorators providing useful shortcuts for adding a "
"getter, setter or deleter function to an existing property. You would use "
"them like this::"
msgstr ""
"屬性現在具有三個屬性：:attr:`getter`、:attr:`setter` "
"和 :attr:`deleter`，它們是裝飾器，為向現有屬性新增 getter、setter 或 deleter "
"函式提供了有用的快捷方式。你會像這樣使用它們::"

#: ../../whatsnew/2.6.rst:1582
#, fuzzy
msgid ""
"Several methods of the built-in set types now accept multiple iterables: :"
"meth:`intersection`, :meth:`intersection_update`, :meth:`union`, :meth:"
"`update`, :meth:`difference` and :meth:`difference_update`."
msgstr ""
"內建集合型別的幾種方法現在接受多個疊代 :meth:`intersection`、:meth:`intersect"
"ion_update`、:meth:`union`、:meth:`update`、:meth:`difference` "
"和 :meth:`difference_update`。"

#: ../../whatsnew/2.6.rst:1596 ../../whatsnew/2.6.rst:1880
#: ../../whatsnew/2.6.rst:1901
#, fuzzy
msgid "(Contributed by Raymond Hettinger.)"
msgstr "（雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.6.rst:1598
#, fuzzy
msgid ""
"Many floating-point features were added.  The :func:`float` function will "
"now turn the string ``nan`` into an IEEE 754 Not A Number value, and "
"``+inf`` and ``-inf`` into positive or negative infinity.  This works on any "
"platform with IEEE 754 semantics.  (Contributed by Christian Heimes; :issue:"
"`1635`.)"
msgstr ""
"新增了許多浮點功能。 :func:`float` 函式現在會將字串 ``nan`` 轉換為 IEEE 754 "
"Not A Number 值，並將 ``+inf`` 和 ``-inf`` 轉換為正無窮大或負無窮大。"
"這適用於具有 IEEE 754 語義的任何平台。 （由 Christian Heimes "
"提供；:issue:`1635`。）"

#: ../../whatsnew/2.6.rst:1604
#, fuzzy
msgid ""
"Other functions in the :mod:`math` module, :func:`isinf` and :func:`isnan`, "
"return true if their floating-point argument is infinite or Not A Number.  (:"
"issue:`1640`)"
msgstr ""
":mod:`math` 模組中的其他函式，:func:`isinf` 和 "
":func:`isnan`，如果它們的浮點參數是無窮大或不是數字，則回傳 true。 "
"（ :issue:`1640`）"

#: ../../whatsnew/2.6.rst:1608
#, fuzzy
msgid ""
"Conversion functions were added to convert floating-point numbers into "
"hexadecimal strings (:issue:`3008`).  These functions convert floats to and "
"from a string representation without introducing rounding errors from the "
"conversion between decimal and binary.  Floats have a :meth:`hex` method "
"that returns a string representation, and the ``float.fromhex()`` method "
"converts a string back into a number::"
msgstr ""
"新增了轉換函式以將浮點數轉換為十六進位字串 (:issue:`3008`)。這些函式將浮點數"
"與字串表示形式相互轉換，而不會在十進位和二進位之間的轉換中引入舍入誤差。 "
"Floats 有一個回傳字串表示的 :meth:`hex` 方法，而 ``float.fromhex()`` "
"方法將字串轉換回數字::"

#: ../../whatsnew/2.6.rst:1625
#, fuzzy
msgid ""
"A numerical nicety: when creating a complex number from two floats on "
"systems that support signed zeros (-0 and +0), the :func:`complex` "
"constructor will now preserve the sign of the zero.  (Fixed by Mark T. "
"Dickinson; :issue:`1507`.)"
msgstr ""
"數字上的優點：在支援帶符號零（-0 和 "
"+0）的系統上從兩個浮點數建立複數時，:func:`complex` "
"構造函式現在將保留零的符號。 （由 Mark T. Dickinson 修復；:issue:`1507`。）"

#: ../../whatsnew/2.6.rst:1630
#, fuzzy
msgid ""
"Classes that inherit a :meth:`__hash__` method from a parent class can set "
"``__hash__ = None`` to indicate that the class isn't hashable.  This will "
"make ``hash(obj)`` raise a :exc:`TypeError` and the class will not be "
"indicated as implementing the :class:`Hashable` ABC."
msgstr ""
"從父類繼承 :meth:`__hash__` 方法的類可以設定 ``__hash__ = None`` "
"以指示該類不可雜湊。這將使 ``hash(obj)`` 引發 :exc:`TypeError` "
"並且該類將不會被指示為實作 :class:`Hashable` ABC。"

#: ../../whatsnew/2.6.rst:1636
#, fuzzy
msgid ""
"You should do this when you've defined a :meth:`__cmp__` or :meth:`__eq__` "
"method that compares objects by their value rather than by identity.  All "
"objects have a default hash method that uses ``id(obj)`` as the hash value.  "
"There's no tidy way to remove the :meth:`__hash__` method inherited from a "
"parent class, so assigning ``None`` was implemented as an override.  At the "
"C level, extensions can set ``tp_hash`` to :c:func:"
"`PyObject_HashNotImplemented`. (Fixed by Nick Coghlan and Amaury Forgeot "
"d'Arc; :issue:`2235`.)"
msgstr ""
"當你定義了一個 :meth:`__cmp__` 或 :meth:`__eq__` 方法來比較物件的值而不是身份"
"時，你應該這樣做。所有對像都有一個預設的可雜湊方法，使用 ``id(obj)`` "
"作為可雜湊值。沒有整潔的方法來刪除從父類繼承的 :meth:`__hash__` 方法，因此分配 "
"``None`` 是作為覆蓋實作的。在 C 級別，擴充可以將 ``tp_hash`` 設定為 "
":c:func:`PyObject_HashNotImplemented`。 （由 Nick Coghlan 和 Amaury Forgeot "
"d'Arc 修復；:issue:`2235`。）"

#: ../../whatsnew/2.6.rst:1646
#, fuzzy
msgid ""
"The :exc:`GeneratorExit` exception now subclasses :exc:`BaseException` "
"instead of :exc:`Exception`.  This means that an exception handler that does "
"``except Exception:`` will not inadvertently catch :exc:`GeneratorExit`. "
"(Contributed by Chad Austin; :issue:`1537`.)"
msgstr ""
":exc:`GeneratorExit` 例外現在是 :exc:`BaseException` 的子類別，而不是 "
":exc:`Exception`。這意味著執行 ``except Exception:`` "
"的例外處理程式不會無意中捕獲 :exc:`GeneratorExit`。 （由 Chad Austin "
"提供；:issue:`1537`。）"

#: ../../whatsnew/2.6.rst:1652
#, fuzzy
msgid ""
"Generator objects now have a :attr:`gi_code` attribute that refers to the "
"original code object backing the generator. (Contributed by Collin Winter; :"
"issue:`1473257`.)"
msgstr ""
"生成器物件現在有一個 :attr:`gi_code` 屬性，它引用支援生成器的原始程式碼物件。"
" （由 Collin Winter 提供；:issue:`1473257`。）"

#: ../../whatsnew/2.6.rst:1656
#, fuzzy
msgid ""
"The :func:`compile` built-in function now accepts keyword arguments as well "
"as positional parameters.  (Contributed by Thomas Wouters; :issue:`1444529`.)"
msgstr ""
":func:`compile` 內建函式現在接受關鍵字參數和位置參數。 （由 Thomas Wouters "
"提供；:issue:`1444529`。）"

#: ../../whatsnew/2.6.rst:1660
#, fuzzy
msgid ""
"The :func:`complex` constructor now accepts strings containing parenthesized "
"complex numbers, meaning that ``complex(repr(cplx))`` will now round-trip "
"values.  For example, ``complex('(3+4j)')`` now returns the value (3+4j).  (:"
"issue:`1491866`)"
msgstr ""
":func:`complex` 構造函式現在接受包含帶括號的複數的字串，這意味著 "
"``complex(repr(cplx))`` 現在將往返值。例如，``complex('(3+4j)')`` 現在回傳值 "
"(3+4j)。 （ :issue:`1491866`）"

#: ../../whatsnew/2.6.rst:1665
#, fuzzy
msgid ""
"The string :meth:`translate` method now accepts ``None`` as the translation "
"table parameter, which is treated as the identity transformation.   This "
"makes it easier to carry out operations that only delete characters.  "
"(Contributed by Bengt Richter and implemented by Raymond Hettinger; :issue:"
"`1193128`.)"
msgstr ""
"字串 :meth:`translate` 方法現在接受 ``None`` "
"作為轉換錶參數，這被視為身份轉換。這使得只刪除字元的操作更容易執行。 （由 "
"Bengt Richter 提供並由 Raymond Hettinger 實施；:issue:`1193128`。）"

#: ../../whatsnew/2.6.rst:1671
#, fuzzy
msgid ""
"The built-in :func:`dir` function now checks for a :meth:`__dir__` method on "
"the objects it receives.  This method must return a list of strings "
"containing the names of valid attributes for the object, and lets the object "
"control the value that :func:`dir` produces. Objects that have :meth:"
"`__getattr__` or :meth:`__getattribute__` methods can use this to advertise "
"pseudo-attributes they will honor. (:issue:`1591665`)"
msgstr ""
"內建的 :func:`dir` 函式現在檢查它接收的對像上的 :meth:`__dir__` "
"方法。此方法必須回傳包含對像有效屬性名稱的字串列表，並讓物件控制 :func:`dir` "
"產生的值。具有 :meth:`__getattr__` 或 :meth:`__getattribute__` "
"方法的物件可以使用它來公佈它們將遵守的偽屬性。 （ :issue:`1591665`）"

#: ../../whatsnew/2.6.rst:1679
#, fuzzy
msgid ""
"Instance method objects have new attributes for the object and function "
"comprising the method; the new synonym for :attr:`im_self` is :attr:"
"`__self__`, and :attr:`im_func` is also available as :attr:`__func__`. The "
"old names are still supported in Python 2.6, but are gone in 3.0."
msgstr ""
"實例方法物件具有包含該方法的物件和函式的新屬性； :attr:`im_self` "
"的新同義詞是 :attr:`__self__`，並且 :attr:`im_func` 也可用作 "
":attr:`__func__`。舊名稱在 Python 2.6 中仍然受支援，但在 3.0 中消失了。"

#: ../../whatsnew/2.6.rst:1684
#, fuzzy
msgid ""
"An obscure change: when you use the :func:`locals` function inside a :"
"keyword:`class` statement, the resulting dictionary no longer returns free "
"variables.  (Free variables, in this case, are variables referenced in the :"
"keyword:`!class` statement  that aren't attributes of the class.)"
msgstr ""
"一個模糊的變化：當您在 :keyword:`class` 語句中使用 :func:`locals` "
"函式時，生成的字典不再回傳自由變數。 （在這種情況下，自由變數是在 "
":keyword:`!class` 語句中引用的變數，它們不是類的屬性。）"

#: ../../whatsnew/2.6.rst:1693
#, fuzzy
msgid "Optimizations"
msgstr "最佳化"

#: ../../whatsnew/2.6.rst:1695
#, fuzzy
msgid ""
"The :mod:`warnings` module has been rewritten in C.  This makes it possible "
"to invoke warnings from the parser, and may also make the interpreter's "
"startup faster. (Contributed by Neal Norwitz and Brett Cannon; :issue:"
"`1631171`.)"
msgstr ""
":mod:`warnings` 模組已用 C "
"重寫。這使得從解析器呼叫警告成為可能，也可能使直譯器的啟動更快。 （由 Neal "
"Norwitz 和 Brett Cannon 提供；:issue:`1631171`。）"

#: ../../whatsnew/2.6.rst:1700
#, fuzzy
msgid ""
"Type objects now have a cache of methods that can reduce the work required "
"to find the correct method implementation for a particular class; once "
"cached, the interpreter doesn't need to traverse base classes to figure out "
"the right method to call. The cache is cleared if a base class or the class "
"itself is modified, so the cache should remain correct even in the face of "
"Python's dynamic nature. (Original optimization implemented by Armin Rigo, "
"updated for Python 2.6 by Kevin Jacobs; :issue:`1700288`.)"
msgstr ""
"型別物件現在有一個方法快取，可以減少為特定類找到正確方法實作所需的工作；一旦"
"被快取，直譯器就不需要遍歷基底類別來找出正確的呼叫方法。如果基底類別或類本身"
"被修改，快取將被清除，因此即使面對 Python 的動態特性，快取也應該保持正確。 （"
"由 Armin Rigo 實施的原始最佳化，由 Kevin Jacobs 為 Python 2.6 "
"更新；:issue:`1700288`。）"

#: ../../whatsnew/2.6.rst:1710
#, fuzzy
msgid ""
"By default, this change is only applied to types that are included with the "
"Python core.  Extension modules may not necessarily be compatible with this "
"cache, so they must explicitly add :c:macro:`Py_TPFLAGS_HAVE_VERSION_TAG` to "
"the module's ``tp_flags`` field to enable the method cache. (To be "
"compatible with the method cache, the extension module's code must not "
"directly access and modify the ``tp_dict`` member of any of the types it "
"implements.  Most modules don't do this, but it's impossible for the Python "
"interpreter to determine that. See :issue:`1878` for some discussion.)"
msgstr ""
"預設情況下，此更改僅適用於 Python 核心中包含的型別。擴充模組不一定與此快取相"
"容，因此它們必須顯式新增:c:macro:`Py_TPFLAGS_HAVE_VERSION_TAG` "
"到模組的``tp_flags`` 欄位以啟用方法快取。 （為了與方法快取相容，擴充模組的程"
"式碼不得直接訪問和修改它實作的任何型別的``tp_dict``成員。大多數模組不會這樣做"
"，但Python直譯器不可能確定。請參閱 :issue:`1878` 進行一些討論。）"

#: ../../whatsnew/2.6.rst:1721
#, fuzzy
msgid ""
"Function calls that use keyword arguments are significantly faster by doing "
"a quick pointer comparison, usually saving the time of a full string "
"comparison.  (Contributed by Raymond Hettinger, after an initial "
"implementation by Antoine Pitrou; :issue:`1819`.)"
msgstr ""
"通過進行快速指標比較，使用關鍵字參數的函式呼叫速度明顯加快，通常可以節省完整"
"字串比較的時間。 （由 Raymond Hettinger 提供，在 Antoine Pitrou "
"的初步實施之後；:issue:`1819`。）"

#: ../../whatsnew/2.6.rst:1726
#, fuzzy
msgid ""
"All of the functions in the :mod:`struct` module have been rewritten in C, "
"thanks to work at the Need For Speed sprint. (Contributed by Raymond "
"Hettinger.)"
msgstr ":mod:`struct` 模組中的所有函式都已用 C "
"語言重寫，這要歸功於在極品飛車衝刺中的工作。 （雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.6.rst:1730
#, fuzzy
msgid ""
"Some of the standard built-in types now set a bit in their type objects.  "
"This speeds up checking whether an object is a subclass of one of these "
"types.  (Contributed by Neal Norwitz.)"
msgstr "一些標準的內建型別現在在它們的型別對像中設定了一些。這加快了檢查對像是否是這"
"些型別之一的子類別的速度。 （尼爾·諾維茨供稿。）"

#: ../../whatsnew/2.6.rst:1734
#, fuzzy
msgid ""
"Unicode strings now use faster code for detecting whitespace and line "
"breaks; this speeds up the :meth:`split` method by about 25% and :meth:"
"`splitlines` by 35%. (Contributed by Antoine Pitrou.)  Memory usage is "
"reduced by using pymalloc for the Unicode string's data."
msgstr ""
"Unicode 字串現在使用更快的程式碼來檢測空格和換行符；這將 :meth:`split` "
"方法的速度提高了大約 25%，將 :meth:`splitlines` 的速度提高了 35%。 （由 "
"Antoine Pitrou 提供。）通過對 Unicode 字串的資料使用 pymalloc "
"減少了記憶體使用。"

#: ../../whatsnew/2.6.rst:1740
#, fuzzy
msgid ""
"The ``with`` statement now stores the :meth:`__exit__` method on the stack, "
"producing a small speedup.  (Implemented by Jeffrey Yasskin.)"
msgstr ""
"``with`` 語句現在將 :meth:`__exit__` 方法儲存在堆疊上，產生了小的加速。 （由 "
"Jeffrey Yasskin 實施。）"

#: ../../whatsnew/2.6.rst:1743
#, fuzzy
msgid ""
"To reduce memory usage, the garbage collector will now clear internal free "
"lists when garbage-collecting the highest generation of objects. This may "
"return memory to the operating system sooner."
msgstr "為了減少記憶體使用，垃圾收集器現在將在對最高代物件進行垃圾收集時清除內部空閒"
"列表。這可能會更快地將記憶體回傳給操作系統。"

#: ../../whatsnew/2.6.rst:1752
#, fuzzy
msgid "Interpreter Changes"
msgstr "直譯器更改"

#: ../../whatsnew/2.6.rst:1754
#, fuzzy
msgid ""
"Two command-line options have been reserved for use by other Python "
"implementations.  The :option:`-J` switch has been reserved for use by "
"Jython for Jython-specific options, such as switches that are passed to the "
"underlying JVM.  :option:`-X` has been reserved for options specific to a "
"particular implementation of Python such as CPython, Jython, or IronPython.  "
"If either option is used with Python 2.6, the interpreter will report that "
"the option isn't currently used."
msgstr ""
"兩個命令列選項已保留供其他 Python 實作使用。 :option:`-J` 開關已保留供 "
"Jython 用於特定於 Jython 的選項，例如傳遞給底層 JVM 的開關。 :option:`-X` "
"已保留用於特定於 Python 的特定實作（例如 CPython、Jython 或 "
"IronPython）的選項。如果任一選項與 Python 2.6 "
"一起使用，直譯器將報告當前未使用該選項。"

#: ../../whatsnew/2.6.rst:1762
#, fuzzy
msgid ""
"Python can now be prevented from writing :file:`.pyc` or :file:`.pyo` files "
"by supplying the :option:`-B` switch to the Python interpreter, or by "
"setting the :envvar:`PYTHONDONTWRITEBYTECODE` environment variable before "
"running the interpreter.  This setting is available to Python programs as "
"the ``sys.dont_write_bytecode`` variable, and Python code can change the "
"value to modify the interpreter's behaviour.  (Contributed by Neal Norwitz "
"and Georg Brandl.)"
msgstr ""
"現在可以通過向 Python 直譯器提供 -B 開關或設定 PYTHONDONTWRITEBYTECODE "
"環境來阻止 Python 寫入 :file:`.pyc` 或 :file:`.pyo` "
"文件運行直譯器之前的變數。此設定可作為 ``sys.dont_write_bytecode`` 變數用於 "
"Python 程式，Python 程式碼可以更改該值以修改直譯器的行為。 （由 Neal Norwitz "
"和 Georg Brandl 提供。）"

#: ../../whatsnew/2.6.rst:1770
#, fuzzy
msgid ""
"The encoding used for standard input, output, and standard error can be "
"specified by setting the :envvar:`PYTHONIOENCODING` environment variable "
"before running the interpreter.  The value should be a string in the form "
"``<encoding>`` or ``<encoding>:<errorhandler>``. The *encoding* part "
"specifies the encoding's name, e.g. ``utf-8`` or ``latin-1``; the optional "
"*errorhandler* part specifies what to do with characters that can't be "
"handled by the encoding, and  should be one of \"error\", \"ignore\", or "
"\"replace\".   (Contributed by Martin von Löwis.)"
msgstr ""
"用於標準輸入、輸出和標準錯誤的編碼可以通過在運行直譯器之前設定 "
"PYTHONIOENCODING 環境變數來指定。該值應該是 ``<encoding>`` 或 "
"``<encoding>:<errorhandler>`` 形式的字串。 *encoding* "
"部分指定編碼的名稱，例如``utf-8`` 或 ``latin-1``；可選的 *errorhandler* "
"部分指定如何處理編碼無法處理的字元，應該是 ``error``、 ``ignore``或 ``replace`` 之一。 "
"（由 Martin von Löwis 提供。）"

#: ../../whatsnew/2.6.rst:1783
#, fuzzy
msgid "New and Improved Modules"
msgstr "新的和改進的模組"

#: ../../whatsnew/2.6.rst:1785
#, fuzzy
msgid ""
"As in every release, Python's standard library received a number of "
"enhancements and bug fixes.  Here's a partial list of the most notable "
"changes, sorted alphabetically by module name. Consult the :file:`Misc/NEWS` "
"file in the source tree for a more complete list of changes, or look through "
"the Subversion logs for all the details."
msgstr ""
"在每個版本中，Python 的標準庫都得到了一些增強和錯誤修復。這是最顯著更改的部分"
"列表，按模組名稱的字母順序排序。請查閱源程式碼樹中的 :file:`Misc/NEWS` "
"文件以獲得更完整的更改列表，或查看 Subversion 日誌以獲取所有詳細資訊。"

#: ../../whatsnew/2.6.rst:1791
#, fuzzy
msgid ""
"The :mod:`asyncore` and :mod:`asynchat` modules are being actively "
"maintained again, and a number of patches and bugfixes were applied.  "
"(Maintained by Josiah Carlson; see :issue:`1736190` for one patch.)"
msgstr ""
":mod:`asyncore` 和 :mod:`asynchat` "
"模組再次得到積極維護，並應用了許多補丁和錯誤修復。 （由 Josiah Carlson 維護；"
"請參閱 :issue:`1736190` 獲取一個補丁。）"

#: ../../whatsnew/2.6.rst:1796
#, fuzzy
msgid ""
"The :mod:`bsddb` module also has a new maintainer, Jesús Cea Avión, and the "
"package is now available as a standalone package.  The web page for the "
"package is `www.jcea.es/programacion/pybsddb.htm <https://www.jcea.es/"
"programacion/pybsddb.htm>`__. The plan is to remove the package from the "
"standard library in Python 3.0, because its pace of releases is much more "
"frequent than Python's."
msgstr ""
":mod:`bsddb` 模組還有一個新的維護者 Jesús Cea "
"Avión，該包現在可以作為獨立包使用。該軟件包的網頁是 `www.jcea.es/"
"programacion/pybsddb.htm <https://www.jcea.es/programacion/pybsddb.htm>`__。"
"計劃是從 Python 3.0 的標準庫中刪除該包，因為它的發布速度比 Python 的快得多。"

#: ../../whatsnew/2.6.rst:1804
#, fuzzy
msgid ""
"The :mod:`bsddb.dbshelve` module now uses the highest pickling protocol "
"available, instead of restricting itself to protocol 1. (Contributed by W. "
"Barnes.)"
msgstr ""
":mod:`bsddb.dbshelve` 模組現在使用可用的最高 pickling 協定，"
"而不是將自己限制為協定 1。（由 W. Barnes 提供。）"

#: ../../whatsnew/2.6.rst:1808
#, fuzzy
msgid ""
"The :mod:`cgi` module will now read variables from the query string of an "
"HTTP POST request.  This makes it possible to use form actions with URLs "
"that include query strings such as \"/cgi-bin/add.py?category=1\".  "
"(Contributed by Alexandre Fiori and Nubis; :issue:`1817`.)"
msgstr ""
":mod:`cgi` 模組現在將從 HTTP POST "
"請求的查詢字串中讀取變數。這使得可以使用包含查詢字串（例如“/cgi-bin/add."
"py?category=1”）的 URL 的表單操作。 （由 Alexandre Fiori 和 Nubis "
"提供；:issue:`1817`。）"

#: ../../whatsnew/2.6.rst:1814
#, fuzzy
msgid ""
"The :func:`parse_qs` and :func:`parse_qsl` functions have been relocated "
"from the :mod:`cgi` module to the :mod:`urlparse` module. The versions still "
"available in the :mod:`cgi` module will trigger :exc:"
"`PendingDeprecationWarning` messages in 2.6 (:issue:`600362`)."
msgstr ""
":func:`parse_qs` 和 :func:`parse_qsl` 函式已從 :mod:`cgi` 模組重新定位到 "
":mod:`urlparse` 模組。 :mod:`cgi` 模組中仍然可用的版本將在 2.6 "
"(:issue:`600362`) 中觸發 :exc:`PendingDeprecationWarning` 消息。"

#: ../../whatsnew/2.6.rst:1820
#, fuzzy
msgid ""
"The :mod:`cmath` module underwent extensive revision, contributed by Mark "
"Dickinson and Christian Heimes. Five new functions were added:"
msgstr ""
":mod:`cmath` 模組進行了廣泛的修訂，由 Mark Dickinson 和 Christian Heimes "
"貢獻。新增了五個新功能："

#: ../../whatsnew/2.6.rst:1824
#, fuzzy
msgid ""
":func:`polar` converts a complex number to polar form, returning the modulus "
"and argument of the complex number."
msgstr ":func:`polar` 將復數轉換為極坐標形式，回傳複數的模數和自變數。"

#: ../../whatsnew/2.6.rst:1827
#, fuzzy
msgid ""
":func:`rect` does the opposite, turning a modulus, argument pair back into "
"the corresponding complex number."
msgstr ":func:`rect` 做相反的事情，將模數、參數對轉回相應的複數。"

#: ../../whatsnew/2.6.rst:1830
#, fuzzy
msgid ""
":func:`phase` returns the argument (also called the angle) of a complex "
"number."
msgstr ":func:`phase` 回傳複數的參數（也稱為角度）。"

#: ../../whatsnew/2.6.rst:1833
#, fuzzy
msgid ""
":func:`isnan` returns True if either the real or imaginary part of its "
"argument is a NaN."
msgstr "如果其參數的實部或虛部是 NaN，則 isnan 回傳 True。"

#: ../../whatsnew/2.6.rst:1836
#, fuzzy
msgid ""
":func:`isinf` returns True if either the real or imaginary part of its "
"argument is infinite."
msgstr ":func:`isinf` 如果其參數的實部或虛部是無限的，則回傳 True。"

#: ../../whatsnew/2.6.rst:1839
#, fuzzy
msgid ""
"The revisions also improved the numerical soundness of the :mod:`cmath` "
"module.  For all functions, the real and imaginary parts of the results are "
"accurate to within a few units of least precision (ulps) whenever possible.  "
"See :issue:`1381` for the details.  The branch cuts for :func:`asinh`, :func:"
"`atanh`: and :func:`atan` have also been corrected."
msgstr ""
"修訂還改進了 :mod:`cmath` 模組的數值穩健性。對於所有函式，"
"結果的實部和虛部都盡可能精確到最小精度 (ulps) "
"的幾個單位以內。有關詳細資訊，請參閱 :issue:`1381`。 "
":func:`asinh`、:func:`atanh`: 和 :func:`atan` 的分支切割也已更正。"

#: ../../whatsnew/2.6.rst:1846
#, fuzzy
msgid ""
"The tests for the module have been greatly expanded; nearly 2000 new test "
"cases exercise the algebraic functions."
msgstr "該模組的測試已大大擴充；近2000個新的測試用例行使代數功能。"

#: ../../whatsnew/2.6.rst:1849
#, fuzzy
msgid ""
"On IEEE 754 platforms, the :mod:`cmath` module now handles IEEE 754 special "
"values and floating-point exceptions in a manner consistent with Annex 'G' "
"of the C99 standard."
msgstr "在 IEEE 754 平台上，:mod:`cmath` 模組現在以符合 C99 標準附件 ``G``的方式處理 "
"IEEE 754 特殊值和浮點例外。"

#: ../../whatsnew/2.6.rst:1853
#, fuzzy
msgid ""
"A new data type in the :mod:`collections` module: :class:"
"`namedtuple(typename, fieldnames)` is a factory function that creates "
"subclasses of the standard tuple whose fields are accessible by name as well "
"as index.  For example::"
msgstr ""
"collections 模組中的新資料型別：namedtuple(typename, fieldnames) "
"是一個工廠函式，它建立標準元組的子類別，其欄位可通過名稱和索引訪問。例如：："

#: ../../whatsnew/2.6.rst:1875
#, fuzzy
msgid ""
"Several places in the standard library that returned tuples have been "
"modified to return :class:`namedtuple` instances.  For example, the :meth:"
"`Decimal.as_tuple` method now returns a named tuple with :attr:`sign`, :attr:"
"`digits`, and :attr:`exponent` fields."
msgstr ""
"標準庫中回傳元組的幾個地方已被修改為回傳 :class:`namedtuple` "
"實例。例如，:meth:`Decimal.as_tuple` "
"方法現在回傳一個命名元組，其中包含 :attr:`sign`、:attr:`digits` "
"和 :attr:`exponent` 欄位。"

#: ../../whatsnew/2.6.rst:1882
#, fuzzy
msgid ""
"Another change to the :mod:`collections` module is that the :class:`deque` "
"type now supports an optional *maxlen* parameter; if supplied, the deque's "
"size will be restricted to no more than *maxlen* items.  Adding more items "
"to a full deque causes old items to be discarded."
msgstr ""
":mod:`collections` 模組的另一個變化是 :class:`deque` 型別現在支援可選的 "
"*maxlen* 參數；如果提供，雙端隊列的大小將被限制為不超過 *maxlen* "
"個項目。向完整雙端隊列新增更多項目會導致舊項目被丟棄。"

#: ../../whatsnew/2.6.rst:1903
#, fuzzy
msgid ""
"The :mod:`Cookie` module's :class:`Morsel` objects now support an :attr:"
"`httponly` attribute.  In some browsers. cookies with this attribute set "
"cannot be accessed or manipulated by JavaScript code. (Contributed by Arvin "
"Schnell; :issue:`1638033`.)"
msgstr ""
":mod:`Cookie` 模組的 :class:`Morsel` 物件現在支援 :attr:`httponly` "
"屬性。在某些瀏覽器中。 JavaScript 程式碼無法訪問或操作具有此屬性集的 cookie。"
" （由 Arvin Schnell 提供；:issue:`1638033`。）"

#: ../../whatsnew/2.6.rst:1908
#, fuzzy
msgid ""
"A new window method in the :mod:`curses` module, :meth:`chgat`, changes the "
"display attributes for a certain number of characters on a single line.  "
"(Contributed by Fabian Kreutz.)"
msgstr ""
":mod:`curses` 模組中的新窗口方法 :meth:`chgat` "
"更改一行中特定數量字元的顯示屬性。 （由 Fabian Kreutz 提供。）"

#: ../../whatsnew/2.6.rst:1918
#, fuzzy
msgid ""
"The :class:`Textbox` class in the :mod:`curses.textpad` module now supports "
"editing in insert mode as well as overwrite mode. Insert mode is enabled by "
"supplying a true value for the *insert_mode* parameter when creating the :"
"class:`Textbox` instance."
msgstr ""
":mod:`curses.textpad` 模組中的 :class:`Textbox` "
"類現在支援在插入模式和覆蓋模式下進行編輯。在建立 Textbox 實例時，通過為 "
"*insert_mode* 參數提供一個真值來啟用插入模式。"

#: ../../whatsnew/2.6.rst:1923
#, fuzzy
msgid ""
"The :mod:`datetime` module's :meth:`strftime` methods now support a ``%f`` "
"format code that expands to the number of microseconds in the object, zero-"
"padded on the left to six places.  (Contributed by Skip Montanaro; :issue:"
"`1158`.)"
msgstr ""
":mod:`datetime` 模組的 :meth:`strftime` 方法現在支援 ``%f`` "
"格式程式碼，該程式碼擴充為對像中的微秒數，在左側補零至六個位置。 （由 Skip "
"Montanaro 提供；:issue:`1158`。）"

#: ../../whatsnew/2.6.rst:1928
#, fuzzy
msgid ""
"The :mod:`decimal` module was updated to version 1.66 of `the General "
"Decimal Specification <https://speleotrove.com/decimal/decarith.html>`__.  "
"New features include some methods for some basic mathematical functions such "
"as :meth:`exp` and :meth:`log10`::"
msgstr ""
":mod:`decimal` 模組已更新為 `通用十進位規範 <https://speleotrove.com/decimal/"
"decarith.html>`__ 的 1.66 版。新功能包括某些基本數學函式的一些方法，例如 "
":meth:`exp` 和 :meth:`log10`::"

#: ../../whatsnew/2.6.rst:1940
#, fuzzy
msgid ""
"The :meth:`as_tuple` method of :class:`Decimal` objects now returns a named "
"tuple with :attr:`sign`, :attr:`digits`, and :attr:`exponent` fields."
msgstr "Decimal 物件的 as_tuple 方法現在回傳帶有 sign 、 digits 和 exponent "
"欄位的命名元組。"

#: ../../whatsnew/2.6.rst:1943
#, fuzzy
msgid ""
"(Implemented by Facundo Batista and Mark Dickinson.  Named tuple support "
"added by Raymond Hettinger.)"
msgstr "（由 Facundo Batista 和 Mark Dickinson 實施。命名元組支援由 Raymond "
"Hettinger 新增。）"

#: ../../whatsnew/2.6.rst:1946
#, fuzzy
msgid ""
"The :mod:`difflib` module's :class:`SequenceMatcher` class now returns named "
"tuples representing matches, with :attr:`a`, :attr:`b`, and :attr:`size` "
"attributes. (Contributed by Raymond Hettinger.)"
msgstr ""
":mod:`difflib` 模組的 :class:`SequenceMatcher` 類現在回傳表示匹配的命名元組，"
"具有 :attr:`a`、:attr:`b` 和 :attr:`size` 屬性。 （雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.6.rst:1951
#, fuzzy
msgid ""
"An optional ``timeout`` parameter, specifying a timeout measured in seconds, "
"was added to the :class:`ftplib.FTP` class constructor as well as the :meth:"
"`connect` method.  (Added by Facundo Batista.) Also, the :class:`FTP` "
"class's :meth:`storbinary` and :meth:`storlines` now take an optional "
"*callback* parameter that will be called with each block of data after the "
"data has been sent. (Contributed by Phil Schwartz; :issue:`1221598`.)"
msgstr ""
"一個可選的 ``timeout`` 參數，指定以秒為單位的超時，被新增到 ftplib.FTP "
"類構造函式以及 connect 方法中。 （由 Facundo Batista "
"新增。）此外，:class:`FTP` 類的 :meth:`storbinary` 和 :meth:`storlines` "
"現在採用可選的 *callback* 參數，該參數將在資料之後的每個資料塊中呼叫已發送。 "
"（由 Phil Schwartz 提供；:issue:`1221598`。）"

#: ../../whatsnew/2.6.rst:1959
#, fuzzy
msgid ""
"The :func:`reduce` built-in function is also available in the :mod:"
"`functools` module.  In Python 3.0, the builtin has been dropped and :func:"
"`reduce` is only available from :mod:`functools`; currently there are no "
"plans to drop the builtin in the 2.x series. (Patched by Christian Heimes; :"
"issue:`1739906`.)"
msgstr ""
":func:`reduce` 內建函式也可在 :mod:`functools` 模組中使用。在 Python 3.0 "
"中，內建函式已被刪除，並且 :func:`reduce` 只能從 :mod:`functools` 獲得；"
"目前沒有計劃放棄 2.x 系列中的內建。 （由 Christian Heimes "
"修補；:issue:`1739906`。）"

#: ../../whatsnew/2.6.rst:1965
#, fuzzy
msgid ""
"When possible, the :mod:`getpass` module will now use :file:`/dev/tty` to "
"print a prompt message and read the password, falling back to standard error "
"and standard input.  If the password may be echoed to the terminal, a "
"warning is printed before the prompt is displayed.  (Contributed by Gregory "
"P. Smith.)"
msgstr ""
"如果可能，:mod:`getpass` 模組現在將使用 :file:`/dev/tty` 來印出提示消息並讀取"
"密碼，回退到標準錯誤和標準輸入。如果密碼可能會回顯到終端，則會在顯示提示之前"
"印出一條警告。 （由 Gregory P. Smith 提供。）"

#: ../../whatsnew/2.6.rst:1971
#, fuzzy
msgid ""
"The :func:`glob.glob` function can now return Unicode filenames if a Unicode "
"path was used and Unicode filenames are matched within the directory.  (:"
"issue:`1001604`)"
msgstr ""
"如果使用 Unicode 路徑並且 Unicode 文件名在目錄中匹配，則 :func:`glob.glob` "
"函式現在可以回傳 Unicode 文件名。 （ :issue:`1001604`）"

#: ../../whatsnew/2.6.rst:1975
#, fuzzy
msgid ""
"A new function in the :mod:`heapq` module, ``merge(iter1, iter2, ...)``, "
"takes any number of iterables returning data in sorted order, and returns a "
"new generator that returns the contents of all the iterators, also in sorted "
"order.  For example::"
msgstr ""
":mod:`heapq` 模組中的一個新函式，``merge(iter1, iter2, ...)``，"
"接受任意數量的 iterables 按排序順序回傳資料，並回傳一個回傳所有內容的新生成器"
"疊代器，也按排序順序排列。例如：："

#: ../../whatsnew/2.6.rst:1983
#, fuzzy
msgid ""
"Another new function, ``heappushpop(heap, item)``, pushes *item* onto "
"*heap*, then pops off and returns the smallest item. This is more efficient "
"than making a call to :func:`heappush` and then :func:`heappop`."
msgstr ""
"另一個新函式，``heappushpop(heap, item)``，將 *item* 推入 "
"*heap*，然後彈出並回傳最小的項目。這比呼叫 :func:`heappush` 然後 "
":func:`heappop` 更有效。"

#: ../../whatsnew/2.6.rst:1988
#, fuzzy
msgid ""
":mod:`heapq` is now implemented to only use less-than comparison, instead of "
"the less-than-or-equal comparison it previously used. This makes :mod:"
"`heapq`'s usage of a type match the :meth:`list.sort` method. (Contributed "
"by Raymond Hettinger.)"
msgstr ""
":mod:`heapq` 現在實作為僅使用小於比較，而不是以前使用的小於或等於比較。"
"這使得 :mod:`heapq` 對型別的使用與 :meth:`list.sort` 方法相匹配。 "
"（雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.6.rst:1994
#, fuzzy
msgid ""
"An optional ``timeout`` parameter, specifying a timeout measured in seconds, "
"was added to the :class:`httplib.HTTPConnection` and :class:"
"`HTTPSConnection` class constructors.  (Added by Facundo Batista.)"
msgstr ""
"一個可選的 ``timeout`` 參數，指定以秒為單位的超時，已新增到 "
"httplib.HTTPConnection 和 HTTPSConnection 類構造函式中。 （由 Facundo "
"Batista 新增。）"

#: ../../whatsnew/2.6.rst:1999
#, fuzzy
msgid ""
"Most of the :mod:`inspect` module's functions, such as :func:`getmoduleinfo` "
"and :func:`getargs`, now return named tuples. In addition to behaving like "
"tuples, the elements of the  return value can also be accessed as "
"attributes. (Contributed by Raymond Hettinger.)"
msgstr ""
"大多數 :mod:`inspect` 模組的函式，例如 :func:`getmoduleinfo` 和 :func:`getarg"
"s`，現在回傳命名元組。除了表現得像元組之外，回傳值的元素也可以作為屬性訪問。 "
"（雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.6.rst:2005
#, fuzzy
msgid ""
"Some new functions in the module include :func:`isgenerator`, :func:"
"`isgeneratorfunction`, and :func:`isabstract`."
msgstr ""
"該模組中的一些新函式包括 :func:`isgenerator`、:func:`isgeneratorfunction` 和 "
":func:`isabstract`。"

#: ../../whatsnew/2.6.rst:2009
#, fuzzy
msgid "The :mod:`itertools` module gained several new functions."
msgstr ":mod:`itertools` 模組獲得了幾個新功能。"

#: ../../whatsnew/2.6.rst:2011
#, fuzzy
msgid ""
"``izip_longest(iter1, iter2, ...[, fillvalue])`` makes tuples from each of "
"the elements; if some of the iterables are shorter than others, the missing "
"values are set to *fillvalue*.  For example::"
msgstr ""
"``izip_longest(iter1, iter2, ...[, fillvalue])`` "
"從每個元素中生成元組；如果一些可疊代對像比其他的更短，則缺失值將設定為 "
"*fillvalue*。例如：："

#: ../../whatsnew/2.6.rst:2018
#, fuzzy
msgid ""
"``product(iter1, iter2, ..., [repeat=N])`` returns the Cartesian product of "
"the supplied iterables, a set of tuples containing every possible "
"combination of the elements returned from each iterable. ::"
msgstr ""
"``product(iter1, iter2, ..., [repeat=N])`` 回傳提供的疊代器的笛卡爾積，一組元"
"組包含從每個疊代器回傳的元素的所有可能組合。 ::"

#: ../../whatsnew/2.6.rst:2027
#, fuzzy
msgid ""
"The optional *repeat* keyword argument is used for taking the product of an "
"iterable or a set of iterables with themselves, repeated *N* times.  With a "
"single iterable argument, *N*-tuples are returned::"
msgstr "可選的 *repeat* 關鍵字參數用於獲取可疊代對像或一組可疊代物件的乘積，重複 *N* "
"次。使用單個可疊代參數，回傳 *N* 元組::"

#: ../../whatsnew/2.6.rst:2036
#, fuzzy
msgid "With two iterables, *2N*-tuples are returned. ::"
msgstr "對於兩個可疊代物件，回傳 *2N* 元組。 ::"

#: ../../whatsnew/2.6.rst:2044
#, fuzzy
msgid ""
"``combinations(iterable, r)`` returns sub-sequences of length *r* from the "
"elements of *iterable*. ::"
msgstr "``combinations(iterable, r)`` 從 *iterable* 的元素回傳長度為 *r* 的子序列。 "
"::"

#: ../../whatsnew/2.6.rst:2055
#, fuzzy
msgid ""
"``permutations(iter[, r])`` returns all the permutations of length *r* of "
"the iterable's elements.  If *r* is not specified, it will default to the "
"number of elements produced by the iterable. ::"
msgstr ""
"``permutations(iter[, r])`` 回傳可疊代元素的所有長度 *r* 的排列。如果未指定 "
"*r*，它將預設為可疊代生成的元素數。 ::"

#: ../../whatsnew/2.6.rst:2065
#, fuzzy
msgid ""
"``itertools.chain(*iterables)`` is an existing function in :mod:`itertools` "
"that gained a new constructor in Python 2.6. ``itertools.chain."
"from_iterable(iterable)`` takes a single iterable that should return other "
"iterables.  :func:`chain` will then return all the elements of the first "
"iterable, then all the elements of the second, and so on. ::"
msgstr ""
"``itertools.chain(*iterables)`` 是 itertools 中的一個現有函式，它在 Python "
"2.6 中獲得了一個新的構造函式。 ``itertools.chain.from_iterable(iterable)`` "
"採用一個應該回傳其他可疊代物件的可疊代物件。 :func:`chain` 將回傳第一個 "
"iterable 的所有元素，然後是第二個 iterable 的所有元素，依此類推。 ::"

#: ../../whatsnew/2.6.rst:2075
#, fuzzy
msgid "(All contributed by Raymond Hettinger.)"
msgstr "（全部由 Raymond Hettinger 提供。）"

#: ../../whatsnew/2.6.rst:2077
#, fuzzy
msgid ""
"The :mod:`logging` module's :class:`FileHandler` class and its subclasses :"
"class:`WatchedFileHandler`, :class:`RotatingFileHandler`, and :class:"
"`TimedRotatingFileHandler` now have an optional *delay* parameter to their "
"constructors.  If *delay* is true, opening of the log file is deferred until "
"the first :meth:`emit` call is made.  (Contributed by Vinay Sajip.)"
msgstr ""
":mod:`logging` 模組的 :class:`FileHandler` 類及其子類別 "
":class:`WatchedFileHandler`、:class:`RotatingFileHandler` 和 "
":class:`TimedRotatingFileHandler` 現在在它們的構造函式中有一個可選的 *delay* "
"參數.如果 *delay* 為真，日誌文件的打開將延遲到第一次 :meth:`emit` 呼叫。 （"
"由 Vinay Sajip 提供。）"

#: ../../whatsnew/2.6.rst:2084
#, fuzzy
msgid ""
":class:`TimedRotatingFileHandler` also has a *utc* constructor parameter.  "
"If the argument is true, UTC time will be used in determining when midnight "
"occurs and in generating filenames; otherwise local time will be used."
msgstr ""
":class:`TimedRotatingFileHandler` 也有一個 *utc* 構造函式參數。如果參數為真，"
"UTC 時間將用於確定午夜何時發生和生成文件名；否則將使用當地時間。"

#: ../../whatsnew/2.6.rst:2089
#, fuzzy
msgid "Several new functions were added to the :mod:`math` module:"
msgstr ":mod:`math` 模組中新增了幾個新函式："

#: ../../whatsnew/2.6.rst:2091
#, fuzzy
msgid ""
":func:`~math.isinf` and :func:`~math.isnan` determine whether a given float "
"is a (positive or negative) infinity or a NaN (Not a Number), respectively."
msgstr ""
":func:`~math.isinf` 和 :func:`~math.isnan` 分別確定給定的浮點數是（正或負）"
"無窮大還是 NaN（非數字）。"

#: ../../whatsnew/2.6.rst:2094
#, fuzzy
msgid ""
":func:`~math.copysign` copies the sign bit of an IEEE 754 number, returning "
"the absolute value of *x* combined with the sign bit of *y*.  For example, "
"``math.copysign(1, -0.0)`` returns -1.0. (Contributed by Christian Heimes.)"
msgstr ""
":func:`~math.copysign` 複製 IEEE 754 數字的符號位，回傳 *x* 的絕對值與 *y* "
"的符號位。例如，``math.copysign(1, -0.0)`` 回傳 -1.0。 "
"（由克里斯蒂安·海姆斯提供。）"

#: ../../whatsnew/2.6.rst:2099
#, fuzzy
msgid ""
":func:`~math.factorial` computes the factorial of a number. (Contributed by "
"Raymond Hettinger; :issue:`2138`.)"
msgstr ""
":func:`~math.factorial` 計算一個數的階乘。 （由 Raymond Hettinger "
"提供；:issue:`2138`。）"

#: ../../whatsnew/2.6.rst:2102
#, fuzzy
msgid ""
":func:`~math.fsum` adds up the stream of numbers from an iterable, and is "
"careful to avoid loss of precision through using partial sums. (Contributed "
"by Jean Brouwers, Raymond Hettinger, and Mark Dickinson; :issue:`2819`.)"
msgstr ""
":func:`~math.fsum` 將可疊代的數字流相加，並小心避免通過使用部分和來損失精度。"
" （由 Jean Brouwers、Raymond Hettinger 和 Mark Dickinson "
"提供；:issue:`2819`。）"

#: ../../whatsnew/2.6.rst:2107
#, fuzzy
msgid ""
":func:`~math.acosh`, :func:`~math.asinh` and :func:`~math.atanh` compute the "
"inverse hyperbolic functions."
msgstr ":func:`~math.acosh`, :func:`~math.asinh` 和 :func:`~math.atanh` "
"計算反雙曲函式。"

#: ../../whatsnew/2.6.rst:2110
#, fuzzy
msgid ":func:`~math.log1p` returns the natural logarithm of *1+x* (base *e*)."
msgstr ":func:`~math.log1p` 回傳 *1+x* (base *e*) 的自然對數。"

#: ../../whatsnew/2.6.rst:2113
#, fuzzy
msgid ""
":func:`trunc` rounds a number toward zero, returning the closest :class:"
"`Integral` that's between the function's argument and zero. Added as part of "
"the backport of `PEP 3141's type hierarchy for numbers <#pep-3141>`__."
msgstr ""
":func:`trunc` 將數字向零舍入，回傳函式參數和零之間最接近的 "
":class:`Integral`。作為 `PEP 3141 的數字型別層次結構的向後移植的一部分新增 "
"<#pep-3141>`__。"

#: ../../whatsnew/2.6.rst:2118
#, fuzzy
msgid ""
"The :mod:`math` module has been improved to give more consistent behaviour "
"across platforms, especially with respect to handling of floating-point "
"exceptions and IEEE 754 special values."
msgstr ":mod:`math` 模組已得到改進，可以提供更一致的跨平台行為，"
"尤其是在處理浮點例外和 IEEE 754 特殊值方面。"

#: ../../whatsnew/2.6.rst:2122
#, fuzzy
msgid ""
"Whenever possible, the module follows the recommendations of the C99 "
"standard about 754's special values.  For example, ``sqrt(-1.)`` should now "
"give a :exc:`ValueError` across almost all platforms, while "
"``sqrt(float('NaN'))`` should return a NaN on all IEEE 754 platforms.  Where "
"Annex 'F' of the C99 standard recommends signaling 'divide-by-zero' or "
"'invalid', Python will raise :exc:`ValueError`. Where Annex 'F' of the C99 "
"standard recommends signaling 'overflow', Python will raise :exc:"
"`OverflowError`.  (See :issue:`711019` and :issue:`1640`.)"
msgstr ""
"只要有可能，該模組就遵循 C99 標準關於 754 的特殊值的建議。例如，``sqrt(-1.)``"
" 現在應該在幾乎所有平台上給出 :exc:`ValueError`，而 ``sqrt(float('NaN'))`` "
"應該在所有 IEEE 754 上回傳 NaN平台。如果 C99 "
"標準的附件 ``F``建議發出“被零除”或“無效”信號，則 Python 將引發 "
":exc:`ValueError`。如果 C99 標準的附件 ``F``建議發出“溢出”信號，Python 將引發 "
":exc:`OverflowError`。 （參見 :issue:`711019` 和 :issue:`1640`。）"

#: ../../whatsnew/2.6.rst:2132
#, fuzzy
msgid "(Contributed by Christian Heimes and Mark Dickinson.)"
msgstr "（由 Christian Heimes 和 Mark Dickinson 提供。）"

#: ../../whatsnew/2.6.rst:2134
#, fuzzy
msgid ""
":class:`~mmap.mmap` objects now have a :meth:`rfind` method that searches "
"for a substring beginning at the end of the string and searching backwards.  "
"The :meth:`find` method also gained an *end* parameter giving an index at "
"which to stop searching. (Contributed by John Lenton.)"
msgstr ""
":class:`~mmap.mmap` 物件現在有一個 :meth:`rfind` "
"方法，用於搜索從字串末尾開始並向後搜索的子字串。 :meth:`find` "
"方法還獲得了一個 *end* 參數，給出了停止搜索的索引。 （由約翰·倫頓提供。）"

#: ../../whatsnew/2.6.rst:2140
#, fuzzy
msgid ""
"The :mod:`operator` module gained a :func:`methodcaller` function that takes "
"a name and an optional set of arguments, returning a callable that will call "
"the named function on any arguments passed to it.  For example::"
msgstr ""
":mod:`operator` 模組獲得了一個 :func:`methodcaller` 函式，該函式接受一個名稱"
"和一組可選的參數，回傳一個可呼叫函式，該函式將呼叫傳遞給它的任何參數的命名函"
"式。例如：："

#: ../../whatsnew/2.6.rst:2150
#, fuzzy
msgid "(Contributed by Georg Brandl, after a suggestion by Gregory Petrosyan.)"
msgstr "（根據 Gregory Petrosyan 的建議，由 Georg Brandl 提供。）"

#: ../../whatsnew/2.6.rst:2152
#, fuzzy
msgid ""
"The :func:`attrgetter` function now accepts dotted names and performs the "
"corresponding attribute lookups::"
msgstr ":func:`attrgetter` 函式現在接受點分名稱並執行相應的屬性查找::"

#: ../../whatsnew/2.6.rst:2162
#, fuzzy
msgid "(Contributed by Georg Brandl, after a suggestion by Barry Warsaw.)"
msgstr "（根據 Barry Warsaw 的建議，由 Georg Brandl 提供。）"

#: ../../whatsnew/2.6.rst:2164
#, fuzzy
msgid ""
"The :mod:`os` module now wraps several new system calls. ``fchmod(fd, "
"mode)`` and ``fchown(fd, uid, gid)`` change the mode and ownership of an "
"opened file, and ``lchmod(path, mode)`` changes the mode of a symlink.  "
"(Contributed by Georg Brandl and Christian Heimes.)"
msgstr ""
":mod:`os` 模組現在包裝了幾個新的系統呼叫。 ``fchmod(fd, mode)`` 和 ``fchown("
"fd, uid, gid)`` 更改打開文件的模式和所有權，``lchmod(path, mode)`` "
"更改符號鏈接的模式. （由 Georg Brandl 和 Christian Heimes 提供。）"

#: ../../whatsnew/2.6.rst:2170
#, fuzzy
msgid ""
":func:`chflags` and :func:`lchflags` are wrappers for the corresponding "
"system calls (where they're available), changing the flags set on a file.  "
"Constants for the flag values are defined in the :mod:`stat` module; some "
"possible values include :const:`UF_IMMUTABLE` to signal the file may not be "
"changed and :const:`UF_APPEND` to indicate that data can only be appended to "
"the file.  (Contributed by M. Levinson.)"
msgstr ""
":func:`chflags` 和 :func:`lchflags` "
"是相應系統呼叫（可用時）的包裝器，用於更改文件上設定的旗標。旗標值的常數在 "
":mod:`stat` 模組中定義；一些可能的值包括 :const:`UF_IMMUTABLE` "
"表示文件可能不會更改，以及 :const:`UF_APPEND` 表示資料只能附加到文件中。 （"
"由 M. Levinson 提供。）"

#: ../../whatsnew/2.6.rst:2178
#, fuzzy
msgid ""
"``os.closerange(low, high)`` efficiently closes all file descriptors from "
"*low* to *high*, ignoring any errors and not including *high* itself. This "
"function is now used by the :mod:`subprocess` module to make starting "
"processes faster.  (Contributed by Georg Brandl; :issue:`1663329`.)"
msgstr ""
"``os.closerange(low, high)`` 有效地關閉從*low* 到*high* "
"的所有文件描述器，忽略任何錯誤並且不包括*high* 本身。 :mod:`subprocess` "
"模組現在使用此函式來加快啟動行程。 （由 Georg Brandl "
"提供；:issue:`1663329`。）"

#: ../../whatsnew/2.6.rst:2183
#, fuzzy
msgid ""
"The ``os.environ`` object's :meth:`clear` method will now unset the "
"environment variables using :func:`os.unsetenv` in addition to clearing the "
"object's keys.  (Contributed by Martin Horcicka; :issue:`1181`.)"
msgstr ""
"除了清除物件的鍵之外，``os.environ`` 物件的 :meth:`clear` 方法現在將使用 "
":func:`os.unsetenv` 取消設定環境變數。 （由 Martin Horcicka "
"提供；:issue:`1181`。）"

#: ../../whatsnew/2.6.rst:2187
#, fuzzy
msgid ""
"The :func:`os.walk` function now has a ``followlinks`` parameter. If set to "
"True, it will follow symlinks pointing to directories and visit the "
"directory's contents.  For backward compatibility, the parameter's default "
"value is false.  Note that the function can fall into an infinite recursion "
"if there's a symlink that points to a parent directory.  (:issue:`1273829`)"
msgstr ""
":func:`os.walk` 函式現在有一個 ``followlinks`` 參數。如果設定為 "
"True，它將遵循指向目錄的符號鏈接並訪問目錄的內容。為了向後相容，"
"該參數的預設值為 "
"false。請注意，如果存在指向父目錄的符號鏈接，則該函式可能會陷入無限遞迴。 "
"（ :issue:`1273829`）"

#: ../../whatsnew/2.6.rst:2194
#, fuzzy
msgid ""
"In the :mod:`os.path` module, the :func:`splitext` function has been changed "
"to not split on leading period characters. This produces better results when "
"operating on Unix's dot-files. For example, ``os.path.splitext('.ipython')`` "
"now returns ``('.ipython', '')`` instead of ``('', '.ipython')``. (:issue:"
"`1115886`)"
msgstr ""
"在 :mod:`os.path` 模組中，:func:`splitext` 函式已更改為不拆分前導句點字元。"
"在 Unix 的點文件上運行時，這會產生更好的結果。例如，``os.path.splitext('."
"ipython')`` 現在回傳``('.ipython', '')`` 而不是``('', '.ipython')``。 "
"（ :issue:`1115886`）"

#: ../../whatsnew/2.6.rst:2201
#, fuzzy
msgid ""
"A new function, ``os.path.relpath(path, start='.')``, returns a relative "
"path from the ``start`` path, if it's supplied, or from the current working "
"directory to the destination ``path``.  (Contributed by Richard Barran; :"
"issue:`1339796`.)"
msgstr ""
"一個新的函式，``os.path.relpath(path, start='.')``，回傳一個從``start``路徑的"
"相對路徑，如果提供的話，或者從當前工作目錄到目的地` `路徑``。 （由 Richard "
"Barran 提供；:issue:`1339796`。）"

#: ../../whatsnew/2.6.rst:2206
#, fuzzy
msgid ""
"On Windows, :func:`os.path.expandvars` will now expand environment variables "
"given in the form \"%var%\", and \"~user\" will be expanded into the user's "
"home directory path.  (Contributed by Josiah Carlson; :issue:`957650`.)"
msgstr ""
"在 Windows 上，:func:`os.path.expandvars` "
"現在將擴充以“%var%”形式給出的環境變數，“~user”將擴充到使用者的主目錄路徑中。 "
"（由 Josiah Carlson 提供；:issue:`957650`。）"

#: ../../whatsnew/2.6.rst:2211
#, fuzzy
msgid ""
"The Python debugger provided by the :mod:`pdb` module gained a new command: "
"\"run\" restarts the Python program being debugged and can optionally take "
"new command-line arguments for the program. (Contributed by Rocky "
"Bernstein; :issue:`1393667`.)"
msgstr ""
":mod:`pdb` 模組提供的 Python 除錯器獲得了一個新命令：“運行”"
"重新啟動正在除錯的 Python 程式，並且可以選擇為該程式獲取新的命令列參數。 （"
"由 Rocky Bernstein 提供；:issue:`1393667`。）"

#: ../../whatsnew/2.6.rst:2216
#, fuzzy
msgid ""
"The :func:`pdb.post_mortem` function, used to begin debugging a traceback, "
"will now use the traceback returned by :func:`sys.exc_info` if no traceback "
"is supplied.   (Contributed by Facundo Batista; :issue:`1106316`.)"
msgstr ""
":func:`pdb.post_mortem` 函式，用於開始除錯回溯，如果沒有提供回溯，現在將使用 "
":func:`sys.exc_info` 回傳的回溯。 （由 Facundo Batista "
"提供；:issue:`1106316`。）"

#: ../../whatsnew/2.6.rst:2221
#, fuzzy
msgid ""
"The :mod:`pickletools` module now has an :func:`optimize` function that "
"takes a string containing a pickle and removes some unused opcodes, "
"returning a shorter pickle that contains the same data structure. "
"(Contributed by Raymond Hettinger.)"
msgstr ""
":mod:`pickletools` 模組現在有一個 :func:`optimize` 函式，它接受一個包含 "
"pickle 的字串並刪除一些未使用的操作碼，回傳一個包含相同資料結構的較短的 "
"pickle。 （雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.6.rst:2226
#, fuzzy
msgid ""
"A :func:`get_data` function was added to the :mod:`pkgutil` module that "
"returns the contents of resource files included with an installed Python "
"package.  For example::"
msgstr ""
"一個 :func:`get_data` 函式被新增到 :mod:`pkgutil` 模組，它回傳已安裝的 "
"Python 包中包含的資源文件的內容。例如：："

#: ../../whatsnew/2.6.rst:2241
#, fuzzy
msgid "(Contributed by Paul Moore; :issue:`2439`.)"
msgstr "（由 Paul Moore 提供；:issue:`2439`。）"

#: ../../whatsnew/2.6.rst:2243
#, fuzzy
msgid ""
"The :mod:`pyexpat` module's :class:`Parser` objects now allow setting their :"
"attr:`buffer_size` attribute to change the size of the buffer used to hold "
"character data. (Contributed by Achim Gaedke; :issue:`1137`.)"
msgstr ""
":mod:`pyexpat` 模組的 :class:`Parser` 物件現在允許設定它們的 "
":attr:`buffer_size` 屬性來更改用於保存字元資料的緩衝區的大小。 （由 Achim "
"Gaedke 提供；:issue:`1137`。）"

#: ../../whatsnew/2.6.rst:2248
#, fuzzy
msgid ""
"The :mod:`Queue` module now provides queue variants that retrieve entries in "
"different orders.  The :class:`PriorityQueue` class stores queued items in a "
"heap and retrieves them in priority order, and :class:`LifoQueue` retrieves "
"the most recently added entries first, meaning that it behaves like a stack. "
"(Contributed by Raymond Hettinger.)"
msgstr ""
":mod:`Queue` 模組現在提供隊列變體，以不同的順序檢索條目。 "
":class:`PriorityQueue` "
"類將排隊的項目儲存在堆中並按優先順序檢索它們，而 :class:`LifoQueue` "
"首先檢索最近新增的條目，這意味著它的行為類似於堆疊。 （雷蒙德·赫廷格供稿。）"

#: ../../whatsnew/2.6.rst:2255
#, fuzzy
msgid ""
"The :mod:`random` module's :class:`Random` objects can now be pickled on a "
"32-bit system and unpickled on a 64-bit system, and vice versa.  "
"Unfortunately, this change also means that Python 2.6's :class:`Random` "
"objects can't be unpickled correctly on earlier versions of Python. "
"(Contributed by Shawn Ligocki; :issue:`1727780`.)"
msgstr ""
":mod:`random` 模組的 :class:`Random` 物件現在可以在 32 位系統上 pickle，在 "
"64 位系統上 unpickled，反之亦然。不幸的是，此更改還意味著 Python 2.6 的 "
":class:`Random` 物件無法在早期版本的 Python 上正確解封。 （由 Shawn Ligocki "
"提供；:issue:`1727780`。）"

#: ../../whatsnew/2.6.rst:2262
#, fuzzy
msgid ""
"The new ``triangular(low, high, mode)`` function returns random numbers "
"following a triangular distribution.   The returned values are between *low* "
"and *high*, not including *high* itself, and with *mode* as the most "
"frequently occurring value in the distribution.  (Contributed by Wladmir van "
"der Laan and Raymond Hettinger; :issue:`1681432`.)"
msgstr ""
"新的 ``triangular(low, high, mode)`` 函式回傳遵循三角分佈的隨機數。"
"回傳值介於 *low* 和 *high* 之間，不包括 *high* 本身，並且 *mode* "
"作為分佈中出現頻率最高的值。 （由 Wladmir van der Laan 和 Raymond Hettinger "
"提供；:issue:`1681432`。）"

#: ../../whatsnew/2.6.rst:2269
#, fuzzy
msgid ""
"Long regular expression searches carried out by the  :mod:`re` module will "
"check for signals being delivered, so time-consuming searches can now be "
"interrupted. (Contributed by Josh Hoyt and Ralf Schmitt; :issue:`846388`.)"
msgstr ""
":mod:`re` "
"模組執行的長正則表達式搜索將檢查正在傳遞的信號，因此現在可以中斷耗時的搜索。 "
"（由 Josh Hoyt 和 Ralf Schmitt 提供；:issue:`846388`。）"

#: ../../whatsnew/2.6.rst:2274
#, fuzzy
msgid ""
"The regular expression module is implemented by compiling bytecodes for a "
"tiny regex-specific virtual machine.  Untrusted code could create malicious "
"strings of bytecode directly and cause crashes, so Python 2.6 includes a "
"verifier for the regex bytecode. (Contributed by Guido van Rossum from work "
"for Google App Engine; :issue:`3487`.)"
msgstr ""
"正則表達式模組是通過為一個微型正則表達式特定的虛擬機編譯位元組碼來實作的。不"
"受信任的程式碼可能會直接建立惡意位元組碼字串並導致崩潰，因此 Python 2.6 "
"包含一個用於正則表達式位元組碼的驗證器。 （由 Guido van Rossum 在 Google App "
"Engine 的工作貢獻；:issue:`3487`。）"

#: ../../whatsnew/2.6.rst:2281
#, fuzzy
msgid ""
"The :mod:`rlcompleter` module's :meth:`Completer.complete()` method will now "
"ignore exceptions triggered while evaluating a name. (Fixed by Lorenz "
"Quack; :issue:`2250`.)"
msgstr ""
":mod:`rlcompleter` 模組的 :meth:`Completer.complete()` "
"方法現在將忽略在評估名稱時觸發的例外。 （由 Lorenz Quack "
"修復；:issue:`2250`。）"

#: ../../whatsnew/2.6.rst:2285
#, fuzzy
msgid ""
"The :mod:`sched` module's :class:`scheduler` instances now have a read-only :"
"attr:`queue` attribute that returns the contents of the scheduler's queue, "
"represented as a list of named tuples with the fields ``(time, priority, "
"action, argument)``. (Contributed by Raymond Hettinger; :issue:`1861`.)"
msgstr ""
":mod:`sched` 模組的 :class:`scheduler` 實例現在有一個只讀的 :attr:`queue` "
"屬性，它回傳調度程式隊列的內容，表示為帶有欄位的命名元組列表 "
"``(時間、優先級、動作、參數）``。 （由 Raymond Hettinger "
"提供；:issue:`1861`。）"

#: ../../whatsnew/2.6.rst:2291
#, fuzzy
msgid ""
"The :mod:`select` module now has wrapper functions for the Linux :c:func:"
"`epoll` and BSD :c:func:`kqueue` system calls. :meth:`modify` method was "
"added to the existing :class:`poll` objects; ``pollobj.modify(fd, "
"eventmask)`` takes a file descriptor or file object and an event mask, "
"modifying the recorded event mask for that file. (Contributed by Christian "
"Heimes; :issue:`1657`.)"
msgstr ""
":mod:`select` 模組現在具有用於 Linux :c:func:`epoll` 和 BSD :c:func:`kqueue` "
"系統呼叫的包裝函式。 :meth:`modify` 方法被新增到現有的 :class:`poll` 對像中； "
"``pollobj.modify(fd, eventmask)`` "
"採用文件描述器或文件物件和事件掩碼，修改該文件的記錄事件掩碼。 （由 "
"Christian Heimes 提供；:issue:`1657`。）"

#: ../../whatsnew/2.6.rst:2299
#, fuzzy
msgid ""
"The :func:`shutil.copytree` function now has an optional *ignore* argument "
"that takes a callable object.  This callable will receive each directory "
"path and a list of the directory's contents, and returns a list of names "
"that will be ignored, not copied."
msgstr ""
":func:`shutil.copytree` 函式現在有一個可選的 *ignore* 參數，它接受一個可呼叫"
"物件。此可呼叫函式將接收每個目錄路徑和目錄內容列表，並回傳將被忽略而不是複制"
"的名稱列表。"

#: ../../whatsnew/2.6.rst:2304
#, fuzzy
msgid ""
"The :mod:`shutil` module also provides an :func:`ignore_patterns` function "
"for use with this new parameter.  :func:`ignore_patterns` takes an arbitrary "
"number of glob-style patterns and returns a callable that will ignore any "
"files and directories that match any of these patterns.  The following "
"example copies a directory tree, but skips both :file:`.svn` directories and "
"Emacs backup files, which have names ending with '~'::"
msgstr ""
":mod:`shutil` 模組還提供了一個 :func:`ignore_patterns` 函式用於這個新參數。 "
":func:`ignore_patterns` 採用任意數量的 glob 樣式模式並回傳一個可呼叫物件，它"
"將忽略與任何這些模式匹配的任何文件和目錄。以下示例複製目錄樹，但跳過 :file:`."
"svn` 目錄和 Emacs 備份文件，這些文件的名稱以 ``~``結尾："

#: ../../whatsnew/2.6.rst:2315
#, fuzzy
msgid "(Contributed by Tarek Ziadé; :issue:`2663`.)"
msgstr "（由 Tarek Ziadé 提供；:issue:`2663`。）"

#: ../../whatsnew/2.6.rst:2317
#, fuzzy
msgid ""
"Integrating signal handling with GUI handling event loops like those used by "
"Tkinter or GTk+ has long been a problem; most software ends up polling, "
"waking up every fraction of a second to check if any GUI events have "
"occurred. The :mod:`signal` module can now make this more efficient. Calling "
"``signal.set_wakeup_fd(fd)`` sets a file descriptor to be used; when a "
"signal is received, a byte is written to that file descriptor.  There's also "
"a C-level function, :c:func:`PySignal_SetWakeupFd`, for setting the "
"descriptor."
msgstr ""
"將信號處理與 GUI 處理事件循環（如 Tkinter 或 GTk+ "
"使用的事件循環）集成長期以來一直是個問題；大多數軟件以輪詢結束，"
"每隔幾分之一秒喚醒一次以檢查是否發生了任何 GUI 事件。 :mod:`signal` "
"模組現在可以提高效率。呼叫 signal.set_wakeup_fd(fd) "
"設定要使用的文件描述器；當接收到信號時，一個位元組被寫入該文件描述器。"
"還有一個 C 級函式 :c:func:`PySignal_SetWakeupFd`，用於設定描述器。"

#: ../../whatsnew/2.6.rst:2327
#, fuzzy
msgid ""
"Event loops will use this by opening a pipe to create two descriptors, one "
"for reading and one for writing.  The writable descriptor will be passed to :"
"func:`set_wakeup_fd`, and the readable descriptor will be added to the list "
"of descriptors monitored by the event loop via :c:func:`select` or :c:func:"
"`poll`. On receiving a signal, a byte will be written and the main event "
"loop will be woken up, avoiding the need to poll."
msgstr ""
"事件循環將通過打開管道建立兩個描述器來使用它，一個用於讀取，一個用於寫入。可"
"寫描述器將傳遞給 :func:`set_wakeup_fd`，可讀描述器將通過:c:func:`select` "
"或:c:func:`poll` 新增到事件循環監視的描述器列表中。收到信號後，將寫入一個位元"
"組並喚醒主事件循環，從而避免輪詢。"

#: ../../whatsnew/2.6.rst:2335
#, fuzzy
msgid "(Contributed by Adam Olsen; :issue:`1583`.)"
msgstr "（由 Adam Olsen 提供；:issue:`1583`。）"

#: ../../whatsnew/2.6.rst:2337
#, fuzzy
msgid ""
"The :func:`siginterrupt` function is now available from Python code, and "
"allows changing whether signals can interrupt system calls or not. "
"(Contributed by Ralf Schmitt.)"
msgstr ""
":func:`siginterrupt` 函式現在可從 Python "
"程式碼獲得，並允許更改信號是否可以中斷系統呼叫。 （由拉爾夫·施密特提供。）"

#: ../../whatsnew/2.6.rst:2341
#, fuzzy
msgid ""
"The :func:`setitimer` and :func:`getitimer` functions have also been added "
"(where they're available).  :func:`setitimer` allows setting interval timers "
"that will cause a signal to be delivered to the process after a specified "
"time, measured in wall-clock time, consumed process time, or combined "
"process+system time.  (Contributed by Guilherme Polo; :issue:`2240`.)"
msgstr ""
"還新增了 :func:`setitimer` 和 :func:`getitimer` 函式（在它們可用的地方）。 "
":func:`setitimer` 允許設定間隔計時器，這將導致信號在指定時間後傳遞給行程，以"
"掛鐘時間、消耗的行程時間或組合的行程+系統時間來衡量。 （由 Guilherme Polo "
"提供；:issue:`2240`。）"

#: ../../whatsnew/2.6.rst:2348
#, fuzzy
msgid ""
"The :mod:`smtplib` module now supports SMTP over SSL thanks to the addition "
"of the :class:`SMTP_SSL` class. This class supports an interface identical "
"to the existing :class:`SMTP` class. (Contributed by Monty Taylor.)  Both "
"class constructors also have an optional ``timeout`` parameter that "
"specifies a timeout for the initial connection attempt, measured in "
"seconds.  (Contributed by Facundo Batista.)"
msgstr ""
"由於新增了 :class:`SMTP_SSL` 類，smtplib 模組現在支援 SMTP over SSL。"
"此類支援與現有 SMTP 類相同的介面。 （由 Monty Taylor 提供。）兩個類構造函式還"
"有一個可選的 ``timeout`` 參數，用於指定初始連接嘗試的超時時間，以秒為單位。 （由 "
"Facundo Batista 提供。）"

#: ../../whatsnew/2.6.rst:2356
#, fuzzy
msgid ""
"An implementation of the LMTP protocol (:rfc:`2033`) was also added to the "
"module.  LMTP is used in place of SMTP when transferring e-mail between "
"agents that don't manage a mail queue.  (LMTP implemented by Leif Hedstrom; :"
"issue:`957003`.)"
msgstr ""
"模組中還新增了 LMTP 協定 (:rfc:`2033`) "
"的實作。在不管理郵件隊列的代理之間傳輸電子郵件時，使用 LMTP 代替 SMTP。 （由 "
"Leif Hedstrom 實施的 LMTP；:issue:`957003`。）"

#: ../../whatsnew/2.6.rst:2361
#, fuzzy
msgid ""
":meth:`SMTP.starttls` now complies with :rfc:`3207` and forgets any "
"knowledge obtained from the server not obtained from the TLS negotiation "
"itself.  (Patch contributed by Bill Fenner; :issue:`829951`.)"
msgstr ""
":meth:`SMTP.starttls` 現在符合 :rfc:`3207` 並忘記從伺服器獲得的任何不是從 "
"TLS 協商本身獲得的知識。 （補丁由 Bill Fenner 提供；:issue:`829951`。）"

#: ../../whatsnew/2.6.rst:2366
#, fuzzy
msgid ""
"The :mod:`socket` module now supports TIPC (http://tipc.sourceforge.net/), a "
"high-performance non-IP-based protocol designed for use in clustered "
"environments.  TIPC addresses are 4- or 5-tuples. (Contributed by Alberto "
"Bertogli; :issue:`1646`.)"
msgstr ""
":mod:`socket` 模組現在支援 TIPC (http://tipc.sourceforge.net/)，"
"這是一種專為在集群環境中使用而設計的高性能非基於 IP 的協定。 TIPC 地址是 4 "
"元組或 5 元組。 （由 Alberto Bertogli 提供；:issue:`1646`。）"

#: ../../whatsnew/2.6.rst:2371
#, fuzzy
msgid ""
"A new function, :func:`create_connection`, takes an address and connects to "
"it using an optional timeout value, returning the connected socket object.  "
"This function also looks up the address's type and connects to it using IPv4 "
"or IPv6 as appropriate.  Changing your code to use :func:`create_connection` "
"instead of ``socket(socket.AF_INET, ...)`` may be all that's required to "
"make your code work with IPv6."
msgstr ""
"一個新函式 :func:`create_connection` "
"獲取一個地址並使用可選的超時值連接到它，回傳連接的 socket 物件。"
"此函式還查找地址的型別並根據需要使用 IPv4 或 IPv6 連接到它。"
"更改您的程式碼以使用 :func:`create_connection` 而不是 ``socket("
"socket.AF_INET, ...)`` 可能是使您的程式碼使用 IPv6 所需的全部。"

#: ../../whatsnew/2.6.rst:2379
#, fuzzy
msgid ""
"The base classes in the :mod:`SocketServer` module now support calling a :"
"meth:`handle_timeout` method after a span of inactivity specified by the "
"server's :attr:`timeout` attribute.  (Contributed by Michael Pomraning.)  "
"The :meth:`serve_forever` method now takes an optional poll interval "
"measured in seconds, controlling how often the server will check for a "
"shutdown request. (Contributed by Pedro Werneck and Jeffrey Yasskin; :issue:"
"`742598`, :issue:`1193577`.)"
msgstr ""
":mod:`SocketServer` 模組中的基底類別現在支援在伺服器的 :attr:`timeout` "
"屬性指定的不活動時間後呼叫 :meth:`handle_timeout` 方法。 （由 Michael "
"Pomraning 提供。） :meth:`serve_forever` "
"方法現在採用以秒為單位的可選輪詢間隔，控制伺服器檢查關閉請求的頻率。 （由 "
"Pedro Werneck 和 Jeffrey Yasskin 提供；:issue:`742598`, :issue:`1193577`。）"

#: ../../whatsnew/2.6.rst:2388
#, fuzzy
msgid ""
"The :mod:`sqlite3` module, maintained by Gerhard Häring, has been updated "
"from version 2.3.2 in Python 2.5 to version 2.4.1."
msgstr ""
"由 Gerhard Häring 維護的 :mod:`sqlite3` 模組已從 Python 2.5 中的 2.3.2 "
"版更新到 2.4.1 版。"

#: ../../whatsnew/2.6.rst:2392
#, fuzzy
msgid ""
"The :mod:`struct` module now supports the C99 :c:expr:`_Bool` type, using "
"the format character ``'?'``. (Contributed by David Remahl.)"
msgstr ""
":mod:`struct` 模組現在支援 C99 :c:expr:`_Bool` 型別，使用格式字元 ``'?'``。 "
"（由大衛·雷馬爾提供。）"

#: ../../whatsnew/2.6.rst:2396
#, fuzzy
msgid ""
"The :class:`Popen` objects provided by the :mod:`subprocess` module now "
"have :meth:`terminate`, :meth:`kill`, and :meth:`send_signal` methods. On "
"Windows, :meth:`send_signal` only supports the :const:`SIGTERM` signal, and "
"all these methods are aliases for the Win32 API function :c:func:"
"`TerminateProcess`. (Contributed by Christian Heimes.)"
msgstr ""
":mod:`subprocess` 模組提供的 :class:`Popen` "
"物件現在有 :meth:`terminate`、:meth:`kill` 和:meth:`send_signal`"
" 方法。在 Windows 上，:meth:`send_signal` 只支援 :const:`SIGTERM` 信號，"
"所有這些方法都是 Win32 API 函式:c:func:`TerminateProcess` 的別名。 "
"（由克里斯蒂安·海姆斯提供。）"

#: ../../whatsnew/2.6.rst:2403
#, fuzzy
msgid ""
"A new variable in the :mod:`sys` module, :attr:`float_info`, is an object "
"containing information derived from the :file:`float.h` file about the "
"platform's floating-point support.  Attributes of this object include :attr:"
"`mant_dig` (number of digits in the mantissa), :attr:`epsilon` (smallest "
"difference between 1.0 and the next largest value representable), and "
"several others.  (Contributed by Christian Heimes; :issue:`1534`.)"
msgstr ""
":mod:`sys` 模組中的新變數 float_info 是一個物件，它包含從 :file:`float.h` 文"
"件派生的關於平台浮點支援的資訊。此物件的屬性包括 :attr:`mant_dig`（尾數中的位"
"數）、:attr:`epsilon`（1.0 "
"和下一個可表示的最大值之間的最小差異）以及其他幾個。 （由 Christian Heimes "
"提供；:issue:`1534`。）"

#: ../../whatsnew/2.6.rst:2411
#, fuzzy
msgid ""
"Another new variable, :attr:`dont_write_bytecode`, controls whether Python "
"writes any :file:`.pyc` or :file:`.pyo` files on importing a module. If this "
"variable is true, the compiled files are not written.  The variable is "
"initially set on start-up by supplying the :option:`-B` switch to the Python "
"interpreter, or by setting the :envvar:`PYTHONDONTWRITEBYTECODE` environment "
"variable before running the interpreter.  Python code can subsequently "
"change the value of this variable to control whether bytecode files are "
"written or not. (Contributed by Neal Norwitz and Georg Brandl.)"
msgstr ""
"另一個新變數 :attr:`dont_write_bytecode` 控制 Python "
"在導入模組時是否寫入任何 :file:`.pyc` 或 :file:`.pyo` "
"文件。如果此變數為真，則不寫入編譯文件。該變數最初是在啟動時設定的，方法是向 "
"Python 直譯器提供 -B 開關，或者在運行直譯器之前設定 PYTHONDONTWRITEBYTECODE "
"環境變數。 Python程式碼可以隨後改變這個變數的值來控制是否寫入位元組碼文件。 "
"（由 Neal Norwitz 和 Georg Brandl 提供。）"

#: ../../whatsnew/2.6.rst:2422
#, fuzzy
msgid ""
"Information about the command-line arguments supplied to the Python "
"interpreter is available by reading attributes of a named tuple available as "
"``sys.flags``.  For example, the :attr:`verbose` attribute is true if Python "
"was executed in verbose mode, :attr:`debug` is true in debugging mode, etc. "
"These attributes are all read-only. (Contributed by Christian Heimes.)"
msgstr ""
"有關提供給 Python 直譯器的命令列參數的資訊可通過讀取作為“sys."
"flags”可用的命名元組的屬性來獲得。例如，如果 Python "
"在詳細模式下執行，:attr:`verbose` 屬性為真，在除錯模式下 :attr:`debug` "
"為真，等等。這些屬性都是只讀的。 （由克里斯蒂安·海姆斯提供。）"

#: ../../whatsnew/2.6.rst:2430
#, fuzzy
msgid ""
"A new function, :func:`getsizeof`, takes a Python object and returns the "
"amount of memory used by the object, measured in bytes.  Built-in objects "
"return correct results; third-party extensions may not, but can define a :"
"meth:`__sizeof__` method to return the object's size. (Contributed by Robert "
"Schuppenies; :issue:`2898`.)"
msgstr ""
"一個新函式 :func:`getsizeof` 接受一個 Python 物件並回傳該物件使用的記憶體量，"
"以位元組為單位。內建物件回傳正確的結果；第三方擴充可能不會，但可以定義一個 "
":meth:`__sizeof__` 方法來回傳物件的大小。 （由 Robert Schuppenies "
"提供；:issue:`2898`。）"

#: ../../whatsnew/2.6.rst:2437
#, fuzzy
msgid ""
"It's now possible to determine the current profiler and tracer functions by "
"calling :func:`sys.getprofile` and :func:`sys.gettrace`. (Contributed by "
"Georg Brandl; :issue:`1648`.)"
msgstr ""
"現在可以通過呼叫 :func:`sys.getprofile` 和 :func:`sys.gettrace` "
"來確定當前的分析器和跟踪器函式。 （由 Georg Brandl 提供；:issue:`1648`。）"

#: ../../whatsnew/2.6.rst:2441
#, fuzzy
msgid ""
"The :mod:`tarfile` module now supports POSIX.1-2001 (pax) tarfiles in "
"addition to the POSIX.1-1988 (ustar) and GNU tar formats that were already "
"supported.  The default format is GNU tar; specify the ``format`` parameter "
"to open a file using a different format::"
msgstr ""
"除了已經支援的 POSIX.1-1988 (ustar) 和 GNU tar 格式之外，:mod:`tarfile` "
"模組現在還支援 POSIX.1-2001 (pax) tarfiles。預設格式是 GNU tar；指定 "
"``format`` 參數以使用不同的格式打開文件::"

#: ../../whatsnew/2.6.rst:2449
#, fuzzy
msgid ""
"The new ``encoding`` and ``errors`` parameters specify an encoding and an "
"error handling scheme for character conversions.  ``'strict'``, "
"``'ignore'``, and ``'replace'`` are the three standard ways Python can "
"handle errors,; ``'utf-8'`` is a special value that replaces bad characters "
"with their UTF-8 representation.  (Character conversions occur because the "
"PAX format supports Unicode filenames, defaulting to UTF-8 encoding.)"
msgstr ""
"新的 ``encoding`` 和 ``errors`` 參數指定了字元轉換的編碼和錯誤處理方案。 "
"``'strict'``、``'ignore'`` 和 ``'replace'`` 是 Python "
"處理錯誤的三種標準方式； ``'utf-8'`` 是一個特殊值，它用 UTF-8 "
"表示形式替換壞字元。 （發生字元轉換是因為 PAX 格式支援 Unicode 文件名，"
"預設為 UTF-8 編碼。）"

#: ../../whatsnew/2.6.rst:2457
#, fuzzy
msgid ""
"The :meth:`TarFile.add` method now accepts an ``exclude`` argument that's a "
"function that can be used to exclude certain filenames from an archive. The "
"function must take a filename and return true if the file should be excluded "
"or false if it should be archived. The function is applied to both the name "
"initially passed to :meth:`add` and to the names of files in recursively "
"added directories."
msgstr ""
":meth:`TarFile.add` 方法現在接受一個 ``exclude`` "
"參數，該參數可用於從存檔中排除某些文件名。該函式必須採用文件名，"
"如果應該排除文件則回傳 true，如果應該存檔則回傳 false。"
"該函式適用於最初傳遞給 :meth:`add` 的名稱和遞迴新增的目錄中的文件名。"

#: ../../whatsnew/2.6.rst:2465
#, fuzzy
msgid "(All changes contributed by Lars Gustäbel)."
msgstr "（所有更改均由 Lars Gustäbel 貢獻）。"

#: ../../whatsnew/2.6.rst:2467
#, fuzzy
msgid ""
"An optional ``timeout`` parameter was added to the :class:`telnetlib.Telnet` "
"class constructor, specifying a timeout measured in seconds.  (Added by "
"Facundo Batista.)"
msgstr ""
"一個可選的 ``timeout`` 參數被新增到 :class:`telnetlib.Telnet` "
"類構造函式中，指定以秒為單位的超時時間。 （由 Facundo Batista 新增。）"

#: ../../whatsnew/2.6.rst:2471
#, fuzzy
msgid ""
"The :class:`tempfile.NamedTemporaryFile` class usually deletes the temporary "
"file it created when the file is closed.  This behaviour can now be changed "
"by passing ``delete=False`` to the constructor.  (Contributed by Damien "
"Miller; :issue:`1537850`.)"
msgstr ""
":class:`tempfile.NamedTemporaryFile` "
"類通常會在文件關閉時刪除它建立的臨時文件。現在可以通過將 delete=False "
"傳遞給構造函式來更改此行為。 （由 Damien Miller 提供；:issue:`1537850`。）"

#: ../../whatsnew/2.6.rst:2476
#, fuzzy
msgid ""
"A new class, :class:`SpooledTemporaryFile`, behaves like a temporary file "
"but stores its data in memory until a maximum size is exceeded.  On reaching "
"that limit, the contents will be written to an on-disk temporary file.  "
"(Contributed by Dustin J. Mitchell.)"
msgstr ""
"新類 SpooledTemporaryFile 的行為類似於臨時文件，但將其資料儲存在記憶體中，直"
"到超過最大大小。達到該限制後，內容將寫入磁盤上的臨時文件。 （由 Dustin J. "
"Mitchell 提供。）"

#: ../../whatsnew/2.6.rst:2481
#, fuzzy
msgid ""
"The :class:`NamedTemporaryFile` and :class:`SpooledTemporaryFile` classes "
"both work as context managers, so you can write ``with tempfile."
"NamedTemporaryFile() as tmp: ...``. (Contributed by Alexander Belopolsky; :"
"issue:`2021`.)"
msgstr ""
":class:`NamedTemporaryFile` 和 :class:`SpooledTemporaryFile` "
"類都用作上下文管理器，因此您可以編寫 ``with tempfile.NamedTemporaryFile() as "
"tmp: ...``。 （由 Alexander Belopolsky 提供；:issue:`2021`。）"

#: ../../whatsnew/2.6.rst:2486
#, fuzzy
msgid ""
"The :mod:`test.test_support` module gained a number of context managers "
"useful for writing tests. :func:`EnvironmentVarGuard` is a context manager "
"that temporarily changes environment variables and automatically restores "
"them to their old values."
msgstr ""
":mod:`test.test_support` 模組獲得了許多對編寫測試有用的上下文管理器。 "
":func:`EnvironmentVarGuard` "
"是一個上下文管理器，可以臨時更改環境變數並自動將它們恢復為舊值。"

#: ../../whatsnew/2.6.rst:2492
#, fuzzy
msgid ""
"Another context manager, :class:`TransientResource`, can surround calls to "
"resources that may or may not be available; it will catch and ignore a "
"specified list of exceptions.  For example, a network test may ignore "
"certain failures when connecting to an external web site::"
msgstr ""
"另一個上下文管理器 TransientResource 可以包圍對可能可用或不可用的資源的呼叫；"
"它將捕獲並忽略指定的例外列表。例如，網絡測試在連接到外部網站時可能會忽略某些"
"失敗::"

#: ../../whatsnew/2.6.rst:2503
#, fuzzy
msgid ""
"Finally, :func:`check_warnings` resets the :mod:`warning` module's warning "
"filters and returns an object that will record all warning messages "
"triggered (:issue:`3781`)::"
msgstr ""
"最後，:func:`check_warnings` 重置 :mod:`warning` "
"模組的警告過濾器並回傳一個物件，該物件將記錄所有觸發的警告消息 "
"(:issue:`3781`)::"

#: ../../whatsnew/2.6.rst:2513
#, fuzzy
msgid "(Contributed by Brett Cannon.)"
msgstr "（由 Brett Cannon 提供。）"

#: ../../whatsnew/2.6.rst:2515
#, fuzzy
msgid ""
"The :mod:`textwrap` module can now preserve existing whitespace at the "
"beginnings and ends of the newly created lines by specifying "
"``drop_whitespace=False`` as an argument::"
msgstr ""
":mod:`textwrap` 模組現在可以通過指定 ``drop_whitespace=False`` "
"作為參數來保留新建立行的開頭和結尾處的現有空白::"

#: ../../whatsnew/2.6.rst:2534
#, fuzzy
msgid "(Contributed by Dwayne Bailey; :issue:`1581073`.)"
msgstr "（由 Dwayne Bailey 提供；:issue:`1581073`。）"

#: ../../whatsnew/2.6.rst:2536
#, fuzzy
msgid ""
"The :mod:`threading` module API is being changed to use properties such as :"
"attr:`daemon` instead of :meth:`setDaemon` and :meth:`isDaemon` methods, and "
"some methods have been renamed to use underscores instead of camel-case; for "
"example, the :meth:`activeCount` method is renamed to :meth:`active_count`.  "
"Both the 2.6 and 3.0 versions of the module support the same properties and "
"renamed methods, but don't remove the old methods.  No date has been set for "
"the deprecation of the old APIs in Python 3.x; the old APIs won't be removed "
"in any 2.x version. (Carried out by several people, most notably Benjamin "
"Peterson.)"
msgstr ""
":mod:`threading` 模組 API 正在更改為使用 :attr:`daemon` 等屬性，而不是 "
":meth:`setDaemon` 和 :meth:`isDaemon` "
"方法，並且一些方法已重命名為使用底線駱駝箱；例如，:meth:`activeCount` "
"方法被重命名為 :meth:`active_count`。該模組的 2.6 和 3.0 "
"版本都支援相同的屬性和重命名的方法，但不刪除舊方法。沒有為 Python 3.x 中的舊 "
"API 的棄用設定日期；在任何 2.x 版本中都不會刪除舊的 API。 "
"（由幾個人完成，最著名的是本傑明·彼得森。）"

#: ../../whatsnew/2.6.rst:2547
#, fuzzy
msgid ""
"The :mod:`threading` module's :class:`Thread` objects gained an :attr:"
"`ident` property that returns the thread's identifier, a nonzero integer.  "
"(Contributed by Gregory P. Smith; :issue:`2871`.)"
msgstr ""
":mod:`threading` 模組的 :class:`Thread` 物件獲得了一個 :attr:`ident` "
"屬性，該屬性回傳執行緒的標識符，一個非零整數。 （由 Gregory P. Smith "
"提供；:issue:`2871`。）"

#: ../../whatsnew/2.6.rst:2552
#, fuzzy
msgid ""
"The :mod:`timeit` module now accepts callables as well as strings for the "
"statement being timed and for the setup code. Two convenience functions were "
"added for creating :class:`Timer` instances: ``repeat(stmt, setup, time, "
"repeat, number)`` and ``timeit(stmt, setup, time, number)`` create an "
"instance and call the corresponding method. (Contributed by Erik Demaine; :"
"issue:`1533909`.)"
msgstr ""
":mod:`timeit` 模組現在接受可呼叫對像以及正在計時的語句和設定程式碼的字串。"
"新增了兩個用於建立 Timer 實例的便利函式：``repeat(stmt, setup, time, repeat, "
"number)`` 和 ``timeit(stmt, setup, time, number)`` 建立實例並呼叫相應的方法。"
" （由 Erik Demaine 提供；:issue:`1533909`。）"

#: ../../whatsnew/2.6.rst:2561
#, fuzzy
msgid ""
"The :mod:`Tkinter` module now accepts lists and tuples for options, "
"separating the elements by spaces before passing the resulting value to Tcl/"
"Tk. (Contributed by Guilherme Polo; :issue:`2906`.)"
msgstr ""
":mod:`Tkinter` 模組現在接受選項的列表和元組，在將結果值傳遞給 Tcl/Tk "
"之前用空格分隔元素。 （由 Guilherme Polo 提供；:issue:`2906`。）"

#: ../../whatsnew/2.6.rst:2566
#, fuzzy
msgid ""
"The :mod:`turtle` module for turtle graphics was greatly enhanced by Gregor "
"Lingl.  New features in the module include:"
msgstr "Gregor Lingl 極大地增強了海龜圖形的 :mod:`turtle` 模組。該模組的新功能包括："

#: ../../whatsnew/2.6.rst:2569
#, fuzzy
msgid "Better animation of turtle movement and rotation."
msgstr "更好的烏龜移動和旋轉動畫。"

#: ../../whatsnew/2.6.rst:2570
#, fuzzy
msgid ""
"Control over turtle movement using the new :meth:`delay`, :meth:`tracer`, "
"and :meth:`speed` methods."
msgstr "使用新的 :meth:`delay`、:meth:`tracer` 和 :meth:`speed` 方法控制海龜移動。"

#: ../../whatsnew/2.6.rst:2572
#, fuzzy
msgid ""
"The ability to set new shapes for the turtle, and to define a new coordinate "
"system."
msgstr "能夠為海龜設定新的形狀，並定義新的坐標系。"

#: ../../whatsnew/2.6.rst:2574
#, fuzzy
msgid "Turtles now have an :meth:`undo()` method that can roll back actions."
msgstr "海龜現在有一個 :meth:`undo()` 方法可以回滾操作。"

#: ../../whatsnew/2.6.rst:2575
#, fuzzy
msgid ""
"Simple support for reacting to input events such as mouse and keyboard "
"activity, making it possible to write simple games."
msgstr "簡單支援對鼠標和鍵盤活動等輸入事件做出反應，從而可以編寫簡單的遊戲。"

#: ../../whatsnew/2.6.rst:2577
#, fuzzy
msgid ""
"A :file:`turtle.cfg` file can be used to customize the starting appearance "
"of the turtle's screen."
msgstr ":file:`turtle.cfg` 文件可用於自定義海龜屏幕的初始外觀。"

#: ../../whatsnew/2.6.rst:2579
#, fuzzy
msgid ""
"The module's docstrings can be replaced by new docstrings that have been "
"translated into another language."
msgstr "該模組的文檔字串可以替換為已翻譯成另一種語言的新文檔字串。"

#: ../../whatsnew/2.6.rst:2582
#, fuzzy
msgid "(:issue:`1513695`)"
msgstr "（ :issue:`1513695`）"

#: ../../whatsnew/2.6.rst:2584
#, fuzzy
msgid ""
"An optional ``timeout`` parameter was added to the :func:`urllib.urlopen` "
"function and the :class:`urllib.ftpwrapper` class constructor, as well as "
"the :func:`urllib2.urlopen` function.  The parameter specifies a timeout "
"measured in seconds.   For example::"
msgstr ""
"一個可選的 ``timeout`` 參數被新增到 :func:`urllib.urlopen` 函式和 "
":class:`urllib.ftpwrapper` 類構造函式，以及 :func:`urllib2.urlopen` "
"函式。該參數指定以秒為單位測量的超時。例如：："

#: ../../whatsnew/2.6.rst:2597
#, fuzzy
msgid "(Added by Facundo Batista.)"
msgstr "（由 Facundo Batista 新增。）"

#: ../../whatsnew/2.6.rst:2599
#, fuzzy
msgid ""
"The Unicode database provided by the :mod:`unicodedata` module has been "
"updated to version 5.1.0.  (Updated by Martin von Löwis; :issue:`3811`.)"
msgstr ""
":mod:`unicodedata` 模組提供的 Unicode 資料庫已更新至 5.1.0 版本。 （由 "
"Martin von Löwis 更新；:issue:`3811`。）"

#: ../../whatsnew/2.6.rst:2603
#, fuzzy
msgid ""
"The :mod:`warnings` module's :func:`formatwarning` and :func:`showwarning` "
"gained an optional *line* argument that can be used to supply the line of "
"source code.  (Added as part of :issue:`1631171`, which re-implemented part "
"of the :mod:`warnings` module in C code.)"
msgstr ""
":mod:`warnings` 模組的 :func:`formatwarning` 和 :func:`showwarning` "
"獲得了一個可選的 *line* 參數，可用於提供源程式碼行。 （作為 :issue:`1631171` "
"的一部分新增，它在 C 程式碼中重新實作了 :mod:`warnings` 模組的一部分。）"

#: ../../whatsnew/2.6.rst:2608
#, fuzzy
msgid ""
"A new function, :func:`catch_warnings`, is a context manager intended for "
"testing purposes that lets you temporarily modify the warning filters and "
"then restore their original values (:issue:`3781`)."
msgstr ""
"一個新函式 :func:`catch_warnings` "
"是一個用於測試目的的上下文管理器，它允許您臨時修改警告過濾器，"
"然後恢復它們的原始值 (:issue:`3781`)。"

#: ../../whatsnew/2.6.rst:2612
#, fuzzy
msgid ""
"The XML-RPC :class:`SimpleXMLRPCServer` and :class:`DocXMLRPCServer` classes "
"can now be prevented from immediately opening and binding to their socket by "
"passing ``False`` as the *bind_and_activate* constructor parameter.  This "
"can be used to modify the instance's :attr:`allow_reuse_address` attribute "
"before calling the :meth:`server_bind` and :meth:`server_activate` methods "
"to open the socket and begin listening for connections. (Contributed by "
"Peter Parente; :issue:`1599845`.)"
msgstr ""
"XML-RPC :class:`SimpleXMLRPCServer` 和 :class:`DocXMLRPCServer` "
"類現在可以通過將 ``False`` 作為 *bind_and_activate* "
"構造函式參數傳遞來阻止立即打開並綁定到它們的 socket 。這可用於在呼叫 "
"server_bind 和 server_activate 方法打開 socket 並開始偵聽連接之前修改實例的 "
"allow_reuse_address 屬性。 （由 Peter Parente 提供；:issue:`1599845`。）"

#: ../../whatsnew/2.6.rst:2621
#, fuzzy
msgid ""
":class:`SimpleXMLRPCServer` also has a :attr:`_send_traceback_header` "
"attribute; if true, the exception and formatted traceback are returned as "
"HTTP headers \"X-Exception\" and \"X-Traceback\".  This feature is for "
"debugging purposes only and should not be used on production servers because "
"the tracebacks might reveal passwords or other sensitive information.  "
"(Contributed by Alan McIntyre as part of his project for Google's Summer of "
"Code 2007.)"
msgstr ""
":class:`SimpleXMLRPCServer` 也有一個 :attr:`_send_traceback_header` "
"屬性；如果為真，則例外和格式化的回溯作為 HTTP 標頭 ``X-Exception`` "
"和 ``X-Traceback`` 回傳。此功能僅用於除錯目的，不應在生產伺服器上使用，因為回溯可"
"能會洩露密碼或其他敏感資訊。 （由 Alan McIntyre 作為他的 Google 2007 "
"年程式碼之夏項目的一部分貢獻。）"

#: ../../whatsnew/2.6.rst:2629
#, fuzzy
msgid ""
"The :mod:`xmlrpclib` module no longer automatically converts :class:"
"`datetime.date` and :class:`datetime.time` to the :class:`xmlrpclib."
"DateTime` type; the conversion semantics were not necessarily correct for "
"all applications.  Code using :mod:`xmlrpclib` should convert :class:`date` "
"and :class:`~datetime.time` instances. (:issue:`1330538`)  The code can also "
"handle dates before 1900 (contributed by Ralf Schmitt; :issue:`2014`) and 64-"
"bit integers represented by using ``<i8>`` in XML-RPC responses (contributed "
"by Riku Lindblad; :issue:`2985`)."
msgstr ""
":mod:`xmlrpclib` 模組不再自動將 :class:`datetime.date` 和 :class:`datetime."
"time` 轉換為 :class:`xmlrpclib.DateTime` "
"型別；轉換語義不一定對所有應用程式都是正確的。使用 :mod:`xmlrpclib` "
"的程式碼應該轉換 :class:`date` 和 :class:`~datetime.time` 實例。 "
"(:issue:`1330538`) 該程式碼還可以處理 1900 年之前的日期（由 Ralf Schmitt "
"提供；:issue:`2014`）和在 XML-RPC 響應中使用 ``<i8>`` 表示的 64 位整數（由 "
"Riku Lindblad 貢獻；:issue:`2985`)。"

#: ../../whatsnew/2.6.rst:2639
#, fuzzy
msgid ""
"The :mod:`zipfile` module's :class:`ZipFile` class now has :meth:`extract` "
"and :meth:`extractall` methods that will unpack a single file or all the "
"files in the archive to the current directory, or to a specified directory::"
msgstr ""
":mod:`zipfile` 模組的 :class:`ZipFile` 類現在有 :meth:`extract` 和 "
":meth:`extractall` "
"方法，可以將存檔中的單個文件或所有文件解壓到當前目錄，或者到指定目錄::"

#: ../../whatsnew/2.6.rst:2653
#, fuzzy
msgid "(Contributed by Alan McIntyre; :issue:`467924`.)"
msgstr "（由 Alan McIntyre 提供；:issue:`467924`。）"

#: ../../whatsnew/2.6.rst:2655
#, fuzzy
msgid ""
"The :meth:`open`, :meth:`read` and :meth:`extract` methods can now take "
"either a filename or a :class:`ZipInfo` object.  This is useful when an "
"archive accidentally contains a duplicated filename. (Contributed by Graham "
"Horler; :issue:`1775025`.)"
msgstr ""
":meth:`open`、:meth:`read` 和 :meth:`extract` 方法現在可以採用文件名或 "
":class:`ZipInfo` 物件。當存檔意外包含重複的文件名時，這很有用。 （由 Graham "
"Horler 提供；:issue:`1775025`。）"

#: ../../whatsnew/2.6.rst:2660
#, fuzzy
msgid ""
"Finally, :mod:`zipfile` now supports using Unicode filenames for archived "
"files.  (Contributed by Alexey Borzenkov; :issue:`1734346`.)"
msgstr ""
"最後，:mod:`zipfile` 現在支援對歸檔文件使用 Unicode 文件名。 （由 Alexey "
"Borzenkov 提供；:issue:`1734346`。）"

#: ../../whatsnew/2.6.rst:2667
#, fuzzy
msgid "The :mod:`ast` module"
msgstr ":mod:`ast` 模組"

#: ../../whatsnew/2.6.rst:2669
#, fuzzy
msgid ""
"The :mod:`ast` module provides an Abstract Syntax Tree representation of "
"Python code, and Armin Ronacher contributed a set of helper functions that "
"perform a variety of common tasks.  These will be useful for HTML templating "
"packages, code analyzers, and similar tools that process Python code."
msgstr ""
":mod:`ast` 模組提供了 Python 程式碼的抽象語法樹表示，Armin Ronacher "
"貢獻了一組執行各種常見任務的輔助函式。這些對於 HTML 模板包、"
"程式碼分析器和處理 Python 程式碼的類似工具很有用。"

#: ../../whatsnew/2.6.rst:2676
#, fuzzy
msgid ""
"The :func:`parse` function takes an expression and returns an AST. The :func:"
"`dump` function outputs a representation of a tree, suitable for debugging::"
msgstr ":func:`parse` 函式接受一個表達式並回傳一個 AST。 :func:`dump` "
"函式輸出樹的表示，適合除錯::"

#: ../../whatsnew/2.6.rst:2690
#, fuzzy
msgid "This outputs a deeply nested tree::"
msgstr "這會輸出一個深度嵌套的樹::"

#: ../../whatsnew/2.6.rst:2723
#, fuzzy
msgid ""
"The :func:`literal_eval` method takes a string or an AST representing a "
"literal expression, parses and evaluates it, and returns the resulting "
"value.  A literal expression is a Python expression containing only strings, "
"numbers, dictionaries, etc. but no statements or function calls.  If you "
"need to evaluate an expression but cannot accept the security risk of using "
"an :func:`eval` call, :func:`literal_eval` will handle it safely::"
msgstr ""
":func:`literal_eval` 方法採用表示文字表達式的字串或 "
"AST，對其進行解析和評估，然後回傳結果值。文字表達式是僅包含字串、數字、"
"字典等但不包含語句或函式呼叫的 Python 表達式。"
"如果您需要評估表達式但不能接受使用 :func:`eval` "
"呼叫的安全風險，:func:`literal_eval` 將安全地處理它::"

#: ../../whatsnew/2.6.rst:2739
#, fuzzy
msgid ""
"The module also includes :class:`NodeVisitor` and :class:`NodeTransformer` "
"classes for traversing and modifying an AST, and functions for common "
"transformations such as changing line numbers."
msgstr "該模組還包括用於遍歷和修改 AST 的 NodeVisitor 和 NodeTransformer "
"類，以及用於更改行號等常見轉換的函式。"

#: ../../whatsnew/2.6.rst:2747
#, fuzzy
msgid "The :mod:`future_builtins` module"
msgstr ":mod:`future_builtins` 模組"

#: ../../whatsnew/2.6.rst:2749
#, fuzzy
msgid ""
"Python 3.0 makes many changes to the repertoire of built-in functions, and "
"most of the changes can't be introduced in the Python 2.x series because "
"they would break compatibility. The :mod:`future_builtins` module provides "
"versions of these built-in functions that can be imported when writing 3.0-"
"compatible code."
msgstr ""
"Python 3.0 對內建函式庫進行了許多更改，並且大多數更改不能引入 Python 2.x "
"系列，因為它們會破壞相容性。 :mod:`future_builtins` "
"模組提供了這些內建函式的版本，可以在編寫 3.0 相容程式碼時導入這些版本。"

#: ../../whatsnew/2.6.rst:2756
#, fuzzy
msgid "The functions in this module currently include:"
msgstr "目前該模組中的功能包括："

#: ../../whatsnew/2.6.rst:2758
#, fuzzy
msgid ""
"``ascii(obj)``: equivalent to :func:`repr`.  In Python 3.0, :func:`repr` "
"will return a Unicode string, while :func:`ascii` will return a pure ASCII "
"bytestring."
msgstr ""
"``ascii(obj)``：等同於 :func:`repr`。在 Python 3.0 中，:func:`repr` "
"將回傳一個 Unicode 字串，而 :func:`ascii` 將回傳一個純 ASCII 位元組串。"

#: ../../whatsnew/2.6.rst:2762
#, fuzzy
msgid ""
"``filter(predicate, iterable)``, ``map(func, iterable1, ...)``: the 3.0 "
"versions return iterators, unlike the 2.x builtins which return lists."
msgstr ""
"``filter(predicate, iterable)``, ``map(func, iterable1, ...)``：3.0 "
"版本回傳疊代器，不像 2.x 內建函式回傳列表。"

#: ../../whatsnew/2.6.rst:2766
#, fuzzy
msgid ""
"``hex(value)``, ``oct(value)``: instead of calling the :meth:`__hex__` or :"
"meth:`__oct__` methods, these versions will call the :meth:`__index__` "
"method and convert the result to hexadecimal or octal.  :func:`oct` will use "
"the new ``0o`` notation for its result."
msgstr ""
"``hex(value)``, ``oct(value)``：這些版本將呼叫 __index__ "
"方法，而不是呼叫 :meth:`__hex__` 或 :meth:`__oct__` "
"方法，並且將結果轉換為十六進位或八進位。 :func:`oct` 將對其結果使用新的 "
"``0o`` 表示法。"

#: ../../whatsnew/2.6.rst:2775
#, fuzzy
msgid "The :mod:`json` module: JavaScript Object Notation"
msgstr ":mod:`json` 模組：JavaScript 物件表示法"

#: ../../whatsnew/2.6.rst:2777
#, fuzzy
msgid ""
"The new :mod:`json` module supports the encoding and decoding of Python "
"types in JSON (Javascript Object Notation). JSON is a lightweight "
"interchange format often used in web applications. For more information "
"about JSON, see http://www.json.org."
msgstr ""
"新的 :mod:`json` 模組支援 JSON（Javascript 物件表示法）中的 Python "
"型別的編碼和解碼。 JSON 是 Web 應用程式中經常使用的輕量級交換格式。有關 JSON "
"的更多資訊，請參閱 http://www.json.org。"

#: ../../whatsnew/2.6.rst:2782
#, fuzzy
msgid ""
":mod:`json` comes with support for decoding and encoding most built-in "
"Python types. The following example encodes and decodes a dictionary::"
msgstr ":mod:`json` 支援對大多數內建 Python "
"型別進行解碼和編碼。以下示例對字典進行編碼和解碼："

#: ../../whatsnew/2.6.rst:2793
#, fuzzy
msgid ""
"It's also possible to write your own decoders and encoders to support more "
"types. Pretty-printing of the JSON strings is also supported."
msgstr "也可以編寫自己的解碼器和編碼器以支援更多型別。還支援 JSON 字串的漂亮印出。"

#: ../../whatsnew/2.6.rst:2796
#, fuzzy
msgid ":mod:`json` (originally called simplejson) was written by Bob Ippolito."
msgstr ":mod:`json`（最初稱為 simplejson）由 Bob Ippolito 編寫。"

#: ../../whatsnew/2.6.rst:2803
#, fuzzy
msgid "The :mod:`plistlib` module: A Property-List Parser"
msgstr ":mod:`plistlib` 模組：屬性列表解析器"

#: ../../whatsnew/2.6.rst:2805
#, fuzzy
msgid ""
"The ``.plist`` format is commonly used on Mac OS X to store basic data types "
"(numbers, strings, lists, and dictionaries) by serializing them into an XML-"
"based format. It resembles the XML-RPC serialization of data types."
msgstr ""
"``.plist`` 格式通常用於 Mac OS X 上，通過將它們序列化為基於 XML "
"的格式來儲存基本資料型別（數字、字串、列表和字典）。它類似於資料型別的 XML-"
"RPC 序列化。"

#: ../../whatsnew/2.6.rst:2810
#, fuzzy
msgid ""
"Despite being primarily used on Mac OS X, the format has nothing Mac-"
"specific about it and the Python implementation works on any platform that "
"Python supports, so the :mod:`plistlib` module has been promoted to the "
"standard library."
msgstr ""
"儘管主要在 Mac OS X 上使用，但該格式並沒有特定於 Mac 的內容，並且 Python "
"實作可以在 Python 支援的任何平台上運行，因此 :mod:`plistlib` "
"模組已被提升為標準庫。"

#: ../../whatsnew/2.6.rst:2815
#, fuzzy
msgid "Using the module is simple::"
msgstr "使用該模組很簡單::"

#: ../../whatsnew/2.6.rst:2842
#, fuzzy
msgid "ctypes Enhancements"
msgstr "ctypes 增強功能"

#: ../../whatsnew/2.6.rst:2844
#, fuzzy
msgid ""
"Thomas Heller continued to maintain and enhance the :mod:`ctypes` module."
msgstr "Thomas Heller 繼續維護和增強 :mod:`ctypes` 模組。"

#: ../../whatsnew/2.6.rst:2847
#, fuzzy
msgid ""
":mod:`ctypes` now supports a :class:`c_bool` datatype that represents the "
"C99 ``bool`` type.  (Contributed by David Remahl; :issue:`1649190`.)"
msgstr ""
":mod:`ctypes` 現在支援表示 C99 ``bool`` 型別的 :class:`c_bool` 資料型別。 （"
"由 David Remahl 提供；:issue:`1649190`。）"

#: ../../whatsnew/2.6.rst:2851
#, fuzzy
msgid ""
"The :mod:`ctypes` string, buffer and array types have improved support for "
"extended slicing syntax, where various combinations of ``(start, stop, "
"step)`` are supplied. (Implemented by Thomas Wouters.)"
msgstr ""
":mod:`ctypes` 字串、緩衝區和數組型別改進了對擴充切片語法的支援，其中提供了``("
"start, stop, step)`` 的各種組合。 （由 Thomas Wouters 實施。）"

#: ../../whatsnew/2.6.rst:2858
#, fuzzy
msgid ""
"All :mod:`ctypes` data types now support :meth:`from_buffer` and :meth:"
"`from_buffer_copy` methods that create a ctypes instance based on a provided "
"buffer object.  :meth:`from_buffer_copy` copies the contents of the object, "
"while :meth:`from_buffer` will share the same memory area."
msgstr ""
"所有 :mod:`ctypes` 資料型別現在都支援 :meth:`from_buffer` 和 "
":meth:`from_buffer_copy` 方法，它們基於提供的緩衝區物件建立一個 ctypes 實例。"
" :meth:`from_buffer_copy` 複製物件的內容，而 :meth:`from_buffer` "
"將共享相同的記憶體區域。"

#: ../../whatsnew/2.6.rst:2865
#, fuzzy
msgid ""
"A new calling convention tells :mod:`ctypes` to clear the ``errno`` or Win32 "
"LastError variables at the outset of each wrapped call. (Implemented by "
"Thomas Heller; :issue:`1798`.)"
msgstr ""
"新的呼叫約定告訴 :mod:`ctypes` 在每個包裝呼叫開始時清除 ``errno`` 或 Win32 "
"LastError 變數。 （由 Thomas Heller 實施；:issue:`1798`。）"

#: ../../whatsnew/2.6.rst:2869
#, fuzzy
msgid ""
"You can now retrieve the Unix ``errno`` variable after a function call.  "
"When creating a wrapped function, you can supply ``use_errno=True`` as a "
"keyword parameter to the :func:`DLL` function and then call the module-level "
"methods :meth:`set_errno` and :meth:`get_errno` to set and retrieve the "
"error value."
msgstr ""
"您現在可以在函式呼叫後檢索 Unix ``errno`` 變數。建立包裝函式時，您可以提供 "
"``use_errno=True`` 作為 DLL 函式的關鍵字參數，然後呼叫模組級方法 "
":meth:`set_errno` 和 :meth:`get_errno`設定和檢索錯誤值。"

#: ../../whatsnew/2.6.rst:2875
#, fuzzy
msgid ""
"The Win32 LastError variable is similarly supported by the :func:`DLL`, :"
"func:`OleDLL`, and :func:`WinDLL` functions. You supply "
"``use_last_error=True`` as a keyword parameter and then call the module-"
"level methods :meth:`set_last_error` and :meth:`get_last_error`."
msgstr ""
":func:`DLL`、:func:`OleDLL` 和 :func:`WinDLL` 函式同樣支援 Win32 LastError "
"變數。您提供 ``use_last_error=True`` "
"作為關鍵字參數，然後呼叫模組級方法 :meth:`set_last_error` 和 "
":meth:`get_last_error`。"

#: ../../whatsnew/2.6.rst:2881
#, fuzzy
msgid ""
"The :func:`byref` function, used to retrieve a pointer to a ctypes instance, "
"now has an optional *offset* parameter that is a byte count that will be "
"added to the returned pointer."
msgstr ""
":func:`byref` 函式，用於檢索指向 ctypes 實例的指標，現在有一個可選的 *offset*"
" 參數，它是將新增到回傳指標的位元組數。"

#: ../../whatsnew/2.6.rst:2888
#, fuzzy
msgid "Improved SSL Support"
msgstr "改進的 SSL 支援"

#: ../../whatsnew/2.6.rst:2890
#, fuzzy
msgid ""
"Bill Janssen made extensive improvements to Python 2.6's support for the "
"Secure Sockets Layer by adding a new module, :mod:`ssl`, that's built atop "
"the `OpenSSL <https://www.openssl.org/>`__ library. This new module provides "
"more control over the protocol negotiated, the X.509 certificates used, and "
"has better support for writing SSL servers (as opposed to clients) in "
"Python.  The existing SSL support in the :mod:`socket` module hasn't been "
"removed and continues to work, though it will be removed in Python 3.0."
msgstr ""
"Bill Janssen 通過新增新模組 :mod:`ssl` 對 Python 2.6 "
"對安全 socket 層的支援進行了廣泛改進，該模組構建在 `OpenSSL <https://www."
"openssl.org/>`__ 庫之上.這個新模組對協商的協定、使用的 X.509 "
"證書提供更多控制，並且更好地支援用 Python 編寫 SSL 伺服器（相對於客戶端）。 "
":mod:`socket` 模組中現有的 SSL 支援沒有被移除並繼續工作，儘管它將在 Python "
"3.0 中被移除。"

#: ../../whatsnew/2.6.rst:2899
#, fuzzy
msgid ""
"To use the new module, you must first create a TCP connection in the usual "
"way and then pass it to the :func:`ssl.wrap_socket` function. It's possible "
"to specify whether a certificate is required, and to obtain certificate info "
"by calling the :meth:`getpeercert` method."
msgstr ""
"要使用新模組，您必須首先以通常的方式建立一個 TCP 連接，然後將其傳遞給 "
":func:`ssl.wrap_socket` 函式。可以指定是否需要證書，並通過呼叫 "
":meth:`getpeercert` 方法獲取證書資訊。"

#: ../../whatsnew/2.6.rst:2906
#, fuzzy
msgid "The documentation for the :mod:`ssl` module."
msgstr ":mod:`ssl` 模組的文檔。"

#: ../../whatsnew/2.6.rst:2911
#, fuzzy
msgid "Deprecations and Removals"
msgstr "棄用和刪除"

#: ../../whatsnew/2.6.rst:2913 ../../whatsnew/2.6.rst:3241
#, fuzzy
msgid ""
"String exceptions have been removed.  Attempting to use them raises a :exc:"
"`TypeError`."
msgstr "字串例外已被刪除。嘗試使用它們會引發 :exc:`TypeError`。"

#: ../../whatsnew/2.6.rst:2916
#, fuzzy
msgid ""
"Changes to the :class:`Exception` interface as dictated by :pep:`352` "
"continue to be made.  For 2.6, the :attr:`message` attribute is being "
"deprecated in favor of the :attr:`args` attribute."
msgstr ""
"繼續按照 :pep:`352` 的指示對 :class:`Exception` 介面進行更改。對於 2."
"6，:attr:`message` 屬性被棄用，取而代之的是 :attr:`args` 屬性。"

#: ../../whatsnew/2.6.rst:2921
#, fuzzy
msgid ""
"(3.0-warning mode) Python 3.0 will feature a reorganized standard library "
"that will drop many outdated modules and rename others. Python 2.6 running "
"in 3.0-warning mode will warn about these modules when they are imported."
msgstr ""
"（3.0-警告模式）Python 3.0 "
"將以重組的標準庫為特色，它將刪除許多過時的模組並重命名其他模組。運行在 3.0-"
"warning 模式下的 Python 2.6 將在導入這些模組時發出警告。"

#: ../../whatsnew/2.6.rst:2926
#, fuzzy
msgid ""
"The list of deprecated modules is: :mod:`audiodev`, :mod:`bgenlocations`, :"
"mod:`buildtools`, :mod:`bundlebuilder`, :mod:`Canvas`, :mod:`compiler`, :mod:"
"`dircache`, :mod:`dl`, :mod:`fpformat`, :mod:`gensuitemodule`, :mod:"
"`ihooks`, :mod:`imageop`, :mod:`imgfile`, :mod:`linuxaudiodev`, :mod:"
"`mhlib`, :mod:`mimetools`, :mod:`multifile`, :mod:`new`, :mod:`pure`, :mod:"
"`statvfs`, :mod:`sunaudiodev`, :mod:`test.testall`, and :mod:`toaiff`."
msgstr ""
"不推薦使用的模組列表是 :mod:`audiodev`, :mod:`bgenlocations`, "
":mod:`buildtools`, :mod:`bundlebuilder`, :mod:`Canvas`, :mod:`compiler`, : "
"mod:`dircache`, :mod:`dl`, :mod:`fpformat`, :mod:`gensuitemodule`, "
":mod:`ihooks`, :mod:`imageop`, :mod:`imgfile`, :mod :`linuxaudiodev`, "
":mod:`mhlib`, :mod:`mimetools`, :mod:`multifile`, :mod:`new`, :mod:`pure`, "
":mod:`statvfs`, :mod: `sunaudiodev`、:mod:`test.testall` 和 :mod:`toaiff`。"

#: ../../whatsnew/2.6.rst:2951
#, fuzzy
msgid "The :mod:`gopherlib` module has been removed."
msgstr ":mod:`gopherlib` 模組已被刪除。"

#: ../../whatsnew/2.6.rst:2953
#, fuzzy
msgid ""
"The :mod:`MimeWriter` module and :mod:`mimify` module have been deprecated; "
"use the :mod:`email` package instead."
msgstr ":mod:`MimeWriter` 模組和 :mod:`mimify` 模組已被棄用；請改用 :mod:`email` 包。"

#: ../../whatsnew/2.6.rst:2957
#, fuzzy
msgid ""
"The :mod:`md5` module has been deprecated; use the :mod:`hashlib` module "
"instead."
msgstr ":mod:`md5` 模組已被棄用；請改用 :mod:`hashlib` 模組。"

#: ../../whatsnew/2.6.rst:2960
#, fuzzy
msgid ""
"The :mod:`posixfile` module has been deprecated; :func:`fcntl.lockf` "
"provides better locking."
msgstr ":mod:`posixfile` 模組已被棄用； :func:`fcntl.lockf` 提供更好的鎖定。"

#: ../../whatsnew/2.6.rst:2963
#, fuzzy
msgid ""
"The :mod:`popen2` module has been deprecated; use the :mod:`subprocess` "
"module."
msgstr ":mod:`popen2` 模組已被棄用；使用 :mod:`subprocess` 模組。"

#: ../../whatsnew/2.6.rst:2966
#, fuzzy
msgid "The :mod:`rgbimg` module has been removed."
msgstr ":mod:`rgbimg` 模組已被刪除。"

#: ../../whatsnew/2.6.rst:2968
#, fuzzy
msgid ""
"The :mod:`sets` module has been deprecated; it's better to use the built-in :"
"class:`set` and :class:`frozenset` types."
msgstr ":mod:`sets` 模組已被棄用；最好使用內建的 :class:`set` 和 :class:`frozenset` "
"型別。"

#: ../../whatsnew/2.6.rst:2971
#, fuzzy
msgid ""
"The :mod:`sha` module has been deprecated; use the :mod:`hashlib` module "
"instead."
msgstr ":mod:`sha` 模組已被棄用；請改用 :mod:`hashlib` 模組。"

#: ../../whatsnew/2.6.rst:2979
#, fuzzy
msgid "Build and C API Changes"
msgstr "構建和 C API 更改"

#: ../../whatsnew/2.6.rst:2981
#, fuzzy
msgid "Changes to Python's build process and to the C API include:"
msgstr "Python 構建過程和 C API 的變化包括："

#: ../../whatsnew/2.6.rst:2983
#, fuzzy
msgid ""
"Python now must be compiled with C89 compilers (after 19 years!).  This "
"means that the Python source tree has dropped its own implementations of :c:"
"func:`memmove` and :c:func:`strerror`, which are in the C89 standard library."
msgstr ""
"Python 現在必須用 C89 編譯器編譯（19 年後！）。這意味著 Python "
"源程式碼樹已經刪除了它自己的 :c:func:`memmove` 和 :c:func:`strerror` 的實作，"
"它們在 C89 標準庫中。"

#: ../../whatsnew/2.6.rst:2988
#, fuzzy
msgid ""
"Python 2.6 can be built with Microsoft Visual Studio 2008 (version 9.0), and "
"this is the new default compiler.  See the :file:`PCbuild` directory for the "
"build files.  (Implemented by Christian Heimes.)"
msgstr ""
"Python 2.6 可以使用 Microsoft Visual Studio 2008（9.0 "
"版）構建，這是新的預設編譯器。構建文件見 :file:`PCbuild` 目錄。 （由 "
"Christian Heimes 實施。）"

#: ../../whatsnew/2.6.rst:2993
#, fuzzy
msgid ""
"On Mac OS X, Python 2.6 can be compiled as a 4-way universal build. The :"
"program:`configure` script can take a :option:`!--with-universal-archs=[32-"
"bit|64-bit|all]` switch, controlling whether the binaries are built for 32-"
"bit architectures (x86, PowerPC), 64-bit (x86-64 and PPC-64), or both. "
"(Contributed by Ronald Oussoren.)"
msgstr ""
"在 Mac OS X 上，Python 2.6 可以編譯為 4 路通用構建。 :program:`configure` "
"腳本可以使用 :option:`!--with-universal-archs=[32-bit|64-bit|all]` 開關，"
"控制二進位文件是否為 32 位架構構建（ x86、PowerPC）、64 位（x86-64 和 "
"PPC-64），或兩者兼而有之。 （由羅納德·奧索倫提供。）"

#: ../../whatsnew/2.6.rst:3000
#, fuzzy
msgid ""
"The BerkeleyDB module now has a C API object, available as ``bsddb.db."
"api``.   This object can be used by other C extensions that wish to use the :"
"mod:`bsddb` module for their own purposes. (Contributed by Duncan Grisby.)"
msgstr ""
"BerkeleyDB 模組現在有一個 C API 物件，可作為“bsddb.db.api”使用。"
"這個物件可以被其他希望使用 :mod:`bsddb` 模組的 C 擴充用於他們自己的目的。 "
"（由鄧肯·格里斯比提供。）"

#: ../../whatsnew/2.6.rst:3005
#, fuzzy
msgid ""
"The new buffer interface, previously described in `the PEP 3118 section "
"<#pep-3118-revised-buffer-protocol>`__, adds :c:func:`PyObject_GetBuffer` "
"and :c:func:`PyBuffer_Release`, as well as a few other functions."
msgstr ""
"之前在`PEP 3118 部分 <#pep-3118-revised-buffer-protocol>`__ "
"中描述的新緩衝區介面新增了:c:func:`PyObject_GetBuffer` "
"和:c:func:`PyBuffer_Release`，以及其他一些功能。"

#: ../../whatsnew/2.6.rst:3010
#, fuzzy
msgid ""
"Python's use of the C stdio library is now thread-safe, or at least as "
"thread-safe as the underlying library is.  A long-standing potential bug "
"occurred if one thread closed a file object while another thread was reading "
"from or writing to the object.  In 2.6 file objects have a reference count, "
"manipulated by the :c:func:`PyFile_IncUseCount` and :c:func:"
"`PyFile_DecUseCount` functions.  File objects can't be closed unless the "
"reference count is zero.  :c:func:`PyFile_IncUseCount` should be called "
"while the GIL is still held, before carrying out an I/O operation using the "
"``FILE *`` pointer, and :c:func:`PyFile_DecUseCount` should be called "
"immediately after the GIL is re-acquired. (Contributed by Antoine Pitrou and "
"Gregory P. Smith.)"
msgstr ""
"Python 對 C stdio 庫的使用現在是執行緒安全的，或者至少與底層庫一樣執行緒安全"
"。如果一個執行緒關閉一個文件物件而另一個執行緒正在讀取或寫入該物件，則會發生"
"一個長期存在的潛在錯誤。在 2.6 中，文件對像有一個引用計數，由 "
"PyFile_IncUseCount 和 PyFile_DecUseCount "
"函式操作。除非引用計數為零，否則無法關閉文件物件。 "
":c:func:`PyFile_IncUseCount` 應在 GIL 仍保留時呼叫，在使用 ``FILE *`` "
"指標執行 I/O 操作之前，並且 :c:func:`PyFile_DecUseCount` "
"應在之後立即呼叫重新獲取 GIL。 （由 Antoine Pitrou 和 Gregory P. Smith "
"提供。）"

#: ../../whatsnew/2.6.rst:3023
#, fuzzy
msgid ""
"Importing modules simultaneously in two different threads no longer "
"deadlocks; it will now raise an :exc:`ImportError`.  A new API function, :c:"
"func:`PyImport_ImportModuleNoBlock`, will look for a module in ``sys."
"modules`` first, then try to import it after acquiring an import lock.  If "
"the import lock is held by another thread, an :exc:`ImportError` is raised. "
"(Contributed by Christian Heimes.)"
msgstr ""
"在兩個不同的執行緒中同時導入模組不再死鎖；它現在會引發 :exc:`ImportError`。"
"一個新的 API 函式 :c:func:`PyImport_ImportModuleNoBlock` 將首先在 ``sys."
"modules`` "
"中查找模組，然後在獲取導入鎖後嘗試導入它。如果導入鎖由另一個執行緒持有，"
"則會引發 :exc:`ImportError`。 （由克里斯蒂安·海姆斯提供。）"

#: ../../whatsnew/2.6.rst:3031
#, fuzzy
msgid ""
"Several functions return information about the platform's floating-point "
"support.  :c:func:`PyFloat_GetMax` returns the maximum representable "
"floating point value, and :c:func:`PyFloat_GetMin` returns the minimum "
"positive value.  :c:func:`PyFloat_GetInfo` returns an object containing more "
"information from the :file:`float.h` file, such as ``\"mant_dig\"`` (number "
"of digits in the mantissa), ``\"epsilon\"`` (smallest difference between 1.0 "
"and the next largest value representable), and several others. (Contributed "
"by Christian Heimes; :issue:`1534`.)"
msgstr ""
"幾個函式回傳有關平台浮點支援的資訊。 :c:func:`PyFloat_GetMax` "
"回傳可表示的最大浮點值，而 :c:func:`PyFloat_GetMin` 回傳最小正值。 "
":c:func:`PyFloat_GetInfo` 回傳一個物件，其中包含來自 :file:`float.h` "
"文件的更多資訊，例如 ``\"mant_dig\"``（尾數中的位數）、``\"epsilon\"` `（1.0 "
"和下一個可表示的最大值之間的最小差異）和其他幾個。 （由 Christian Heimes "
"提供；:issue:`1534`。）"

#: ../../whatsnew/2.6.rst:3042
#, fuzzy
msgid ""
"C functions and methods that use :c:func:`PyComplex_AsCComplex` will now "
"accept arguments that have a :meth:`__complex__` method.  In particular, the "
"functions in the :mod:`cmath` module will now accept objects with this "
"method. This is a backport of a Python 3.0 change. (Contributed by Mark "
"Dickinson; :issue:`1675423`.)"
msgstr ""
"使用 :c:func:`PyComplex_AsCComplex` 的 C 函式和方法現在將接受具有 "
":meth:`__complex__` 方法的參數。特別是，cmath "
"模組中的函式現在將接受具有此方法的物件。這是 Python 3.0 更改的反向移植。 （"
"由 Mark Dickinson 提供；:issue:`1675423`。）"

#: ../../whatsnew/2.6.rst:3049
#, fuzzy
msgid ""
"Python's C API now includes two functions for case-insensitive string "
"comparisons, ``PyOS_stricmp(char*, char*)`` and ``PyOS_strnicmp(char*, "
"char*, Py_ssize_t)``. (Contributed by Christian Heimes; :issue:`1635`.)"
msgstr ""
"Python 的 C API "
"現在包括兩個用於不區分大小寫的字串比較的函式，``PyOS_stricmp(char*, char*)`` "
"和 ``PyOS_strnicmp(char*, char*, Py_ssize_t)``。 （由 Christian Heimes "
"提供；:issue:`1635`。）"

#: ../../whatsnew/2.6.rst:3054
#, fuzzy
msgid ""
"Many C extensions define their own little macro for adding integers and "
"strings to the module's dictionary in the ``init*`` function.  Python 2.6 "
"finally defines standard macros for adding values to a module, :c:macro:"
"`PyModule_AddStringMacro` and :c:macro:`PyModule_AddIntMacro()`.  "
"(Contributed by Christian Heimes.)"
msgstr ""
"許多 C 擴充定義了它們自己的小巨集，用於在 ``init*`` "
"函式中將整數和字串新增到模組的字典中。 Python 2.6 "
"最終定義了用於向模組新增值的標準巨集：:c:macro:`PyModule_AddStringMacro` "
"和:c:macro:`PyModule_AddIntMacro()`。 （由克里斯蒂安·海姆斯提供。）"

#: ../../whatsnew/2.6.rst:3061
#, fuzzy
msgid ""
"Some macros were renamed in both 3.0 and 2.6 to make it clearer that they "
"are macros, not functions.  :c:macro:`Py_Size()` became :c:macro:"
"`Py_SIZE()`, :c:macro:`Py_Type()` became :c:macro:`Py_TYPE()`, and :c:macro:"
"`Py_Refcnt()` became :c:macro:`Py_REFCNT()`. The mixed-case macros are still "
"available in Python 2.6 for backward compatibility. (:issue:`1629`)"
msgstr ""
"一些巨集在 3.0 和 2.6 中都被重命名，以更清楚地表明它們是巨集，而不是函式。 "
":c:macro:`Py_Size()` 變成了:c:macro:`Py_SIZE()`，:c:macro:`Py_Type()` "
"變成了:c:macro:`Py_TYPE()`，和:c:macro: `Py_Refcnt()` 變成了 "
":c:macro:`Py_REFCNT()`。為了向後相容，混合大小寫的巨集在 Python 2.6 "
"中仍然可用。 （ :issue:`1629`）"

#: ../../whatsnew/2.6.rst:3070
#, fuzzy
msgid ""
"Distutils now places C extensions it builds in a different directory when "
"running on a debug version of Python. (Contributed by Collin Winter; :issue:"
"`1530959`.)"
msgstr ""
"當在除錯版本的 Python 上運行時，Distutils 現在將它構建的 C "
"擴充放在不同的目錄中。 （由 Collin Winter 提供；:issue:`1530959`。）"

#: ../../whatsnew/2.6.rst:3074
#, fuzzy
msgid ""
"Several basic data types, such as integers and strings, maintain internal "
"free lists of objects that can be re-used.  The data structures for these "
"free lists now follow a naming convention: the variable is always named "
"``free_list``, the counter is always named ``numfree``, and a macro "
"``Py<typename>_MAXFREELIST`` is always defined."
msgstr ""
"一些基本資料型別，例如整數和字串，維護可以重複使用的物件的內部自由列表。這些"
"空閒列表的資料結構現在遵循命名約定：變數始終命名為“free_list”，計數器始終命名"
"為 ``numfree`` ，並且巨集“Py<typename>_MAXFREELIST”始終被定義."

#: ../../whatsnew/2.6.rst:3081
#, fuzzy
msgid ""
"A new Makefile target, \"make patchcheck\", prepares the Python source tree "
"for making a patch: it fixes trailing whitespace in all modified ``.py`` "
"files, checks whether the documentation has been changed, and reports "
"whether the :file:`Misc/ACKS` and :file:`Misc/NEWS` files have been updated. "
"(Contributed by Brett Cannon.)"
msgstr ""
"一個新的 Makefile 目標，“make patchcheck”，準備 Python 源程式碼樹來製作補丁："
"它修復所有修改過的 .py 文件中的尾隨空格，檢查文檔是否已更改，並報告 :file "
"是否： `Misc/ACKS` 和 :file:`Misc/NEWS` 文件已更新。 （由 Brett Cannon "
"提供。）"

#: ../../whatsnew/2.6.rst:3088
#, fuzzy
msgid ""
"Another new target, \"make profile-opt\", compiles a Python binary using "
"GCC's profile-guided optimization.  It compiles Python with profiling "
"enabled, runs the test suite to obtain a set of profiling results, and then "
"compiles using these results for optimization. (Contributed by Gregory P. "
"Smith.)"
msgstr ""
"另一個新目標“make profile-opt”使用 GCC 的配置文件引導最佳化編譯 Python "
"二進位文件。它在啟用分析的情況下編譯 Python，運行測試套件以獲得一組分析結果，"
"然後使用這些結果進行編譯以進行最佳化。 （由 Gregory P. Smith 提供。）"

#: ../../whatsnew/2.6.rst:3097
#, fuzzy
msgid "Port-Specific Changes: Windows"
msgstr "特定於端口的更改：Windows"

#: ../../whatsnew/2.6.rst:3099
#, fuzzy
msgid ""
"The support for Windows 95, 98, ME and NT4 has been dropped. Python 2.6 "
"requires at least Windows 2000 SP4."
msgstr "不再支援 Windows 95、98、ME 和 NT4。 Python 2.6 至少需要 Windows 2000 SP4。"

#: ../../whatsnew/2.6.rst:3102
#, fuzzy
msgid ""
"The new default compiler on Windows is Visual Studio 2008 (version 9.0). The "
"build directories for Visual Studio 2003 (version 7.1) and 2005 (version "
"8.0) were moved into the PC/ directory. The new :file:`PCbuild` directory "
"supports cross compilation for X64, debug builds and Profile Guided "
"Optimization (PGO). PGO builds are roughly 10% faster than normal builds.  "
"(Contributed by Christian Heimes with help from Amaury Forgeot d'Arc and "
"Martin von Löwis.)"
msgstr ""
"Windows 上新的預設編譯器是 Visual Studio 2008（9.0 版）。 Visual Studio "
"2003（7.1 版）和 2005（8.0 版）的構建目錄已移至 PC/ 目錄。新的 "
":file:`PCbuild` 目錄支援 X64 的交叉編譯、除錯構建和配置文件引導最佳化 (PGO)。"
" PGO 構建比普通構建快大約 10%。 （由 Christian Heimes 在 Amaury Forgeot "
"d'Arc 和 Martin von Löwis 的幫助下提供。）"

#: ../../whatsnew/2.6.rst:3110
#, fuzzy
msgid ""
"The :mod:`msvcrt` module now supports both the normal and wide char variants "
"of the console I/O API.  The :func:`getwch` function reads a keypress and "
"returns a Unicode value, as does the :func:`getwche` function.  The :func:"
"`putwch` function takes a Unicode character and writes it to the console. "
"(Contributed by Christian Heimes.)"
msgstr ""
":mod:`msvcrt` 模組現在支援控制台 I/O API 的普通字元和寬字元變體。 "
":func:`getwch` 函式讀取按鍵並回傳一個 Unicode 值， :func:`getwche` "
"函式也是如此。 :func:`putwch` 函式獲取一個 Unicode 字元並將其寫入控制台。 "
"（由克里斯蒂安·海姆斯提供。）"

#: ../../whatsnew/2.6.rst:3117
#, fuzzy
msgid ""
":func:`os.path.expandvars` will now expand environment variables in the form "
"\"%var%\", and \"~user\" will be expanded into the user's home directory "
"path.  (Contributed by Josiah Carlson; :issue:`957650`.)"
msgstr ""
":func:`os.path.expandvars` "
"現在將以“%var%”的形式展開環境變數，而“~user”將展開為使用者的主目錄路徑。 （"
"由 Josiah Carlson 提供；:issue:`957650`。）"

#: ../../whatsnew/2.6.rst:3121
#, fuzzy
msgid ""
"The :mod:`socket` module's socket objects now have an :meth:`ioctl` method "
"that provides a limited interface to the :c:func:`WSAIoctl` system interface."
msgstr ""
":mod:`socket` 模組的 socket 物件現在有一個 :meth:`ioctl` 方法，該方法為 "
":c:func:`WSAIoctl` 系統介面提供有限的介面。"

#: ../../whatsnew/2.6.rst:3125
#, fuzzy
msgid ""
"The :mod:`_winreg` module now has a function, :func:"
"`ExpandEnvironmentStrings`, that expands environment variable references "
"such as ``%NAME%`` in an input string.  The handle objects provided by this "
"module now support the context protocol, so they can be used in :keyword:"
"`with` statements. (Contributed by Christian Heimes.)"
msgstr ""
":mod:`_winreg` 模組現在有一個函式 "
":func:`ExpandEnvironmentStrings`，可以擴充輸入字串中的環境變數引用，例如 "
"``%NAME%``。該模組提供的句柄物件現在支援上下文協定，因此它們可以在 "
":keyword:`with` 語句中使用。 （由克里斯蒂安·海姆斯提供。）"

#: ../../whatsnew/2.6.rst:3132
#, fuzzy
msgid ""
":mod:`_winreg` also has better support for x64 systems, exposing the :func:"
"`DisableReflectionKey`, :func:`EnableReflectionKey`, and :func:"
"`QueryReflectionKey` functions, which enable and disable registry reflection "
"for 32-bit processes running on 64-bit systems. (:issue:`1753245`)"
msgstr ""
":mod:`_winreg` 還對 x64 系統提供了更好的支援，公開了 "
":func:`DisableReflectionKey`、:func:`EnableReflectionKey` 和 "
":func:`QueryReflectionKey` 函式，它們為 32 位行程啟用和禁用註冊表反射在 64 "
"位系統上運行。 （ :issue:`1753245`）"

#: ../../whatsnew/2.6.rst:3138
#, fuzzy
msgid ""
"The :mod:`msilib` module's :class:`Record` object gained :meth:`GetInteger` "
"and :meth:`GetString` methods that return field values as an integer or a "
"string. (Contributed by Floris Bruynooghe; :issue:`2125`.)"
msgstr ""
":mod:`msilib` 模組的 :class:`Record` 物件獲得了 :meth:`GetInteger` "
"和 :meth:`GetString` 方法，它們將欄位值作為整數或字串回傳。 （由 Floris "
"Bruynooghe 提供；:issue:`2125`。）"

#: ../../whatsnew/2.6.rst:3146
#, fuzzy
msgid "Port-Specific Changes: Mac OS X"
msgstr "特定於端口的更改：Mac OS X"

#: ../../whatsnew/2.6.rst:3148
#, fuzzy
msgid ""
"When compiling a framework build of Python, you can now specify the "
"framework name to be used by providing the :option:`!--with-framework-name=` "
"option to the :program:`configure` script."
msgstr ""
"在編譯 Python 的框架構建時，您現在可以通過向 :program:`configure` 腳本提供 "
":option:`!--with-framework-name=` 選項來指定要使用的框架名稱。"

#: ../../whatsnew/2.6.rst:3153
#, fuzzy
msgid ""
"The :mod:`macfs` module has been removed.  This in turn required the :func:"
"`macostools.touched` function to be removed because it depended on the :mod:"
"`macfs` module.  (:issue:`1490190`)"
msgstr ""
":mod:`macfs` 模組已被刪除。這反過來又需要刪除 :func:`macostools.touched` "
"函式，因為它依賴於 :mod:`macfs` 模組。 （ :issue:`1490190`）"

#: ../../whatsnew/2.6.rst:3157
#, fuzzy
msgid ""
"Many other Mac OS modules have been deprecated and will be removed in Python "
"3.0: :mod:`_builtinSuites`, :mod:`aepack`, :mod:`aetools`, :mod:`aetypes`, :"
"mod:`applesingle`, :mod:`appletrawmain`, :mod:`appletrunner`, :mod:"
"`argvemulator`, :mod:`Audio_mac`, :mod:`autoGIL`, :mod:`Carbon`, :mod:"
"`cfmfile`, :mod:`CodeWarrior`, :mod:`ColorPicker`, :mod:`EasyDialogs`, :mod:"
"`Explorer`, :mod:`Finder`, :mod:`FrameWork`, :mod:`findertools`, :mod:`ic`, :"
"mod:`icglue`, :mod:`icopen`, :mod:`macerrors`, :mod:`MacOS`, :mod:`macfs`, :"
"mod:`macostools`, :mod:`macresource`, :mod:`MiniAEFrame`, :mod:`Nav`, :mod:"
"`Netscape`, :mod:`OSATerminology`, :mod:`pimp`, :mod:`PixMapWrapper`, :mod:"
"`StdSuites`, :mod:`SystemEvents`, :mod:`Terminal`, and :mod:"
"`terminalcommand`."
msgstr ""
"許多其他 Mac OS 模組已被棄用，並將在 Python 3.0 中刪除：:mod:`_builtinSuites`"
"、:mod:`aepack`、:mod:`aetools`、:mod:`aetypes`、:mod:`applesingle` , "
":mod:`appletrawmain`, :mod:`appletrunner`, :mod:`argvemulator`, "
":mod:`Audio_mac`, :mod:`autoGIL`, :mod:`Carbon`, :mod:`cfmfile`, "
":mod:`CodeWarrior`, :mod:`ColorPicker`, :mod:`EasyDialogs`, :mod:`Explorer`, "
":mod:`Finder`, :mod:`FrameWork`, :mod:`findertools`, : mod:`ic`, "
":mod:`icglue`, :mod:`icopen`, :mod:`macerrors`, :mod:`MacOS`, :mod:`macfs`, "
":mod:`macostools`, :mod :`macresource`, :mod:`MiniAEFrame`, :mod:`Nav`, "
":mod:`Netscape`, :mod:`OSATerminology`, :mod:`pimp`, :mod:`PixMapWrapper`, "
":mod: `StdSuites`、:mod:`SystemEvents`、:mod:`Terminal` 和 "
":mod:`terminalcommand`。"

#: ../../whatsnew/2.6.rst:3200
#, fuzzy
msgid "Port-Specific Changes: IRIX"
msgstr "特定於端口的更改：IRIX"

#: ../../whatsnew/2.6.rst:3202
#, fuzzy
msgid ""
"A number of old IRIX-specific modules were deprecated and will be removed in "
"Python 3.0: :mod:`al` and :mod:`AL`, :mod:`cd`, :mod:`cddb`, :mod:"
"`cdplayer`, :mod:`CL` and :mod:`cl`, :mod:`DEVICE`, :mod:`ERRNO`, :mod:"
"`FILE`, :mod:`FL` and :mod:`fl`, :mod:`flp`, :mod:`fm`, :mod:`GET`, :mod:"
"`GLWS`, :mod:`GL` and :mod:`gl`, :mod:`IN`, :mod:`IOCTL`, :mod:`jpeg`, :mod:"
"`panelparser`, :mod:`readcd`, :mod:`SV` and :mod:`sv`, :mod:`torgb`, :mod:"
"`videoreader`, and :mod:`WAIT`."
msgstr ""
"許多舊的 IRIX 特定模組已被棄用，並將在 Python 3.0 中刪除：:mod:`al` 和:"
"mod:`AL`、:mod:`cd`、:mod:`cddb`、:mod:` cdplayer`、:mod:`CL` "
"和 :mod:`cl`、:mod:`DEVICE`、:mod:`ERRNO`、:mod:`FILE`、:mod:`FL` 和 :mod:`fl `"
", :mod:`flp`, :mod:`fm`, :mod:`GET`, :mod:`GLWS`, :mod:`GL` 和 :mod:`gl`, "
":mod:`IN` , :mod:`IOCTL`, :mod:`jpeg`, :mod:`panelparser`, :mod:`readcd`, "
":mod:`SV` 和 :mod:`sv`, :mod:`torgb`, :mod:`videoreader` 和 :mod:`WAIT`。"

#: ../../whatsnew/2.6.rst:3232
#, fuzzy
msgid "Porting to Python 2.6"
msgstr "移植到 Python 2.6"

#: ../../whatsnew/2.6.rst:3234
#, fuzzy
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code:"
msgstr "本節列出了之前描述的更改和其他可能需要更改程式碼的錯誤修復："

#: ../../whatsnew/2.6.rst:3237
#, fuzzy
msgid ""
"Classes that aren't supposed to be hashable should set ``__hash__ = None`` "
"in their definitions to indicate the fact."
msgstr "不應被可雜湊的類應在其定義中設定 ``__hash__ = None`` 以表明這一事實。"

#: ../../whatsnew/2.6.rst:3244
#, fuzzy
msgid ""
"The :meth:`__init__` method of :class:`collections.deque` now clears any "
"existing contents of the deque before adding elements from the iterable.  "
"This change makes the behavior match ``list.__init__()``."
msgstr ""
":class:`collections.deque` 的 :meth:`__init__` 方法現在在從 iterable "
"新增元素之前清除雙端隊列的任何現有內容。此更改使行為匹配 ``list."
"__init__()``。"

#: ../../whatsnew/2.6.rst:3249
#, fuzzy
msgid ""
":meth:`object.__init__` previously accepted arbitrary arguments and keyword "
"arguments, ignoring them.  In Python 2.6, this is no longer allowed and will "
"result in a :exc:`TypeError`.  This will affect :meth:`__init__` methods "
"that end up calling the corresponding method on :class:`object` (perhaps "
"through using :func:`super`). See :issue:`1683368` for discussion."
msgstr ""
":meth:`object.__init__` 以前接受任意參數和關鍵字參數，忽略它們。在 Python "
"2.6 中，不再允許這樣做，並且會導致 :exc:`TypeError`。這將影響 "
":meth:`__init__` 方法，這些方法最終呼叫 :class:`object` 上的相應方法（"
"可能通過使用 :func:`super`）。請參閱 :issue:`1683368` 進行討論。"

#: ../../whatsnew/2.6.rst:3256
#, fuzzy
msgid ""
"The :class:`Decimal` constructor now accepts leading and trailing whitespace "
"when passed a string.  Previously it would raise an :exc:`InvalidOperation` "
"exception.  On the other hand, the :meth:`create_decimal` method of :class:"
"`Context` objects now explicitly disallows extra whitespace, raising a :exc:"
"`ConversionSyntax` exception."
msgstr ""
":class:`Decimal` 構造函式現在在傳遞字串時接受前導和尾隨空格。以前它會引發 "
":exc:`InvalidOperation` 例外。另一方面，:class:`Context` 物件的 "
":meth:`create_decimal` 方法現在明確不允許額外的空格，從而引發 "
":exc:`ConversionSyntax` 例外。"

#: ../../whatsnew/2.6.rst:3263
#, fuzzy
msgid ""
"Due to an implementation accident, if you passed a file path to the built-"
"in  :func:`__import__` function, it would actually import the specified "
"file.  This was never intended to work, however, and the implementation now "
"explicitly checks for this case and raises an :exc:`ImportError`."
msgstr ""
"由於實作上的意外，如果您將文件路徑傳遞給內建的 :func:`__import__` "
"函式，它實際上會導入指定的文件。然而，這從來都不是為了工作，"
"現在的實作明確地檢查這種情況並引發 :exc:`ImportError`。"

#: ../../whatsnew/2.6.rst:3269
#, fuzzy
msgid ""
"C API: the :c:func:`PyImport_Import` and :c:func:`PyImport_ImportModule` "
"functions now default to absolute imports, not relative imports. This will "
"affect C extensions that import other modules."
msgstr ""
"C API：:c:func:`PyImport_Import` 和:c:func:`PyImport_ImportModule` "
"函式現在預設為絕對導入，而不是相對導入。這將影響導入其他模組的 C 擴充。"

#: ../../whatsnew/2.6.rst:3273
#, fuzzy
msgid ""
"C API: extension data types that shouldn't be hashable should define their "
"``tp_hash`` slot to :c:func:`PyObject_HashNotImplemented`."
msgstr ""
"C API：不應被可雜湊的擴充資料型別應該將它們的 ``tp_hash`` "
"槽定義為 :c:func:`PyObject_HashNotImplemented`。"

#: ../../whatsnew/2.6.rst:3277
#, fuzzy
msgid ""
"The :mod:`socket` module exception :exc:`socket.error` now inherits from :"
"exc:`IOError`.  Previously it wasn't a subclass of :exc:`StandardError` but "
"now it is, through :exc:`IOError`. (Implemented by Gregory P. Smith; :issue:"
"`1706815`.)"
msgstr ""
":mod:`socket` 模組例外 :exc:`socket.error` 現在繼承自 :exc:`IOError`。"
"以前它不是 :exc:`StandardError` 的子類別，但現在是 :exc:`IOError` 的子類別。 "
"（由 Gregory P. Smith 實施；:issue:`1706815`。）"

#: ../../whatsnew/2.6.rst:3282
#, fuzzy
msgid ""
"The :mod:`xmlrpclib` module no longer automatically converts :class:"
"`datetime.date` and :class:`datetime.time` to the :class:`xmlrpclib."
"DateTime` type; the conversion semantics were not necessarily correct for "
"all applications.  Code using :mod:`xmlrpclib` should convert :class:`date` "
"and :class:`~datetime.time` instances. (:issue:`1330538`)"
msgstr ""
":mod:`xmlrpclib` 模組不再自動將 :class:`datetime.date` 和 :class:`datetime."
"time` 轉換為 :class:`xmlrpclib.DateTime` "
"型別；轉換語義不一定對所有應用程式都是正確的。使用 :mod:`xmlrpclib` "
"的程式碼應該轉換 :class:`date` 和 :class:`~datetime.time` 實例。 "
"（ :issue:`1330538`）"

#: ../../whatsnew/2.6.rst:3289
#, fuzzy
msgid ""
"(3.0-warning mode) The :class:`Exception` class now warns when accessed "
"using slicing or index access; having :class:`Exception` behave like a tuple "
"is being phased out."
msgstr ""
"（3.0 警告模式）Exception 類現在在使用切片或索引訪問時發出警告；具有 "
":class:`Exception` 的行為就像一個元組正在被淘汰。"

#: ../../whatsnew/2.6.rst:3293
#, fuzzy
msgid ""
"(3.0-warning mode) inequality comparisons between two dictionaries or two "
"objects that don't implement comparison methods are reported as warnings.  "
"``dict1 == dict2`` still works, but ``dict1 < dict2`` is being phased out."
msgstr ""
"（3.0 "
"警告模式）兩個字典或兩個未實作比較方法的物件之間的不平等比較被報告為警告。 ``"
"dict1 == dict2`` 仍然有效，但是 ``dict1 < dict2`` 正在被淘汰。"

#: ../../whatsnew/2.6.rst:3298
#, fuzzy
msgid ""
"Comparisons between cells, which are an implementation detail of Python's "
"scoping rules, also cause warnings because such comparisons are forbidden "
"entirely in 3.0."
msgstr "單元格之間的比較是 Python 範圍規則的一個實作細節，也會導致警告，因為在 3.0 "
"中完全禁止此類比較。"

#: ../../whatsnew/2.6.rst:3308
msgid "Acknowledgements"
msgstr "致謝"

#: ../../whatsnew/2.6.rst:3310
#, fuzzy
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this article: "
"Georg Brandl, Steve Brown, Nick Coghlan, Ralph Corderoy, Jim Jewett, Kent "
"Johnson, Chris Lambacher,  Martin Michlmayr, Antoine Pitrou, Brian Warner."
msgstr ""
"作者要感謝以下人員為本文的各種草稿提供的建議、更正和幫助：Georg Brandl、"
"Steve Brown、Nick Coghlan、Ralph Corderoy、Jim Jewett、Kent Johnson、Chris "
"Lambacher、Martin Michlmayr、Antoine Pitrou、布賴恩·華納。"

#~ msgid "`Sphinx <http://sphinx-doc.org/>`__"
#~ msgstr "`Sphinx <http://sphinx-doc.org/>`__"
