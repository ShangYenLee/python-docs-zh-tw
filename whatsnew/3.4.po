# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-15 20:43+0000\n"
"PO-Revision-Date: 2018-05-23 16:20+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.4.rst:3
msgid "What's New In Python 3.4"
msgstr "Python 3.4 有什麼新功能"

#: ../../whatsnew/3.4.rst:0
msgid "Author"
msgstr "作者"

#: ../../whatsnew/3.4.rst:5
msgid "R. David Murray <rdmurray@bitdance.com> (Editor)"
msgstr "R. David Murray <rdmurray@bitdance.com> （編輯者）"

#: ../../whatsnew/3.4.rst:63
#, fuzzy
msgid ""
"This article explains the new features in Python 3.4, compared to 3.3. "
"Python 3.4 was released on March 16, 2014.  For full details, see the "
"`changelog <https://docs.python.org/3.4/whatsnew/changelog.html>`_."
msgstr ""
"本文介紹了 Python 3.4 與 3.3 相比的新功能。 Python 3.4 於 2014 年 3 月 16 "
"日發布。有關完整詳細資訊，請參閱`變更日誌 <https://docs.python.org/3.4/"
"whatsnew/changelog.html>`_。"

#: ../../whatsnew/3.4.rst:70
#, fuzzy
msgid ":pep:`429` -- Python 3.4 Release Schedule"
msgstr ":pep:`429` -- Python 3.4 發佈時間表"

#: ../../whatsnew/3.4.rst:75
#, fuzzy
msgid "Summary -- Release Highlights"
msgstr "總結——發布亮點"

#: ../../whatsnew/3.4.rst:80
#, fuzzy
msgid "New syntax features:"
msgstr "新的語法特性："

#: ../../whatsnew/3.4.rst:82
#, fuzzy
msgid "No new syntax features were added in Python 3.4."
msgstr "Python 3.4 中沒有新增新的語法功能。"

#: ../../whatsnew/3.4.rst:84
#, fuzzy
msgid "Other new features:"
msgstr "其他新功能："

#: ../../whatsnew/3.4.rst:86
#, fuzzy
msgid ":ref:`pip should always be available <whatsnew-pep-453>` (:pep:`453`)."
msgstr ":ref:`pip 應該始終可用 <whatsnew-pep-453>` (:pep:`453`)。"

#: ../../whatsnew/3.4.rst:87
#, fuzzy
msgid ""
":ref:`Newly created file descriptors are non-inheritable <whatsnew-pep-446>` "
"(:pep:`446`)."
msgstr ":ref:`新建立的文件描述器是不可繼承的 <whatsnew-pep-446>` (:pep:`446`)。"

#: ../../whatsnew/3.4.rst:89
#, fuzzy
msgid ""
"command line option for :ref:`isolated mode <whatsnew-isolated-mode>` (:"
"issue:`16499`)."
msgstr ":ref:`isolated mode <whatsnew-isolated-mode>` 的命令列選項 (:issue:`16499`)。"

#: ../../whatsnew/3.4.rst:91
#, fuzzy
msgid ""
":ref:`improvements in the handling of codecs <codec-handling-improvements>` "
"that are not text encodings (multiple issues)."
msgstr ":ref:`處理非文本編碼的編解碼器 <codec-handling-improvements>` "
"的改進（多個問題）。"

#: ../../whatsnew/3.4.rst:93
#, fuzzy
msgid ""
":ref:`A ModuleSpec Type <whatsnew-pep-451>` for the Import System (:pep:"
"`451`).  (Affects importer authors.)"
msgstr ""
":ref:`A ModuleSpec Type <whatsnew-pep-451>` 用於導入系統 (:pep:`451`)。 "
"（影響進口商作者。）"

#: ../../whatsnew/3.4.rst:95
#, fuzzy
msgid ""
"The :mod:`marshal` format has been made :ref:`more compact and efficient "
"<whatsnew-marshal-3>` (:issue:`16475`)."
msgstr ":mod:`marshal` 格式變得更緊湊和高效 <whatsnew-marshal-3>` (:issue:`16475`)。"

#: ../../whatsnew/3.4.rst:98
#, fuzzy
msgid "New library modules:"
msgstr "新的庫模組："

#: ../../whatsnew/3.4.rst:100
#, fuzzy
msgid ""
":mod:`asyncio`: :ref:`New provisional API for asynchronous IO <whatsnew-"
"asyncio>` (:pep:`3156`)."
msgstr ""
":mod:`asyncio`: :ref:`非同步 IO 的新臨時 API <whatsnew-asyncio>` "
"(:pep:`3156`)。"

#: ../../whatsnew/3.4.rst:102
#, fuzzy
msgid ""
":mod:`ensurepip`: :ref:`Bootstrapping the pip installer <whatsnew-"
"ensurepip>` (:pep:`453`)."
msgstr ":mod:`ensurepip`: :ref:`引導 pip 安裝程式 <whatsnew-ensurepip>` "
"(:pep:`453`)。"

#: ../../whatsnew/3.4.rst:104
#, fuzzy
msgid ""
":mod:`enum`: :ref:`Support for enumeration types <whatsnew-enum>` (:pep:"
"`435`)."
msgstr ":mod:`enum`: :ref:`支援枚舉型別 <whatsnew-enum>` (:pep:`435`)。"

#: ../../whatsnew/3.4.rst:106
#, fuzzy
msgid ""
":mod:`pathlib`: :ref:`Object-oriented filesystem paths <whatsnew-pathlib>` (:"
"pep:`428`)."
msgstr ":mod:`pathlib`: :ref:`面向物件的文件系統路徑 <whatsnew-pathlib>` "
"(:pep:`428`)。"

#: ../../whatsnew/3.4.rst:108
#, fuzzy
msgid ""
":mod:`selectors`: :ref:`High-level and efficient I/O multiplexing <whatsnew-"
"selectors>`, built upon the :mod:`select` module primitives (part of :pep:"
"`3156`)."
msgstr ""
":mod:`selectors`: :ref:`高階高效的 I/O 多路復用 <whatsnew-selectors>`，"
"建立在 :mod:`select` 模組原語（部分 :pep:`3156`）之上。"

#: ../../whatsnew/3.4.rst:111
#, fuzzy
msgid ""
":mod:`statistics`: A basic :ref:`numerically stable statistics library "
"<whatsnew-statistics>` (:pep:`450`)."
msgstr ""
":mod:`statistics`：一個基本的 :ref:`數值穩定統計庫 <whatsnew-statistics>` "
"(:pep:`450`)。"

#: ../../whatsnew/3.4.rst:113
#, fuzzy
msgid ""
":mod:`tracemalloc`: :ref:`Trace Python memory allocations <whatsnew-"
"tracemalloc>` (:pep:`454`)."
msgstr ""
":mod:`tracemalloc`: :ref:`跟踪 Python 記憶體分配 <whatsnew-tracemalloc>` "
"(:pep:`454`)。"

#: ../../whatsnew/3.4.rst:116
#, fuzzy
msgid "Significantly improved library modules:"
msgstr "顯著改進的庫模組："

#: ../../whatsnew/3.4.rst:118
#, fuzzy
msgid ""
":ref:`Single-dispatch generic functions <whatsnew-singledispatch>` in :mod:"
"`functools` (:pep:`443`)."
msgstr ""
":ref:`single-dispatch generic functions <whatsnew-singledispatch>` in "
":mod:`functools` (:pep:`443`)。"

#: ../../whatsnew/3.4.rst:120
#, fuzzy
msgid ""
"New :mod:`pickle` :ref:`protocol 4 <whatsnew-protocol-4>` (:pep:`3154`)."
msgstr "新 :mod:`pickle` :ref:`protocol 4 <whatsnew-protocol-4>` (:pep:`3154`)。"

#: ../../whatsnew/3.4.rst:121
#, fuzzy
msgid ""
":mod:`multiprocessing` now has :ref:`an option to avoid using os.fork on "
"Unix <whatsnew-multiprocessing-no-fork>` (:issue:`8713`)."
msgstr ""
":mod:`multiprocessing` 現在有一個選項來避免在 Unix 上使用 os.fork <whatsnew-"
"multiprocessing-no-fork>` (:issue:`8713`)。"

#: ../../whatsnew/3.4.rst:123
#, fuzzy
msgid ""
":mod:`email` has a new submodule, :mod:`~email.contentmanager`, and a new :"
"mod:`~email.message.Message` subclass (:class:`~email.contentmanager."
"EmailMessage`) that :ref:`simplify MIME handling "
"<whatsnew_email_contentmanager>` (:issue:`18891`)."
msgstr ""
":mod:`email` 有一個新的子模組 :mod:`~email.contentmanager` 和一個新的 "
":mod:`~email.message.Message` 子類別 (:class:`~email.contentmanager."
"EmailMessage`) :ref:`簡化 MIME 處理 "
"<whatsnew_email_contentmanager>`（ :issue:`18891`）。"

#: ../../whatsnew/3.4.rst:127
#, fuzzy
msgid ""
"The :mod:`inspect` and :mod:`pydoc` modules are now capable of correct "
"introspection of a much wider variety of callable objects, which improves "
"the output of the Python :func:`help` system."
msgstr ""
":mod:`inspect` 和 :mod:`pydoc` 模組現在能夠正確內省更廣泛的可呼叫物件，"
"這改進了 Python :func:`help` 系統的輸出。"

#: ../../whatsnew/3.4.rst:130
#, fuzzy
msgid "The :mod:`ipaddress` module API has been declared stable"
msgstr ":mod:`ipaddress` 模組 API 已聲明穩定"

#: ../../whatsnew/3.4.rst:132
#, fuzzy
msgid "Security improvements:"
msgstr "安全改進："

#: ../../whatsnew/3.4.rst:134
#, fuzzy
msgid ""
":ref:`Secure and interchangeable hash algorithm <whatsnew-pep-456>` (:pep:"
"`456`)."
msgstr ":ref:`安全且可互換的雜湊演算法 <whatsnew-pep-456>` (:pep:`456`)。"

#: ../../whatsnew/3.4.rst:136
#, fuzzy
msgid ""
":ref:`Make newly created file descriptors non-inheritable <whatsnew-"
"pep-446>` (:pep:`446`) to avoid leaking file descriptors to child processes."
msgstr ":ref:`使新建立的文件描述器不可繼承 <whatsnew-pep-446>` (:pep:`446`) "
"以避免將文件描述器洩漏給子行程。"

#: ../../whatsnew/3.4.rst:138
#, fuzzy
msgid ""
"New command line option for :ref:`isolated mode <whatsnew-isolated-mode>`, (:"
"issue:`16499`)."
msgstr ":ref:`isolated mode <whatsnew-isolated-mode>` "
"的新命令列選項，(:issue:`16499`)。"

#: ../../whatsnew/3.4.rst:140
#, fuzzy
msgid ""
":mod:`multiprocessing` now has :ref:`an option to avoid using os.fork on "
"Unix <whatsnew-multiprocessing-no-fork>`.  *spawn* and *forkserver* are more "
"secure because they avoid sharing data with child processes."
msgstr ""
":mod:`multiprocessing` 現在有一個選項來避免在 Unix 上使用 os.fork <whatsnew-"
"multiprocessing-no-fork>`。 *spawn* 和 *forkserver* "
"更安全，因為它們避免與子行程共享資料。"

#: ../../whatsnew/3.4.rst:143
#, fuzzy
msgid ""
":mod:`multiprocessing` child processes on Windows no longer inherit all of "
"the parent's inheritable handles, only the necessary ones."
msgstr "Windows 上的 :mod:`multiprocessing` "
"子行程不再繼承父行程的所有可繼承句柄，僅繼承必要的句柄。"

#: ../../whatsnew/3.4.rst:145
#, fuzzy
msgid ""
"A new :func:`hashlib.pbkdf2_hmac` function provides the `PKCS#5 password-"
"based key derivation function 2 <https://en.wikipedia.org/wiki/PBKDF2>`_."
msgstr ""
"一個新的 :func:`hashlib.pbkdf2_hmac` 函式提供了`PKCS#5 "
"基於密碼的密鑰派生函式 2 <https://en.wikipedia.org/wiki/PBKDF2>`_。"

#: ../../whatsnew/3.4.rst:148
#, fuzzy
msgid ":ref:`TLSv1.1 and TLSv1.2 support <whatsnew-tls-11-12>` for :mod:`ssl`."
msgstr ":ref:`TLSv1.1 和 TLSv1.2 支援 <whatsnew-tls-11-12>` for :mod:`ssl`。"

#: ../../whatsnew/3.4.rst:149
#, fuzzy
msgid ""
":ref:`Retrieving certificates from the Windows system cert store support "
"<whatsnew34-win-cert-store>` for :mod:`ssl`."
msgstr ""
":ref:`從 Windows 系統證書庫中檢索證書支援 <whatsnew34-win-cert-store>` for "
":mod:`ssl`。"

#: ../../whatsnew/3.4.rst:151
#, fuzzy
msgid ""
":ref:`Server-side SNI (Server Name Indication) support <whatsnew34-sni>` "
"for :mod:`ssl`."
msgstr ":ref:`伺服器端 SNI（伺服器名稱指示）支援 <whatsnew34-sni>` for :mod:`ssl`。"

#: ../../whatsnew/3.4.rst:153
#, fuzzy
msgid ""
"The :class:`ssl.SSLContext` class has a :ref:`lot of improvements "
"<whatsnew34-sslcontext>`."
msgstr ":class:`ssl.SSLContext` 類有很多改進 <whatsnew34-sslcontext>`。"

#: ../../whatsnew/3.4.rst:155
#, fuzzy
msgid ""
"All modules in the standard library that support SSL now support server "
"certificate verification, including hostname matching (:func:`ssl."
"match_hostname`) and CRLs (Certificate Revocation lists, see :func:`ssl."
"SSLContext.load_verify_locations`)."
msgstr ""
"標準庫中支援 SSL "
"的所有模組現在都支援伺服器證書驗證，包括主機名匹配（:func:`ssl."
"match_hostname`）和 CRL（證書吊銷列表，請參閱 :func:`ssl.SSLContext."
"load_verify_locations`）。"

#: ../../whatsnew/3.4.rst:160
#, fuzzy
msgid "CPython implementation improvements:"
msgstr "CPython 實作改進："

#: ../../whatsnew/3.4.rst:162
#, fuzzy
msgid ":ref:`Safe object finalization <whatsnew-pep-442>` (:pep:`442`)."
msgstr ":ref:`安全物件終結 <whatsnew-pep-442>` (:pep:`442`)。"

#: ../../whatsnew/3.4.rst:163
#, fuzzy
msgid ""
"Leveraging :pep:`442`, in most cases :ref:`module globals are no longer set "
"to None during finalization <whatsnew-pep-442>` (:issue:`18214`)."
msgstr ""
"利用 :pep:`442`，在大多數情況下 :ref:`module globals 在完成 <whatsnew-"
"pep-442>` 期間不再設定為 None (:issue:`18214`)。"

#: ../../whatsnew/3.4.rst:165
#, fuzzy
msgid ":ref:`Configurable memory allocators <whatsnew-pep-445>` (:pep:`445`)."
msgstr ":ref:`可配置記憶體分配器 <whatsnew-pep-445>` (:pep:`445`)。"

#: ../../whatsnew/3.4.rst:166
#, fuzzy
msgid ":ref:`Argument Clinic <whatsnew-pep-436>` (:pep:`436`)."
msgstr ":ref:`Argument Clinic <whatsnew-pep-436>` (:pep:`436`)。"

#: ../../whatsnew/3.4.rst:168
#, fuzzy
msgid ""
"Please read on for a comprehensive list of user-facing changes, including "
"many other smaller improvements, CPython optimizations, deprecations, and "
"potential porting issues."
msgstr "請繼續閱讀以獲取面向使用者的更改的完整列表，包括許多其他較小的改進、CPython "
"最佳化、棄用和潛在的移植問題。"

#: ../../whatsnew/3.4.rst:175
#, fuzzy
msgid "New Features"
msgstr "新功能"

#: ../../whatsnew/3.4.rst:180
#, fuzzy
msgid "PEP 453: Explicit Bootstrapping of PIP in Python Installations"
msgstr "PEP 453：Python 安裝中 PIP 的顯式引導"

#: ../../whatsnew/3.4.rst:183
#, fuzzy
msgid "Bootstrapping pip By Default"
msgstr "預設引導 pip"

#: ../../whatsnew/3.4.rst:185
#, fuzzy
msgid ""
"The new :mod:`ensurepip` module (defined in :pep:`453`) provides a standard "
"cross-platform mechanism to bootstrap the pip installer into Python "
"installations and virtual environments. The version of ``pip`` included with "
"Python 3.4.0 is ``pip`` 1.5.4, and future 3.4.x maintenance releases will "
"update the bundled version to the latest version of ``pip`` that is "
"available at the time of creating the release candidate."
msgstr ""
"新的 :mod:`ensurepip` 模組（在 :pep:`453` "
"中定義）提供了一種標準的跨平台機制，可以將 pip 安裝程式引導到 Python "
"安裝和虛擬環境中。 Python 3.4.0 中包含的 ``pip`` 版本是 ``pip`` 1.5.4，"
"未來的 3.4.x 維護版本會將捆綁版本更新為最新版本的 "
"``pip``，可在建立發布候選的時間。"

#: ../../whatsnew/3.4.rst:192
#, fuzzy
msgid ""
"By default, the commands ``pipX`` and ``pipX.Y`` will be installed on all "
"platforms (where X.Y stands for the version of the Python installation), "
"along with the ``pip`` Python package and its dependencies. On Windows and "
"in virtual environments on all platforms, the unversioned ``pip`` command "
"will also be installed. On other platforms, the system wide unversioned "
"``pip`` command typically refers to the separately installed Python 2 "
"version."
msgstr ""
"預設情況下，命令 ``pipX`` 和 ``pipX.Y`` 將安裝在所有平台上（其中 X.Y 代表 "
"Python 安裝的版本），以及 ``pip`` Python 包及其依賴項.在 Windows 和所有平台上"
"的虛擬環境中，還將安裝未版本化的 ``pip``命令。在其他平台上，系統範圍內未版本化的"
" ``pip``命令通常指的是單獨安裝的 Python 2 版本。"

#: ../../whatsnew/3.4.rst:200
#, fuzzy
msgid ""
"The ``pyvenv`` command line utility and the :mod:`venv` module make use of "
"the :mod:`ensurepip` module to make ``pip`` readily available in virtual "
"environments. When using the command line utility, ``pip`` is installed by "
"default, while when using the :mod:`venv` module :ref:`venv-api` "
"installation of ``pip`` must be requested explicitly."
msgstr ""
"``pyvenv`` 命令列實用程式和 :mod:`venv` 模組利用 :mod:`ensurepip` 模組使 "
"``pip`` 在虛擬環境中隨時可用。使用命令列實用程式時，預設安裝 ``pip``，而使用 "
":mod:`venv` 模組 :ref:`venv-api` 時必須明確要求安裝 ``pip``。"

#: ../../whatsnew/3.4.rst:206
#, fuzzy
msgid ""
"For CPython :ref:`source builds on POSIX systems <building-python-on-unix>`, "
"the ``make install`` and ``make altinstall`` commands bootstrap ``pip`` by "
"default.  This behaviour can be controlled through configure options, and "
"overridden through Makefile options."
msgstr ""
"對於 CPython :ref:`source builds on POSIX systems <building-python-on-"
"unix>`，``make install`` 和 ``make altinstall`` 命令預設引導 "
"``pip``。此行為可以通過配置選項控制，並通過 Makefile 選項覆蓋。"

#: ../../whatsnew/3.4.rst:211
#, fuzzy
msgid ""
"On Windows and Mac OS X, the CPython installers now default to installing "
"``pip`` along with CPython itself (users may opt out of installing it during "
"the installation process). Window users will need to opt in to the automatic "
"``PATH`` modifications to have ``pip`` available from the command line by "
"default, otherwise it can still be accessed through the Python launcher for "
"Windows as ``py -m pip``."
msgstr ""
"在 Windows 和 Mac OS X 上，CPython 安裝程式現在預設安裝 ``pip`` 和 CPython "
"本身（使用者可以在安裝過程中選擇不安裝它）。 Windows "
"使用者將需要選擇自動修改 ``PATH`` 以在預設情況下從命令列獲得 ``pip``，"
"否則它仍然可以通過 Windows 的 Python 啟動器訪問，如 ``py -m pip ``。"

#: ../../whatsnew/3.4.rst:218
#, fuzzy
msgid ""
"As `discussed in the PEP`__, platform packagers may choose not to install "
"these commands by default, as long as, when invoked, they provide clear and "
"simple directions on how to install them on that platform (usually using the "
"system package manager)."
msgstr ""
"正如`在 PEP`__ 中討論的那樣，平台打包者可以選擇不預設安裝這些命令，只要在呼叫"
"時提供關於如何在該平台上安裝它們的清晰簡單的說明（通常使用系統包管理器） ."

#: ../../whatsnew/3.4.rst:227
#, fuzzy
msgid ""
"To avoid conflicts between parallel Python 2 and Python 3 installations, "
"only the versioned ``pip3`` and ``pip3.4`` commands are bootstrapped by "
"default when ``ensurepip`` is invoked directly - the ``--default-pip`` "
"option is needed to also request the unversioned ``pip`` command. ``pyvenv`` "
"and the Windows installer ensure that the unqualified ``pip`` command is "
"made available in those environments, and ``pip`` can always be invoked via "
"the ``-m`` switch rather than directly to avoid ambiguity on systems with "
"multiple Python installations."
msgstr ""
"為避免並行 Python 2 和 Python 3 安裝之間的衝突，當直接呼叫 ensurepip 時，"
"預設情況下僅引導版本化的 ``pip3`` 和 ``pip3.4`` 命令 - ``--default-還需要 "
"pip 選項來請求未版本化的 ``pip`` 命令。 ``pyvenv`` 和 Windows "
"安裝程式確保非限定的 ``pip`` 命令在這些環境中可用，並且 ``pip`` 總是可以通過 "
"``-m`` 開關呼叫而不是直接呼叫以避免具有多個 Python 安裝的系統上的歧義。"

#: ../../whatsnew/3.4.rst:238
#, fuzzy
msgid "Documentation Changes"
msgstr "文檔更改"

#: ../../whatsnew/3.4.rst:240
#, fuzzy
msgid ""
"As part of this change, the :ref:`installing-index` and :ref:`distributing-"
"index` sections of the documentation have been completely redesigned as "
"short getting started and FAQ documents. Most packaging documentation has "
"now been moved out to the Python Packaging Authority maintained `Python "
"Packaging User Guide <https://packaging.python.org>`__ and the documentation "
"of the individual projects."
msgstr ""
"作為此更改的一部分，文檔的 :ref:`installing-index` 和 :ref:`distributing-"
"index` 部分已完全重新設計為簡短入門和常見問題解答文檔。"
"大多數打包文檔現在已移至 Python Packaging Authority 維護的`Python Packaging "
"User Guide <https://packaging.python.org>`__ 和各個項目的文檔中。"

#: ../../whatsnew/3.4.rst:248
#, fuzzy
msgid ""
"However, as this migration is currently still incomplete, the legacy "
"versions of those guides remaining available as :ref:`install-index` and :"
"ref:`distutils-index`."
msgstr ""
"但是，由於此遷移目前仍未完成，這些指南的舊版本仍可作為 :ref:`install-index` "
"和 :ref:`distutils-index` 使用。"

#: ../../whatsnew/3.4.rst:255
#, fuzzy
msgid ":pep:`453` -- Explicit bootstrapping of pip in Python installations"
msgstr ":pep:`453` -- 在 Python 安裝中顯式引導 pip"

#: ../../whatsnew/3.4.rst:255
#, fuzzy
msgid ""
"PEP written by Donald Stufft and Nick Coghlan, implemented by Donald Stufft, "
"Nick Coghlan, Martin von Löwis and Ned Deily."
msgstr ""
"PEP 由 Donald Stufft 和 Nick Coghlan 編寫，由 Donald Stufft、Nick Coghlan、"
"Martin von Löwis 和 Ned Deily 實施。"

#: ../../whatsnew/3.4.rst:262
#, fuzzy
msgid "PEP 446: Newly Created File Descriptors Are Non-Inheritable"
msgstr "PEP 446：新建立的文件描述器是不可繼承的"

#: ../../whatsnew/3.4.rst:264
#, fuzzy
msgid ""
":pep:`446` makes newly created file descriptors :ref:`non-inheritable "
"<fd_inheritance>`.  In general, this is the behavior an application will "
"want: when launching a new process, having currently open files also open in "
"the new process can lead to all sorts of hard to find bugs, and potentially "
"to security issues."
msgstr ""
":pep:`446` 使新建立的文件描述器成為 :ref:`non-inheritable <fd_inheritance>`。"
"通常，這是應用程式想要的行為：啟動新行程時，當前打開的文件也在新行程中打開會"
"導致各種難以發現的錯誤，並可能導致安全問題。"

#: ../../whatsnew/3.4.rst:270
#, fuzzy
msgid ""
"However, there are occasions when inheritance is desired.  To support these "
"cases, the following new functions and methods are available:"
msgstr "但是，有時需要繼承。為了支援這些情況，可以使用以下新函式和方法："

#: ../../whatsnew/3.4.rst:273
msgid ":func:`os.get_inheritable`, :func:`os.set_inheritable`"
msgstr ":func:`os.get_inheritable`, :func:`os.set_inheritable`"

#: ../../whatsnew/3.4.rst:274
msgid ":func:`os.get_handle_inheritable`, :func:`os.set_handle_inheritable`"
msgstr ":func:`os.get_handle_inheritable`, :func:`os.set_handle_inheritable`"

#: ../../whatsnew/3.4.rst:275
msgid ""
":meth:`socket.socket.get_inheritable`, :meth:`socket.socket.set_inheritable`"
msgstr ""
":meth:`socket.socket.get_inheritable`, :meth:`socket.socket.set_inheritable`"

#: ../../whatsnew/3.4.rst:279
#, fuzzy
msgid ":pep:`446` -- Make newly created file descriptors non-inheritable"
msgstr ":pep:`446` -- 使新建立的文件描述器不可繼承"

#: ../../whatsnew/3.4.rst:280 ../../whatsnew/3.4.rst:1812
msgid "PEP written and implemented by Victor Stinner."
msgstr "由 Victor Stinner 撰寫 PEP 與實作。"

#: ../../whatsnew/3.4.rst:286
#, fuzzy
msgid "Improvements to Codec Handling"
msgstr "編解碼器處理的改進"

#: ../../whatsnew/3.4.rst:288
#, fuzzy
msgid ""
"Since it was first introduced, the :mod:`codecs` module has always been "
"intended to operate as a type-neutral dynamic encoding and decoding system. "
"However, its close coupling with the Python text model, especially the type "
"restricted convenience methods on the builtin :class:`str`, :class:`bytes` "
"and :class:`bytearray` types, has historically obscured that fact."
msgstr ""
"自首次引入以來，:mod:`codecs` "
"模組一直旨在作為型別中立的動態編碼和解碼系統運行。然而，它與 Python "
"文本模型的緊密結合，尤其是內建 str、bytes 和 bytearray "
"型別上的型別受限便利方法，在歷史上掩蓋了這一事實。"

#: ../../whatsnew/3.4.rst:295
#, fuzzy
msgid ""
"As a key step in clarifying the situation, the :meth:`codecs.encode` and :"
"meth:`codecs.decode` convenience functions are now properly documented in "
"Python 2.7, 3.3 and 3.4. These functions have existed in the :mod:`codecs` "
"module (and have been covered by the regression test suite) since Python "
"2.4, but were previously only discoverable through runtime introspection."
msgstr ""
"作為澄清情況的關鍵步驟，:meth:`codecs.encode` 和 :meth:`codecs.decode` "
"便利函式現在已在 Python 2.7、3.3 和 3.4 中正確記錄。這些函式自 Python 2.4 "
"以來就存在於 :mod:`codecs` "
"模組中（並且已被回歸測試套件涵蓋），但以前只能通過運行時自省發現。"

#: ../../whatsnew/3.4.rst:301
#, fuzzy
msgid ""
"Unlike the convenience methods on :class:`str`, :class:`bytes` and :class:"
"`bytearray`, the :mod:`codecs` convenience functions support arbitrary "
"codecs in both Python 2 and Python 3, rather than being limited to Unicode "
"text encodings (in Python 3) or ``basestring`` <-> ``basestring`` "
"conversions (in Python 2)."
msgstr ""
"與 :class:`str`、:class:`bytes` 和 :class:`bytearray` "
"上的便捷方法不同，:mod:`codecs` 便捷函式支援 Python 2 和 Python 3 "
"中的任意編解碼器，而不是受到限制到 Unicode 文本編碼（在 Python 3 中）或 "
"``basestring`` <-> ``basestring`` 轉換（在 Python 2 中）。"

#: ../../whatsnew/3.4.rst:307
#, fuzzy
msgid ""
"In Python 3.4, the interpreter is able to identify the known non-text "
"encodings provided in the standard library and direct users towards these "
"general purpose convenience functions when appropriate::"
msgstr "在 Python 3.4 中，直譯器能夠識別標準庫中提供的已知非文本編碼，並在適當的時候"
"將使用者引導至這些通用的便利函式："

#: ../../whatsnew/3.4.rst:326
#, fuzzy
msgid ""
"In a related change, whenever it is feasible without breaking backwards "
"compatibility, exceptions raised during encoding and decoding operations are "
"wrapped in a chained exception of the same type that mentions the name of "
"the codec responsible for producing the error::"
msgstr ""
"在相關更改中，只要在不破壞向後相容性的情況下可行，在編碼和解碼操作期間引發的"
"例外將包裝在同一型別的鍊式例外中，並提及負責產生錯誤的編解碼器的名稱::"

#: ../../whatsnew/3.4.rst:359
#, fuzzy
msgid ""
"Finally, as the examples above show, these improvements have permitted the "
"restoration of the convenience aliases for the non-Unicode codecs that were "
"themselves restored in Python 3.2. This means that encoding binary data to "
"and from its hexadecimal representation (for example) can now be written as::"
msgstr ""
"最後，如上面的示例所示，這些改進允許恢復非 Unicode 編解碼器的便利別名，"
"這些別名本身已在 Python 3.2 "
"中恢復。這意味著將二進位資料編碼為十六進位表示形式（例如）現在可以寫成："

#: ../../whatsnew/3.4.rst:371
#, fuzzy
msgid ""
"The binary and text transforms provided in the standard library are detailed "
"in :ref:`binary-transforms` and :ref:`text-transforms`."
msgstr ""
"標準庫中提供的二進位和文本轉換在 :ref:`binary-transforms` 和 :ref:`text-"
"transforms` 中有詳細說明。"

#: ../../whatsnew/3.4.rst:374
#, fuzzy
msgid ""
"(Contributed by Nick Coghlan in :issue:`7475`, :issue:`17827`, :issue:"
"`17828` and :issue:`19619`.)"
msgstr ""
"（由 Nick Coghlan 在 :issue:`7475`、:issue:`17827`、:issue:`17828` 和 "
":issue:`19619` 中貢獻。）"

#: ../../whatsnew/3.4.rst:381
#, fuzzy
msgid "PEP 451: A ModuleSpec Type for the Import System"
msgstr "PEP 451：導入系統的 ModuleSpec 型別"

#: ../../whatsnew/3.4.rst:383
#, fuzzy
msgid ""
":pep:`451` provides an encapsulation of the information about a module that "
"the import machinery will use to load it (that is, a module specification).  "
"This helps simplify both the import implementation and several import-"
"related APIs. The change is also a stepping stone for `several future import-"
"related improvements`__."
msgstr ""
":pep:`451` 提供了有關導入機制將用於加載它的模組的資訊的封裝（即模組規範）。"
"這有助於簡化導入實作和幾個與導入相關的 "
"API。這一變化也是`未來幾項與導入相關的改進`__ 的墊腳石。"

#: ../../whatsnew/3.4.rst:391
#, fuzzy
msgid ""
"The public-facing changes from the PEP are entirely backward-compatible. "
"Furthermore, they should be transparent to everyone but importer authors.  "
"Key finder and loader methods have been deprecated, but they will continue "
"working. New importers should use the new methods described in the PEP.  "
"Existing importers should be updated to implement the new methods.  See the :"
"ref:`deprecated-3.4` section for a list of methods that should be replaced "
"and their replacements."
msgstr ""
"PEP 中面向公眾的更改是完全向後相容的。此外，它們應該對除進口商作者以外的所有"
"人透明。 Key finder 和 loader 方法已被棄用，但它們將繼續工作。新進口商應使用 "
"PEP 中描述的新方法。應更新現有進口商以實施新方法。請參閱 :ref:`deprecated-3."
"4` 部分以獲取應替換的方法列表及其替換方法。"

#: ../../whatsnew/3.4.rst:401
#, fuzzy
msgid "Other Language Changes"
msgstr "其他語言變化"

#: ../../whatsnew/3.4.rst:403
#, fuzzy
msgid "Some smaller changes made to the core Python language are:"
msgstr "對核心 Python 語言所做的一些較小的更改是："

#: ../../whatsnew/3.4.rst:405
#, fuzzy
msgid "Unicode database updated to UCD version 6.3."
msgstr "Unicode 資料庫更新至 UCD 6.3 版。"

#: ../../whatsnew/3.4.rst:407
#, fuzzy
msgid ""
":func:`min` and :func:`max` now accept a *default* keyword-only argument "
"that can be used to specify the value they return if the iterable they are "
"evaluating has no elements.  (Contributed by Julian Berman in :issue:"
"`18111`.)"
msgstr ""
":func:`min` 和 :func:`max` 現在接受 *default* 僅關鍵字參數，如果他們正在評估"
"的可疊代對像沒有元素，該參數可用於指定它們回傳的值。 （由 Julian Berman 在 "
":issue:`18111` 中貢獻。）"

#: ../../whatsnew/3.4.rst:412
#, fuzzy
msgid "Module objects are now :ref:`weakly referenceable <mod-weakref>`."
msgstr "模組物件現在是 :ref:`弱引用 <mod-weakref>`。"

#: ../../whatsnew/3.4.rst:414
#, fuzzy
msgid ""
"Module ``__file__`` attributes (and related values) should now always "
"contain absolute paths by default, with the sole exception of ``__main__."
"__file__`` when a script has been executed directly using a relative path.  "
"(Contributed by Brett Cannon in :issue:`18416`.)"
msgstr ""
"模組 ``__file__`` 屬性（和相關值）現在應該始終預設包含絕對路徑，唯一的例外是 "
"``__main__.__file__`` 當腳本直接使用相對路徑執行時。 （由 Brett Cannon 在 "
":issue:`18416` 中貢獻。）"

#: ../../whatsnew/3.4.rst:419
#, fuzzy
msgid ""
"All the UTF-\\* codecs (except UTF-7) now reject surrogates during both "
"encoding and decoding unless the ``surrogatepass`` error handler is used, "
"with the exception of the UTF-16 decoder (which accepts valid surrogate "
"pairs) and the UTF-16 encoder (which produces them while encoding non-BMP "
"characters). (Contributed by Victor Stinner, Kang-Hao (Kenny) Lu and Serhiy "
"Storchaka in :issue:`12892`.)"
msgstr ""
"所有 UTF-\\* 編解碼器（UTF-7 除外）現在在編碼和解碼期間都拒絕代理，除非使用 "
"``surrogatepass`` 錯誤處理程式，除了 UTF-16 "
"解碼器（它接受有效的代理對）和UTF-16 編碼器（在編碼非 BMP 字元時生成它們）。 "
"（由 Victor Stinner、Kang-Hao (Kenny) Lu 和 Serhiy Storchaka 在 "
":issue:`12892` 中貢獻。）"

#: ../../whatsnew/3.4.rst:426
#, fuzzy
msgid ""
"New German EBCDIC :ref:`codec <standard-encodings>` ``cp273``.  (Contributed "
"by Michael Bierenfeld and Andrew Kuchling in :issue:`1097797`.)"
msgstr ""
"新德語 EBCDIC :ref:`codec <standard-encodings>` ``cp273``。 （由 Michael "
"Bierenfeld 和 Andrew Kuchling 在 :issue:`1097797` 中貢獻。）"

#: ../../whatsnew/3.4.rst:429
#, fuzzy
msgid ""
"New Ukrainian :ref:`codec <standard-encodings>` ``cp1125``.  (Contributed by "
"Serhiy Storchaka in :issue:`19668`.)"
msgstr ""
"新烏克蘭語 :ref:`codec <standard-encodings>` ``cp1125``。 （由 Serhiy "
"Storchaka 在 :issue:`19668` 中貢獻。）"

#: ../../whatsnew/3.4.rst:432
#, fuzzy
msgid ""
":class:`bytes`.join() and :class:`bytearray`.join() now accept arbitrary "
"buffer objects as arguments.  (Contributed by Antoine Pitrou in :issue:"
"`15958`.)"
msgstr ""
":class:`bytes`.join() 和 :class:`bytearray`.join() "
"現在接受任意緩衝區對像作為參數。 （由 Antoine Pitrou 在 :issue:`15958` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:436
#, fuzzy
msgid ""
"The :class:`int` constructor now accepts any object that has an "
"``__index__`` method for its *base* argument.  (Contributed by Mark "
"Dickinson in :issue:`16772`.)"
msgstr ""
":class:`int` 構造函式現在接受任何具有 ``__index__`` 方法作為其 *base* "
"參數的物件。 （由 Mark Dickinson 在 :issue:`16772` 中貢獻。）"

#: ../../whatsnew/3.4.rst:440
#, fuzzy
msgid ""
"Frame objects now have a :func:`~frame.clear` method that clears all "
"references to local variables from the frame.  (Contributed by Antoine "
"Pitrou in :issue:`17934`.)"
msgstr ""
"框架物件現在有一個 :func:`~frame.clear` "
"方法，可以清除框架中對局部變數的所有引用。 （由 Antoine Pitrou 在 "
":issue:`17934` 中貢獻。）"

#: ../../whatsnew/3.4.rst:444
#, fuzzy
msgid ""
":class:`memoryview` is now registered as a :class:`Sequence <collections."
"abc>`, and supports the :func:`reversed` builtin.  (Contributed by Nick "
"Coghlan and Claudiu Popa in :issue:`18690` and :issue:`19078`.)"
msgstr ""
":class:`memoryview` 現在註冊為 :class:`Sequence <collections.abc>`，並支援 "
":func:`reversed` 內建。 （由 Nick Coghlan 和 Claudiu Popa 在 :issue:`18690` "
"和 :issue:`19078` 中貢獻。）"

#: ../../whatsnew/3.4.rst:448
#, fuzzy
msgid ""
"Signatures reported by :func:`help` have been modified and improved in "
"several cases as a result of the introduction of Argument Clinic and other "
"changes to the :mod:`inspect` and :mod:`pydoc` modules."
msgstr ""
"由於 Argument Clinic 的引入以及對 :mod:`inspect` 和 :mod:`pydoc` "
"模組的其他更改，已在多個案例中修改和改進了 :func:`help` 報告的簽名。"

#: ../../whatsnew/3.4.rst:452
#, fuzzy
msgid ""
":meth:`~object.__length_hint__` is now part of the formal language "
"specification (see :pep:`424`).  (Contributed by Armin Ronacher in :issue:"
"`16148`.)"
msgstr ""
":meth:`~object.__length_hint__` "
"現在是正式語言規範的一部分（請參閱 :pep:`424`）。 （由 Armin Ronacher 在 "
":issue:`16148` 中貢獻。）"

#: ../../whatsnew/3.4.rst:458
msgid "New Modules"
msgstr "新模組"

#: ../../whatsnew/3.4.rst:464
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.4.rst:466
#, fuzzy
msgid ""
"The new :mod:`asyncio` module (defined in :pep:`3156`) provides a standard "
"pluggable event loop model for Python, providing solid asynchronous IO "
"support in the standard library, and making it easier for other event loop "
"implementations to interoperate with the standard library and each other."
msgstr ""
"新的 :mod:`asyncio` 模組（在 :pep:`3156` 中定義）為 Python "
"提供了標準的可插拔事件循環模型，在標準庫中提供可靠的非同步 IO "
"支援，並使其他事件循環實作更容易互操作與標準庫和彼此。"

#: ../../whatsnew/3.4.rst:471 ../../whatsnew/3.4.rst:534
#, fuzzy
msgid "For Python 3.4, this module is considered a :term:`provisional API`."
msgstr "對於 Python 3.4，此模組被視為 :term:`臨時 API`。"

#: ../../whatsnew/3.4.rst:475
#, fuzzy
msgid ":pep:`3156` -- Asynchronous IO Support Rebooted: the \"asyncio\" Module"
msgstr ":pep:`3156` -- 非同步 IO 支援重新啟動： ``asyncio`` 模組"

#: ../../whatsnew/3.4.rst:476
msgid "PEP written and implementation led by Guido van Rossum."
msgstr "由 Guido van Rossum 撰寫 PEP 與帶領實作。"

#: ../../whatsnew/3.4.rst:482
msgid "ensurepip"
msgstr "ensurepip"

#: ../../whatsnew/3.4.rst:484
#, fuzzy
msgid ""
"The new :mod:`ensurepip` module is the primary infrastructure for the :pep:"
"`453` implementation.  In the normal course of events end users will not "
"need to interact with this module, but it can be used to manually bootstrap "
"``pip`` if the automated bootstrapping into an installation or virtual "
"environment was declined."
msgstr ""
"新的 :mod:`ensurepip` 模組是 :pep:`453` 實作的主要基礎設施。在正常情況下，最"
"終使用者不需要與此模組交互，但如果拒絕自動引導到安裝或虛擬環境，"
"它可以用於手動引導 ``pip``。"

#: ../../whatsnew/3.4.rst:490
#, fuzzy
msgid ""
":mod:`ensurepip` includes a bundled copy of ``pip``, up-to-date as of the "
"first release candidate of the release of CPython with which it ships (this "
"applies to both maintenance releases and feature releases).  ``ensurepip`` "
"does not access the internet.  If the installation has internet access, "
"after ``ensurepip`` is run the bundled ``pip`` can be used to upgrade "
"``pip`` to a more recent release than the bundled one.  (Note that such an "
"upgraded version of ``pip`` is considered to be a separately installed "
"package and will not be removed if Python is uninstalled.)"
msgstr ""
":mod:`ensurepip` 包括一個捆綁的 ``pip`` 副本，它是與它一起發布的 CPython "
"版本的第一個候選版本的最新版本（這適用於維護版本和功能版本）。 ``ensurepip`` "
"不訪問網際網路。如果安裝可以訪問網際網路，則在運行 ensurepip 之後，捆綁的 pip "
"可用於將 pip 升級到比捆綁版本更新的版本。 （注意，這樣的升級版本的``pip``被認"
"為是一個單獨安裝的包，如果卸載Python則不會被刪除。）"

#: ../../whatsnew/3.4.rst:499
#, fuzzy
msgid ""
"The module is named *ensure*\\ pip because if called when ``pip`` is already "
"installed, it does nothing.  It also has an ``--upgrade`` option that will "
"cause it to install the bundled copy of ``pip`` if the existing installed "
"version of ``pip`` is older than the bundled copy."
msgstr ""
"該模組被命名為*ensure*\\pip，因為如果在已經安裝了``pip`` "
"時呼叫它，它什麼也不做。它還有一個 ``--upgrade`` 選項，如果現有安裝的 ``pip``"
" 版本比捆綁副本舊，它將導致它安裝 ``pip`` 的捆綁副本。"

#: ../../whatsnew/3.4.rst:508
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.4.rst:510
#, fuzzy
msgid ""
"The new :mod:`enum` module (defined in :pep:`435`) provides a standard "
"implementation of enumeration types, allowing other modules (such as :mod:"
"`socket`) to provide more informative error messages and better debugging "
"support by replacing opaque integer constants with backwards compatible "
"enumeration values."
msgstr ""
"新的 :mod:`enum` 模組（在 :pep:`435` "
"中定義）提供了枚舉型別的標準實作，允許其他模組（例如 :mod:`socket`）提供更多"
"資訊錯誤消息和更好的除錯支援通過用向後相容的枚舉值替換不透明的整數常數。"

#: ../../whatsnew/3.4.rst:519
#, fuzzy
msgid ":pep:`435` -- Adding an Enum type to the Python standard library"
msgstr ":pep:`435` -- 將枚舉型別新增到 Python 標準庫"

#: ../../whatsnew/3.4.rst:519
msgid ""
"PEP written by Barry Warsaw, Eli Bendersky and Ethan Furman, implemented by "
"Ethan Furman."
msgstr ""
"PEP 由 Barry Warsaw、Eli Bendersky 和 Ethan Furman 編寫，由 "
"Ethan Furman 實作。"

#: ../../whatsnew/3.4.rst:526
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.4.rst:528
#, fuzzy
msgid ""
"The new :mod:`pathlib` module offers classes representing filesystem paths "
"with semantics appropriate for different operating systems.  Path classes "
"are divided between *pure paths*, which provide purely computational "
"operations without I/O, and *concrete paths*, which inherit from pure paths "
"but also provide I/O operations."
msgstr ""
"新的 :mod:`pathlib` 模組提供了表示文件系統路徑的類，這些類具有適用於不同操作"
"系統的語義。路徑類分為*純路徑*（提供不帶 I/O 的純計算操作）和*具體路徑*（"
"繼承自純路徑但也提供 I/O 操作）。"

#: ../../whatsnew/3.4.rst:538
msgid ":pep:`428` -- The pathlib module -- object-oriented filesystem paths"
msgstr ":pep:`428` -- pathlib 模組 -- 物件導向的檔案系統路徑"

#: ../../whatsnew/3.4.rst:539 ../../whatsnew/3.4.rst:1835
msgid "PEP written and implemented by Antoine Pitrou."
msgstr "由 Antoine Pitrou 撰寫 PEP 與實作。"

#: ../../whatsnew/3.4.rst:545
msgid "selectors"
msgstr "selectors"

#: ../../whatsnew/3.4.rst:547
#, fuzzy
msgid ""
"The new :mod:`selectors` module (created as part of implementing :pep:"
"`3156`) allows high-level and efficient I/O multiplexing, built upon the :"
"mod:`select` module primitives."
msgstr ""
"新的 :mod:`selectors` 模組（作為實作 :pep:`3156` 的一部分建立）"
"允許高階和高效的 I/O 多路復用，建立在 :mod:`select` 模組原語之上。"

#: ../../whatsnew/3.4.rst:555
msgid "statistics"
msgstr "statistics"

#: ../../whatsnew/3.4.rst:557
#, fuzzy
msgid ""
"The new :mod:`statistics` module (defined in :pep:`450`) offers some core "
"statistics functionality directly in the standard library. This module "
"supports calculation of the mean, median, mode, variance and standard "
"deviation of a data series."
msgstr ""
"新的 :mod:`statistics` 模組（在 :pep:`450` 中定義）直接在標準庫中提供一些核心"
"統計功能。該模組支援計算資料序列的均值、中值、眾數、方差和標準差。"

#: ../../whatsnew/3.4.rst:564
#, fuzzy
msgid ":pep:`450` -- Adding A Statistics Module To The Standard Library"
msgstr ":pep:`450` -- 新增統計模組到標準庫"

#: ../../whatsnew/3.4.rst:565
msgid "PEP written and implemented by Steven D'Aprano"
msgstr "由 Steven D'Aprano 撰寫 PEP 與實作"

#: ../../whatsnew/3.4.rst:571
msgid "tracemalloc"
msgstr "tracemalloc"

#: ../../whatsnew/3.4.rst:573
#, fuzzy
msgid ""
"The new :mod:`tracemalloc` module (defined in :pep:`454`) is a debug tool to "
"trace memory blocks allocated by Python. It provides the following "
"information:"
msgstr ""
"新的 :mod:`tracemalloc` 模組（在 :pep:`454` 中定義）是一個除錯工具，用於跟踪 "
"Python 分配的記憶體塊。它提供以下資訊："

#: ../../whatsnew/3.4.rst:576
#, fuzzy
msgid "Trace where an object was allocated"
msgstr "跟踪分配物件的位置"

#: ../../whatsnew/3.4.rst:577
#, fuzzy
msgid ""
"Statistics on allocated memory blocks per filename and per line number: "
"total size, number and average size of allocated memory blocks"
msgstr ""
"Statistics on allocated memory blocks per filename and per line "
"number：分配記憶體塊的總大小、數量和平均大小"

#: ../../whatsnew/3.4.rst:579
#, fuzzy
msgid "Compute the differences between two snapshots to detect memory leaks"
msgstr "計算兩個快照之間的差異以檢測記憶體洩漏"

#: ../../whatsnew/3.4.rst:583
#, fuzzy
msgid ""
":pep:`454` -- Add a new tracemalloc module to trace Python memory allocations"
msgstr ":pep:`454` -- 新增一個新的 tracemalloc 模組來跟踪 Python 記憶體分配"

#: ../../whatsnew/3.4.rst:584
msgid "PEP written and implemented by Victor Stinner"
msgstr "由 Victor Stinner 撰寫 PEP 與實作"

#: ../../whatsnew/3.4.rst:589
#, fuzzy
msgid "Improved Modules"
msgstr "改進模組"

#: ../../whatsnew/3.4.rst:593
msgid "abc"
msgstr "abc"

#: ../../whatsnew/3.4.rst:595
#, fuzzy
msgid ""
"New function :func:`abc.get_cache_token` can be used to know when to "
"invalidate caches that are affected by changes in the object graph.  "
"(Contributed by Łukasz Langa in :issue:`16832`.)"
msgstr ""
"新函式 :func:`abc.get_cache_token` "
"可用於了解何時使受對像圖中更改影響的快取失效。 （由 Łukasz Langa 在 "
":issue:`16832` 中貢獻。）"

#: ../../whatsnew/3.4.rst:599
#, fuzzy
msgid ""
"New class :class:`~abc.ABC` has :class:`~abc.ABCMeta` as its meta class. "
"Using ``ABC`` as a base class has essentially the same effect as specifying "
"``metaclass=abc.ABCMeta``, but is simpler to type and easier to read. "
"(Contributed by Bruno Dupuis in :issue:`16049`.)"
msgstr ""
"新類 :class:`~abc.ABC` 有 :class:`~abc.ABCMeta` 作為它的元類。使用 ``ABC`` "
"作為基底類別與指定 ``metaclass=abc.ABCMeta`` "
"具有本質上相同的效果，但更易於鍵入和閱讀。 （由 Bruno Dupuis 在 "
":issue:`16049` 中貢獻。）"

#: ../../whatsnew/3.4.rst:606
msgid "aifc"
msgstr "aifc"

#: ../../whatsnew/3.4.rst:608
#, fuzzy
msgid ""
"The :meth:`~aifc.aifc.getparams` method now returns a namedtuple rather than "
"a plain tuple.  (Contributed by Claudiu Popa in :issue:`17818`.)"
msgstr ""
":meth:`~aifc.aifc.getparams` 方法現在回傳一個命名元組而不是普通元組。 （由 "
"Claudiu Popa 在 :issue:`17818` 中貢獻。）"

#: ../../whatsnew/3.4.rst:611
#, fuzzy
msgid ""
":func:`aifc.open` now supports the context management protocol: when used in "
"a :keyword:`with` block, the :meth:`~aifc.aifc.close` method of the returned "
"object will be called automatically at the end of the block.  (Contributed "
"by Serhiy Storchacha in :issue:`16486`.)"
msgstr ""
":func:`aifc.open` 現在支援上下文管理協定：在 :keyword:`with` "
"塊中使用時，回傳物件的 :meth:`~aifc.aifc.close` 方法將在塊的末尾。 （由 "
"Serhiy Storchacha 在 :issue:`16486` 中貢獻。）"

#: ../../whatsnew/3.4.rst:616
#, fuzzy
msgid ""
"The :meth:`~aifc.aifc.writeframesraw` and :meth:`~aifc.aifc.writeframes` "
"methods now accept any :term:`bytes-like object`.  (Contributed by Serhiy "
"Storchaka in :issue:`8311`.)"
msgstr ""
":meth:`~aifc.aifc.writeframesraw` 和 :meth:`~aifc.aifc.writeframes` "
"方法現在接受任何 :term:`bytes-like object`。 （由 Serhiy Storchaka 在 "
":issue:`8311` 中貢獻。）"

#: ../../whatsnew/3.4.rst:622
msgid "argparse"
msgstr "argparse"

#: ../../whatsnew/3.4.rst:624
#, fuzzy
msgid ""
"The :class:`~argparse.FileType` class now accepts *encoding* and *errors* "
"arguments, which are passed through to :func:`open`.  (Contributed by Lucas "
"Maystre in :issue:`11175`.)"
msgstr ""
":class:`~argparse.FileType` 類現在接受 *encoding* 和 *errors* 參數，"
"它們會傳遞給 :func:`open`。 （由 Lucas Maystre 在 :issue:`11175` 中貢獻。）"

#: ../../whatsnew/3.4.rst:630
msgid "audioop"
msgstr "audioop"

#: ../../whatsnew/3.4.rst:632
#, fuzzy
msgid ""
":mod:`audioop` now supports 24-bit samples.  (Contributed by Serhiy "
"Storchaka in :issue:`12866`.)"
msgstr ":mod:`audioop` 現在支援 24 位樣本。 （由 Serhiy Storchaka 在 :issue:`12866` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:635
#, fuzzy
msgid ""
"New :func:`~audioop.byteswap` function converts big-endian samples to little-"
"endian and vice versa.  (Contributed by Serhiy Storchaka in :issue:`19641`.)"
msgstr ""
"新的 :func:`~audioop.byteswap` 函式將大端樣本轉換為小端樣本，反之亦然。 （由 "
"Serhiy Storchaka 在 :issue:`19641` 中貢獻。）"

#: ../../whatsnew/3.4.rst:639
#, fuzzy
msgid ""
"All :mod:`audioop` functions now accept any :term:`bytes-like object`.  "
"Strings are not accepted: they didn't work before, now they raise an error "
"right away. (Contributed by Serhiy Storchaka in :issue:`16685`.)"
msgstr ""
"所有 :mod:`audioop` 函式現在都接受任何 :term:`bytes-like "
"object`。不接受字串：它們之前不起作用，現在它們會立即引發錯誤。 （由 Serhiy "
"Storchaka 在 :issue:`16685` 中貢獻。）"

#: ../../whatsnew/3.4.rst:645
msgid "base64"
msgstr "base64"

#: ../../whatsnew/3.4.rst:647
#, fuzzy
msgid ""
"The encoding and decoding functions in :mod:`base64` now accept any :term:"
"`bytes-like object` in cases where it previously required a :class:`bytes` "
"or :class:`bytearray` instance.  (Contributed by Nick Coghlan in :issue:"
"`17839`.)"
msgstr ""
":mod:`base64` 中的編碼和解碼函式現在接受任何 :term:`bytes-like object`，"
"以防以前需要 :class:`bytes` 或 :class:`bytearray` 實例。 （由 Nick Coghlan "
"在 :issue:`17839` 中貢獻。）"

#: ../../whatsnew/3.4.rst:652
#, fuzzy
msgid ""
"New functions :func:`~base64.a85encode`, :func:`~base64.a85decode`, :func:"
"`~base64.b85encode`, and :func:`~base64.b85decode` provide the ability to "
"encode and decode binary data from and to ``Ascii85`` and the git/mercurial "
"``Base85`` formats, respectively.  The ``a85`` functions have options that "
"can be used to make them compatible with the variants of the ``Ascii85`` "
"encoding, including the Adobe variant.  (Contributed by Martin Morrison, the "
"Mercurial project, Serhiy Storchaka, and Antoine Pitrou in :issue:`17618`.)"
msgstr ""
"新函式 :func:`~base64.a85encode`、:func:`~base64.a85decode`、:func:`~base64."
"b85encode` 和 :func:`~base64.b85decode` "
"提供了編碼和解碼二進位文件的能力分別來自和到 ``Ascii85`` 和 git/mercurial "
"``Base85`` 格式的資料。 ``a85`` 函式具有選項，可用於使它們與 ``Ascii85`` "
"編碼的變體相容，包括 Adobe 變體。 （由 Martin Morrison、"
"Mercurial 項目、Serhiy Storchaka 和 Antoine Pitrou 在 :issue:`17618` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:662
msgid "collections"
msgstr "collections"

#: ../../whatsnew/3.4.rst:664
#, fuzzy
msgid ""
"The :meth:`.ChainMap.new_child` method now accepts an *m* argument "
"specifying the child map to add to the chain.  This allows an existing "
"mapping and/or a custom mapping type to be used for the child.  (Contributed "
"by Vinay Sajip in :issue:`16613`.)"
msgstr ""
":meth:`.ChainMap.new_child` 方法現在接受 *m* "
"參數指定要新增到鏈中的子映射。這允許將現有映射和/或自定義映射型別用於子物件。"
" （由 Vinay Sajip 在 :issue:`16613` 中貢獻。）"

#: ../../whatsnew/3.4.rst:671
msgid "colorsys"
msgstr "colorsys"

#: ../../whatsnew/3.4.rst:673
#, fuzzy
msgid ""
"The number of digits in the coefficients for the RGB --- YIQ conversions "
"have been expanded so that they match the FCC NTSC versions.  The change in "
"results should be less than 1% and may better match results found elsewhere. "
"(Contributed by Brian Landers and Serhiy Storchaka in :issue:`14323`.)"
msgstr ""
"RGB --- YIQ 轉換係數中的位數已擴充，因此它們與 FCC NTSC 版本相匹配。"
"結果的變化應小於 1%，並且可能與其他地方的結果更匹配。 （由 Brian Landers 和 "
"Serhiy Storchaka 在 :issue:`14323` 中貢獻。）"

#: ../../whatsnew/3.4.rst:680
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.4.rst:682
#, fuzzy
msgid ""
"The new :class:`contextlib.suppress` context manager helps to clarify the "
"intent of code that deliberately suppresses exceptions from a single "
"statement.  (Contributed by Raymond Hettinger in :issue:`15806` and Zero "
"Piraeus in :issue:`19266`.)"
msgstr ""
"新的 :class:`contextlib.suppress` "
"上下文管理器有助於闡明故意抑制單個語句例外的程式碼的意圖。 （由 Raymond "
"Hettinger 在 :issue:`15806` 和 Zero Piraeus 在 :issue:`19266` 中貢獻。）"

#: ../../whatsnew/3.4.rst:687
#, fuzzy
msgid ""
"The new :func:`contextlib.redirect_stdout` context manager makes it easier "
"for utility scripts to handle inflexible APIs that write their output to :"
"data:`sys.stdout` and don't provide any options to redirect it.  Using the "
"context manager, the :data:`sys.stdout` output can be redirected to any "
"other stream or, in conjunction with :class:`io.StringIO`, to a string. The "
"latter can be especially useful, for example, to capture output from a "
"function that was written to implement a command line interface. It is "
"recommended only for utility scripts because it affects the global state of :"
"data:`sys.stdout`.  (Contributed by Raymond Hettinger in :issue:`15805`.)"
msgstr ""
"新的 :func:`contextlib.redirect_stdout` "
"上下文管理器使實用程式腳本更容易處理不靈活的 API，這些 API 將輸出寫入 "
":data:`sys.stdout` 並且不提供任何重定向選項。使用上下文管理器，sys.stdout "
"輸出可以重定向到任何其他流，或者與 io.StringIO 一起重定向到字串。後者特別有用"
"，例如，捕獲為實作命令列界面而編寫的函式的輸出。建議僅用於實用程式腳本，"
"因為它會影響 :data:`sys.stdout` 的全局狀態。 （由 Raymond Hettinger 在 "
":issue:`15805` 中貢獻。）"

#: ../../whatsnew/3.4.rst:698
#, fuzzy
msgid ""
"The :mod:`contextlib` documentation has also been updated to include a :ref:"
"`discussion <single-use-reusable-and-reentrant-cms>` of the differences "
"between single use, reusable and reentrant context managers."
msgstr ""
":mod:`contextlib` 文檔也已更新，包括討論 <single-use-reusable-and-reentrant-"
"cms>` 一次性使用、可重用和可重入上下文管理器之間的區別。"

#: ../../whatsnew/3.4.rst:704
msgid "dbm"
msgstr "dbm"

#: ../../whatsnew/3.4.rst:706
#, fuzzy
msgid ""
":func:`dbm.open` objects now support the context management protocol.  When "
"used in a :keyword:`with` statement, the ``close`` method of the database "
"object will be called automatically at the end of the block.  (Contributed "
"by Claudiu Popa and Nick Coghlan in :issue:`19282`.)"
msgstr ""
":func:`dbm.open` 物件現在支援上下文管理協定。當在 :keyword:`with` "
"語句中使用時，資料庫物件的 ``close`` 方法將在塊的末尾自動呼叫。 （由 Claudiu "
"Popa 和 Nick Coghlan 在 :issue:`19282` 中貢獻。）"

#: ../../whatsnew/3.4.rst:713
msgid "dis"
msgstr "dis"

#: ../../whatsnew/3.4.rst:715
#, fuzzy
msgid ""
"Functions :func:`~dis.show_code`, :func:`~dis.dis`, :func:`~dis.distb`, and :"
"func:`~dis.disassemble` now accept a keyword-only *file* argument that "
"controls where they write their output."
msgstr ""
"函式 :func:`~dis.show_code`、:func:`~dis.dis`、:func:`~dis.distb` 和 "
":func:`~dis.disassemble` 現在只接受關鍵字*文件*控制他們在哪裡寫輸出的參數。"

#: ../../whatsnew/3.4.rst:719
#, fuzzy
msgid ""
"The :mod:`dis` module is now built around an :class:`~dis.Instruction` class "
"that provides object oriented access to the details of each individual "
"bytecode operation."
msgstr ""
":mod:`dis` 模組現在是圍繞一個 :class:`~dis.Instruction` "
"類構建的，該類提供對每個單獨位元組碼操作細節的面向物件訪問。"

#: ../../whatsnew/3.4.rst:723
#, fuzzy
msgid ""
"A new method, :func:`~dis.get_instructions`, provides an iterator that emits "
"the Instruction stream for a given piece of Python code.  Thus it is now "
"possible to write a program that inspects and manipulates a bytecode object "
"in ways different from those provided by the :mod:`~dis` module itself.  For "
"example::"
msgstr ""
"一種新方法 :func:`~dis.get_instructions` 提供了一個疊代器，它為給定的 Python "
"程式碼片段發出指令流。因此，現在可以編寫一個程式，以不同於 :mod:`~dis` "
"模組本身提供的方式檢查和操作位元組碼物件。例如：："

#: ../../whatsnew/3.4.rst:737
#, fuzzy
msgid ""
"The various display tools in the :mod:`dis` module have been rewritten to "
"use these new components."
msgstr ":mod:`dis` 模組中的各種顯示工具已被重寫以使用這些新組件。"

#: ../../whatsnew/3.4.rst:740
#, fuzzy
msgid ""
"In addition, a new application-friendly class :class:`~dis.Bytecode` "
"provides an object-oriented API for inspecting bytecode in both in human-"
"readable form and for iterating over instructions.  The :class:`~dis."
"Bytecode` constructor takes the same arguments that :func:`~dis."
"get_instruction` does (plus an optional *current_offset*), and the resulting "
"object can be iterated to produce :class:`~dis.Instruction` objects.  But it "
"also has a :mod:`~dis.Bytecode.dis` method, equivalent to calling :mod:`~dis."
"dis` on the constructor argument, but returned as a multi-line string::"
msgstr ""
"此外，一個新的應用程式友好類 :class:`~dis.Bytecode` 提供了一個面向物件的 "
"API，用於以人類可讀的形式檢查位元組碼和疊代指令。 :class:`~dis.Bytecode` "
"構造函式採用與 :func:`~dis.get_instruction` 相同的參數（加上可選的 "
"*current_offset*），並且可以疊代生成的對像以生成 :class:`~dis .Instruction` "
"物件。但它也有一個 :mod:`~dis.Bytecode.dis` 方法，相當於在構造函式參數上呼叫 "
":mod:`~dis.dis` ，但作為多行字串回傳::"

#: ../../whatsnew/3.4.rst:762
#, fuzzy
msgid ""
":class:`~dis.Bytecode` also has a class method, :meth:`~dis.Bytecode."
"from_traceback`, that provides the ability to manipulate a traceback (that "
"is, ``print(Bytecode.from_traceback(tb).dis())`` is equivalent to "
"``distb(tb)``)."
msgstr ""
":class:`~dis.Bytecode` 還有一個類方法，:meth:`~dis.Bytecode."
"from_traceback`，它提供了操作回溯的能力（即 ``print(Bytecode."
"from_traceback(tb)。 dis())`` 等同於``distb(tb)``)。"

#: ../../whatsnew/3.4.rst:767
#, fuzzy
msgid ""
"(Contributed by Nick Coghlan, Ryan Kelly and Thomas Kluyver in :issue:"
"`11816` and Claudiu Popa in :issue:`17916`.)"
msgstr ""
"（由 Nick Coghlan、Ryan Kelly 和 Thomas Kluyver 在 :issue:`11816` 和 Claudiu "
"Popa 在 :issue:`17916` 中貢獻。）"

#: ../../whatsnew/3.4.rst:770
#, fuzzy
msgid ""
"New function :func:`~dis.stack_effect` computes the effect on the Python "
"stack of a given opcode and argument, information that is not otherwise "
"available. (Contributed by Larry Hastings in :issue:`19722`.)"
msgstr ""
"新函式 :func:`~dis.stack_effect` 計算給定操作碼和參數對 Python "
"堆疊的影響，這些資訊無法通過其他方式獲得。 （由 Larry Hastings 在 "
":issue:`19722` 中貢獻。）"

#: ../../whatsnew/3.4.rst:776
msgid "doctest"
msgstr "doctest"

#: ../../whatsnew/3.4.rst:778
#, fuzzy
msgid ""
"A new :ref:`option flag <doctest-options>`, :data:`~doctest.FAIL_FAST`, "
"halts test running as soon as the first failure is detected.  (Contributed "
"by R. David Murray and Daniel Urban in :issue:`16522`.)"
msgstr ""
"一個新的 :ref:`option flag <doctest-options>`, :data:`~doctest."
"FAIL_FAST`，一旦檢測到第一個故障就停止測試運行。 （由 R. David Murray 和 "
"Daniel Urban 在 :issue:`16522` 中貢獻。）"

#: ../../whatsnew/3.4.rst:782
#, fuzzy
msgid ""
"The :mod:`doctest` command line interface now uses :mod:`argparse`, and has "
"two new options, ``-o`` and ``-f``.  ``-o`` allows :ref:`doctest options "
"<doctest-options>` to be specified on the command line, and ``-f`` is a "
"shorthand for ``-o FAIL_FAST`` (to parallel the similar option supported by "
"the :mod:`unittest` CLI).  (Contributed by R. David Murray in :issue:"
"`11390`.)"
msgstr ""
":mod:`doctest` 命令列界面現在使用 :mod:`argparse`，並有兩個新選項，``-o`` 和 "
"``-f``。 ``-o`` 允許在命令列上指定 :ref:`doctest options <doctest-"
"options>`，``-f`` 是 ``-o FAIL_FAST`` 的簡寫（與類似的 :mod:`unittest` CLI "
"支援的選項）。 （由 R. David Murray 在 :issue:`11390` 中貢獻。）"

#: ../../whatsnew/3.4.rst:788
#, fuzzy
msgid ""
":mod:`doctest` will now find doctests in extension module ``__doc__`` "
"strings. (Contributed by Zachary Ware in :issue:`3158`.)"
msgstr ""
":mod:`doctest` 現在將在擴充模組 ``__doc__`` 字串中找到 doctests。 （由 "
"Zachary Ware 在 :issue:`3158` 中貢獻。）"

#: ../../whatsnew/3.4.rst:793
msgid "email"
msgstr "email"

#: ../../whatsnew/3.4.rst:795
#, fuzzy
msgid ""
":meth:`~email.message.Message.as_string` now accepts a *policy* argument to "
"override the default policy of the message when generating a string "
"representation of it.  This means that ``as_string`` can now be used in more "
"circumstances, instead of having to create and use a :mod:`~email.generator` "
"in order to pass formatting parameters to its ``flatten`` method.  "
"(Contributed by R. David Murray in :issue:`18600`.)"
msgstr ""
":meth:`~email.message.Message.as_string` 現在接受 *policy* "
"參數以在生成消息的字串表示形式時覆蓋消息的預設策略。這意味著 ``as_string`` "
"現在可以在更多情況下使用，而不是必須建立和使用 :mod:`~email.generator` "
"才能將格式化參數傳遞給它的 ``flatten`` 方法。 （由 R. David Murray 在 "
":issue:`18600` 中貢獻。）"

#: ../../whatsnew/3.4.rst:802
#, fuzzy
msgid ""
"New method :meth:`~email.message.Message.as_bytes` added to produce a bytes "
"representation of the message in a fashion similar to how ``as_string`` "
"produces a string representation.  It does not accept the *maxheaderlen* "
"argument, but does accept the *unixfrom* and *policy* arguments. The :class:"
"`~email.message.Message` :meth:`~email.message.Message.__bytes__` method "
"calls it, meaning that ``bytes(mymsg)`` will now produce the intuitive "
"result:  a bytes object containing the fully formatted message.  "
"(Contributed by R. David Murray in :issue:`18600`.)"
msgstr ""
"新增了新方法 :meth:`~email.message.Message.as_bytes` 以類似於 ``as_string`` "
"生成字串表示的方式生成消息的位元組表示。它不接受 *maxheaderlen* 參數，但接受 "
"*unixfrom* 和 *policy* 參數。 :class:`~email.message.Message` :meth:`~email."
"message.Message.__bytes__` 方法呼叫它，意味著 ``bytes(mymsg)`` "
"現在將產生直觀的結果：一個位元組物件包含完全格式化的消息。 （由 R. David "
"Murray 在 :issue:`18600` 中貢獻。）"

#: ../../whatsnew/3.4.rst:811
#, fuzzy
msgid ""
"The :meth:`.Message.set_param` message now accepts a *replace* keyword "
"argument. When specified, the associated header will be updated without "
"changing its location in the list of headers.  For backward compatibility, "
"the default is ``False``.  (Contributed by R. David Murray in :issue:"
"`18891`.)"
msgstr ""
":meth:`.Message.set_param` 消息現在接受 *replace* 關鍵字參數。指定後，將更新"
"關聯的標頭而不更改其在標頭列表中的位置。為了向後相容，預設值為 ``False``。 （由 "
"R. David Murray 在 :issue:`18891` 中貢獻。）"

#: ../../whatsnew/3.4.rst:819
#, fuzzy
msgid ""
"A pair of new subclasses of :class:`~email.message.Message` have been added "
"(:class:`.EmailMessage` and :class:`.MIMEPart`), along with a new sub-"
"module, :mod:`~email.contentmanager` and a new :mod:`~email.policy` "
"attribute :attr:`~email.policy.EmailPolicy.content_manager`.  All "
"documentation is currently in the new module, which is being added as part "
"of email's new :term:`provisional API`.  These classes provide a number of "
"new methods that make extracting content from and inserting content into "
"email messages much easier.  For details, see the :mod:`~email."
"contentmanager` documentation and the :ref:`email-examples`.  These API "
"additions complete the bulk of the work that was planned as part of the "
"email6 project.  The currently provisional API is scheduled to become final "
"in Python 3.5 (possibly with a few minor additions in the area of error "
"handling).  (Contributed by R. David Murray in :issue:`18891`.)"
msgstr ""
"新增了一對新的子類別 :class:`~email.message.Message` (:class:`.EmailMessage` "
"和 :class:`.MIMEPart`)，以及一個新的子模組 :mod:` ~email.contentmanager` "
"和一個新的 :mod:`~email.policy` 屬性 :attr:`~email.policy.EmailPolicy."
"content_manager`。所有文檔目前都在新模組中，該模組作為電子郵件的新 :term:`"
"provisional API` 的一部分新增。這些類提供了許多新方法，使從電子郵件中提取內容"
"和將內容插入到電子郵件中變得更加容易。有關詳細資訊，請參閱 :mod:`~email."
"contentmanager` 文檔和 :ref:`email-examples`。這些 API 新增完成了計劃作為 "
"email6 項目的一部分的大部分工作。當前的臨時 API 計劃在 Python 3.5 "
"中成為最終版本（可能在錯誤處理領域進行一些小的新增）。 （由 R. David Murray "
"在 :issue:`18891` 中貢獻。）"

#: ../../whatsnew/3.4.rst:835
msgid "filecmp"
msgstr "filecmp"

#: ../../whatsnew/3.4.rst:837
#, fuzzy
msgid ""
"A new :func:`~filecmp.clear_cache` function provides the ability to clear "
"the :mod:`filecmp` comparison cache, which uses :func:`os.stat` information "
"to determine if the file has changed since the last compare.  This can be "
"used, for example, if the file might have been changed and re-checked in "
"less time than the resolution of a particular filesystem's file modification "
"time field. (Contributed by Mark Levitt in :issue:`18149`.)"
msgstr ""
"一個新的 :func:`~filecmp.clear_cache` 函式提供了清除 :mod:`filecmp` "
"比較快取的能力，它使用 :func:`os.stat` 資訊來確定文件自上次比較以來是否發生了"
"變化。這可以被使用，例如，如果文件可能在比特定文件系統的文件修改時間欄位的分"
"辨率更短的時間內被更改和重新檢查。 （由 Mark Levitt 在 :issue:`18149` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:844
#, fuzzy
msgid ""
"New module attribute :data:`~filecmp.DEFAULT_IGNORES` provides the list of "
"directories that are used as the default value for the *ignore* parameter of "
"the :func:`~filecmp.dircmp` function.  (Contributed by Eli Bendersky in :"
"issue:`15442`.)"
msgstr ""
"新模組屬性 :data:`~filecmp.DEFAULT_IGNORES` 提供目錄列表，用作 "
":func:`~filecmp.dircmp` 函式的 *ignore* 參數的預設值。 （由 Eli Bendersky 在 "
":issue:`15442` 中貢獻。）"

#: ../../whatsnew/3.4.rst:851
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.4.rst:853
#, fuzzy
msgid ""
"The new :func:`~functools.partialmethod` descriptor brings partial argument "
"application to descriptors, just as :func:`~functools.partial` provides for "
"normal callables. The new descriptor also makes it easier to get arbitrary "
"callables (including :func:`~functools.partial` instances) to behave like "
"normal instance methods when included in a class definition. (Contributed by "
"Alon Horev and Nick Coghlan in :issue:`4331`.)"
msgstr ""
"新的 :func:`~functools.partialmethod` 描述器為描述器帶來了部分參數應用，就像 "
":func:`~functools.partial` "
"提供了普通的可呼叫對像一樣。新的描述器還可以更輕鬆地獲取任意可呼叫物件（包括 "
":func:`~functools.partial` "
"實例），使其在包含在類定義中時表現得像普通實例方法一樣。 （由 Alon Horev 和 "
"Nick Coghlan 在 :issue:`4331` 中貢獻。）"

#: ../../whatsnew/3.4.rst:862
#, fuzzy
msgid ""
"The new :func:`~functools.singledispatch` decorator brings support for "
"single-dispatch generic functions to the Python standard library. Where "
"object oriented programming focuses on grouping multiple operations on a "
"common set of data into a class, a generic function focuses on grouping "
"multiple implementations of an operation that allows it to work with "
"*different* kinds of data."
msgstr ""
"新的 :func:`~functools.singledispatch` 裝飾器為 Python 標準庫帶來了對單分派通"
"用函式的支援。面向物件編程側重於將對一組公開資料的多個操作分組到一個類中，而"
"通用函式側重於將一個操作的多個實作分組，使其能夠處理*不同*種類的資料。"

#: ../../whatsnew/3.4.rst:871
#, fuzzy
msgid ":pep:`443` -- Single-dispatch generic functions"
msgstr ":pep:`443` -- 單分派通用函式"

#: ../../whatsnew/3.4.rst:872
msgid "PEP written and implemented by Łukasz Langa."
msgstr "由 Łukasz Langa 撰寫 PEP 與實作。"

#: ../../whatsnew/3.4.rst:874
#, fuzzy
msgid ""
":func:`~functools.total_ordering` now supports a return value of :const:"
"`NotImplemented` from the underlying comparison function.  (Contributed by "
"Katie Miller in :issue:`10042`.)"
msgstr ""
":func:`~functools.total_ordering` "
"現在支援來自底層比較函式的回傳值 :const:`NotImplemented`。 （由 Katie Miller "
"在 :issue:`10042` 中貢獻。）"

#: ../../whatsnew/3.4.rst:878
#, fuzzy
msgid ""
"A pure-python version of the :func:`~functools.partial` function is now in "
"the stdlib; in CPython it is overridden by the C accelerated version, but it "
"is available for other implementations to use.  (Contributed by Brian Thorne "
"in :issue:`12428`.)"
msgstr ""
":func:`~functools.partial` 函式的純 Python 版本現在在標準庫中；在 CPython "
"中，它被 C 加速版本覆蓋，但它可供其他實作使用。 （由 Brian Thorne 在 "
":issue:`12428` 中貢獻。）"

#: ../../whatsnew/3.4.rst:885
msgid "gc"
msgstr "gc"

#: ../../whatsnew/3.4.rst:887
#, fuzzy
msgid ""
"New function :func:`~gc.get_stats` returns a list of three per-generation "
"dictionaries containing the collections statistics since interpreter "
"startup. (Contributed by Antoine Pitrou in :issue:`16351`.)"
msgstr ""
"新函式 :func:`~gc.get_stats` "
"回傳三個每代字典的列表，其中包含自直譯器啟動以來的集合統計資訊。 （由 "
"Antoine Pitrou 在 :issue:`16351` 中貢獻。）"

#: ../../whatsnew/3.4.rst:893
msgid "glob"
msgstr "glob"

#: ../../whatsnew/3.4.rst:895
#, fuzzy
msgid ""
"A new function :func:`~glob.escape` provides a way to escape special "
"characters in a filename so that they do not become part of the globbing "
"expansion but are instead matched literally.  (Contributed by Serhiy "
"Storchaka in :issue:`8402`.)"
msgstr ""
"新函式 :func:`~glob.escape` 提供了一種轉義文件名中特殊字元的方法，這樣它們就"
"不會成為通配擴充的一部分，而是按字面匹配。 （由 Serhiy Storchaka 在 "
":issue:`8402` 中貢獻。）"

#: ../../whatsnew/3.4.rst:901
msgid "hashlib"
msgstr "hashlib"

#: ../../whatsnew/3.4.rst:903
#, fuzzy
msgid ""
"A new :func:`hashlib.pbkdf2_hmac` function provides the `PKCS#5 password-"
"based key derivation function 2 <https://en.wikipedia.org/wiki/PBKDF2>`_.  "
"(Contributed by Christian Heimes in :issue:`18582`.)"
msgstr ""
"一個新的 :func:`hashlib.pbkdf2_hmac` 函式提供了`PKCS#5 "
"基於密碼的密鑰派生函式 2 <https://en.wikipedia.org/wiki/PBKDF2>`_。 （由 "
"Christian Heimes 在 :issue:`18582` 中貢獻。）"

#: ../../whatsnew/3.4.rst:908
#, fuzzy
msgid ""
"The :attr:`~hashlib.hash.name` attribute of :mod:`hashlib` hash objects is "
"now a formally supported interface.  It has always existed in CPython's :mod:"
"`hashlib` (although it did not return lower case names for all supported "
"hashes), but it was not a public interface and so some other Python "
"implementations have not previously supported it.  (Contributed by Jason R. "
"Coombs in :issue:`18532`.)"
msgstr ""
":attr:`~hashlib.hash.name` :mod:`hashlib` "
"散列物件的屬性現在是正式支援的介面。它一直存在於 CPython 的 :mod:`hashlib` "
"中（儘管它沒有為所有支援的雜湊回傳小寫名稱），但它不是公開介面，因此其他一些 "
"Python 實作以前不支援它。 （由 Jason R. Coombs 在 :issue:`18532` 中貢獻。）"

#: ../../whatsnew/3.4.rst:917
msgid "hmac"
msgstr "hmac"

#: ../../whatsnew/3.4.rst:919
#, fuzzy
msgid ""
":mod:`hmac` now accepts ``bytearray`` as well as ``bytes`` for the *key* "
"argument to the :func:`~hmac.new` function, and the *msg* parameter to both "
"the :func:`~hmac.new` function and the :meth:`~hmac.HMAC.update` method now "
"accepts any type supported by the :mod:`hashlib` module.  (Contributed by "
"Jonas Borgström in :issue:`18240`.)"
msgstr ""
":mod:`hmac` 現在接受 ``bytearray`` 以及 ``bytes`` 作為 :func:`~hmac.new` "
"函式的 *key* 參數，以及 :func:`~hmac.new` 的 *msg* 參數： func:`~hmac.new` "
"函式和 :meth:`~hmac.HMAC.update` 方法現在接受 :mod:`hashlib` "
"模組支援的任何型別。 （由 Jonas Borgström 在 :issue:`18240` 中貢獻。）"

#: ../../whatsnew/3.4.rst:925
#, fuzzy
msgid ""
"The *digestmod* argument to the :func:`hmac.new` function may now be any "
"hash digest name recognized by :mod:`hashlib`.  In addition, the current "
"behavior in which the value of *digestmod* defaults to ``MD5`` is "
"deprecated: in a future version of Python there will be no default value.  "
"(Contributed by Christian Heimes in :issue:`17276`.)"
msgstr ""
":func:`hmac.new` 函式的 *digestmod* 參數現在可以是 :mod:`hashlib` "
"識別的任何雜湊摘要名稱。此外，*digestmod* 的值預設為 ``MD5`` "
"的當前行為已被棄用：在未來的 Python 版本中將沒有預設值。 （由 Christian "
"Heimes 在 :issue:`17276` 中貢獻。）"

#: ../../whatsnew/3.4.rst:931
#, fuzzy
msgid ""
"With the addition of :attr:`~hmac.HMAC.block_size` and :attr:`~hmac.HMAC."
"name` attributes (and the formal documentation of the :attr:`~hmac.HMAC."
"digest_size` attribute), the :mod:`hmac` module now conforms fully to the :"
"pep:`247` API. (Contributed by Christian Heimes in :issue:`18775`.)"
msgstr ""
"通過新增 :attr:`~hmac.HMAC.block_size` 和 :attr:`~hmac.HMAC.name` 屬性（以及 "
":attr:`~hmac.HMAC.digest_size` 屬性的正式文檔）， :mod:`hmac` "
"模組現在完全符合 :pep:`247` API。 （由 Christian Heimes 在 :issue:`18775` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:938
msgid "html"
msgstr "html"

#: ../../whatsnew/3.4.rst:940
#, fuzzy
msgid ""
"New function :func:`~html.unescape` function converts HTML5 character "
"references to the corresponding Unicode characters.  (Contributed by Ezio "
"Melotti in :issue:`2927`.)"
msgstr ""
"新函式 :func:`~html.unescape` 函式將 HTML5 字元引用轉換為相應的 Unicode "
"字元。 （由 Ezio Melotti 在 :issue:`2927` 中貢獻。）"

#: ../../whatsnew/3.4.rst:944
#, fuzzy
msgid ""
":class:`~html.parser.HTMLParser` accepts a new keyword argument "
"*convert_charrefs* that, when ``True``, automatically converts all character "
"references.  For backward-compatibility, its value defaults to ``False``, "
"but it will change to ``True`` in a future version of Python, so you are "
"invited to set it explicitly and update your code to use this new feature.  "
"(Contributed by Ezio Melotti in :issue:`13633`.)"
msgstr ""
":class:`~html.parser.HTMLParser` 接受一個新的關鍵字參數 *convert_charrefs*，"
"當 ``True`` 時，自動轉換所有字元引用。為了向後相容，它的值預設為 ``False``，"
"但在未來的 Python 版本中它將更改為 ``True``，因此我們邀請您明確設定它並更新您的"
"程式碼以使用此新功能。 （由 Ezio Melotti 在 :issue:`13633` 中貢獻。）"

#: ../../whatsnew/3.4.rst:951
#, fuzzy
msgid ""
"The *strict* argument of :class:`~html.parser.HTMLParser` is now deprecated. "
"(Contributed by Ezio Melotti in :issue:`15114`.)"
msgstr ""
":class:`~html.parser.HTMLParser` 的 *strict* 參數現已棄用。 （由 Ezio "
"Melotti 在 :issue:`15114` 中貢獻。）"

#: ../../whatsnew/3.4.rst:956
msgid "http"
msgstr "http"

#: ../../whatsnew/3.4.rst:958
#, fuzzy
msgid ""
":meth:`~http.server.BaseHTTPRequestHandler.send_error` now accepts an "
"optional additional *explain* parameter which can be used to provide an "
"extended error description, overriding the hardcoded default if there is "
"one. This extended error description will be formatted using the :attr:"
"`~http.server.HTTP.error_message_format` attribute and sent as the body of "
"the error response.  (Contributed by Karl Cow in :issue:`12921`.)"
msgstr ""
":meth:`~http.server.BaseHTTPRequestHandler.send_error` "
"現在接受一個可選的附加 *explain* "
"參數，該參數可用於提供擴充的錯誤描述，覆蓋硬編碼的預設值（如果有的話）。"
"此擴充錯誤描述將使用 :attr:`~http.server.HTTP.error_message_format` "
"屬性進行格式化，並作為錯誤響應的主體發送。 （由 Karl Cow 在 :issue:`12921` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:965
#, fuzzy
msgid ""
"The :mod:`http.server` :ref:`command line interface <http-server-cli>` now "
"has a ``-b/--bind`` option that causes the server to listen on a specific "
"address. (Contributed by Malte Swart in :issue:`17764`.)"
msgstr ""
":mod:`http.server` :ref:`命令列界面 <http-server-cli>` 現在有一個 ``-b/"
"--bind`` 選項，使伺服器監聽特定地址。 （由 Malte Swart 在 :issue:`17764` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:971
#, fuzzy
msgid "idlelib and IDLE"
msgstr "空閒庫和空閒"

#: ../../whatsnew/3.4.rst:973
#, fuzzy
msgid ""
"Since idlelib implements the IDLE shell and editor and is not intended for "
"import by other programs, it gets improvements with every release. See :file:"
"`Lib/idlelib/NEWS.txt` for a cumulative list of changes since 3.3.0, as well "
"as changes made in future 3.4.x releases. This file is also available from "
"the IDLE :menuselection:`Help --> About IDLE` dialog."
msgstr ""
"由於 idlelib 實作了 IDLE shell 和編輯器，並且不打算由其他程式導入，因此它在每"
"個版本中都得到了改進。請參閱 :file:`Lib/idlelib/NEWS.txt` 以獲取自 3.3.0 "
"以來的累積更改列表，以及未來 3.4.x 版本中所做的更改。此文件也可從 IDLE "
":menuselection:`Help --> About IDLE` 對話框中獲得。"

#: ../../whatsnew/3.4.rst:981
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.4.rst:983
#, fuzzy
msgid ""
"The :class:`~importlib.abc.InspectLoader` ABC defines a new method, :meth:"
"`~importlib.abc.InspectLoader.source_to_code` that accepts source data and a "
"path and returns a code object.  The default implementation is equivalent to "
"``compile(data, path, 'exec', dont_inherit=True)``. (Contributed by Eric "
"Snow and Brett Cannon in :issue:`15627`.)"
msgstr ""
":class:`~importlib.abc.InspectLoader` ABC 定義了一個新方法 :meth:`~importlib."
"abc.InspectLoader.source_to_code` "
"接受源資料和路徑並回傳程式碼物件。預設實作相當於``compile(data, path, "
"'exec', dont_inherit=True)``。 （由 Eric Snow 和 Brett Cannon 在 "
":issue:`15627` 中貢獻。）"

#: ../../whatsnew/3.4.rst:989
#, fuzzy
msgid ""
":class:`~importlib.abc.InspectLoader` also now has a default implementation "
"for the :meth:`~importlib.abc.InspectLoader.get_code` method.  However, it "
"will normally be desirable to override the default implementation for "
"performance reasons.  (Contributed by Brett Cannon in :issue:`18072`.)"
msgstr ""
":class:`~importlib.abc.InspectLoader` 現在也有 :meth:`~importlib.abc."
"InspectLoader.get_code` "
"方法的預設實作。但是，出於性能原因，通常需要覆蓋預設實作。 （由 Brett Cannon "
"在 :issue:`18072` 中貢獻。）"

#: ../../whatsnew/3.4.rst:994
#, fuzzy
msgid ""
"The :func:`~importlib.reload` function has been moved from :mod:`imp` to :"
"mod:`importlib` as part of the :mod:`imp` module deprecation.  (Contributed "
"by Berker Peksag in :issue:`18193`.)"
msgstr ""
":func:`~importlib.reload` 函式已從 :mod:`imp` 移動到 :mod:`importlib` 作為 "
":mod:`imp` 模組棄用的一部分。 （由 Berker Peksag 在 :issue:`18193` 中貢獻。）"

#: ../../whatsnew/3.4.rst:998
#, fuzzy
msgid ""
":mod:`importlib.util` now has a :data:`~importlib.util.MAGIC_NUMBER` "
"attribute providing access to the bytecode version number.  This replaces "
"the :func:`~imp.get_magic` function in the deprecated :mod:`imp` module. "
"(Contributed by Brett Cannon in :issue:`18192`.)"
msgstr ""
":mod:`importlib.util` 現在有一個 :data:`~importlib.util.MAGIC_NUMBER` "
"屬性提供對位元組碼版本號的訪問。這取代了已棄用的 :mod:`imp` 模組中的 "
":func:`~imp.get_magic` 函式。 （由 Brett Cannon 在 :issue:`18192` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1003
#, fuzzy
msgid ""
"New :mod:`importlib.util` functions :func:`~importlib.util."
"cache_from_source` and :func:`~importlib.util.source_from_cache` replace the "
"same-named functions in the deprecated :mod:`imp` module.  (Contributed by "
"Brett Cannon in :issue:`18194`.)"
msgstr ""
"新的 :mod:`importlib.util` 函式 :func:`~importlib.util.cache_from_source` 和 "
":func:`~importlib.util.source_from_cache` 替換了已棄用的 :mod:`imp` "
"模組中的同名函式。 （由 Brett Cannon 在 :issue:`18194` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1008
#, fuzzy
msgid ""
"The :mod:`importlib` bootstrap :class:`.NamespaceLoader` now conforms to "
"the :class:`.InspectLoader` ABC, which means that ``runpy`` and ``python -"
"m`` can now be used with namespace packages.  (Contributed by Brett Cannon "
"in :issue:`18058`.)"
msgstr ""
":mod:`importlib` 引導程式 :class:`.NamespaceLoader` 現在符合 :class:`."
"InspectLoader` ABC，這意味著 ``runpy`` 和 ``python -m`` "
"現在可以與命名空間一起使用包裹。 （由 Brett Cannon 在 :issue:`18058` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:1013
#, fuzzy
msgid ""
":mod:`importlib.util` has a new function :func:`~importlib.util."
"decode_source` that decodes source from bytes using universal newline "
"processing.  This is useful for implementing :meth:`.InspectLoader."
"get_source` methods."
msgstr ""
":mod:`importlib.util` 有一個新函式 :func:`~importlib.util.decode_source` "
"使用通用換行處理從位元組解碼源。這對於實作 :meth:`.InspectLoader.get_source` "
"方法很有用。"

#: ../../whatsnew/3.4.rst:1017
#, fuzzy
msgid ""
":class:`importlib.machinery.ExtensionFileLoader` now has a :meth:`~importlib."
"machinery.ExtensionFileLoader.get_filename` method.  This was inadvertently "
"omitted in the original implementation.  (Contributed by Eric Snow in :issue:"
"`19152`.)"
msgstr ""
":class:`importlib.machinery.ExtensionFileLoader` 現在有一個 :meth:`~importlib."
"machinery.ExtensionFileLoader.get_filename` "
"方法。這在最初的實作中被無意中省略了。 （由 Eric Snow 在 :issue:`19152` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:1024
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.4.rst:1026
#, fuzzy
msgid ""
"The :mod:`inspect` module now offers a basic :ref:`command line interface "
"<inspect-module-cli>` to quickly display source code and other information "
"for modules, classes and functions.  (Contributed by Claudiu Popa and Nick "
"Coghlan in :issue:`18626`.)"
msgstr ""
":mod:`inspect` 模組現在提供了一個基本的 :ref:`命令列界面 <inspect-module-cli>`"
" 來快速顯示模組、類和函式的源程式碼和其他資訊。 （由 Claudiu Popa 和 Nick "
"Coghlan 在 :issue:`18626` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1031
#, fuzzy
msgid ""
":func:`~inspect.unwrap` makes it easy to unravel wrapper function chains "
"created by :func:`functools.wraps` (and any other API that sets the "
"``__wrapped__`` attribute on a wrapper function).  (Contributed by Daniel "
"Urban, Aaron Iles and Nick Coghlan in :issue:`13266`.)"
msgstr ""
":func:`~inspect.unwrap` 可以輕鬆解開由 :func:`functools.wraps` "
"建立的包裝器函式鏈（以及任何其他在包裝器函式上設定 ``__wrapped__`` 屬性的 "
"API）。 （由 Daniel Urban、Aaron Iles 和 Nick Coghlan 在 :issue:`13266` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:1036
#, fuzzy
msgid ""
"As part of the implementation of the new :mod:`enum` module, the :mod:"
"`inspect` module now has substantially better support for custom ``__dir__`` "
"methods and dynamic class attributes provided through metaclasses.  "
"(Contributed by Ethan Furman in :issue:`18929` and :issue:`19030`.)"
msgstr ""
"作為新 :mod:`enum` 模組實作的一部分，:mod:`inspect` 模組現在對自定義 __dir__ "
"方法和通過元類提供的動態類屬性有了更好的支援。 （由 Ethan Furman 在 "
":issue:`18929` 和 :issue:`19030` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1042
#, fuzzy
msgid ""
":func:`~inspect.getfullargspec` and :func:`~inspect.getargspec` now use the :"
"func:`~inspect.signature` API. This allows them to support a much broader "
"range of callables, including those with ``__signature__`` attributes, those "
"with metadata provided by argument clinic, :func:`functools.partial` objects "
"and more. Note that, unlike :func:`~inspect.signature`, these functions "
"still ignore ``__wrapped__`` attributes, and report the already bound first "
"argument for bound methods, so it is still necessary to update your code to "
"use :func:`~inspect.signature` directly if those features are desired. "
"(Contributed by Yury Selivanov in :issue:`17481`.)"
msgstr ""
":func:`~inspect.getfullargspec` 和 :func:`~inspect.getargspec` 現在使用 "
":func:`~inspect.signature` API。這使它們能夠支援範圍更廣的可呼叫物件，"
"包括具有 ``__signature__`` 屬性的物件、具有 argument clinic "
"提供的元資料的物件、:func:`functools.partial` 對像等。請注意，與 "
":func:`~inspect.signature` 不同，這些函式仍然忽略 ``__wrapped__`` "
"屬性，並報告已綁定方法的第一個參數，因此仍然需要更新程式碼以使用 "
":func:如果需要這些功能，請直接`~inspect.signature`。 （由 Yury Selivanov 在 "
":issue:`17481` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1053
#, fuzzy
msgid ""
":func:`~inspect.signature` now supports duck types of CPython functions, "
"which adds support for functions compiled with Cython.  (Contributed by "
"Stefan Behnel and Yury Selivanov in :issue:`17159`.)"
msgstr ""
":func:`~inspect.signature` 現在支援 duck 型別的 CPython 函式，這增加了對使用 "
"Cython 編譯的函式的支援。 （由 Stefan Behnel 和 Yury Selivanov 在 "
":issue:`17159` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1059
msgid "ipaddress"
msgstr "ipaddress"

#: ../../whatsnew/3.4.rst:1061
#, fuzzy
msgid ""
":mod:`ipaddress` was added to the standard library in Python 3.3 as a :term:"
"`provisional API`. With the release of Python 3.4, this qualification has "
"been removed: :mod:`ipaddress` is now considered a stable API, covered by "
"the normal standard library requirements to maintain backwards compatibility."
msgstr ""
":mod:`ipaddress` 作為 :term:`provisional API` 新增到 Python 3.3 的標準庫中。"
"隨著 Python 3.4 的發布，這個限定已被刪除：:mod:`ipaddress` "
"現在被認為是一個穩定的 API，包含在正常的標準庫要求中以保持向後相容性。"

#: ../../whatsnew/3.4.rst:1067
#, fuzzy
msgid ""
"A new :attr:`~ipaddress.IPv4Address.is_global` property is ``True`` if an "
"address is globally routeable.  (Contributed by Peter Moody in :issue:"
"`17400`.)"
msgstr ""
"如果地址是全局可路由的，則新的 :attr:`~ipaddress.IPv4Address.is_global` "
"屬性為 ``True``。 （由 Peter Moody 在 :issue:`17400` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1073
msgid "logging"
msgstr "logging"

#: ../../whatsnew/3.4.rst:1075
#, fuzzy
msgid ""
"The :class:`~logging.handlers.TimedRotatingFileHandler` has a new *atTime* "
"parameter that can be used to specify the time of day when rollover should "
"happen.  (Contributed by Ronald Oussoren in :issue:`9556`.)"
msgstr ""
":class:`~logging.handlers.TimedRotatingFileHandler` 有一個新的 *atTime* "
"參數，可用於指定翻轉應該發生的時間。 （由 Ronald Oussoren 在 :issue:`9556` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:1079
#, fuzzy
msgid ""
":class:`~logging.handlers.SocketHandler` and :class:`~logging.handlers."
"DatagramHandler` now support Unix domain sockets (by setting *port* to "
"``None``).  (Contributed by Vinay Sajip in commit ce46195b56a9.)"
msgstr ""
":class:`~logging.handlers.SocketHandler` 和 :class:`~logging.handlers."
"DatagramHandler` 現在支援 Unix 域 socket （通過將 *port* 設定為 ``None``）。 （"
"由 Vinay Sajip 在提交 ce46195b56a9 中貢獻。）"

#: ../../whatsnew/3.4.rst:1084
#, fuzzy
msgid ""
":func:`~logging.config.fileConfig` now accepts a :class:`configparser."
"RawConfigParser` subclass instance for the *fname* parameter.  This "
"facilitates using a configuration file when logging configuration is just a "
"part of the overall application configuration, or where the application "
"modifies the configuration before passing it to :func:`~logging.config."
"fileConfig`.  (Contributed by Vinay Sajip in :issue:`16110`.)"
msgstr ""
":func:`~logging.config.fileConfig` 現在接受 *fname* 參數的 "
":class:`configparser.RawConfigParser` "
"子類別實例。當日誌記錄配置只是整個應用程式配置的一部分時，"
"或者應用程式在將配置傳遞給 :func:`~logging.config.fileConfig` "
"之前修改配置時，這有助於使用配置文件。 （由 Vinay Sajip 在 :issue:`16110` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:1092
#, fuzzy
msgid ""
"Logging configuration data received from a socket via the :func:`logging."
"config.listen` function can now be validated before being processed by "
"supplying a verification function as the argument to the new *verify* "
"keyword argument.  (Contributed by Vinay Sajip in :issue:`15452`.)"
msgstr ""
"通過 :func:`logging.config.listen` "
"函式從 socket 接收的日誌配置資料現在可以在通過提供驗證函式作為新的 *verify* "
"關鍵字參數的參數進行處理之前進行驗證。 （由 Vinay Sajip 在 :issue:`15452` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:1101
msgid "marshal"
msgstr "marshal"

#: ../../whatsnew/3.4.rst:1103
#, fuzzy
msgid ""
"The default :mod:`marshal` version has been bumped to 3.  The code "
"implementing the new version restores the Python2 behavior of recording only "
"one copy of interned strings and preserving the interning on "
"deserialization, and extends this \"one copy\" ability to any object type "
"(including handling recursive references).  This reduces both the size of ``."
"pyc`` files and the amount of memory a module occupies in memory when it is "
"loaded from a ``.pyc`` (or ``.pyo``) file.  (Contributed by Kristján Valur "
"Jónsson in :issue:`16475`, with additional speedups by Antoine Pitrou in :"
"issue:`19219`.)"
msgstr ""
"預設的 :mod:`marshal` 版本已經提升到 3。實作新版本的程式碼恢復了 Python2 的行"
"為，即只記錄一份實習字串並在反序列化時保留實習，並將這種“一份”能力擴充到任何"
"對像型別（包括處理遞迴引用）。這既減少了 .pyc 文件的大小，也減少了模組從 ."
"pyc（或 .pyo）文件加載時在記憶體中佔用的記憶體量。 （由 Kristján Valur "
"Jónsson 在 :issue:`16475` 中貢獻，Antoine Pitrou 在 :issue:`19219` "
"中進一步加速。）"

#: ../../whatsnew/3.4.rst:1114
msgid "mmap"
msgstr "mmap"

#: ../../whatsnew/3.4.rst:1116
#, fuzzy
msgid ""
"mmap objects are now :ref:`weakly referenceable <mod-weakref>`. (Contributed "
"by Valerie Lambert in :issue:`4885`.)"
msgstr ""
"mmap 物件現在是 :ref:`可弱引用 <mod-weakref>`。 （由 Valerie Lambert 在 "
":issue:`4885` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1121
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.4.rst:1125
#, fuzzy
msgid ""
"On Unix two new :ref:`start methods <multiprocessing-start-methods>`, "
"``spawn`` and ``forkserver``, have been added for starting processes using :"
"mod:`multiprocessing`.  These make the mixing of processes with threads more "
"robust, and the ``spawn`` method matches the semantics that multiprocessing "
"has always used on Windows.  New function :func:`~multiprocessing."
"get_all_start_methods` reports all start methods available on the platform, :"
"func:`~multiprocessing.get_start_method` reports the current start method, "
"and :func:`~multiprocessing.set_start_method` sets the start method.  "
"(Contributed by Richard Oudkerk in :issue:`8713`.)"
msgstr ""
"在 Unix 上，新增了兩個新的啟動方法 <multiprocessing-start-methods>、spawn 和 "
"forkserver，用於使用 multiprocessing "
"啟動行程。這些使得行程與執行緒的混合更加健壯，並且 ``spawn`` "
"方法與多處理一直在 Windows 上使用的語義相匹配。新函式 :func:`~multiprocessing"
".get_all_start_methods` 報告平台上可用的所有啟動方法， "
":func:`~multiprocessing.get_start_method` 報告當前啟動方法， "
":func:`~multiprocessing.set_start_method` 設定啟動方法。 （由 Richard "
"Oudkerk 在 :issue:`8713` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1135
#, fuzzy
msgid ""
":mod:`multiprocessing` also now has the concept of a ``context``, which "
"determines how child processes are created.  New function :func:"
"`~multiprocessing.get_context` returns a context that uses a specified start "
"method.  It has the same API as the :mod:`multiprocessing` module itself, so "
"you can use it to create :class:`~multiprocessing.pool.Pool`\\ s and other "
"objects that will operate within that context.  This allows a framework and "
"an application or different parts of the same application to use "
"multiprocessing without interfering with each other.  (Contributed by "
"Richard Oudkerk in :issue:`18999`.)"
msgstr ""
":mod:`multiprocessing` 現在也有了 ``context`` "
"的概念，它決定瞭如何建立子行程。新函式 :func:`~multiprocessing.get_context` "
"回傳使用指定啟動方法的上下文。它與 :mod:`multiprocessing` 模組本身俱有相同的 "
"API，因此您可以使用它來建立 :class:`~multiprocessing.pool.Pool`\\ 以及將在該"
"上下文中運行的其他物件。這允許框架和應用程式或同一應用程式的不同部分使用多處"
"理而不會相互干擾。 （由 Richard Oudkerk 在 :issue:`18999` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1145
#, fuzzy
msgid ""
"Except when using the old *fork* start method, child processes no longer "
"inherit unneeded handles/file descriptors from their parents (part of :issue:"
"`8713`)."
msgstr "除非使用舊的 *fork* 啟動方法，子行程不再從其父行程繼承不需要的句柄/文件描述器"
"（部分 :issue:`8713`）。"

#: ../../whatsnew/3.4.rst:1149
#, fuzzy
msgid ""
":mod:`multiprocessing` now relies on :mod:`runpy` (which implements the ``-"
"m`` switch) to initialise ``__main__`` appropriately in child processes when "
"using the ``spawn`` or ``forkserver`` start methods. This resolves some edge "
"cases where combining multiprocessing, the ``-m`` command line switch, and "
"explicit relative imports could cause obscure failures in child processes.  "
"(Contributed by Nick Coghlan in :issue:`19946`.)"
msgstr ""
":mod:`multiprocessing` 現在依賴於 :mod:`runpy`（它實作了 ``-m`` 開關）在使用 "
"``spawn`` 或 ``forkserver 時在子行程中適當地初始化 ``__main__`` `` "
"啟動方法。這解決了一些邊緣情況，在這些情況下，組合多處理、``-m`` "
"命令列開關和顯式相對導入可能會導致子行程出現模糊的故障。 （由 Nick Coghlan "
"在 :issue:`19946` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1158
msgid "operator"
msgstr "operator"

#: ../../whatsnew/3.4.rst:1160
#, fuzzy
msgid ""
"New function :func:`~operator.length_hint` provides an implementation of the "
"specification for how the :meth:`~object.__length_hint__` special method "
"should be used, as part of the :pep:`424` formal specification of this "
"language feature.  (Contributed by Armin Ronacher in :issue:`16148`.)"
msgstr ""
"新函式 :func:`~operator.length_hint` 提供了關於如何使用 :meth:`~object."
"__length_hint__` 特殊方法的規範的實作，作為該語言的 :pep:`424` "
"正式規範的一部分特徵。 （由 Armin Ronacher 在 :issue:`16148` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1165
#, fuzzy
msgid ""
"There is now a pure-python version of the :mod:`operator` module available "
"for reference and for use by alternate implementations of Python.  "
"(Contributed by Zachary Ware in :issue:`16694`.)"
msgstr ""
"現在有一個純 python 版本的 :mod:`operator` 模組可供參考，供 Python "
"的替代實作使用。 （由 Zachary Ware 在 :issue:`16694` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1171
msgid "os"
msgstr "os"

#: ../../whatsnew/3.4.rst:1173
#, fuzzy
msgid ""
"There are new functions to get and set the :ref:`inheritable flag "
"<fd_inheritance>` of a file descriptor (:func:`os.get_inheritable`, :func:"
"`os.set_inheritable`) or a Windows handle (:func:`os."
"get_handle_inheritable`, :func:`os.set_handle_inheritable`)."
msgstr ""
"有一些新函式可以獲取和設定文件描述器（:func:`os.get_inheritable`、:func:`os."
"set_inheritable`）或 Windows 句柄（:func: `os.get_handle_inheritable`, "
":func:`os.set_handle_inheritable`）。"

#: ../../whatsnew/3.4.rst:1178
#, fuzzy
msgid ""
"New function :func:`~os.cpu_count` reports the number of CPUs available on "
"the platform on which Python is running (or ``None`` if the count can't be "
"determined).  The :func:`multiprocessing.cpu_count` function is now "
"implemented in terms of this function).  (Contributed by Trent Nelson, "
"Yogesh Chaudhari, Victor Stinner, and Charles-François Natali in :issue:"
"`17914`.)"
msgstr ""
"新函式 :func:`~os.cpu_count` 報告運行 Python 的平台上可用的 CPU "
"數量（如果無法確定計數，則為 ``None``）。 :func:`multiprocessing.cpu_count` "
"函式現在根據此函式實作）。 （由 Trent Nelson、Yogesh Chaudhari、Victor "
"Stinner 和 Charles-François Natali 在 :issue:`17914` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1184
#, fuzzy
msgid ""
":func:`os.path.samestat` is now available on the Windows platform (and the :"
"func:`os.path.samefile` implementation is now shared between Unix and "
"Windows).  (Contributed by Brian Curtin in :issue:`11939`.)"
msgstr ""
":func:`os.path.samestat` 現在可在 Windows 平台上使用（並且 :func:`os.path."
"samefile` 實作現在在 Unix 和 Windows 之間共享）。 （由 Brian Curtin 在 "
":issue:`11939` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1188
#, fuzzy
msgid ""
":func:`os.path.ismount` now recognizes volumes mounted below a drive root on "
"Windows.  (Contributed by Tim Golden in :issue:`9035`.)"
msgstr ""
":func:`os.path.ismount` 現在可以識別安裝在 Windows 驅動器根目錄下的捲。 （由 "
"Tim Golden 在 :issue:`9035` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1191
#, fuzzy
msgid ""
":func:`os.open` supports two new flags on platforms that provide them, :data:"
"`~os.O_PATH` (un-opened file descriptor), and :data:`~os.O_TMPFILE` (unnamed "
"temporary file; as of 3.4.0 release available only on Linux systems with a "
"kernel version of 3.11 or newer that have uapi headers).  (Contributed by "
"Christian Heimes in :issue:`18673` and Benjamin Peterson, respectively.)"
msgstr ""
":func:`os.open` 在提供它們的平台上支援兩個新旗標，:data:`~os."
"O_PATH`（未打開的文件描述器）和 :data:`~os.O_TMPFILE`（未命名的臨時文件；從 "
"3.4.0 版本開始，僅在內核版本為 3.11 或更新版本且具有 uapi 標頭的 Linux "
"系統上可用）。 （分別由 Christian Heimes 在 :issue:`18673` 和 Benjamin "
"Peterson 中貢獻。）"

#: ../../whatsnew/3.4.rst:1199
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.4.rst:1201
#, fuzzy
msgid ""
":mod:`pdb` has been enhanced to handle generators, :keyword:`yield`, and "
"``yield from`` in a more useful fashion.  This is especially helpful when "
"debugging :mod:`asyncio` based programs.  (Contributed by Andrew Svetlov and "
"Xavier de Gaye in :issue:`16596`.)"
msgstr ""
":mod:`pdb` 已得到增強，可以以更有用的方式處理生成器、:keyword:`yield` 和 ``"
"yield from``。這在除錯基於 :mod:`asyncio` 的程式時特別有用。 （由 Andrew "
"Svetlov 和 Xavier de Gaye 在 :issue:`16596` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1206
#, fuzzy
msgid ""
"The ``print`` command has been removed from :mod:`pdb`, restoring access to "
"the Python :func:`print` function from the pdb command line.  Python2's "
"``pdb`` did not have a ``print`` command; instead, entering ``print`` "
"executed the ``print`` statement.  In Python3 ``print`` was mistakenly made "
"an alias for the pdb :pdbcmd:`p` command.  ``p``, however, prints the "
"``repr`` of its argument, not the ``str`` like the Python2 ``print`` command "
"did.  Worse, the Python3 ``pdb print`` command shadowed the Python3 "
"``print`` function, making it inaccessible at the ``pdb`` prompt.  "
"(Contributed by Connor Osborn in :issue:`18764`.)"
msgstr ""
"``print`` 命令已從 :mod:`pdb` 中刪除，恢復從 pdb 命令列訪問 Python "
":func:`print` 函式。 Python2 的 ``pdb`` 沒有 ``print`` 命令；相反，輸入 "
"``print`` 會執行 ``print`` 語句。在 Python3 中，``print`` 被錯誤地作為 pdb "
":pdbcmd:`p` 命令的別名。但是，``p`` 印出其參數的 ``repr``，而不是像 Python2 "
"``print`` 命令那樣印出 ``str``。更糟糕的是，Python3 ``pdb print`` 命令隱藏了 "
"Python3 ``print`` 函式，使其無法在 ``pdb`` 提示符下訪問。 （由 Connor Osborn "
"在 :issue:`18764` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1220
msgid "pickle"
msgstr "pickle"

#: ../../whatsnew/3.4.rst:1222
#, fuzzy
msgid ""
":mod:`pickle` now supports (but does not use by default) a new pickle "
"protocol, protocol 4.  This new protocol addresses a number of issues that "
"were present in previous protocols, such as the serialization of nested "
"classes, very large strings and containers, and classes whose :meth:"
"`__new__` method takes keyword-only arguments.  It also provides some "
"efficiency improvements."
msgstr ""
":mod:`pickle` 現在支援（但預設情況下不使用）一個新的 pickle 協定，協定 4。這"
"個新協定解決了以前協定中存在的許多問題，例如嵌套類的序列化，非常大的字串和容"
"器，以及其 :meth:`__new__` 方法僅接受關鍵字參數的類。它還提供了一些效率改進。"

#: ../../whatsnew/3.4.rst:1230
#, fuzzy
msgid ":pep:`3154` -- Pickle protocol 4"
msgstr ":pep:`3154` -- Pickle 協定 4"

#: ../../whatsnew/3.4.rst:1231
msgid "PEP written by Antoine Pitrou and implemented by Alexandre Vassalotti."
msgstr "由 Antoine Pitrou 撰寫 PEP、Alexandre Vassalotti 實作。"

#: ../../whatsnew/3.4.rst:1235
msgid "plistlib"
msgstr "plistlib"

#: ../../whatsnew/3.4.rst:1237
#, fuzzy
msgid ""
":mod:`plistlib` now has an API that is similar to the standard pattern for "
"stdlib serialization protocols, with new :func:`~plistlib.load`, :func:"
"`~plistlib.dump`, :func:`~plistlib.loads`, and :func:`~plistlib.dumps` "
"functions.  (The older API is now deprecated.)  In addition to the already "
"supported XML plist format (:data:`~plistlib.FMT_XML`), it also now supports "
"the binary plist format (:data:`~plistlib.FMT_BINARY`).  (Contributed by "
"Ronald Oussoren and others in :issue:`14455`.)"
msgstr ""
":mod:`plistlib` 現在有一個類似於 stdlib 序列化協定的標準模式的 "
"API，具有新的 :func:`~plistlib.load`、:func:`~plistlib.dump`、:func:`~"
"plistlib .loads` 和 :func:`~plistlib.dumps` 函式。 （舊的 API "
"現在已被棄用。）除了已經支援的 XML plist 格式（:data:`~plistlib.FMT_XML`），"
"它現在還支援二進位 plist 格式（:data:`~plistlib.FMT_BINARY`）。 （由 Ronald "
"Oussoren 和其他人在 :issue:`14455` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1247
msgid "poplib"
msgstr "poplib"

#: ../../whatsnew/3.4.rst:1249
#, fuzzy
msgid ""
"Two new methods have been added to :mod:`poplib`: :meth:`~poplib.POP3.capa`, "
"which returns the list of capabilities advertised by the POP server, and :"
"meth:`~poplib.POP3.stls`, which switches a clear-text POP3 session into an "
"encrypted POP3 session if the POP server supports it.  (Contributed by "
"Lorenzo Catucci in :issue:`4473`.)"
msgstr ""
"兩個新方法已新增到 :mod:`poplib`：:meth:`~poplib.POP3.capa`，它回傳 POP "
"伺服器公佈的功能列表，以及 :meth:`~poplib.POP3.stls` , 如果 POP 伺服器支援，"
"它將明文 POP3 會話切換為加密的 POP3 會話。 （由 Lorenzo Catucci 在 "
":issue:`4473` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1257
msgid "pprint"
msgstr "pprint"

#: ../../whatsnew/3.4.rst:1259
#, fuzzy
msgid ""
"The :mod:`pprint` module's :class:`~pprint.PrettyPrinter` class and its :"
"func:`~pprint.pformat`, and :func:`~pprint.pprint` functions have a new "
"option, *compact*, that controls how the output is formatted.  Currently "
"setting *compact* to ``True`` means that sequences will be printed with as "
"many sequence elements as will fit within *width* on each (indented) line. "
"(Contributed by Serhiy Storchaka in :issue:`19132`.)"
msgstr ""
":mod:`pprint` 模組的 :class:`~pprint.PrettyPrinter` 類及其 :func:`~pprint."
"pformat` 和 :func:`~pprint.pprint` "
"函式有一個新選項，*compact*，控制輸出的格式。當前將 *compact* 設定為 ``True``"
" 意味著序列將印出出與每個（縮進）行上的 *width* 適合的序列元素一樣多。 （由 "
"Serhiy Storchaka 在 :issue:`19132` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1266
#, fuzzy
msgid ""
"Long strings are now wrapped using Python's normal line continuation "
"syntax.  (Contributed by Antoine Pitrou in :issue:`17150`.)"
msgstr "長字串現在使用 Python 的普通行連續語法進行包裝。 （由 Antoine Pitrou 在 "
":issue:`17150` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1271
msgid "pty"
msgstr "pty"

#: ../../whatsnew/3.4.rst:1273
#, fuzzy
msgid ""
":func:`pty.spawn` now returns the status value from :func:`os.waitpid` on "
"the child process, instead of ``None``.  (Contributed by Gregory P. Smith.)"
msgstr ""
":func:`pty.spawn` 現在在子行程上回傳來自 :func:`os.waitpid` 的狀態值，而不是 "
"``None``。 （由 Gregory P. Smith 提供。）"

#: ../../whatsnew/3.4.rst:1278
msgid "pydoc"
msgstr "pydoc"

#: ../../whatsnew/3.4.rst:1280
#, fuzzy
msgid ""
"The :mod:`pydoc` module is now based directly on the :func:`inspect."
"signature` introspection API, allowing it to provide signature information "
"for a wider variety of callable objects. This change also means that "
"``__wrapped__`` attributes are now taken into account when displaying help "
"information. (Contributed by Larry Hastings in :issue:`19674`.)"
msgstr ""
":mod:`pydoc` 模組現在直接基於 :func:`inspect.signature` 自省 "
"API，允許它為更廣泛的可呼叫物件提供簽名資訊。"
"此更改還意味著現在在顯示幫助資訊時會考慮 ``__wrapped__`` 屬性。 （由 Larry "
"Hastings 在 :issue:`19674` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1286
#, fuzzy
msgid ""
"The :mod:`pydoc` module no longer displays the ``self`` parameter for "
"already bound methods. Instead, it aims to always display the exact current "
"signature of the supplied callable.  (Contributed by Larry Hastings in :"
"issue:`20710`.)"
msgstr ""
":mod:`pydoc` 模組不再顯示已綁定方法的 ``self`` "
"參數。相反，它旨在始終顯示所提供的可呼叫物件的準確當前簽名。 （由 Larry "
"Hastings 在 :issue:`20710` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1291
#, fuzzy
msgid ""
"In addition to the changes that have been made to :mod:`pydoc` directly, its "
"handling of custom ``__dir__`` methods and various descriptor behaviours has "
"also been improved substantially by the underlying changes in the :mod:"
"`inspect` module."
msgstr ""
"除了直接對 :mod:`pydoc` 進行的更改外，它對自定義 ``__dir__`` "
"方法和各種描述器行為的處理也通過 :mod:`inspect` "
"模組中的基礎更改得到了實質性改進."

#: ../../whatsnew/3.4.rst:1296
#, fuzzy
msgid ""
"As the :func:`help` builtin is based on :mod:`pydoc`, the above changes also "
"affect the behaviour of :func:`help`."
msgstr "由於內建的 :func:`help` 是基於 :mod:`pydoc` 的，因此上述更改也會影響 "
":func:`help` 的行為。"

#: ../../whatsnew/3.4.rst:1301
msgid "re"
msgstr "re"

#: ../../whatsnew/3.4.rst:1303
#, fuzzy
msgid ""
"New :func:`~re.fullmatch` function and :meth:`.regex.fullmatch` method "
"anchor the pattern at both ends of the string to match.  This provides a way "
"to be explicit about the goal of the match, which avoids a class of subtle "
"bugs where ``$`` characters get lost during code changes or the addition of "
"alternatives to an existing regular expression.  (Contributed by Matthew "
"Barnett in :issue:`16203`.)"
msgstr ""
"新的 :func:`~re.fullmatch` 函式和 :meth:`.regex.fullmatch` "
"方法將模式錨定在要匹配的字串的兩端。這提供了一種明確匹配目標的方法，"
"從而避免了在程式碼更改或向現有正則表達式新增替代項時丟失 ``$`` "
"字元的一類細微錯誤。 （由 Matthew Barnett 在 :issue:`16203` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1310
#, fuzzy
msgid ""
"The repr of :ref:`regex objects <re-objects>` now includes the pattern and "
"the flags; the repr of :ref:`match objects <match-objects>` now includes the "
"start, end, and the part of the string that matched.  (Contributed by Hugo "
"Lopes Tavares and Serhiy Storchaka in :issue:`13592` and :issue:`17087`.)"
msgstr ""
":ref:`regex objects <re-objects>` 的 repr 現在包括模式和旗標； :ref:`match "
"objects <match-objects>` 的 repr 現在包括開始、結束和匹配的字串部分。 （由 "
"Hugo Lopes Tavares 和 Serhiy Storchaka 在 :issue:`13592` 和 :issue:`17087` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:1318
msgid "resource"
msgstr "resource"

#: ../../whatsnew/3.4.rst:1320
#, fuzzy
msgid ""
"New :func:`~resource.prlimit` function, available on Linux platforms with a "
"kernel version of 2.6.36 or later and glibc of 2.13 or later, provides the "
"ability to query or set the resource limits for processes other than the one "
"making the call.  (Contributed by Christian Heimes in :issue:`16595`.)"
msgstr ""
"新的 :func:`~resource.prlimit` 函式，可在內核版本為 2.6.36 或更高版本和 "
"glibc 為 2.13 或更高版本的 Linux "
"平台上使用，提供查詢或設定行程資源限制的能力，而不是正在製作的行程電話。 （"
"由 Christian Heimes 在 :issue:`16595` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1325
#, fuzzy
msgid ""
"On Linux kernel version 2.6.36 or later, there are also some new Linux "
"specific constants: :attr:`~resource.RLIMIT_MSGQUEUE`, :attr:`~resource."
"RLIMIT_NICE`, :attr:`~resource.RLIMIT_RTPRIO`, :attr:`~resource."
"RLIMIT_RTTIME`, and :attr:`~resource.RLIMIT_SIGPENDING`. (Contributed by "
"Christian Heimes in :issue:`19324`.)"
msgstr ""
"在 Linux 內核版本 2.6.36 或更高版本上，還有一些新的 Linux "
"特定常數：:attr:`~resource.RLIMIT_MSGQUEUE`, :attr:`~resource.RLIMIT_NICE`, "
":attr:`~resource.RLIMIT_RTPRIO`, : attr:`~resource.RLIMIT_RTTIME` 和 "
":attr:`~resource.RLIMIT_SIGPENDING`。 （由 Christian Heimes 在 :issue:`19324`"
" 中貢獻。）"

#: ../../whatsnew/3.4.rst:1331
#, fuzzy
msgid ""
"On FreeBSD version 9 and later, there some new FreeBSD specific constants: :"
"attr:`~resource.RLIMIT_SBSIZE`, :attr:`~resource.RLIMIT_SWAP`, and :attr:"
"`~resource.RLIMIT_NPTS`.  (Contributed by Claudiu Popa in :issue:`19343`.)"
msgstr ""
"在 FreeBSD 版本 9 和更高版本上，有一些新的 FreeBSD 特定常數：:attr:`~resource"
".RLIMIT_SBSIZE`、:attr:`~resource.RLIMIT_SWAP` 和 :attr:`~resource."
"RLIMIT_NPTS`。 （由 Claudiu Popa 在 :issue:`19343` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1338
msgid "select"
msgstr "select"

#: ../../whatsnew/3.4.rst:1340
#, fuzzy
msgid ""
":class:`~select.epoll` objects now support the context management protocol. "
"When used in a :keyword:`with` statement, the :meth:`~select.epoll.close` "
"method will be called automatically at the end of the block.  (Contributed "
"by Serhiy Storchaka in :issue:`16488`.)"
msgstr ""
":class:`~select.epoll` 物件現在支援上下文管理協定。當在 :keyword:`with` "
"語句中使用時，:meth:`~select.epoll.close` 方法將在塊的末尾自動呼叫。 （由 "
"Serhiy Storchaka 在 :issue:`16488` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1345
#, fuzzy
msgid ""
":class:`~select.devpoll` objects now have :meth:`~select.devpoll.fileno` "
"and :meth:`~select.devpoll.close` methods, as well as a new attribute :attr:"
"`~select.devpoll.closed`.  (Contributed by Victor Stinner in :issue:`18794`.)"
msgstr ""
":class:`~select.devpoll` 物件現在有 :meth:`~select.devpoll.fileno` 和 "
":meth:`~select.devpoll.close` 方法，以及一個新屬性 :attr:`~select。 devpoll."
"closed`。 （由 Victor Stinner 在 :issue:`18794` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1352
msgid "shelve"
msgstr "shelve"

#: ../../whatsnew/3.4.rst:1354
#, fuzzy
msgid ""
":class:`~shelve.Shelf` instances may now be used in :keyword:`with` "
"statements, and will be automatically closed at the end of the :keyword:`!"
"with` block. (Contributed by Filip Gruszczyński in :issue:`13896`.)"
msgstr ""
":class:`~shelve.Shelf` 實例現在可以在 :keyword:`with` 語句中使用，並將在 "
":keyword:`!with` 塊的末尾自動關閉。 （由 Filip Gruszczyński 在 :issue:`13896`"
" 中貢獻。）"

#: ../../whatsnew/3.4.rst:1360
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.4.rst:1362
#, fuzzy
msgid ""
":func:`~shutil.copyfile` now raises a specific :exc:`~shutil.Error` "
"subclass, :exc:`~shutil.SameFileError`, when the source and destination are "
"the same file, which allows an application to take appropriate action on "
"this specific error.  (Contributed by Atsuo Ishimoto and Hynek Schlawack in :"
"issue:`1492704`.)"
msgstr ""
":func:`~shutil.copyfile` 現在引發一個特定的 :exc:`~shutil.Error` 子類別 "
":exc:`~shutil.SameFileError`，當源和目標是同一個文件時，它允許應用程式採取對"
"此特定錯誤採取適當的措施。 （由 Atsuo Ishimoto 和 Hynek Schlawack 在 "
":issue:`1492704` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1370
msgid "smtpd"
msgstr "smtpd"

#: ../../whatsnew/3.4.rst:1372
#, fuzzy
msgid ""
"The :class:`~smtpd.SMTPServer` and :class:`~smtpd.SMTPChannel` classes now "
"accept a *map* keyword argument which, if specified, is passed in to :class:"
"`asynchat.async_chat` as its *map* argument.  This allows an application to "
"avoid affecting the global socket map.  (Contributed by Vinay Sajip in :"
"issue:`11959`.)"
msgstr ""
":class:`~smtpd.SMTPServer` 和 :class:`~smtpd.SMTPChannel` 類現在接受 *map* "
"關鍵字參數，如果指定，將作為其 *map 傳遞給 :class:`asynchat.async_chat` * "
"爭論。這允許應用程式避免影響全局 socket 映射。 （由 Vinay Sajip 在 "
":issue:`11959` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1380
msgid "smtplib"
msgstr "smtplib"

#: ../../whatsnew/3.4.rst:1382
#, fuzzy
msgid ""
":exc:`~smtplib.SMTPException` is now a subclass of :exc:`OSError`, which "
"allows both socket level errors and SMTP protocol level errors to be caught "
"in one try/except statement by code that only cares whether or not an error "
"occurred. (Contributed by Ned Jackson Lovely in :issue:`2118`.)"
msgstr ""
":exc:`~smtplib.SMTPException` 現在是 :exc:`OSError` 的一個子類別，"
"它允許 socket 級錯誤和 SMTP 協定級錯誤被程式碼捕獲在一個 try/except "
"語句中，程式碼只關心是否發生了錯誤。 （由 Ned Jackson Lovely 在 :issue:`2118`"
" 中貢獻。）"

#: ../../whatsnew/3.4.rst:1389
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.4.rst:1391
#, fuzzy
msgid ""
"The socket module now supports the :data:`~socket.CAN_BCM` protocol on "
"platforms that support it.  (Contributed by Brian Thorne in :issue:`15359`.)"
msgstr ""
"socket 模組現在在支援它的平台上支援 :data:`~socket.CAN_BCM` 協定。 （由 "
"Brian Thorne 在 :issue:`15359` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1394
#, fuzzy
msgid ""
"Socket objects have new methods to get or set their :ref:`inheritable flag "
"<fd_inheritance>`, :meth:`~socket.socket.get_inheritable` and :meth:`~socket."
"socket.set_inheritable`."
msgstr ""
" socket 對像有新的方法來獲取或設定它們的 :ref:`inheritable flag "
"<fd_inheritance>`、:meth:`~socket.socket.get_inheritable` 和 :meth:`~socket."
"socket.set_inheritable`。"

#: ../../whatsnew/3.4.rst:1398
#, fuzzy
msgid ""
"The ``socket.AF_*`` and ``socket.SOCK_*`` constants are now enumeration "
"values using the new :mod:`enum` module.  This allows meaningful names to be "
"printed during debugging, instead of integer \"magic numbers\"."
msgstr ""
"``socket.AF_*`` 和 ``socket.SOCK_*`` 常數現在是使用新的 :mod:`enum` "
"模組的枚舉值。這允許在除錯期間印出有意義的名稱，而不是整數“幻數”。"

#: ../../whatsnew/3.4.rst:1402
#, fuzzy
msgid "The :data:`~socket.AF_LINK` constant is now available on BSD and OSX."
msgstr ":data:`~socket.AF_LINK` 常數現在可在 BSD 和 OSX 上使用。"

#: ../../whatsnew/3.4.rst:1404
#, fuzzy
msgid ""
":func:`~socket.inet_pton` and :func:`~socket.inet_ntop` are now supported on "
"Windows.  (Contributed by Atsuo Ishimoto in :issue:`7171`.)"
msgstr ""
"Windows 現在支援 :func:`~socket.inet_pton` 和 :func:`~socket.inet_ntop`。 （由 "
"Atsuo Ishimoto 在 :issue:`7171` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1409
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.4.rst:1411
#, fuzzy
msgid ""
"A new boolean parameter to the :func:`~sqlite3.connect` function, *uri*, can "
"be used to indicate that the *database* parameter is a ``uri`` (see the "
"`SQLite URI documentation <https://www.sqlite.org/uri.html>`_).  "
"(Contributed by poq in :issue:`13773`.)"
msgstr ""
":func:`~sqlite3.connect` 函式的新布爾參數 *uri* 可用於指示 *database* "
"參數是一個 ``uri``（參見 `SQLite URI 文檔 <https:/ /www.sqlite.org/uri."
"html>`_)。 （由 poq 在 :issue:`13773` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1418
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.4.rst:1422
#, fuzzy
msgid ""
":data:`~ssl.PROTOCOL_TLSv1_1` and :data:`~ssl.PROTOCOL_TLSv1_2` (TLSv1.1 and "
"TLSv1.2 support) have been added; support for these protocols is only "
"available if Python is linked with OpenSSL 1.0.1 or later.  (Contributed by "
"Michele Orrù and Antoine Pitrou in :issue:`16692`.)"
msgstr ""
"新增了 :data:`~ssl.PROTOCOL_TLSv1_1` 和 :data:`~ssl.PROTOCOL_TLSv1_2`（"
"TLSv1.1 和 TLSv1.2 支援）；僅當 Python 與 OpenSSL 1.0.1 "
"或更高版本鏈接時，才支援這些協定。 （由 Michele Orrù 和 Antoine Pitrou 在 "
":issue:`16692` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1429
#, fuzzy
msgid ""
"New function :func:`~ssl.create_default_context` provides a standard way to "
"obtain an :class:`~ssl.SSLContext` whose settings are intended to be a "
"reasonable balance between compatibility and security.  These settings are "
"more stringent than the defaults provided by the :class:`~ssl.SSLContext` "
"constructor, and may be adjusted in the future, without prior deprecation, "
"if best-practice security requirements change.  The new recommended best "
"practice for using stdlib libraries that support SSL is to use :func:`~ssl."
"create_default_context` to obtain an :class:`~ssl.SSLContext` object, modify "
"it if needed, and then pass it as the *context* argument of the appropriate "
"stdlib API.  (Contributed by Christian Heimes in :issue:`19689`.)"
msgstr ""
"新函式 :func:`~ssl.create_default_context` 提供了一種獲取 :class:`~ssl."
"SSLContext` 的標準方法，其設定旨在實作相容性和安全性之間的合理平衡。"
"這些設定比 :class:`~ssl.SSLContext` 構造函式提供的預設設定更嚴格，如果最佳實"
"踐安全要求發生變化，將來可能會進行調整，而無需事先棄用。使用支援 SSL 的 "
"stdlib 庫的新推薦最佳實踐是使用 :func:`~ssl.create_default_context` 獲取 "
":class:`~ssl.SSLContext` 物件，如果需要修改它，然後將它作為 *適當的 stdlib "
"API 的 context* 參數。 （由 Christian Heimes 在 :issue:`19689` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1441
#, fuzzy
msgid ""
":class:`~ssl.SSLContext` method :meth:`~ssl.SSLContext."
"load_verify_locations` accepts a new optional argument *cadata*, which can "
"be used to provide PEM or DER encoded certificates directly via strings or "
"bytes, respectively. (Contributed by Christian Heimes in :issue:`18138`.)"
msgstr ""
":class:`~ssl.SSLContext` 方法 :meth:`~ssl.SSLContext.load_verify_locations` "
"接受一個新的可選參數 *cadata*，可用於分別通過字串或位元組直接提供 PEM 或 DER "
"編碼證書。 （由 Christian Heimes 在 :issue:`18138` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1446
#, fuzzy
msgid ""
"New function :func:`~ssl.get_default_verify_paths` returns a named tuple of "
"the paths and environment variables that the :meth:`~ssl.SSLContext."
"set_default_verify_paths` method uses to set OpenSSL's default ``cafile`` "
"and ``capath``.  This can be an aid in debugging default verification "
"issues.  (Contributed by Christian Heimes in :issue:`18143`.)"
msgstr ""
"新函式 :func:`~ssl.get_default_verify_paths` 回傳路徑和環境變數的命名元組， "
":meth:`~ssl.SSLContext.set_default_verify_paths` 方法使用它來設定 OpenSSL "
"的預設 ``cafile`` 和 ``capath` `。這有助於除錯預設驗證問題。 （由 Christian "
"Heimes 在 :issue:`18143` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1453
#, fuzzy
msgid ""
":class:`~ssl.SSLContext` has a new method, :meth:`~ssl.SSLContext."
"cert_store_stats`, that reports the number of loaded ``X.509`` certs, "
"``X.509 CA`` certs, and certificate revocation lists (``crl``\\ s), as well "
"as a :meth:`~ssl.SSLContext.get_ca_certs` method that returns a list of the "
"loaded ``CA`` certificates.  (Contributed by Christian Heimes in :issue:"
"`18147`.)"
msgstr ""
":class:`~ssl.SSLContext` 有一個新方法，:meth:`~ssl.SSLContext."
"cert_store_stats`，它報告加載的``X.509`` 證書、``X.509 CA`` "
"證書的數量和證書吊銷列表 (``crl``\\ s)，以及回傳加載的 ``CA`` 證書列表的 "
":meth:`~ssl.SSLContext.get_ca_certs` 方法。 （由 Christian Heimes 在 "
":issue:`18147` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1460
#, fuzzy
msgid ""
"If OpenSSL 0.9.8 or later is available, :class:`~ssl.SSLContext` has a new "
"attribute :attr:`~ssl.SSLContext.verify_flags` that can be used to control "
"the certificate verification process by setting it to some combination of "
"the new constants :data:`~ssl.VERIFY_DEFAULT`, :data:`~ssl."
"VERIFY_CRL_CHECK_LEAF`, :data:`~ssl.VERIFY_CRL_CHECK_CHAIN`, or :data:`~ssl."
"VERIFY_X509_STRICT`. OpenSSL does not do any CRL verification by default.  "
"(Contributed by Christien Heimes in :issue:`8813`.)"
msgstr ""
"如果 OpenSSL 0.9.8 或更高版本可用，:class:`~ssl.SSLContext` "
"有一個新屬性 :attr:`~ssl.SSLContext.verify_flags` "
"可用於通過將其設定為某種組合來控制證書驗證過程新常數 :data:`~ssl."
"VERIFY_DEFAULT`、:data:`~ssl.VERIFY_CRL_CHECK_LEAF`、:data:`~ssl."
"VERIFY_CRL_CHECK_CHAIN` 或 :data:`~ssl.VERIFY_X509_STRICT`。預設情況下，"
"OpenSSL 不進行任何 CRL 驗證。 （由 Christien Heimes 在 :issue:`8813` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:1468
#, fuzzy
msgid ""
"New :class:`~ssl.SSLContext` method :meth:`~ssl.SSLContext."
"load_default_certs` loads a set of default \"certificate authority\" (CA) "
"certificates from default locations, which vary according to the platform.  "
"It can be used to load both TLS web server authentication certificates "
"(``purpose=``:data:`~ssl.Purpose.SERVER_AUTH`) for a client to use to verify "
"a server, and certificates for a server to use in verifying client "
"certificates (``purpose=``:data:`~ssl.Purpose.CLIENT_AUTH`).  (Contributed "
"by Christian Heimes in :issue:`19292`.)"
msgstr ""
"新的 :class:`~ssl.SSLContext` 方法 :meth:`~ssl.SSLContext.load_default_certs` "
"從預設位置加載一組預設的“證書頒發機構”(CA) 證書，這些位置因平台而異。"
"它可用於加載客戶端用於驗證伺服器的 TLS Web "
"伺服器身份驗證證書（``purpose=``:data:`~ssl.Purpose."
"SERVER_AUTH`）和伺服器用於驗證的證書客戶端證書（``purpose=``:data:`~ssl."
"Purpose.CLIENT_AUTH`）。 （由 Christian Heimes 在 :issue:`19292` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1479
#, fuzzy
msgid ""
"Two new windows-only functions, :func:`~ssl.enum_certificates` and :func:"
"`~ssl.enum_crls` provide the ability to retrieve certificates, certificate "
"information, and CRLs from the Windows cert store.  (Contributed by "
"Christian Heimes in :issue:`17134`.)"
msgstr ""
"兩個新的僅限 Windows 的函式，:func:`~ssl.enum_certificates` 和 :func:`~ssl."
"enum_crls` 提供了從 Windows 證書庫中檢索證書、證書資訊和 CRL 的能力。 （由 "
"Christian Heimes 在 :issue:`17134` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1486
#, fuzzy
msgid ""
"Support for server-side SNI (Server Name Indication) using the new :meth:"
"`ssl.SSLContext.set_servername_callback` method. (Contributed by Daniel "
"Black in :issue:`8109`.)"
msgstr ""
"使用新的 ssl.SSLContext.set_servername_callback 方法支援伺服器端 "
"SNI（伺服器名稱指示）。 （由 Daniel Black 在 :issue:`8109` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1490
#, fuzzy
msgid ""
"The dictionary returned by :meth:`.SSLSocket.getpeercert` contains "
"additional ``X509v3`` extension items: ``crlDistributionPoints``, "
"``calIssuers``, and ``OCSP`` URIs.  (Contributed by Christian Heimes in :"
"issue:`18379`.)"
msgstr ""
":meth:`.SSLSocket.getpeercert` 回傳的字典包含額外的 ``X509v3`` "
"擴充項：``crlDistributionPoints``、``calIssuers`` 和 ``OCSP`` URI。 （由 "
"Christian Heimes 在 :issue:`18379` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1496
msgid "stat"
msgstr "stat"

#: ../../whatsnew/3.4.rst:1498
#, fuzzy
msgid ""
"The :mod:`stat` module is now backed by a C implementation in :mod:`_stat`. "
"A C implementation is required as most of the values aren't standardized and "
"are platform-dependent.  (Contributed by Christian Heimes in :issue:`11016`.)"
msgstr ""
":mod:`stat` 模組現在由 :mod:`_stat` 中的 C 實作支援。需要 C "
"實作，因為大多數值未標準化並且依賴於平台。 （由 Christian Heimes 在 "
":issue:`11016` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1502
#, fuzzy
msgid ""
"The module supports new :mod:`~stat.ST_MODE` flags, :mod:`~stat.S_IFDOOR`, :"
"attr:`~stat.S_IFPORT`, and :attr:`~stat.S_IFWHT`.  (Contributed by Christian "
"Hiemes in :issue:`11016`.)"
msgstr ""
"該模組支援新的 :mod:`~stat.ST_MODE` 旗標、:mod:`~stat.S_IFDOOR`、:attr:`~stat"
".S_IFPORT` 和 :attr:`~stat.S_IFWHT`。 （由 Christian Hiemes 在 :issue:`11016`"
" 中貢獻。）"

#: ../../whatsnew/3.4.rst:1508
msgid "struct"
msgstr "struct"

#: ../../whatsnew/3.4.rst:1510
#, fuzzy
msgid ""
"New function :mod:`~struct.iter_unpack` and a new :meth:`struct.Struct."
"iter_unpack` method on compiled formats provide streamed unpacking of a "
"buffer containing repeated instances of a given format of data. (Contributed "
"by Antoine Pitrou in :issue:`17804`.)"
msgstr ""
"新函式 :mod:`~struct.iter_unpack` 和一個新的 :meth:`struct.Struct."
"iter_unpack` 編譯格式方法提供包含給定資料格式重複實例的緩衝區的流式解包。 （"
"由 Antoine Pitrou 在 :issue:`17804` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1517
msgid "subprocess"
msgstr "subprocess"

#: ../../whatsnew/3.4.rst:1519
#, fuzzy
msgid ""
":func:`~subprocess.check_output` now accepts an *input* argument that can be "
"used to provide the contents of ``stdin`` for the command that is run. "
"(Contributed by Zack Weinberg in :issue:`16624`.)"
msgstr ""
":func:`~subprocess.check_output` 現在接受一個 *input* 參數，"
"該參數可用於為運行的命令提供 ``stdin`` 的內容。 （由 Zack Weinberg 在 "
":issue:`16624` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1523
#, fuzzy
msgid ""
":func:`~subprocess.getstatus` and :func:`~subprocess.getstatusoutput` now "
"work on Windows.  This change was actually inadvertently made in 3.3.4. "
"(Contributed by Tim Golden in :issue:`10197`.)"
msgstr ""
":func:`~subprocess.getstatus` 和 :func:`~subprocess.getstatusoutput` "
"現在可以在 Windows 上使用。這個改動實際上是在 3.3.4 中無意中做出的。 （由 "
"Tim Golden 在 :issue:`10197` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1529
msgid "sunau"
msgstr "sunau"

#: ../../whatsnew/3.4.rst:1531
#, fuzzy
msgid ""
"The :meth:`~sunau.getparams` method now returns a namedtuple rather than a "
"plain tuple.  (Contributed by Claudiu Popa in :issue:`18901`.)"
msgstr ""
":meth:`~sunau.getparams` 方法現在回傳一個命名元組而不是普通元組。 （由 "
"Claudiu Popa 在 :issue:`18901` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1534
#, fuzzy
msgid ""
":meth:`sunau.open` now supports the context management protocol: when used "
"in a :keyword:`with` block, the ``close`` method of the returned object will "
"be called automatically at the end of the block.  (Contributed by Serhiy "
"Storchaka in :issue:`18878`.)"
msgstr ""
":meth:`sunau.open` 現在支援上下文管理協定：在 :keyword:`with` 塊中使用時，"
"將在塊末尾自動呼叫回傳物件的 ``close`` 方法。 （由 Serhiy Storchaka 在 "
":issue:`18878` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1539
#, fuzzy
msgid ""
":meth:`.AU_write.setsampwidth` now supports 24 bit samples, thus adding "
"support for writing 24 sample using the module.  (Contributed by Serhiy "
"Storchaka in :issue:`19261`.)"
msgstr ""
":meth:`.AU_write.setsampwidth` 現在支援 24 位樣本，"
"因此增加了對使用該模組編寫 24 位樣本的支援。 （由 Serhiy Storchaka 在 "
":issue:`19261` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1543
#, fuzzy
msgid ""
"The :meth:`~sunau.AU_write.writeframesraw` and :meth:`~sunau.AU_write."
"writeframes` methods now accept any :term:`bytes-like object`.  (Contributed "
"by Serhiy Storchaka in :issue:`8311`.)"
msgstr ""
":meth:`~sunau.AU_write.writeframesraw` 和 :meth:`~sunau.AU_write.writeframes` "
"方法現在接受任何 :term:`bytes-like object`。 （由 Serhiy Storchaka 在 "
":issue:`8311` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1549
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.4.rst:1551
#, fuzzy
msgid ""
"New function :func:`sys.getallocatedblocks` returns the current number of "
"blocks allocated by the interpreter.  (In CPython with the default ``--with-"
"pymalloc`` setting, this is allocations made through the :c:func:"
"`PyObject_Malloc` API.)  This can be useful for tracking memory leaks, "
"especially if automated via a test suite.  (Contributed by Antoine Pitrou "
"in :issue:`13390`.)"
msgstr ""
"新函式 :func:`sys.getallocatedblocks` 回傳直譯器分配的當前塊數。 （在使用預設"
"``--with-pymalloc`` 設定的 CPython 中，這是通過 :c:func:`PyObject_Malloc` "
"API 進行的分配。）這對於跟踪記憶體洩漏很有用，特別是如果通過測試套件自動化. "
"（由 Antoine Pitrou 在 :issue:`13390` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1558
#, fuzzy
msgid ""
"When the Python interpreter starts in :ref:`interactive mode <tut-"
"interactive>`, it checks for an :data:`~sys.__interactivehook__` attribute "
"on the :mod:`sys` module.  If the attribute exists, its value is called with "
"no arguments just before interactive mode is started.  The check is made "
"after the :envvar:`PYTHONSTARTUP` file is read, so it can be set there.  "
"The :mod:`site` module :ref:`sets it <rlcompleter-config>` to a function "
"that enables tab completion and history saving (in :file:`~/.python-"
"history`) if the platform supports :mod:`readline`.  If you do not want this "
"(new) behavior, you can override it in :envvar:`PYTHONSTARTUP`, :mod:"
"`sitecustomize`, or :mod:`usercustomize` by deleting this attribute from :"
"mod:`sys` (or setting it to some other callable).  (Contributed by Éric "
"Araujo and Antoine Pitrou in :issue:`5845`.)"
msgstr ""
"當 Python 直譯器以 :ref:`interactive 模式 <tut-interactive>` 啟動時，"
"它會檢查 :mod:`sys` 模組上的 :data:`~sys.__interactivehook__` "
"屬性。如果該屬性存在，則在交互模式啟動之前不帶任何參數地呼叫它的值。"
"檢查是在讀取 :envvar:`PYTHONSTARTUP` 文件後進行的，因此可以在那裡設定。 "
":mod:`site` 模組 :ref:`將其 <rlcompleter-config>` "
"設定為啟用選項卡完成和歷史記錄保存的功能（在 :file:`~/.python-history` "
"中）如果平台支援 :mod :`閱讀線`。如果你不想要這個（新）行為，你可以通過從 "
":mod:`sys`（或將其設定為其他一些可呼叫物件）。 （由 Éric Araujo 和 Antoine "
"Pitrou 在 :issue:`5845` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1573
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.4.rst:1575
#, fuzzy
msgid ""
"The :mod:`tarfile` module now supports a simple :ref:`tarfile-commandline` "
"when called as a script directly or via ``-m``.  This can be used to create "
"and extract tarfile archives.  (Contributed by Berker Peksag in :issue:"
"`13477`.)"
msgstr ""
":mod:`tarfile` 模組現在支援一個簡單的 :ref:`tarfile-commandline` "
"當直接作為腳本呼叫或通過 ``-m`` 呼叫時。這可用於建立和提取 tarfile 存檔。 （"
"由 Berker Peksag 在 :issue:`13477` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1581
msgid "textwrap"
msgstr "textwrap"

#: ../../whatsnew/3.4.rst:1583
#, fuzzy
msgid ""
"The :class:`~textwrap.TextWrapper` class has two new attributes/constructor "
"arguments: :attr:`~textwrap.TextWrapper.max_lines`, which limits the number "
"of lines in the output, and :attr:`~textwrap.TextWrapper.placeholder`, which "
"is a string that will appear at the end of the output if it has been "
"truncated because of *max_lines*.  Building on these capabilities, a new "
"convenience function :func:`~textwrap.shorten` collapses all of the "
"whitespace in the input to single spaces and produces a single line of a "
"given *width* that ends with the *placeholder* (by default, ``[...]``).  "
"(Contributed by Antoine Pitrou and Serhiy Storchaka in :issue:`18585` and :"
"issue:`18725`.)"
msgstr ""
":class:`~textwrap.TextWrapper` "
"類有兩個新的屬性/構造函式參數：:attr:`~textwrap.TextWrapper."
"max_lines`，它限制輸出中的行數，以及 :attr:`~textwrap.TextWrapper ."
"placeholder`，這是一個字串，如果由於 *max_lines* "
"而被截斷，它將出現在輸出的末尾。基於這些功能，一個新的便利函式 "
":func:`~textwrap.shorten` 將輸入中的所有空格折疊為單個空格，並生成以 "
"*placeholder* 結尾的給定 *width* 的單行（預設情況下，``[...]``）。 （由 "
"Antoine Pitrou 和 Serhiy Storchaka 在 :issue:`18585` 和 :issue:`18725` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:1595
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.4.rst:1597
#, fuzzy
msgid ""
"The :class:`~threading.Thread` object representing the main thread can be "
"obtained from the new :func:`~threading.main_thread` function.  In normal "
"conditions this will be the thread from which the Python interpreter was "
"started.  (Contributed by Andrew Svetlov in :issue:`18882`.)"
msgstr ""
"表示主執行緒的 :class:`~threading.Thread` 物件可以從新的 :func:`~threading."
"main_thread` 函式中獲得。在正常情況下，這將是啟動 Python 直譯器的執行緒。 （"
"由 Andrew Svetlov 在 :issue:`18882` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1604
msgid "traceback"
msgstr "traceback"

#: ../../whatsnew/3.4.rst:1606
#, fuzzy
msgid ""
"A new :func:`traceback.clear_frames` function takes a traceback object and "
"clears the local variables in all of the frames it references, reducing the "
"amount of memory consumed.  (Contributed by Andrew Kuchling in :issue:"
"`1565525`.)"
msgstr ""
"一個新的 :func:`traceback.clear_frames` 函式接受一個回溯物件並清除它引用的所"
"有幀中的局部變數，從而減少消耗的記憶體量。 （由 Andrew Kuchling 在 "
":issue:`1565525` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1613
msgid "types"
msgstr "types"

#: ../../whatsnew/3.4.rst:1615
#, fuzzy
msgid ""
"A new :func:`~types.DynamicClassAttribute` descriptor provides a way to "
"define an attribute that acts normally when looked up through an instance "
"object, but which is routed to the *class* ``__getattr__`` when looked up "
"through the class.  This allows one to have properties active on a class, "
"and have virtual attributes on the class with the same name (see :mod:`Enum` "
"for an example). (Contributed by Ethan Furman in :issue:`19030`.)"
msgstr ""
"一個新的 :func:`~types.DynamicClassAttribute` "
"描述器提供了一種定義屬性的方法，該屬性在通過實例物件查找時正常運行，"
"但在通過類查找時路由到 *class* ``__getattr__`` ."
"這允許一個人在一個類上擁有活動的屬性，並在該類上擁有同名的虛擬屬性（參見 "
"Enum 的示例）。 （由 Ethan Furman 在 :issue:`19030` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1624
msgid "urllib"
msgstr "urllib"

#: ../../whatsnew/3.4.rst:1626
#, fuzzy
msgid ""
":mod:`urllib.request` now supports ``data:`` URLs via the :class:`~urllib."
"request.DataHandler` class.  (Contributed by Mathias Panzenböck in :issue:"
"`16423`.)"
msgstr ""
":mod:`urllib.request` 現在通過 :class:`~urllib.request.DataHandler` 類支援 "
"``data:`` URL。 （由 Mathias Panzenböck 在 :issue:`16423` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1630
#, fuzzy
msgid ""
"The http method that will be used by a :class:`~urllib.request.Request` "
"class can now be specified by setting a :class:`~urllib.request.Request."
"method` class attribute on the subclass.  (Contributed by Jason R Coombs in :"
"issue:`18978`.)"
msgstr ""
":class:`~urllib.request.Request` 類將使用的 http "
"方法現在可以通過在子類別上設定 :class:`~urllib.request.Request.method` "
"類屬性來指定。 （由 Jason R Coombs 在 :issue:`18978` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1635
#, fuzzy
msgid ""
":class:`~urllib.request.Request` objects are now reusable: if the :attr:"
"`~urllib.request.Request.full_url` or :attr:`~urllib.request.Request.data` "
"attributes are modified, all relevant internal properties are updated.  This "
"means, for example, that it is now possible to use the same :class:`~urllib."
"request.Request` object in more than one :meth:`.OpenerDirector.open` call "
"with different *data* arguments, or to modify a :class:`~urllib.request."
"Request`\\ 's ``url`` rather than recomputing it from scratch.  There is "
"also a new :meth:`~urllib.request.Request.remove_header` method that can be "
"used to remove headers from a :class:`~urllib.request.Request`.  "
"(Contributed by Alexey Kachayev in :issue:`16464`, Daniel Wozniak in :issue:"
"`17485`, and Damien Brecht and Senthil Kumaran in :issue:`17272`.)"
msgstr ""
":class:`~urllib.request.Request` 物件現在可重複使用：如果修改 :attr:`~urllib."
"request.Request.full_url` 或 :attr:`~urllib.request.Request.data` "
"屬性，所有更新了相關的內部屬性。這意味著，例如，現在可以在多個 :meth:`."
"OpenerDirector.open` 呼叫中使用相同的 :class:`~urllib.request.Request` "
"物件和不同的 *data* 參數，或者修改 :class:`~urllib.request.Request`\\ 的 "
"``url`` 而不是從頭開始重新計算它。還有一個新的 :meth:`~urllib.request.Request"
".remove_header` 方法可用於從 :class:`~urllib.request.Request` 中刪除標頭。 （"
"由 Alexey Kachayev 在 :issue:`16464`、Daniel Wozniak 在 :issue:`17485` 以及 "
"Damien Brecht 和 Senthil Kumaran 在 :issue:`17272` 貢獻。）"

#: ../../whatsnew/3.4.rst:1648
#, fuzzy
msgid ""
":class:`~urllib.error.HTTPError` objects now have a :attr:`~urllib.error."
"HTTPError.headers` attribute that provides access to the HTTP response "
"headers associated with the error.  (Contributed by Berker Peksag in :issue:"
"`15701`.)"
msgstr ""
":class:`~urllib.error.HTTPError` 物件現在有一個 :attr:`~urllib.error.HTTPError"
".headers` 屬性，該屬性提供對與錯誤關聯的 HTTP 響應標頭的訪問。 （由 Berker "
"Peksag 在 :issue:`15701` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1655
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.4.rst:1657
#, fuzzy
msgid ""
"The :class:`~unittest.TestCase` class has a new method, :meth:`~unittest."
"TestCase.subTest`, that produces a context manager whose :keyword:`with` "
"block becomes a \"sub-test\".  This context manager allows a test method to "
"dynamically generate subtests  by, say, calling the ``subTest`` context "
"manager inside a loop.  A single test method can thereby produce an "
"indefinite number of separately identified and separately counted tests, all "
"of which will run even if one or more of them fail.  For example::"
msgstr ""
":class:`~unittest.TestCase` 類有一個新方法，:meth:`~unittest.TestCase."
"subTest`，它生成一個上下文管理器，其 :keyword:`with` "
"塊成為“子測試”。該上下文管理器允許測試方法動態生成子測試，例如，"
"通過在循環內呼叫 ``subTest`` 上下文管理器。因此，單一的測試方法可以產生無限數"
"量的單獨識別和單獨計數的測試，即使其中一個或多個失敗，所有這些測試都會運行。"
"例如：："

#: ../../whatsnew/3.4.rst:1671
#, fuzzy
msgid ""
"will result in six subtests, each identified in the unittest verbose output "
"with a label consisting of the variable name ``i`` and a particular value "
"for that variable (``i=0``, ``i=1``, etc).  See :ref:`subtests` for the full "
"version of this example.  (Contributed by Antoine Pitrou in :issue:`16997`.)"
msgstr ""
"將產生六個子測試，每個子測試都在單元測試詳細輸出中標識，標籤由變數名稱 ``i``和該"
"變數的特定值（“i=0”、“i=1”、 "
"ETC）。有關此示例的完整版本，請參閱 :ref:`subtests`。 （由 Antoine Pitrou "
"在 :issue:`16997` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1676
#, fuzzy
msgid ""
":func:`unittest.main` now accepts an iterable of test names for "
"*defaultTest*, where previously it only accepted a single test name as a "
"string.  (Contributed by Jyrki Pulliainen in :issue:`15132`.)"
msgstr ""
":func:`unittest.main` 現在接受 *defaultTest* "
"的可疊代測試名稱，以前它只接受一個測試名稱作為字串。 （由 Jyrki Pulliainen "
"在 :issue:`15132` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1680
#, fuzzy
msgid ""
"If :class:`~unittest.SkipTest` is raised during test discovery (that is, at "
"the module level in the test file), it is now reported as a skip instead of "
"an error.  (Contributed by Zach Ware in :issue:`16935`.)"
msgstr ""
"如果 :class:`~unittest.SkipTest` 在測試發現期間被引發（即，在測試文件的模組級"
"別），它現在被報告為跳過而不是錯誤。 （由 Zach Ware 在 :issue:`16935` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:1684
#, fuzzy
msgid ""
":meth:`~unittest.TestLoader.discover` now sorts the discovered files to "
"provide consistent test ordering.  (Contributed by Martin Melin and Jeff "
"Ramnani in :issue:`16709`.)"
msgstr ""
":meth:`~unittest.TestLoader.discover` "
"現在對發現的文件進行排序以提供一致的測試順序。 （由 Martin Melin 和 Jeff "
"Ramnani 在 :issue:`16709` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1688
#, fuzzy
msgid ""
":class:`~unittest.TestSuite` now drops references to tests as soon as the "
"test has been run, if the test is successful.  On Python interpreters that "
"do garbage collection, this allows the tests to be garbage collected if "
"nothing else is holding a reference to the test.  It is possible to override "
"this behavior by creating a :class:`~unittest.TestSuite` subclass that "
"defines a custom ``_removeTestAtIndex`` method.  (Contributed by Tom "
"Wardill, Matt McClure, and Andrew Svetlov in :issue:`11798`.)"
msgstr ""
":class:`~unittest.TestSuite` "
"現在在測試運行後立即刪除對測試的引用，如果測試成功的話。在執行垃圾收集的 "
"Python 直譯器上，如果沒有其他內容持有對測試的引用，這允許測試被垃圾收集。"
"可以通過建立定義自定義 `_removeTestAtIndex` 方法的 :class:`~unittest."
"TestSuite` 子類別來覆蓋此行為。 （由 Tom Wardill、Matt McClure 和 Andrew "
"Svetlov 在 :issue:`11798` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1696
#, fuzzy
msgid ""
"A new test assertion context-manager, :meth:`~unittest.TestCase.assertLogs`, "
"will ensure that a given block of code emits a log message using the :mod:"
"`logging` module.  By default the message can come from any logger and have "
"a priority of ``INFO`` or higher, but both the logger name and an "
"alternative minimum logging level may be specified.  The object returned by "
"the context manager can be queried for the :class:`~logging.LogRecord`\\ s "
"and/or formatted messages that were logged.  (Contributed by Antoine Pitrou "
"in :issue:`18937`.)"
msgstr ""
"新的測試斷言上下文管理器 :meth:`~unittest.TestCase.assertLogs` "
"將確保給定的程式碼塊使用 :mod:`logging` 模組發出日誌消息。預設情況下，消息可"
"以來自任何記錄器並具有“資訊”或更高的優先級，但可以指定記錄器名稱和替代的最低"
"日誌記錄級別。上下文管理器回傳的物件可以查詢 :class:`~logging.LogRecord`\\ "
"和/或已記錄的格式化消息。 （由 Antoine Pitrou 在 :issue:`18937` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1705
#, fuzzy
msgid ""
"Test discovery now works with namespace packages (Contributed by Claudiu "
"Popa in :issue:`17457`.)"
msgstr "測試發現現在可以與命名空間包一起使用（由 Claudiu Popa 在 :issue:`17457` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:1708
#, fuzzy
msgid ""
":mod:`unittest.mock` objects now inspect their specification signatures when "
"matching calls, which means an argument can now be matched by either "
"position or name, instead of only by position.  (Contributed by Antoine "
"Pitrou in :issue:`17015`.)"
msgstr ""
":mod:`unittest.mock` 物件現在在匹配呼叫時檢查它們的規範簽名，這意味著現在可以"
"通過位置或名稱匹配參數，而不僅僅是通過位置。 （由 Antoine Pitrou 在 "
":issue:`17015` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1713
#, fuzzy
msgid ""
":func:`~mock.mock_open` objects now have ``readline`` and ``readlines`` "
"methods.  (Contributed by Toshio Kuratomi in :issue:`17467`.)"
msgstr ""
":func:`~mock.mock_open` 物件現在有 ``readline`` 和 ``readlines`` 方法。 （由 "
"Toshio Kuratomi 在 :issue:`17467` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1718
msgid "venv"
msgstr "venv"

#: ../../whatsnew/3.4.rst:1720
#, fuzzy
msgid ""
":mod:`venv` now includes activation scripts for the ``csh`` and ``fish`` "
"shells.  (Contributed by Andrew Svetlov in :issue:`15417`.)"
msgstr ""
":mod:`venv` 現在包括用於 ``csh`` 和 ``fish`` shell 的激活腳本。 （由 Andrew "
"Svetlov 在 :issue:`15417` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1723
#, fuzzy
msgid ""
":class:`~venv.EnvBuilder` and the :func:`~venv.create` convenience function "
"take a new keyword argument *with_pip*, which defaults to ``False``, that "
"controls whether or not :class:`~venv.EnvBuilder` ensures that ``pip`` is "
"installed in the virtual environment.  (Contributed by Nick Coghlan in :"
"issue:`19552` as part of the :pep:`453` implementation.)"
msgstr ""
":class:`~venv.EnvBuilder` 和 :func:`~venv.create` 便利函式採用新的關鍵字參數 "
"*with_pip*，預設為 ``False``，控制是否 :class:`~ venv.EnvBuilder "
"確保在虛擬環境中安裝了 ``pip``。 （由 Nick Coghlan 在 :issue:`19552` 中作為 "
":pep:`453` 實作的一部分貢獻。）"

#: ../../whatsnew/3.4.rst:1731
msgid "wave"
msgstr "wave"

#: ../../whatsnew/3.4.rst:1733
#, fuzzy
msgid ""
"The :meth:`~wave.getparams` method now returns a namedtuple rather than a "
"plain tuple.  (Contributed by Claudiu Popa in :issue:`17487`.)"
msgstr ""
":meth:`~wave.getparams` 方法現在回傳一個命名元組而不是普通元組。 （由 "
"Claudiu Popa 在 :issue:`17487` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1736
#, fuzzy
msgid ""
":meth:`wave.open` now supports the context management protocol.  "
"(Contributed by Claudiu Popa in :issue:`17616`.)"
msgstr ":meth:`wave.open` 現在支援上下文管理協定。 （由 Claudiu Popa 在 "
":issue:`17616` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1739
#, fuzzy
msgid ""
":mod:`wave` can now :ref:`write output to unseekable files <wave-write-"
"objects>`.  (Contributed by David Jones, Guilherme Polo, and Serhiy "
"Storchaka in :issue:`5202`.)"
msgstr ""
":mod:`wave` 現在可以 :ref:`將輸出寫入不可搜索的文件 <wave-write-objects>`。 "
"（由 David Jones、Guilherme Polo 和 Serhiy Storchaka 在 :issue:`5202` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:1743
#, fuzzy
msgid ""
"The :meth:`~wave.Wave_write.writeframesraw` and :meth:`~wave.Wave_write."
"writeframes` methods now accept any :term:`bytes-like object`.  (Contributed "
"by Serhiy Storchaka in :issue:`8311`.)"
msgstr ""
":meth:`~wave.Wave_write.writeframesraw` 和 :meth:`~wave.Wave_write."
"writeframes` 方法現在接受任何 :term:`bytes-like object`。 （由 Serhiy "
"Storchaka 在 :issue:`8311` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1749
msgid "weakref"
msgstr "weakref"

#: ../../whatsnew/3.4.rst:1751
#, fuzzy
msgid ""
"New :class:`~weakref.WeakMethod` class simulates weak references to bound "
"methods.  (Contributed by Antoine Pitrou in :issue:`14631`.)"
msgstr ""
"新的 :class:`~weakref.WeakMethod` 類模擬對綁定方法的弱引用。 （由 Antoine "
"Pitrou 在 :issue:`14631` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1754
#, fuzzy
msgid ""
"New :class:`~weakref.finalize` class makes it possible to register a "
"callback to be invoked when an object is garbage collected, without needing "
"to carefully manage the lifecycle of the weak reference itself.  "
"(Contributed by Richard Oudkerk in :issue:`15528`.)"
msgstr ""
"新的 :class:`~weakref.finalize` 類可以註冊一個在對像被垃圾回收時呼叫的回呼，"
"而無需仔細管理弱引用本身的生命週期。 （由 Richard Oudkerk 在 :issue:`15528` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:1759
#, fuzzy
msgid ""
"The callback, if any, associated with a :class:`~weakref.ref` is now exposed "
"via the :attr:`~weakref.ref.__callback__` attribute.  (Contributed by Mark "
"Dickinson in :issue:`17643`.)"
msgstr ""
"與 :class:`~weakref.ref` 關聯的回呼（如果有）現在通過 :attr:`~weakref.ref."
"__callback__` 屬性公開。 （由 Mark Dickinson 在 :issue:`17643` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1765
msgid "xml.etree"
msgstr "xml.etree"

#: ../../whatsnew/3.4.rst:1767
#, fuzzy
msgid ""
"A new parser, :class:`~xml.etree.ElementTree.XMLPullParser`, allows a non-"
"blocking applications to parse XML documents.  An example can be seen at :"
"ref:`elementtree-pull-parsing`.  (Contributed by Antoine Pitrou in :issue:"
"`17741`.)"
msgstr ""
"新的解析器 :class:`~xml.etree.ElementTree.XMLPullParser` "
"允許非阻塞應用程式解析 XML 文檔。可以在 :ref:`elementtree-pull-parsing` "
"看到一個例子。 （由 Antoine Pitrou 在 :issue:`17741` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1772
#, fuzzy
msgid ""
"The :mod:`xml.etree.ElementTree` :func:`~xml.etree.ElementTree.tostring` "
"and :func:`~xml.etree.ElementTree.tostringlist` functions, and the :class:"
"`~xml.etree.ElementTree.ElementTree` :meth:`~xml.etree.ElementTree."
"ElementTree.write` method, now have a *short_empty_elements* :ref:`keyword-"
"only parameter <keyword-only_parameter>` providing control over whether "
"elements with no content are written in abbreviated (``<tag />``) or "
"expanded (``<tag></tag>``) form.  (Contributed by Ariel Poliak and Serhiy "
"Storchaka in :issue:`14377`.)"
msgstr ""
":mod:`xml.etree.ElementTree` :func:`~xml.etree.ElementTree.tostring` 和 "
":func:`~xml.etree.ElementTree.tostringlist` 函式，以及 :class:`~xml.etree ."
"ElementTree.ElementTree` :meth:`~xml.etree.ElementTree.ElementTree.write` "
"方法，現在有一個 *short_empty_elements* :ref:`keyword-only parameter "
"<keyword-only_parameter>` 控制元素是否沒有內容以縮寫（``<tag "
"/>``）或擴充（``<tag></tag>``）形式編寫。 （由 Ariel Poliak 和 Serhiy "
"Storchaka 在 :issue:`14377` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1783
msgid "zipfile"
msgstr "zipfile"

#: ../../whatsnew/3.4.rst:1785
#, fuzzy
msgid ""
"The :meth:`~zipfile.PyZipFile.writepy` method of the :class:`~zipfile."
"PyZipFile` class has a new *filterfunc* option that can be used to control "
"which directories and files are added to the archive.  For example, this "
"could be used to exclude test files from the archive. (Contributed by "
"Christian Tismer in :issue:`19274`.)"
msgstr ""
":class:`~zipfile.PyZipFile` 類的 :meth:`~zipfile.PyZipFile.writepy` "
"方法有一個新的 *filterfunc* 選項，可用於控制將哪些目錄和文件新增到存檔中。例"
"如，這可用於從存檔中排除測試文件。 （由 Christian Tismer 在 :issue:`19274` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:1791
#, fuzzy
msgid ""
"The *allowZip64* parameter to :class:`~zipfile.ZipFile` and :class:`~zipfile."
"PyZipfile` is now ``True`` by default.  (Contributed by William Mallard in :"
"issue:`17201`.)"
msgstr ""
":class:`~zipfile.ZipFile` 和 :class:`~zipfile.PyZipfile` 的 *allowZip64* "
"參數現在預設為 ``True``。 （由 William Mallard 在 :issue:`17201` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1798
#, fuzzy
msgid "CPython Implementation Changes"
msgstr "CPython 實作更改"

#: ../../whatsnew/3.4.rst:1804
#, fuzzy
msgid "PEP 445: Customization of CPython Memory Allocators"
msgstr "PEP 445：CPython 記憶體分配器的定制"

#: ../../whatsnew/3.4.rst:1806
#, fuzzy
msgid ""
":pep:`445` adds new C level interfaces to customize memory allocation in the "
"CPython interpreter."
msgstr ":pep:`445` 新增了新的 C 級介面來自定義 CPython 直譯器中的記憶體分配。"

#: ../../whatsnew/3.4.rst:1811
#, fuzzy
msgid ":pep:`445` -- Add new APIs to customize Python memory allocators"
msgstr ":pep:`445` -- 新增新的 API 來自定義 Python 記憶體分配器"

#: ../../whatsnew/3.4.rst:1818
#, fuzzy
msgid "PEP 442: Safe Object Finalization"
msgstr "PEP 442：安全物件終結"

#: ../../whatsnew/3.4.rst:1820
#, fuzzy
msgid ""
":pep:`442` removes the current limitations and quirks of object finalization "
"in CPython. With it, objects with :meth:`__del__` methods, as well as "
"generators with :keyword:`finally` clauses, can be finalized when they are "
"part of a reference cycle."
msgstr ""
":pep:`442` 消除了 CPython 中物件終結的當前限制和怪癖。有了它，帶有 "
":meth:`__del__` 方法的物件，以及帶有 :keyword:`finally` "
"子句的生成器，都可以在引用循環的一部分時被終結。"

#: ../../whatsnew/3.4.rst:1825
#, fuzzy
msgid ""
"As part of this change, module globals are no longer forcibly set to :const:"
"`None` during interpreter shutdown in most cases, instead relying on the "
"normal operation of the cyclic garbage collector.  This avoids a whole class "
"of interpreter-shutdown-time errors, usually involving ``__del__`` methods, "
"that have plagued Python since the cyclic GC was first introduced."
msgstr ""
"作為此更改的一部分，在大多數情況下，在直譯器關閉期間不再強制將模組全局變數設"
"定為 :const:`None`，而是依賴於循環垃圾收集器的正常操作。這避免了一整類直譯器"
"關閉時間錯誤，通常涉及 ``__del__`` 方法，這些錯誤自首次引入循環 GC "
"以來一直困擾著 Python。"

#: ../../whatsnew/3.4.rst:1834
#, fuzzy
msgid ":pep:`442` -- Safe object finalization"
msgstr ":pep:`442` -- 安全物件終結"

#: ../../whatsnew/3.4.rst:1841
#, fuzzy
msgid "PEP 456: Secure and Interchangeable Hash Algorithm"
msgstr "PEP 456：安全且可互換的雜湊演算法"

#: ../../whatsnew/3.4.rst:1843
#, fuzzy
msgid ""
":pep:`456` follows up on earlier security fix work done on Python's hash "
"algorithm to address certain DOS attacks to which public facing APIs backed "
"by dictionary lookups may be subject.  (See :issue:`14621` for the start of "
"the current round of improvements.)  The PEP unifies CPython's hash code to "
"make it easier for a packager to substitute a different hash algorithm, and "
"switches Python's default implementation to a SipHash implementation on "
"platforms that have a 64 bit data type.  Any performance differences in "
"comparison with the older FNV algorithm are trivial."
msgstr ""
":pep:`456` 跟進了早期針對 Python 的雜湊演算法所做的安全修復工作，以解決某些 "
"DOS 攻擊，字典查找支援的面向公眾的 API 可能會受到這些攻擊。 "
"（有關當前一輪改進的開始，請參閱 :issue:`14621`。）PEP 統一了 CPython "
"的雜湊程式碼，使打包器更容易替換不同的雜湊演算法，並將 Python "
"的預設實作切換為平台上的 SipHash 實作具有 64 位資料型別。與舊的 FNV "
"演算法相比，任何性能差異都是微不足道的。"

#: ../../whatsnew/3.4.rst:1852
#, fuzzy
msgid ""
"The PEP adds additional fields to the :attr:`sys.hash_info` named tuple to "
"describe the hash algorithm in use by the currently executing binary.  "
"Otherwise, the PEP does not alter any existing CPython APIs."
msgstr ""
"PEP 向 :attr:`sys.hash_info` 命名的元組新增了額外的欄位，以描述當前正在執行的"
"二進位文件使用的雜湊演算法。否則，PEP 不會更改任何現有的 CPython API。"

#: ../../whatsnew/3.4.rst:1860
#, fuzzy
msgid "PEP 436: Argument Clinic"
msgstr "PEP 436：爭論診所"

#: ../../whatsnew/3.4.rst:1862
#, fuzzy
msgid ""
"\"Argument Clinic\" (:pep:`436`) is now part of the CPython build process "
"and can be used to simplify the process of defining and maintaining accurate "
"signatures for builtins and standard library extension modules implemented "
"in C."
msgstr ""
"“Argument Clinic”(:pep:`436`) 現在是 CPython 構建過程的一部分，"
"可用於簡化定義和維護 C 中實作的內建函式和標準庫擴充模組的準確簽名的過程。"

#: ../../whatsnew/3.4.rst:1867
#, fuzzy
msgid ""
"Some standard library extension modules have been converted to use Argument "
"Clinic in Python 3.4, and :mod:`pydoc` and :mod:`inspect` have been updated "
"accordingly."
msgstr ""
"一些標準庫擴充模組已轉換為使用 Python 3.4 中的 Argument Clinic，並且 "
":mod:`pydoc` 和 :mod:`inspect` 已相應更新。"

#: ../../whatsnew/3.4.rst:1871
#, fuzzy
msgid ""
"It is expected that signature metadata for programmatic introspection will "
"be added to additional callables implemented in C as part of Python 3.4 "
"maintenance releases."
msgstr "預計用於編程自省的簽名元資料將作為 Python 3.4 維護版本的一部分新增到以 C "
"語言實作的其他可呼叫文件中。"

#: ../../whatsnew/3.4.rst:1876
#, fuzzy
msgid ""
"The Argument Clinic PEP is not fully up to date with the state of the "
"implementation. This has been deemed acceptable by the release manager and "
"core development team in this case, as Argument Clinic will not be made "
"available as a public API for third party use in Python 3.4."
msgstr ""
"Argument Clinic PEP 並未完全與實施狀態保持同步。在這種情況下，發布經理和核心"
"開發團隊認為這是可以接受的，因為 Argument Clinic 不會作為公開 API 提供給 "
"Python 3.4 中的第三方使用。"

#: ../../whatsnew/3.4.rst:1883
#, fuzzy
msgid ":pep:`436` -- The Argument Clinic DSL"
msgstr ":pep:`436` -- 爭論診所 DSL"

#: ../../whatsnew/3.4.rst:1884
msgid "PEP written and implemented by Larry Hastings."
msgstr "由 Larry Hastings 撰寫 PEP 與實作。"

#: ../../whatsnew/3.4.rst:1888
#, fuzzy
msgid "Other Build and C API Changes"
msgstr "其他構建和 C API 更改"

#: ../../whatsnew/3.4.rst:1890
#, fuzzy
msgid ""
"The new :c:func:`PyType_GetSlot` function has been added to the stable ABI, "
"allowing retrieval of function pointers from named type slots when using the "
"limited API.  (Contributed by Martin von Löwis in :issue:`17162`.)"
msgstr ""
"新的 :c:func:`PyType_GetSlot` 函式已新增到穩定的 ABI 中，允許在使用有限 API "
"時從命名型別槽中檢索函式指標。 （由 Martin von Löwis 在 :issue:`17162` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:1894
#, fuzzy
msgid ""
"The new :c:func:`Py_SetStandardStreamEncoding` pre-initialization API allows "
"applications embedding the CPython interpreter to reliably force a "
"particular encoding and error handler for the standard streams. (Contributed "
"by Bastien Montagne and Nick Coghlan in :issue:`16129`.)"
msgstr ""
"新的 :c:func:`Py_SetStandardStreamEncoding` 預初始化 API 允許嵌入 CPython "
"直譯器的應用程式可靠地為標準流強制執行特定的編碼和錯誤處理程式。 （由 "
"Bastien Montagne 和 Nick Coghlan 在 :issue:`16129` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1899
#, fuzzy
msgid ""
"Most Python C APIs that don't mutate string arguments are now correctly "
"marked as accepting ``const char *`` rather than ``char *``.  (Contributed "
"by Serhiy Storchaka in :issue:`1772673`.)"
msgstr ""
"大多數不改變字串參數的 Python C API 現在被正確標記為接受 ``const char *`` "
"而不是 ``char *``。 （由 Serhiy Storchaka 在 :issue:`1772673` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1903
#, fuzzy
msgid ""
"A new shell version of ``python-config`` can be used even when a python "
"interpreter is not available (for example, in cross compilation scenarios)."
msgstr "即使在 python 直譯器不可用時（例如，在交叉編譯場景中），也可以使用新的 shell "
"版本的 ``python-config``。"

#: ../../whatsnew/3.4.rst:1906
#, fuzzy
msgid ""
":c:func:`PyUnicode_FromFormat` now supports width and precision "
"specifications for ``%s``, ``%A``, ``%U``, ``%V``, ``%S``, and ``%R``. "
"(Contributed by Ysj Ray and Victor Stinner in :issue:`7330`.)"
msgstr ""
":c:func:`PyUnicode_FromFormat` 現在支援 "
"``%s``、``%A``、``%U``、``%V``、``%S`` 的寬度和精度規範，和``%R``。 （由 Ysj "
"Ray 和 Victor Stinner 在 :issue:`7330` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1910
#, fuzzy
msgid ""
"New function :c:func:`PyStructSequence_InitType2` supplements the existing :"
"c:func:`PyStructSequence_InitType` function.  The difference is that it "
"returns ``0`` on success and ``-1`` on failure."
msgstr ""
"新函式 :c:func:`PyStructSequence_InitType2` 補充了現有的 "
":c:func:`PyStructSequence_InitType` "
"函式。不同之處在於它在成功時回傳 ``0``，在失敗時回傳 ``-1``。"

#: ../../whatsnew/3.4.rst:1914
#, fuzzy
msgid ""
"The CPython source can now be compiled using the address sanity checking "
"features of recent versions of GCC and clang:  the false alarms in the small "
"object allocator have been silenced.  (Contributed by Dhiru Kholia in :issue:"
"`18596`.)"
msgstr ""
"現在可以使用最新版本的 GCC 和 clang 的地址健全性檢查功能編譯 CPython "
"源程式碼：小物件分配器中的錯誤警報已被消除。 （由 Dhiru Kholia 在 "
":issue:`18596` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1919
#, fuzzy
msgid ""
"The Windows build now uses `Address Space Layout Randomization <https://en."
"wikipedia.org/wiki/Address_space_layout_randomization>`_ and `Data Execution "
"Prevention <https://en.wikipedia.org/wiki/Data_Execution_Prevention>`_.  "
"(Contributed by Christian Heimes in :issue:`16632`.)"
msgstr ""
"Windows 構建現在使用“地址空間佈局隨機化 <https://en.wikipedia.org/wiki/"
"Address_space_layout_randomization>”和“資料執行保護 <https://en.wikipedia."
"org/wiki/Data_Execution_Prevention>”。 （由 Christian Heimes 在 "
":issue:`16632` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1924
#, fuzzy
msgid ""
"New function :c:func:`PyObject_LengthHint` is the C API equivalent of :func:"
"`operator.length_hint`.  (Contributed by Armin Ronacher in :issue:`16148`.)"
msgstr ""
"新函式 :c:func:`PyObject_LengthHint` 是等同於 :func:`operator.length_hint` "
"的 C API。 （由 Armin Ronacher 在 :issue:`16148` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1932
#, fuzzy
msgid "Other Improvements"
msgstr "其他改進"

#: ../../whatsnew/3.4.rst:1936
#, fuzzy
msgid ""
"The :ref:`python <using-on-cmdline>` command has a new :ref:`option <using-"
"on-misc-options>`, ``-I``, which causes it to run in \"isolated mode\", "
"which means that :data:`sys.path` contains neither the script's directory "
"nor the user's ``site-packages`` directory, and all :envvar:`PYTHON*` "
"environment variables are ignored (it implies both ``-s`` and ``-E``).  "
"Other restrictions may also be applied in the future, with the goal being to "
"isolate the execution of a script from the user's environment.  This is "
"appropriate, for example, when Python is used to run a system script.  On "
"most POSIX systems it can and should be used in the ``#!`` line of system "
"scripts.  (Contributed by Christian Heimes in :issue:`16499`.)"
msgstr ""
":ref:`python <using-on-cmdline>` 命令有一個新的 :ref:`option <using-on-misc-"
"options>`，``-I``，這使它在“隔離模式”下運行\"，這意味著 :data:`sys.path` "
"既不包含腳本目錄，也不包含使用者的 ``site-packages`` 目錄，所有 "
":envvar:`PYTHON*` 環境變數都被忽略（這意味著 ``- s`` 和 ``-E``）。將來也可能"
"會應用其他限制，目的是將腳本的執行與使用者環境隔離開來。例如，當使用 Python "
"運行系統腳本時，這是合適的。在大多數 POSIX 系統上，"
"它可以而且應該在系統腳本的 ``#!`` 行中使用。 （由 Christian Heimes 在 "
":issue:`16499` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1947
#, fuzzy
msgid ""
"Tab-completion is now enabled by default in the interactive interpreter on "
"systems that support :mod:`readline`.  History is also enabled by default, "
"and is written to (and read from) the file :file:`~/.python-history`. "
"(Contributed by Antoine Pitrou and Éric Araujo in :issue:`5845`.)"
msgstr ""
"在支援 :mod:`readline` 的系統上，交互式直譯器現在預設啟用製表符補全。歷史也預"
"設啟用，並寫入（和讀取）文件 :file:`~/.python-history`。 （由 Antoine "
"Pitrou 和 Éric Araujo 在 :issue:`5845` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1952
#, fuzzy
msgid ""
"Invoking the Python interpreter with ``--version`` now outputs the version "
"to standard output instead of standard error (:issue:`18338`). Similar "
"changes were made to :mod:`argparse` (:issue:`18920`) and other modules that "
"have script-like invocation capabilities (:issue:`18922`)."
msgstr ""
"使用 ``--version`` 呼叫 Python 直譯器現在將版本輸出到標準輸出而不是標準錯誤 "
"(:issue:`18338`)。對 :mod:`argparse` (:issue:`18920`) "
"和其他具有類似腳本呼叫功能的模組 (:issue:`18922`) 進行了類似的更改。"

#: ../../whatsnew/3.4.rst:1957
#, fuzzy
msgid ""
"The CPython Windows installer now adds ``.py`` to the :envvar:`PATHEXT` "
"variable when extensions are registered, allowing users to run a python "
"script at the windows command prompt by just typing its name without the ``."
"py`` extension.  (Contributed by Paul Moore in :issue:`18569`.)"
msgstr ""
"CPython Windows 安裝程式現在在註冊擴充時將 ``.py`` 新增到 :envvar:`PATHEXT` "
"變數，允許使用者在 Windows 命令提示符下運行 python 腳本，"
"只需鍵入其名稱而無需 ``.py` ` 擴充名。 （由 Paul Moore 在 :issue:`18569` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:1962
#, fuzzy
msgid ""
"A new ``make`` target `coverage-report <https://devguide.python.org/coverage/"
"#measuring-coverage-of-c-code-with-gcov-and-lcov>`_ will build python, run "
"the test suite, and generate an HTML coverage report for the C codebase "
"using ``gcov`` and `lcov <https://ltp.sourceforge.net/coverage/lcov.php>`_."
msgstr ""
"一個新的``make`` 目標`coverage-report <https://devguide.python.org/coverage/"
"#measuring-coverage-of-c-code-with-gcov-and-lcov>`_ 將構建 "
"python，運行測試套件，並使用 ``gcov`` 和 `lcov <https://ltp.sourceforge.net/"
"coverage/lcov.php>`_ 為 C 程式碼庫生成 HTML 覆蓋率報告。"

#: ../../whatsnew/3.4.rst:1968
#, fuzzy
msgid ""
"The ``-R`` option to the :ref:`python regression test suite <regrtest>` now "
"also checks for memory allocation leaks, using :func:`sys."
"getallocatedblocks()`.  (Contributed by Antoine Pitrou in :issue:`13390`.)"
msgstr ""
":ref:`python 回歸測試套件 <regrtest>` 的 ``-R`` 選項現在還使用 :func:`sys."
"getallocatedblocks()` 檢查記憶體分配洩漏。 （由 Antoine Pitrou 在 "
":issue:`13390` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1973
#, fuzzy
msgid "``python -m`` now works with namespace packages."
msgstr "``python -m`` 現在可以與命名空間包一起使用。"

#: ../../whatsnew/3.4.rst:1975
#, fuzzy
msgid ""
"The :mod:`stat` module is now implemented in C, which means it gets the "
"values for its constants from the C header files, instead of having the "
"values hard-coded in the python module as was previously the case."
msgstr ":mod:`stat` 模組現在在 C 中實作，這意味著它從 C 標頭檔中獲取常數值，"
"而不是像以前那樣在 python 模組中硬編碼這些值。"

#: ../../whatsnew/3.4.rst:1979
#, fuzzy
msgid ""
"Loading multiple python modules from a single OS module (``.so``, ``.dll``) "
"now works correctly (previously it silently returned the first python module "
"in the file).  (Contributed by Václav Šmilauer in :issue:`16421`.)"
msgstr ""
"從單個操作系統模組（``.so``、``.dll``）加載多個 python 模組現在可以正常工作（"
"以前它會靜默回傳文件中的第一個 python 模組）。 （由 Václav Šmilauer 在 "
":issue:`16421` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1983
#, fuzzy
msgid ""
"A new opcode, :opcode:`LOAD_CLASSDEREF`, has been added to fix a bug in the "
"loading of free variables in class bodies that could be triggered by certain "
"uses of :ref:`__prepare__ <prepare>`.  (Contributed by Benjamin Peterson in :"
"issue:`17853`.)"
msgstr ""
"新增了一個新的操作碼 :opcode:`LOAD_CLASSDEREF` "
"以修復在類主體中加載自由變數時可能由 :ref:`__prepare__ <prepare>` "
"的某些使用觸發的錯誤。 （由 Benjamin Peterson 在 :issue:`17853` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1988
#, fuzzy
msgid ""
"A number of MemoryError-related crashes were identified and fixed by Victor "
"Stinner using his :pep:`445`-based ``pyfailmalloc`` tool (:issue:`18408`, :"
"issue:`18520`)."
msgstr ""
"Victor Stinner 使用他的基於 :pep:`445` 的``pyfailmalloc`` "
"工具（:issue:`18408`、:issue:`18520`）識別並修復了許多與 MemoryError "
"相關的崩潰。"

#: ../../whatsnew/3.4.rst:1992
#, fuzzy
msgid ""
"The ``pyvenv`` command now accepts a ``--copies`` option to use copies "
"rather than symlinks even on systems where symlinks are the default.  "
"(Contributed by Vinay Sajip in :issue:`18807`.)"
msgstr ""
"``pyvenv`` 命令現在接受``--copies`` "
"選項以使用副本而不是符號鏈接，即使在預設符號鏈接的系統上也是如此。 （由 "
"Vinay Sajip 在 :issue:`18807` 中貢獻。）"

#: ../../whatsnew/3.4.rst:1996
#, fuzzy
msgid ""
"The ``pyvenv`` command also accepts a ``--without-pip`` option to suppress "
"the otherwise-automatic bootstrapping of pip into the virtual environment.  "
"(Contributed by Nick Coghlan in :issue:`19552` as part of the :pep:`453` "
"implementation.)"
msgstr ""
"``pyvenv`` 命令還接受一個 ``--without-pip`` 選項來抑制將 pip "
"自動引導到虛擬環境中。 （由 Nick Coghlan 在 :issue:`19552` 中作為 :pep:`453` "
"實作的一部分貢獻。）"

#: ../../whatsnew/3.4.rst:2001
#, fuzzy
msgid ""
"The encoding name is now optional in the value set for the :envvar:"
"`PYTHONIOENCODING` environment variable.  This makes it possible to set just "
"the error handler, without changing the default encoding. (Contributed by "
"Serhiy Storchaka in :issue:`18818`.)"
msgstr ""
"編碼名稱現在在 PYTHONIOENCODING 環境變數的值集中是可選的。這使得只設定錯誤處"
"理程式成為可能，而無需更改預設編碼。 （由 Serhiy Storchaka 在 :issue:`18818` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:2006
#, fuzzy
msgid ""
"The :mod:`bz2`, :mod:`lzma`, and :mod:`gzip` module ``open`` functions now "
"support ``x`` (exclusive creation) mode.  (Contributed by Tim Heaney and "
"Vajrasky Kok in :issue:`19201`, :issue:`19222`, and :issue:`19223`.)"
msgstr ""
":mod:`bz2`、:mod:`lzma` 和 :mod:`gzip` 模組``open`` "
"函式現在支援``x``（獨占建立）模式。 （由 Tim Heaney 和 Vajrasky Kok 在 "
":issue:`19201`、:issue:`19222` 和 :issue:`19223` 中貢獻。）"

#: ../../whatsnew/3.4.rst:2012
#, fuzzy
msgid "Significant Optimizations"
msgstr "重大最佳化"

#: ../../whatsnew/3.4.rst:2014
#, fuzzy
msgid ""
"The UTF-32 decoder is now 3x to 4x faster.  (Contributed by Serhiy Storchaka "
"in :issue:`14625`.)"
msgstr "UTF-32 解碼器現在快 3 到 4 倍。 （由 Serhiy Storchaka 在 :issue:`14625` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:2017
#, fuzzy
msgid ""
"The cost of hash collisions for sets is now reduced.  Each hash table probe "
"now checks a series of consecutive, adjacent key/hash pairs before "
"continuing to make random probes through the hash table.  This exploits "
"cache locality to make collision resolution less expensive. The collision "
"resolution scheme can be described as a hybrid of linear probing and open "
"addressing.  The number of additional linear probes defaults to nine.  This "
"can be changed at compile-time by defining LINEAR_PROBES to be any value.  "
"Set LINEAR_PROBES=0 to turn-off linear probing entirely.  (Contributed by "
"Raymond Hettinger in :issue:`18771`.)"
msgstr ""
"集合的散列衝突成本現在降低了。現在，每個雜湊表探測都會在繼續通過雜湊表進行隨"
"機探測之前檢查一系列連續的、相鄰的鍵/雜湊對。這利用快取局部性來降低衝突解決的"
"成本。衝突解決方案可以描述為線性探測和開放尋址的混合體。附加線性探頭的數量預"
"設為九個。這可以在編譯時通過將 LINEAR_PROBES 定義為任何值來更改。設定 "
"LINEAR_PROBES=0 以完全關閉線性探測。 （由 Raymond Hettinger 在 :issue:`18771`"
" 中貢獻。）"

#: ../../whatsnew/3.4.rst:2028
#, fuzzy
msgid ""
"The interpreter starts about 30% faster. A couple of measures lead to the "
"speedup. The interpreter loads fewer modules on startup, e.g. the :mod:"
"`re`, :mod:`collections` and :mod:`locale` modules and their dependencies "
"are no longer imported by default. The marshal module has been improved to "
"load compiled Python code faster.  (Contributed by Antoine Pitrou, Christian "
"Heimes and Victor Stinner in :issue:`19219`, :issue:`19218`, :issue:"
"`19209`, :issue:`19205` and :issue:`9548`.)"
msgstr ""
"直譯器的啟動速度提高了大約 "
"30%。一些措施導致加速。直譯器在啟動時加載較少的模組，例如預設情況下不再導入 "
":mod:`re`、:mod:`collections` 和 :mod:`locale` 模組及其依賴項。 marshal "
"模組已得到改進，可以更快地加載已編譯的 Python 程式碼。 （由 Antoine Pitrou、"
"Christian Heimes 和 Victor Stinner 在 "
":issue:`19219`、:issue:`19218`、:issue:`19209`、:issue:`19205` 和 "
":issue:`9548` 中貢獻。）"

#: ../../whatsnew/3.4.rst:2036
#, fuzzy
msgid ""
":class:`bz2.BZ2File` is now as fast or faster than the Python2 version for "
"most cases.  :class:`lzma.LZMAFile` has also been optimized.  (Contributed "
"by Serhiy Storchaka and Nadeem Vawda in :issue:`16034`.)"
msgstr ""
":class:`bz2.BZ2File` 現在在大多數情況下與 Python2 版本一樣快或更快。 "
":class:`lzma.LZMAFile` 也進行了最佳化。 （由 Serhiy Storchaka 和 Nadeem "
"Vawda 在 :issue:`16034` 中貢獻。）"

#: ../../whatsnew/3.4.rst:2040
#, fuzzy
msgid ""
":func:`random.getrandbits` is 20%-40% faster for small integers (the most "
"common use case).  (Contributed by Serhiy Storchaka in :issue:`16674`.)"
msgstr ""
":func:`random.getrandbits` 對於小整數（最常見的用例）快 20%-40%。 （由 "
"Serhiy Storchaka 在 :issue:`16674` 中貢獻。）"

#: ../../whatsnew/3.4.rst:2043
#, fuzzy
msgid ""
"By taking advantage of the new storage format for strings, pickling of "
"strings is now significantly faster.  (Contributed by Victor Stinner and "
"Antoine Pitrou in :issue:`15596`.)"
msgstr ""
"通過利用新的字串儲存格式，字串的酸洗現在明顯更快。 （由 Victor Stinner 和 "
"Antoine Pitrou 在 :issue:`15596` 中貢獻。）"

#: ../../whatsnew/3.4.rst:2047
#, fuzzy
msgid ""
"A performance issue in :meth:`io.FileIO.readall` has been solved.  This "
"particularly affects Windows, and significantly speeds up the case of piping "
"significant amounts of data through :mod:`subprocess`.  (Contributed by "
"Richard Oudkerk in :issue:`15758`.)"
msgstr ""
":meth:`io.FileIO.readall` 中的一個性能問題已經解決。這尤其會影響 Windows，"
"並顯著加快通過 :mod:`subprocess` 傳輸大量資料的情況。 （由 Richard Oudkerk "
"在 :issue:`15758` 中貢獻。）"

#: ../../whatsnew/3.4.rst:2052
#, fuzzy
msgid ""
":func:`html.escape` is now 10x faster.  (Contributed by Matt Bryant in :"
"issue:`18020`.)"
msgstr ":func:`html.escape` 現在快了 10 倍。 （由 Matt Bryant 在 :issue:`18020` "
"中貢獻。）"

#: ../../whatsnew/3.4.rst:2055
#, fuzzy
msgid ""
"On Windows, the native ``VirtualAlloc`` is now used instead of the CRT "
"``malloc`` in ``obmalloc``.  Artificial benchmarks show about a 3% memory "
"savings."
msgstr ""
"在 Windows 上，現在使用原生的 ``VirtualAlloc`` 而不是 ``obmalloc`` 中的 CRT "
"``malloc``。人工基準測試顯示節省了大約 3% 的記憶體。"

#: ../../whatsnew/3.4.rst:2059
#, fuzzy
msgid ""
":func:`os.urandom` now uses a lazily opened persistent file descriptor so as "
"to avoid using many file descriptors when run in parallel from multiple "
"threads.  (Contributed by Antoine Pitrou in :issue:`18756`.)"
msgstr ""
":func:`os.urandom` 現在使用延遲打開的持久文件描述器，以避免在從多個執行緒並行"
"運行時使用許多文件描述器。 （由 Antoine Pitrou 在 :issue:`18756` 中貢獻。）"

#: ../../whatsnew/3.4.rst:2067
#, fuzzy
msgid "Deprecated"
msgstr "棄用"

#: ../../whatsnew/3.4.rst:2069
#, fuzzy
msgid ""
"This section covers various APIs and other features that have been "
"deprecated in Python 3.4, and will be removed in Python 3.5 or later.  In "
"most (but not all) cases, using the deprecated APIs will produce a :exc:"
"`DeprecationWarning` when the interpreter is run with deprecation warnings "
"enabled (for example, by using ``-Wd``)."
msgstr ""
"本節介紹了 Python 3.4 中已棄用的各種 API 和其他功能，並將在 Python 3.5 或更高"
"版本中刪除。在大多數（但不是全部）情況下，當直譯器在啟用棄用警告的情況下運行"
"時（例如，通過使用 ``-Wd``），使用棄用的 API 將產生一個 DeprecationWarning。"

#: ../../whatsnew/3.4.rst:2077
#, fuzzy
msgid "Deprecations in the Python API"
msgstr "Python API 中的棄用"

#: ../../whatsnew/3.4.rst:2079
#, fuzzy
msgid ""
"As mentioned in :ref:`whatsnew-pep-451`, a number of :mod:`importlib` "
"methods and functions are deprecated: :meth:`importlib.find_loader` is "
"replaced by :func:`importlib.util.find_spec`; :meth:`importlib.machinery."
"PathFinder.find_module` is replaced by :meth:`importlib.machinery.PathFinder."
"find_spec`; :meth:`importlib.abc.MetaPathFinder.find_module` is replaced by :"
"meth:`importlib.abc.MetaPathFinder.find_spec`; :meth:`importlib.abc."
"PathEntryFinder.find_loader` and :meth:`~importlib.abc.PathEntryFinder."
"find_module` are replaced by :meth:`importlib.abc.PathEntryFinder."
"find_spec`; all of the ``xxxLoader`` ABC ``load_module`` methods (:meth:"
"`importlib.abc.Loader.load_module`, :meth:`importlib.abc.InspectLoader."
"load_module`, :meth:`importlib.abc.FileLoader.load_module`, :meth:`importlib."
"abc.SourceLoader.load_module`) should no longer be implemented, instead "
"loaders should implement an ``exec_module`` method (:meth:`importlib.abc."
"Loader.exec_module`, :meth:`importlib.abc.InspectLoader.exec_module` :meth:"
"`importlib.abc.SourceLoader.exec_module`) and let the import system take "
"care of the rest; and :meth:`importlib.abc.Loader.module_repr`, :meth:"
"`importlib.util.module_for_loader`, :meth:`importlib.util.set_loader`, and :"
"meth:`importlib.util.set_package` are no longer needed because their "
"functions are now handled automatically by the import system."
msgstr ""
"如 :ref:`whatsnew-pep-451` 中所述，許多 :mod:`importlib` 方法和函式已棄用： "
":meth:`importlib.find_loader` 被 :func:`importlib.util.find_spec` 取代; "
":meth:`importlib.machinery.PathFinder.find_module` 被 :meth:`importlib."
"machinery.PathFinder.find_spec` 取代； :meth:`importlib.abc.MetaPathFinder."
"find_module` 被替換為 :meth:`importlib.abc.MetaPathFinder.find_spec`； "
":meth:`importlib.abc.PathEntryFinder.find_loader` 和 :meth:`~importlib.abc."
"PathEntryFinder.find_module` 被 :meth:`importlib.abc.PathEntryFinder."
"find_spec` 取代；所有的 ``xxxLoader`` ABC ``load_module`` "
"方法FileLoader.load_module, :meth:`importlib.abc.SourceLoader.load_module`) "
"不應再被實作，加載器應該實作一個 ``exec_module`` 方法 (:meth:`importlib.abc."
"Loader.exec_module`, : meth:`importlib.abc.InspectLoader.exec_module` "
":meth:`importlib.abc.SourceLoader.exec_module`) 讓導入系統處理剩下的事情；和 "
":meth:`importlib.abc.Loader.module_repr`、:meth:`importlib.util."
"module_for_loader`、:meth:`importlib.util.set_loader` 和 :meth:`importlib."
"util.set_package` 不再需要，因為它們的功能現在由導入系統自動處理。"

#: ../../whatsnew/3.4.rst:2104
#, fuzzy
msgid ""
"The :mod:`imp` module is pending deprecation. To keep compatibility with "
"Python 2/3 code bases, the module's removal is currently not scheduled."
msgstr ":mod:`imp` 模組正在等待棄用。為了保持與 Python 2/3 "
"程式碼庫的相容性，目前未計劃刪除該模組。"

#: ../../whatsnew/3.4.rst:2107
#, fuzzy
msgid ""
"The :mod:`formatter` module is pending deprecation and is slated for removal "
"in Python 3.6."
msgstr ":mod:`formatter` 模組正在等待棄用，併計劃在 Python 3.6 中刪除。"

#: ../../whatsnew/3.4.rst:2110
#, fuzzy
msgid ""
"``MD5`` as the default *digestmod* for the :func:`hmac.new` function is "
"deprecated.  Python 3.6 will require an explicit digest name or constructor "
"as *digestmod* argument."
msgstr ""
"``MD5`` 作為 :func:`hmac.new` 函式的預設 *digestmod* 已被棄用。 Python 3.6 "
"將需要一個明確的摘要名稱或構造函式作為 *digestmod* 參數。"

#: ../../whatsnew/3.4.rst:2114
#, fuzzy
msgid ""
"The internal ``Netrc`` class in the :mod:`ftplib` module has been documented "
"as deprecated in its docstring for quite some time.  It now emits a :exc:"
"`DeprecationWarning` and will be removed completely in Python 3.5."
msgstr ""
":mod:`ftplib` 模組中的內部 ``Netrc`` "
"類在其文檔字串中已被記錄為已棄用已有一段時間。它現在發出一個 "
"DeprecationWarning 並將在 Python 3.5 中完全刪除。"

#: ../../whatsnew/3.4.rst:2118
#, fuzzy
msgid ""
"The undocumented *endtime* argument to :meth:`subprocess.Popen.wait` should "
"not have been exposed and is hopefully not in use; it is deprecated and will "
"mostly likely be removed in Python 3.5."
msgstr ""
":meth:`subprocess.Popen.wait` 的未記錄的 *endtime* "
"參數不應該被公開，希望不會被使用；它已被棄用，很可能會在 Python 3.5 "
"中被刪除。"

#: ../../whatsnew/3.4.rst:2122
#, fuzzy
msgid ""
"The *strict* argument of :class:`~html.parser.HTMLParser` is deprecated."
msgstr ":class:`~html.parser.HTMLParser` 的 *strict* 參數已棄用。"

#: ../../whatsnew/3.4.rst:2124
#, fuzzy
msgid ""
"The :mod:`plistlib` :func:`~plistlib.readPlist`, :func:`~plistlib."
"writePlist`, :func:`~plistlib.readPlistFromBytes`, and :func:`~plistlib."
"writePlistToBytes` functions are deprecated in favor of the corresponding "
"new functions :func:`~plistlib.load`, :func:`~plistlib.dump`, :func:"
"`~plistlib.loads`, and :func:`~plistlib.dumps`.  :func:`~plistlib.Data` is "
"deprecated in favor of just using the :class:`bytes` constructor."
msgstr ""
":mod:`plistlib` :func:`~plistlib.readPlist`、:func:`~plistlib."
"writePlist`、:func:`~plistlib.readPlistFromBytes` 和 :func:`~plistlib."
"writePlistToBytes` 函式已棄用支援相應的新函式 :func:`~plistlib."
"load`、:func:`~plistlib.dump`、:func:`~plistlib.loads` 和 :func:`~plistlib."
"dumps`。 :func:`~plistlib.Data` 已棄用，取而代之的是僅使用 :class:`bytes` "
"構造函式。"

#: ../../whatsnew/3.4.rst:2131
#, fuzzy
msgid ""
"The :mod:`sysconfig` key ``SO`` is deprecated, it has been replaced by "
"``EXT_SUFFIX``."
msgstr ":mod:`sysconfig` 鍵 ``SO`` 已被棄用，它已被 ``EXT_SUFFIX`` 取代。"

#: ../../whatsnew/3.4.rst:2134
#, fuzzy
msgid ""
"The ``U`` mode accepted by various ``open`` functions is deprecated. In "
"Python3 it does not do anything useful, and should be replaced by "
"appropriate uses of :class:`io.TextIOWrapper` (if needed) and its *newline* "
"argument."
msgstr ""
"不推薦使用各種 ``open`` 函式接受的 ``U`` 模式。在 Python3 "
"中，它沒有做任何有用的事情，應該被 io.TextIOWrapper 的適當使用（如果需要）"
"及其 *newline* 參數所取代。"

#: ../../whatsnew/3.4.rst:2139
#, fuzzy
msgid ""
"The *parser* argument of :func:`xml.etree.ElementTree.iterparse` has been "
"deprecated, as has the *html* argument of :func:`~xml.etree.ElementTree."
"XMLParser`.  To prepare for the removal of the latter, all arguments to "
"``XMLParser`` should be passed by keyword."
msgstr ""
":func:`xml.etree.ElementTree.iterparse` 的 *parser* 參數已被棄用，就像 "
":func:`~xml.etree.ElementTree.XMLParser` 的 *html* "
"參數一樣。為了準備刪除後者， ``XMLParser`` 的所有參數都應通過關鍵字傳遞。"

#: ../../whatsnew/3.4.rst:2146
#, fuzzy
msgid "Deprecated Features"
msgstr "棄用的功能"

#: ../../whatsnew/3.4.rst:2148
#, fuzzy
msgid ""
"Running :ref:`idle` with the ``-n`` flag (no subprocess) is deprecated. "
"However, the feature will not be removed until :issue:`18823` is resolved."
msgstr ""
"使用 ``-n`` 旗標（無子行程）運行 :ref:`idle` 已被棄用。但是，在 "
":issue:`18823` 得到解決之前，該功能不會被刪除。"

#: ../../whatsnew/3.4.rst:2151
#, fuzzy
msgid ""
"The site module adding a \"site-python\" directory to sys.path, if it "
"exists, is deprecated (:issue:`19375`)."
msgstr "將 ``site-python`` 目錄新增到 sys.path "
"的站點模組（如果存在）已棄用（:issue:`19375`）。"

#: ../../whatsnew/3.4.rst:2157
#, fuzzy
msgid "Removed"
msgstr "刪除"

#: ../../whatsnew/3.4.rst:2161
#, fuzzy
msgid "Operating Systems No Longer Supported"
msgstr "不再支援的操作系統"

#: ../../whatsnew/3.4.rst:2163
#, fuzzy
msgid ""
"Support for the following operating systems has been removed from the source "
"and build tools:"
msgstr "已從源程式碼和構建工具中刪除對以下操作系統的支援："

#: ../../whatsnew/3.4.rst:2166
#, fuzzy
msgid "OS/2 (:issue:`16135`)."
msgstr "OS/2（ :issue:`16135`）。"

#: ../../whatsnew/3.4.rst:2167
#, fuzzy
msgid "Windows 2000 (changeset e52df05b496a)."
msgstr "Windows 2000（變更集 e52df05b496a）。"

#: ../../whatsnew/3.4.rst:2168
#, fuzzy
msgid ""
"Windows systems where ``COMSPEC`` points to ``command.com`` (:issue:`14470`)."
msgstr "``COMSPEC`` 指向 ``command.com`` 的 Windows 系統（ :issue:`14470`）。"

#: ../../whatsnew/3.4.rst:2169
#, fuzzy
msgid "VMS (:issue:`16136`)."
msgstr "VMS（ :issue:`16136`）。"

#: ../../whatsnew/3.4.rst:2173
#, fuzzy
msgid "API and Feature Removals"
msgstr "API 和功能刪除"

#: ../../whatsnew/3.4.rst:2175
#, fuzzy
msgid ""
"The following obsolete and previously deprecated APIs and features have been "
"removed:"
msgstr "以下過時和以前棄用的 API 和功能已被刪除："

#: ../../whatsnew/3.4.rst:2178
#, fuzzy
msgid ""
"The unmaintained ``Misc/TextMate`` and ``Misc/vim`` directories have been "
"removed (see the `devguide <https://devguide.python.org>`_ for suggestions "
"on what to use instead)."
msgstr ""
"未維護的 ``Misc/TextMate`` 和 ``Misc/vim`` 目錄已被刪除（請參閱 `devguide "
"<https://devguide.python.org>`_ 以獲取有關使用內容的建議）。"

#: ../../whatsnew/3.4.rst:2182
#, fuzzy
msgid ""
"The ``SO`` makefile macro is removed (it was replaced by the "
"``SHLIB_SUFFIX`` and ``EXT_SUFFIX`` macros) (:issue:`16754`)."
msgstr ""
"``SO`` makefile 巨集被刪除（它被``SHLIB_SUFFIX`` 和``EXT_SUFFIX`` "
"巨集取代）（ :issue:`16754`）。"

#: ../../whatsnew/3.4.rst:2185
#, fuzzy
msgid ""
"The ``PyThreadState.tick_counter`` field has been removed; its value has "
"been meaningless since Python 3.2, when the \"new GIL\" was introduced (:"
"issue:`19199`)."
msgstr ""
"``PyThreadState.tick_counter`` 欄位已被刪除；自從 Python 3.2 引入“新 "
"GIL”（:issue:`19199`）以來，它的值就沒有意義了。"

#: ../../whatsnew/3.4.rst:2189
#, fuzzy
msgid ""
"``PyLoader`` and ``PyPycLoader`` have been removed from :mod:`importlib`. "
"(Contributed by Taras Lyapun in :issue:`15641`.)"
msgstr ""
"``PyLoader`` 和 ``PyPycLoader`` 已從 :mod:`importlib` 中刪除。 （由 Taras "
"Lyapun 在 :issue:`15641` 中貢獻。）"

#: ../../whatsnew/3.4.rst:2192
#, fuzzy
msgid ""
"The *strict* argument to :class:`~http.client.HTTPConnection` and :class:"
"`~http.client.HTTPSConnection` has been removed.  HTTP 0.9-style \"Simple "
"Responses\" are no longer supported."
msgstr ""
":class:`~http.client.HTTPConnection` 和 :class:`~http.client.HTTPSConnection`"
" 的 *strict* 參數已被刪除。不再支援 HTTP 0.9 樣式的“簡單響應”。"

#: ../../whatsnew/3.4.rst:2196
#, fuzzy
msgid ""
"The deprecated :mod:`urllib.request.Request` getter and setter methods "
"``add_data``, ``has_data``, ``get_data``, ``get_type``, ``get_host``, "
"``get_selector``, ``set_proxy``, ``get_origin_req_host``, and "
"``is_unverifiable`` have been removed (use direct attribute access instead)."
msgstr ""
"已棄用的 :mod:`urllib.request.Request` getter 和 setter 方法``add_data``、``h"
"as_data``、``get_data``、``get_type``、``get_host``、``get_selector` "
"`、``set_proxy``、``get_origin_req_host`` 和 ``is_unverifiable`` "
"已被刪除（改為使用直接屬性訪問）。"

#: ../../whatsnew/3.4.rst:2201
#, fuzzy
msgid ""
"Support for loading the deprecated ``TYPE_INT64`` has been removed from :mod:"
"`marshal`.  (Contributed by Dan Riti in :issue:`15480`.)"
msgstr ""
"對加載已棄用的 TYPE_INT64 的支援已從 :mod:`marshal` 中刪除。 （由 Dan Riti "
"在 :issue:`15480` 中貢獻。）"

#: ../../whatsnew/3.4.rst:2204
#, fuzzy
msgid ""
":class:`inspect.Signature`: positional-only parameters are now required to "
"have a valid name."
msgstr ":class:`inspect.Signature`：現在要求僅位置參數具有有效名稱。"

#: ../../whatsnew/3.4.rst:2207
#, fuzzy
msgid ""
":meth:`object.__format__` no longer accepts non-empty format strings, it now "
"raises a :exc:`TypeError` instead.  Using a non-empty string has been "
"deprecated since Python 3.2.  This change has been made to prevent a "
"situation where previously working (but incorrect) code would start failing "
"if an object gained a __format__ method, which means that your code may now "
"raise a :exc:`TypeError` if you are using an ``'s'`` format code with "
"objects that do not have a __format__ method that handles it.  See :issue:"
"`7994` for background."
msgstr ""
":meth:`object.__format__` 不再接受非空格式字串，它現在引發一個 "
":exc:`TypeError` 代替。自 Python 3.2 以來，不推薦使用非空字串。"
"進行此更改是為了防止如果物件獲得 __format__ "
"方法時以前工作（但不正確）的程式碼開始失敗的情況，這意味著如果您使用的是 ``，"
"您的程式碼現在可能會引發 :exc:`TypeError` ``'s'`` 格式程式碼的對像沒有處理它的 "
"__format__ 方法。有關背景，請參閱 :issue:`7994`。"

#: ../../whatsnew/3.4.rst:2216
#, fuzzy
msgid ""
":meth:`difflib.SequenceMatcher.isbjunk` and :meth:`difflib.SequenceMatcher."
"isbpopular` were deprecated in 3.2, and have now been removed: use ``x in sm."
"bjunk`` and ``x in sm.bpopular``, where *sm* is a :class:`~difflib."
"SequenceMatcher` object (:issue:`13248`)."
msgstr ""
":meth:`difflib.SequenceMatcher.isbjunk` 和 :meth:`difflib.SequenceMatcher."
"isbpopular` 在 3.2 中被棄用，現在已被刪除：use ``x in sm.bjunk`` 和 ``x in "
"sm.bpopular ``，其中 *sm* 是一個 :class:`~difflib.SequenceMatcher` 物件 "
"(:issue:`13248`)。"

#: ../../whatsnew/3.4.rst:2224
#, fuzzy
msgid "Code Cleanups"
msgstr "程式碼清理"

#: ../../whatsnew/3.4.rst:2226
#, fuzzy
msgid ""
"The unused and undocumented internal ``Scanner`` class has been removed from "
"the :mod:`pydoc` module."
msgstr "未使用和未記錄的內部 ``Scanner`` 類已從 :mod:`pydoc` 模組中刪除。"

#: ../../whatsnew/3.4.rst:2229
#, fuzzy
msgid ""
"The private and effectively unused ``_gestalt`` module has been removed, "
"along with the private :mod:`platform` functions ``_mac_ver_lookup``, "
"``_mac_ver_gstalt``, and ``_bcd2str``, which would only have ever been "
"called on badly broken OSX systems (see :issue:`18393`)."
msgstr ""
"私有且實際上未使用的 ``_gestalt`` 模組已被刪除，連同私有 :mod:`platform` "
"函式``_mac_ver_lookup``、``_mac_ver_gstalt`` 和``_bcd2str``，"
"它們只會永遠在嚴重損壞的 OSX 系統上被呼叫（參見 :issue:`18393`）。"

#: ../../whatsnew/3.4.rst:2234
#, fuzzy
msgid ""
"The hardcoded copies of certain :mod:`stat` constants that were included in "
"the :mod:`tarfile` module namespace have been removed."
msgstr "包含在 :mod:`tarfile` 模組命名空間中的某些 :mod:`stat` "
"常數的硬編碼副本已被刪除。"

#: ../../whatsnew/3.4.rst:2240
#, fuzzy
msgid "Porting to Python 3.4"
msgstr "移植到 Python 3.4"

#: ../../whatsnew/3.4.rst:2242
#, fuzzy
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr "本節列出了先前描述的更改和其他可能需要更改程式碼的錯誤修復。"

#: ../../whatsnew/3.4.rst:2247
#, fuzzy
msgid "Changes in 'python' Command Behavior"
msgstr " ``python``命令列為的變化"

#: ../../whatsnew/3.4.rst:2249
#, fuzzy
msgid ""
"In a posix shell, setting the :envvar:`PATH` environment variable to an "
"empty value is equivalent to not setting it at all.  However, setting :"
"envvar:`PYTHONPATH` to an empty value was *not* equivalent to not setting it "
"at all: setting :envvar:`PYTHONPATH` to an empty value was equivalent to "
"setting it to ``.``, which leads to confusion when reasoning by analogy to "
"how :envvar:`PATH` works.  The behavior now conforms to the posix convention "
"for :envvar:`PATH`."
msgstr ""
"在 posix shell 中，將 :envvar:`PATH` "
"環境變數設定為空值相當於根本不設定它。但是，將 :envvar:`PYTHONPATH` "
"設定為空值 *不* 等同於根本不設定它：將 :envvar:`PYTHONPATH` "
"設定為空值等同於將其設定為 ``.``，這導致在通過類比 :envvar:`PATH` "
"的工作原理進行推理時會造成混淆。該行為現在符合 :envvar:`PATH` 的 posix 約定。"

#: ../../whatsnew/3.4.rst:2257
#, fuzzy
msgid ""
"The [X refs, Y blocks] output of a debug (``--with-pydebug``) build of the "
"CPython interpreter is now off by default.  It can be re-enabled using the "
"``-X showrefcount`` option.  (Contributed by Ezio Melotti in :issue:`17323`.)"
msgstr ""
"CPython 直譯器的除錯 (``--with-pydebug``) 構建的 [X refs, Y blocks] "
"輸出現在預設關閉。可以使用“-X showrefcount”選項重新啟用它。 （由 Ezio "
"Melotti 在 :issue:`17323` 中貢獻。）"

#: ../../whatsnew/3.4.rst:2261
#, fuzzy
msgid ""
"The python command and most stdlib scripts (as well as :mod:`argparse`) now "
"output ``--version`` information to ``stdout`` instead of ``stderr`` (for "
"issue list see :ref:`other-improvements-3.4` above)."
msgstr ""
"python 命令和大多數 stdlib 腳本（以及 :mod:`argparse`）現在將 ``--version`` "
"資訊輸出到 ``stdout`` 而不是 ``stderr``（有關問題列表，請參見 :ref:` other-"
"improvements-3.4` 以上）。"

#: ../../whatsnew/3.4.rst:2267
#, fuzzy
msgid "Changes in the Python API"
msgstr "Python API 的變化"

#: ../../whatsnew/3.4.rst:2269
#, fuzzy
msgid ""
"The ABCs defined in :mod:`importlib.abc` now either raise the appropriate "
"exception or return a default value instead of raising :exc:"
"`NotImplementedError` blindly. This will only affect code calling :func:"
"`super` and falling through all the way to the ABCs. For compatibility, "
"catch both :exc:`NotImplementedError` or the appropriate exception as needed."
msgstr ""
"importlib.abc 中定義的 ABC 現在要么引發適當的例外，要么回傳預設值，"
"而不是盲目地引發 NotImplementedError。這只會影響程式碼呼叫 :func:`super` "
"並一直下降到 ABC。為了相容性，請根據需要捕獲 :exc:`NotImplementedError` "
"或適當的例外。"

#: ../../whatsnew/3.4.rst:2275
#, fuzzy
msgid ""
"The module type now initializes the :attr:`__package__` and :attr:"
"`__loader__` attributes to ``None`` by default. To determine if these "
"attributes were set in a backwards-compatible fashion, use e.g. "
"``getattr(module, '__loader__', None) is not None``.  (:issue:`17115`.)"
msgstr ""
"模組型別現在預設將 :attr:`__package__` 和 :attr:`__loader__` 屬性初始化為 "
"``None``。要確定這些屬性是否以向後相容的方式設定，請使用例如``getattr("
"module, '__loader__', None) 不是 None``。 （ :issue:`17115`。）"

#: ../../whatsnew/3.4.rst:2280
#, fuzzy
msgid ""
":meth:`importlib.util.module_for_loader` now sets ``__loader__`` and "
"``__package__`` unconditionally to properly support reloading. If this is "
"not desired then you will need to set these attributes manually. You can "
"use :func:`importlib.util.module_to_load` for module management."
msgstr ""
":meth:`importlib.util.module_for_loader` 現在無條件地設定 ``__loader__`` 和 "
"``__package__`` 以正確支援重新加載。如果不需要，則需要手動設定這些屬性。"
"您可以使用 :func:`importlib.util.module_to_load` 進行模組管理。"

#: ../../whatsnew/3.4.rst:2285
#, fuzzy
msgid ""
"Import now resets relevant attributes (e.g. ``__name__``, ``__loader__``, "
"``__package__``, ``__file__``, ``__cached__``) unconditionally when "
"reloading. Note that this restores a pre-3.3 behavior in that it means a "
"module is re-found when re-loaded (:issue:`19413`)."
msgstr ""
"Import 現在在重新加載時無條件地重置相關屬性（例如 ``__name__``、``__loader__`"
"`、``__package__``、``__file__``、``__cached__``）。請注意，這會恢復 3.3 "
"之前的行為，因為這意味著重新加載時會重新找到模組（:issue:`19413`）。"

#: ../../whatsnew/3.4.rst:2290
#, fuzzy
msgid ""
"Frozen packages no longer set ``__path__`` to a list containing the package "
"name, they now set it to an empty list.  The previous behavior could cause "
"the import system to do the wrong thing on submodule imports if there was "
"also a directory with the same name as the frozen package.  The correct way "
"to determine if a module is a package or not is to use ``hasattr(module, "
"'__path__')`` (:issue:`18065`)."
msgstr ""
"凍結的包不再將 __path__ 設定為包含包名稱的列表，它們現在將其設定為空列表。如"
"果還有一個與凍結包同名的目錄，之前的行為可能會導致導入系統對子模組導入做錯誤"
"的事情。確定模組是否為包的正確方法是使用``hasattr(module, '__path__')`` "
"(:issue:`18065`)。"

#: ../../whatsnew/3.4.rst:2297
#, fuzzy
msgid ""
"Frozen modules no longer define a ``__file__`` attribute. It's semantically "
"incorrect for frozen modules to set the attribute as they are not loaded "
"from any explicit location. If you must know that a module comes from frozen "
"code then you can see if the module's ``__spec__.location`` is set to "
"``'frozen'``, check if the loader is a subclass of :class:`importlib."
"machinery.FrozenImporter`, or if Python 2 compatibility is necessary you can "
"use :func:`imp.is_frozen`."
msgstr ""
"凍結模組不再定義 ``__file__`` 屬性。凍結模組設定屬性在語義上是不正確的，因為"
"它們不是從任何顯式位置加載的。如果您必須知道模組來自凍結程式碼，"
"那麼您可以查看模組的 ``__spec__.location`` 是否設定為 ``'frozen'``，"
"檢查加載器是否是 :class:`importlib 的子類別。 machinery.FrozenImporter`，"
"或者如果需要 Python 2 相容性，您可以使用 :func:`imp.is_frozen`。"

#: ../../whatsnew/3.4.rst:2305
#, fuzzy
msgid ""
":func:`py_compile.compile` now raises :exc:`FileExistsError` if the file "
"path it would write to is a symlink or a non-regular file. This is to act as "
"a warning that import will overwrite those files with a regular file "
"regardless of what type of file path they were originally."
msgstr ""
":func:`py_compile.compile` 現在會引發 :exc:`FileExistsError` 如果它要寫入的文"
"件路徑是符號鏈接或非常規文件。這是作為一個警告，即導入將用常規文件覆蓋這些文"
"件，而不管它們最初是什麼型別的文件路徑。"

#: ../../whatsnew/3.4.rst:2310
#, fuzzy
msgid ""
":meth:`importlib.abc.SourceLoader.get_source` no longer raises :exc:"
"`ImportError` when the source code being loaded triggers a :exc:"
"`SyntaxError` or :exc:`UnicodeDecodeError`. As :exc:`ImportError` is meant "
"to be raised only when source code cannot be found but it should, it was "
"felt to be over-reaching/overloading of that meaning when the source code is "
"found but improperly structured. If you were catching ImportError before and "
"wish to continue to ignore syntax or decoding issues, catch all three "
"exceptions now."
msgstr ""
":meth:`importlib.abc.SourceLoader.get_source` 在加載的源程式碼觸發 "
":exc:`SyntaxError` 或 :exc:`UnicodeDecodeError` 時不再引發 "
":exc:`ImportError`。由於 :exc:`ImportError` 僅在找不到源程式碼但應該找到源程"
"式碼時才引發，因此當找到源程式碼但結構不正確時，感覺超出了該含義/超載。"
"如果您之前捕獲過 ImportError "
"並希望繼續忽略語法或解碼問題，請立即捕獲所有三個例外。"

#: ../../whatsnew/3.4.rst:2319
#, fuzzy
msgid ""
":func:`functools.update_wrapper` and :func:`functools.wraps` now correctly "
"set the ``__wrapped__`` attribute to the function being wrapped, even if "
"that function also had its ``__wrapped__`` attribute set. This means "
"``__wrapped__`` attributes now correctly link a stack of decorated functions "
"rather than every ``__wrapped__`` attribute in the chain referring to the "
"innermost function. Introspection libraries that assumed the previous "
"behaviour was intentional can use :func:`inspect.unwrap` to access the first "
"function in the chain that has no ``__wrapped__`` attribute."
msgstr ""
":func:`functools.update_wrapper` 和 :func:`functools.wraps` 現在可以正確地將 "
"`__wrapped__`` 屬性設定為被包裝的函式，即使該函式也設定了其 ``__wrapped__`` "
"屬性。這意味著 ``__wrapped__`` 屬性現在可以正確鏈接一堆裝飾函式，"
"而不是鏈中的每個 ``__wrapped__`` 屬性都指向最裡面的函式。"
"假設先前行為是故意的內省庫可以使用 inspect.unwrap 訪問鏈中第一個沒有 "
"__wrapped__ 屬性的函式。"

#: ../../whatsnew/3.4.rst:2329
#, fuzzy
msgid ""
":func:`inspect.getfullargspec` has been reimplemented on top of :func:"
"`inspect.signature` and hence handles a much wider variety of callable "
"objects than it did in the past. It is expected that additional builtin and "
"extension module callables will gain signature metadata over the course of "
"the Python 3.4 series. Code that assumes that :func:`inspect.getfullargspec` "
"will fail on non-Python callables may need to be adjusted accordingly."
msgstr ""
":func:`inspect.getfullargspec` 已在 :func:`inspect.signature` "
"之上重新實作，因此可以處理比過去更廣泛的可呼叫物件。預計在 Python 3.4 "
"系列的過程中，額外的內建和擴充模組可呼叫文件將獲得簽名元資料。假定 "
"inspect.getfullargspec 將在非 Python "
"可呼叫文件上失敗的程式碼可能需要相應地進行調整。"

#: ../../whatsnew/3.4.rst:2337
#, fuzzy
msgid ""
":class:`importlib.machinery.PathFinder` now passes on the current working "
"directory to objects in :data:`sys.path_hooks` for the empty string. This "
"results in :data:`sys.path_importer_cache` never containing ``''``, thus "
"iterating through :data:`sys.path_importer_cache` based on :data:`sys.path` "
"will not find all keys. A module's ``__file__`` when imported in the current "
"working directory will also now have an absolute path, including when using "
"``-m`` with the interpreter (except for ``__main__.__file__`` when a script "
"has been executed directly using a relative path) (Contributed by Brett "
"Cannon in :issue:`18416`).  is specified on the command-line) (:issue:"
"`18416`)."
msgstr ""
":class:`importlib.machinery.PathFinder` 現在將當前工作目錄傳遞給 :data:`sys."
"path_hooks` 中的對像以獲得空字串。這導致 :data:`sys.path_importer_cache` "
"永遠不會包含 ``''``，因此基於 :data:`sys.path` 遍歷 :data:`sys."
"path_importer_cache` 將找不到所有鍵。在當前工作目錄中導入模組的“__file__”現在"
"也將具有絕對路徑，包括在直譯器中使用 ``-m``時（執行腳本時“__main__."
"__file__”除外）直接使用相對路徑）（由 Brett Cannon 在 :issue:`18416` "
"中貢獻）。在命令列中指定）（ :issue:`18416`）。"

#: ../../whatsnew/3.4.rst:2348
#, fuzzy
msgid ""
"The removal of the *strict* argument to :class:`~http.client.HTTPConnection` "
"and :class:`~http.client.HTTPSConnection` changes the meaning of the "
"remaining arguments if you are specifying them positionally rather than by "
"keyword.  If you've been paying attention to deprecation warnings your code "
"should already be specifying any additional arguments via keywords."
msgstr ""
"刪除 :class:`~http.client.HTTPConnection` 和 :class:`~http.client."
"HTTPSConnection` 的 *strict* 參數會改變其餘參數的含義，如果您是按位置而不是關"
"鍵字指定它們的話。如果您一直在關注棄用警告，您的程式碼應該已經通過關鍵字指定"
"了任何其他參數。"

#: ../../whatsnew/3.4.rst:2354
#, fuzzy
msgid ""
"Strings between ``from __future__ import ...`` statements now *always* raise "
"a :exc:`SyntaxError`.  Previously if there was no leading docstring, an "
"interstitial string would sometimes be ignored.  This brings CPython into "
"compliance with the language spec; Jython and PyPy already were. (:issue:"
"`17434`)."
msgstr ""
"``from __future__ import ...`` 語句之間的字串現在 *總是* "
"引發一個 :exc:`SyntaxError`。以前如果沒有前導文檔字串，有時會忽略插頁式字串。"
"這使 CPython 符合語言規範； Jython 和 PyPy 已經是。 （ :issue:`17434`）。"

#: ../../whatsnew/3.4.rst:2360
#, fuzzy
msgid ""
":meth:`ssl.SSLSocket.getpeercert` and :meth:`ssl.SSLSocket.do_handshake` now "
"raise an :exc:`OSError` with ``ENOTCONN`` when the ``SSLSocket`` is not "
"connected, instead of the previous behavior of raising an :exc:"
"`AttributeError`.  In addition, :meth:`~ssl.SSLSocket.getpeercert` will "
"raise a :exc:`ValueError` if the handshake has not yet been done."
msgstr ""
":meth:`ssl.SSLSocket.getpeercert` 和 :meth:`ssl.SSLSocket.do_handshake` "
"現在在 ``SSLSocket`` 未連接時使用 `ENOTCONN`` 引發 :exc:`OSError`，"
"而不是引發 :exc:`AttributeError` "
"的先前行為。此外，如果握手尚未完成，:meth:`~ssl.SSLSocket.getpeercert` "
"將引發 :exc:`ValueError`。"

#: ../../whatsnew/3.4.rst:2366
#, fuzzy
msgid ""
":func:`base64.b32decode` now raises a :exc:`binascii.Error` when the input "
"string contains non-b32-alphabet characters, instead of a :exc:`TypeError`.  "
"This particular :exc:`TypeError` was missed when the other :exc:`TypeError`"
"\\ s were converted.  (Contributed by Serhiy Storchaka in :issue:`18011`.)  "
"Note: this change was also inadvertently applied in Python 3.3.3."
msgstr ""
":func:`base64.b32decode` 現在在輸入字串包含非 b32 字母字元時引發 "
":exc:`binascii.Error`，而不是 :exc:`TypeError`。當其他 :exc:`TypeError`\\ "
"被轉換時，這個特殊的 :exc:`TypeError` 被遺漏了。 （由 Serhiy Storchaka 在 "
":issue:`18011` 中貢獻。）注意：此更改也無意中應用於 Python 3.3.3。"

#: ../../whatsnew/3.4.rst:2373
#, fuzzy
msgid ""
"The :attr:`~cgi.FieldStorage.file` attribute is now automatically closed "
"when the creating :class:`cgi.FieldStorage` instance is garbage collected. "
"If you were pulling the file object out separately from the :class:`cgi."
"FieldStorage` instance and not keeping the instance alive, then you should "
"either store the entire :class:`cgi.FieldStorage` instance or read the "
"contents of the file before the :class:`cgi.FieldStorage` instance is "
"garbage collected."
msgstr ""
":attr:`~cgi.FieldStorage.file` 屬性現在在建立的 :class:`cgi.FieldStorage` "
"實例被垃圾回收時自動關閉。如果您將文件對像從 cgi.FieldStorage "
"實例中單獨拉出並且不保持實例處於活動狀態，那麼您應該儲存整個 "
"cgi.FieldStorage 實例或讀取文件的內容在 cgi.FieldStorage 實例被垃圾回收之前。"

#: ../../whatsnew/3.4.rst:2380
#, fuzzy
msgid ""
"Calling ``read`` or ``write`` on a closed SSL socket now raises an "
"informative :exc:`ValueError` rather than the previous more mysterious :exc:"
"`AttributeError` (:issue:`9177`)."
msgstr ""
"在關閉的 SSL  socket 上呼叫 ``read`` 或 ``write`` 現在會引發資訊性的 "
":exc:`ValueError` 而不是之前更神秘的 :exc:`AttributeError` (:issue:`9177`)。"

#: ../../whatsnew/3.4.rst:2384
#, fuzzy
msgid ""
":meth:`slice.indices` no longer produces an :exc:`OverflowError` for huge "
"values.  As a consequence of this fix, :meth:`slice.indices` now raises a :"
"exc:`ValueError` if given a negative length; previously it returned nonsense "
"values (:issue:`14794`)."
msgstr ""
":meth:`slice.indices` 不再為巨大的值產生 :exc:`OverflowError`。由於此修復，"
"slice.indices 現在會在給定負長度時引發 "
"ValueError；以前它回傳無意義的值（ :issue:`14794`）。"

#: ../../whatsnew/3.4.rst:2389
#, fuzzy
msgid ""
"The :class:`complex` constructor, unlike the :mod:`cmath` functions, was "
"incorrectly accepting :class:`float` values if an object's ``__complex__`` "
"special method returned one.  This now raises a :exc:`TypeError`. (:issue:"
"`16290`.)"
msgstr ""
":class:`complex` 構造函式與 :mod:`cmath` 函式不同，如果物件的 ``__complex__``"
" 特殊方法回傳一個值，它會錯誤地接受 :class:`float` 值。這現在引發了一個 "
":exc:`TypeError`。 （ :issue:`16290`。）"

#: ../../whatsnew/3.4.rst:2394
#, fuzzy
msgid ""
"The :class:`int` constructor in 3.2 and 3.3 erroneously accepts :class:"
"`float` values for the *base* parameter.  It is unlikely anyone was doing "
"this, but if so, it will now raise a :exc:`TypeError` (:issue:`16772`)."
msgstr ""
"3.2 和 3.3 中的 :class:`int` 構造函式錯誤地接受 *base* 參數的 :class:`float` "
"值。不太可能有人這樣做，但如果有人這樣做，它現在會引發 :exc:`TypeError` "
"(:issue:`16772`)。"

#: ../../whatsnew/3.4.rst:2398
#, fuzzy
msgid ""
"Defaults for keyword-only arguments are now evaluated *after* defaults for "
"regular keyword arguments, instead of before.  Hopefully no one wrote any "
"code that depends on the previous buggy behavior (:issue:`16967`)."
msgstr ""
"現在評估僅關鍵字參數的預設值*之後*常規關鍵字參數的預設值，而不是之前。希望沒"
"有人編寫任何依賴於先前錯誤行為的程式碼（ :issue:`16967`）。"

#: ../../whatsnew/3.4.rst:2402
#, fuzzy
msgid ""
"Stale thread states are now cleared after :func:`~os.fork`.  This may cause "
"some system resources to be released that previously were incorrectly kept "
"perpetually alive (for example, database connections kept in thread-local "
"storage).  (:issue:`17094`.)"
msgstr ""
"過時的執行緒狀態現在在 :func:`~os.fork` 之後被清除。這可能會導致釋放一些以前"
"錯誤地保持永久活動的系統資源（例如，資料庫連接保存在執行緒本地儲存中）。 "
"（ :issue:`17094`。）"

#: ../../whatsnew/3.4.rst:2407
#, fuzzy
msgid ""
"Parameter names in ``__annotations__`` dicts are now mangled properly, "
"similarly to ``__kwdefaults__``.  (Contributed by Yury Selivanov in :issue:"
"`20625`.)"
msgstr ""
"``__annotations__`` 字典中的參數名稱現在被正確地破壞了，類似於 "
"``__kwdefaults__``。 （由 Yury Selivanov 在 :issue:`20625` 中貢獻。）"

#: ../../whatsnew/3.4.rst:2411
#, fuzzy
msgid ""
":attr:`hashlib.hash.name` now always returns the identifier in lower case. "
"Previously some builtin hashes had uppercase names, but now that it is a "
"formal public interface the naming has been made consistent (:issue:`18532`)."
msgstr ""
":attr:`hashlib.hash.name` 現在總是回傳小寫的標識符。以前一些內建雜湊的名稱是"
"大寫的，但現在它是一個正式的公開介面，命名已經保持一致（ :issue:`18532`）。"

#: ../../whatsnew/3.4.rst:2415
#, fuzzy
msgid ""
"Because :mod:`unittest.TestSuite` now drops references to tests after they "
"are run, test harnesses that re-use a :class:`~unittest.TestSuite` to re-run "
"a set of tests may fail.   Test suites should not be re-used in this fashion "
"since it means state is retained between test runs, breaking the test "
"isolation that :mod:`unittest` is designed to provide.  However, if the lack "
"of isolation is considered acceptable, the old behavior can be restored by "
"creating a :mod:`~unittest.TestSuite` subclass that defines a "
"``_removeTestAtIndex`` method that does nothing (see :meth:`.TestSuite."
"__iter__`) (:issue:`11798`)."
msgstr ""
"因為 :mod:`unittest.TestSuite` 現在會在測試運行後刪除對測試的引用，"
"所以重新使用 :class:`~unittest.TestSuite` 重新運行一組測試的測試工具可能會失"
"敗。不應以這種方式重複使用測試套件，因為這意味著在測試運行之間會保留狀態，"
"從而打破 unittest 旨在提供的測試隔離。但是，如果缺乏隔離被認為是可以接受的，"
"可以通過建立一個 :mod:`~unittest.TestSuite` 子類別來恢復舊的行為，"
"該子類別定義了一個什麼都不做的 ``_removeTestAtIndex`` 方法（參見 :meth:`."
"TestSuite .__iter__`）（ :issue:`11798`）。"

#: ../../whatsnew/3.4.rst:2425
#, fuzzy
msgid ""
":mod:`unittest` now uses :mod:`argparse` for command line parsing.  There "
"are certain invalid command forms that used to work that are no longer "
"allowed; in theory this should not cause backward compatibility issues since "
"the disallowed command forms didn't make any sense and are unlikely to be in "
"use."
msgstr ""
":mod:`unittest` 現在使用 :mod:`argparse` 進行命令列解析。有一些無效的命令形式"
"曾經有效，但現在不再被允許；從理論上講，這不應該導致向後相容性問題，因為不允"
"許的命令形式沒有任何意義並且不太可能被使用。"

#: ../../whatsnew/3.4.rst:2430
#, fuzzy
msgid ""
"The :func:`re.split`, :func:`re.findall`, and :func:`re.sub` functions, and "
"the :meth:`~re.match.group` and :meth:`~re.match.groups` methods of "
"``match`` objects now always return a *bytes* object when the string to be "
"matched is a :term:`bytes-like object`.  Previously the return type matched "
"the input type, so if your code was depending on the return value being, "
"say, a ``bytearray``, you will need to change your code."
msgstr ""
":func:`re.split`、:func:`re.findall` 和 :func:`re.sub` 函式，以及 :meth:`~re."
"match.group` 和 :meth:`~re ``match`` 物件的 .match.groups` 方法現在總是回傳 "
"*bytes* 物件，當要匹配的字串是 :term:`bytes-like object` "
"時。以前回傳型別與輸入型別相匹配，因此如果您的程式碼依賴於回傳值，比如說，"
"一個 ``bytearray``，您將需要更改您的程式碼。"

#: ../../whatsnew/3.4.rst:2437
#, fuzzy
msgid ""
":mod:`audioop` functions now raise an error immediately if passed string "
"input, instead of failing randomly later on (:issue:`16685`)."
msgstr ":mod:`audioop` 函式現在在傳遞字串輸入時立即引發錯誤，而不是稍後隨機失敗 "
"(:issue:`16685`)。"

#: ../../whatsnew/3.4.rst:2440
#, fuzzy
msgid ""
"The new *convert_charrefs* argument to :class:`~html.parser.HTMLParser` "
"currently defaults to ``False`` for backward compatibility, but will "
"eventually be changed to default to ``True``.  It is recommended that you "
"add this keyword, with the appropriate value, to any :class:`~html.parser."
"HTMLParser` calls in your code (:issue:`13633`)."
msgstr ""
":class:`~html.parser.HTMLParser` 的新 *convert_charrefs* 參數目前預設為 "
"``False`` 以實作向後相容性，但最終將更改為預設為 ``True``。"
"建議您將此關鍵字和適當的值新增到程式碼中的任何 :class:`~html.parser."
"HTMLParser` 呼叫 (:issue:`13633`)。"

#: ../../whatsnew/3.4.rst:2446
#, fuzzy
msgid ""
"Since the *digestmod* argument to the :func:`hmac.new` function will in the "
"future have no default, all calls to :func:`hmac.new` should be changed to "
"explicitly specify a *digestmod* (:issue:`17276`)."
msgstr ""
"由於 :func:`hmac.new` 函式的 *digestmod* 參數將來沒有預設值，因此所有對 "
":func:`hmac.new` 的呼叫都應更改為顯式指定 *digestmod* (:issue: `17276`）。"

#: ../../whatsnew/3.4.rst:2450
#, fuzzy
msgid ""
"Calling :func:`sysconfig.get_config_var` with the ``SO`` key, or looking "
"``SO`` up in the results of a call to :func:`sysconfig.get_config_vars` is "
"deprecated.  This key should be replaced by ``EXT_SUFFIX`` or "
"``SHLIB_SUFFIX``, depending on the context (:issue:`19555`)."
msgstr ""
"使用 ``SO`` 鍵呼叫 :func:`sysconfig.get_config_var`，或在呼叫 "
":func:`sysconfig.get_config_vars` 的結果中查找 ``SO`` 已棄用。此鍵應替換為 "
"``EXT_SUFFIX`` 或 ``SHLIB_SUFFIX``，具體取決於上下文（:issue:`19555`）。"

#: ../../whatsnew/3.4.rst:2455
#, fuzzy
msgid ""
"Any calls to ``open`` functions that specify ``U`` should be modified. ``U`` "
"is ineffective in Python3 and will eventually raise an error if used. "
"Depending on the function, the equivalent of its old Python2 behavior can be "
"achieved using either a *newline* argument, or if necessary by wrapping the "
"stream in :mod:`~io.TextIOWrapper` to use its *newline* argument (:issue:"
"`15204`)."
msgstr ""
"任何對指定 ``U`` 的 ``open`` 函式的呼叫都應該被修改。 ``U`` 在 Python3 "
"中無效，如果使用最終會引發錯誤。根據函式的不同，可以使用 *newline* "
"參數實作其舊 Python2 行為的等價物，或者如有必要，通過將流包裝在 :mod:`~io."
"TextIOWrapper` 中以使用其 *newline* 參數（：issue :`15204`)。"

#: ../../whatsnew/3.4.rst:2462
#, fuzzy
msgid ""
"If you use ``pyvenv`` in a script and desire that pip *not* be installed, "
"you must add ``--without-pip`` to your command invocation."
msgstr "如果您在腳本中使用 ``pyvenv`` 並希望*不*安裝 pip，則必須將 ``--without-pip`` "
"新增到您的命令呼叫中。"

#: ../../whatsnew/3.4.rst:2466
#, fuzzy
msgid ""
"The default behavior of :func:`json.dump` and :func:`json.dumps` when an "
"indent is specified has changed: it no longer produces trailing spaces after "
"the item separating commas at the ends of lines.  This will matter only if "
"you have tests that are doing white-space-sensitive comparisons of such "
"output (:issue:`16333`)."
msgstr ""
"指定縮進時 :func:`json.dump` 和 :func:`json.dumps` 的預設行為已更改：它不再在"
"行尾的項目分隔逗號之後產生尾隨空格。僅當您有對此類輸出進行空白敏感比較的測試"
"時，這才有意義 (:issue:`16333`)。"

#: ../../whatsnew/3.4.rst:2472
#, fuzzy
msgid ""
":mod:`doctest` now looks for doctests in extension module ``__doc__`` "
"strings, so if your doctest test discovery includes extension modules that "
"have things that look like doctests in them you may see test failures you've "
"never seen before when running your tests (:issue:`3158`)."
msgstr ""
":mod:`doctest` 現在在擴充模組 ``__doc__`` 字串中查找 doctests，因此如果您的 "
"doctest 測試發現包括擴充模組，其中包含看起來像 doctests 的東西，"
"您可能會看到以前從未見過的測試失敗運行你的測試 (:issue:`3158`)。"

#: ../../whatsnew/3.4.rst:2477
#, fuzzy
msgid ""
"The :mod:`collections.abc` module has been slightly refactored as part of "
"the Python startup improvements.  As a consequence of this, it is no longer "
"the case that importing :mod:`collections` automatically imports :mod:"
"`collections.abc`.  If your program depended on the (undocumented) implicit "
"import, you will need to add an explicit ``import collections.abc`` (:issue:"
"`20784`)."
msgstr ""
":mod:`collections.abc` 模組已作為 Python "
"啟動改進的一部分進行了輕微重構。因此，導入 :mod:`collections` 將不再自動導入 "
":mod:`collections.abc`。如果你的程式依賴於（未記錄的）隱式導入，"
"你將需要新增一個顯式的 ``import collections.abc`` (:issue:`20784`)。"

#: ../../whatsnew/3.4.rst:2486
msgid "Changes in the C API"
msgstr "C API 中的改動"

#: ../../whatsnew/3.4.rst:2488
#, fuzzy
msgid ""
":c:func:`PyEval_EvalFrameEx`, :c:func:`PyObject_Repr`, and :c:func:"
"`PyObject_Str`, along with some other internal C APIs, now include a "
"debugging assertion that ensures they are not used in situations where they "
"may silently discard a currently active exception. In cases where discarding "
"the active exception is expected and desired (for example, because it has "
"already been saved locally with :c:func:`PyErr_Fetch` or is being "
"deliberately replaced with a different exception), an explicit :c:func:"
"`PyErr_Clear` call will be needed to avoid triggering the assertion when "
"invoking these operations (directly or indirectly) and running against a "
"version of Python that is compiled with assertions enabled."
msgstr ""
":c:func:`PyEval_EvalFrameEx`、:c:func:`PyObject_Repr` 和 "
":c:func:`PyObject_Str` 以及其他一些內部 C API 現在包括一個除錯斷言，確保它們"
"不會在以下情況下使用他們可能會默默地丟棄當前活動的例外。在預期和需要丟棄活動"
"例外的情況下（例如，因為它已經用 PyErr_Fetch 在本地保存或被故意替換為不同的例"
"外），一個顯式的 在呼叫這些操作（直接或間接）並針對啟用斷言編譯的 "
"Python 版本運行時，需要呼叫 PyErr_Clear 來避免觸發斷言。"

#: ../../whatsnew/3.4.rst:2500
#, fuzzy
msgid ""
":c:func:`PyErr_SetImportError` now sets :exc:`TypeError` when its **msg** "
"argument is not set. Previously only ``NULL`` was returned with no exception "
"set."
msgstr ""
":c:func:`PyErr_SetImportError` 現在在未設定其 **msg** 參數時設定 "
":exc:`TypeError`。以前只回傳 ``NULL`` 而沒有設定例外。"

#: ../../whatsnew/3.4.rst:2504
#, fuzzy
msgid ""
"The result of the :c:data:`PyOS_ReadlineFunctionPointer` callback must now "
"be a string allocated by :c:func:`PyMem_RawMalloc` or :c:func:"
"`PyMem_RawRealloc`, or ``NULL`` if an error occurred, instead of a string "
"allocated by :c:func:`PyMem_Malloc` or :c:func:`PyMem_Realloc` (:issue:"
"`16742`)"
msgstr ""
":c:data:`PyOS_ReadlineFunctionPointer` 回呼的結果現在必須是由 "
":c:func:`PyMem_RawMalloc` 或 :c:func:`PyMem_RawRealloc` 分配的字串，"
"或者如果發生錯誤則為 ``NULL``由 :c:func:`PyMem_Malloc` 或 "
":c:func:`PyMem_Realloc` 分配的字串 (:issue:`16742`)"

#: ../../whatsnew/3.4.rst:2510
#, fuzzy
msgid ""
":c:func:`PyThread_set_key_value` now always set the value. In Python 3.3, "
"the function did nothing if the key already exists (if the current value is "
"a non-``NULL`` pointer)."
msgstr ""
":c:func:`PyThread_set_key_value` 現在總是設定值。在 Python 3.3 "
"中，如果鍵已經存在（如果當前值是一個非 ``NULL`` 指標），該函式什麼都不做。"

#: ../../whatsnew/3.4.rst:2514
#, fuzzy
msgid ""
"The ``f_tstate`` (thread state) field of the :c:type:`PyFrameObject` "
"structure has been removed to fix a bug: see :issue:`14432` for the "
"rationale."
msgstr ""
":c:type:`PyFrameObject` "
"結構的``f_tstate``（執行緒狀態）欄位已被刪除以修復錯誤：請參閱 :issue:`14432`"
" 了解基本原理。"

#: ../../whatsnew/3.4.rst:2519
#, fuzzy
msgid "Changed in 3.4.3"
msgstr "在 3.4.3 中更改"

#: ../../whatsnew/3.4.rst:2524
#, fuzzy
msgid ""
"PEP 476: Enabling certificate verification by default for stdlib http clients"
msgstr "PEP 476：預設為 stdlib http 客戶端啟用證書驗證"

#: ../../whatsnew/3.4.rst:2526
#, fuzzy
msgid ""
":mod:`http.client` and modules which use it, such as :mod:`urllib.request` "
"and :mod:`xmlrpc.client`, will now verify that the server presents a "
"certificate which is signed by a CA in the platform trust store and whose "
"hostname matches the hostname being requested by default, significantly "
"improving security for many applications."
msgstr ""
":mod:`http.client` 和使用它的模組，例如 :mod:`urllib.request` 和 :mod:`xmlrpc"
".client`，現在將驗證伺服器是否提供由 CA 簽署的證書平台信任庫，其主機名與預設"
"請求的主機名相匹配，顯著提高了許多應用程式的安全性。"

#: ../../whatsnew/3.4.rst:2532
#, fuzzy
msgid ""
"For applications which require the old previous behavior, they can pass an "
"alternate context::"
msgstr "對於需要舊的先前行為的應用程式，它們可以傳遞備用上下文::"
