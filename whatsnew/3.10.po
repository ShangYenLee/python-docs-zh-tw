# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-11 00:15+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../whatsnew/3.10.rst:3
msgid "What's New In Python 3.10"
msgstr "Python 3.10 有什麼新功能"

#: ../../whatsnew/3.10.rst:0
msgid "Editor"
msgstr "編輯者"

#: ../../whatsnew/3.10.rst:5
msgid "Pablo Galindo Salgado"
msgstr "Pablo Galindo Salgado"

#: ../../whatsnew/3.10.rst:47
#, fuzzy
msgid ""
"This article explains the new features in Python 3.10, compared to 3.9. "
"Python 3.10 was released on October 4, 2021. For full details, see the :ref:"
"`changelog <changelog>`."
msgstr ""
"本文介紹了 Python 3.10 與 3.9 相比的新功能。 Python 3.10 於 2021 年 10 月 4 "
"日發布。有關完整詳細資訊，請參閱 :ref:`changelog <changelog>`。"

#: ../../whatsnew/3.10.rst:52
#, fuzzy
msgid "Summary -- Release highlights"
msgstr "總結——發布亮點"

#: ../../whatsnew/3.10.rst:60
#, fuzzy
msgid "New syntax features:"
msgstr "新的語法特性："

#: ../../whatsnew/3.10.rst:62
#, fuzzy
msgid ":pep:`634`, Structural Pattern Matching: Specification"
msgstr ":pep:`634`, 結構模式匹配：規範"

#: ../../whatsnew/3.10.rst:63
#, fuzzy
msgid ":pep:`635`, Structural Pattern Matching: Motivation and Rationale"
msgstr ":pep:`635`，結構模式匹配：動機和基本原理"

#: ../../whatsnew/3.10.rst:64
#, fuzzy
msgid ":pep:`636`, Structural Pattern Matching: Tutorial"
msgstr ":pep:`636`，結構模式匹配：教程"

#: ../../whatsnew/3.10.rst:65
#, fuzzy
msgid ""
":issue:`12782`, Parenthesized context managers are now officially allowed."
msgstr ":issue:`12782`，現在正式允許帶括號的上下文管理器。"

#: ../../whatsnew/3.10.rst:67
#, fuzzy
msgid "New features in the standard library:"
msgstr "標準庫中的新特性："

#: ../../whatsnew/3.10.rst:69
#, fuzzy
msgid ":pep:`618`, Add Optional Length-Checking To zip."
msgstr ":pep:`618`, 新增可選的長度檢查到 zip。"

#: ../../whatsnew/3.10.rst:71
#, fuzzy
msgid "Interpreter improvements:"
msgstr "直譯器改進："

#: ../../whatsnew/3.10.rst:73
#, fuzzy
msgid ":pep:`626`, Precise line numbers for debugging and other tools."
msgstr ":pep:`626`，用於除錯和其他工具的精確行號。"

#: ../../whatsnew/3.10.rst:75
#, fuzzy
msgid "New typing features:"
msgstr "新的打字功能："

#: ../../whatsnew/3.10.rst:77
#, fuzzy
msgid ":pep:`604`, Allow writing union types as X | Y"
msgstr ":pep:`604`, 允許將聯合型別寫為 X |是"

#: ../../whatsnew/3.10.rst:78
#, fuzzy
msgid ":pep:`612`, Parameter Specification Variables"
msgstr ":pep:`612`, 參數規範變數"

#: ../../whatsnew/3.10.rst:79
#, fuzzy
msgid ":pep:`613`, Explicit Type Aliases"
msgstr ":pep:`613`, 顯式型別別名"

#: ../../whatsnew/3.10.rst:80
#, fuzzy
msgid ":pep:`647`, User-Defined Type Guards"
msgstr ":pep:`647`, 使用者定義的型別保護"

#: ../../whatsnew/3.10.rst:82
#, fuzzy
msgid "Important deprecations, removals or restrictions:"
msgstr "重要的棄用、刪除或限制："

#: ../../whatsnew/3.10.rst:84
#, fuzzy
msgid ":pep:`644`, Require OpenSSL 1.1.1 or newer"
msgstr ":pep:`644`, 需要 OpenSSL 1.1.1 或更新版本"

#: ../../whatsnew/3.10.rst:85
#, fuzzy
msgid ":pep:`632`, Deprecate distutils module."
msgstr ":pep:`632`, 棄用 distutils 模組。"

#: ../../whatsnew/3.10.rst:86
#, fuzzy
msgid ""
":pep:`623`, Deprecate and prepare for the removal of the wstr member in "
"PyUnicodeObject."
msgstr ":pep:`623`，棄用並準備刪除 PyUnicodeObject 中的 wstr 成員。"

#: ../../whatsnew/3.10.rst:87
#, fuzzy
msgid ":pep:`624`, Remove Py_UNICODE encoder APIs"
msgstr ":pep:`624`, 刪除 Py_UNICODE 編碼器 API"

#: ../../whatsnew/3.10.rst:88
#, fuzzy
msgid ":pep:`597`, Add optional EncodingWarning"
msgstr ":pep:`597`, 新增可選的 EncodingWarning"

#: ../../whatsnew/3.10.rst:92 ../../whatsnew/3.10.rst:2041
#, fuzzy
msgid "New Features"
msgstr "新功能"

#: ../../whatsnew/3.10.rst:97
#, fuzzy
msgid "Parenthesized context managers"
msgstr "帶括號的上下文管理器"

#: ../../whatsnew/3.10.rst:99
#, fuzzy
msgid ""
"Using enclosing parentheses for continuation across multiple lines in "
"context managers is now supported. This allows formatting a long collection "
"of context managers in multiple lines in a similar way as it was previously "
"possible with import statements. For instance, all these examples are now "
"valid:"
msgstr ""
"現在支援在上下文管理器中使用括號來繼續跨多行。這允許以與以前使用 import 語句"
"類似的方式在多行中格式化一長串上下文管理器。例如，所有這些示例現在都有效："

#: ../../whatsnew/3.10.rst:130
#, fuzzy
msgid ""
"it is also possible to use a trailing comma at the end of the enclosed group:"
msgstr "也可以在封閉組的末尾使用尾隨逗號："

#: ../../whatsnew/3.10.rst:142
#, fuzzy
msgid ""
"This new syntax uses the non LL(1) capacities of the new parser. Check :pep:"
"`617` for more details."
msgstr "這種新語法使用新解析器的非 LL(1) 能力。查看 :pep:`617` 了解更多詳情。"

#: ../../whatsnew/3.10.rst:145
#, fuzzy
msgid ""
"(Contributed by Guido van Rossum, Pablo Galindo and Lysandros Nikolaou in :"
"issue:`12782` and :issue:`40334`.)"
msgstr ""
"（由 Guido van Rossum、Pablo Galindo 和 Lysandros Nikolaou 在 :issue:`12782` "
"和 :issue:`40334` 中貢獻。）"

#: ../../whatsnew/3.10.rst:150
#, fuzzy
msgid "Better error messages"
msgstr "更好的錯誤資訊"

#: ../../whatsnew/3.10.rst:153
msgid "SyntaxErrors"
msgstr "SyntaxErrors"

#: ../../whatsnew/3.10.rst:155
#, fuzzy
msgid ""
"When parsing code that contains unclosed parentheses or brackets the "
"interpreter now includes the location of the unclosed bracket of parentheses "
"instead of displaying *SyntaxError: unexpected EOF while parsing* or "
"pointing to some incorrect location. For instance, consider the following "
"code (notice the unclosed '{'):"
msgstr ""
"當解析包含未閉合的括號或括號的程式碼時，直譯器現在包括未閉合的括號的位置，"
"而不是顯示 *SyntaxError: unexpected EOF while parsing* "
"或指向一些不正確的位置。例如，考慮以下程式碼（注意未閉合的 ``{``）："

#: ../../whatsnew/3.10.rst:166
#, fuzzy
msgid ""
"Previous versions of the interpreter reported confusing places as the "
"location of the syntax error:"
msgstr "以前版本的直譯器將令人困惑的地方報告為語法錯誤的位置："

#: ../../whatsnew/3.10.rst:176
#, fuzzy
msgid "but in Python 3.10 a more informative error is emitted:"
msgstr "但在 Python 3.10 中會發出一個資訊更豐富的錯誤："

#: ../../whatsnew/3.10.rst:186
#, fuzzy
msgid ""
"In a similar way, errors involving unclosed string literals (single and "
"triple quoted) now point to the start of the string instead of reporting EOF/"
"EOL."
msgstr "以類似的方式，涉及未閉合字串文字（單引號和三引號）的錯誤現在指向字串的開頭，"
"而不是報告 EOF/EOL。"

#: ../../whatsnew/3.10.rst:189
#, fuzzy
msgid ""
"These improvements are inspired by previous work in the PyPy interpreter."
msgstr "這些改進的靈感來自 PyPy 直譯器之前的工作。"

#: ../../whatsnew/3.10.rst:191
#, fuzzy
msgid ""
"(Contributed by Pablo Galindo in :issue:`42864` and Batuhan Taskaya in :"
"issue:`40176`.)"
msgstr ""
"（由 Pablo Galindo 在 :issue:`42864` 和 Batuhan Taskaya 在 :issue:`40176` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:194
#, fuzzy
msgid ""
":exc:`SyntaxError` exceptions raised by the interpreter will now highlight "
"the full error range of the expression that constitutes the syntax error "
"itself, instead of just where the problem is detected. In this way, instead "
"of displaying (before Python 3.10):"
msgstr ""
"直譯器引發的 :exc:`SyntaxError` 例外現在將突出顯示構成語法錯誤本身的表達式的"
"完整錯誤範圍，而不僅僅是檢測到問題的位置。這樣，而不是顯示（在 Python 3.10 "
"之前）："

#: ../../whatsnew/3.10.rst:207
#, fuzzy
msgid "now Python 3.10 will display the exception as:"
msgstr "現在 Python 3.10 將例外顯示為："

#: ../../whatsnew/3.10.rst:217
#, fuzzy
msgid "This improvement was contributed by Pablo Galindo in :issue:`43914`."
msgstr "此改進由 Pablo Galindo 在 :issue:`43914` 中貢獻。"

#: ../../whatsnew/3.10.rst:219
#, fuzzy
msgid ""
"A considerable amount of new specialized messages for :exc:`SyntaxError` "
"exceptions have been incorporated. Some of the most notable ones are as "
"follows:"
msgstr "合併了大量用於 :exc:`SyntaxError` 例外的新專用消息。一些最著名的如下："

#: ../../whatsnew/3.10.rst:222
#, fuzzy
msgid "Missing ``:`` before blocks:"
msgstr "塊前缺少 ``:``："

#: ../../whatsnew/3.10.rst:232
#, fuzzy
msgid "(Contributed by Pablo Galindo in :issue:`42997`.)"
msgstr "（由 Pablo Galindo 在 :issue:`42997` 中貢獻。）"

#: ../../whatsnew/3.10.rst:234
#, fuzzy
msgid "Unparenthesised tuples in comprehensions targets:"
msgstr "理解目標中未加括號的元組："

#: ../../whatsnew/3.10.rst:244
#, fuzzy
msgid "(Contributed by Pablo Galindo in :issue:`43017`.)"
msgstr "（由 Pablo Galindo 在 :issue:`43017` 中貢獻。）"

#: ../../whatsnew/3.10.rst:246
#, fuzzy
msgid "Missing commas in collection literals and between expressions:"
msgstr "集合文字中和表達式之間缺少逗號："

#: ../../whatsnew/3.10.rst:259
#, fuzzy
msgid "(Contributed by Pablo Galindo in :issue:`43822`.)"
msgstr "（由 Pablo Galindo 在 :issue:`43822` 中貢獻。）"

#: ../../whatsnew/3.10.rst:261
#, fuzzy
msgid "Multiple Exception types without parentheses:"
msgstr "不帶括號的多個例外型別："

#: ../../whatsnew/3.10.rst:273
#, fuzzy
msgid "(Contributed by Pablo Galindo in :issue:`43149`.)"
msgstr "（由 Pablo Galindo 在 :issue:`43149` 中貢獻。）"

#: ../../whatsnew/3.10.rst:275
#, fuzzy
msgid "Missing ``:`` and values in dictionary literals:"
msgstr "字典文字中缺少 ``:`` 和值："

#: ../../whatsnew/3.10.rst:295
#, fuzzy
msgid "(Contributed by Pablo Galindo in :issue:`43823`.)"
msgstr "（由 Pablo Galindo 在 :issue:`43823` 中貢獻。）"

#: ../../whatsnew/3.10.rst:297
#, fuzzy
msgid "``try`` blocks without ``except`` or ``finally`` blocks:"
msgstr "``try`` 塊沒有``except`` 或``finally`` 塊："

#: ../../whatsnew/3.10.rst:309
#, fuzzy
msgid "(Contributed by Pablo Galindo in :issue:`44305`.)"
msgstr "（由 Pablo Galindo 在 :issue:`44305` 中貢獻。）"

#: ../../whatsnew/3.10.rst:311
#, fuzzy
msgid "Usage of ``=`` instead of ``==`` in comparisons:"
msgstr "在比較中使用 ``=`` 而不是 ``==``："

#: ../../whatsnew/3.10.rst:321
#, fuzzy
msgid "(Contributed by Pablo Galindo in :issue:`43797`.)"
msgstr "（由 Pablo Galindo 在 :issue:`43797` 中貢獻。）"

#: ../../whatsnew/3.10.rst:323
#, fuzzy
msgid "Usage of ``*`` in f-strings:"
msgstr "``*`` 在 f 字串中的用法："

#: ../../whatsnew/3.10.rst:333
#, fuzzy
msgid "(Contributed by Pablo Galindo in :issue:`41064`.)"
msgstr "（由 Pablo Galindo 在 :issue:`41064` 中貢獻。）"

#: ../../whatsnew/3.10.rst:336
msgid "IndentationErrors"
msgstr "IndentationErrors"

#: ../../whatsnew/3.10.rst:338
#, fuzzy
msgid ""
"Many :exc:`IndentationError` exceptions now have more context regarding what "
"kind of block was expecting an indentation, including the location of the "
"statement:"
msgstr "許多 :exc:`IndentationError` "
"例外現在有更多關於哪種塊需要縮進的上下文，包括語句的位置："

#: ../../whatsnew/3.10.rst:353
msgid "AttributeErrors"
msgstr "AttributeErrors"

#: ../../whatsnew/3.10.rst:355
#, fuzzy
msgid ""
"When printing :exc:`AttributeError`, :c:func:`PyErr_Display` will offer "
"suggestions of similar attribute names in the object that the exception was "
"raised from:"
msgstr ""
"印出 :exc:`AttributeError` 時，:c:func:`PyErr_Display` "
"將在引發例外的對像中提供相似屬性名稱的建議："

#: ../../whatsnew/3.10.rst:366 ../../whatsnew/3.10.rst:388
#, fuzzy
msgid "(Contributed by Pablo Galindo in :issue:`38530`.)"
msgstr "（由 Pablo Galindo 在 :issue:`38530` 中貢獻。）"

#: ../../whatsnew/3.10.rst:369
#, fuzzy
msgid ""
"Notice this won't work if :c:func:`PyErr_Display` is not called to display "
"the error which can happen if some other custom error display function is "
"used. This is a common scenario in some REPLs like IPython."
msgstr ""
"請注意，如果 :c:func:`PyErr_Display` 未被呼叫來顯示錯誤，這將不起作用，如果使"
"用其他自定義錯誤顯示函式，則可能會發生這種情況。這是 IPython 等一些 REPL "
"中的常見場景。"

#: ../../whatsnew/3.10.rst:374
msgid "NameErrors"
msgstr "NameErrors"

#: ../../whatsnew/3.10.rst:376
#, fuzzy
msgid ""
"When printing :exc:`NameError` raised by the interpreter, :c:func:"
"`PyErr_Display` will offer suggestions of similar variable names in the "
"function that the exception was raised from:"
msgstr ""
"印出由直譯器引發的 :exc:`NameError` 時，:c:func:`PyErr_Display` "
"將在引發例外的函式中提供相似變數名稱的建議："

#: ../../whatsnew/3.10.rst:391
#, fuzzy
msgid ""
"Notice this won't work if :c:func:`PyErr_Display` is not called to display "
"the error, which can happen if some other custom error display function is "
"used. This is a common scenario in some REPLs like IPython."
msgstr ""
"請注意，如果 :c:func:`PyErr_Display` 未被呼叫來顯示錯誤，這將不起作用，如果使"
"用其他自定義錯誤顯示函式，則可能會發生這種情況。這是 IPython 等一些 REPL "
"中的常見場景。"

#: ../../whatsnew/3.10.rst:397
#, fuzzy
msgid "PEP 626: Precise line numbers for debugging and other tools"
msgstr "PEP 626：用於除錯和其他工具的精確行號"

#: ../../whatsnew/3.10.rst:399
#, fuzzy
msgid ""
"PEP 626 brings more precise and reliable line numbers for debugging, "
"profiling and coverage tools. Tracing events, with the correct line number, "
"are generated for all lines of code executed and only for lines of code that "
"are executed."
msgstr "PEP 626 為除錯、分析和覆蓋工具帶來了更精確和可靠的行號。為執行的所有程式碼行"
"生成具有正確行號的跟踪事件，並且僅為已執行的程式碼行生成。"

#: ../../whatsnew/3.10.rst:402
#, fuzzy
msgid ""
"The ``f_lineno`` attribute of frame objects will always contain the expected "
"line number."
msgstr "框架物件的“f_lineno”屬性將始終包含預期的行號。"

#: ../../whatsnew/3.10.rst:404
#, fuzzy
msgid ""
"The ``co_lnotab`` attribute of code objects is deprecated and will be "
"removed in 3.12. Code that needs to convert from offset to line number "
"should use the new ``co_lines()`` method instead."
msgstr ""
"程式碼物件的 ``co_lnotab`` 屬性已棄用，將在 3.12 中刪除。"
"需要從偏移量轉換為行號的程式碼應該使用新的 ``co_lines()`` 方法。"

#: ../../whatsnew/3.10.rst:408
#, fuzzy
msgid "PEP 634: Structural Pattern Matching"
msgstr "PEP 634：結構模式匹配"

#: ../../whatsnew/3.10.rst:410
#, fuzzy
msgid ""
"Structural pattern matching has been added in the form of a *match "
"statement* and *case statements* of patterns with associated actions. "
"Patterns consist of sequences, mappings, primitive data types as well as "
"class instances. Pattern matching enables programs to extract information "
"from complex data types, branch on the structure of data, and apply specific "
"actions based on different forms of data."
msgstr ""
"結構模式匹配已新增為帶有關聯操作的模式的*match 語句*和*case 語句*。模式由序列"
"、映射、原始資料型別以及類實例組成。模式匹配使程式能夠從復雜的資料型別中提取"
"資訊，在資料結構上進行分支，並根據不同形式的資料應用特定的操作。"

#: ../../whatsnew/3.10.rst:418
#, fuzzy
msgid "Syntax and operations"
msgstr "語法和操作"

#: ../../whatsnew/3.10.rst:420
#, fuzzy
msgid "The generic syntax of pattern matching is::"
msgstr "模式匹配的通用語法是："

#: ../../whatsnew/3.10.rst:432
#, fuzzy
msgid ""
"A match statement takes an expression and compares its value to successive "
"patterns given as one or more case blocks.  Specifically, pattern matching "
"operates by:"
msgstr "match 語句接受一個表達式並將其值與作為一個或多個 case "
"塊給出的連續模式進行比較。具體來說，模式匹配通過以下方式運行："

#: ../../whatsnew/3.10.rst:436
#, fuzzy
msgid "using data with type and shape (the ``subject``)"
msgstr "使用具有型別和形狀的資料（``subject``）"

#: ../../whatsnew/3.10.rst:437
#, fuzzy
msgid "evaluating the ``subject`` in the ``match`` statement"
msgstr "評估``match``語句中的``subject``"

#: ../../whatsnew/3.10.rst:438
#, fuzzy
msgid ""
"comparing the subject with each pattern in a ``case`` statement from top to "
"bottom until a match is confirmed."
msgstr "將主題與 case 語句中的每個模式從上到下進行比較，直到確認匹配為止。"

#: ../../whatsnew/3.10.rst:440
#, fuzzy
msgid "executing the action associated with the pattern of the confirmed match"
msgstr "執行與已確認匹配的模式關聯的操作"

#: ../../whatsnew/3.10.rst:442
#, fuzzy
msgid ""
"If an exact match is not confirmed, the last case, a wildcard ``_``, if "
"provided, will be used as the matching case. If an exact match is not "
"confirmed and a wildcard case does not exist, the entire match block is a no-"
"op."
msgstr "如果未確認完全匹配，則最後一個案例，通配符 ``_``（如果提供）將用作匹配案例。如果"
"未確認完全匹配且不存在通配符情況，則整個匹配塊都是空操作。"

#: ../../whatsnew/3.10.rst:448
#, fuzzy
msgid "Declarative approach"
msgstr "聲明式方法"

#: ../../whatsnew/3.10.rst:450
#, fuzzy
msgid ""
"Readers may be aware of pattern matching through the simple example of "
"matching a subject (data object) to a literal (pattern) with the switch "
"statement found in C, Java or JavaScript (and many other languages). Often "
"the switch statement is used for comparison of an object/expression with "
"case statements containing literals."
msgstr ""
"讀者可能會通過使用 C、Java 或 JavaScript（以及許多其他語言）中的 switch "
"語句將主題（資料物件）與文字（模式）進行匹配的簡單示例來了解模式匹配。通常 "
"switch 語句用於將物件/表達式與包含文字的 case 語句進行比較。"

#: ../../whatsnew/3.10.rst:456
#, fuzzy
msgid ""
"More powerful examples of pattern matching can be found in languages such as "
"Scala and Elixir. With structural pattern matching, the approach is "
"\"declarative\" and explicitly states the conditions (the patterns) for data "
"to match."
msgstr ""
"在 Scala 和 Elixir 等語言中可以找到更強大的模式匹配示例。對於結構模式匹配，該"
"方法是“聲明性的”並明確說明資料匹配的條件（模式）。"

#: ../../whatsnew/3.10.rst:460
#, fuzzy
msgid ""
"While an \"imperative\" series of instructions using nested \"if\" "
"statements could be used to accomplish something similar to structural "
"pattern matching, it is less clear than the \"declarative\" approach. "
"Instead the \"declarative\" approach states the conditions to meet for a "
"match and is more readable through its explicit patterns. While structural "
"pattern matching can be used in its simplest form comparing a variable to a "
"literal in a case statement, its true value for Python lies in its handling "
"of the subject's type and shape."
msgstr ""
"雖然使用嵌套 ``if``語句的“命令式”系列指令可用於完成類似於結構模式匹配的事情，但"
"它不如“聲明式”方法清晰。相反，“聲明式”方法說明匹配的條件，並且通過其顯式模式"
"更具可讀性。雖然結構模式匹配可以以最簡單的形式使用，將變數與 case "
"語句中的文字進行比較，但它對 Python 的真正價值在於它對主題型別和形狀的處理。"

#: ../../whatsnew/3.10.rst:469
#, fuzzy
msgid "Simple pattern: match to a literal"
msgstr "簡單模式：匹配文字"

#: ../../whatsnew/3.10.rst:471
#, fuzzy
msgid ""
"Let's look at this example as pattern matching in its simplest form: a "
"value, the subject, being matched to several literals, the patterns. In the "
"example below, ``status`` is the subject of the match statement. The "
"patterns are each of the case statements, where literals represent request "
"status codes. The associated action to the case is executed after a match::"
msgstr ""
"讓我們將此示例視為最簡單形式的模式匹配：一個值、主題與多個文字、模式相匹配。"
"在下面的示例中，``status`` 是匹配語句的主題。模式是每個 case "
"語句，其中文字表示請求狀態程式碼。案例的關聯操作在匹配後執行："

#: ../../whatsnew/3.10.rst:488
#, fuzzy
msgid ""
"If the above function is passed a ``status`` of 418, \"I'm a teapot\" is "
"returned. If the above function is passed a ``status`` of 500, the case "
"statement with ``_`` will match as a wildcard, and \"Something's wrong with "
"the internet\" is returned. Note the last block: the variable name, ``_``, "
"acts as a *wildcard* and insures the subject will always match. The use of "
"``_`` is optional."
msgstr ""
"如果向上述函式傳遞 418 的“狀態”，則回傳“我是茶壺”。如果向上述函式傳遞 500 "
"的“狀態”，則帶有 ``_``的 case 語句將作為通配符進行匹配，並回傳“網際網路出現問題”。"
"請注意最後一個塊：變數名稱``_``充當*通配符*並確保主題始終匹配。 ``_`` "
"的使用是可選的。"

#: ../../whatsnew/3.10.rst:495
#, fuzzy
msgid ""
"You can combine several literals in a single pattern using ``|`` (\"or\")::"
msgstr "您可以使用``|``（ ``或``）將多個文字組合在一個模式中::"

#: ../../whatsnew/3.10.rst:501
#, fuzzy
msgid "Behavior without the wildcard"
msgstr "沒有通配符的行為"

#: ../../whatsnew/3.10.rst:503
#, fuzzy
msgid ""
"If we modify the above example by removing the last case block, the example "
"becomes::"
msgstr "如果我們通過刪除最後一個 case 塊來修改上面的示例，則示例變為："

#: ../../whatsnew/3.10.rst:515
#, fuzzy
msgid ""
"Without the use of ``_`` in a case statement, a match may not exist. If no "
"match exists, the behavior is a no-op. For example, if ``status`` of 500 is "
"passed, a no-op occurs."
msgstr ""
"如果在 case 語句中不使用 "
"``_``，則可能不存在匹配項。如果不存在匹配項，則該行為是空操作。例如，"
"如果傳遞 500 的 ``status``，則會發生空操作。"

#: ../../whatsnew/3.10.rst:520
#, fuzzy
msgid "Patterns with a literal and variable"
msgstr "具有文字和變數的模式"

#: ../../whatsnew/3.10.rst:522
#, fuzzy
msgid ""
"Patterns can look like unpacking assignments, and a pattern may be used to "
"bind variables. In this example, a data point can be unpacked to its x-"
"coordinate and y-coordinate::"
msgstr "模式可以看起來像拆包賦值，模式可以用來綁定變數。在這個例子中，"
"一個資料點可以被解包到它的 x 坐標和 y 坐標："

#: ../../whatsnew/3.10.rst:539
#, fuzzy
msgid ""
"The first pattern has two literals, ``(0, 0)``, and may be thought of as an "
"extension of the literal pattern shown above. The next two patterns combine "
"a literal and a variable, and the variable *binds* a value from the subject "
"(``point``).  The fourth pattern captures two values, which makes it "
"conceptually similar to the unpacking assignment ``(x, y) = point``."
msgstr ""
"第一個模式有兩個文字，``(0, 0)``，可以被認為是上面顯示的文字模式的擴充。接下"
"來的兩個模式結合了文字和變數，變數*綁定*來自主題的值（``point``）。第四個模式"
"捕獲兩個值，這使得它在概念上類似於解包賦值``(x, y) = point``。"

#: ../../whatsnew/3.10.rst:546
#, fuzzy
msgid "Patterns and classes"
msgstr "模式和類"

#: ../../whatsnew/3.10.rst:548
#, fuzzy
msgid ""
"If you are using classes to structure your data, you can use as a pattern "
"the class name followed by an argument list resembling a constructor. This "
"pattern has the ability to capture class attributes into variables::"
msgstr "如果您使用類來構造資料，則可以將類名後跟類似於構造函式的參數列表用作模式。此"
"模式能夠將類屬性捕獲到變數中::"

#: ../../whatsnew/3.10.rst:570
#, fuzzy
msgid "Patterns with positional parameters"
msgstr "具有位置參數的模式"

#: ../../whatsnew/3.10.rst:572
#, fuzzy
msgid ""
"You can use positional parameters with some builtin classes that provide an "
"ordering for their attributes (e.g. dataclasses). You can also define a "
"specific position for attributes in patterns by setting the "
"``__match_args__`` special attribute in your classes. If it's set to (\"x\", "
"\"y\"), the following patterns are all equivalent (and all bind the ``y`` "
"attribute to the ``var`` variable)::"
msgstr ""
"您可以將位置參數與一些內建類一起使用，這些內建類為其屬性（例如資料類）提供排"
"序。您還可以通過在類中設定 ``__match_args__`` "
"特殊屬性來為模式中的屬性定義特定位置。如果它設定為 (\"x\", \"y\""
")，則以下模式都是等效的（並且都將 ``y`` 屬性綁定到 ``var`` 變數）："

#: ../../whatsnew/3.10.rst:584
#, fuzzy
msgid "Nested patterns"
msgstr "嵌套模式"

#: ../../whatsnew/3.10.rst:586
#, fuzzy
msgid ""
"Patterns can be arbitrarily nested.  For example, if our data is a short "
"list of points, it could be matched like this::"
msgstr "模式可以任意嵌套。例如，如果我們的資料是一個簡短的點列表，它可以這樣匹配："

#: ../../whatsnew/3.10.rst:602
#, fuzzy
msgid "Complex patterns and the wildcard"
msgstr "複雜模式和通配符"

#: ../../whatsnew/3.10.rst:604
#, fuzzy
msgid ""
"To this point, the examples have used ``_`` alone in the last case "
"statement. A wildcard can be used in more complex patterns, such as "
"``('error', code, _)``. For example::"
msgstr ""
"至此，這些示例在最後一個 case 語句中單獨使用了 "
"``_``。通配符可用於更複雜的模式，例如 ``('error', code, _)``。例如：："

#: ../../whatsnew/3.10.rst:614
#, fuzzy
msgid ""
"In the above case, ``test_variable`` will match for ('error', code, 100) and "
"('error', code, 800)."
msgstr ""
"在上述情況下，``test_variable`` 將匹配 ('error', code, 100) 和 ('error', "
"code, 800)。"

#: ../../whatsnew/3.10.rst:618
#, fuzzy
msgid "Guard"
msgstr "警衛"

#: ../../whatsnew/3.10.rst:620
#, fuzzy
msgid ""
"We can add an ``if`` clause to a pattern, known as a \"guard\".  If the "
"guard is false, ``match`` goes on to try the next case block.  Note that "
"value capture happens before the guard is evaluated::"
msgstr ""
"我們可以在模式中新增一個 ``if`` 子句，稱為“守衛”。如果守衛為假，“匹配”繼續嘗"
"試下一個案例塊。請注意，值捕獲發生在對守衛進行評估之前::"

#: ../../whatsnew/3.10.rst:631
#, fuzzy
msgid "Other Key Features"
msgstr "其他主要特點"

#: ../../whatsnew/3.10.rst:633
#, fuzzy
msgid "Several other key features:"
msgstr "其他幾個主要特點："

#: ../../whatsnew/3.10.rst:635
#, fuzzy
msgid ""
"Like unpacking assignments, tuple and list patterns have exactly the same "
"meaning and actually match arbitrary sequences. Technically, the subject "
"must be a sequence. Therefore, an important exception is that patterns don't "
"match iterators. Also, to prevent a common mistake, sequence patterns don't "
"match strings."
msgstr ""
"與拆包賦值一樣，元組和列表模式具有完全相同的含義，實際上匹配任意序列。從技術"
"上講，主題必須是一個序列。因此，一個重要的例外是模式與疊代器不匹配。此外，為"
"防止常見錯誤，序列模式不匹配字串。"

#: ../../whatsnew/3.10.rst:641
#, fuzzy
msgid ""
"Sequence patterns support wildcards: ``[x, y, *rest]`` and ``(x, y, *rest)`` "
"work similar to wildcards in unpacking assignments.  The name after ``*`` "
"may also be ``_``, so ``(x, y, *_)`` matches a sequence of at least two "
"items without binding the remaining items."
msgstr ""
"序列模式支援通配符：``[x, y, *rest]`` 和 ``(x, y, *rest)`` "
"的工作類似於解包分配中的通配符。 ``*`` 之後的名稱也可能是``_``，因此``(x, y, "
"*_)`` 匹配至少兩個項目的序列而不綁定其餘項目。"

#: ../../whatsnew/3.10.rst:646
#, fuzzy
msgid ""
"Mapping patterns: ``{\"bandwidth\": b, \"latency\": l}`` captures the "
"``\"bandwidth\"`` and ``\"latency\"`` values from a dict.  Unlike sequence "
"patterns, extra keys are ignored.  A wildcard ``**rest`` is also supported.  "
"(But ``**_`` would be redundant, so is not allowed.)"
msgstr ""
"映射模式：``{\"bandwidth\": b, \"latency\": l}`` 從字典中捕獲``\"bandwidth\""
"`` 和``\"latency\"`` 值。與序列模式不同，額外的鍵會被忽略。還支援通配符 "
"`**rest``。 （但是 ``**_`` 是多餘的，所以是不允許的。）"

#: ../../whatsnew/3.10.rst:651
#, fuzzy
msgid "Subpatterns may be captured using the ``as`` keyword::"
msgstr "可以使用 ``as`` 關鍵字捕獲子模式::"

#: ../../whatsnew/3.10.rst:655
#, fuzzy
msgid ""
"This binds x1, y1, x2, y2 like you would expect without the ``as`` clause, "
"and p2 to the entire second item of the subject."
msgstr "這會將 x1、y1、x2、y2 綁定到沒有 ``as`` 子句的情況，並將 p2 "
"綁定到主題的整個第二項。"

#: ../../whatsnew/3.10.rst:658
#, fuzzy
msgid ""
"Most literals are compared by equality. However, the singletons ``True``, "
"``False`` and ``None`` are compared by identity."
msgstr "大多數文字都是通過相等來比較的。但是，單例 ``True``、 ``False``和 ``None``是按身份進行"
"比較的。"

#: ../../whatsnew/3.10.rst:661
#, fuzzy
msgid ""
"Named constants may be used in patterns.  These named constants must be "
"dotted names to prevent the constant from being interpreted as a capture "
"variable::"
msgstr "命名常數可以在模式中使用。這些命名常數必須是帶點的名稱，以防止常數被解釋為捕"
"獲變數::"

#: ../../whatsnew/3.10.rst:679
#, fuzzy
msgid ""
"For the full specification see :pep:`634`.  Motivation and rationale are in :"
"pep:`635`, and a longer tutorial is in :pep:`636`."
msgstr "有關完整規範，請參閱 :pep:`634`。動機和基本原理在 :pep:`635` 中，"
"更長的教程在 :pep:`636` 中。"

#: ../../whatsnew/3.10.rst:686
#, fuzzy
msgid "Optional ``EncodingWarning`` and ``encoding=\"locale\"`` option"
msgstr "可選的 ``EncodingWarning`` 和 ``encoding=\"locale\"`` 選項"

#: ../../whatsnew/3.10.rst:688
#, fuzzy
msgid ""
"The default encoding of :class:`TextIOWrapper` and :func:`open` is platform "
"and locale dependent. Since UTF-8 is used on most Unix platforms, omitting "
"``encoding`` option when opening UTF-8 files (e.g. JSON, YAML, TOML, "
"Markdown) is a very common bug. For example::"
msgstr ""
":class:`TextIOWrapper` 和 :func:`open` 的預設編碼取決於平台和區域設定。由於 "
"UTF-8 在大多數 Unix 平台上使用，因此在打開 UTF-8 文件（例如 "
"JSON、YAML、TOML、Markdown）時省略 ``encoding`` "
"選項是一個非常常見的錯誤。例如：："

#: ../../whatsnew/3.10.rst:697
#, fuzzy
msgid ""
"To find this type of bug, an optional ``EncodingWarning`` is added. It is "
"emitted when :data:`sys.flags.warn_default_encoding <sys.flags>` is true and "
"locale-specific default encoding is used."
msgstr ""
"為了找到這種型別的錯誤，新增了一個可選的 ``EncodingWarning``。它在 :data:`"
"sys.flags.warn_default_encoding <sys.flags>` "
"為真且使用特定於區域設定的預設編碼時發出。"

#: ../../whatsnew/3.10.rst:701
#, fuzzy
msgid ""
"``-X warn_default_encoding`` option and :envvar:`PYTHONWARNDEFAULTENCODING` "
"are added to enable the warning."
msgstr ""
"``-X warn_default_encoding`` 選項和 :envvar:`PYTHONWARNDEFAULTENCODING` "
"被新增以啟用警告。"

#: ../../whatsnew/3.10.rst:704
msgid "See :ref:`io-text-encoding` for more information."
msgstr "更多資訊請見 :ref:`io-text-encoding`\\ 。"

#: ../../whatsnew/3.10.rst:709
#, fuzzy
msgid "New Features Related to Type Hints"
msgstr "與型別提示相關的新功能"

#: ../../whatsnew/3.10.rst:711
#, fuzzy
msgid ""
"This section covers major changes affecting :pep:`484` type hints and the :"
"mod:`typing` module."
msgstr "本節涵蓋影響 :pep:`484` 型別提示和 :mod:`typing` 模組的主要變化。"

#: ../../whatsnew/3.10.rst:716
#, fuzzy
msgid "PEP 604: New Type Union Operator"
msgstr "PEP 604：新型聯盟運營商"

#: ../../whatsnew/3.10.rst:718
#, fuzzy
msgid ""
"A new type union operator was introduced which enables the syntax ``X | Y``. "
"This provides a cleaner way of expressing 'either type X or type Y' instead "
"of using :data:`typing.Union`, especially in type hints."
msgstr ""
"引入了一種新型聯合運算符，它支援語法“X | Y``。這提供了一種更簡潔的方式來表達“"
"型別 X 或型別 Y”，而不是使用 :data:`typing.Union`，尤其是在型別提示中。"

#: ../../whatsnew/3.10.rst:722
#, fuzzy
msgid ""
"In previous versions of Python, to apply a type hint for functions accepting "
"arguments of multiple types, :data:`typing.Union` was used::"
msgstr "在以前的 Python 版本中，為了對接受多種型別參數的函式應用型別提示，使用了 "
":data:`typing.Union`::"

#: ../../whatsnew/3.10.rst:729
#, fuzzy
msgid "Type hints can now be written in a more succinct manner::"
msgstr "現在可以用更簡潔的方式編寫型別提示::"

#: ../../whatsnew/3.10.rst:735
#, fuzzy
msgid ""
"This new syntax is also accepted as the second argument to :func:"
"`isinstance` and :func:`issubclass`::"
msgstr "這種新語法也被接受為 :func:`isinstance` 和 :func:`issubclass`:: "
"的第二個參數："

#: ../../whatsnew/3.10.rst:741
msgid "See :ref:`types-union` and :pep:`604` for more details."
msgstr "更多資訊請見 :ref:`types-union` 與 :pep:`604`\\ 。"

#: ../../whatsnew/3.10.rst:743
#, fuzzy
msgid ""
"(Contributed by Maggie Moss and Philippe Prados in :issue:`41428`, with "
"additions by Yurii Karabas and Serhiy Storchaka in :issue:`44490`.)"
msgstr ""
"（由 Maggie Moss 和 Philippe Prados 在 :issue:`41428` 中貢獻，由 Yurii "
"Karabas 和 Serhiy Storchaka 在 :issue:`44490` 中補充。）"

#: ../../whatsnew/3.10.rst:748
#, fuzzy
msgid "PEP 612: Parameter Specification Variables"
msgstr "PEP 612：參數規範變數"

#: ../../whatsnew/3.10.rst:750
#, fuzzy
msgid ""
"Two new options to improve the information provided to static type checkers "
"for :pep:`484`\\ 's ``Callable`` have been added to the :mod:`typing` module."
msgstr ""
"為 :pep:`484`\\ 的 ``Callable`` "
"改進了提供給靜態型別檢查器的資訊的兩個新選項已新增到 :mod:`typing` 模組。"

#: ../../whatsnew/3.10.rst:753
#, fuzzy
msgid ""
"The first is the parameter specification variable.  They are used to forward "
"the parameter types of one callable to another callable -- a pattern "
"commonly found in higher order functions and decorators.  Examples of usage "
"can be found in :class:`typing.ParamSpec`. Previously, there was no easy way "
"to type annotate dependency of parameter types in such a precise manner."
msgstr ""
"第一個是參數規範變數。它們用於將一個可呼叫物件的參數型別轉發到另一個可呼叫物"
"件——一種常見於高階函式和裝飾器中的模式。用法示例可以在 typing.ParamSpec "
"中找到。以前，沒有簡單的方法來以如此精確的方式鍵入註釋參數型別的依賴關係。"

#: ../../whatsnew/3.10.rst:759
#, fuzzy
msgid ""
"The second option is the new ``Concatenate`` operator. It's used in "
"conjunction with parameter specification variables to type annotate a higher "
"order callable which adds or removes parameters of another callable.  "
"Examples of usage can be found in :class:`typing.Concatenate`."
msgstr ""
"第二個選項是新的“連接”運算符。它與參數規範變數結合使用，以型別註釋高階可呼叫"
"物件，該可呼叫物件新增或刪除另一個可呼叫物件的參數。用法示例可以在 "
":class:`typing.Concatenate` 中找到。"

#: ../../whatsnew/3.10.rst:764
#, fuzzy
msgid ""
"See :class:`typing.Callable`, :class:`typing.ParamSpec`, :class:`typing."
"Concatenate`, :class:`typing.ParamSpecArgs`, :class:`typing."
"ParamSpecKwargs`, and :pep:`612` for more details."
msgstr ""
"請參閱 :class:`typing.Callable`、 :class:`typing."
"ParamSpec`、 :class:`typing.Concatenate`、 :class:`typing."
"ParamSpecArgs`、 :class:`typing.ParamSpecKwargs` 和 :pep: `612` "
"了解更多詳情。"

#: ../../whatsnew/3.10.rst:768
#, fuzzy
msgid ""
"(Contributed by Ken Jin in :issue:`41559`, with minor enhancements by Jelle "
"Zijlstra in :issue:`43783`.  PEP written by Mark Mendoza.)"
msgstr ""
"（由 Ken Jin 在 :issue:`41559` 中貢獻，Jelle Zijlstra 在 :issue:`43783` "
"中進行了小幅改進。PEP 由 Mark Mendoza 編寫。）"

#: ../../whatsnew/3.10.rst:773
#, fuzzy
msgid "PEP 613: TypeAlias"
msgstr "PEP 613：型別別名"

#: ../../whatsnew/3.10.rst:775
#, fuzzy
msgid ""
":pep:`484` introduced the concept of type aliases, only requiring them to be "
"top-level unannotated assignments. This simplicity sometimes made it "
"difficult for type checkers to distinguish between type aliases and ordinary "
"assignments, especially when forward references or invalid types were "
"involved. Compare::"
msgstr ""
":pep:`484` 引入了型別別名的概念，只要求它們是頂級未註釋的賦值。這種簡單性有時"
"使型別檢查器難以區分型別別名和普通賦值，尤其是在涉及前向引用或無效型別時。比"
"較：："

#: ../../whatsnew/3.10.rst:783
#, fuzzy
msgid ""
"Now the :mod:`typing` module has a special value :data:`TypeAlias` which "
"lets you declare type aliases more explicitly::"
msgstr "現在 :mod:`typing` 模組有一個特殊的值 :data:`TypeAlias` "
"可以讓您更明確地聲明型別別名::"

#: ../../whatsnew/3.10.rst:789
msgid "See :pep:`613` for more details."
msgstr "更多資訊請見 :pep:`613`\\ 。"

#: ../../whatsnew/3.10.rst:791
#, fuzzy
msgid "(Contributed by Mikhail Golubev in :issue:`41923`.)"
msgstr "（由 Mikhail Golubev 在 :issue:`41923` 中貢獻。）"

#: ../../whatsnew/3.10.rst:794
#, fuzzy
msgid "PEP 647: User-Defined Type Guards"
msgstr "PEP 647：使用者定義的型別保護"

#: ../../whatsnew/3.10.rst:796
#, fuzzy
msgid ""
":data:`TypeGuard` has been added to the :mod:`typing` module to annotate "
"type guard functions and improve information provided to static type "
"checkers during type narrowing.  For more information, please see :data:"
"`TypeGuard`\\ 's documentation, and :pep:`647`."
msgstr ""
":data:`TypeGuard` 已新增到 :mod:`typing` 模組以註釋型別保護函式並改進在型別縮"
"小期間提供給靜態型別檢查器的資訊。有關詳細資訊，請參閱 :data:`TypeGuard`\\ "
"的文檔和 :pep:`647`。"

#: ../../whatsnew/3.10.rst:801
#, fuzzy
msgid ""
"(Contributed by Ken Jin and Guido van Rossum in :issue:`43766`. PEP written "
"by Eric Traut.)"
msgstr ""
"（由 Ken Jin 和 Guido van Rossum 在 :issue:`43766` 中貢獻。由 Eric Traut "
"編寫的 PEP。）"

#: ../../whatsnew/3.10.rst:805
#, fuzzy
msgid "Other Language Changes"
msgstr "其他語言變化"

#: ../../whatsnew/3.10.rst:807
#, fuzzy
msgid ""
"The :class:`int` type has a new method :meth:`int.bit_count`, returning the "
"number of ones in the binary expansion of a given integer, also known as the "
"population count. (Contributed by Niklas Fiekas in :issue:`29882`.)"
msgstr ""
":class:`int` 型別有一個新方法 :meth:`int."
"bit_count`，回傳給定整數的二進制擴充中的個數，也稱為人口計數。 （由 Niklas "
"Fiekas 在 :issue:`29882` 中貢獻。）"

#: ../../whatsnew/3.10.rst:811
#, fuzzy
msgid ""
"The views returned by :meth:`dict.keys`, :meth:`dict.values` and :meth:`dict."
"items` now all have a ``mapping`` attribute that gives a :class:`types."
"MappingProxyType` object wrapping the original dictionary. (Contributed by "
"Dennis Sweeney in :issue:`40890`.)"
msgstr ""
":meth:`dict.keys`、:meth:`dict.values` 和 :meth:`dict.items` "
"回傳的視圖現在都有一個 ``mapping`` 屬性，它給出了一個 :class:`"
"types.MappingProxyType ` 包裝原始字典的物件。 （由 Dennis Sweeney 在 "
":issue:`40890` 中貢獻。）"

#: ../../whatsnew/3.10.rst:816
#, fuzzy
msgid ""
":pep:`618`: The :func:`zip` function now has an optional ``strict`` flag, "
"used to require that all the iterables have an equal length."
msgstr ":pep:`618`: :func:`zip` 函式現在有一個可選的 ``strict`` "
"旗標，用於要求所有可疊代物件具有相同的長度。"

#: ../../whatsnew/3.10.rst:819
#, fuzzy
msgid ""
"Builtin and extension functions that take integer arguments no longer "
"accept :class:`~decimal.Decimal`\\ s, :class:`~fractions.Fraction`\\ s and "
"other objects that can be converted to integers only with a loss (e.g. that "
"have the :meth:`~object.__int__` method but do not have the :meth:`~object."
"__index__` method). (Contributed by Serhiy Storchaka in :issue:`37999`.)"
msgstr ""
"採用整數參數的內建函式和擴充函式不再接受 :class:`~decimal.Decimal`\\ "
"s、:class:`~fractions.Fraction`\\ s "
"和其他只能轉換為整數但有損失的物件（例如有 :meth:`~object.__int__` "
"方法但沒有 :meth:`~object.__index__` 方法)。 （由 Serhiy Storchaka 在 "
":issue:`37999` 中貢獻。）"

#: ../../whatsnew/3.10.rst:826
#, fuzzy
msgid ""
"If :func:`object.__ipow__` returns :const:`NotImplemented`, the operator "
"will correctly fall back to :func:`object.__pow__` and :func:`object."
"__rpow__` as expected. (Contributed by Alex Shkop in :issue:`38302`.)"
msgstr ""
"如果 :func:`object.__ipow__` 回傳 :const:`NotImplemented`，"
"運算符將正確地回退到 :func:`object.__pow__` 和 :func:`object.__rpow__` "
"正如預期的那樣。 （由 Alex Shkop 在 :issue:`38302` 中貢獻。）"

#: ../../whatsnew/3.10.rst:830
#, fuzzy
msgid ""
"Assignment expressions can now be used unparenthesized within set literals "
"and set comprehensions, as well as in sequence indexes (but not slices)."
msgstr "賦值表達式現在可以在集合文字和集合推導中以及序列索引（但不是切片）中使用無括"
"號。"

#: ../../whatsnew/3.10.rst:833
#, fuzzy
msgid ""
"Functions have a new ``__builtins__`` attribute which is used to look for "
"builtin symbols when a function is executed, instead of looking into "
"``__globals__['__builtins__']``. The attribute is initialized from "
"``__globals__[\"__builtins__\"]`` if it exists, else from the current "
"builtins. (Contributed by Mark Shannon in :issue:`42990`.)"
msgstr ""
"函式有一個新的 ``__builtins__`` 屬性，用於在執行函式時查找內建符號，"
"而不是查看 ``__globals__[\\'__builtins__\\']``。如果屬性存在，則從 "
"``__globals__[\"__builtins__\"]`` 初始化，否則從當前內建函式初始化。 （由 "
"Mark Shannon 在 :issue:`42990` 中貢獻。）"

#: ../../whatsnew/3.10.rst:839
#, fuzzy
msgid ""
"Two new builtin functions -- :func:`aiter` and :func:`anext` have been added "
"to provide asynchronous counterparts to :func:`iter` and :func:`next`, "
"respectively. (Contributed by Joshua Bronson, Daniel Pope, and Justin Wang "
"in :issue:`31861`.)"
msgstr ""
"新增了兩個新的內建函式 -- :func:`aiter` 和 :func:`anext` 分別為 :func:`iter` "
"和 :func:`next` 提供非同步對應項。 （由 Joshua Bronson、Daniel Pope 和 "
"Justin Wang 在 :issue:`31861` 中貢獻。）"

#: ../../whatsnew/3.10.rst:844
#, fuzzy
msgid ""
"Static methods (:func:`@staticmethod <staticmethod>`) and class methods (:"
"func:`@classmethod <classmethod>`) now inherit the method attributes "
"(``__module__``, ``__name__``, ``__qualname__``, ``__doc__``, "
"``__annotations__``) and have a new ``__wrapped__`` attribute. Moreover, "
"static methods are now callable as regular functions. (Contributed by Victor "
"Stinner in :issue:`43682`.)"
msgstr ""
"靜態方法 (:func:`@staticmethod <staticmethod>`) 和類方法 (:func:`@"
"classmethod <classmethod>`) 現在繼承方法屬性 (``__module__``, ``__name__``, "
"``__qualname__ ``, ``__doc__``, ``__annotations__``) 並且有一個新的 "
"``__wrapped__`` 屬性。此外，靜態方法現在可以作為常規函式呼叫。 （由 Victor "
"Stinner 在 :issue:`43682` 中貢獻。）"

#: ../../whatsnew/3.10.rst:851
#, fuzzy
msgid ""
"Annotations for complex targets (everything beside ``simple name`` targets "
"defined by :pep:`526`) no longer cause any runtime effects with ``from "
"__future__ import annotations``. (Contributed by Batuhan Taskaya in :issue:"
"`42737`.)"
msgstr ""
"複雜目標的註解（除由 :pep:`526` 定義的“簡單名稱”目標之外的所有內容）不再對“"
"from __future__ import annotations”造成任何運行時影響。 （由 Batuhan Taskaya "
"在 :issue:`42737` 中貢獻。）"

#: ../../whatsnew/3.10.rst:855
#, fuzzy
msgid ""
"Class and module objects now lazy-create empty annotations dicts on demand. "
"The annotations dicts are stored in the object’s ``__dict__`` for backwards "
"compatibility.  This improves the best practices for working with "
"``__annotations__``; for more information, please see :ref:`annotations-"
"howto`. (Contributed by Larry Hastings in :issue:`43901`.)"
msgstr ""
"類和模組物件現在懶惰地根據需要建立空註釋指令。註釋字典儲存在物件的 __dict__ "
"中以實作向後相容性。這改進了使用 ``__annotations__`` "
"的最佳實踐；有關更多資訊，請參閱 :ref:`annotations-howto`。 （由 Larry "
"Hastings 在 :issue:`43901` 中貢獻。）"

#: ../../whatsnew/3.10.rst:862
#, fuzzy
msgid ""
"Annotations consist of ``yield``, ``yield from``, ``await`` or named "
"expressions are now forbidden under ``from __future__ import annotations`` "
"due to their side effects. (Contributed by Batuhan Taskaya in :issue:"
"`42725`.)"
msgstr ""
"註釋由 ``yield``、``yield from``、``await`` "
"或命名表達式組成，由於它們的副作用，現在在 ``from __future__ import "
"annotations`` 下被禁止。 （由 Batuhan Taskaya 在 :issue:`42725` 中貢獻。）"

#: ../../whatsnew/3.10.rst:867
#, fuzzy
msgid ""
"Usage of unbound variables, ``super()`` and other expressions that might "
"alter the processing of symbol table as annotations are now rendered "
"effectless under ``from __future__ import annotations``. (Contributed by "
"Batuhan Taskaya in :issue:`42725`.)"
msgstr ""
"使用未綁定變數、``super()`` "
"和其他可能改變符號表作為註釋的處理的表達式現在在``from __future__ import "
"annotations`` 下變得無效。 （由 Batuhan Taskaya 在 :issue:`42725` 中貢獻。）"

#: ../../whatsnew/3.10.rst:872
#, fuzzy
msgid ""
"Hashes of NaN values of both :class:`float` type and :class:`decimal."
"Decimal` type now depend on object identity. Formerly, they always hashed to "
"``0`` even though NaN values are not equal to one another. This caused "
"potentially quadratic runtime behavior due to excessive hash collisions when "
"creating dictionaries and sets containing multiple NaNs. (Contributed by "
"Raymond Hettinger in :issue:`43475`.)"
msgstr ""
"float 型別和 decimal.Decimal 型別的 NaN "
"值的雜湊值現在取決於物件標識。以前，它們總是可雜湊為 ``0``，即使 NaN "
"值彼此不相等。在建立包含多個 NaN "
"的字典和集合時，由於雜湊衝突過多，這會導致潛在的二次運行時行為。 （由 "
"Raymond Hettinger 在 :issue:`43475` 中貢獻。）"

#: ../../whatsnew/3.10.rst:879
#, fuzzy
msgid ""
"A :exc:`SyntaxError` (instead of a :exc:`NameError`) will be raised when "
"deleting the :const:`__debug__` constant.  (Contributed by Dong-hee Na in :"
"issue:`45000`.)"
msgstr ""
":exc:`SyntaxError`（而不是 :exc:`NameError`）將在刪除 :const:`__debug__` "
"常數時引發。 （由 Dong-hee Na 在 :issue:`45000` 中貢獻。）"

#: ../../whatsnew/3.10.rst:882
#, fuzzy
msgid ""
":exc:`SyntaxError` exceptions now have ``end_lineno`` and ``end_offset`` "
"attributes.  They will be ``None`` if not determined. (Contributed by Pablo "
"Galindo in :issue:`43914`.)"
msgstr ""
":exc:`SyntaxError` 例外現在有 ``end_lineno`` 和 ``end_offset`` "
"屬性。如果不確定，它們將是 ``None`` 。 （由 Pablo Galindo 在 :issue:`43914` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:887
#, fuzzy
msgid "New Modules"
msgstr "新模組"

#: ../../whatsnew/3.10.rst:889
#, fuzzy
msgid "None yet."
msgstr "還沒有。"

#: ../../whatsnew/3.10.rst:893
#, fuzzy
msgid "Improved Modules"
msgstr "改進模組"

#: ../../whatsnew/3.10.rst:896
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.10.rst:898
#, fuzzy
msgid ""
"Add missing :meth:`~asyncio.events.AbstractEventLoop."
"connect_accepted_socket` method. (Contributed by Alex Grönholm in :issue:"
"`41332`.)"
msgstr ""
"新增缺少的 :meth:`~asyncio.events.AbstractEventLoop.connect_accepted_socket` "
"方法。 （由 Alex Grönholm 在 :issue:`41332` 中貢獻。）"

#: ../../whatsnew/3.10.rst:903
msgid "argparse"
msgstr "argparse"

#: ../../whatsnew/3.10.rst:905
#, fuzzy
msgid ""
"Misleading phrase \"optional arguments\" was replaced with \"options\" in "
"argparse help. Some tests might require adaptation if they rely on exact "
"output match. (Contributed by Raymond Hettinger in :issue:`9694`.)"
msgstr ""
"在 argparse 幫助中，誤導性短語“可選參數”被替換為“選項”。如果某些測試依賴於精"
"確的輸出匹配，則可能需要進行調整。 （由 Raymond Hettinger 在 :issue:`9694` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:909
msgid "array"
msgstr "array"

#: ../../whatsnew/3.10.rst:911
#, fuzzy
msgid ""
"The :meth:`~array.array.index` method of :class:`array.array` now has "
"optional *start* and *stop* parameters. (Contributed by Anders Lorentsen and "
"Zackery Spytz in :issue:`31956`.)"
msgstr ""
":class:`array.array` 的 :meth:`~array.array.index` 方法現在有可選的 *start* "
"和 *stop* 參數。 （由 Anders Lorentsen 和 Zackery Spytz 在 :issue:`31956` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:916
msgid "asynchat, asyncore, smtpd"
msgstr "asynchat, asyncore, smtpd"

#: ../../whatsnew/3.10.rst:917
#, fuzzy
msgid ""
"These modules have been marked as deprecated in their module documentation "
"since Python 3.6.  An import-time :class:`DeprecationWarning` has now been "
"added to all three of these modules."
msgstr ""
"自 Python 3.6 以來，這些模組已在其模組文檔中標記為已棄用。導入時 "
"DeprecationWarning 現在已新增到所有這三個模組中。"

#: ../../whatsnew/3.10.rst:922
msgid "base64"
msgstr "base64"

#: ../../whatsnew/3.10.rst:924
#, fuzzy
msgid ""
"Add :func:`base64.b32hexencode` and :func:`base64.b32hexdecode` to support "
"the Base32 Encoding with Extended Hex Alphabet."
msgstr ""
"新增 :func:`base64.b32hexencode` 和 :func:`base64.b32hexdecode` "
"以支援帶有擴充十六進製字母表的 Base32 編碼。"

#: ../../whatsnew/3.10.rst:928
msgid "bdb"
msgstr "bdb"

#: ../../whatsnew/3.10.rst:930
#, fuzzy
msgid ""
"Add :meth:`~bdb.Breakpoint.clearBreakpoints` to reset all set breakpoints. "
"(Contributed by Irit Katriel in :issue:`24160`.)"
msgstr ""
"新增 :meth:`~bdb.Breakpoint.clearBreakpoints` 以重置所有設定的斷點。 （由 "
"Irit Katriel 在 :issue:`24160` 中貢獻。）"

#: ../../whatsnew/3.10.rst:934
msgid "bisect"
msgstr "bisect"

#: ../../whatsnew/3.10.rst:936
#, fuzzy
msgid ""
"Added the possibility of providing a *key* function to the APIs in the :mod:"
"`bisect` module. (Contributed by Raymond Hettinger in :issue:`4356`.)"
msgstr ""
"新增了向 :mod:`bisect` 模組中的 API 提供 *key* 函式的可能性。 （由 Raymond "
"Hettinger 在 :issue:`4356` 中貢獻。）"

#: ../../whatsnew/3.10.rst:940
msgid "codecs"
msgstr "codecs"

#: ../../whatsnew/3.10.rst:942
#, fuzzy
msgid ""
"Add a :func:`codecs.unregister` function to unregister a codec search "
"function. (Contributed by Hai Shi in :issue:`41842`.)"
msgstr ""
"新增 :func:`codecs.unregister` 函式以取消註冊編解碼器搜索功能。 （由 Hai Shi "
"在 :issue:`41842` 中貢獻。）"

#: ../../whatsnew/3.10.rst:946
msgid "collections.abc"
msgstr "collections.abc"

#: ../../whatsnew/3.10.rst:948
#, fuzzy
msgid ""
"The ``__args__`` of the :ref:`parameterized generic <types-genericalias>` "
"for :class:`collections.abc.Callable` are now consistent with :data:`typing."
"Callable`. :class:`collections.abc.Callable` generic now flattens type "
"parameters, similar to what :data:`typing.Callable` currently does.  This "
"means that ``collections.abc.Callable[[int, str], str]`` will have "
"``__args__`` of ``(int, str, str)``; previously this was ``([int, str], "
"str)``.  To allow this change, :class:`types.GenericAlias` can now be "
"subclassed, and a subclass will be returned when subscripting the :class:"
"`collections.abc.Callable` type.  Note that a :exc:`TypeError` may be raised "
"for invalid forms of parameterizing :class:`collections.abc.Callable` which "
"may have passed silently in Python 3.9. (Contributed by Ken Jin in :issue:"
"`42195`.)"
msgstr ""
":ref:`collections.abc.Callable` 的參數化泛型 <types-genericalias>` 的 "
"``__args__`` 現在與 :data:`typing.Callable` 一致。 :class:`collections.abc."
"Callable` 泛型現在扁平化型別參數，類似於 :data:`typing.Callable` 目前所做的。"
"這意味著 ``collections.abc.Callable[[int, str], str]`` 將有 ``__args__`` of "
"``(int, str, str)``；以前這是``([int, str], str)``。為了允許此更改，"
"現在可以對 types.GenericAlias 進行子類別化，並且在下標 "
"collections.abc.Callable 型別時將回傳一個子類別。請注意 :exec:`TypeError` "
"可能會因無效形式的參數化 :class:`collections.abc.Callable` 而引發，"
"這可能已在 Python 3.9 中靜默傳遞。 （由 Ken Jin 在 :issue:`42195` 中貢獻。）"

#: ../../whatsnew/3.10.rst:961
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.10.rst:963
#, fuzzy
msgid ""
"Add a :func:`contextlib.aclosing` context manager to safely close async "
"generators and objects representing asynchronously released resources. "
"(Contributed by Joongi Kim and John Belmonte in :issue:`41229`.)"
msgstr ""
"新增一個 :func:`contextlib.aclosing` "
"上下文管理器以安全地關閉非同步生成器和代表非同步釋放資源的物件。 （由 Joongi "
"Kim 和 John Belmonte 在 :issue:`41229` 中貢獻。）"

#: ../../whatsnew/3.10.rst:967
#, fuzzy
msgid ""
"Add asynchronous context manager support to :func:`contextlib.nullcontext`. "
"(Contributed by Tom Gringauz in :issue:`41543`.)"
msgstr ""
"將非同步上下文管理器支援新增到 :func:`contextlib.nullcontext`。 （由 Tom "
"Gringauz 在 :issue:`41543` 中貢獻。）"

#: ../../whatsnew/3.10.rst:970
#, fuzzy
msgid ""
"Add :class:`AsyncContextDecorator`, for supporting usage of async context "
"managers as decorators."
msgstr "新增 AsyncContextDecorator，以支援將非同步上下文管理器用作裝飾器。"

#: ../../whatsnew/3.10.rst:974
msgid "curses"
msgstr "curses"

#: ../../whatsnew/3.10.rst:976
#, fuzzy
msgid ""
"The extended color functions added in ncurses 6.1 will be used transparently "
"by :func:`curses.color_content`, :func:`curses.init_color`, :func:`curses."
"init_pair`, and :func:`curses.pair_content`. A new function, :func:`curses."
"has_extended_color_support`, indicates whether extended color support is "
"provided by the underlying ncurses library. (Contributed by Jeffrey "
"Kintscher and Hans Petter Jansson in :issue:`36982`.)"
msgstr ""
"ncurses 6.1 中新增的擴充顏色函式將被 curses.color_content、curses."
"init_color、curses.init_pair 和 curses.pair_content 透明地使用。新函式 "
"curses.has_extended_color_support 指示底層 ncurses 庫是否提供擴充顏色支援。 "
"（由 Jeffrey Kintscher 和 Hans Petter Jansson 在 :issue:`36982` 中貢獻。）"

#: ../../whatsnew/3.10.rst:983
#, fuzzy
msgid ""
"The ``BUTTON5_*`` constants are now exposed in the :mod:`curses` module if "
"they are provided by the underlying curses library. (Contributed by Zackery "
"Spytz in :issue:`39273`.)"
msgstr ""
"``BUTTON5_*`` 常數現在暴露在 :mod:`curses` 模組中，如果它們由底層 curses "
"庫提供的話。 （由 Zackery Spytz 在 :issue:`39273` 中貢獻。）"

#: ../../whatsnew/3.10.rst:988
msgid "dataclasses"
msgstr "dataclasses"

#: ../../whatsnew/3.10.rst:991
msgid "__slots__"
msgstr "__slots__"

#: ../../whatsnew/3.10.rst:993
#, fuzzy
msgid ""
"Added ``slots`` parameter in :func:`dataclasses.dataclass` decorator. "
"(Contributed by Yurii Karabas in :issue:`42269`)"
msgstr ""
"在 :func:`dataclasses.dataclass` 裝飾器中新增了 ``slots`` 參數。 （由 Yurii "
"Karabas 在 :issue:`42269` 中貢獻）"

#: ../../whatsnew/3.10.rst:997
#, fuzzy
msgid "Keyword-only fields"
msgstr "僅關鍵字欄位"

#: ../../whatsnew/3.10.rst:999
#, fuzzy
msgid ""
"dataclasses now supports fields that are keyword-only in the generated "
"__init__ method.  There are a number of ways of specifying keyword-only "
"fields."
msgstr "資料類現在支援在生成的 __init__ "
"方法中僅包含關鍵字的欄位。有多種方法可以指定僅限關鍵字的欄位。"

#: ../../whatsnew/3.10.rst:1003
#, fuzzy
msgid "You can say that every field is keyword-only:"
msgstr "你可以說每個欄位都是關鍵字："

#: ../../whatsnew/3.10.rst:1014
#, fuzzy
msgid ""
"Both ``name`` and ``birthday`` are keyword-only parameters to the generated "
"__init__ method."
msgstr "``name`` 和 ``birthday`` 都是生成的 __init__ 方法的關鍵字參數。"

#: ../../whatsnew/3.10.rst:1017
#, fuzzy
msgid "You can specify keyword-only on a per-field basis:"
msgstr "您可以在每個欄位的基礎上指定僅關鍵字："

#: ../../whatsnew/3.10.rst:1028
#, fuzzy
msgid ""
"Here only ``birthday`` is keyword-only.  If you set ``kw_only`` on "
"individual fields, be aware that there are rules about re-ordering fields "
"due to keyword-only fields needing to follow non-keyword-only fields.  See "
"the full dataclasses documentation for details."
msgstr ""
"這裡只有 ``birthday`` 是關鍵字。如果您在單個欄位上設定“kw_only”，請注意由於僅"
"關鍵字欄位需要跟在非僅關鍵字欄位之後，因此存在關於重新排序欄位的規則。有關詳"
"細資訊，請參閱完整的資料類文檔。"

#: ../../whatsnew/3.10.rst:1033
#, fuzzy
msgid ""
"You can also specify that all fields following a KW_ONLY marker are keyword-"
"only.  This will probably be the most common usage:"
msgstr "您還可以指定 KW_ONLY 標記後面的所有欄位都是關鍵字。這可能是最常見的用法："

#: ../../whatsnew/3.10.rst:1048
#, fuzzy
msgid ""
"Here, ``z`` and ``t`` are keyword-only parameters, while ``x`` and ``y`` are "
"not. (Contributed by Eric V. Smith in :issue:`43532`.)"
msgstr ""
"在這裡，``z`` 和 ``t`` 是僅關鍵字參數，而 ``x`` 和 ``y`` 不是。 （由 Eric V. "
"Smith 在 :issue:`43532` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1055
msgid "distutils"
msgstr "distutils"

#: ../../whatsnew/3.10.rst:1057
#, fuzzy
msgid ""
"The entire ``distutils`` package is deprecated, to be removed in Python "
"3.12. Its functionality for specifying package builds has already been "
"completely replaced by third-party packages ``setuptools`` and "
"``packaging``, and most other commonly used APIs are available elsewhere in "
"the standard library (such as :mod:`platform`, :mod:`shutil`, :mod:"
"`subprocess` or :mod:`sysconfig`). There are no plans to migrate any other "
"functionality from ``distutils``, and applications that are using other "
"functions should plan to make private copies of the code. Refer to :pep:"
"`632` for discussion."
msgstr ""
"整個 ``distutils`` 包已棄用，將在 Python 3.12 中刪除。"
"它指定包構建的功能已經完全被第三方包 ``setuptools`` 和 ``packaging`` 取代，"
"大多數其他常用的 API 在標準庫的其他地方可用（例如 :mod:`platform` , "
":mod:`shutil`, :mod:`subprocess` 或 :mod:`sysconfig`)。沒有計劃從 "
"``distutils`` "
"遷移任何其他功能，使用其他功能的應用程式應該計劃製作程式碼的私有副本。參考 "
":pep:`632` 進行討論。"

#: ../../whatsnew/3.10.rst:1067
#, fuzzy
msgid ""
"The ``bdist_wininst`` command deprecated in Python 3.8 has been removed. The "
"``bdist_wheel`` command is now recommended to distribute binary packages on "
"Windows. (Contributed by Victor Stinner in :issue:`42802`.)"
msgstr ""
"Python 3.8 中棄用的``bdist_wininst`` 命令已被刪除。現在建議使用 "
"``bdist_wheel`` 命令在 Windows 上分發二進制包。 （由 Victor Stinner 在 "
":issue:`42802` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1073
msgid "doctest"
msgstr "doctest"

#: ../../whatsnew/3.10.rst:1075 ../../whatsnew/3.10.rst:1210
#: ../../whatsnew/3.10.rst:1237 ../../whatsnew/3.10.rst:1336
#, fuzzy
msgid ""
"When a module does not define ``__loader__``, fall back to ``__spec__."
"loader``. (Contributed by Brett Cannon in :issue:`42133`.)"
msgstr ""
"當模組未定義 ``__loader__`` 時，回退到 ``__spec__.loader``。 （由 Brett "
"Cannon 在 :issue:`42133` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1079
msgid "encodings"
msgstr "encodings"

#: ../../whatsnew/3.10.rst:1081
#, fuzzy
msgid ""
":func:`encodings.normalize_encoding` now ignores non-ASCII characters. "
"(Contributed by Hai Shi in :issue:`39337`.)"
msgstr ""
":func:`encodings.normalize_encoding` 現在忽略非 ASCII 字元。 （由 Hai Shi 在 "
":issue:`39337` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1085
#, fuzzy
msgid "enum"
msgstr "枚舉"

#: ../../whatsnew/3.10.rst:1087
#, fuzzy
msgid ""
":class:`Enum` :func:`__repr__` now returns ``enum_name.member_name`` and :"
"func:`__str__` now returns ``member_name``.  Stdlib enums available as "
"module constants have a :func:`repr` of ``module_name.member_name``. "
"(Contributed by Ethan Furman in :issue:`40066`.)"
msgstr ""
":class:`Enum` :func:`__repr__` 現在回傳 ``enum_name.member_name`` 和 "
":func:`__str__` 現在回傳 ``member_name``。可用作模組常數的 Stdlib 枚舉具有 "
":func:`repr` 的 ``module_name.member_name``。 （由 Ethan Furman 在 "
":issue:`40066` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1092
#, fuzzy
msgid ""
"Add :class:`enum.StrEnum` for enums where all members are strings. "
"(Contributed by Ethan Furman in :issue:`41816`.)"
msgstr ""
"為所有成員都是字串的枚舉新增 :class:`enum.StrEnum`。 （由 Ethan Furman 在 "
":issue:`41816` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1096
msgid "fileinput"
msgstr "fileinput"

#: ../../whatsnew/3.10.rst:1098
#, fuzzy
msgid ""
"Add *encoding* and *errors* parameters in :func:`fileinput.input` and :class:"
"`fileinput.FileInput`. (Contributed by Inada Naoki in :issue:`43712`.)"
msgstr ""
"在 :func:`fileinput.input` 和 :class:`fileinput.FileInput` 中新增 *encoding* "
"和 *errors* 參數。 （由 Inada Naoki 在 :issue:`43712` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1102
#, fuzzy
msgid ""
":func:`fileinput.hook_compressed` now returns :class:`TextIOWrapper` object "
"when *mode* is \"r\" and file is compressed, like uncompressed files. "
"(Contributed by Inada Naoki in :issue:`5758`.)"
msgstr ""
":func:`fileinput.hook_compressed` 現在回傳 :class:`TextIOWrapper` 物件，當 "
"*mode* 為 ``r``並且文件被壓縮時，就像未壓縮的文件一樣。 （由 Inada Naoki 在 "
":issue:`5758` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1107
msgid "faulthandler"
msgstr "faulthandler"

#: ../../whatsnew/3.10.rst:1109
#, fuzzy
msgid ""
"The :mod:`faulthandler` module now detects if a fatal error occurs during a "
"garbage collector collection. (Contributed by Victor Stinner in :issue:"
"`44466`.)"
msgstr ""
":mod:`faulthandler` 模組現在檢測在垃圾收集器收集期間是否發生致命錯誤。 （由 "
"Victor Stinner 在 :issue:`44466` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1114
msgid "gc"
msgstr "gc"

#: ../../whatsnew/3.10.rst:1116
#, fuzzy
msgid ""
"Add audit hooks for :func:`gc.get_objects`, :func:`gc.get_referrers` and :"
"func:`gc.get_referents`. (Contributed by Pablo Galindo in :issue:`43439`.)"
msgstr ""
"為 :func:`gc.get_objects`、:func:`gc.get_referrers` 和 :func:`gc."
"get_referents` 新增審計掛鉤。 （由 Pablo Galindo 在 :issue:`43439` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1120
msgid "glob"
msgstr "glob"

#: ../../whatsnew/3.10.rst:1122
#, fuzzy
msgid ""
"Add the *root_dir* and *dir_fd* parameters in :func:`~glob.glob` and :func:"
"`~glob.iglob` which allow to specify the root directory for searching. "
"(Contributed by Serhiy Storchaka in :issue:`38144`.)"
msgstr ""
"在 :func:`~glob.glob` 和 :func:`~glob.iglob` 新增 *root_dir* 和 *dir_fd* "
"參數，允許指定搜索的根目錄。 （由 Serhiy Storchaka 在 :issue:`38144` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:1127
msgid "hashlib"
msgstr "hashlib"

#: ../../whatsnew/3.10.rst:1129
#, fuzzy
msgid ""
"The hashlib module requires OpenSSL 1.1.1 or newer. (Contributed by "
"Christian Heimes in :pep:`644` and :issue:`43669`.)"
msgstr ""
"hashlib 模組需要 OpenSSL 1.1.1 或更新版本。 （由 Christian Heimes 在 "
":pep:`644` 和 :issue:`43669` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1132
#, fuzzy
msgid ""
"The hashlib module has preliminary support for OpenSSL 3.0.0. (Contributed "
"by Christian Heimes in :issue:`38820` and other issues.)"
msgstr ""
"hashlib 模組初步支援 OpenSSL 3.0.0。 （由 Christian Heimes 在 :issue:`38820` "
"和其他問題中貢獻。）"

#: ../../whatsnew/3.10.rst:1135
#, fuzzy
msgid ""
"The pure-Python fallback of :func:`~hashlib.pbkdf2_hmac` is deprecated. In "
"the future PBKDF2-HMAC will only be available when Python has been built "
"with OpenSSL support. (Contributed by Christian Heimes in :issue:`43880`.)"
msgstr ""
":func:`~hashlib.pbkdf2_hmac` 的純 Python 後備已棄用。將來 PBKDF2-HMAC "
"將僅在使用 OpenSSL 支援構建 Python 時可用。 （由 Christian Heimes 在 "
":issue:`43880` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1141
msgid "hmac"
msgstr "hmac"

#: ../../whatsnew/3.10.rst:1143
#, fuzzy
msgid ""
"The hmac module now uses OpenSSL's HMAC implementation internally. "
"(Contributed by Christian Heimes in :issue:`40645`.)"
msgstr ""
"hmac 模組現在在內部使用 OpenSSL 的 HMAC 實作。 （由 Christian Heimes 在 "
":issue:`40645` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1147
#, fuzzy
msgid "IDLE and idlelib"
msgstr "空閒和空閒庫"

#: ../../whatsnew/3.10.rst:1149
#, fuzzy
msgid ""
"Make IDLE invoke :func:`sys.excepthook` (when started without '-n'). User "
"hooks were previously ignored.  (Contributed by Ken Hilton in :issue:"
"`43008`.)"
msgstr ""
"使 IDLE 呼叫 :func:`sys."
"excepthook`（在沒有 ``-n``的情況下啟動）。以前忽略了使用者掛鉤。 （由 Ken "
"Hilton 在 :issue:`43008` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1153
#, fuzzy
msgid ""
"Rearrange the settings dialog.  Split the General tab into Windows and Shell/"
"Ed tabs.  Move help sources, which extend the Help menu, to the Extensions "
"tab.  Make space for new options and shorten the dialog. The latter makes "
"the dialog better fit small screens.  (Contributed by Terry Jan Reedy in :"
"issue:`40468`.)  Move the indent space setting from the Font tab to the new "
"Windows tab.  (Contributed by Mark Roseman and Terry Jan Reedy in :issue:"
"`33962`.)"
msgstr ""
"重新排列設定對話框。將常規選項卡拆分為 Windows 和 Shell/Ed 選項卡。將擴充“幫"
"助”菜單的幫助源移動到“擴充”選項卡。為新選項騰出空間並縮短對話框。後者使對話框"
"更適合小屏幕。 （由 Terry Jan Reedy 在 :issue:`40468` 中貢獻。）"
"將縮進空間設定從字體選項卡移動到新的 Windows 選項卡。 （由 Mark Roseman 和 "
"Terry Jan Reedy 在 :issue:`33962` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1161
#, fuzzy
msgid "The changes above were backported to a 3.9 maintenance release."
msgstr "上述更改已反向移植到 3.9 維護版本。"

#: ../../whatsnew/3.10.rst:1163
#, fuzzy
msgid ""
"Add a Shell sidebar.  Move the primary prompt ('>>>') to the sidebar. Add "
"secondary prompts ('...') to the sidebar.  Left click and optional drag "
"selects one or more lines of text, as with the editor line number sidebar.  "
"Right click after selecting text lines displays a context menu with 'copy "
"with prompts'.  This zips together prompts from the sidebar with lines from "
"the selected text.  This option also appears on the context menu for the "
"text.  (Contributed by Tal Einat in :issue:`37903`.)"
msgstr ""
"新增 Shell 側邊欄。將主要提示 ('>>>') 移至側邊欄。將輔助提示（'...'）新增到側"
"邊欄。左鍵單擊和可選拖動選擇一行或多行文本，與編輯器行號側邊欄一樣。選擇文本"
"行後單擊鼠標右鍵會顯示帶有“帶提示複製”的上下文菜單。這會將來自側邊欄的提示與"
"來自所選文本的行壓縮在一起。此選項也出現在文本的上下文菜單中。 （由 Tal "
"Einat 在 :issue:`37903` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1172
#, fuzzy
msgid ""
"Use spaces instead of tabs to indent interactive code.  This makes "
"interactive code entries 'look right'.  Making this feasible was a major "
"motivation for adding the shell sidebar.  (Contributed by Terry Jan Reedy "
"in :issue:`37892`.)"
msgstr ""
"使用空格而不是製表符來縮進交互式程式碼。這使得交互式程式碼條目“看起來正確”。"
"使這成為可能是新增 shell 側邊欄的主要動機。 （由 Terry Jan Reedy 在 "
":issue:`37892` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1177
#, fuzzy
msgid ""
"Highlight the new :ref:`soft keywords <soft-keywords>` :keyword:`match`, :"
"keyword:`case <match>`, and :keyword:`_ <wildcard-patterns>` in pattern-"
"matching statements. However, this highlighting is not perfect and will be "
"incorrect in some rare cases, including some ``_``-s in ``case`` patterns.  "
"(Contributed by Tal Einat in :issue:`44010`.)"
msgstr ""
"在模式匹配語句中突出顯示新的 :ref:`soft keywords <soft-keywords>` "
":keyword:`match`、:keyword:`case <match>` 和 :keyword:`_ <wildcard-"
"patterns>`。然而，這種高亮顯示並不完美，在極少數情況下會不正確，包括 ``case``"
" 模式中的一些 ``_``-s。 （由 Tal Einat 在 :issue:`44010` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1183
#, fuzzy
msgid "New in 3.10 maintenance releases."
msgstr "3.10 維護版本中的新功能。"

#: ../../whatsnew/3.10.rst:1185
#, fuzzy
msgid ""
"Apply syntax highlighting to ``.pyi`` files. (Contributed by Alex Waygood "
"and Terry Jan Reedy in :issue:`45447`.)"
msgstr ""
"將語法突出顯示應用於 .pyi 文件。 （由 Alex Waygood 和 Terry Jan Reedy 在 "
":issue:`45447` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1188
#, fuzzy
msgid ""
"Include prompts when saving Shell with inputs and outputs. (Contributed by "
"Terry Jan Reedy in :gh:`95191`.)"
msgstr "在使用輸入和輸出保存 Shell 時包括提示。 （由 Terry Jan Reedy 在 :gh:`95191` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:1192
msgid "importlib.metadata"
msgstr "importlib.metadata"

#: ../../whatsnew/3.10.rst:1194
#, fuzzy
msgid ""
"Feature parity with ``importlib_metadata`` 4.6 (`history <https://importlib-"
"metadata.readthedocs.io/en/latest/history.html>`_)."
msgstr ""
"與 ``importlib_metadata`` 4.6 (`history <https://importlib-metadata."
"readthedocs.io/en/latest/history.html>`_) 的功能對等。"

#: ../../whatsnew/3.10.rst:1197
#, fuzzy
msgid ""
":ref:`importlib.metadata entry points <entry-points>` now provide a nicer "
"experience for selecting entry points by group and name through a new :class:"
"`importlib.metadata.EntryPoints` class. See the Compatibility Note in the "
"docs for more info on the deprecation and usage."
msgstr ""
":ref:`importlib.metadata 入口點 <entry-points>` 現在通過新的 "
":class:`importlib.metadata.EntryPoints` 類提供了按組和名稱選擇入口點的更好體"
"驗。有關棄用和使用的更多資訊，請參閱文檔中的相容性說明。"

#: ../../whatsnew/3.10.rst:1203
#, fuzzy
msgid ""
"Added :func:`importlib.metadata.packages_distributions` for resolving top-"
"level Python modules and packages to their :class:`importlib.metadata."
"Distribution`."
msgstr ""
"新增 :func:`importlib.metadata.packages_distributions` 用於將頂級 Python "
"模組和包解析到它們的 :class:`importlib.metadata.Distribution`。"

#: ../../whatsnew/3.10.rst:1208
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.10.rst:1213
#, fuzzy
msgid ""
"Add :func:`inspect.get_annotations`, which safely computes the annotations "
"defined on an object. It works around the quirks of accessing the "
"annotations on various types of objects, and makes very few assumptions "
"about the object it examines. :func:`inspect.get_annotations` can also "
"correctly un-stringize stringized annotations.  :func:`inspect."
"get_annotations` is now considered best practice for accessing the "
"annotations dict defined on any Python object; for more information on best "
"practices for working with annotations, please see :ref:`annotations-howto`. "
"Relatedly, :func:`inspect.signature`, :func:`inspect.Signature."
"from_callable`, and :func:`inspect.Signature.from_function` now call :func:"
"`inspect.get_annotations` to retrieve annotations. This means :func:`inspect."
"signature` and :func:`inspect.Signature.from_callable` can also now un-"
"stringize stringized annotations. (Contributed by Larry Hastings in :issue:"
"`43817`.)"
msgstr ""
"新增 :func:`inspect.get_annotations`，它可以安全地計算在對像上定義的註釋。它"
"解決了訪問各種型別對像上的註釋的怪癖，並且對它檢查的對像做出了很少的假設。 "
":func:`inspect.get_annotations` 也可以正確地反字串化註釋。 :func:`inspect."
"get_annotations` 現在被認為是訪問定義在任何 Python "
"對像上的註解字典的最佳實踐；有關使用註釋的最佳實踐的更多資訊，請參閱：ref"
"：`annotations-howto`。相關地，:func:`inspect.signature`、:func:`inspect."
"Signature.from_callable` 和 :func:`inspect.Signature.from_function` "
"現在呼叫 :func:`inspect.get_annotations` 來檢索註釋。這意味著 :func:`inspect."
"signature` 和 :func:`inspect.Signature.from_callable` "
"現在也可以取消字串化字串化註釋。 （由 Larry Hastings 在 :issue:`43817` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:1229
#, fuzzy
msgid "itertools"
msgstr "疊代工具"

#: ../../whatsnew/3.10.rst:1231
#, fuzzy
msgid ""
"Add :func:`itertools.pairwise()`. (Contributed by Raymond Hettinger in :"
"issue:`38200`.)"
msgstr ""
"新增 :func:`itertools.pairwise()`。 （由 Raymond Hettinger 在 :issue:`38200` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:1235
msgid "linecache"
msgstr "linecache"

#: ../../whatsnew/3.10.rst:1241
msgid "os"
msgstr "os"

#: ../../whatsnew/3.10.rst:1243
#, fuzzy
msgid ""
"Add :func:`os.cpu_count()` support for VxWorks RTOS. (Contributed by Peixing "
"Xin in :issue:`41440`.)"
msgstr ""
"新增 :func:`os.cpu_count()` 對 VxWorks RTOS 的支援。 （由 Peixing Xin 在 "
":issue:`41440` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1246
#, fuzzy
msgid ""
"Add a new function :func:`os.eventfd` and related helpers to wrap the "
"``eventfd2`` syscall on Linux. (Contributed by Christian Heimes in :issue:"
"`41001`.)"
msgstr ""
"新增一個新函式 :func:`os.eventfd` 和相關的幫助程式來包裝 Linux 上的 "
"``eventfd2`` 系統呼叫。 （由 Christian Heimes 在 :issue:`41001` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1250
#, fuzzy
msgid ""
"Add :func:`os.splice()` that allows to move data between two file "
"descriptors without copying between kernel address space and user address "
"space, where one of the file descriptors must refer to a pipe. (Contributed "
"by Pablo Galindo in :issue:`41625`.)"
msgstr ""
"新增 os.splice() 允許在兩個文件描述器之間移動資料而無需在內核地址空間和使用者"
"地址空間之間複製，其中一個文件描述器必須引用管道。 （由 Pablo Galindo 在 "
":issue:`41625` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1255
#, fuzzy
msgid ""
"Add :data:`~os.O_EVTONLY`, :data:`~os.O_FSYNC`, :data:`~os.O_SYMLINK` and :"
"data:`~os.O_NOFOLLOW_ANY` for macOS. (Contributed by Dong-hee Na in :issue:"
"`43106`.)"
msgstr ""
"為 macOS 新增 :data:`~os.O_EVTONLY`、:data:`~os.O_FSYNC`、:data:`~os."
"O_SYMLINK` 和 :data:`~os.O_NOFOLLOW_ANY`。 （由 Dong-hee Na 在 :issue:`43106`"
" 中貢獻。）"

#: ../../whatsnew/3.10.rst:1260
msgid "os.path"
msgstr "os.path"

#: ../../whatsnew/3.10.rst:1262
#, fuzzy
msgid ""
":func:`os.path.realpath` now accepts a *strict* keyword-only argument. When "
"set to ``True``, :exc:`OSError` is raised if a path doesn't exist or a "
"symlink loop is encountered. (Contributed by Barney Gale in :issue:`43757`.)"
msgstr ""
":func:`os.path.realpath` 現在接受 *strict* 僅關鍵字參數。當設定為 ``True`` "
"時，如果路徑不存在或遇到符號鏈接循環，則會引發 :exc:`OSError`。 （由 Barney "
"Gale 在 :issue:`43757` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1268
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.10.rst:1270
#, fuzzy
msgid ""
"Add slice support to :attr:`PurePath.parents <pathlib.PurePath.parents>`. "
"(Contributed by Joshua Cannon in :issue:`35498`.)"
msgstr ""
"將切片支援新增到 :attr:`PurePath.parents <pathlib.PurePath.parents>`。 （由 "
"Joshua Cannon 在 :issue:`35498` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1273
#, fuzzy
msgid ""
"Add negative indexing support to :attr:`PurePath.parents <pathlib.PurePath."
"parents>`. (Contributed by Yaroslav Pankovych in :issue:`21041`.)"
msgstr ""
"向 :attr:`PurePath.parents <pathlib.PurePath.parents>` 新增負索引支援。 （由 "
"Yaroslav Pankovych 在 :issue:`21041` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1277
#, fuzzy
msgid ""
"Add :meth:`Path.hardlink_to <pathlib.Path.hardlink_to>` method that "
"supersedes :meth:`~pathlib.Path.link_to`. The new method has the same "
"argument order as :meth:`~pathlib.Path.symlink_to`. (Contributed by Barney "
"Gale in :issue:`39950`.)"
msgstr ""
"新增 :meth:`Path.hardlink_to <pathlib.Path.hardlink_to>` "
"方法取代 :meth:`~pathlib.Path.link_to`。新方法的參數順序與 :meth:`~pathlib."
"Path.symlink_to` 相同。 （由 Barney Gale 在 :issue:`39950` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1282
#, fuzzy
msgid ""
":meth:`pathlib.Path.stat` and :meth:`~pathlib.Path.chmod` now accept a "
"*follow_symlinks* keyword-only argument for consistency with corresponding "
"functions in the :mod:`os` module. (Contributed by Barney Gale in :issue:"
"`39906`.)"
msgstr ""
":meth:`pathlib.Path.stat` 和 :meth:`~pathlib.Path.chmod` 現在接受 "
"*follow_symlinks* 關鍵字參數，以與 :mod:`os` 模組中的相應函式保持一致。 （由 "
"Barney Gale 在 :issue:`39906` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1288
msgid "platform"
msgstr "platform"

#: ../../whatsnew/3.10.rst:1290
#, fuzzy
msgid ""
"Add :func:`platform.freedesktop_os_release()` to retrieve operation system "
"identification from `freedesktop.org os-release <https://www.freedesktop.org/"
"software/systemd/man/os-release.html>`_ standard file. (Contributed by "
"Christian Heimes in :issue:`28468`.)"
msgstr ""
"新增 :func:`platform.freedesktop_os_release()` 以從 `freedesktop.org os-"
"release <https://www.freedesktop.org/software/systemd/man/os-release.html>`_ "
"標準檢索操作系統標識文件。 （由 Christian Heimes 在 :issue:`28468` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1296
msgid "pprint"
msgstr "pprint"

#: ../../whatsnew/3.10.rst:1298
#, fuzzy
msgid ""
":func:`pprint.pprint` now accepts a new ``underscore_numbers`` keyword "
"argument. (Contributed by sblondon in :issue:`42914`.)"
msgstr ""
":func:`pprint.pprint` 現在接受一個新的 ``underscore_numbers`` 關鍵字參數。 （"
"由 sblondon 在 :issue:`42914` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1301
#, fuzzy
msgid ""
":mod:`pprint` can now pretty-print :class:`dataclasses.dataclass` instances. "
"(Contributed by Lewis Gaul in :issue:`43080`.)"
msgstr ""
":mod:`pprint` 現在可以漂亮地印出 :class:`dataclasses.dataclass` 實例。 （由 "
"Lewis Gaul 在 :issue:`43080` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1305
msgid "py_compile"
msgstr "py_compile"

#: ../../whatsnew/3.10.rst:1307
#, fuzzy
msgid ""
"Add ``--quiet`` option to command-line interface of :mod:`py_compile`. "
"(Contributed by Gregory Schevchenko in :issue:`38731`.)"
msgstr ""
"將 ``--quiet`` 選項新增到 :mod:`py_compile` 的命令列界面。 （由 Gregory "
"Schevchenko 在 :issue:`38731` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1311
msgid "pyclbr"
msgstr "pyclbr"

#: ../../whatsnew/3.10.rst:1313
#, fuzzy
msgid ""
"Add an ``end_lineno`` attribute to the ``Function`` and ``Class`` objects in "
"the tree returned by :func:`pyclbr.readline` and :func:`pyclbr."
"readline_ex`.  It matches the existing (start) ``lineno``. (Contributed by "
"Aviral Srivastava in :issue:`38307`.)"
msgstr ""
"將 ``end_lineno`` 屬性新增到由 :func:`pyclbr.readline` 和 :func:`pyclbr."
"readline_ex` 回傳的樹中的 ``Function`` 和 ``Class`` "
"物件。它匹配現有的（開始）``lineno``。 （由 Aviral Srivastava 在 "
":issue:`38307` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1319
msgid "shelve"
msgstr "shelve"

#: ../../whatsnew/3.10.rst:1321
#, fuzzy
msgid ""
"The :mod:`shelve` module now uses :data:`pickle.DEFAULT_PROTOCOL` by default "
"instead of :mod:`pickle` protocol ``3`` when creating shelves. (Contributed "
"by Zackery Spytz in :issue:`34204`.)"
msgstr ""
":mod:`shelve` 模組現在預設使用 :data:`pickle.DEFAULT_PROTOCOL` 而不是 "
":mod:`pickle` 協定 ``3`` 在建立貨架時。 （由 Zackery Spytz 在 :issue:`34204` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:1326
msgid "statistics"
msgstr "statistics"

#: ../../whatsnew/3.10.rst:1328
#, fuzzy
msgid ""
"Add :func:`~statistics.covariance`, Pearson's :func:`~statistics."
"correlation`, and simple :func:`~statistics.linear_regression` functions. "
"(Contributed by Tymoteusz Wołodźko in :issue:`38490`.)"
msgstr ""
"新增 :func:`~statistics.covariance`、Pearson 的 :func:`~statistics."
"correlation` 和簡單的 :func:`~statistics.linear_regression` 函式。 （由 "
"Tymoteusz Wołodźko 在 :issue:`38490` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1334
msgid "site"
msgstr "site"

#: ../../whatsnew/3.10.rst:1340
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.10.rst:1342
#, fuzzy
msgid ""
"The exception :exc:`socket.timeout` is now an alias of :exc:`TimeoutError`. "
"(Contributed by Christian Heimes in :issue:`42413`.)"
msgstr ""
"例外 :exc:`socket.timeout` 現在是 :exc:`TimeoutError` 的別名。 （由 "
"Christian Heimes 在 :issue:`42413` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1345
#, fuzzy
msgid ""
"Add option to create MPTCP sockets with ``IPPROTO_MPTCP`` (Contributed by "
"Rui Cunha in :issue:`43571`.)"
msgstr ""
"新增選項以使用 ``IPPROTO_MPTCP`` 建立 MPTCP  socket （由 Rui Cunha 在 "
":issue:`43571` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1348
#, fuzzy
msgid ""
"Add ``IP_RECVTOS`` option to receive the type of service (ToS) or DSCP/ECN "
"fields (Contributed by Georg Sauthoff in :issue:`44077`.)"
msgstr ""
"新增 ``IP_RECVTOS`` 選項以接收服務型別 (ToS) 或 DSCP/ECN 欄位（由 Georg "
"Sauthoff 在 :issue:`44077` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1352
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.10.rst:1354
#, fuzzy
msgid ""
"The ssl module requires OpenSSL 1.1.1 or newer. (Contributed by Christian "
"Heimes in :pep:`644` and :issue:`43669`.)"
msgstr ""
"ssl 模組需要 OpenSSL 1.1.1 或更新版本。 （由 Christian Heimes 在 :pep:`644` "
"和 :issue:`43669` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1357
#, fuzzy
msgid ""
"The ssl module has preliminary support for OpenSSL 3.0.0 and new option :"
"data:`~ssl.OP_IGNORE_UNEXPECTED_EOF`. (Contributed by Christian Heimes in :"
"issue:`38820`, :issue:`43794`, :issue:`43788`, :issue:`43791`, :issue:"
"`43799`, :issue:`43920`, :issue:`43789`, and :issue:`43811`.)"
msgstr ""
"ssl 模組初步支援 OpenSSL 3.0.0 和新選項 :data:`~ssl."
"OP_IGNORE_UNEXPECTED_EOF`。 （由 Christian Heimes 在 :issue:`38820`, "
":issue:`43794`, :issue:`43788`, :issue:`43791`, :issue:`43799`, "
":issue:`43920`, :issue 中貢獻：`43789` 和 :issue:`43811`。）"

#: ../../whatsnew/3.10.rst:1363
#, fuzzy
msgid ""
"Deprecated function and use of deprecated constants now result in a :exc:"
"`DeprecationWarning`. :attr:`ssl.SSLContext.options` has :data:`~ssl."
"OP_NO_SSLv2` and :data:`~ssl.OP_NO_SSLv3` set by default and therefore "
"cannot warn about setting the flag again. The :ref:`deprecation section "
"<whatsnew310-deprecated>` has a list of deprecated features. (Contributed by "
"Christian Heimes in :issue:`43880`.)"
msgstr ""
"棄用的函式和使用棄用的常數現在會導致 DeprecationWarning。 :attr:`ssl."
"SSLContext.options` 預設設定了 :data:`~ssl.OP_NO_SSLv2` 和 :data:`~ssl."
"OP_NO_SSLv3`，因此無法警告再次設定旗標。 :ref:`棄用部分 "
"<whatsnew310-deprecated>` 有一個已棄用功能的列表。 （由 Christian Heimes 在 "
":issue:`43880` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1371
#, fuzzy
msgid ""
"The ssl module now has more secure default settings. Ciphers without forward "
"secrecy or SHA-1 MAC are disabled by default. Security level 2 prohibits "
"weak RSA, DH, and ECC keys with less than 112 bits of security. :class:`~ssl."
"SSLContext` defaults to minimum protocol version TLS 1.2. Settings are based "
"on Hynek Schlawack's research. (Contributed by Christian Heimes in :issue:"
"`43998`.)"
msgstr ""
"ssl 模組現在有更安全的預設設定。預設情況下禁用沒有前向保密或 SHA-1 MAC "
"的密碼。安全級別 2 禁止安全性小於 112 位的弱 RSA、DH 和 ECC 密鑰。 "
":class:`~ssl.SSLContext` 預設為最低協定版本 TLS 1.2。設定基於 Hynek "
"Schlawack 的研究。 （由 Christian Heimes 在 :issue:`43998` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1378
#, fuzzy
msgid ""
"The deprecated protocols SSL 3.0, TLS 1.0, and TLS 1.1 are no longer "
"officially supported. Python does not block them actively. However OpenSSL "
"build options, distro configurations, vendor patches, and cipher suites may "
"prevent a successful handshake."
msgstr ""
"官方不再支援已棄用的協定 SSL 3.0、TLS 1.0 和 TLS 1.1。 Python "
"不會主動阻止它們。然而，OpenSSL "
"構建選項、發行版配置、供應商補丁和密碼套件可能會阻止成功的握手。"

#: ../../whatsnew/3.10.rst:1383
#, fuzzy
msgid ""
"Add a *timeout* parameter to the :func:`ssl.get_server_certificate` "
"function. (Contributed by Zackery Spytz in :issue:`31870`.)"
msgstr ""
"向 :func:`ssl.get_server_certificate` 函式新增 *timeout* 參數。 （由 Zackery "
"Spytz 在 :issue:`31870` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1386
#, fuzzy
msgid ""
"The ssl module uses heap-types and multi-phase initialization. (Contributed "
"by Christian Heimes in :issue:`42333`.)"
msgstr "ssl 模組使用堆型別和多階段初始化。 （由 Christian Heimes 在 :issue:`42333` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:1389
#, fuzzy
msgid ""
"A new verify flag :data:`~ssl.VERIFY_X509_PARTIAL_CHAIN` has been added. "
"(Contributed by l0x in :issue:`40849`.)"
msgstr ""
"新增了一個新的驗證旗標 :data:`~ssl.VERIFY_X509_PARTIAL_CHAIN`。 （由 l0x 在 "
":issue:`40849` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1393
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.10.rst:1395
#, fuzzy
msgid ""
"Add audit events for :func:`~sqlite3.connect/handle`, :meth:`~sqlite3."
"Connection.enable_load_extension`, and :meth:`~sqlite3.Connection."
"load_extension`. (Contributed by Erlend E. Aasland in :issue:`43762`.)"
msgstr ""
"為 :func:`~sqlite3.connect/handle`、:meth:`~sqlite3.Connection."
"enable_load_extension` 和 :meth:`~sqlite3.Connection.load_extension` "
"新增審計事件。 （由 Erlend E. Aasland 在 :issue:`43762` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1401
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.10.rst:1403
#, fuzzy
msgid ""
"Add :data:`sys.orig_argv` attribute: the list of the original command line "
"arguments passed to the Python executable. (Contributed by Victor Stinner "
"in :issue:`23427`.)"
msgstr ""
"新增 :data:`sys.orig_argv` 屬性：傳遞給 Python "
"可執行文件的原始命令列參數列表。 （由 Victor Stinner 在 :issue:`23427` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:1407
#, fuzzy
msgid ""
"Add :data:`sys.stdlib_module_names`, containing the list of the standard "
"library module names. (Contributed by Victor Stinner in :issue:`42955`.)"
msgstr ""
"新增 :data:`sys.stdlib_module_names`，其中包含標準庫模組名稱的列表。 （由 "
"Victor Stinner 在 :issue:`42955` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1412
msgid "_thread"
msgstr "_thread"

#: ../../whatsnew/3.10.rst:1414
#, fuzzy
msgid ""
":func:`_thread.interrupt_main` now takes an optional signal number to "
"simulate (the default is still :data:`signal.SIGINT`). (Contributed by "
"Antoine Pitrou in :issue:`43356`.)"
msgstr ""
":func:`_thread.interrupt_main` 現在需要一個可選的信號編號來模擬（"
"預設值仍然是 :data:`signal.SIGINT`）。 （由 Antoine Pitrou 在 :issue:`43356` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:1419
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.10.rst:1421
#, fuzzy
msgid ""
"Add :func:`threading.gettrace` and :func:`threading.getprofile` to retrieve "
"the functions set by :func:`threading.settrace` and :func:`threading."
"setprofile` respectively. (Contributed by Mario Corchero in :issue:`42251`.)"
msgstr ""
"新增 :func:`threading.gettrace` 和 :func:`threading.getprofile` 分別檢索由 "
":func:`threading.settrace` 和 :func:`threading.setprofile` 設定的函式。 （由 "
"Mario Corchero 在 :issue:`42251` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1426
#, fuzzy
msgid ""
"Add :data:`threading.__excepthook__` to allow retrieving the original value "
"of :func:`threading.excepthook` in case it is set to a broken or a different "
"value. (Contributed by Mario Corchero in :issue:`42308`.)"
msgstr ""
"新增 :data:`threading.__excepthook__` 以允許檢索 :func:`threading.excepthook`"
" 的原始值，以防它被設定為損壞或不同的值。 （由 Mario Corchero 在 "
":issue:`42308` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1432
msgid "traceback"
msgstr "traceback"

#: ../../whatsnew/3.10.rst:1434
#, fuzzy
msgid ""
"The :func:`~traceback.format_exception`, :func:`~traceback."
"format_exception_only`, and :func:`~traceback.print_exception` functions can "
"now take an exception object as a positional-only argument. (Contributed by "
"Zackery Spytz and Matthias Bussonnier in :issue:`26389`.)"
msgstr ""
":func:`~traceback.format_exception`、:func:`~traceback.format_exception_only`"
" 和 :func:`~traceback.print_exception` 函式現在可以將例外對像作為僅位置參數。"
" （由 Zackery Spytz 和 Matthias Bussonnier 在 :issue:`26389` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1441
msgid "types"
msgstr "types"

#: ../../whatsnew/3.10.rst:1443
#, fuzzy
msgid ""
"Reintroduce the :data:`types.EllipsisType`, :data:`types.NoneType` and :data:"
"`types.NotImplementedType` classes, providing a new set of types readily "
"interpretable by type checkers. (Contributed by Bas van Beek in :issue:"
"`41810`.)"
msgstr ""
"重新引入 types.EllipsisType、types.NoneType 和 types.NotImplementedType "
"類，提供一組易於由型別檢查器解釋的新型別。 （由 Bas van Beek 在 "
":issue:`41810` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1449
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.10.rst:1451
#, fuzzy
msgid "For major changes, see :ref:`new-feat-related-type-hints`."
msgstr "有關主要更改，請參閱 :ref:`new-feat-related-type-hints`。"

#: ../../whatsnew/3.10.rst:1453
#, fuzzy
msgid ""
"The behavior of :class:`typing.Literal` was changed to conform with :pep:"
"`586` and to match the behavior of static type checkers specified in the PEP."
msgstr ":class:`typing.Literal` 的行為已更改為符合 :pep:`586` 並匹配 PEP "
"中指定的靜態型別檢查器的行為。"

#: ../../whatsnew/3.10.rst:1456
#, fuzzy
msgid "``Literal`` now de-duplicates parameters."
msgstr "``Literal`` 現在刪除重複參數。"

#: ../../whatsnew/3.10.rst:1457
#, fuzzy
msgid ""
"Equality comparisons between ``Literal`` objects are now order independent."
msgstr "``Literal`` 物件之間的相等比較現在與順序無關。"

#: ../../whatsnew/3.10.rst:1458
#, fuzzy
msgid ""
"``Literal`` comparisons now respect types.  For example, ``Literal[0] == "
"Literal[False]`` previously evaluated to ``True``.  It is now ``False``.  To "
"support this change, the internally used type cache now supports "
"differentiating types."
msgstr ""
"``Literal`` 比較現在尊重型別。例如，``Literal[0] == Literal[False]`` "
"先前評估為 "
"``True``。現在是 ``False``。為了支援這一變化，內部使用的型別快取現在支援區分型別。"

#: ../../whatsnew/3.10.rst:1462
#, fuzzy
msgid ""
"``Literal`` objects will now raise a :exc:`TypeError` exception during "
"equality comparisons if any of their parameters are not :term:`hashable`. "
"Note that declaring ``Literal`` with unhashable parameters will not throw an "
"error::"
msgstr ""
"``Literal`` 物件現在將在相等比較期間引發 :exc:`TypeError` 例外，"
"如果它們的任何參數不是 "
":term:`hashable`。請注意，使用無法可雜湊的參數聲明 ``Literal`` 不會引發錯誤::"

#: ../../whatsnew/3.10.rst:1474
#, fuzzy
msgid "(Contributed by Yurii Karabas in :issue:`42345`.)"
msgstr "（由 Yurii Karabas 在 :issue:`42345` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1476
#, fuzzy
msgid ""
"Add new function :func:`typing.is_typeddict` to introspect if an annotation "
"is a :class:`typing.TypedDict`. (Contributed by Patrick Reader in :issue:"
"`41792`.)"
msgstr ""
"新增新函式 :func:`typing.is_typeddict` 以自省註釋是否為 :class:`typing."
"TypedDict`。 （由 Patrick Reader 在 :issue:`41792` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1480
#, fuzzy
msgid ""
"Subclasses of ``typing.Protocol`` which only have data variables declared "
"will now raise a ``TypeError`` when checked with ``isinstance`` unless they "
"are decorated with :func:`runtime_checkable`.  Previously, these checks "
"passed silently.  Users should decorate their subclasses with the :func:"
"`runtime_checkable` decorator if they want runtime protocols. (Contributed "
"by Yurii Karabas in :issue:`38908`.)"
msgstr ""
"``typing.Protocol`` 的子類別僅聲明了資料變數，現在在使用 ``isinstance`` "
"檢查時會引發 ``TypeError``，除非它們被 :func:`runtime_checkable` "
"修飾。以前，這些檢查是悄無聲息地通過的。如果使用者需要運行時協定，他們應該用 "
":func:`runtime_checkable` 裝飾器裝飾他們的子類別。 （由 Yurii Karabas 在 "
":issue:`38908` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1488
#, fuzzy
msgid ""
"Importing from the ``typing.io`` and ``typing.re`` submodules will now emit :"
"exc:`DeprecationWarning`.  These submodules have been deprecated since "
"Python 3.8 and will be removed in a future version of Python.  Anything "
"belonging to those submodules should be imported directly from :mod:`typing` "
"instead. (Contributed by Sebastian Rittau in :issue:`38291`.)"
msgstr ""
"從 ``typing.io`` 和 ``typing.re`` 子模組導入現在會發出 DeprecationWarning。"
"這些子模組自 Python 3.8 起已被棄用，並將在未來的 Python 版本中刪除。"
"屬於這些子模組的任何東西都應該直接從 :mod:`typing` 導入。 （由 Sebastian "
"Rittau 在 :issue:`38291` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1496
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.10.rst:1498
#, fuzzy
msgid ""
"Add new method :meth:`~unittest.TestCase.assertNoLogs` to complement the "
"existing :meth:`~unittest.TestCase.assertLogs`. (Contributed by Kit Yan Choi "
"in :issue:`39385`.)"
msgstr ""
"新增新方法 :meth:`~unittest.TestCase.assertNoLogs` 以補充現有的 "
":meth:`~unittest.TestCase.assertLogs`。 （由 Kit Yan Choi 在 :issue:`39385` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:1503
msgid "urllib.parse"
msgstr "urllib.parse"

#: ../../whatsnew/3.10.rst:1505
#, fuzzy
msgid ""
"Python versions earlier than Python 3.10 allowed using both ``;`` and ``&`` "
"as query parameter separators in :func:`urllib.parse.parse_qs` and :func:"
"`urllib.parse.parse_qsl`.  Due to security concerns, and to conform with "
"newer W3C recommendations, this has been changed to allow only a single "
"separator key, with ``&`` as the default.  This change also affects :func:"
"`cgi.parse` and :func:`cgi.parse_multipart` as they use the affected "
"functions internally.  For more details, please see their respective "
"documentation. (Contributed by Adam Goldschmidt, Senthil Kumaran and Ken Jin "
"in :issue:`42967`.)"
msgstr ""
"Python 3.10 之前的 Python 版本允許在 :func:`urllib.parse.parse_qs` 和 "
":func:`urllib.parse.parse_qsl` 中同時使用 ``;`` 和 ``&`` "
"作為查詢參數分隔符。出於安全考慮，並為了符合更新的 W3C "
"建議，這已更改為僅允許單個分隔鍵，預設為 ``&``。此更改還會影響 :func:`cgi.parse`"
" 和 :func:`cgi.parse_multipart`，因為它們在內部使用受影響的函式。有關詳細資訊"
"，請參閱各自的文檔。 （由 Adam Goldschmidt、Senthil Kumaran 和 Ken Jin 在 "
":issue:`42967` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1516
msgid "xml"
msgstr "xml"

#: ../../whatsnew/3.10.rst:1518
#, fuzzy
msgid ""
"Add a :class:`~xml.sax.handler.LexicalHandler` class to the :mod:`xml.sax."
"handler` module. (Contributed by Jonathan Gossage and Zackery Spytz in :"
"issue:`35018`.)"
msgstr ""
"新增一個 :class:`~xml.sax.handler.LexicalHandler` 類到 :mod:`xml.sax.handler`"
" 模組。 （由 Jonathan Gossage 和 Zackery Spytz 在 :issue:`35018` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1523
msgid "zipimport"
msgstr "zipimport"

#: ../../whatsnew/3.10.rst:1524
#, fuzzy
msgid ""
"Add methods related to :pep:`451`: :meth:`~zipimport.zipimporter."
"find_spec`, :meth:`zipimport.zipimporter.create_module`, and :meth:"
"`zipimport.zipimporter.exec_module`. (Contributed by Brett Cannon in :issue:"
"`42131`.)"
msgstr ""
"新增與 :pep:`451`::meth:`~zipimport.zipimporter.find_spec`、:meth:`zipimport."
"zipimporter.create_module` 和 :meth:`zipimport.zipimporter.exec_module` "
"相關的方法。 （由 Brett Cannon 在 :issue:`42131` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1529
#, fuzzy
msgid ""
"Add :meth:`~zipimport.zipimporter.invalidate_caches` method. (Contributed by "
"Desmond Cheong in :issue:`14678`.)"
msgstr ""
"新增 :meth:`~zipimport.zipimporter.invalidate_caches` 方法。 （由 Desmond "
"Cheong 在 :issue:`14678` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1534
#, fuzzy
msgid "Optimizations"
msgstr "最佳化"

#: ../../whatsnew/3.10.rst:1536
#, fuzzy
msgid ""
"Constructors :func:`str`, :func:`bytes` and :func:`bytearray` are now faster "
"(around 30--40% for small objects). (Contributed by Serhiy Storchaka in :"
"issue:`41334`.)"
msgstr ""
"構造函式 :func:`str`、:func:`bytes` 和 :func:`bytearray` 現在更快了（"
"小對像大約提高 30--40%）。 （由 Serhiy Storchaka 在 :issue:`41334` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1540
#, fuzzy
msgid ""
"The :mod:`runpy` module now imports fewer modules. The ``python3 -m module-"
"name`` command startup time is 1.4x faster in average. On Linux, ``python3 -"
"I -m module-name`` imports 69 modules on Python 3.9, whereas it only imports "
"51 modules (-18) on Python 3.10. (Contributed by Victor Stinner in :issue:"
"`41006` and :issue:`41718`.)"
msgstr ""
":mod:`runpy` 模組現在導入更少的模組。 ``python3 -m module-name`` "
"命令啟動時間平均快 1.4 倍。在 Linux 上，``python3 -I -m module-name`` 在 "
"Python 3.9 上導入 69 個模組，而在 Python 3.10 上僅導入 51 個模組 (-18)。 （"
"由 Victor Stinner 在 :issue:`41006` 和 :issue:`41718` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1546
#, fuzzy
msgid ""
"The ``LOAD_ATTR`` instruction now uses new \"per opcode cache\" mechanism.  "
"It is about 36% faster now for regular attributes and 44% faster for slots. "
"(Contributed by Pablo Galindo and Yury Selivanov in :issue:`42093` and Guido "
"van Rossum in :issue:`42927`, based on ideas implemented originally in PyPy "
"and MicroPython.)"
msgstr ""
"``LOAD_ATTR`` 指令現在使用新的“每個操作碼快取”機制。現在常規屬性快了大約 "
"36%，插槽快了 44%。 （由 Pablo Galindo 和 Yury Selivanov 在 :issue:`42093` "
"和 Guido van Rossum 在 :issue:`42927` 中貢獻，基於最初在 PyPy 和 MicroPython "
"中實作的想法。）"

#: ../../whatsnew/3.10.rst:1552
#, fuzzy
msgid ""
"When building Python with :option:`--enable-optimizations` now ``-fno-"
"semantic-interposition`` is added to both the compile and link line. This "
"speeds builds of the Python interpreter created with :option:`--enable-"
"shared` with ``gcc`` by up to 30%. See `this article <https://developers."
"redhat.com/blog/2020/06/25/red-hat-enterprise-linux-8-2-brings-faster-"
"python-3-8-run-speeds/>`_ for more details. (Contributed by Victor Stinner "
"and Pablo Galindo in :issue:`38980`.)"
msgstr ""
"當使用 :option:`--enable-optimizations` 構建 Python 時，現在 ``-fno-semantic-"
"interposition`` 被新增到編譯和鏈接行。這加快了使用 :option:`--enable-shared` "
"和 ``gcc`` 建立的 Python 直譯器的構建速度高達 30%。請參閱`這篇文章 "
"<https://developers.redhat.com/blog/2020/06/25/"
"red-hat-enterprise-linux-8-2-brings-faster-python-3-8-run-speeds/> "
"`_了解更多詳情。 （由 Victor Stinner 和 Pablo Galindo 在 :issue:`38980` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:1560
#, fuzzy
msgid ""
"Use a new output buffer management code for :mod:`bz2` / :mod:`lzma` / :mod:"
"`zlib` modules, and add ``.readall()`` function to ``_compression."
"DecompressReader`` class. bz2 decompression is now 1.09x ~ 1.17x faster, "
"lzma decompression 1.20x ~ 1.32x faster, ``GzipFile.read(-1)`` 1.11x ~ 1.18x "
"faster. (Contributed by Ma Lin, reviewed by Gregory P. Smith, in :issue:"
"`41486`)"
msgstr ""
"為 :mod:`bz2` / :mod:`lzma` / :mod:`zlib` 模組使用新的輸出緩衝區管理程式碼，"
"並將 ``.readall()`` 函式新增到 ``_compression.DecompressReader`` 類. bz2 "
"解壓縮現在快 1.09x ~ 1.17x，lzma 解壓縮快 1.20x ~ 1.32x，``GzipFile."
"read(-1)`` 快 1.11x ~ 1.18x。 （由 Ma Lin 貢獻，由 Gregory P. Smith 審閱，在 "
":issue:`41486` 中）"

#: ../../whatsnew/3.10.rst:1566
#, fuzzy
msgid ""
"When using stringized annotations, annotations dicts for functions are no "
"longer created when the function is created.  Instead, they are stored as a "
"tuple of strings, and the function object lazily converts this into the "
"annotations dict on demand.  This optimization cuts the CPU time needed to "
"define an annotated function by half. (Contributed by Yurii Karabas and "
"Inada Naoki in :issue:`42202`.)"
msgstr ""
"使用字串化註釋時，函式的註釋字典不再在建立函式時建立。相反，它們被儲存為一個"
"字串元組，函式對像根據需要懶惰地將其轉換為註解字典。"
"這種最佳化將定義註釋函式所需的 CPU 時間減少了一半。 （由 Yurii Karabas 和 "
"Inada Naoki 在 :issue:`42202` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1573
#, fuzzy
msgid ""
"Substring search functions such as ``str1 in str2`` and ``str2.find(str1)`` "
"now sometimes use Crochemore & Perrin's \"Two-Way\" string searching "
"algorithm to avoid quadratic behavior on long strings.  (Contributed by "
"Dennis Sweeney in :issue:`41972`)"
msgstr ""
"子字串搜索函式，例如 ``str1 in str2`` 和 ``str2.find(str1)`` 現在有時會使用 "
"Crochemore & Perrin 的“雙向”字串搜索演算法來避免長字串上的二次行為。 （由 "
"Dennis Sweeney 在 :issue:`41972` 中貢獻）"

#: ../../whatsnew/3.10.rst:1578
#, fuzzy
msgid ""
"Add micro-optimizations to ``_PyType_Lookup()`` to improve type attribute "
"cache lookup performance in the common case of cache hits. This makes the "
"interpreter 1.04 times faster on average. (Contributed by Dino Viehland in :"
"issue:`43452`.)"
msgstr ""
"將微最佳化新增到 _PyType_Lookup() "
"以提高常見快取命中情況下的型別屬性快取查找性能。這使得直譯器平均快 1.04 倍。 "
"（由 Dino Viehland 在 :issue:`43452` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1582
#, fuzzy
msgid ""
"The following built-in functions now support the faster :pep:`590` "
"vectorcall calling convention: :func:`map`, :func:`filter`, :func:"
"`reversed`, :func:`bool` and :func:`float`. (Contributed by Dong-hee Na and "
"Jeroen Demeyer in :issue:`43575`, :issue:`43287`, :issue:`41922`, :issue:"
"`41873` and :issue:`41870`.)"
msgstr ""
"以下內建函式現在支援更快的 :pep:`590` vectorcall "
"呼叫約定：:func:`map`、:func:`filter`、:func:`reversed`、:func:`bool` 和 :"
"func ：`浮動`。 （由 Dong-hee Na 和 Jeroen Demeyer 在 "
":issue:`43575`、:issue:`43287`、:issue:`41922`、:issue:`41873` 和 "
":issue:`41870` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1586
#, fuzzy
msgid ""
":class:`BZ2File` performance is improved by removing internal ``RLock``. "
"This makes :class:`BZ2File` thread unsafe in the face of multiple "
"simultaneous readers or writers, just like its equivalent classes in :mod:"
"`gzip` and :mod:`lzma` have always been.  (Contributed by Inada Naoki in :"
"issue:`43785`.)"
msgstr ""
":class:`BZ2File` 性能通過移除內部 ``RLock`` 得到提升。這使得 :class:`BZ2File`"
" 執行緒在面對多個同時讀取者或寫入者時不安全，就像 :mod:`gzip` 和 :mod:`lzma` "
"中的等效類一樣。 （由 Inada Naoki 在 :issue:`43785` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1594 ../../whatsnew/3.10.rst:2200
#, fuzzy
msgid "Deprecated"
msgstr "棄用"

#: ../../whatsnew/3.10.rst:1596
#, fuzzy
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  Starting in this release, a "
"deprecation warning is raised if the numeric literal is immediately followed "
"by one of keywords :keyword:`and`, :keyword:`else`, :keyword:`for`, :keyword:"
"`if`, :keyword:`in`, :keyword:`is` and :keyword:`or`. In future releases it "
"will be changed to syntax warning, and finally to syntax error. (Contributed "
"by Serhiy Storchaka in :issue:`43833`.)"
msgstr ""
"目前 Python 接受緊跟關鍵字的數字文字，例如 ``0in x``、``1or x``、``0if 1else "
"2``。它允許混淆和模棱兩可的表達式，如“[0x1for x in y]”（可以解釋為“[0x1 for "
"x in y]”或“[0x1f or x in y]”）。從此版本開始，如果數字文字後緊跟關鍵字之一，"
"則會引發棄用警告 :keyword:`and`、:keyword:`else`、:keyword:`for`、:keyword:`i"
"f`、： keyword:`in`, :keyword:`is` 和 "
":keyword:`or`。在未來的版本中，它將更改為語法警告，最後更改為語法錯誤。 （由 "
"Serhiy Storchaka 在 :issue:`43833` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1607
#, fuzzy
msgid ""
"Starting in this release, there will be a concerted effort to begin cleaning "
"up old import semantics that were kept for Python 2.7 compatibility. "
"Specifically, :meth:`~importlib.abc.PathEntryFinder.find_loader`/:meth:"
"`~importlib.abc.Finder.find_module` (superseded by :meth:`~importlib.abc."
"Finder.find_spec`), :meth:`~importlib.abc.Loader.load_module` (superseded "
"by :meth:`~importlib.abc.Loader.exec_module`), :meth:`~importlib.abc.Loader."
"module_repr` (which the import system takes care of for you), the "
"``__package__`` attribute (superseded by ``__spec__.parent``), the "
"``__loader__`` attribute (superseded by ``__spec__.loader``), and the "
"``__cached__`` attribute (superseded by ``__spec__.cached``) will slowly be "
"removed (as well as other classes and methods in :mod:`importlib`). :exc:"
"`ImportWarning` and/or :exc:`DeprecationWarning` will be raised as "
"appropriate to help identify code which needs updating during this "
"transition."
msgstr ""
"從此版本開始，將齊心協力開始清理為 Python 2.7 "
"相容性而保留的舊導入語義。具體來說，:meth:`~importlib.abc.PathEntryFinder."
"find_loader`/:meth:`~importlib.abc.Finder.find_module`（被 :meth:`~importlib."
"abc.Finder.find_spec` 取代），:meth: `~importlib.abc.Loader.load_module`（被 "
":meth:`~importlib.abc.Loader.exec_module 取代），:meth:`~importlib.abc.Loader"
".module_repr`（導入系統負責你），``__package__`` 屬性（被 ``__spec__.parent``"
" 取代），``__loader__`` 屬性（被 ``__spec__.loader`` 取代），以及 "
"``__cached__`` 屬性（被 ``__spec__.cached`` 取代）將慢慢被刪除（以及 "
":mod:`importlib` 中的其他類和方法）。 :exc:`ImportWarning` 和/或 "
":exc:`DeprecationWarning` "
"將酌情提出，以幫助識別在此過渡期間需要更新的程式碼。"

#: ../../whatsnew/3.10.rst:1624
#, fuzzy
msgid ""
"The entire ``distutils`` namespace is deprecated, to be removed in Python "
"3.12. Refer to the :ref:`module changes <distutils-deprecated>` section for "
"more information."
msgstr ""
"整個 ``distutils`` 命名空間已棄用，將在 Python 3.12 中刪除。有關詳細資訊，"
"請參閱 :ref:`module changes <distutils-deprecated>` 部分。"

#: ../../whatsnew/3.10.rst:1628
#, fuzzy
msgid ""
"Non-integer arguments to :func:`random.randrange` are deprecated. The :exc:"
"`ValueError` is deprecated in favor of a :exc:`TypeError`. (Contributed by "
"Serhiy Storchaka and Raymond Hettinger in :issue:`37319`.)"
msgstr ""
":func:`random.randrange` 的非整數參數已棄用。 :exc:`ValueError` 已棄用，"
"取而代之的是 :exc:`TypeError`。 （由 Serhiy Storchaka 和 Raymond Hettinger "
"在 :issue:`37319` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1632
#, fuzzy
msgid ""
"The various ``load_module()`` methods of :mod:`importlib` have been "
"documented as deprecated since Python 3.6, but will now also trigger a :exc:"
"`DeprecationWarning`. Use :meth:`~importlib.abc.Loader.exec_module` instead. "
"(Contributed by Brett Cannon in :issue:`26131`.)"
msgstr ""
"importlib 的各種 load_module() 方法已被記錄為自 Python 3.6 以來已棄用，"
"但現在也會觸發 DeprecationWarning。使用 :meth:`~importlib.abc.Loader."
"exec_module` 代替。 （由 Brett Cannon 在 :issue:`26131` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1638
#, fuzzy
msgid ""
":meth:`zimport.zipimporter.load_module` has been deprecated in preference "
"for :meth:`~zipimport.zipimporter.exec_module`. (Contributed by Brett Cannon "
"in :issue:`26131`.)"
msgstr ""
":meth:`zimport.zipimporter.load_module` "
"已被棄用，取而代之的是 :meth:`~zipimport.zipimporter.exec_module`。 （由 "
"Brett Cannon 在 :issue:`26131` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1642
#, fuzzy
msgid ""
"The use of :meth:`~importlib.abc.Loader.load_module` by the import system "
"now triggers an :exc:`ImportWarning` as :meth:`~importlib.abc.Loader."
"exec_module` is preferred. (Contributed by Brett Cannon in :issue:`26131`.)"
msgstr ""
"導入系統使用 :meth:`~importlib.abc.Loader.load_module` 現在會觸發 "
":exc:`ImportWarning` 作為 :meth:`~importlib.abc.Loader.exec_module` 是首選。 "
"（由 Brett Cannon 在 :issue:`26131` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1647
#, fuzzy
msgid ""
"The use of :meth:`importlib.abc.MetaPathFinder.find_module` and :meth:"
"`importlib.abc.PathEntryFinder.find_module` by the import system now trigger "
"an :exc:`ImportWarning` as :meth:`importlib.abc.MetaPathFinder.find_spec` "
"and :meth:`importlib.abc.PathEntryFinder.find_spec` are preferred, "
"respectively. You can use :func:`importlib.util.spec_from_loader` to help in "
"porting. (Contributed by Brett Cannon in :issue:`42134`.)"
msgstr ""
"導入系統使用 importlib.abc.MetaPathFinder.find_module 和 "
"importlib.abc.PathEntryFinder.find_module 現在會觸發 ImportWarning 作為 "
"importlib.abc。 MetaPathFinder.find_spec` 和 :meth:`importlib.abc."
"PathEntryFinder.find_spec` 分別是首選。您可以使用 :func:`importlib.util."
"spec_from_loader` 來幫助移植。 （由 Brett Cannon 在 :issue:`42134` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1656
#, fuzzy
msgid ""
"The use of :meth:`importlib.abc.PathEntryFinder.find_loader` by the import "
"system now triggers an :exc:`ImportWarning` as :meth:`importlib.abc."
"PathEntryFinder.find_spec` is preferred. You can use :func:`importlib.util."
"spec_from_loader` to help in porting. (Contributed by Brett Cannon in :issue:"
"`43672`.)"
msgstr ""
"導入系統使用 importlib.abc.PathEntryFinder.find_loader 現在會觸發 "
"ImportWarning，因為 importlib.abc.PathEntryFinder.find_spec 是首選。"
"您可以使用 :func:`importlib.util.spec_from_loader` 來幫助移植。 （由 Brett "
"Cannon 在 :issue:`43672` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1662
#, fuzzy
msgid ""
"The various implementations of :meth:`importlib.abc.MetaPathFinder."
"find_module` ( :meth:`importlib.machinery.BuiltinImporter.find_module`, :"
"meth:`importlib.machinery.FrozenImporter.find_module`, :meth:`importlib."
"machinery.WindowsRegistryFinder.find_module`, :meth:`importlib.machinery."
"PathFinder.find_module`, :meth:`importlib.abc.MetaPathFinder."
"find_module` ), :meth:`importlib.abc.PathEntryFinder.find_module` ( :meth:"
"`importlib.machinery.FileFinder.find_module` ), and :meth:`importlib.abc."
"PathEntryFinder.find_loader` ( :meth:`importlib.machinery.FileFinder."
"find_loader` ) now raise :exc:`DeprecationWarning` and are slated for "
"removal in Python 3.12 (previously they were documented as deprecated in "
"Python 3.4). (Contributed by Brett Cannon in :issue:`42135`.)"
msgstr ""
"importlib.abc.MetaPathFinder.find_module 的各種實作（ .WindowsRegistryFinder."
"find_module`, :meth:`importlib.machinery.PathFinder.find_module`, "
":meth:`importlib.abc.MetaPathFinder.find_module` ), :meth:`importlib.abc."
"PathEntryFinder.find_module` ( :meth:` importlib.machinery.FileFinder."
"find_module` ) 和 :meth:`importlib.abc.PathEntryFinder.find_loader` ( "
":meth:`importlib.machinery.FileFinder.find_loader` ) 現在引發 :exc:`"
"DeprecationWarning 併計劃刪除在 Python 3.12 中（之前它們被記錄為在 Python "
"3.4 中已棄用）。 （由 Brett Cannon 在 :issue:`42135` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1677
#, fuzzy
msgid ""
":class:`importlib.abc.Finder` is deprecated (including its sole method, :"
"meth:`~importlib.abc.Finder.find_module`). Both :class:`importlib.abc."
"MetaPathFinder` and :class:`importlib.abc.PathEntryFinder` no longer inherit "
"from the class. Users should inherit from one of these two classes as "
"appropriate instead. (Contributed by Brett Cannon in :issue:`42135`.)"
msgstr ""
":class:`importlib.abc.Finder` 已棄用（包括其唯一的方法，:meth:`~importlib.abc"
".Finder.find_module`）。 :class:`importlib.abc.MetaPathFinder` 和 "
":class:`importlib.abc.PathEntryFinder` "
"不再繼承自該類。使用者應該酌情繼承這兩個類之一。 （由 Brett Cannon 在 "
":issue:`42135` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1684
#, fuzzy
msgid ""
"The deprecations of :mod:`imp`, :func:`importlib.find_loader`, :func:"
"`importlib.util.set_package_wrapper`, :func:`importlib.util."
"set_loader_wrapper`, :func:`importlib.util.module_for_loader`, :class:"
"`pkgutil.ImpImporter`, and :class:`pkgutil.ImpLoader` have all been updated "
"to list Python 3.12 as the slated version of removal (they began raising :"
"exc:`DeprecationWarning` in previous versions of Python). (Contributed by "
"Brett Cannon in :issue:`43720`.)"
msgstr ""
":mod:`imp`、:func:`importlib.find_loader`、:func:`importlib.util."
"set_package_wrapper`、:func:`importlib.util.set_loader_wrapper`、:func:`"
"importlib.util.module_for_loader 的棄用`、:class:`pkgutil.ImpImporter` "
"和 :class:`pkgutil.ImpLoader` 都已更新，將 Python 3.12 列為預定的刪除版本（"
"他們開始在以前的 Python 版本中提出 :exec:`DeprecationWarning`） . （由 Brett "
"Cannon 在 :issue:`43720` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1694
#, fuzzy
msgid ""
"The import system now uses the ``__spec__`` attribute on modules before "
"falling back on :meth:`~importlib.abc.Loader.module_repr` for a module's "
"``__repr__()`` method. Removal of the use of ``module_repr()`` is scheduled "
"for Python 3.12. (Contributed by Brett Cannon in :issue:`42137`.)"
msgstr ""
"導入系統現在在模組的 `__repr__()`` 方法回傳 :meth:`~importlib.abc.Loader."
"module_repr` 之前在模組上使用 ``__spec__`` 屬性。計劃在 Python 3.12 中刪除 "
"``module_repr()`` 的使用。 （由 Brett Cannon 在 :issue:`42137` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1700
#, fuzzy
msgid ""
":meth:`importlib.abc.Loader.module_repr`, :meth:`importlib.machinery."
"FrozenLoader.module_repr`, and :meth:`importlib.machinery.BuiltinLoader."
"module_repr` are deprecated and slated for removal in Python 3.12. "
"(Contributed by Brett Cannon in :issue:`42136`.)"
msgstr ""
":meth:`importlib.abc.Loader.module_repr`、:meth:`importlib.machinery."
"FrozenLoader.module_repr` 和 :meth:`importlib.machinery.BuiltinLoader."
"module_repr` 已棄用併計劃在 Python 3.12 中刪除。 （由 Brett Cannon 在 "
":issue:`42136` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1706
#, fuzzy
msgid ""
"``sqlite3.OptimizedUnicode`` has been undocumented and obsolete since Python "
"3.3, when it was made an alias to :class:`str`.  It is now deprecated, "
"scheduled for removal in Python 3.12. (Contributed by Erlend E. Aasland in :"
"issue:`42264`.)"
msgstr ""
"``sqlite3.OptimizedUnicode`` 自 Python 3.3 以來一直沒有記錄並且已過時，"
"當時它是 :class:`str` 的別名。它現在已棄用，計劃在 Python 3.12 中刪除。 （由 "
"Erlend E. Aasland 在 :issue:`42264` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1711
#, fuzzy
msgid ""
"The undocumented built-in function ``sqlite3.enable_shared_cache`` is now "
"deprecated, scheduled for removal in Python 3.12.  Its use is strongly "
"discouraged by the SQLite3 documentation.  See `the SQLite3 docs <https://"
"sqlite.org/c3ref/enable_shared_cache.html>`_ for more details. If a shared "
"cache must be used, open the database in URI mode using the ``cache=shared`` "
"query parameter. (Contributed by Erlend E. Aasland in :issue:`24464`.)"
msgstr ""
"未記錄的內建函式 ``sqlite3.enable_shared_cache`` 現已棄用，計劃在 Python "
"3.12 中刪除。 SQLite3 文檔強烈建議不要使用它。有關詳細資訊，請參閱`SQLite3 "
"文檔 <https://sqlite.org/c3ref/enable_shared_cache."
"html>`_。如果必須使用共享快取，請使用 ``cache=shared`` 查詢參數以 URI "
"模式打開資料庫。 （由 Erlend E. Aasland 在 :issue:`24464` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1719
#, fuzzy
msgid "The following ``threading`` methods are now deprecated:"
msgstr "以下 ``threading`` 方法現已棄用："

#: ../../whatsnew/3.10.rst:1721
msgid "``threading.currentThread`` => :func:`threading.current_thread`"
msgstr "``threading.currentThread`` => :func:`threading.current_thread`"

#: ../../whatsnew/3.10.rst:1723
msgid "``threading.activeCount`` => :func:`threading.active_count`"
msgstr "``threading.activeCount`` => :func:`threading.active_count`"

#: ../../whatsnew/3.10.rst:1725
msgid ""
"``threading.Condition.notifyAll`` => :meth:`threading.Condition.notify_all`"
msgstr ""
"``threading.Condition.notifyAll`` => :meth:`threading.Condition.notify_all`"

#: ../../whatsnew/3.10.rst:1728
msgid "``threading.Event.isSet`` => :meth:`threading.Event.is_set`"
msgstr "``threading.Event.isSet`` => :meth:`threading.Event.is_set`"

#: ../../whatsnew/3.10.rst:1730
msgid "``threading.Thread.setName`` => :attr:`threading.Thread.name`"
msgstr "``threading.Thread.setName`` => :attr:`threading.Thread.name`"

#: ../../whatsnew/3.10.rst:1732
msgid "``threading.thread.getName`` => :attr:`threading.Thread.name`"
msgstr "``threading.thread.getName`` => :attr:`threading.Thread.name`"

#: ../../whatsnew/3.10.rst:1734
msgid "``threading.Thread.isDaemon`` => :attr:`threading.Thread.daemon`"
msgstr "``threading.Thread.isDaemon`` => :attr:`threading.Thread.daemon`"

#: ../../whatsnew/3.10.rst:1736
msgid "``threading.Thread.setDaemon`` => :attr:`threading.Thread.daemon`"
msgstr "``threading.Thread.setDaemon`` => :attr:`threading.Thread.daemon`"

#: ../../whatsnew/3.10.rst:1738
#, fuzzy
msgid "(Contributed by Jelle Zijlstra in :gh:`87889`.)"
msgstr "（由 Jelle Zijlstra 在 :gh:`87889` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1740
#, fuzzy
msgid ""
":meth:`pathlib.Path.link_to` is deprecated and slated for removal in Python "
"3.12. Use :meth:`pathlib.Path.hardlink_to` instead. (Contributed by Barney "
"Gale in :issue:`39950`.)"
msgstr ""
":meth:`pathlib.Path.link_to` 已棄用併計劃在 Python 3.12 中刪除。使用 "
":meth:`pathlib.Path.hardlink_to` 代替。 （由 Barney Gale 在 :issue:`39950` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:1744
#, fuzzy
msgid ""
"``cgi.log()`` is deprecated and slated for removal in Python 3.12. "
"(Contributed by Inada Naoki in :issue:`41139`.)"
msgstr ""
"``cgi.log()`` 已棄用併計劃在 Python 3.12 中刪除。 （由 Inada Naoki 在 "
":issue:`41139` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1747
#, fuzzy
msgid ""
"The following :mod:`ssl` features have been deprecated since Python 3.6, "
"Python 3.7, or OpenSSL 1.1.0 and will be removed in 3.11:"
msgstr ""
"以下 :mod:`ssl` 特性自 Python 3.6、Python 3.7 或 OpenSSL 1.1.0 以來已被棄用，"
"並將在 3.11 中刪除："

#: ../../whatsnew/3.10.rst:1750
#, fuzzy
msgid ""
":data:`~ssl.OP_NO_SSLv2`, :data:`~ssl.OP_NO_SSLv3`, :data:`~ssl."
"OP_NO_TLSv1`, :data:`~ssl.OP_NO_TLSv1_1`, :data:`~ssl.OP_NO_TLSv1_2`, and :"
"data:`~ssl.OP_NO_TLSv1_3` are replaced by :attr:`sslSSLContext."
"minimum_version` and :attr:`sslSSLContext.maximum_version`."
msgstr ""
":data:`~ssl.OP_NO_SSLv2`，:data:`~ssl.OP_NO_SSLv3`，:data:`~ssl."
"OP_NO_TLSv1`，:data:`~ssl.OP_NO_TLSv1_1`，:data:`~ssl.OP_NO_TLSv1_2`，和 "
":data:`~ssl.OP_NO_TLSv1_3` 替換為 :attr:`sslSSLContext.minimum_version` 和 "
":attr:`sslSSLContext.maximum_version`。"

#: ../../whatsnew/3.10.rst:1756
#, fuzzy
msgid ""
":data:`~ssl.PROTOCOL_SSLv2`, :data:`~ssl.PROTOCOL_SSLv3`, :data:`~ssl."
"PROTOCOL_SSLv23`, :data:`~ssl.PROTOCOL_TLSv1`, :data:`~ssl."
"PROTOCOL_TLSv1_1`, :data:`~ssl.PROTOCOL_TLSv1_2`, and :data:`~ssl."
"PROTOCOL_TLS` are deprecated in favor of :data:`~ssl.PROTOCOL_TLS_CLIENT` "
"and :data:`~ssl.PROTOCOL_TLS_SERVER`"
msgstr ""
":data:`~ssl.PROTOCOL_SSLv2`，:data:`~ssl.PROTOCOL_SSLv3`，:data:`~ssl."
"PROTOCOL_SSLv23`，:data:`~ssl.PROTOCOL_TLSv1`，:data:`~ssl."
"PROTOCOL_TLSv1_1`， :data:`~ssl.PROTOCOL_TLSv1_2` 和 :data:`~ssl."
"PROTOCOL_TLS` 已棄用，取而代之的是 :data:`~ssl.PROTOCOL_TLS_CLIENT` 和 "
":data:`~ssl.PROTOCOL_TLS_SERVER`"

#: ../../whatsnew/3.10.rst:1762
#, fuzzy
msgid ""
":func:`~ssl.wrap_socket` is replaced by :meth:`ssl.SSLContext.wrap_socket`"
msgstr ":func:`~ssl.wrap_socket` 替換為 :meth:`ssl.SSLContext.wrap_socket`"

#: ../../whatsnew/3.10.rst:1764
msgid ":func:`~ssl.match_hostname`"
msgstr ":func:`~ssl.match_hostname`"

#: ../../whatsnew/3.10.rst:1766
msgid ":func:`~ssl.RAND_pseudo_bytes`, :func:`~ssl.RAND_egd`"
msgstr ":func:`~ssl.RAND_pseudo_bytes`, :func:`~ssl.RAND_egd`"

#: ../../whatsnew/3.10.rst:1768
#, fuzzy
msgid ""
"NPN features like :meth:`ssl.SSLSocket.selected_npn_protocol` and :meth:`ssl."
"SSLContext.set_npn_protocols` are replaced by ALPN."
msgstr ""
"NPN 功能，如 :meth:`ssl.SSLSocket.selected_npn_protocol` 和 :meth:`ssl."
"SSLContext.set_npn_protocols` 被 ALPN 取代。"

#: ../../whatsnew/3.10.rst:1771
#, fuzzy
msgid ""
"The threading debug (:envvar:`PYTHONTHREADDEBUG` environment variable) is "
"deprecated in Python 3.10 and will be removed in Python 3.12. This feature "
"requires a :ref:`debug build of Python <debug-build>`. (Contributed by "
"Victor Stinner in :issue:`44584`.)"
msgstr ""
"執行緒除錯（:envvar:`PYTHONTHREADDEBUG` 環境變數）在 Python 3.10 中已棄用，"
"並將在 Python 3.12 中刪除。此功能需要 :ref:`Python 的除錯構建 <debug-"
"build>`。 （由 Victor Stinner 在 :issue:`44584` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1776
#, fuzzy
msgid ""
"Importing from the ``typing.io`` and ``typing.re`` submodules will now emit :"
"exc:`DeprecationWarning`.  These submodules will be removed in a future "
"version of Python.  Anything belonging to these submodules should be "
"imported directly from :mod:`typing` instead. (Contributed by Sebastian "
"Rittau in :issue:`38291`.)"
msgstr ""
"從 ``typing.io`` 和 ``typing.re`` 子模組導入現在會發出 DeprecationWarning。"
"這些子模組將在 Python 的未來版本中刪除。屬於這些子模組的任何東西都應該直接從 "
":mod:`typing` 導入。 （由 Sebastian Rittau 在 :issue:`38291` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1785 ../../whatsnew/3.10.rst:2208
#, fuzzy
msgid "Removed"
msgstr "刪除"

#: ../../whatsnew/3.10.rst:1787
#, fuzzy
msgid ""
"Removed special methods ``__int__``, ``__float__``, ``__floordiv__``, "
"``__mod__``, ``__divmod__``, ``__rfloordiv__``, ``__rmod__`` and "
"``__rdivmod__`` of the :class:`complex` class.  They always raised a :exc:"
"`TypeError`. (Contributed by Serhiy Storchaka in :issue:`41974`.)"
msgstr ""
"刪除了特殊方法``__int__``、``__float__``、``__floordiv__``、``__mod__``、``__"
"divmod__``、``__rfloordiv__``、``__rmod__`` 和``__rdivmod__`` "
":class:`complex` 類的。他們總是提出 :exc:`TypeError`。 （由 Serhiy Storchaka "
"在 :issue:`41974` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1793
#, fuzzy
msgid ""
"The ``ParserBase.error()`` method from the private and undocumented "
"``_markupbase`` module has been removed.  :class:`html.parser.HTMLParser` is "
"the only subclass of ``ParserBase`` and its ``error()`` implementation was "
"already removed in Python 3.5. (Contributed by Berker Peksag in :issue:"
"`31844`.)"
msgstr ""
"來自私有和未記錄的 _markupbase 模組的 ParserBase.error() 方法已被刪除。 "
":class:`html.parser.HTMLParser` 是 ``ParserBase`` 的唯一子類別，其 "
"``error()`` 實作已在 Python 3.5 中刪除。 （由 Berker Peksag 在 :issue:`31844`"
" 中貢獻。）"

#: ../../whatsnew/3.10.rst:1799
#, fuzzy
msgid ""
"Removed the ``unicodedata.ucnhash_CAPI`` attribute which was an internal "
"PyCapsule object. The related private ``_PyUnicode_Name_CAPI`` structure was "
"moved to the internal C API. (Contributed by Victor Stinner in :issue:"
"`42157`.)"
msgstr ""
"刪除了作為內部 PyCapsule 物件的 ``unicodedata.ucnhash_CAPI`` 屬性。"
"相關的私有 ``_PyUnicode_Name_CAPI`` 結構已移至內部 C API。 （由 Victor "
"Stinner 在 :issue:`42157` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1804
#, fuzzy
msgid ""
"Removed the ``parser`` module, which was deprecated in 3.9 due to the switch "
"to the new PEG parser, as well as all the C source and header files that "
"were only being used by the old parser, including ``node.h``, ``parser.h``, "
"``graminit.h`` and ``grammar.h``."
msgstr ""
"刪除了 ``parser`` 模組，由於切換到新的 PEG 解析器，該模組在 3.9 中被棄用，"
"以及所有僅由舊解析器使用的 C 源文件和標頭檔，包括 ``node.h ``、``parser."
"h``、``graminit.h`` 和 ``grammar.h``。"

#: ../../whatsnew/3.10.rst:1809
#, fuzzy
msgid ""
"Removed the Public C API functions ``PyParser_SimpleParseStringFlags``, "
"``PyParser_SimpleParseStringFlagsFilename``, "
"``PyParser_SimpleParseFileFlags`` and ``PyNode_Compile`` that were "
"deprecated in 3.9 due to the switch to the new PEG parser."
msgstr ""
"刪除了公開 C API 函式``PyParser_SimpleParseStringFlags``、``PyParser_SimplePa"
"rseStringFlagsFilename``、``PyParser_SimpleParseFileFlags`` "
"和``PyNode_Compile`` 由於切換到新的 PEG 解析器而在 3.9 中被棄用。"

#: ../../whatsnew/3.10.rst:1814
#, fuzzy
msgid ""
"Removed the ``formatter`` module, which was deprecated in Python 3.4. It is "
"somewhat obsolete, little used, and not tested. It was originally scheduled "
"to be removed in Python 3.6, but such removals were delayed until after "
"Python 2.7 EOL. Existing users should copy whatever classes they use into "
"their code. (Contributed by Dong-hee Na and Terry J. Reedy in :issue:"
"`42299`.)"
msgstr ""
"刪除了 ``formatter`` 模組，該模組在 Python 3.4 "
"中已棄用。它有點過時，很少使用，也沒有經過測試。它最初計劃在 Python 3.6 "
"中刪除，但此類刪除被推遲到 Python 2.7 EOL "
"之後。現有使用者應該將他們使用的任何類複製到他們的程式碼中。 （由 Dong-hee "
"Na 和 Terry J. Reedy 在 :issue:`42299` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1821
#, fuzzy
msgid ""
"Removed the :c:func:`PyModule_GetWarningsModule` function that was useless "
"now due to the _warnings module was converted to a builtin module in 2.6. "
"(Contributed by Hai Shi in :issue:`42599`.)"
msgstr ""
"刪除了現在無用的 :c:func:`PyModule_GetWarningsModule` 函式，因為 _warnings "
"模組在 2.6 中被轉換為內建模組。 （由 Hai Shi 在 :issue:`42599` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1825
#, fuzzy
msgid ""
"Remove deprecated aliases to :ref:`collections-abstract-base-classes` from "
"the :mod:`collections` module. (Contributed by Victor Stinner in :issue:"
"`37324`.)"
msgstr ""
"從 :mod:`collections` 模組中移除 :ref:`collections-abstract-base-classes` "
"的棄用別名。 （由 Victor Stinner 在 :issue:`37324` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1829
#, fuzzy
msgid ""
"The ``loop`` parameter has been removed from most of :mod:`asyncio`\\ 's :"
"doc:`high-level API <../library/asyncio-api-index>` following deprecation in "
"Python 3.8.  The motivation behind this change is multifold:"
msgstr ""
"在 Python 3.8 棄用後，``loop`` 參數已從大部分 :mod:`asyncio` 的 :doc:`high-"
"level API <../library/asyncio-api-index>` "
"中移除。這種變化背後的動機是多方面的："

#: ../../whatsnew/3.10.rst:1833
#, fuzzy
msgid "This simplifies the high-level API."
msgstr "這簡化了高階 API。"

#: ../../whatsnew/3.10.rst:1834
#, fuzzy
msgid ""
"The functions in the high-level API have been implicitly getting the current "
"thread's running event loop since Python 3.7.  There isn't a need to pass "
"the event loop to the API in most normal use cases."
msgstr ""
"從 Python 3.7 開始，高階 API "
"中的函式已經隱式獲取當前執行緒的運行事件循環。在大多數正常用例中，"
"不需要將事件循環傳遞給 API。"

#: ../../whatsnew/3.10.rst:1837
#, fuzzy
msgid ""
"Event loop passing is error-prone especially when dealing with loops running "
"in different threads."
msgstr "事件循環傳遞很容易出錯，尤其是在處理在不同執行緒中運行的循環時。"

#: ../../whatsnew/3.10.rst:1840
#, fuzzy
msgid ""
"Note that the low-level API will still accept ``loop``. See :ref:`changes-"
"python-api` for examples of how to replace existing code."
msgstr "請注意，低階 API 仍將接受 ``loop``。有關如何替換現有程式碼的示例，請參閱 :ref"
":`changes-python-api`。"

#: ../../whatsnew/3.10.rst:1843 ../../whatsnew/3.10.rst:1915
#, fuzzy
msgid ""
"(Contributed by Yurii Karabas, Andrew Svetlov, Yury Selivanov and Kyle "
"Stanley in :issue:`42392`.)"
msgstr ""
"（由 Yurii Karabas、Andrew Svetlov、Yury Selivanov 和 Kyle Stanley 在 "
":issue:`42392` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1848 ../../whatsnew/3.10.rst:2135
#, fuzzy
msgid "Porting to Python 3.10"
msgstr "移植到 Python 3.10"

#: ../../whatsnew/3.10.rst:1850
#, fuzzy
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr "本節列出了先前描述的更改和其他可能需要更改程式碼的錯誤修復。"

#: ../../whatsnew/3.10.rst:1855
#, fuzzy
msgid "Changes in the Python syntax"
msgstr "Python 語法的變化"

#: ../../whatsnew/3.10.rst:1857
#, fuzzy
msgid ""
"Deprecation warning is now emitted when compiling previously valid syntax if "
"the numeric literal is immediately followed by a keyword (like in ``0in "
"x``). In future releases it will be changed to syntax warning, and finally "
"to a syntax error.  To get rid of the warning and make the code compatible "
"with future releases just add a space between the numeric literal and the "
"following keyword. (Contributed by Serhiy Storchaka in :issue:`43833`.)"
msgstr ""
"如果數字文字後緊跟關鍵字（如“0in x”），則在編譯以前有效的語法時會發出棄用警告"
"。在未來的版本中，它將更改為語法警告，最後更改為語法錯誤。要消除警告並使程式"
"碼與未來版本相容，只需在數字文字和以下關鍵字之間新增一個空格。 （由 Serhiy "
"Storchaka 在 :issue:`43833` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1868
#, fuzzy
msgid "Changes in the Python API"
msgstr "Python API 的變化"

#: ../../whatsnew/3.10.rst:1870
#, fuzzy
msgid ""
"The *etype* parameters of the :func:`~traceback.format_exception`, :func:"
"`~traceback.format_exception_only`, and :func:`~traceback.print_exception` "
"functions in the :mod:`traceback` module have been renamed to *exc*. "
"(Contributed by Zackery Spytz and Matthias Bussonnier in :issue:`26389`.)"
msgstr ""
":func:`~traceback.format_exception`、:func:`~traceback.format_exception_only`"
" 和 :func:`~traceback.print_exception` 模組中的 *etype* 參數已重命名到*exc*。"
" （由 Zackery Spytz 和 Matthias Bussonnier 在 :issue:`26389` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1876
#, fuzzy
msgid ""
":mod:`atexit`: At Python exit, if a callback registered with :func:`atexit."
"register` fails, its exception is now logged. Previously, only some "
"exceptions were logged, and the last exception was always silently ignored. "
"(Contributed by Victor Stinner in :issue:`42639`.)"
msgstr ""
":mod:`atexit`：在 Python 退出時，如果使用 :func:`atexit.register` 註冊的回呼"
"失敗，現在會記錄其例外。以前，只記錄一些例外，最後一個例外總是被默默地忽略。 "
"（由 Victor Stinner 在 :issue:`42639` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1882
#, fuzzy
msgid ""
":class:`collections.abc.Callable` generic now flattens type parameters, "
"similar to what :data:`typing.Callable` currently does.  This means that "
"``collections.abc.Callable[[int, str], str]`` will have ``__args__`` of "
"``(int, str, str)``; previously this was ``([int, str], str)``.  Code which "
"accesses the arguments via :func:`typing.get_args` or ``__args__`` need to "
"account for this change.  Furthermore, :exc:`TypeError` may be raised for "
"invalid forms of parameterizing :class:`collections.abc.Callable` which may "
"have passed silently in Python 3.9. (Contributed by Ken Jin in :issue:"
"`42195`.)"
msgstr ""
":class:`collections.abc.Callable` 泛型現在扁平化型別參數，類似於 "
":data:`typing.Callable` 目前所做的。這意味著 ``collections.abc.Callable[["
"int, str], str]`` 將有 ``__args__`` of ``(int, str, str)``；以前這是``([int, "
"str], str)``。通過 :func:`typing.get_args` 或 ``__args__`` "
"訪問參數的程式碼需要考慮到這一變化。此外，:exc:`TypeError` "
"可能會因無效形式的參數化 :class:`collections.abc.Callable` 而引發，"
"這可能已在 Python 3.9 中靜默傳遞。 （由 Ken Jin 在 :issue:`42195` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1892
#, fuzzy
msgid ""
":meth:`socket.htons` and :meth:`socket.ntohs` now raise :exc:`OverflowError` "
"instead of :exc:`DeprecationWarning` if the given parameter will not fit in "
"a 16-bit unsigned integer. (Contributed by Erlend E. Aasland in :issue:"
"`42393`.)"
msgstr ""
":meth:`socket.htons` 和 :meth:`socket.ntohs` 現在引發 :exec:`OverflowError` "
"而不是 :exc:`DeprecationWarning` 如果給定的參數不適合 16 位無符號整數。 （由 "
"Erlend E. Aasland 在 :issue:`42393` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1897
#, fuzzy
msgid ""
"The ``loop`` parameter has been removed from most of :mod:`asyncio`\\ 's :"
"doc:`high-level API <../library/asyncio-api-index>` following deprecation in "
"Python 3.8."
msgstr ""
"在 Python 3.8 棄用後，``loop`` 參數已從大部分 :mod:`asyncio` 的 :doc:`high-"
"level API <../library/asyncio-api-index>` 中移除。"

#: ../../whatsnew/3.10.rst:1901
#, fuzzy
msgid "A coroutine that currently looks like this::"
msgstr "目前看起來像這樣的協程::"

#: ../../whatsnew/3.10.rst:1906
#, fuzzy
msgid "Should be replaced with this::"
msgstr "應該替換成這個::"

#: ../../whatsnew/3.10.rst:1911
#, fuzzy
msgid ""
"If ``foo()`` was specifically designed *not* to run in the current thread's "
"running event loop (e.g. running in another thread's event loop), consider "
"using :func:`asyncio.run_coroutine_threadsafe` instead."
msgstr ""
"如果 ``foo()`` 是專門設計*不*在當前執行緒的運行事件循環中運行（例如，在另一個"
"執行緒的事件循環中運行），請考慮改用 asyncio.run_coroutine_threadsafe。"

#: ../../whatsnew/3.10.rst:1918
#, fuzzy
msgid ""
"The :data:`types.FunctionType` constructor now inherits the current builtins "
"if the *globals* dictionary has no ``\"__builtins__\"`` key, rather than "
"using ``{\"None\": None}`` as builtins: same behavior as :func:`eval` and :"
"func:`exec` functions.  Defining a function with ``def function(...): ...`` "
"in Python is not affected, globals cannot be overridden with this syntax: it "
"also inherits the current builtins. (Contributed by Victor Stinner in :issue:"
"`42990`.)"
msgstr ""
"如果 *globals* 字典沒有 ``\"__builtins__\"`` 鍵，則 :data:`types."
"FunctionType` 構造函式現在繼承當前內建函式，而不是使用 ``{\"None\": None}`` "
"作為內建函式：相同作為 :func:`eval` 和 :func:`exec` 函式的行為。使用 ``def "
"function(...): ...`` 在 Python 中定義一個函式不受影響，全局變數不能用這種語法"
"覆蓋：它也繼承了當前的內建函式。 （由 Victor Stinner 在 :issue:`42990` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:1927
msgid "Changes in the C API"
msgstr "C API 中的改動"

#: ../../whatsnew/3.10.rst:1929
#, fuzzy
msgid ""
"The C API functions ``PyParser_SimpleParseStringFlags``, "
"``PyParser_SimpleParseStringFlagsFilename``, "
"``PyParser_SimpleParseFileFlags``, ``PyNode_Compile`` and the type used by "
"these functions, ``struct _node``, were removed due to the switch to the new "
"PEG parser."
msgstr "由於切換到新的 PEG 解析器。"

#: ../../whatsnew/3.10.rst:1935
#, fuzzy
msgid ""
"Source should be now be compiled directly to a code object using, for "
"example, :c:func:`Py_CompileString`. The resulting code object can then be "
"evaluated using, for example, :c:func:`PyEval_EvalCode`."
msgstr ""
"現在應該使用 :c:func:`Py_CompileString` "
"將源程式碼直接編譯為程式碼物件。然後可以使用例如 :c:func:`PyEval_EvalCode` "
"來評估生成的程式碼物件。"

#: ../../whatsnew/3.10.rst:1939
#, fuzzy
msgid "Specifically:"
msgstr "具體來說："

#: ../../whatsnew/3.10.rst:1941
#, fuzzy
msgid ""
"A call to ``PyParser_SimpleParseStringFlags`` followed by ``PyNode_Compile`` "
"can be replaced by calling :c:func:`Py_CompileString`."
msgstr ""
"呼叫 ``PyParser_SimpleParseStringFlags`` 後跟 ``PyNode_Compile`` "
"可以通過呼叫 :c:func:`Py_CompileString` 來代替。"

#: ../../whatsnew/3.10.rst:1944
#, fuzzy
msgid ""
"There is no direct replacement for ``PyParser_SimpleParseFileFlags``. To "
"compile code from a ``FILE *`` argument, you will need to read the file in C "
"and pass the resulting buffer to :c:func:`Py_CompileString`."
msgstr ""
"沒有直接替代``PyParser_SimpleParseFileFlags``。要從 ``FILE *`` "
"參數編譯程式碼，您需要在 C "
"中讀取文件並將生成的緩衝區傳遞給:c:func:`Py_CompileString`。"

#: ../../whatsnew/3.10.rst:1948
#, fuzzy
msgid ""
"To compile a file given a ``char *`` filename, explicitly open the file, "
"read it and compile the result. One way to do this is using the :py:mod:`io` "
"module with :c:func:`PyImport_ImportModule`, :c:func:`PyObject_CallMethod`, :"
"c:func:`PyBytes_AsString` and :c:func:`Py_CompileString`, as sketched below. "
"(Declarations and error handling are omitted.) ::"
msgstr ""
"要編譯給定 ``char *`` 文件名的文件，顯式打開該文件，讀取它並編譯結果。"
"一種方法是將 :py:mod:`io` 模組與 :c:func:`PyImport_ImportModule`、:c:func:`Py"
"Object_CallMethod`、:c:func:`PyBytes_AsString` 和 :c:func 一起使用： "
"`Py_CompileString`，如下所示。 （省略了聲明和錯誤處理。）::"

#: ../../whatsnew/3.10.rst:1961
#, fuzzy
msgid ""
"For ``FrameObject`` objects, the ``f_lasti`` member now represents a "
"wordcode offset instead of a simple offset into the bytecode string. This "
"means that this number needs to be multiplied by 2 to be used with APIs that "
"expect a byte offset instead (like :c:func:`PyCode_Addr2Line` for example). "
"Notice as well that the ``f_lasti`` member of ``FrameObject`` objects is not "
"considered stable: please use :c:func:`PyFrame_GetLineNumber` instead."
msgstr ""
"對於 ``FrameObject`` 物件，``f_lasti`` "
"成員現在表示字碼偏移量，而不是位元組碼字串中的簡單偏移量。"
"這意味著這個數字需要乘以 2 才能與期望位元組偏移量的 API "
"一起使用（例如 :c:func:`PyCode_Addr2Line`）。還要注意，``FrameObject`` "
"物件的``f_lasti`` "
"成員被認為是不穩定的：請改用:c:func:`PyFrame_GetLineNumber`。"

#: ../../whatsnew/3.10.rst:1969
#, fuzzy
msgid "CPython bytecode changes"
msgstr "CPython 位元組碼更改"

#: ../../whatsnew/3.10.rst:1971
#, fuzzy
msgid ""
"The ``MAKE_FUNCTION`` instruction now accepts either a dict or a tuple of "
"strings as the function's annotations. (Contributed by Yurii Karabas and "
"Inada Naoki in :issue:`42202`.)"
msgstr ""
"``MAKE_FUNCTION`` 指令現在接受字典或字串元組作為函式的註釋。 （由 Yurii "
"Karabas 和 Inada Naoki 在 :issue:`42202` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1976
#, fuzzy
msgid "Build Changes"
msgstr "構建更改"

#: ../../whatsnew/3.10.rst:1978
#, fuzzy
msgid ""
":pep:`644`: Python now requires OpenSSL 1.1.1 or newer. OpenSSL 1.0.2 is no "
"longer supported. (Contributed by Christian Heimes in :issue:`43669`.)"
msgstr ""
":pep:`644`: Python 現在需要 OpenSSL 1.1.1 或更新版本。不再支援 OpenSSL 1.0."
"2。 （由 Christian Heimes 在 :issue:`43669` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1982
#, fuzzy
msgid ""
"The C99 functions :c:func:`snprintf` and :c:func:`vsnprintf` are now "
"required to build Python. (Contributed by Victor Stinner in :issue:`36020`.)"
msgstr ""
"現在需要 C99 函式 :c:func:`snprintf` 和 :c:func:`vsnprintf` 來構建 Python。 "
"（由 Victor Stinner 在 :issue:`36020` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1986
#, fuzzy
msgid ""
":mod:`sqlite3` requires SQLite 3.7.15 or higher. (Contributed by Sergey "
"Fedoseev and Erlend E. Aasland in :issue:`40744` and :issue:`40810`.)"
msgstr ""
":mod:`sqlite3` 需要 SQLite 3.7.15 或更高版本。 （由 Sergey Fedoseev 和 "
"Erlend E. Aasland 在 :issue:`40744` 和 :issue:`40810` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1989
#, fuzzy
msgid ""
"The :mod:`atexit` module must now always be built as a built-in module. "
"(Contributed by Victor Stinner in :issue:`42639`.)"
msgstr ":mod:`atexit` 模組現在必須始終構建為內建模組。 （由 Victor Stinner 在 "
":issue:`42639` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1992
#, fuzzy
msgid ""
"Add :option:`--disable-test-modules` option to the ``configure`` script: "
"don't build nor install test modules. (Contributed by Xavier de Gaye, Thomas "
"Petazzoni and Peixing Xin in :issue:`27640`.)"
msgstr ""
"將 :option:`--disable-test-modules` 選項新增到 `configure`` "
"腳本：不要構建或安裝測試模組。 （由 Xavier de Gaye、Thomas Petazzoni 和 "
"Peixing Xin 在 :issue:`27640` 中貢獻。）"

#: ../../whatsnew/3.10.rst:1996
#, fuzzy
msgid ""
"Add :option:`--with-wheel-pkg-dir=PATH option <--with-wheel-pkg-dir>` to the "
"``./configure`` script. If specified, the :mod:`ensurepip` module looks for "
"``setuptools`` and ``pip`` wheel packages in this directory: if both are "
"present, these wheel packages are used instead of ensurepip bundled wheel "
"packages."
msgstr ""
"新增 :option:`--with-wheel-pkg-dir=PATH 選項 <--with-wheel-pkg-dir>` 到 "
"`./configure`` 腳本。如果指定，:mod:`ensurepip` 模組會在此目錄中查找 "
"``setuptools`` 和 ``pip`` wheel 包：如果兩者都存在，則使用這些 wheel "
"包而不是 ensurepip 捆綁的 wheel 包。"

#: ../../whatsnew/3.10.rst:2002
#, fuzzy
msgid ""
"Some Linux distribution packaging policies recommend against bundling "
"dependencies. For example, Fedora installs wheel packages in the ``/usr/"
"share/python-wheels/`` directory and don't install the ``ensurepip."
"_bundled`` package."
msgstr ""
"一些 Linux 發行版打包策略建議不要捆綁依賴項。例如，Fedora 在“/usr/share/"
"python-wheels/”目錄中安裝 wheel 包，而不安裝“ensurepip._bundled”包。"

#: ../../whatsnew/3.10.rst:2007
#, fuzzy
msgid "(Contributed by Victor Stinner in :issue:`42856`.)"
msgstr "（由 Victor Stinner 在 :issue:`42856` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2009
#, fuzzy
msgid ""
"Add a new :option:`configure --without-static-libpython option <--without-"
"static-libpython>` to not build the ``libpythonMAJOR.MINOR.a`` static "
"library and not install the ``python.o`` object file."
msgstr ""
"新增一個新的 :option:`configure --without-static-libpython 選項 <--without-"
"static-libpython>` 以不構建 ``libpythonMAJOR.MINOR.a`` 靜態庫並且不安裝 ``"
"python.o `` 目標文件。"

#: ../../whatsnew/3.10.rst:2013
#, fuzzy
msgid "(Contributed by Victor Stinner in :issue:`43103`.)"
msgstr "（由 Victor Stinner 在 :issue:`43103` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2015
#, fuzzy
msgid ""
"The ``configure`` script now uses the ``pkg-config`` utility, if available, "
"to detect the location of Tcl/Tk headers and libraries.  As before, those "
"locations can be explicitly specified with the ``--with-tcltk-includes`` and "
"``--with-tcltk-libs`` configuration options. (Contributed by Manolis "
"Stamatogiannakis in :issue:`42603`.)"
msgstr ""
"``configure`` 腳本現在使用 ``pkg-config`` 實用程式（如果可用）來檢測 Tcl/Tk "
"標頭和庫的位置。和以前一樣，可以使用 ``--with-tcltk-includes`` 和“--with-tcltk-"
"libs”配置選項顯式指定這些位置。 （由 Manolis Stamatogiannakis 在 "
":issue:`42603` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2021
#, fuzzy
msgid ""
"Add :option:`--with-openssl-rpath` option to ``configure`` script. The "
"option simplifies building Python with a custom OpenSSL installation, e.g. "
"``./configure --with-openssl=/path/to/openssl --with-openssl-rpath=auto``. "
"(Contributed by Christian Heimes in :issue:`43466`.)"
msgstr ""
"將 :option:`--with-openssl-rpath` 選項新增到 ``configure`` 腳本。"
"該選項簡化了使用自定義 OpenSSL 安裝構建 Python，例如``./configure --with-"
"openssl=/path/to/openssl --with-openssl-rpath=auto``。 （由 Christian Heimes "
"在 :issue:`43466` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2028
#, fuzzy
msgid "C API Changes"
msgstr "C API 更改"

#: ../../whatsnew/3.10.rst:2031
#, fuzzy
msgid "PEP 652: Maintaining the Stable ABI"
msgstr "PEP 652：維持穩定的 ABI"

#: ../../whatsnew/3.10.rst:2033
#, fuzzy
msgid ""
"The Stable ABI (Application Binary Interface) for extension modules or "
"embedding Python is now explicitly defined. :ref:`stable` describes C API "
"and ABI stability guarantees along with best practices for using the Stable "
"ABI."
msgstr ""
"用於擴充模組或嵌入 Python 的穩定 ABI（應用程式二進制介面）現已明確定義。 "
":ref:`stable` 描述了 C API 和 ABI 穩定性保證以及使用穩定 ABI 的最佳實踐。"

#: ../../whatsnew/3.10.rst:2038
#, fuzzy
msgid "(Contributed by Petr Viktorin in :pep:`652` and :issue:`43795`.)"
msgstr "（由 Petr Viktorin 在 :pep:`652` 和 :issue:`43795` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2043
#, fuzzy
msgid ""
"The result of :c:func:`PyNumber_Index` now always has exact type :class:"
"`int`. Previously, the result could have been an instance of a subclass of "
"``int``. (Contributed by Serhiy Storchaka in :issue:`40792`.)"
msgstr ""
":c:func:`PyNumber_Index` 的結果現在始終具有精確型別 :class:`int`。以前，"
"結果可能是 ``int`` 的子類別的實例。 （由 Serhiy Storchaka 在 :issue:`40792` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:2047
#, fuzzy
msgid ""
"Add a new :c:member:`~PyConfig.orig_argv` member to the :c:type:`PyConfig` "
"structure: the list of the original command line arguments passed to the "
"Python executable. (Contributed by Victor Stinner in :issue:`23427`.)"
msgstr ""
"新增一個新的 :c:member:`~PyConfig.orig_argv` 成員到 :c:type:`PyConfig` 結構："
"傳遞給 Python 可執行文件的原始命令列參數列表。 （由 Victor Stinner 在 "
":issue:`23427` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2052
#, fuzzy
msgid ""
"The :c:func:`PyDateTime_DATE_GET_TZINFO` and :c:func:"
"`PyDateTime_TIME_GET_TZINFO` macros have been added for accessing the "
"``tzinfo`` attributes of :class:`datetime.datetime` and :class:`datetime."
"time` objects. (Contributed by Zackery Spytz in :issue:`30155`.)"
msgstr ""
"新增了 PyDateTime_DATE_GET_TZINFO 和 PyDateTime_TIME_GET_TZINFO 巨集，"
"用於訪問 datetime.datetime 和 datetime.time 物件的 tzinfo 屬性. （由 Zackery "
"Spytz 在 :issue:`30155` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2058
#, fuzzy
msgid ""
"Add a :c:func:`PyCodec_Unregister` function to unregister a codec search "
"function. (Contributed by Hai Shi in :issue:`41842`.)"
msgstr ""
"新增一個 :c:func:`PyCodec_Unregister` 函式來註銷編解碼器搜索函式。 （由 Hai "
"Shi 在 :issue:`41842` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2062
#, fuzzy
msgid ""
"The :c:func:`PyIter_Send` function was added to allow sending value into "
"iterator without raising ``StopIteration`` exception. (Contributed by "
"Vladimir Matveev in :issue:`41756`.)"
msgstr ""
"新增了:c:func:`PyIter_Send` "
"函式以允許將值發送到疊代器而不引發``StopIteration`` 例外。 （由 Vladimir "
"Matveev 在 :issue:`41756` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2066
#, fuzzy
msgid ""
"Add :c:func:`PyUnicode_AsUTF8AndSize` to the limited C API. (Contributed by "
"Alex Gaynor in :issue:`41784`.)"
msgstr ""
"將 :c:func:`PyUnicode_AsUTF8AndSize` 新增到有限的 C API。 （由 Alex Gaynor "
"在 :issue:`41784` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2069
#, fuzzy
msgid ""
"Add :c:func:`PyModule_AddObjectRef` function: similar to :c:func:"
"`PyModule_AddObject` but don't steal a reference to the value on success. "
"(Contributed by Victor Stinner in :issue:`1635741`.)"
msgstr ""
"新增 :c:func:`PyModule_AddObjectRef` 函式：類似於 "
":c:func:`PyModule_AddObject` 但成功時不要竊取對值的引用。 （由 Victor "
"Stinner 在 :issue:`1635741` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2074
#, fuzzy
msgid ""
"Add :c:func:`Py_NewRef` and :c:func:`Py_XNewRef` functions to increment the "
"reference count of an object and return the object. (Contributed by Victor "
"Stinner in :issue:`42262`.)"
msgstr ""
"新增 :c:func:`Py_NewRef` 和 :c:func:`Py_XNewRef` "
"函式以增加物件的引用計數並回傳物件。 （由 Victor Stinner 在 :issue:`42262` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:2078
#, fuzzy
msgid ""
"The :c:func:`PyType_FromSpecWithBases` and :c:func:"
"`PyType_FromModuleAndSpec` functions now accept a single class as the "
"*bases* argument. (Contributed by Serhiy Storchaka in :issue:`42423`.)"
msgstr ""
":c:func:`PyType_FromSpecWithBases` 和 :c:func:`PyType_FromModuleAndSpec` "
"函式現在接受單個類作為 *bases* 參數。 （由 Serhiy Storchaka 在 :issue:`42423`"
" 中貢獻。）"

#: ../../whatsnew/3.10.rst:2082
#, fuzzy
msgid ""
"The :c:func:`PyType_FromModuleAndSpec` function now accepts NULL ``tp_doc`` "
"slot. (Contributed by Hai Shi in :issue:`41832`.)"
msgstr ""
":c:func:`PyType_FromModuleAndSpec` 函式現在接受 NULL ``tp_doc`` 插槽。 （由 "
"Hai Shi 在 :issue:`41832` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2086
#, fuzzy
msgid ""
"The :c:func:`PyType_GetSlot` function can accept :ref:`static types <static-"
"types>`. (Contributed by Hai Shi and Petr Viktorin in :issue:`41073`.)"
msgstr ""
":c:func:`PyType_GetSlot` 函式可以接受 :ref:`靜態型別 <static-types>`。 （由 "
"Hai Shi 和 Petr Viktorin 在 :issue:`41073` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2090
#, fuzzy
msgid ""
"Add a new :c:func:`PySet_CheckExact` function to the C-API to check if an "
"object is an instance of :class:`set` but not an instance of a subtype. "
"(Contributed by Pablo Galindo in :issue:`43277`.)"
msgstr ""
"向 C-API 新增一個新的 :c:func:`PySet_CheckExact` 函式來檢查對像是否是 "
":class:`set` 的實例而不是子型別的實例。 （由 Pablo Galindo 在 :issue:`43277` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:2094
#, fuzzy
msgid ""
"Add :c:func:`PyErr_SetInterruptEx` which allows passing a signal number to "
"simulate. (Contributed by Antoine Pitrou in :issue:`43356`.)"
msgstr ""
"新增 :c:func:`PyErr_SetInterruptEx` 允許傳遞信號編號進行模擬。 （由 Antoine "
"Pitrou 在 :issue:`43356` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2098
#, fuzzy
msgid ""
"The limited C API is now supported if :ref:`Python is built in debug mode "
"<debug-build>` (if the ``Py_DEBUG`` macro is defined). In the limited C API, "
"the :c:func:`Py_INCREF` and :c:func:`Py_DECREF` functions are now "
"implemented as opaque function calls, rather than accessing directly the :c:"
"member:`PyObject.ob_refcnt` member, if Python is built in debug mode and the "
"``Py_LIMITED_API`` macro targets Python 3.10 or newer. It became possible to "
"support the limited C API in debug mode because the :c:type:`PyObject` "
"structure is the same in release and debug mode since Python 3.8 (see :issue:"
"`36465`)."
msgstr ""
"如果 :ref:`Python 是在除錯模式 <debug-build>` 中構建的（如果定義了 "
"``Py_DEBUG`` 巨集），現在支援有限的 C API。在有限的 C API "
"中，:c:func:`Py_INCREF` 和:c:func:`Py_DECREF` "
"函式現在實作為不透明函式呼叫，而不是直接訪問:c:member:`PyObject.ob_refcnt` "
"成員，如果 Python 是在除錯模式下構建的，並且 ``Py_LIMITED_API`` 巨集針對 "
"Python 3.10 或更新版本。在除錯模式下支援有限的 C API 成為可能，因為自 Python "
"3.8 以來 PyObject 結構在發布和除錯模式下是相同的（參見 :issue:`36465`）。"

#: ../../whatsnew/3.10.rst:2108
#, fuzzy
msgid ""
"The limited C API is still not supported in the :option:`--with-trace-refs` "
"special build (``Py_TRACE_REFS`` macro). (Contributed by Victor Stinner in :"
"issue:`43688`.)"
msgstr ""
":option:`--with-trace-refs` 特殊構建（``Py_TRACE_REFS`` 巨集）"
"中仍然不支援有限的 C API。 （由 Victor Stinner 在 :issue:`43688` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2112
#, fuzzy
msgid ""
"Add the :c:func:`Py_Is(x, y) <Py_Is>` function to test if the *x* object is "
"the *y* object, the same as ``x is y`` in Python. Add also the :c:func:"
"`Py_IsNone`, :c:func:`Py_IsTrue`, :c:func:`Py_IsFalse` functions to test if "
"an object is, respectively, the ``None`` singleton, the ``True`` singleton "
"or the ``False`` singleton. (Contributed by Victor Stinner in :issue:"
"`43753`.)"
msgstr ""
"新增 :c:func:`Py_Is(x, y) <Py_Is>` 函式來測試 *x* 對像是否是 *y* 物件，與 "
"Python 中的 ``x is y`` "
"相同。還新增:c:func:`Py_IsNone`、:c:func:`Py_IsTrue`、:c:func:`Py_IsFalse` "
"函式來分別測試一個對像是否是``None`` 單例、`` True`` 單例或 ``False`` 單例。 "
"（由 Victor Stinner 在 :issue:`43753` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2119
#, fuzzy
msgid ""
"Add new functions to control the garbage collector from C code: :c:func:"
"`PyGC_Enable()`, :c:func:`PyGC_Disable()`, :c:func:`PyGC_IsEnabled()`. These "
"functions allow to activate, deactivate and query the state of the garbage "
"collector from C code without having to import the :mod:`gc` module."
msgstr ""
"新增新函式以從 C 程式碼控制垃圾收集器：:c:func:`PyGC_Enable()`、:c:func:`PyGC"
"_Disable()`、:c:func:`PyGC_IsEnabled()`。這些函式允許從 C "
"程式碼激活、停用和查詢垃圾收集器的狀態，而無需導入 :mod:`gc` 模組。"

#: ../../whatsnew/3.10.rst:2126
#, fuzzy
msgid ""
"Add a new :c:data:`Py_TPFLAGS_DISALLOW_INSTANTIATION` type flag to disallow "
"creating type instances. (Contributed by Victor Stinner in :issue:`43916`.)"
msgstr ""
"新增一個新的 :c:data:`Py_TPFLAGS_DISALLOW_INSTANTIATION` "
"型別旗標以禁止建立型別實例。 （由 Victor Stinner 在 :issue:`43916` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2130
#, fuzzy
msgid ""
"Add a new :c:data:`Py_TPFLAGS_IMMUTABLETYPE` type flag for creating "
"immutable type objects: type attributes cannot be set nor deleted. "
"(Contributed by Victor Stinner and Erlend E. Aasland in :issue:`43908`.)"
msgstr ""
"新增一個新的 :c:data:`Py_TPFLAGS_IMMUTABLETYPE` "
"型別旗標用於建立不可變型別物件：型別屬性不能設定也不能刪除。 （由 Victor "
"Stinner 和 Erlend E. Aasland 在 :issue:`43908` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2137
#, fuzzy
msgid ""
"The ``PY_SSIZE_T_CLEAN`` macro must now be defined to use :c:func:"
"`PyArg_ParseTuple` and :c:func:`Py_BuildValue` formats which use ``#``: "
"``es#``, ``et#``, ``s#``, ``u#``, ``y#``, ``z#``, ``U#`` and ``Z#``. See :"
"ref:`arg-parsing` and :pep:`353`. (Contributed by Victor Stinner in :issue:"
"`40943`.)"
msgstr ""
"``PY_SSIZE_T_CLEAN`` 巨集現在必須定義為使用 :c:func:`PyArg_ParseTuple` "
"和 :c:func:`Py_BuildValue` 格式，它們使用``#``: ``es#``, ``et# "
"``、``s#``、``u#``、``y#``、``z#``、``U#`` 和 ``Z#``。參見 :ref:`arg-parsing`"
" 和 :pep:`353`。 （由 Victor Stinner 在 :issue:`40943` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2143
#, fuzzy
msgid ""
"Since :c:func:`Py_REFCNT()` is changed to the inline static function, "
"``Py_REFCNT(obj) = new_refcnt`` must be replaced with ``Py_SET_REFCNT(obj, "
"new_refcnt)``: see :c:func:`Py_SET_REFCNT()` (available since Python 3.9). "
"For backward compatibility, this macro can be used::"
msgstr ""
"由於 :c:func:`Py_REFCNT()` 更改為內聯靜態函式，``Py_REFCNT(obj) = "
"new_refcnt`` 必須替換為 ``Py_SET_REFCNT(obj, new_refcnt)`` :ref:c:func： "
"`Py_SET_REFCNT()`（自 Python 3.9 起可用）。為了向後相容，可以使用這個巨集："

#: ../../whatsnew/3.10.rst:2152
#, fuzzy
msgid "(Contributed by Victor Stinner in :issue:`39573`.)"
msgstr "（由 Victor Stinner 在 :issue:`39573` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2154
#, fuzzy
msgid ""
"Calling :c:func:`PyDict_GetItem` without :term:`GIL` held had been allowed "
"for historical reason. It is no longer allowed. (Contributed by Victor "
"Stinner in :issue:`40839`.)"
msgstr ""
"由於歷史原因，允許在不持有 GIL 的情況下呼叫 PyDict_GetItem。它不再被允許。 （"
"由 Victor Stinner 在 :issue:`40839` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2158
#, fuzzy
msgid ""
"``PyUnicode_FromUnicode(NULL, size)`` and "
"``PyUnicode_FromStringAndSize(NULL, size)`` raise ``DeprecationWarning`` "
"now.  Use :c:func:`PyUnicode_New` to allocate Unicode object without initial "
"data. (Contributed by Inada Naoki in :issue:`36346`.)"
msgstr ""
"``PyUnicode_FromUnicode(NULL, size)`` 和 ``PyUnicode_FromStringAndSize(NULL, "
"size)`` 現在引發 ``DeprecationWarning``。使用 :c:func:`PyUnicode_New` "
"分配沒有初始資料的 Unicode 物件。 （由 Inada Naoki 在 :issue:`36346` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:2163
#, fuzzy
msgid ""
"The private ``_PyUnicode_Name_CAPI`` structure of the PyCapsule API "
"``unicodedata.ucnhash_CAPI`` has been moved to the internal C API. "
"(Contributed by Victor Stinner in :issue:`42157`.)"
msgstr ""
"PyCapsule API ``unicodedata.ucnhash_CAPI`` 的私有``_PyUnicode_Name_CAPI`` "
"結構已移至內部 C API。 （由 Victor Stinner 在 :issue:`42157` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2167
#, fuzzy
msgid ""
":c:func:`Py_GetPath`, :c:func:`Py_GetPrefix`, :c:func:`Py_GetExecPrefix`, :c:"
"func:`Py_GetProgramFullPath`, :c:func:`Py_GetPythonHome` and :c:func:"
"`Py_GetProgramName` functions now return ``NULL`` if called before :c:func:"
"`Py_Initialize` (before Python is initialized). Use the new :ref:`init-"
"config` API to get the :ref:`init-path-config`. (Contributed by Victor "
"Stinner in :issue:`42260`.)"
msgstr ""
":c:func:`Py_GetPath`、:c:func:`Py_GetPrefix`、:c:func:`Py_GetExecPrefix`、:c:"
"func:`Py_GetProgramFullPath`、:c:func:`Py_GetPythonHome` 和:c:func: "
"`Py_GetProgramName` 函式現在回傳 ``NULL`` 如果在 :c:func:`Py_Initialize` "
"之前呼叫（在 Python 初始化之前）。使用新的 :ref:`init-config` API 獲取 :ref"
":`init-path-config`。 （由 Victor Stinner 在 :issue:`42260` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2174
#, fuzzy
msgid ""
":c:func:`PyList_SET_ITEM`, :c:func:`PyTuple_SET_ITEM` and :c:func:"
"`PyCell_SET` macros can no longer be used as l-value or r-value. For "
"example, ``x = PyList_SET_ITEM(a, b, c)`` and ``PyList_SET_ITEM(a, b, c) = "
"x`` now fail with a compiler error. It prevents bugs like ``if "
"(PyList_SET_ITEM (a, b, c) < 0) ...`` test. (Contributed by Zackery Spytz "
"and Victor Stinner in :issue:`30459`.)"
msgstr ""
":c:func:`PyList_SET_ITEM`、:c:func:`PyTuple_SET_ITEM` 和 :c:func:`PyCell_SET`"
" 巨集不能再用作左值或右值。例如，``x = PyList_SET_ITEM(a, b, c)`` 和 "
"``PyList_SET_ITEM(a, b, c) = x`` 現在因編譯器錯誤而失敗。它可以防止錯誤，如 "
"``if (PyList_SET_ITEM (a, b, c) < 0) ...`` 測試。 （由 Zackery Spytz 和 "
"Victor Stinner 在 :issue:`30459` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2181
#, fuzzy
msgid ""
"The non-limited API files ``odictobject.h``, ``parser_interface.h``, "
"``picklebufobject.h``, ``pyarena.h``, ``pyctype.h``, ``pydebug.h``, ``pyfpe."
"h``, and ``pytime.h`` have been moved to the ``Include/cpython`` directory. "
"These files must not be included directly, as they are already included in "
"``Python.h``; see :ref:`api-includes`. If they have been included directly, "
"consider including ``Python.h`` instead. (Contributed by Nicholas Sim in :"
"issue:`35134`.)"
msgstr ""
"非限制性 API 文件``odictobject.h``、``parser_interface.h``、``picklebufobject"
".h``、``pyarena.h``、``pyctype.h``、``pydebug。 h``、``pyfpe.h`` 和``pytime."
"h`` 已移至``Include/cpython`` 目錄。這些文件不能直接包含，因為它們已經包含在 "
"``Python.h`` 中；參見 :ref:`api-includes`。如果它們已被直接包含，"
"請考慮改為包含 ``Python.h``。 （由 Nicholas Sim 在 :issue:`35134` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2189
#, fuzzy
msgid ""
"Use the :c:data:`Py_TPFLAGS_IMMUTABLETYPE` type flag to create immutable "
"type objects. Do not rely on :c:data:`Py_TPFLAGS_HEAPTYPE` to decide if a "
"type object is mutable or not; check if :c:data:`Py_TPFLAGS_IMMUTABLETYPE` "
"is set instead. (Contributed by Victor Stinner and Erlend E. Aasland in :"
"issue:`43908`.)"
msgstr ""
"使用 :c:data:`Py_TPFLAGS_IMMUTABLETYPE` 型別旗標來建立不可變型別物件。"
"不要依賴 :c:data:`Py_TPFLAGS_HEAPTYPE` "
"來決定型別對像是否可變；檢查是否設定了:c:data:`Py_TPFLAGS_IMMUTABLETYPE`。 （"
"由 Victor Stinner 和 Erlend E. Aasland 在 :issue:`43908` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2195
#, fuzzy
msgid ""
"The undocumented function ``Py_FrozenMain`` has been removed from the "
"limited API. The function is mainly useful for custom builds of Python. "
"(Contributed by Petr Viktorin in :issue:`26241`.)"
msgstr ""
"未記錄的函式``Py_FrozenMain`` 已從有限的 API 中刪除。該函式主要用於 Python "
"的自定義構建。 （由 Petr Viktorin 在 :issue:`26241` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2202
#, fuzzy
msgid ""
"The ``PyUnicode_InternImmortal()`` function is now deprecated and will be "
"removed in Python 3.12: use :c:func:`PyUnicode_InternInPlace` instead. "
"(Contributed by Victor Stinner in :issue:`41692`.)"
msgstr ""
"``PyUnicode_InternImmortal()`` 函式現已棄用，並將在 Python 3.12 中刪除："
"請改用 PyUnicode_InternInPlace。 （由 Victor Stinner 在 :issue:`41692` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:2210
#, fuzzy
msgid ""
"Removed ``Py_UNICODE_str*`` functions manipulating ``Py_UNICODE*`` strings. "
"(Contributed by Inada Naoki in :issue:`41123`.)"
msgstr ""
"刪除了操作 ``Py_UNICODE*`` 字串的 ``Py_UNICODE_str*`` 函式。 （由 Inada "
"Naoki 在 :issue:`41123` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2213
#, fuzzy
msgid ""
"``Py_UNICODE_strlen``: use :c:func:`PyUnicode_GetLength` or :c:macro:"
"`PyUnicode_GET_LENGTH`"
msgstr ""
"``Py_UNICODE_strlen``：使用 :c:func:`PyUnicode_GetLength` "
"或:c:macro:`PyUnicode_GET_LENGTH`"

#: ../../whatsnew/3.10.rst:2215
#, fuzzy
msgid ""
"``Py_UNICODE_strcat``: use :c:func:`PyUnicode_CopyCharacters` or :c:func:"
"`PyUnicode_FromFormat`"
msgstr ""
"``Py_UNICODE_strcat``：使用 :c:func:`PyUnicode_CopyCharacters` "
"或:c:func:`PyUnicode_FromFormat`"

#: ../../whatsnew/3.10.rst:2217
#, fuzzy
msgid ""
"``Py_UNICODE_strcpy``, ``Py_UNICODE_strncpy``: use :c:func:"
"`PyUnicode_CopyCharacters` or :c:func:`PyUnicode_Substring`"
msgstr ""
"``Py_UNICODE_strcpy``、``Py_UNICODE_strncpy``：使用 :c:func:`PyUnicode_CopyCh"
"aracters` 或 :c:func:`PyUnicode_Substring`"

#: ../../whatsnew/3.10.rst:2219
msgid "``Py_UNICODE_strcmp``: use :c:func:`PyUnicode_Compare`"
msgstr "``Py_UNICODE_strcmp``：使用 :c:func:`PyUnicode_Compare`"

#: ../../whatsnew/3.10.rst:2220
msgid "``Py_UNICODE_strncmp``: use :c:func:`PyUnicode_Tailmatch`"
msgstr "``Py_UNICODE_strncmp``：使用 :c:func:`PyUnicode_Tailmatch`"

#: ../../whatsnew/3.10.rst:2221
msgid ""
"``Py_UNICODE_strchr``, ``Py_UNICODE_strrchr``: use :c:func:"
"`PyUnicode_FindChar`"
msgstr ""
"``Py_UNICODE_strchr``, ``Py_UNICODE_strrchr``\\ ：使用 :c:func:`PyUnicode_FindChar`"

#: ../../whatsnew/3.10.rst:2224
#, fuzzy
msgid ""
"Removed ``PyUnicode_GetMax()``. Please migrate to new (:pep:`393`) APIs. "
"(Contributed by Inada Naoki in :issue:`41103`.)"
msgstr ""
"刪除了``PyUnicode_GetMax()``。請遷移到新的 (:pep:`393`) API。 （由 Inada "
"Naoki 在 :issue:`41103` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2227
#, fuzzy
msgid ""
"Removed ``PyLong_FromUnicode()``. Please migrate to :c:func:"
"`PyLong_FromUnicodeObject`. (Contributed by Inada Naoki in :issue:`41103`.)"
msgstr ""
"刪除了``PyLong_FromUnicode()``。請遷移到 :c:func:`PyLong_FromUnicodeObject`。"
" （由 Inada Naoki 在 :issue:`41103` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2230
#, fuzzy
msgid ""
"Removed ``PyUnicode_AsUnicodeCopy()``. Please use :c:func:"
"`PyUnicode_AsUCS4Copy` or :c:func:`PyUnicode_AsWideCharString` (Contributed "
"by Inada Naoki in :issue:`41103`.)"
msgstr ""
"刪除了``PyUnicode_AsUnicodeCopy()``。請使用 :c:func:`PyUnicode_AsUCS4Copy` "
"或 :c:func:`PyUnicode_AsWideCharString` （由 Inada Naoki 在 :issue:`41103` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:2234
#, fuzzy
msgid ""
"Removed ``_Py_CheckRecursionLimit`` variable: it has been replaced by "
"``ceval.recursion_limit`` of the :c:type:`PyInterpreterState` structure. "
"(Contributed by Victor Stinner in :issue:`41834`.)"
msgstr ""
"刪除了 ``_Py_CheckRecursionLimit`` 變數：它已被 PyInterpreterState 結構的 "
"``ceval.recursion_limit`` 取代。 （由 Victor Stinner 在 :issue:`41834` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:2238
#, fuzzy
msgid ""
"Removed undocumented macros ``Py_ALLOW_RECURSION`` and "
"``Py_END_ALLOW_RECURSION`` and the ``recursion_critical`` field of the :c:"
"type:`PyInterpreterState` structure. (Contributed by Serhiy Storchaka in :"
"issue:`41936`.)"
msgstr ""
"刪除了未記錄的巨集 ``Py_ALLOW_RECURSION`` 和 ``Py_END_ALLOW_RECURSION`` 以及 "
":c:type:`PyInterpreterState` 結構的 ``recursion_critical`` 欄位。 （由 "
"Serhiy Storchaka 在 :issue:`41936` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2243
#, fuzzy
msgid ""
"Removed the undocumented ``PyOS_InitInterrupts()`` function. Initializing "
"Python already implicitly installs signal handlers: see :c:member:`PyConfig."
"install_signal_handlers`. (Contributed by Victor Stinner in :issue:`41713`.)"
msgstr ""
"刪除了未記錄的 ``PyOS_InitInterrupts()`` 函式。初始化 Python "
"已經隱式安裝了信號處理程式：請參閱:c:member:`PyConfig."
"install_signal_handlers`。 （由 Victor Stinner 在 :issue:`41713` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2248
#, fuzzy
msgid ""
"Remove the ``PyAST_Validate()`` function. It is no longer possible to build "
"a AST object (``mod_ty`` type) with the public C API. The function was "
"already excluded from the limited C API (:pep:`384`). (Contributed by Victor "
"Stinner in :issue:`43244`.)"
msgstr ""
"刪除 ``PyAST_Validate()`` 函式。不再可能使用公開 C API 構建 AST "
"物件（``mod_ty`` 型別）。該函式已從有限的 C API (:pep:`384`) 中排除。 （由 "
"Victor Stinner 在 :issue:`43244` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2253
#, fuzzy
msgid "Remove the ``symtable.h`` header file and the undocumented functions:"
msgstr "刪除 ``symtable.h`` 標頭檔和未記錄的函式："

#: ../../whatsnew/3.10.rst:2255
msgid "``PyST_GetScope()``"
msgstr "``PyST_GetScope()``"

#: ../../whatsnew/3.10.rst:2256
msgid "``PySymtable_Build()``"
msgstr "``PySymtable_Build()``"

#: ../../whatsnew/3.10.rst:2257
msgid "``PySymtable_BuildObject()``"
msgstr "``PySymtable_BuildObject()``"

#: ../../whatsnew/3.10.rst:2258
msgid "``PySymtable_Free()``"
msgstr "``PySymtable_Free()``"

#: ../../whatsnew/3.10.rst:2259
msgid "``Py_SymtableString()``"
msgstr "``Py_SymtableString()``"

#: ../../whatsnew/3.10.rst:2260
msgid "``Py_SymtableStringObject()``"
msgstr "``Py_SymtableStringObject()``"

#: ../../whatsnew/3.10.rst:2262
#, fuzzy
msgid ""
"The ``Py_SymtableString()`` function was part the stable ABI by mistake but "
"it could not be used, because the ``symtable.h`` header file was excluded "
"from the limited C API."
msgstr ""
"``Py_SymtableString()`` 函式錯誤地成為穩定 ABI 的一部分，但無法使用，因為 "
"``symtable.h`` 標頭檔被排除在有限的 C API 之外。"

#: ../../whatsnew/3.10.rst:2266
#, fuzzy
msgid ""
"Use Python :mod:`symtable` module instead. (Contributed by Victor Stinner "
"in :issue:`43244`.)"
msgstr "請改用 Python :mod:`symtable` 模組。 （由 Victor Stinner 在 :issue:`43244` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:2269
#, fuzzy
msgid ""
"Remove :c:func:`PyOS_ReadlineFunctionPointer` from the limited C API headers "
"and from ``python3.dll``, the library that provides the stable ABI on "
"Windows. Since the function takes a ``FILE*`` argument, its ABI stability "
"cannot be guaranteed. (Contributed by Petr Viktorin in :issue:`43868`.)"
msgstr ""
"從有限的 C API 標頭和在 Windows 上提供穩定 ABI 的庫 ``python3.dll`` "
"中刪除 :c:func:`PyOS_ReadlineFunctionPointer`。由於該函式採用 ``FILE*`` "
"參數，因此無法保證其 ABI 穩定性。 （由 Petr Viktorin 在 :issue:`43868` "
"中貢獻。）"

#: ../../whatsnew/3.10.rst:2275
#, fuzzy
msgid ""
"Remove ``ast.h``, ``asdl.h``, and ``Python-ast.h`` header files. These "
"functions were undocumented and excluded from the limited C API. Most names "
"defined by these header files were not prefixed by ``Py`` and so could "
"create names conflicts. For example, ``Python-ast.h`` defined a ``Yield`` "
"macro which was conflict with the ``Yield`` name used by the Windows "
"``<winbase.h>`` header. Use the Python :mod:`ast` module instead. "
"(Contributed by Victor Stinner in :issue:`43244`.)"
msgstr ""
"刪除 ``ast.h``、``asdl.h`` 和 ``Python-ast.h`` 標頭檔。這些函式未記錄在案，"
"並被排除在有限的 C API 之外。這些標頭檔定義的大多數名稱都沒有以 ``Py`` "
"為前綴，因此可能會產生名稱衝突。例如，``Python-ast.h`` 定義了一個``Yield`` "
"巨集，它與 Windows ``<winbase.h>`` 標頭使用的``Yield`` 名稱衝突。請改用 "
"Python :mod:`ast` 模組。 （由 Victor Stinner 在 :issue:`43244` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2283
#, fuzzy
msgid ""
"Remove the compiler and parser functions using ``struct _mod`` type, because "
"the public AST C API was removed:"
msgstr "使用 struct _mod 型別刪除編譯器和解析器函式，因為公開 AST C API 已刪除："

#: ../../whatsnew/3.10.rst:2286
msgid "``PyAST_Compile()``"
msgstr "``PyAST_Compile()``"

#: ../../whatsnew/3.10.rst:2287
msgid "``PyAST_CompileEx()``"
msgstr "``PyAST_CompileEx()``"

#: ../../whatsnew/3.10.rst:2288
msgid "``PyAST_CompileObject()``"
msgstr "``PyAST_CompileObject()``"

#: ../../whatsnew/3.10.rst:2289
msgid "``PyFuture_FromAST()``"
msgstr "``PyFuture_FromAST()``"

#: ../../whatsnew/3.10.rst:2290
msgid "``PyFuture_FromASTObject()``"
msgstr "``PyFuture_FromASTObject()``"

#: ../../whatsnew/3.10.rst:2291
msgid "``PyParser_ASTFromFile()``"
msgstr "``PyParser_ASTFromFile()``"

#: ../../whatsnew/3.10.rst:2292
msgid "``PyParser_ASTFromFileObject()``"
msgstr "``PyParser_ASTFromFileObject()``"

#: ../../whatsnew/3.10.rst:2293
msgid "``PyParser_ASTFromFilename()``"
msgstr "``PyParser_ASTFromFilename()``"

#: ../../whatsnew/3.10.rst:2294
msgid "``PyParser_ASTFromString()``"
msgstr "``PyParser_ASTFromString()``"

#: ../../whatsnew/3.10.rst:2295
msgid "``PyParser_ASTFromStringObject()``"
msgstr "``PyParser_ASTFromStringObject()``"

#: ../../whatsnew/3.10.rst:2297
#, fuzzy
msgid ""
"These functions were undocumented and excluded from the limited C API. "
"(Contributed by Victor Stinner in :issue:`43244`.)"
msgstr "這些函式未記錄在案，並被排除在有限的 C API 之外。 （由 Victor Stinner 在 "
":issue:`43244` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2300
#, fuzzy
msgid "Remove the ``pyarena.h`` header file with functions:"
msgstr "刪除帶有函式的 ``pyarena.h`` 標頭檔："

#: ../../whatsnew/3.10.rst:2302
msgid "``PyArena_New()``"
msgstr "``PyArena_New()``"

#: ../../whatsnew/3.10.rst:2303
msgid "``PyArena_Free()``"
msgstr "``PyArena_Free()``"

#: ../../whatsnew/3.10.rst:2304
msgid "``PyArena_Malloc()``"
msgstr "``PyArena_Malloc()``"

#: ../../whatsnew/3.10.rst:2305
msgid "``PyArena_AddPyObject()``"
msgstr "``PyArena_AddPyObject()``"

#: ../../whatsnew/3.10.rst:2307
#, fuzzy
msgid ""
"These functions were undocumented, excluded from the limited C API, and were "
"only used internally by the compiler. (Contributed by Victor Stinner in :"
"issue:`43244`.)"
msgstr ""
"這些函式未記錄在案，被排除在有限的 C API 之外，並且僅由編譯器在內部使用。 （"
"由 Victor Stinner 在 :issue:`43244` 中貢獻。）"

#: ../../whatsnew/3.10.rst:2311
#, fuzzy
msgid ""
"The ``PyThreadState.use_tracing`` member has been removed to optimize "
"Python. (Contributed by Mark Shannon in :issue:`43760`.)"
msgstr ""
"``PyThreadState.use_tracing`` 成員已被刪除以最佳化 Python。 （由 Mark "
"Shannon 在 :issue:`43760` 中貢獻。）"
