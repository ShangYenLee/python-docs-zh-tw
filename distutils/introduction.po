# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-26 16:47+0000\n"
"PO-Revision-Date: 2018-05-23 14:34+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../distutils/introduction.rst:5
msgid "An Introduction to Distutils"
msgstr "Distutils 簡介"

#: ../../distutils/_setuptools_disclaimer.rst:3
#, fuzzy
msgid ""
"This document is being retained solely until the ``setuptools`` "
"documentation at https://setuptools.readthedocs.io/en/latest/setuptools.html "
"independently covers all of the relevant information currently included here."
msgstr ""
"本文檔僅保留到 https://setuptools.readthedocs.io/en/latest/setuptools.html "
"上的 ``setuptools``文檔獨立涵蓋當前包含在此處的所有相關資訊。"

#: ../../distutils/introduction.rst:9
#, fuzzy
msgid ""
"This document covers using the Distutils to distribute your Python modules, "
"concentrating on the role of developer/distributor: if you're looking for "
"information on installing Python modules, you should refer to the :ref:"
"`install-index` chapter."
msgstr ""
"本文檔介紹如何使用 Distutils 分發 Python "
"模組，重點關注開發人員/分發者的角色：如果您正在尋找有關安裝 Python "
"模組的資訊，您應該參考 :ref:`install-index` 一章。"

#: ../../distutils/introduction.rst:18
#, fuzzy
msgid "Concepts & Terminology"
msgstr "概念和術語"

#: ../../distutils/introduction.rst:20
#, fuzzy
msgid ""
"Using the Distutils is quite simple, both for module developers and for "
"users/administrators installing third-party modules.  As a developer, your "
"responsibilities (apart from writing solid, well-documented and well-tested "
"code, of course!) are:"
msgstr ""
"使用 Distutils 非常簡單，對於模組開發人員和安裝第三方模組的使用者/管理員來說"
"都是如此。作為一名開發人員，您的職責（當然除了編寫可靠、文檔齊全且經過良好測"
"試的程式碼！）是："

#: ../../distutils/introduction.rst:25
#, fuzzy
msgid "write a setup script (:file:`setup.py` by convention)"
msgstr "編寫安裝腳本（按照慣例 :file:`setup.py`）"

#: ../../distutils/introduction.rst:27
#, fuzzy
msgid "(optional) write a setup configuration file"
msgstr "（可選）編寫設定配置文件"

#: ../../distutils/introduction.rst:29
#, fuzzy
msgid "create a source distribution"
msgstr "建立源分發"

#: ../../distutils/introduction.rst:31
#, fuzzy
msgid "(optional) create one or more built (binary) distributions"
msgstr "（可選）建立一個或多個內建（二進位）分佈"

#: ../../distutils/introduction.rst:33
#, fuzzy
msgid "Each of these tasks is covered in this document."
msgstr "本文檔涵蓋了其中的每一項任務。"

#: ../../distutils/introduction.rst:35
#, fuzzy
msgid ""
"Not all module developers have access to a multitude of platforms, so it's "
"not always feasible to expect them to create a multitude of built "
"distributions.  It is hoped that a class of intermediaries, called "
"*packagers*, will arise to address this need.  Packagers will take source "
"distributions released by module developers, build them on one or more "
"platforms, and release the resulting built distributions.  Thus, users on "
"the most popular platforms will be able to install most popular Python "
"module distributions in the most natural way for their platform, without "
"having to run a single setup script or compile a line of code."
msgstr ""
"並非所有模組開發人員都可以訪問多種平台，因此期望他們建立多種內建發行版並不總"
"是可行的。希望出現一類稱為 *packagers* 的中介來解決這一需求。打包者將採用模組"
"開發人員發布的源程式碼分發，在一個或多個平台上構建它們，然後發布生成的構建分"
"發。因此，最流行平台上的使用者將能夠以最自然的方式為其平台安裝最流行的 "
"Python 模組發行版，而無需運行單個安裝腳本或編譯一行程式碼。"

#: ../../distutils/introduction.rst:49
msgid "A Simple Example"
msgstr "一個簡單範例"

#: ../../distutils/introduction.rst:51
#, fuzzy
msgid ""
"The setup script is usually quite simple, although since it's written in "
"Python, there are no arbitrary limits to what you can do with it, though you "
"should be careful about putting arbitrarily expensive operations in your "
"setup script. Unlike, say, Autoconf-style configure scripts, the setup "
"script may be run multiple times in the course of building and installing "
"your module distribution."
msgstr ""
"安裝腳本通常非常簡單，但由於它是用 Python 編寫的，因此您可以使用它執行的操作"
"沒有任意限制，但您應該小心不要在安裝腳本中放置任意昂貴的操作。與 Autoconf "
"風格的配置腳本不同，設定腳本可能會在構建和安裝模組分發的過程中運行多次。"

#: ../../distutils/introduction.rst:58
#, fuzzy
msgid ""
"If all you want to do is distribute a module called :mod:`foo`, contained in "
"a file :file:`foo.py`, then your setup script can be as simple as this::"
msgstr ""
"如果您只想分發一個名為 :mod:`foo` 的模組，該模組包含在一個文件 :file:`foo.py`"
" 中，那麼您的設定腳本可以像這樣簡單::"

#: ../../distutils/introduction.rst:67
#, fuzzy
msgid "Some observations:"
msgstr "一些觀察："

#: ../../distutils/introduction.rst:69
#, fuzzy
msgid ""
"most information that you supply to the Distutils is supplied as keyword "
"arguments to the :func:`setup` function"
msgstr "您提供給 Distutils 的大部分資訊都作為關鍵字參數提供給 :func:`setup` 函式"

#: ../../distutils/introduction.rst:72
#, fuzzy
msgid ""
"those keyword arguments fall into two categories: package metadata (name, "
"version number) and information about what's in the package (a list of pure "
"Python modules, in this case)"
msgstr "這些關鍵字參數分為兩類：包元資料（名稱、版本號）和有關包中內容的資訊（"
"在本例中為純 Python 模組列表）"

#: ../../distutils/introduction.rst:76
#, fuzzy
msgid ""
"modules are specified by module name, not filename (the same will hold true "
"for packages and extensions)"
msgstr "模組由模組名稱指定，而不是文件名（包和擴充也是如此）"

#: ../../distutils/introduction.rst:79
#, fuzzy
msgid ""
"it's recommended that you supply a little more metadata, in particular your "
"name, email address and a URL for the project (see section :ref:`setup-"
"script` for an example)"
msgstr "建議您提供更多的元資料，尤其是您的姓名、電子郵件地址和項目的 URL（有關示例，"
"請參見 :ref:`setup-script` 部分）"

#: ../../distutils/introduction.rst:83
#, fuzzy
msgid ""
"To create a source distribution for this module, you would create a setup "
"script, :file:`setup.py`, containing the above code, and run this command "
"from a terminal::"
msgstr "要為此模組建立源程式碼分發，您將建立一個包含上述程式碼的安裝腳本 :file:`setup"
".py`，並從終端運行此命令："

#: ../../distutils/introduction.rst:89
#, fuzzy
msgid ""
"For Windows, open a command prompt window (:menuselection:`Start --> "
"Accessories`) and change the command to::"
msgstr "對於 Windows，打開命令提示符窗口 (:menuselection:`Start --> Accessories`) "
"並將命令更改為："

#: ../../distutils/introduction.rst:94
#, fuzzy
msgid ""
":command:`sdist` will create an archive file (e.g., tarball on Unix, ZIP "
"file on Windows) containing your setup script :file:`setup.py`, and your "
"module :file:`foo.py`. The archive file will be named :file:`foo-1.0.tar.gz` "
"(or :file:`.zip`), and will unpack into a directory :file:`foo-1.0`."
msgstr ""
":command:`sdist` 將建立一個存檔文件（例如，Unix 上的 tarball，Windows 上的 "
"ZIP 文件），其中包含您的安裝腳本 :file:`setup.py` 和您的模組 :file:`foo."
"py`。存檔文件將命名為 :file:`foo-1.0.tar.gz`（或 :file:`."
"zip`），並將解壓到目錄 :file:`foo-1.0`。"

#: ../../distutils/introduction.rst:99
#, fuzzy
msgid ""
"If an end-user wishes to install your :mod:`foo` module, all they have to do "
"is download :file:`foo-1.0.tar.gz` (or :file:`.zip`), unpack it, and---from "
"the :file:`foo-1.0` directory---run ::"
msgstr ""
"如果最終使用者希望安裝您的 :mod:`foo` 模組，他們所要做的就是下載 :file:`foo-1"
".0.tar.gz`（或 :file:`.zip`），解壓它，和---從 :file:`foo-1.0` 目錄---運行::"

#: ../../distutils/introduction.rst:105
#, fuzzy
msgid ""
"which will ultimately copy :file:`foo.py` to the appropriate directory for "
"third-party modules in their Python installation."
msgstr "這最終會將 :file:`foo.py` 複製到第三方模組在其 Python 安裝中的適當目錄中。"

#: ../../distutils/introduction.rst:108
#, fuzzy
msgid ""
"This simple example demonstrates some fundamental concepts of the Distutils. "
"First, both developers and installers have the same basic user interface, i."
"e. the setup script.  The difference is which Distutils *commands* they use: "
"the :command:`sdist` command is almost exclusively for module developers, "
"while :command:`install` is more often for installers (although most "
"developers will want to install their own code occasionally)."
msgstr ""
"這個簡單的例子演示了 Distutils 的一些基本概念。首先，開發人員和安裝人員都具有"
"相同的基本使用者界面，即安裝腳本。不同之處在於他們使用的 Distutils "
"*命令*：:command:`sdist` 命令幾乎專供模組開發人員使用，而 :command:`install` "
"更常用於安裝程式（儘管大多數開發人員偶爾會希望安裝自己的程式碼)."

#: ../../distutils/introduction.rst:115
#, fuzzy
msgid ""
"Other useful built distribution formats are RPM, implemented by the :command:"
"`bdist_rpm` command, Solaris :program:`pkgtool` (:command:`bdist_pkgtool`), "
"and HP-UX :program:`swinstall` (:command:`bdist_sdux`).  For example, the "
"following command will create an RPM file called :file:`foo-1.0.noarch.rpm`::"
msgstr ""
"其他有用的內建分發格式是 RPM，由 :command:`bdist_rpm` "
"命令實作，Solaris :program:`pkgtool` (:command:`bdist_pkgtool`) 和 HP-"
"UX :program:`swinstall` (:command:` bdist_sdux`）。例如，"
"以下命令將建立一個名為 :file:`foo-1.0.noarch.rpm` 的 RPM 文件："

#: ../../distutils/introduction.rst:123
#, fuzzy
msgid ""
"(The :command:`bdist_rpm` command uses the :command:`rpm` executable, "
"therefore this has to be run on an RPM-based system such as Red Hat Linux, "
"SuSE Linux, or Mandrake Linux.)"
msgstr ""
"（:command:`bdist_rpm` 命令使用 :command:`rpm` 可執行文件，因此它必須在基於 "
"RPM 的系統上運行，例如 Red Hat Linux、SuSE Linux 或 Mandrake Linux。）"

#: ../../distutils/introduction.rst:127
#, fuzzy
msgid ""
"You can find out what distribution formats are available at any time by "
"running ::"
msgstr "您可以通過運行 :: 隨時找出可用的分發格式"

#: ../../distutils/introduction.rst:136
#, fuzzy
msgid "General Python terminology"
msgstr "通用 Python 術語"

#: ../../distutils/introduction.rst:138
#, fuzzy
msgid ""
"If you're reading this document, you probably have a good idea of what "
"modules, extensions, and so forth are.  Nevertheless, just to be sure that "
"everyone is operating from a common starting point, we offer the following "
"glossary of common Python terms:"
msgstr ""
"如果您正在閱讀本文檔，您可能對什麼是模組、擴充等等有一個很好的了解。儘管如此"
"，為了確保每個人都從一個共同的起點開始操作，我們提供了以下常見 Python "
"術語表："

#: ../../distutils/introduction.rst:146
msgid "module"
msgstr "模組"

#: ../../distutils/introduction.rst:144
#, fuzzy
msgid ""
"the basic unit of code reusability in Python: a block of code imported by "
"some other code.  Three types of modules concern us here: pure Python "
"modules, extension modules, and packages."
msgstr "Python 中程式碼可重用性的基本單元：由其他程式碼導入的程式碼塊。我們在這里關註"
"三種型別的模組：純 Python 模組、擴充模組和包。"

#: ../../distutils/introduction.rst:151
#, fuzzy
msgid "pure Python module"
msgstr "純 Python 模組"

#: ../../distutils/introduction.rst:149
#, fuzzy
msgid ""
"a module written in Python and contained in a single :file:`.py` file (and "
"possibly associated :file:`.pyc` files).  Sometimes referred to as a \"pure "
"module.\""
msgstr ""
"一個用 Python 編寫並包含在單個 :file:`.py` 文件中的模組（可能還有相關的 "
":file:`.pyc` 文件）。有時稱為“純模組”。"

#: ../../distutils/introduction.rst:159
#, fuzzy
msgid "extension module"
msgstr "擴充模組"

#: ../../distutils/introduction.rst:154
#, fuzzy
msgid ""
"a module written in the low-level language of the Python implementation: C/C+"
"+ for Python, Java for Jython. Typically contained in a single dynamically "
"loadable pre-compiled file, e.g. a shared object (:file:`.so`) file for "
"Python extensions on Unix, a DLL (given the :file:`.pyd` extension) for "
"Python extensions on Windows, or a Java class file for Jython extensions.  "
"(Note that currently, the Distutils only handles C/C++ extensions for "
"Python.)"
msgstr ""
"用 Python 實作的低階語言編寫的模組：Python 的 C/C++，Jython 的 "
"Java。通常包含在單個可動態加載的預編譯文件中，例如用於 Unix 上的 Python "
"擴充的共享物件 (:file:`.so`) 文件，用於 Windows 上的 Python 擴充的 DLL（具有 "
":file:`.pyd` 擴充名），或用於 Jython 擴充的 Java 類文件。 （請注意，目前，"
"Distutils 僅處理 Python 的 C/C++ 擴充。）"

#: ../../distutils/introduction.rst:164
#, fuzzy
msgid "package"
msgstr "包裹"

#: ../../distutils/introduction.rst:162
#, fuzzy
msgid ""
"a module that contains other modules; typically contained in a directory in "
"the filesystem and distinguished from other directories by the presence of a "
"file :file:`__init__.py`."
msgstr "包含其他模組的模組；通常包含在文件系統的目錄中，並通過文件 :file:`__init__."
"py` 與其他目錄區分開來。"

#: ../../distutils/introduction.rst:174
#, fuzzy
msgid "root package"
msgstr "根包"

#: ../../distutils/introduction.rst:167
#, fuzzy
msgid ""
"the root of the hierarchy of packages.  (This isn't really a package, since "
"it doesn't have an :file:`__init__.py` file.  But we have to call it "
"something.) The vast majority of the standard library is in the root "
"package, as are many small, standalone third-party modules that don't belong "
"to a larger module collection. Unlike regular packages, modules in the root "
"package can be found in many directories: in fact, every directory listed in "
"``sys.path`` contributes modules to the root package."
msgstr ""
"包層次結構的根。 （這不是真正的包，因為它沒有 :file:`__init__.py` 文件。但我"
"們必須給它起個名字。）絕大多數標準庫都在根包中，許多不屬於較大模組集合的小型"
"獨立第三方模組。與常規包不同，根包中的模組可以在許多目錄中找到：事實上，``sys"
".path`` 中列出的每個目錄都為根包提供了模組。"

#: ../../distutils/introduction.rst:179
#, fuzzy
msgid "Distutils-specific terminology"
msgstr "Distutils 特定術語"

#: ../../distutils/introduction.rst:181
#, fuzzy
msgid ""
"The following terms apply more specifically to the domain of distributing "
"Python modules using the Distutils:"
msgstr "以下術語更具體地適用於使用 Distutils 分發 Python 模組的領域："

#: ../../distutils/introduction.rst:190
#, fuzzy
msgid "module distribution"
msgstr "模組分佈"

#: ../../distutils/introduction.rst:185
#, fuzzy
msgid ""
"a collection of Python modules distributed together as a single downloadable "
"resource and meant to be installed *en masse*.  Examples of some well-known "
"module distributions are NumPy, SciPy, Pillow, or mxBase.  (This would be "
"called a *package*, except that term is already taken in the Python context: "
"a single module distribution may contain zero, one, or many Python packages.)"
msgstr ""
"Python 模組的集合作為一個可下載的資源一起分發，並打算 *en masse* 安裝。 "
"NumPy、SciPy、Pillow 或 mxBase 是一些知名模組發行版的示例。 （這將被稱為 "
"*package*，除了該術語已經在 Python 上下文中使用：單個模組分發可能包含零個、"
"一個或多個 Python 包。）"

#: ../../distutils/introduction.rst:194
#, fuzzy
msgid "pure module distribution"
msgstr "純模組分佈"

#: ../../distutils/introduction.rst:193
#, fuzzy
msgid ""
"a module distribution that contains only pure Python modules and packages. "
"Sometimes referred to as a \"pure distribution.\""
msgstr "僅包含純 Python 模組和包的模組分發。有時稱為“純發行版”。"

#: ../../distutils/introduction.rst:198
#, fuzzy
msgid "non-pure module distribution"
msgstr "非純模組分佈"

#: ../../distutils/introduction.rst:197
#, fuzzy
msgid ""
"a module distribution that contains at least one extension module.  "
"Sometimes referred to as a \"non-pure distribution.\""
msgstr "包含至少一個擴充模組的模組分佈。有時稱為“非純發行版”。"

#: ../../distutils/introduction.rst:202
#, fuzzy
msgid "distribution root"
msgstr "分佈根"

#: ../../distutils/introduction.rst:201
#, fuzzy
msgid ""
"the top-level directory of your source tree (or  source distribution); the "
"directory where :file:`setup.py` exists.  Generally  :file:`setup.py` will "
"be run from this directory."
msgstr ""
"源程式碼樹（或源程式碼分發）的頂級目錄； :file:`setup.py` 所在的目錄。通常 "
":file:`setup.py` 將從該目錄運行。"
