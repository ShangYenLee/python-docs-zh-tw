# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-20 18:08+0800\n"
"PO-Revision-Date: 2018-05-23 14:09+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.2.2\n"

#: ../../distutils/extending.rst:5
msgid "Extending Distutils"
msgstr "擴充 Distutil"

#: ../../distutils/_setuptools_disclaimer.rst:3
#, fuzzy
msgid ""
"This document is being retained solely until the ``setuptools`` "
"documentation at https://setuptools.readthedocs.io/en/latest/setuptools.html "
"independently covers all of the relevant information currently included here."
msgstr ""
"本文檔僅保留到 https://setuptools.readthedocs.io/en/latest/setuptools.html 上"
"的 ``setuptools``文檔獨立涵蓋當前包含在此處的所有相關資訊。"

#: ../../distutils/extending.rst:9
#, fuzzy
msgid ""
"Distutils can be extended in various ways.  Most extensions take the form of "
"new commands or replacements for existing commands.  New commands may be "
"written to support new types of platform-specific packaging, for example, "
"while replacements for existing commands may be made to modify details of "
"how the command operates on a package."
msgstr ""
"Distutils 可以通過多種方式擴充。大多數擴充都採用新命令或替換現有命令的形式。"
"例如，可以編寫新命令來支援新型別的特定於平台的打包，同時可以對現有命令進行替"
"換以修改命令如何在包上運行的細節。"

#: ../../distutils/extending.rst:15
#, fuzzy
msgid ""
"Most extensions of the distutils are made within :file:`setup.py` scripts "
"that want to modify existing commands; many simply add a few file extensions "
"that should be copied into packages in addition to :file:`.py` files as a "
"convenience."
msgstr ""
"distutils 的大多數擴充都是在想要修改現有命令的 setup.py 腳本中進行的；為了方"
"便起見，除了 :file:`.py` 文件之外，許多人只是簡單地新增一些應該複製到包中的文"
"件擴充名。"

#: ../../distutils/extending.rst:20
#, fuzzy
msgid ""
"Most distutils command implementations are subclasses of the :class:"
"`distutils.cmd.Command` class.  New commands may directly inherit from :"
"class:`Command`, while replacements often derive from :class:`Command` "
"indirectly, directly subclassing the command they are replacing.  Commands "
"are required to derive from :class:`Command`."
msgstr ""
"大多數 distutils 命令實作都是 distutils.cmd.Command 類的子類別。新命令可以直"
"接繼承自 :class:`Command`，而替換命令通常間接派生自 :class:`Command`，直接子"
"類別化它們正在替換的命令。命令需要派生自 :class:`Command`。"

#: ../../distutils/extending.rst:35
#, fuzzy
msgid "Integrating new commands"
msgstr "集成新命令"

#: ../../distutils/extending.rst:37
#, fuzzy
msgid ""
"There are different ways to integrate new command implementations into "
"distutils.  The most difficult is to lobby for the inclusion of the new "
"features in distutils itself, and wait for (and require) a version of Python "
"that provides that support.  This is really hard for many reasons."
msgstr ""
"有多種方法可以將新的命令實作集成到 distutils 中。最困難的是遊說將新功能包含"
"在 distutils 本身中，並等待（並要求）提供該支援的 Python 版本。這真的很難，原"
"因有很多。"

#: ../../distutils/extending.rst:42
#, fuzzy
msgid ""
"The most common, and possibly the most reasonable for most needs, is to "
"include the new implementations with your :file:`setup.py` script, and cause "
"the :func:`distutils.core.setup` function use them::"
msgstr ""
"最常見的，也可能是對大多數需求最合理的，是將新的實作包含在你的 setup.py 腳本"
"中，並讓 distutils.core.setup 函式使用它們::"

#: ../../distutils/extending.rst:57
#, fuzzy
msgid ""
"This approach is most valuable if the new implementations must be used to "
"use a particular package, as everyone interested in the package will need to "
"have the new command implementation."
msgstr ""
"如果必須使用新的實作來使用特定的包，則此方法最有價值，因為對包感興趣的每個人"
"都需要有新的命令實作。"

#: ../../distutils/extending.rst:61
#, fuzzy
msgid ""
"Beginning with Python 2.4, a third option is available, intended to allow "
"new commands to be added which can support existing :file:`setup.py` scripts "
"without requiring modifications to the Python installation.  This is "
"expected to allow third-party extensions to provide support for additional "
"packaging systems, but the commands can be used for anything distutils "
"commands can be used for.  A new configuration option, ``command_packages`` "
"(command-line option :option:`!--command-packages`), can be used to specify "
"additional packages to be searched for modules implementing commands.  Like "
"all distutils options, this can be specified on the command line or in a "
"configuration file.  This option can only be set in the ``[global]`` section "
"of a configuration file, or before any commands on the command line.  If set "
"in a configuration file, it can be overridden from the command line; setting "
"it to an empty string on the command line causes the default to be used.  "
"This should never be set in a configuration file provided with a package."
msgstr ""
"從 Python 2.4 開始，第三個選項可用，旨在允許新增新命令，這些命令可以支援現有"
"的 setup.py 腳本，而無需修改 Python 安裝。預計這將允許第三方擴充為其他打包系"
"統提供支援，但這些命令可用於 distutils 命令可用於的任何用途。一個新的配置選"
"項，``command_packages``（命令列選項 :option:`！--command-packages`），可用於"
"指定要搜索模組實作命令的其他包。與所有 distutils 選項一樣，這可以在命令列或配"
"置文件中指定。此選項只能在配置文件的“[global]”部分或命令列上的任何命令之前設"
"定。如果在配置文件中設定，則可以從命令列覆蓋；在命令列上將其設定為空字串會導"
"致使用預設值。這永遠不應該在隨包提供的配置文件中設定。"

#: ../../distutils/extending.rst:76
#, fuzzy
msgid ""
"This new option can be used to add any number of packages to the list of "
"packages searched for command implementations; multiple package names should "
"be separated by commas.  When not specified, the search is only performed in "
"the :mod:`distutils.command` package.  When :file:`setup.py` is run with the "
"option ``--command-packages distcmds,buildcmds``, however, the packages :mod:"
"`distutils.command`, :mod:`distcmds`, and :mod:`buildcmds` will be searched "
"in that order.  New commands are expected to be implemented in modules of "
"the same name as the command by classes sharing the same name.  Given the "
"example command line option above, the command :command:`bdist_openpkg` "
"could be implemented by the class :class:`distcmds.bdist_openpkg."
"bdist_openpkg` or :class:`buildcmds.bdist_openpkg.bdist_openpkg`."
msgstr ""
"這個新選項可用於將任意數量的包新增到搜索命令實作的包列表中；多個包名應該用逗"
"號分隔。如果未指定，則僅在 :mod:`distutils.command` 包中執行搜索。當 :file:"
"`setup.py` 使用選項 ``--command-packages distcmds,buildcmds`` 運行時，但是，"
"包 :mod:`distutils.command`、:mod:`distcmds` 和 :mod :`buildcmds` 將按該順序"
"搜索。新命令應在與命令同名的模組中由共享相同名稱的類實作。鑑於上面的示例命令"
"行選項，命令：command：`bdist_openpkg` 可以由類 :class:`distcmds."
"bdist_openpkg.bdist_openpkg` 或 :class:`buildcmds.bdist_openpkg."
"bdist_openpkg` 實作。"

#: ../../distutils/extending.rst:90
#, fuzzy
msgid "Adding new distribution types"
msgstr "新增新的分發型別"

#: ../../distutils/extending.rst:92
#, fuzzy
msgid ""
"Commands that create distributions (files in the :file:`dist/` directory) "
"need to add ``(command, filename)`` pairs to ``self.distribution."
"dist_files`` so that :command:`upload` can upload it to PyPI.  The "
"*filename* in the pair contains no path information, only the name of the "
"file itself.  In dry-run mode, pairs should still be added to represent what "
"would have been created."
msgstr ""
"建立分發的命令（dist/ 目錄中的文件）需要將 ``(command, filename)`` 對新增到 "
"``self.distribution.dist_files`` 以便 :command:`upload` 可以上傳它到 PyPI。該"
"對中的 *filename* 不包含路徑資訊，僅包含文件本身的名稱。在試運行模式下，仍應"
"新增對以表示將建立的內容。"
