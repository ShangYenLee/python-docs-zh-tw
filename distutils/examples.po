# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Leon H., 2017
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-20 18:08+0800\n"
"PO-Revision-Date: 2018-05-23 14:09+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.2.2\n"

#: ../../distutils/examples.rst:5
#, fuzzy
msgid "Distutils Examples"
msgstr "範例"

#: ../../distutils/_setuptools_disclaimer.rst:3
#, fuzzy
msgid ""
"This document is being retained solely until the ``setuptools`` "
"documentation at https://setuptools.readthedocs.io/en/latest/setuptools.html "
"independently covers all of the relevant information currently included here."
msgstr ""
"本文檔僅保留到 https://setuptools.readthedocs.io/en/latest/setuptools.html 上"
"的 ``setuptools``文檔獨立涵蓋當前包含在此處的所有相關資訊。"

#: ../../distutils/examples.rst:9
#, fuzzy
msgid ""
"This chapter provides a number of basic examples to help get started with "
"distutils.  Additional information about using distutils can be found in the "
"Distutils Cookbook."
msgstr ""
"本章提供了一些基本示例來幫助開始使用 distutils。有關使用 distutils 的其他資訊"
"可以在 Distutils Cookbook 中找到。"

#: ../../distutils/examples.rst:16
msgid "`Distutils Cookbook <https://wiki.python.org/moin/Distutils/Cookbook>`_"
msgstr ""
"`Distutils Cookbook <https://wiki.python.org/moin/Distutils/Cookbook>`_"

#: ../../distutils/examples.rst:17
#, fuzzy
msgid ""
"Collection of recipes showing how to achieve more control over distutils."
msgstr "顯示如何實作對 distutils 的更多控制的食譜集合。"

#: ../../distutils/examples.rst:23
#, fuzzy
msgid "Pure Python distribution (by module)"
msgstr "純 Python 發行版（按模組）"

#: ../../distutils/examples.rst:25
#, fuzzy
msgid ""
"If you're just distributing a couple of modules, especially if they don't "
"live in a particular package, you can specify them individually using the "
"``py_modules`` option in the setup script."
msgstr ""
"如果您只是分發幾個模組，特別是如果它們不在特定的包中，您可以使用安裝腳本中的 "
"``py_modules`` 選項單獨指定它們。"

#: ../../distutils/examples.rst:29
#, fuzzy
msgid ""
"In the simplest case, you'll have two files to worry about: a setup script "
"and the single module you're distributing, :file:`foo.py` in this example::"
msgstr ""
"在最簡單的情況下，您需要擔心兩個文件：一個設定腳本和您要分發的單個模組，在此"
"示例中為 :file:`foo.py`::"

#: ../../distutils/examples.rst:36
#, fuzzy
msgid ""
"(In all diagrams in this section, *<root>* will refer to the distribution "
"root directory.)  A minimal setup script to describe this situation would "
"be::"
msgstr ""
"（在本節的所有圖表中，*<root>* 將指代分髮根目錄。）描述這種情況的最小設定腳本"
"是："

#: ../../distutils/examples.rst:45
#, fuzzy
msgid ""
"Note that the name of the distribution is specified independently with the "
"``name`` option, and there's no rule that says it has to be the same as the "
"name of the sole module in the distribution (although that's probably a good "
"convention to follow).  However, the distribution name is used to generate "
"filenames, so you should stick to letters, digits, underscores, and hyphens."
msgstr ""
"請注意，發行版的名稱是使用 ``name`` 選項獨立指定的，並且沒有規定它必須與發行"
"版中唯一模組的名稱相同（儘管這可能是一個很好的約定).但是，發行版名稱用於生成"
"文件名，因此您應該堅持使用字母、數字、底線和連字元。"

#: ../../distutils/examples.rst:51
#, fuzzy
msgid ""
"Since ``py_modules`` is a list, you can of course specify multiple modules, "
"eg. if you're distributing modules :mod:`foo` and :mod:`bar`, your setup "
"might look like this::"
msgstr ""
"由於 ``py_modules`` 是一個列表，您當然可以指定多個模組，例如。如果您正在分發"
"模組 :mod:`foo` 和 :mod:`bar`，您的設定可能如下所示："

#: ../../distutils/examples.rst:60
#, fuzzy
msgid "and the setup script might be  ::"
msgstr "安裝腳本可能是 ::"

#: ../../distutils/examples.rst:68
#, fuzzy
msgid ""
"You can put module source files into another directory, but if you have "
"enough modules to do that, it's probably easier to specify modules by "
"package rather than listing them individually."
msgstr ""
"您可以將模組源文件放入另一個目錄，但如果您有足夠多的模組來執行此操作，則按包"
"指定模組可能比單獨列出它們更容易。"

#: ../../distutils/examples.rst:76
#, fuzzy
msgid "Pure Python distribution (by package)"
msgstr "純 Python 發行版（按包）"

#: ../../distutils/examples.rst:78
#, fuzzy
msgid ""
"If you have more than a couple of modules to distribute, especially if they "
"are in multiple packages, it's probably easier to specify whole packages "
"rather than individual modules.  This works even if your modules are not in "
"a package; you can just tell the Distutils to process modules from the root "
"package, and that works the same as any other package (except that you don't "
"have to have an :file:`__init__.py` file)."
msgstr ""
"如果您有多個模組要分發，尤其是當它們在多個包中時，指定整個包而不是單個模組可"
"能更容易。即使您的模組不在包中，這也能正常工作；你可以告訴 Distutils 從根包中"
"處理模組，這與任何其他包的工作方式相同（除了你不必有 :file:`__init__.py` 文"
"件）。"

#: ../../distutils/examples.rst:85
#, fuzzy
msgid "The setup script from the last example could also be written as  ::"
msgstr "上一個示例中的設定腳本也可以寫成 ::"

#: ../../distutils/examples.rst:93
#, fuzzy
msgid "(The empty string stands for the root package.)"
msgstr "（空字串代表根包。）"

#: ../../distutils/examples.rst:95
#, fuzzy
msgid ""
"If those two files are moved into a subdirectory, but remain in the root "
"package, e.g.::"
msgstr "如果這兩個文件被移動到一個子目錄中，但保留在根包中，例如："

#: ../../distutils/examples.rst:103
#, fuzzy
msgid ""
"then you would still specify the root package, but you have to tell the "
"Distutils where source files in the root package live::"
msgstr ""
"那麼您仍然會指定根包，但是您必須告訴 Distutils 根包中的源文件所在的位置："

#: ../../distutils/examples.rst:113
#, fuzzy
msgid ""
"More typically, though, you will want to distribute multiple modules in the "
"same package (or in sub-packages).  For example, if the :mod:`foo`  and :mod:"
"`bar` modules belong in package :mod:`foobar`, one way to layout your source "
"tree is ::"
msgstr ""
"不過，更典型的情況是，您會希望在同一個包（或子包）中分發多個模組。例如，如"
"果 :mod:`foo` 和 :mod:`bar` 模組屬於包 :mod:`foobar`，佈局源程式碼樹的一種方"
"法是 ::"

#: ../../distutils/examples.rst:125
#, fuzzy
msgid ""
"This is in fact the default layout expected by the Distutils, and the one "
"that requires the least work to describe in your setup script::"
msgstr ""
"這實際上是 Distutils 期望的預設佈局，也是在安裝腳本中需要最少工作來描述的佈"
"局："

#: ../../distutils/examples.rst:134
#, fuzzy
msgid ""
"If you want to put modules in directories not named for their package, then "
"you need to use the ``package_dir`` option again.  For example, if the :file:"
"`src` directory holds modules in the :mod:`foobar` package::"
msgstr ""
"如果你想把模組放在不是以它們的包命名的目錄中，那麼你需要再次使用 "
"``package_dir`` 選項。例如，如果 :file:`src` 目錄包含 :mod:`foobar` 包中的模"
"組："

#: ../../distutils/examples.rst:145
#, fuzzy
msgid "an appropriate setup script would be  ::"
msgstr "一個合適的安裝腳本應該是 ::"

#: ../../distutils/examples.rst:154
#, fuzzy
msgid ""
"Or, you might put modules from your main package right in the distribution "
"root::"
msgstr "或者，您可以將主包中的模組放在分髮根目錄中::"

#: ../../distutils/examples.rst:163
#, fuzzy
msgid "in which case your setup script would be  ::"
msgstr "在這種情況下，您的安裝腳本將是 ::"

#: ../../distutils/examples.rst:172
#, fuzzy
msgid "(The empty string also stands for the current directory.)"
msgstr "（空字串也代表當前目錄。）"

#: ../../distutils/examples.rst:174
#, fuzzy
msgid ""
"If you have sub-packages, they must be explicitly listed in ``packages``, "
"but any entries in ``package_dir`` automatically extend to sub-packages. (In "
"other words, the Distutils does *not* scan your source tree, trying to "
"figure out which directories correspond to Python packages by looking for :"
"file:`__init__.py` files.)  Thus, if the default layout grows a sub-package::"
msgstr ""
"如果你有子包，它們必須明確地列在 ``packages`` 中，但是 ``package_dir`` 中的任"
"何條目都會自動擴充到子包。 （換句話說，Distutils *不* 掃描您的源程式碼樹，試"
"圖通過查找 :file:`__init__.py` 文件找出哪些目錄對應於 Python 包。）因此，如果"
"預設佈局增長一個子 -包裹：："

#: ../../distutils/examples.rst:190
#, fuzzy
msgid "then the corresponding setup script would be  ::"
msgstr "那麼相應的設定腳本將是 ::"

#: ../../distutils/examples.rst:202
#, fuzzy
msgid "Single extension module"
msgstr "單擴充模組"

#: ../../distutils/examples.rst:204
#, fuzzy
msgid ""
"Extension modules are specified using the ``ext_modules`` option. "
"``package_dir`` has no effect on where extension source files are found; it "
"only affects the source for pure Python modules.  The simplest  case, a "
"single extension module in a single C source file, is::"
msgstr ""
"擴充模組使用 ``ext_modules`` 選項指定。 ``package_dir`` 對找到擴充源文件的位"
"置沒有影響；它只影響純 Python 模組的源程式碼。最簡單的情況是單個 C 源文件中的"
"單個擴充模組："

#: ../../distutils/examples.rst:213
#, fuzzy
msgid ""
"If the :mod:`foo` extension belongs in the root package, the setup script "
"for this could be  ::"
msgstr "如果 :mod:`foo` 擴充屬於根包，則設定腳本可以是 ::"

#: ../../distutils/examples.rst:223
#, fuzzy
msgid "If the extension actually belongs in a package, say :mod:`foopkg`, then"
msgstr "如果擴充實際上屬於一個包，比如 :mod:`foopkg`，那麼"

#: ../../distutils/examples.rst:225
#, fuzzy
msgid ""
"With exactly the same source tree layout, this extension can be put in the :"
"mod:`foopkg` package simply by changing the name of the extension::"
msgstr ""
"使用完全相同的源程式碼樹佈局，只需更改擴充名即可將此擴充放入 :mod:`foopkg` 包"
"中::"

#: ../../distutils/examples.rst:236
#, fuzzy
msgid "Checking a package"
msgstr "檢查包裹"

#: ../../distutils/examples.rst:238
#, fuzzy
msgid ""
"The ``check`` command allows you to verify if your package meta-data meet "
"the minimum requirements to build a distribution."
msgstr "``check`` 命令允許您驗證您的包元資料是否滿足構建發行版的最低要求。"

#: ../../distutils/examples.rst:241
#, fuzzy
msgid ""
"To run it, just call it using your :file:`setup.py` script. If something is "
"missing, ``check`` will display a warning."
msgstr ""
"要運行它，只需使用您的 :file:`setup.py` 腳本呼叫它。如果缺少某些內容，"
"``check`` 將顯示警告。"

#: ../../distutils/examples.rst:244
#, fuzzy
msgid "Let's take an example with a simple script::"
msgstr "讓我們以一個簡單的腳本為例："

#: ../../distutils/examples.rst:250
#, fuzzy
msgid "Running the ``check`` command will display some warnings:"
msgstr "運行 ``check`` 命令會顯示一些警告："

#: ../../distutils/examples.rst:261
#, fuzzy
msgid ""
"If you use the reStructuredText syntax in the ``long_description`` field and "
"`docutils`_  is installed you can check if the syntax is fine with the "
"``check`` command, using the ``restructuredtext`` option."
msgstr ""
"如果您在“long_description”欄位中使用 reStructuredText 語法並且安裝"
"了“docutils”，您可以使用 ``restructuredtext`` 選項使用 ``check``命令檢查語法"
"是否正確。"

#: ../../distutils/examples.rst:265
#, fuzzy
msgid "For example, if the :file:`setup.py` script is changed like this::"
msgstr "例如，如果 :file:`setup.py` 腳本更改如下："

#: ../../distutils/examples.rst:280
#, fuzzy
msgid ""
"Where the long description is broken, ``check`` will be able to detect it by "
"using the :mod:`docutils` parser:"
msgstr ""
"在長描述被破壞的地方，``check`` 將能夠使用 :mod:`docutils` 解析器檢測到它："

#: ../../distutils/examples.rst:291
msgid "Reading the metadata"
msgstr "讀取元資料"

#: ../../distutils/examples.rst:293
#, fuzzy
msgid ""
"The :func:`distutils.core.setup` function provides a command-line interface "
"that allows you to query the metadata fields of a project through the "
"``setup.py`` script of a given project:"
msgstr ""
":func:`distutils.core.setup` 函式提供了一個命令列界面，允許您通過給定項目的 "
"``setup.py`` 腳本查詢項目的元資料欄位："

#: ../../distutils/examples.rst:302
#, fuzzy
msgid ""
"This call reads the ``name`` metadata by running the :func:`distutils.core."
"setup`  function. Although, when a source or binary distribution is created "
"with Distutils, the metadata fields are written in a static file called :"
"file:`PKG-INFO`. When a Distutils-based project is installed in Python, the :"
"file:`PKG-INFO` file is copied alongside the modules and packages of the "
"distribution under :file:`NAME-VERSION-pyX.X.egg-info`, where ``NAME`` is "
"the name of the project, ``VERSION`` its version as defined in the Metadata, "
"and ``pyX.X`` the major and minor version of Python like ``2.7`` or ``3.2``."
msgstr ""
"此呼叫通過運行 distutils.core.setup 函式讀取 name 元資料。雖然，當使用 "
"Distutils 建立源程式碼或二進位分發時，元資料欄位被寫入名為 PKG-INFO 的靜態文"
"件中。在 Python 中安裝基於 Distutils 的項目時，:file:`PKG-INFO` 文件將與分發"
"的模組和包一起復製到 :file:`NAME-VERSION-pyX.X.egg-info` 下，其中``NAME`` 是"
"項目的名稱，``VERSION`` 是元資料中定義的版本，``pyX.X`` 是 Python 的主要和次"
"要版本，例如 ``2.7`` 或 ``3.2 ``。"

#: ../../distutils/examples.rst:312
#, fuzzy
msgid ""
"You can read back this static file, by using the :class:`distutils.dist."
"DistributionMetadata` class and its :func:`read_pkg_file` method::"
msgstr ""
"您可以使用 distutils.dist.DistributionMetadata 類及其 read_pkg_file 方法讀取"
"此靜態文件："

#: ../../distutils/examples.rst:326
#, fuzzy
msgid ""
"Notice that the class can also be instantiated with a metadata file path to "
"loads its values::"
msgstr "請注意，該類也可以使用元資料文件路徑實例化以加載其值::"
